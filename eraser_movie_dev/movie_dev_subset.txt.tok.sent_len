import java . util . Scanner ; public class Caa { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; String op = sc . next ( ) ; int b = sc . nextInt ( ) ; if ( op . equals ( " + " ) ) { System . out . printf ( " % d " , a + b ) ; } else if ( op . equals ( " - " ) ) { System . out . printf ( " % d " , a - b ) ; } else if ( op . equals ( " * " ) ) { System . out . printf ( " % d " , a * b ) ; } else if ( op . equals ( " / " ) ) { System . out . printf ( " % d " , a / b ) ; } else { System . out . printf ( " " ) ; } System . out . println ( " " ) ; } }
import java . util . Scanner ; public class Sequence { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] num = new int [ n ] ; for ( int i = 0 ; i < n ; i + + ) { num [ i ] = scanner . nextInt ( ) ; } int countP = exe ( n , num , 1 ) ; int countM = exe ( n , num , - 1 ) ; System . out . println ( countP > countM ? countM : countP ) ; } private static int exe ( int n , int [ ] num , int sig ) { int count = 0 ; int [ ] ans = new int [ n ] ; ans [ 0 ] = sig * num [ 0 ] ; for ( int i = 0 ; i < num . length - 1 ; i + + ) { int sa = sa ( ans , num [ i + 1 ] ) ; ans [ i + 1 ] = num [ i + 1 ] + sa ; if ( plusCheck ( ans ) ) { count + + ; ans [ ans . length - 1 ] = addOne ( ans [ ans . length - 1 ] ) ; } count + = Math . abs ( sa ) ; } return count ; } private static boolean plusCheck ( int [ ] num ) { int total = 0 ; for ( int n : num ) { total + = n ; } return total = = 0 ; } private static int addOne ( int num ) { int sig = ( int ) Math . signum ( num ) ; return sig * ( Math . abs ( num ) + 1 ) ; } private static int sa ( int [ ] left , int right ) { int total = 0 ; for ( int num : left ) { total + = num ; } int sigTotal = ( int ) Math . signum ( total ) ; int sigWa = ( int ) Math . signum ( total + right ) ; if ( sigTotal ! = sigWa ) { return 0 ; } return ( - sigTotal - total ) - right ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ; public class tri { public static void main ( String [ ] args ) { / / TODO Auto-generated method stub Scanner s = new Scanner ( System.in ) ; int n = s.nextInt ( ) ; ArrayList < Long > list = new ArrayList < Long > ( ) ; for ( int i = 0 ; i < n ; i + + ) { list.add ( s.nextLong ( ) ) ; } Collections.sort ( list ) ; int cnt = 0 ; for ( int i = 0 ; i < list.size ( ) -2 ; i + + ) { for ( int j = i + 1 ; j < list.size ( ) -1 ; j + + ) { for ( int k = j + 1 ; k < list.size ( ) ; k + + ) { if ( ( list.get ( i ) ! = list.get ( j ) & & list.get ( j ) ! = list.get ( k ) & & list.get ( i ) ! = list.get ( k ) ) & & list.get ( i ) + list.get ( j ) > list.get ( k ) ) cnt + = 1 ; } } } System.out.println ( cnt ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String abc [ ] ) { Main ans = new Main ( ) ; System . out . println ( ans . solve ( ) ) ; } private long solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] array = new long [ N + 1 ] ; int i = 0 ; long sum = 0 ; while ( i < = N ) { array [ i + + ] = sc . nextLong ( ) ; sum + = array [ i - 1 ] ; } long [ ] [ ] [ ] dp = new long [ 3001 ] [ 3001 ] [ 2 ] ; long X = solve ( dp , array , 1 , 0 , N ) ; long Y = sum - X ; return X - Y ; } private long solve ( long [ ] dp , long [ ] array , int turn , int i , int j ) { if ( i > j ) return 0 ; if ( dp [ i ] [ j ] [ turn ] ! = 0 ) return dp [ i ] [ j ] [ turn ] ; if ( turn = = 1 ) { long left = array [ i ] + solve ( dp , array , 0 , i + 1 , j ) ; long right = array [ j ] + solve ( dp , array , 0 , i , j - 1 ) ; dp [ i ] [ j ] [ turn ] = Math . max ( left , right ) ; } else { long left = solve ( dp , array , 1 , i + 1 , j ) ; long right = solve ( dp , array , 1 , i , j - 1 ) ; dp [ i ] [ j ] [ turn ] = Math . min ( left , right ) ; } return dp [ i ] [ j ] [ turn ] ; } }
import java . util . Scanner ; public class InputSample { public static void main ( String [ ] args ) { int R = 0 ; int sum = 0 ; Scanner scan = new Scanner ( System . in ) ; R = scan . nextInt ( ) ; sum = R * 2 * 3.141592 ; System . out . println ( sum ) ; scan . close ( ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) { int count = 0 ; Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i + + ) { array [ i ] = sc . nextInt ( ) ; } } for ( int j = 0 ; j < array . length - 1 ; j + + ) { for ( int k = n - 1 ; j < k ; k -- ) { if ( array [ k ] < array [ k - 1 ] ) { int a = array [ k ] ; int b = array [ k - 1 ] ; array [ k ] = b ; array [ k - 1 ] = a ; count + + ; } } } for ( int i = 1 ; i < n - 1 ; i + + ) { System . out . print ( " " + a [ i ] ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; class Node { Node prev ; Node next ; int n ; Node ( ) { prev = this ; next = this ; } Node ( Node prev , Node next , int data ) { n = data ; this . prev = prev ; this . next = next ; } } public class DoublyLinkedList { static Node head = new Node ( ) ; static Node crnt = head ; static void add ( int x ) { Node tmp = new Node ( crnt , crnt . next , x ) ; crnt . next = crnt . next . prev = tmp ; crnt = tmp ; } static void insert ( int x ) { crnt = head ; add ( x ) ; } static boolean isEmpty ( ) { return head . next = = head ; } static void removeCurrentNode ( ) { if ( ! isEmpty ( ) ) { crnt . prev . next = crnt . next ; crnt . next . prev = crnt . prev ; crnt = crnt . prev ; } } static void deleteFirst ( ) { / / リストの先頭の要素を削除 crnt = head.next ; removeCurrentNode ( ) ; } static void deleteLast ( ) { crnt = head.prev ; removeCurrentNode ( ) ; } static void deleteX ( int x ) { crnt = head.next ; while ( crnt ! = head ) { if ( crnt.n = = x ) { removeCurrentNode ( ) ; break ; } crnt = crnt.next ; } } static void output ( ) { crnt = head.next ; if ( ! isEmpty ( ) ) { System.out.print ( crnt.n ) ; crnt = crnt.next ; while ( crnt ! = head ) { System.out.print ( " " + crnt.n ) ; crnt = crnt.next ; } System.out.println ( ) ; } } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; String s ; int x ; int n = scan.nextInt ( ) ; for ( int i = 0 ; i < n ; i + + ) { s = scan.next ( ) ; if ( s.equals ( " insert " ) ) { x = scan.nextInt ( ) ; insert ( x ) ; } else if ( s.equals ( " delete " ) ) { x = scan.nextInt ( ) ; deleteX ( x ) ; } else if ( s.equals ( " deleteFirst " ) ) { deleteFirst ( ) ; } else { deleteLast ( ) ; } } output ( ) ; scan.close ( ) ; } }
import java . util . Scanner ; public class B _ PowerSocket { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int i = 1 ; int c = 0 ; while ( i < b ) { i = i + a - 1 ; c + + ; } System . out . println ( c ) ; / / Scannerクラスのインスタンスをクローズ scanner.close ( ) ; } }
import java . util . Scanner ; public class ah { public static void main ( string [ ] args ) { Scanner in = new Scanner ( System in ) ; int t = in . nextInt ( ) ; int sum = 0 ; int arr = new int [ t ] ; while ( t -- > 0 ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; sum - = a ; sum + = b ; arr [ t ] = sum ; } Arrays . sort ( arr ) System . out . println ( ar [ ar . length - 1 ] ) ; } }
