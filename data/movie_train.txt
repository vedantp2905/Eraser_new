c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] Y = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] T = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] flg = 0 for i in range ( 1 , 3 ) : if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) != Y [ 0 ] or ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) != Y [ 1 ] : flg = 1 break if flg < 1 : for i in range ( 1 , 3 ) : if ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) != T [ 0 ] or ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) != T [ 1 ] : print ( " T " , i ) flg = 1 break print ( [ " Yes " , " No " ] [ flg ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for b1 in range ( 101 ) : a = [ c [ 0 ] [ 0 ] - b1 , c [ 1 ] [ 0 ] - b1 , c [ 2 ] [ 0 ] - b1 ] b = [ b1 , c [ 0 ] [ 1 ] - a [ 0 ] , c [ 0 ] [ 2 ] - a [ 0 ] ] if all ( a [ i ] + b [ j ] == c [ i ] [ j ] for j in range ( 3 ) for i in range ( 3 ) ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
l = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) l . append ( [ x , y , z ] ) c11 = l [ 0 ] [ 0 ] c12 = l [ 0 ] [ 1 ] c13 = l [ 0 ] [ 2 ] c21 = l [ 1 ] [ 0 ] c22 = l [ 1 ] [ 1 ] c23 = l [ 1 ] [ 2 ] c31 = l [ 2 ] [ 0 ] c32 = l [ 2 ] [ 1 ] c33 = l [ 2 ] [ 2 ] if ( c21 - c11 ) == ( c22 - c12 ) == ( c23 - c13 ) and ( c31 - c11 ) == ( c32 - c12 ) == ( c33 - c13 ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] d = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] if ( a == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) and ( a == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : if ( b == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( b == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : if ( d == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( d == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
from collections import deque C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( C [ 0 ] [ 0 ] + 1 ) : q = deque ( [ C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i , C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i ] ) flag = 0 for j in range ( 1 , 3 ) : d = set ( ) for k in range ( 3 ) : d . add ( C [ j ] [ k ] - q . popleft ( ) ) if len ( d ) == 1 : flag += 1 if flag == 2 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != c [ i ] [ ( j + 1 ) % 3 ] + c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c_lst = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] if c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] == c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 0 ] and c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 1 ] [ 2 ] + c_lst [ 2 ] [ 1 ] and c_lst [ 0 ] [ 0 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 0 ] [ 2 ] + c_lst [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] + b [ 1 ] == a [ 1 ] + b [ 0 ] and a [ 2 ] + c [ 0 ] == a [ 0 ] + c [ 2 ] and b [ 2 ] + c [ 1 ] == b [ 1 ] + c [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = False for a1 in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if c [ 1 ] [ 1 ] - b2 == a2 and c [ 1 ] [ 2 ] - b3 == a2 : if c [ 2 ] [ 1 ] - b2 == a3 and c [ 2 ] [ 2 ] - b3 == a3 : ans = True break if ans == True : print ( " Yes " ) else : print ( " No " )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : c = grid [ i ] [ 0 ] for j in range ( 3 ) : grid [ i ] [ j ] -= c ans = ' Yes ' if grid [ 0 ] == grid [ 1 ] and grid [ 1 ] == grid [ 2 ] else ' No ' print ( ans )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = l [ 0 ] [ 0 ] y = l [ 0 ] [ 1 ] z = l [ 0 ] [ 2 ] a = 0 b = l [ 1 ] [ 0 ] - x c = l [ 2 ] [ 0 ] - x if b + y == l [ 1 ] [ 1 ] and b + z == l [ 1 ] [ 2 ] and c + y == l [ 2 ] [ 1 ] and c + z == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) diff1 = c21 - c11 diff2 = c31 - c21 if diff1 == ( c22 - c12 ) and diff2 == ( c32 - c22 ) and diff1 == ( c23 - c13 ) and diff2 == ( c33 - c23 ) : print ( " Yes " ) else : print ( " No " )
def solve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : a0 = i b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = " No " for a1 in c [ 0 ] : for a2 in c [ 1 ] : for a3 in c [ 2 ] : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 if a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] : ans = " Yes " break if ans == " Yes " : break if ans == " Yes " : break print ( ans )
xy = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = sum ( map ( sum , xy ) ) if result % 3 != 0 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 0 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 2 ] ) * 3 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 2 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 0 ] ) * 3 : print ( " No " ) exit ( ) else : print ( " Yes " )
C = [ 0 ] * 3 ; A = [ 0 ] * 3 d1 = 0 ; d2 = 0 ; e1 = 0 ; e2 = 0 ; z = 0 ; p = 0 for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) C [ i ] = [ c1 , c2 , c3 ] A [ i ] = [ 0 , 0 , 0 ] d1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] ; d2 = C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] e1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] ; e2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] z = C [ 0 ] [ 0 ] A [ 0 ] [ 0 ] = z ; A [ 0 ] [ 1 ] = z + e1 ; A [ 0 ] [ 2 ] = z + e2 A [ 1 ] [ 0 ] = z + d1 ; A [ 1 ] [ 1 ] = z + e1 + d1 ; A [ 1 ] [ 2 ] = z + d1 + e2 A [ 2 ] [ 0 ] = z + d2 ; A [ 2 ] [ 1 ] = z + d2 + e1 ; A [ 2 ] [ 2 ] = z + d2 + e2 for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] == A [ i ] [ j ] : p = p + 1 print ( " Yes " if p == 9 else " No " )
def check ( a , b ) : for i in range ( 3 ) : diffc [ i ] = c [ i ] [ a ] - c [ i ] [ b ] diffr [ i ] = c [ a ] [ i ] - c [ b ] [ i ] if diffc [ 0 ] != diffc [ 1 ] or diffc [ 1 ] != diffc [ 2 ] or diffr [ 0 ] != diffr [ 1 ] or diffr [ 1 ] != diffr [ 2 ] : print ( " No " ) exit ( ) c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] diffr = [ 0 ] * 3 diffc = [ 0 ] * 3 check ( 0 , 1 ) check ( 1 , 2 ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) d1 = [ c2 [ i ] - c1 [ i ] for i in range ( 3 ) ] d2 = [ c3 [ i ] - c1 [ i ] for i in range ( 3 ) ] if ( d1 [ 0 ] == d1 [ 1 ] and d1 [ 0 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] and d2 [ 0 ] == d2 [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
C = [ [ 0 ] * 3 for i in range ( 3 ) ] for ii in range ( 3 ) : C [ ii ] = list ( map ( int , input ( ) . split ( ) ) ) Flag = 1 for ii in range ( 1 , 3 ) : for jj in range ( 1 , 3 ) : if C [ ii - 1 ] [ jj - 1 ] - C [ ii ] [ jj - 1 ] != C [ ii - 1 ] [ jj ] - C [ ii ] [ jj ] : Flag = 0 break if Flag == 0 : break if Flag == 1 : print ( ' Yes ' ) else : print ( ' No ' )
def solve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
c = [ ] for h in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for n in range ( 1 , 3 ) : for h in range ( 1 , 3 ) : if c [ h ] [ n ] != a [ h ] + b [ n ] : print ( " No " ) exit ( ) print ( " Yes " )
l = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) l . append ( [ c1 , c2 , c3 ] ) b1 = l [ 0 ] [ 0 ] b2 = l [ 1 ] [ 0 ] b3 = l [ 2 ] [ 0 ] flag = 0 for i in range ( 3 ) : if not ( l [ 0 ] [ 1 ] - b1 == l [ 1 ] [ 1 ] - b2 == l [ 2 ] [ 1 ] - b3 ) : flag = 1 if not ( l [ 0 ] [ 2 ] - b1 == l [ 1 ] [ 2 ] - b2 == l [ 2 ] [ 2 ] - b3 ) : flag = 1 if flag == 1 : print ( ' No ' , flush = True ) else : print ( ' Yes ' , flush = True )
import sys C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 2 ) : for i in range ( 2 ) : if C [ i + 1 ] [ j + 1 ] - C [ i + 1 ] [ j ] != C [ i ] [ 1 + j ] - C [ i ] [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a2 = l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] a3 = l [ 0 ] [ 2 ] - l [ 0 ] [ 0 ] b2 = l [ 1 ] [ 0 ] - l [ 0 ] [ 0 ] b3 = l [ 2 ] [ 0 ] - l [ 0 ] [ 0 ] is_takahashi_true = True for i in range ( 1 , 3 ) : ta2 = l [ i ] [ 1 ] - l [ i ] [ 0 ] ta3 = l [ i ] [ 2 ] - l [ i ] [ 0 ] tb2 = l [ 1 ] [ i ] - l [ 0 ] [ i ] tb3 = l [ 2 ] [ i ] - l [ 0 ] [ i ] if a2 != ta2 or a3 != ta3 or b2 != tb2 or b3 != tb3 : is_takahashi_true = False print ( " YNeos " [ not is_takahashi_true : : 2 ] )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] ans = True for i in range ( 2 ) : check = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] for j in range ( 1 , 3 ) : if check != c [ i + 1 ] [ j ] - c [ i ] [ j ] : ans = False break for i in range ( 2 ) : check = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] for j in range ( 1 , 3 ) : if check != c [ j ] [ i + 1 ] - c [ j ] [ i ] : ans = False break print ( ' Yes ' if ans else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] j = True for i in range ( 2 ) : if abs ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) == abs ( c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ) == abs ( c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : pass else : j = False for i in range ( 2 ) : if abs ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ) == abs ( c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] ) == abs ( c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : pass else : j = False if j : print ( " Yes " ) else : print ( " No " )
d = [ None ] * 3 for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) d [ i ] = [ c [ i ] - c [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( d [ i ] == d [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
f1 , f2 , f3 = map ( int , input ( ) . split ( ) ) d1 = f2 - f1 d2 = f3 - f2 flag = True for _ in range ( 2 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if c2 - c1 != d1 or c3 - c2 != d2 : flag = False break if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : ans = " No " break else : continue break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 + c5 + c9 == c1 + c8 + c6 == c4 + c2 + c9 == c4 + c8 + c3 == c7 + c2 + c6 == c7 + c5 + c3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in list ( input ( ) . split ( ) ) ] ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ input ( ) . split ( ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : c [ i ] [ j ] = int ( c [ i ] [ j ] ) for i in range ( 100 ) : for j in range ( 100 ) : if i + j == c [ 0 ] [ 0 ] : a0 , b0 = i , j a1 , b1 = c [ 1 ] [ 0 ] - b0 , c [ 0 ] [ 1 ] - a0 a2 , b2 = c [ 2 ] [ 0 ] - b0 , c [ 0 ] [ 2 ] - a0 if ( a1 + b1 == c [ 1 ] [ 1 ] ) and ( a1 + b2 == c [ 1 ] [ 2 ] ) and ( a2 + b1 == c [ 2 ] [ 1 ] ) and ( a2 + b2 == c [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c1_2 = [ ] for i in range ( 3 ) : c1_1 = [ ] for j in range ( 2 ) : c1_1 . append ( c [ i ] [ j ] - c [ i ] [ j + 1 ] ) c1_2 . append ( c1_1 ) c1_1 = [ ] for i in range ( 3 ) : for j in range ( 1 ) : c1_1 . append ( c1_2 [ i ] [ j ] - c1_2 [ i ] [ j + 1 ] ) if ( len ( set ( c1_1 ) ) == 1 ) : print ( " Yes " ) else : print ( " No " )
A = [ ] for i in range ( 3 ) : A . append ( list ( map ( int , input ( ) . split ( ) ) ) ) t = 0 if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 0 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 0 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 2 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 2 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 0 ] [ 0 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 0 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 0 ] - A [ 2 ] [ 1 ] : if A [ 0 ] [ 2 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 2 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 2 ] [ 1 ] : t = 1 if t == 1 : print ( " Yes " ) else : print ( " No " )
def solve ( ) : c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if not c [ i ] [ j ] - c [ i + 1 ] [ j ] == c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : return ' No ' for i in range ( 2 ) : for j in range ( 2 ) : if not c [ j ] [ i ] - c [ j ] [ i + 1 ] == c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] : return ' No ' return ' Yes ' if __name__ == ' __main__ ' : print ( solve ( ) )
import numpy as np import sys sys . setrecursionlimit ( 10 ** 5 + 10 ) def resolve ( ) : G = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) G [ 1 ] -= G [ 0 ] G [ 2 ] -= G [ 0 ] if len ( set ( G [ 1 ] ) ) == 1 and len ( set ( G [ 2 ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) resolve ( )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e + i == b + f + g == c + d + h == a + f + h == c + e + g == b + d + i : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] f = True a , b = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ i ] [ 1 ] == a and c [ i ] [ 1 ] - c [ i ] [ 2 ] == b ) : f = False a , b = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if not ( c [ 0 ] [ i ] - c [ 1 ] [ i ] == a and c [ 1 ] [ i ] - c [ 2 ] [ i ] == b ) : f = False print ( " Yes " if f else " No " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 0 , c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 if a2 + b2 != c [ 1 ] [ 1 ] : continue if a3 + b2 != c [ 2 ] [ 1 ] : continue b3 = c [ 0 ] [ 2 ] - a1 if a2 + b3 != c [ 1 ] [ 2 ] : continue if a3 + b3 != c [ 2 ] [ 2 ] : continue print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c += [ list ( map ( int , input ( ) . split ( ) ) ) ] a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] c1 = [ c [ 0 ] [ i ] + a1 for i in range ( 3 ) ] c2 = [ c [ 0 ] [ i ] + a2 for i in range ( 3 ) ] if c [ 1 ] == c1 and c [ 2 ] == c2 : print ( " Yes " ) else : print ( " No " )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ds = [ ] for c1 , c2 , c3 in grid : ds . append ( [ c1 - c2 , c2 - c3 , c3 - c1 ] ) count = 0 for i in range ( 3 ) : if ds [ 0 ] [ i ] == ds [ 1 ] [ i ] == ds [ 2 ] [ i ] : count += 1 print ( ' Yes ' if count == 3 else ' No ' )
C = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) a = [ None , None , None ] b = [ None , None , None ] for a1 in range ( 101 ) : a [ 0 ] = a1 b [ 0 ] = C [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = C [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = C [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = C [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = C [ 2 ] [ 0 ] - b [ 0 ] ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = ' No ' print ( ans )
import numpy as np def main ( ) -> None : c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] , dtype = int ) a = np . empty ( 3 , dtype = int ) b = np . empty ( 3 , dtype = int ) a [ 0 ] = 0 range_3 = range ( 3 ) for j in range_3 : b [ j ] = c_1 [ j ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i , a_i in enumerate ( a ) : for j , b_j in enumerate ( b ) : if a_i + b_j != c [ i ] [ j ] : good = False if good : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c_table = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c_table [ 0 ] [ i ] for i in range ( 3 ) : a [ i ] = c_table [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c_table [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def main ( ) : mat = [ ] for _ in range ( 3 ) : mat . append ( [ int ( c ) for c in input ( ) . split ( ) ] ) for j in range ( 2 ) : ref = mat [ 0 ] [ j + 1 ] - mat [ 0 ] [ j ] if ref != mat [ 1 ] [ j + 1 ] - mat [ 1 ] [ j ] or ref != mat [ 2 ] [ j + 1 ] - mat [ 2 ] [ j ] : return " No " for i in range ( 2 ) : ref = mat [ i + 1 ] [ 0 ] - mat [ i ] [ 0 ] if ref != mat [ i + 1 ] [ 1 ] - mat [ i ] [ 1 ] or ref != mat [ i + 1 ] [ 2 ] - mat [ i ] [ 2 ] : return " No " return " Yes " if __name__ == ' __main__ ' : print ( main ( ) )
def main ( ) : a = list ( map ( int , input ( ) . split ( ) ) ) a1 , a2 = a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 1 ] b = list ( map ( int , input ( ) . split ( ) ) ) b1 , b2 = b [ 1 ] - b [ 0 ] , b [ 2 ] - b [ 1 ] c = list ( map ( int , input ( ) . split ( ) ) ) c1 , c2 = c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] if a1 == b1 == c1 and a2 == b2 == c2 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] try : assert ( sum ( c [ 2 ] ) - sum ( c [ 1 ] ) ) % 3 == 0 assert ( sum ( c [ 1 ] ) - sum ( c [ 0 ] ) ) % 3 == 0 assert ( sum ( [ line [ 2 ] for line in c ] ) - sum ( [ line [ 1 ] for line in c ] ) ) % 3 == 0 assert ( sum ( [ line [ 1 ] for line in c ] ) - sum ( [ line [ 0 ] for line in c ] ) ) % 3 == 0 print ( " Yes " ) except AssertionError : print ( " No " )
def main ( ) : A = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : A [ i ] [ j ] -= A [ 0 ] [ j ] if ( A [ 1 ] [ 0 ] == A [ 1 ] [ 1 ] == A [ 1 ] [ 2 ] ) and ( A [ 2 ] [ 0 ] == A [ 2 ] [ 1 ] == A [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
A1 = 0 B1 , B2 , B3 = map ( int , input ( ) . split ( ) ) C1 , C2 , C3 = map ( int , input ( ) . split ( ) ) D1 , D2 , D3 = map ( int , input ( ) . split ( ) ) flag = 0 if not ( C2 - B2 == C1 - B1 and C3 - B3 == C1 - B1 and C2 - B2 == C3 - B3 ) : flag = 1 if not ( D2 - B2 == D1 - B1 and D3 - B3 == D1 - B1 and D2 - B2 == D3 - B3 ) : flag = 1 print ( " Yes " if flag == 0 else " No " )
c = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) c . append ( [ x , y , z ] ) if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) and ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c . append ( [ c1 , c2 , c3 ] ) a1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] a2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] b1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b2 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] ans = " No " if c [ 1 ] [ 1 ] + a1 == c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] + b1 == c [ 0 ] [ 1 ] : if c [ 1 ] [ 2 ] + a2 == c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] + b1 == c [ 0 ] [ 2 ] : if c [ 2 ] [ 1 ] + a1 == c [ 2 ] [ 0 ] and c [ 2 ] [ 1 ] + b2 == c [ 0 ] [ 1 ] : if c [ 2 ] [ 2 ] + a2 == c [ 2 ] [ 0 ] and c [ 2 ] [ 2 ] + b2 == c [ 0 ] [ 2 ] : ans = " Yes " print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 a [ 1 ] = c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False if flag == True : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) j1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] j2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : _j1 = c [ i ] [ 0 ] - c [ i ] [ 1 ] _j2 = c [ i ] [ 1 ] - c [ i ] [ 2 ] if j1 == _j1 and j2 == _j2 : continue print ( " No " ) break else : print ( " Yes " )
import copy line = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ansB = copy . copy ( line [ 0 ] ) ansA = [ 0 , line [ 1 ] [ 0 ] - ansB [ 0 ] , line [ 2 ] [ 0 ] - ansB [ 0 ] ] for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if ansA [ i ] + ansB [ j ] != line [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
N = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] if N [ 0 ] [ 0 ] - N [ 0 ] [ 1 ] == N [ 1 ] [ 0 ] - N [ 1 ] [ 1 ] == N [ 2 ] [ 0 ] - N [ 2 ] [ 1 ] and N [ 0 ] [ 1 ] - N [ 0 ] [ 2 ] == N [ 1 ] [ 1 ] - N [ 1 ] [ 2 ] == N [ 2 ] [ 1 ] - N [ 2 ] [ 2 ] and N [ 0 ] [ 0 ] - N [ 1 ] [ 0 ] == N [ 0 ] [ 1 ] - N [ 1 ] [ 1 ] == N [ 0 ] [ 2 ] - N [ 1 ] [ 2 ] and N [ 1 ] [ 0 ] - N [ 2 ] [ 0 ] == N [ 1 ] [ 1 ] - N [ 2 ] [ 1 ] == N [ 1 ] [ 2 ] - N [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
m = [ ] for i in range ( 3 ) : m . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True l = [ ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : l = [ ] for k in range ( 3 ) : l . append ( m [ i ] [ k ] - m [ j ] [ k ] ) if len ( set ( l ) ) != 1 : flag = False for i in range ( 2 ) : for j in range ( 1 , 3 ) : l = [ ] for k in range ( 3 ) : l . append ( m [ k ] [ i ] - m [ k ] [ j ] ) if len ( set ( l ) ) != 1 : flag = False print ( " Yes " if flag else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : if ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) == ( c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ) == ( c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : continue else : print ( ' No ' ) exit ( 0 ) for j in range ( 2 ) : if ( c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ) == ( c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ) == ( c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ) : continue else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = ' No ' if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] and C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : if C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] and C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] : result = ' Yes ' print ( result )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a0 in range ( - 100 , 201 ) : for a1 in range ( - 100 , 201 ) : for a2 in range ( - 100 , 201 ) : if c [ 0 ] [ 0 ] - a0 == c [ 1 ] [ 0 ] - a1 == c [ 2 ] [ 0 ] - a2 : if c [ 0 ] [ 1 ] - a0 == c [ 1 ] [ 1 ] - a1 == c [ 2 ] [ 1 ] - a2 : if c [ 0 ] [ 2 ] - a0 == c [ 1 ] [ 2 ] - a1 == c [ 2 ] [ 2 ] - a2 : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 x = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] y = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] z = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] != x ) : count + = 1 if ( c [ i ] [ 2 ] - c [ i ] [ 1 ] != y ) : count + = 1 if ( c [ i ] [ 0 ] - c [ i ] [ 2 ] != z ) : count + = 1 X = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] Y = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] Z = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] for j in range ( 1 , 3 ) : if ( c [ 0 ] [ i ] - c [ 1 ] [ i ] != X ) : count + = 1 if ( c [ 1 ] [ i ] - c [ 2 ] [ i ] != Y ) : count + = 1 if ( c [ 2 ] [ i ] - c [ 0 ] [ i ] != Z ) : count + = 1 if ( count == 0 ) : print ( " Yes " ) else : print ( " No " )
import sys , math , itertools , heapq , collections , bisect input = lambda : sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf-8 ' ) sys . setrecursionlimit ( 10 ** 8 ) inf = float ( ' inf ' ) ans = count = 0 B = list ( map ( int , input ( ) . split ( ) ) ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = ' No ' print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if C [ i + 1 ] [ j ] - C [ i ] [ j ] != C [ i + 1 ] [ j + 1 ] - C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = False print ( ' Yes ' if ans else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : a = c [ 0 ] [ 0 ] - c [ 0 ] [ i ] if c [ 1 ] [ 0 ] - a != c [ 1 ] [ i ] or c [ 2 ] [ 0 ] - a != c [ 2 ] [ i ] : ans = " No " for i in range ( 1 , 3 ) : a = c [ 0 ] [ 0 ] - c [ i ] [ 0 ] if c [ 0 ] [ 1 ] - a != c [ i ] [ 1 ] or c [ 0 ] [ 2 ] - a != c [ i ] [ 2 ] : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
import math , string , itertools , fractions , heapq , collections , re , array , bisect , sys , random , time , copy , functools sys . setrecursionlimit ( 10 ** 7 ) inf = 10 ** 20 eps = 1.0 / 10 ** 10 mod = 10 ** 9 + 7 dd = [ ( - 1 , 0 ) , ( 0 , 1 ) , ( 1 , 0 ) , ( 0 , - 1 ) ] ddn = [ ( - 1 , 0 ) , ( - 1 , 1 ) , ( 0 , 1 ) , ( 1 , 1 ) , ( 1 , 0 ) , ( 1 , - 1 ) , ( 0 , - 1 ) , ( - 1 , - 1 ) ] def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ] def LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LS ( ) : return sys . stdin . readline ( ) . split ( ) def I ( ) : return int ( sys . stdin . readline ( ) ) def F ( ) : return float ( sys . stdin . readline ( ) ) def pf ( s ) : return print ( s , flush = True ) C = [ [ 0 , 0 , 0 , 0 ] ] for i in range ( 3 ) : C . append ( [ 0 ] + LI ( ) ) if ( C [ 2 ] [ 2 ] + C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] ) and ( C [ 1 ] [ 1 ] + C [ 3 ] [ 3 ] == C [ 1 ] [ 3 ] + C [ 3 ] [ 1 ] ) and ( C [ 2 ] [ 2 ] + C [ 3 ] [ 3 ] == C [ 2 ] [ 3 ] + C [ 3 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
import sys c = [ [ int ( i ) for i in l . split ( ) ] for l in sys . stdin ] for i in range ( 2 ) : stack = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] for j in range ( 3 ) : if stack != c [ i ] [ j ] - c [ i + 1 ] [ j ] : print ( ' No ' ) exit ( ) for i in range ( 2 ) : stack = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] for j in range ( 3 ) : if stack != c [ j ] [ i ] - c [ j ] [ i + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] and \ c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
g = [ ] for i in range ( 3 ) : g . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : offset = g [ i ] [ 0 ] - g [ 0 ] [ 0 ] if not ( ( g [ i ] [ 1 ] - g [ 0 ] [ 1 ] == offset ) and ( g [ i ] [ 2 ] - g [ 0 ] [ 2 ] == offset ) ) : print ( " No " ) exit ( ) print ( " Yes " )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if li [ 0 ] [ 0 ] - li [ 0 ] [ 1 ] == li [ 1 ] [ 0 ] - li [ 1 ] [ 1 ] and li [ 1 ] [ 0 ] - li [ 1 ] [ 1 ] == li [ 2 ] [ 0 ] - li [ 2 ] [ 1 ] : if li [ 0 ] [ 1 ] - li [ 0 ] [ 2 ] == li [ 1 ] [ 1 ] - li [ 1 ] [ 2 ] and li [ 1 ] [ 1 ] - li [ 1 ] [ 2 ] == li [ 2 ] [ 1 ] - li [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
from itertools import product as p c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 a [ 0 ] = 0 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , j in p ( range ( 3 ) , range ( 3 ) ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : print ( ' Yes ' )
a , b , c = map ( int , input ( ) . split ( ) ) aa , bb , cc = map ( int , input ( ) . split ( ) ) aaa , bbb , ccc = map ( int , input ( ) . split ( ) ) ans = " No " if a - aa == b - bb and b - bb == c - cc : if aa - aaa == bb - bbb and bb - bbb == cc - ccc : if a - b == aa - bb and aa - bb == aaa - bbb : if b - c == bb - cc and bb - cc == bbb - ccc : ans = " Yes " print ( ans )
import numpy as np X = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) T = True if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False X = X . T if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False print ( " Yes " if T else " No " )
A = [ ] for i in range ( 3 ) : B = list ( map ( int , input ( ) . split ( ) ) ) A . append ( B ) if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] != A [ 0 ] [ 1 ] - A [ 1 ] [ 1 ] : print ( ' No ' ) exit ( 0 ) if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] != A [ 0 ] [ 2 ] - A [ 1 ] [ 2 ] : print ( ' No ' ) exit ( 0 ) if A [ 1 ] [ 0 ] - A [ 2 ] [ 0 ] != A [ 1 ] [ 1 ] - A [ 2 ] [ 1 ] : print ( ' No ' ) exit ( 0 ) if A [ 1 ] [ 0 ] - A [ 2 ] [ 0 ] != A [ 1 ] [ 2 ] - A [ 2 ] [ 2 ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( max ( C [ 0 ] ) + 1 ) : flg = True a1 = i b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if a2 + b2 != C [ 1 ] [ 1 ] or a2 + b3 != C [ 1 ] [ 2 ] or a3 + b2 != C [ 2 ] [ 1 ] or a3 + b3 != C [ 2 ] [ 2 ] : flg = False if flg == True : print ( " Yes " ) exit ( ) print ( " No " )
r = range M = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in r ( 3 ) ] for i in r ( 2 ) : x = M [ 0 ] [ i ] - M [ 0 ] [ i + 1 ] y = M [ i ] [ 0 ] - M [ i + 1 ] [ 0 ] for j in r ( 3 ) : if x != M [ j ] [ i ] - M [ j ] [ i + 1 ] or y != M [ i ] [ j ] - M [ i + 1 ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c_ = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_ ) if c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] and c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( c [ 0 ] [ 0 ] + 1 ) : b = [ c [ 0 ] [ 0 ] - i , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i ] a = [ i , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] t = 1 for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != a [ j ] + b [ k ] : t = 0 break if t : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] \ == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] \ == c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
def input ( ) : import sys return sys . stdin . readline ( ) . rstrip ( ) def main ( ) : import math import collections import itertools cs = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : tmp_diff = [ 0 ] * 3 for j in range ( 3 ) : tmp_diff [ j ] = cs [ i ] [ j ] - cs [ i + 1 ] [ j ] if len ( set ( tmp_diff ) ) == 1 : pass else : print ( " No " ) exit ( ) for i in range ( 2 ) : tmp_diff = [ 0 ] * 3 for j in range ( 3 ) : tmp_diff [ j ] = cs [ j ] [ i ] - cs [ j ] [ i + 1 ] if len ( set ( tmp_diff ) ) == 1 : pass else : print ( " No " ) exit ( ) print ( " Yes " ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( c ) : for a1 in range ( c [ 0 ] [ 0 ] ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] a = [ a1 ] + [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) ] for ai in range ( len ( a ) ) : for bi in range ( len ( b ) ) : if c [ ai ] [ bi ] != a [ ai ] + b [ bi ] : print ( ' No ' ) return print ( ' Yes ' ) check ( c )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] and a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] OK = False for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : a = [ a1 , a2 , a3 ] ok = True for j in range ( 3 ) : v = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 2 ) : if c [ i + 1 ] [ j ] - a [ i + 1 ] != v : ok = False if ok : OK = True if OK : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and b [ 0 ] - c [ 0 ] == b [ 1 ] - c [ 1 ] == b [ 2 ] - c [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
def resolve ( ) : grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] is_flag = True for i in range ( 3 ) : A = grid [ 0 ] [ i - 1 ] - grid [ 0 ] [ i ] C = grid [ 2 ] [ i - 1 ] - grid [ 2 ] [ i ] B = grid [ 1 ] [ i - 1 ] - grid [ 1 ] [ i ] if A == B and B == C : pass else : is_flag = False print ( ' Yes ' ) if is_flag else print ( ' No ' ) if __name__ == " __main__ " : resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 ok = True b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
def i ( ) : return map ( int , input ( ) . split ( ) ) a , b , c = i ( ) d , e , f = i ( ) g , h , i = i ( ) print ( ' Yes ' if ( d - a == e - b == f - c ) and ( g - d == h - e == i - f ) and ( b - a == e - d == h - g ) and ( c - b == f - e == i - h ) else ' No ' )
import sys input = sys . stdin . readline def main ( ) : C = [ ] for _ in range ( 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) is_yes = True for j in range ( 2 ) : tmp = 0 for i in range ( 3 ) : if i == 0 : tmp = C [ j + 1 ] [ i ] - C [ j ] [ i ] else : if tmp != C [ j + 1 ] [ i ] - C [ j ] [ i ] : is_yes = False break for i in range ( 2 ) : tmp = 0 for j in range ( 3 ) : if j == 0 : tmp = C [ j ] [ i + 1 ] - C [ j ] [ i ] else : if tmp != C [ j ] [ i + 1 ] - C [ j ] [ i ] : is_yes = False break if is_yes : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " No " for a_1 in range ( 101 ) : b_1 = c [ 0 ] [ 0 ] - a_1 b_2 = c [ 0 ] [ 1 ] - a_1 b_3 = c [ 0 ] [ 2 ] - a_1 a_2 = c [ 1 ] [ 0 ] - b_1 a_3 = c [ 2 ] [ 0 ] - b_1 if a_2 + b_2 == c [ 1 ] [ 1 ] and a_2 + b_3 == c [ 1 ] [ 2 ] and a_3 + b_2 == c [ 2 ] [ 1 ] and a_3 + b_3 == c [ 2 ] [ 2 ] : ans = " Yes " break print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) arr = [ [ c11 , c12 , c13 ] , [ c21 , c22 , c23 ] , [ c31 , c32 , c33 ] ] row_dis = [ ] col_dis = [ ] for i in range ( 3 ) : row_dis . append ( [ arr [ 0 ] [ i ] - arr [ 1 ] [ i ] , arr [ 0 ] [ i ] - arr [ 2 ] [ i ] , arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ] ) col_dis . append ( [ arr [ i ] [ 0 ] - arr [ i ] [ 1 ] , arr [ i ] [ 0 ] - arr [ i ] [ 2 ] , arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ] ) if row_dis [ 0 ] == row_dis [ 1 ] == row_dis [ 2 ] and col_dis [ 0 ] == col_dis [ 1 ] == col_dis [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np def test ( ) : c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) a = c - np . min ( c , axis = 0 ) if a [ 0 ] [ 0 ] == a [ 0 ] [ 1 ] == a [ 0 ] [ 2 ] and a [ 1 ] [ 0 ] == a [ 1 ] [ 1 ] == a [ 1 ] [ 2 ] and a [ 2 ] [ 0 ] == a [ 2 ] [ 1 ] == a [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : test ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ab = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = " Yes " for i in range ( 3 ) : if ans == " Yes " : for j in range ( 3 ) : if c [ i ] [ j ] != ab [ i ] + ab [ 3 + j ] : ans = " No " break print ( ans )
import numpy as np c = [ ] for i in range ( 3 ) : c . append ( list ( map ( lambda x : int ( x ) , input ( ) . split ( ) ) ) ) c = np . array ( c ) ans = ' Yes ' tmp = c [ : , 0 ] - c [ : , 1 ] if np . min ( tmp ) != np . max ( tmp ) : ans = ' No ' tmp = c [ : , 0 ] - c [ : , 2 ] if np . min ( tmp ) != np . max ( tmp ) : ans = ' No ' tmp = c [ 0 , : ] - c [ 1 , : ] if np . min ( tmp ) != np . max ( tmp ) : ans = ' No ' tmp = c [ 0 , : ] - c [ 2 , : ] if np . min ( tmp ) != np . max ( tmp ) : ans = ' No ' print ( ans )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) ; d , e , f = m ( ) ; g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) c1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] c2 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] if all ( c [ 1 ] + c1 == c [ 0 ] ) and all ( c [ 2 ] + c2 == c [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
row1 = list ( map ( int , input ( ) . split ( ) ) ) row2 = list ( map ( int , input ( ) . split ( ) ) ) row3 = list ( map ( int , input ( ) . split ( ) ) ) if ( row1 [ 1 ] - row1 [ 0 ] != row2 [ 1 ] - row2 [ 0 ] or row1 [ 1 ] - row1 [ 0 ] != row3 [ 1 ] - row3 [ 0 ] or row1 [ 2 ] - row1 [ 1 ] != row2 [ 2 ] - row2 [ 1 ] or row1 [ 2 ] - row1 [ 1 ] != row3 [ 2 ] - row3 [ 1 ] ) : print ( ' No ' ) elif ( row1 [ 0 ] - row2 [ 0 ] != row1 [ 1 ] - row2 [ 1 ] or row1 [ 0 ] - row2 [ 0 ] != row1 [ 2 ] - row2 [ 2 ] or row1 [ 0 ] - row3 [ 0 ] != row1 [ 1 ] - row3 [ 1 ] or row1 [ 0 ] - row3 [ 0 ] != row1 [ 2 ] - row3 [ 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
def main ( ) : C = [ [ 0 for _ in range ( 3 ) ] for _ in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) possible = True for i in range ( 1 , 3 ) : tmp = C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != tmp : possible = False break for j in range ( 1 , 3 ) : tmp = C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] for i in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i ] [ j - 1 ] != tmp : possible = False break if possible : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] \ and C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] \ and C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] \ and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) a = [ 0 ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] for j in range ( 1 , 3 ) : a . append ( c [ j ] [ j ] - b [ j ] ) ans = ' Yes ' for k in range ( 3 ) : for m in range ( 3 ) : if c [ k ] [ m ] != a [ k ] + b [ m ] : ans = ' No ' break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 and c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] Bs = [ C [ 0 ] [ i ] for i in range ( 3 ) ] As = [ 0 , C [ 1 ] [ 0 ] - Bs [ 0 ] , C [ 2 ] [ 0 ] - Bs [ 0 ] ] if all ( As [ i ] + Bs [ j ] == C [ i ] [ j ] for i in range ( 3 ) for j in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
import sys , math , fractions , itertools YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : flag = True for i in range ( 2 ) : D = [ ] for j in range ( 3 ) : d = c [ i + 1 ] [ j ] - c [ i ] [ j ] D . append ( d ) if len ( set ( D ) ) != 1 : flag = False for i in range ( 2 ) : D = [ ] for j in range ( 3 ) : d = c [ j ] [ i + 1 ] - c [ j ] [ i ] D . append ( d ) if len ( set ( D ) ) != 1 : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
import sys input = sys . stdin . readline C = [ [ 0 ] * 3 for i in range ( 3 ) ] def exit_if_not_eq ( i , j ) : if i != j : print ( " No " ) exit ( ) for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( C [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = C [ 0 ] [ 0 ] - a1 if b1 < 0 : continue b2 = C [ 0 ] [ 1 ] - a1 if b2 < 0 : continue b3 = C [ 0 ] [ 2 ] - a1 if b3 < 0 : continue a2 = C [ 1 ] [ 0 ] - b1 if a2 < 0 : continue if C [ 1 ] [ 1 ] != a2 + b2 : continue if C [ 1 ] [ 2 ] != a2 + b3 : continue a3 = C [ 2 ] [ 0 ] - b1 if a3 < 0 : continue if C [ 2 ] [ 1 ] != a3 + b2 : continue if C [ 2 ] [ 2 ] != a3 + b3 : continue print ( " Yes " ) exit ( ) print ( " No " )
A = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] ans = ' Yes ' for i in range ( 2 ) : if A [ i ] [ 0 ] - A [ i + 1 ] [ 0 ] != A [ i ] [ 1 ] - A [ i + 1 ] [ 1 ] : ans = ' No ' break if A [ i ] [ 1 ] - A [ i + 1 ] [ 1 ] != A [ i ] [ 2 ] - A [ i + 1 ] [ 2 ] : ans = ' No ' break print ( ans )
c = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) c . append ( ci ) r = [ sum ( [ c [ j ] [ i ] for i in range ( 3 ) ] ) for j in range ( 3 ) ] q = [ sum ( [ c [ i ] [ j ] for i in range ( 3 ) ] ) for j in range ( 3 ) ] if ( r [ 2 ] - r [ 1 ] ) % 3 == 0 and ( r [ 1 ] - r [ 0 ] ) % 3 == 0 and ( q [ 2 ] - q [ 1 ] ) % 3 == 0 and ( q [ 1 ] - q [ 0 ] ) % 3 == 0 : print ( ' Yes ' ) else : print ( ' No ' )
p = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if p [ 0 ] [ 0 ] - p [ 0 ] [ 1 ] == p [ 1 ] [ 0 ] - p [ 1 ] [ 1 ] == p [ 2 ] [ 0 ] - p [ 2 ] [ 1 ] and p [ 0 ] [ 1 ] - p [ 0 ] [ 2 ] == p [ 1 ] [ 1 ] - p [ 1 ] [ 2 ] == p [ 2 ] [ 1 ] - p [ 2 ] [ 2 ] and p [ 0 ] [ 0 ] - p [ 1 ] [ 0 ] == p [ 0 ] [ 1 ] - p [ 1 ] [ 1 ] == p [ 0 ] [ 2 ] - p [ 1 ] [ 2 ] and p [ 1 ] [ 0 ] - p [ 2 ] [ 0 ] == p [ 1 ] [ 1 ] - p [ 2 ] [ 1 ] == p [ 1 ] [ 2 ] - p [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : flag = True b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 0 ] - a1 b3 = c [ 2 ] [ 0 ] - a1 a2 = c [ 0 ] [ 1 ] - b1 if a2 != ( c [ 1 ] [ 1 ] - b2 ) or a2 != ( c [ 2 ] [ 1 ] - b3 ) : flag = False a3 = c [ 0 ] [ 2 ] - b1 if a3 != ( c [ 1 ] [ 2 ] - b2 ) or a3 != ( c [ 2 ] [ 2 ] - b3 ) : flag = False if a1 < 0 or a2 < 0 or a3 < 0 or b1 < 0 or b2 < 0 or b3 < 0 : flag = False if flag : print ( " Yes " ) exit ( ) print ( " No " )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] def diff ( arr ) : return tuple ( [ pre_x - x for pre_x , x in zip ( arr [ : - 1 ] , arr [ 1 : ] ) ] ) diffs = [ diff ( row ) for row in c ] if diffs [ 0 ] == diffs [ 1 ] == diffs [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 + c12 - c22 == 0 and c31 - c11 + c12 - c32 == 0 and c21 - 2 * c11 + c12 + c13 - c23 == c31 - 2 * c11 + c12 + c13 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 for _ in range ( 3 ) ] b = [ 0 for _ in range ( 3 ) ] A = [ sum ( c ) for c in C ] B = [ C [ 0 ] [ i ] + C [ 1 ] [ i ] + C [ 2 ] [ i ] for i in range ( 3 ) ] is_correct = True for i in range ( 3 ) : for j in range ( i , 3 ) : if abs ( A [ i ] - A [ j ] ) % 3 != 0 : is_correct = False if abs ( B [ i ] - B [ j ] ) % 3 != 0 : is_correct = False print ( " Yes " if is_correct else " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] for a1 in range ( 100 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a21 = c2 [ 0 ] - b1 a22 = c2 [ 1 ] - b2 a23 = c2 [ 2 ] - b3 a31 = c3 [ 0 ] - b1 a32 = c3 [ 1 ] - b2 a33 = c3 [ 2 ] - b3 if ( a21 == a22 == a23 ) and ( a31 == a32 == a33 ) : print ( ' Yes ' ) break elif a1 == 99 : print ( ' No ' ) break else : continue
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) a = 1 b = 0 if A [ 0 ] - B [ 0 ] == A [ 1 ] - B [ 1 ] == A [ 2 ] - B [ 2 ] : b = 1 else : a = 0 if B [ 0 ] - C [ 0 ] == B [ 1 ] - C [ 1 ] == B [ 2 ] - C [ 2 ] : b = 1 else : a = 0 if A [ 0 ] - A [ 1 ] == B [ 0 ] - B [ 1 ] == C [ 0 ] - C [ 1 ] : b = 1 else : a = 0 if A [ 1 ] - A [ 2 ] == B [ 1 ] - B [ 2 ] == C [ 1 ] - C [ 2 ] : b = 1 else : a = 0 if a == 1 : print ( " Yes " ) else : print ( " No " )
C = [ 0 ] * 3 for i in range ( 3 ) : l = input ( ) . split ( ) C [ i ] = [ int ( x ) for x in l ] A = [ 0 * 3 ] * 3 B = [ 0 ] * 3 B [ 0 ] = C [ 0 ] [ 0 ] B [ 1 ] = C [ 0 ] [ 1 ] B [ 2 ] = C [ 0 ] [ 2 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] != C [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] K = C [ 0 ] [ 0 ] b1 , b2 = C [ 0 ] [ 1 ] - K , C [ 0 ] [ 2 ] - K a1 , a2 = C [ 1 ] [ 0 ] - K , C [ 2 ] [ 0 ] - K if C [ 1 ] [ 1 ] == K + a1 + b1 and C [ 1 ] [ 2 ] == K + a1 + b2 and C [ 2 ] [ 1 ] == K + a2 + b1 and C [ 2 ] [ 2 ] == K + a2 + b2 : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ list ( map ( int , l . split ( ) ) ) for l in sys . stdin . read ( ) . splitlines ( ) ] for i in range ( 2 ) : c [ 2 - i ] = [ x - y for x , y in zip ( c [ 2 - i ] , c [ 1 - i ] ) ] for i in range ( 2 ) : for j in range ( 3 ) : c [ j ] [ 2 - i ] -= c [ j ] [ 1 - i ] if c [ 1 ] [ 1 : ] == c [ 2 ] [ 1 : ] == [ 0 , 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = False break if ans : print ( " Yes " ) else : print ( " No " )
C = [ 0 ] * 3 flg = True for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : for j in range ( 2 ) : if ( C [ i ] [ j ] - C [ i ] [ j + 1 ] != C [ i + 1 ] [ j ] - C [ i + 1 ] [ j + 1 ] ) : flg = False for i in range ( 2 ) : for j in range ( 2 ) : if ( C [ i ] [ j ] - C [ i + 1 ] [ j ] != C [ i ] [ j + 1 ] - C [ i + 1 ] [ j + 1 ] ) : flg = False print ( " Yes " if flg else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( min ( c11 , c12 , c13 ) + 1 ) : t1 = c11 - i t2 = c12 - i t3 = c13 - i if c21 - t1 == c22 - t2 and c21 - t1 == c23 - t3 and c31 - t1 == c32 - t2 and c31 - t1 == c33 - t3 : print ( " Yes " ) break else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] d = [ [ - 1 , - 1 , - 1 ] for _ in range ( 3 ) ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 d [ 0 ] [ 0 ] = a1 + b1 d [ 0 ] [ 1 ] = a1 + b2 d [ 0 ] [ 2 ] = a1 + b3 d [ 1 ] [ 0 ] = a2 + b1 d [ 1 ] [ 1 ] = a2 + b2 d [ 1 ] [ 2 ] = a2 + b3 d [ 2 ] [ 0 ] = a3 + b1 d [ 2 ] [ 1 ] = a3 + b2 d [ 2 ] [ 2 ] = a3 + b3 if c == d : print ( ' Yes ' ) exit ( 0 ) else : continue print ( ' No ' )
N = 3 glid = [ ] for i in range ( N ) : glid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 100 ) : a [ 0 ] = i for j in range ( N ) : b [ j ] = glid [ 0 ] [ j ] - a [ 0 ] for j in range ( 1 , N ) : a [ j ] = glid [ j ] [ 0 ] - b [ 0 ] f = True for i in range ( N ) : for j in range ( N ) : if glid [ i ] [ j ] != a [ i ] + b [ j ] : f = False print ( ' Yes ' if f else ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] x2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] x3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] x4 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] x5 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] x6 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) x1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] x2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] x3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] x4 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] x5 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] x6 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import math import heapq import bisect import numpy as np from collections import Counter C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 flg = 0 for i in range ( C [ 0 ] [ 0 ] + 1 ) : A [ 0 ] = i B [ 0 ] = C [ 0 ] [ 0 ] - i for j in range ( 1 , 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] B [ j ] = C [ 0 ] [ j ] - A [ 0 ] tmp = abs ( C [ 1 ] [ 1 ] - A [ 1 ] - B [ 1 ] ) + abs ( C [ 1 ] [ 2 ] - A [ 1 ] - B [ 2 ] ) + abs ( C [ 2 ] [ 1 ] - A [ 2 ] - B [ 1 ] ) + abs ( C [ 2 ] [ 2 ] - A [ 2 ] - B [ 2 ] ) if tmp == 0 : flg = 1 if flg : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( c11 + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( ' Yes ' ) else : print ( ' No ' )
def checker ( ded , da ) : for i in range ( 3 ) : for j in range ( 2 ) : if da [ i ] [ j ] - ded [ j ] != da [ i ] [ 2 ] - ded [ 2 ] : return False return True def ma ( da ) : for i in range ( - 100 , 101 ) : for j in range ( - 100 , 101 ) : for k in range ( - 100 , 101 ) : if checker ( [ i , j , k ] , da ) : return False return True da = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ma ( da ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys , math from itertools import permutations , combinations from collections import defaultdict , Counter , deque from math import factorial from bisect import bisect_left , bisect_right sys . setrecursionlimit ( 10 ** 7 ) enu = enumerate MOD = 10 ** 9 + 7 def input ( ) : return sys . stdin . readline ( ) [ : - 1 ] pl = lambda x : print ( * x , sep = ' \n ' ) C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : lu = C [ i ] [ j ] for ii in range ( 3 ) : if i == ii : continue for jj in range ( 3 ) : if j == jj : continue rd = C [ ii ] [ jj ] ld = C [ ii ] [ j ] ru = C [ i ] [ jj ] if lu + rd != ld + ru : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] vert1 = [ c [ 1 ] [ i ] - c [ 0 ] [ i ] for i in range ( 3 ) ] vert2 = [ c [ 2 ] [ i ] - c [ 1 ] [ i ] for i in range ( 3 ) ] horiz1 = [ c [ i ] [ 1 ] - c [ i ] [ 0 ] for i in range ( 3 ) ] horiz2 = [ c [ i ] [ 2 ] - c [ i ] [ 1 ] for i in range ( 3 ) ] if len ( set ( vert1 ) ) == len ( set ( vert2 ) ) == len ( set ( horiz1 ) ) == len ( set ( horiz2 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
def main ( ) : import sys sys . setrecursionlimit ( 10 ** 7 ) G = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def recursion ( ai = 0 , b0 = - 1 , b1 = - 1 , b2 = - 1 ) : if ai == 3 : return True if ai > 0 : d = G [ ai ] [ 0 ] - b0 if ( G [ ai ] [ 0 ] - b0 ) == ( G [ ai ] [ 1 ] - b1 ) == ( G [ ai ] [ 2 ] - b2 ) and 0 <= d <= 100 : return recursion ( ai + 1 , b0 , b1 , b2 ) else : return False for a in range ( 100 + 1 ) : d = G [ 0 ] [ 0 ] - a if d < 0 : break b0 = d d = G [ 0 ] [ 1 ] - a if d < 0 : break b1 = d d = G [ 0 ] [ 2 ] - a if d < 0 : break b2 = d if recursion ( ai + 1 , b0 , b1 , b2 ) : return True return False cond = recursion ( ) print ( ' Yes ' if cond else ' No ' ) if __name__ == ' __main__ ' : main ( )
N = [ ( list ( map ( int , input ( ) . split ( ' ' ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( N [ 0 ] [ 0 ] - a1 == N [ 1 ] [ 0 ] - a2 == N [ 2 ] [ 0 ] - a3 and N [ 0 ] [ 1 ] - a1 == N [ 1 ] [ 1 ] - a2 == N [ 2 ] [ 1 ] - a3 and N [ 0 ] [ 2 ] - a1 == N [ 1 ] [ 2 ] - a2 == N [ 2 ] [ 2 ] - a3 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) ans = ' No ' if a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] and a [ 2 ] - a [ 1 ] == b [ 2 ] - b [ 1 ] == c [ 2 ] - c [ 1 ] : if b [ 0 ] - a [ 0 ] == b [ 1 ] - a [ 1 ] == b [ 2 ] - a [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : ans = ' Yes ' print ( ans )
import numpy as np list_ = [ np . array ( list ( map ( int , input ( ) . rstrip ( " \n " ) . split ( ) ) ) ) for _ in range ( 3 ) ] bool_ = ( len ( set ( list_ [ 1 ] - list_ [ 0 ] ) ) == len ( set ( list_ [ 2 ] - list_ [ 0 ] ) ) == 1 ) print ( " Yes " if bool_ else " No " )
from itertools import product as p c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 a [ 0 ] = 0 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , j in p ( range ( 3 ) , range ( 3 ) ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : print ( ' Yes ' )
from __future__ import print_function import sys sys . setrecursionlimit ( 500000 ) import re import array import copy import functools import operator import math import string import fractions from fractions import Fraction import collections import itertools import bisect import random import time import heapq from heapq import heappush from heapq import heappop from heapq import heappushpop from heapq import heapify from heapq import heapreplace from queue import PriorityQueue as pq from queue import Queue from itertools import accumulate from collections import deque from collections import Counter from operator import mul from functools import reduce input = sys . stdin . readline def eprint ( * args , ** kwargs ) : print ( * args , file = sys . stderr , ** kwargs ) return def combinations_count ( n , r ) : r = min ( r , n - r ) numer = reduce ( mul , range ( n , n - r , - 1 ) , 1 ) denom = reduce ( mul , range ( 1 , r + 1 ) , 1 ) return numer // denom def main ( ) : c = [ [ ] for _ in range ( 4 ) ] for i in range ( 1 , 4 ) : c [ i ] = [ 0 ] + list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) def diff ( i , j , k ) : return c [ k ] [ i ] - c [ k ] [ j ] if diff ( 3 , 2 , 1 ) == diff ( 3 , 2 , 2 ) == diff ( 3 , 2 , 3 ) and diff ( 2 , 1 , 1 ) == diff ( 2 , 1 , 2 ) == diff ( 2 , 1 , 3 ) : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : A = [ i , j , k ] B = [ C [ 0 ] [ 0 ] - A [ 0 ] , C [ 1 ] [ 1 ] - A [ 1 ] , C [ 2 ] [ 2 ] - A [ 2 ] ] count = 0 for l in range ( 3 ) : for m in range ( 3 ) : if C [ l ] [ m ] == A [ l ] + B [ m ] : count += 1 if count == 9 : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
mat = [ map ( int , raw_input ( ) . split ( ) ) for _ in range ( 3 ) ] def f ( m ) : return ( m [ 1 ] - m [ 0 ] , m [ 2 ] - m [ 1 ] ) b = True s = set ( [ ] ) for l in mat : s . add ( f ( l ) ) if len ( s ) > 1 : b = False s = set ( [ ] ) for j in range ( 3 ) : c = [ mat [ i ] [ j ] for i in range ( 3 ) ] s . add ( f ( c ) ) if len ( s ) > 1 : b = False print ' Yes ' if b else ' No '
import sys c = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 101 ) : b1 , b2 , b3 = c [ 0 ] [ 0 ] - i , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 and c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 : if c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 and c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) : print ( " No " ) exit ( ) print ( " Yes " )
res = 0 a = [ ] a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for j in range ( 2 ) : s = a [ 0 ] [ j ] - a [ 0 ] [ j + 1 ] t = a [ 1 ] [ j ] - a [ 1 ] [ j + 1 ] u = a [ 2 ] [ j ] - a [ 2 ] [ j + 1 ] if s == t and t == u : res = res + 1 for j in range ( 2 ) : s = a [ j ] [ 0 ] - a [ j + 1 ] [ 0 ] t = a [ j ] [ 1 ] - a [ j + 1 ] [ 1 ] u = a [ j ] [ 2 ] - a [ j + 1 ] [ 2 ] if s == t and t == u : res = res + 1 if res == 4 : print ( " Yes " ) else : print ( " No " )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] b_patterns = [ ] for i in range ( grid [ 0 ] [ 0 ] + 1 ) : b_pattern = [ grid [ 0 ] [ j ] - i for j in range ( 3 ) ] b_patterns . append ( b_pattern ) def patternCecker ( grid , b_patterns ) : for pattern in b_patterns : a1 = grid [ 0 ] [ 0 ] - pattern [ 0 ] a2 = grid [ 1 ] [ 0 ] - pattern [ 0 ] a3 = grid [ 2 ] [ 0 ] - pattern [ 0 ] a1_row = [ a1 + pattern [ l ] for l in range ( 3 ) ] a2_row = [ a2 + pattern [ l ] for l in range ( 3 ) ] a3_row = [ a3 + pattern [ l ] for l in range ( 3 ) ] if a1_row == grid [ 0 ] and a2_row == grid [ 1 ] and a3_row == grid [ 2 ] : return True return False if patternCecker ( grid , b_patterns ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( j ) for j in input ( ) . split ( ) ] for i in range ( 3 ) ] def main ( ) : flg = True for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] != c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] : flg = False break if not flg : break print ( " Yes " if flg else " No " ) return main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
a = [ int ( i ) for i in input ( ) . split ( ) ] b = [ int ( i ) for i in input ( ) . split ( ) ] c = [ int ( i ) for i in input ( ) . split ( ) ] a1 = 0 b1 = a [ 0 ] - a1 b2 = a [ 1 ] - a1 b3 = a [ 2 ] - a1 a2 = b [ 0 ] - b1 a3 = c [ 0 ] - b1 if b [ 1 ] == a2 + b2 and b [ 2 ] == a2 + b3 and c [ 1 ] == a3 + b2 and c [ 2 ] == a3 + b3 : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] n = 0 for i in range ( 2 ) : s = A [ 0 ] [ i + 1 ] - A [ 0 ] [ i ] for j in range ( 1 , 3 ) : if A [ j ] [ i + 1 ] - A [ j ] [ i ] != s : n = 1 for i in range ( 2 ) : s = A [ i + 1 ] [ 0 ] - A [ i ] [ 0 ] for j in range ( 1 , 3 ) : if A [ i + 1 ] [ j ] - A [ i ] [ j ] != s : n = 1 if n == 0 : print ( " Yes " ) else : print ( " No " )
S = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : if ( S [ 0 ] [ 0 ] - i == S [ 1 ] [ 0 ] - j and S [ 0 ] [ 1 ] - i == S [ 1 ] [ 1 ] - j ) and S [ 0 ] [ 2 ] - i == S [ 1 ] [ 2 ] - j : if ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 1 ] - S [ 0 ] [ 1 ] ) and ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 2 ] - S [ 0 ] [ 2 ] ) : check = True print ( ' Yes ' ) exit ( ) if check == False : print ( ' No ' )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = ' No ' if c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : ans = ' No ' if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : ans = ' No ' if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( input_list ( ) ) ) for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a1 + b1 == c [ 0 ] [ 0 ] and a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and \ a2 + b1 == c [ 1 ] [ 0 ] and a3 + b1 == c [ 2 ] [ 0 ] and a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and \ a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' ) def input_list ( ) : return map ( int , input ( ) . split ( ) ) def input_list_str ( ) : return map ( str , input ( ) . split ( ) ) def lcm_base ( x , y ) : return ( x * y ) // fractions . gcd ( x , y ) def lcm_list ( numbers ) : return reduce ( lcm_base , numbers , 1 ) def gcd ( * numbers ) : return reduce ( fractions . gcd , numbers ) def gcd_list ( numbers ) : return reduce ( fractions . gcd , numbers ) def divide_two ( arg ) : c = 0 while True : if c >= 2 : break if arg % 2 != 0 : break arg // = 2 c += 1 return c import math import fractions import collections from functools import reduce main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for k in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] or c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] != c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] or c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] : print ( " No " ) else : print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , - 1 , - 1 ) : C0j = C [ 0 ] [ 2 ] - C [ 0 ] [ i ] C1j = C [ 1 ] [ 2 ] - C [ 1 ] [ i ] C2j = C [ 2 ] [ 2 ] - C [ 2 ] [ i ] if C0j != C1j or C0j != C2j : ans = " No " print ( ans )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) o = p = q = r = 0 if ( a - b ) == ( d - e ) == ( g - h ) : o = 1 if ( b - c ) == ( e - f ) == ( h - i ) : p = 1 if ( a - d ) == ( b - e ) == ( c - f ) : q = 1 if ( d - g ) == ( e - h ) == ( f - i ) : r = 1 if o == p == q == r == 1 : print ( " Yes " ) else : print ( " No " )
def solve ( ) : c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] if not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : return ' No ' elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : return ' No ' elif not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : return ' No ' elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : return ' No ' else : return ' Yes ' if __name__ == ' __main__ ' : print ( solve ( ) )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = " No " if l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 1 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 2 ] [ 0 ] : if l [ 0 ] [ 2 ] - l [ 0 ] [ 1 ] == l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 2 ] [ 1 ] : flag = " Yes " print ( flag )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 != c22 - c12 or c21 - c11 != c23 - c13 or c31 - c11 != c32 - c12 or c31 - c11 != c33 - c13 : print ( " No " ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] : ans = " No " elif c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : ans = " No " elif c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] : ans = " No " elif c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = 0 for col in c : for v in col : m = max ( m , v ) for a1 in range ( m + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a2 + b2 != c [ 1 ] [ 1 ] : continue elif a2 + b3 != c [ 1 ] [ 2 ] : continue elif a3 + b2 != c [ 2 ] [ 1 ] : continue elif a3 + b3 != c [ 2 ] [ 2 ] : continue else : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) c . append ( x ) c . append ( y ) c . append ( z ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = c [ 0 ] - a1 b2 = c [ 1 ] - a1 b3 = c [ 2 ] - a1 if c [ 3 ] == a2 + b1 and c [ 4 ] == a2 + b2 and c [ 5 ] == a2 + b3 and c [ 6 ] == a3 + b1 and c [ 7 ] == a3 + b2 and c [ 8 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2_1 = c [ 1 ] [ 0 ] - b1 a2_2 = c [ 1 ] [ 1 ] - b2 a2_3 = c [ 1 ] [ 2 ] - b3 a3_1 = c [ 2 ] [ 0 ] - b1 a3_2 = c [ 2 ] [ 1 ] - b2 a3_3 = c [ 2 ] [ 2 ] - b3 if ( a2_1 == a2_2 == a2_3 ) and ( a3_1 == a3_2 == a3_3 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys m = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a in range ( - 1000 , 1001 ) : b_1 = m [ 0 ] [ 0 ] - a b_2 = m [ 0 ] [ 1 ] - a b_3 = m [ 0 ] [ 2 ] - a if ( m [ 1 ] [ 0 ] - b_1 == m [ 1 ] [ 1 ] - b_2 == m [ 1 ] [ 2 ] - b_3 ) and \ ( m [ 2 ] [ 0 ] - b_1 == m [ 2 ] [ 1 ] - b_2 == m [ 2 ] [ 2 ] - b_3 ) : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
import sys lis_a = [ 0 ] * 3 for i in range ( 3 ) : lis_a [ i ] = list ( map ( int , input ( ) . split ( ) ) ) b = [ 0 ] * 3 for i in range ( min ( lis_a [ 0 ] ) + 1 ) : a_1 = i for k in range ( 3 ) : b [ k ] = lis_a [ 0 ] [ k ] - a_1 a_2 = lis_a [ 1 ] [ 0 ] - b [ 0 ] a_3 = lis_a [ 2 ] [ 0 ] - b [ 0 ] a = [ a_1 , a_2 , a_3 ] for l in range ( 3 ) : for m in range ( 3 ) : if a [ l ] + b [ m ] != lis_a [ l ] [ m ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if [ [ i + b1 , i + b2 , i + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] == C : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : o = c [ 0 ] [ 0 ] - i p = c [ 1 ] [ 1 ] - j q = c [ 2 ] [ 2 ] - k if o < 0 or p < 0 or q < 0 : continue ls = [ [ i + o , i + p , i + q ] , [ j + o , j + p , j + q ] , [ k + o , k + p , k + q ] ] if ls == c : check = True break print ( " Yes " if check else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) * 2 == c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) t = True if not ( c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] ) : t = False if not ( c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] ) : t = False if not ( c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] ) : t = False if not ( c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] ) : t = False if t : print ( " Yes " ) else : print ( " No " )
def is_correct ( grids ) : for a1 in range ( min ( 101 , grids [ 0 ] [ 0 ] + 1 ) ) : b_list = grids [ 0 ] [ 0 ] - a1 , grids [ 0 ] [ 1 ] - a1 , grids [ 0 ] [ 2 ] - a1 a2 , a3 = grids [ 1 ] [ 0 ] - b_list [ 0 ] , grids [ 2 ] [ 0 ] - b_list [ 0 ] a_list = [ a1 , a2 , a3 ] temp_grids = [ ] for an in a_list : row = [ ] for bn in b_list : row . append ( an + bn ) temp_grids . append ( row ) if grids == temp_grids : return True return False grids = [ ] for _ in range ( 3 ) : grids . append ( list ( map ( int , input ( ) . split ( ) ) ) ) print ( " Yes " if is_correct ( grids ) else " No " )
li = [ ] flag = True for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) li . append ( c ) sum = li [ 0 ] [ 0 ] + li [ 1 ] [ 1 ] + li [ 2 ] [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if li [ i ] [ j ] != sum - li [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] - li [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) res = " No " for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : if c [ 0 ] [ 0 ] - i == c [ 1 ] [ 0 ] - j == c [ 2 ] [ 0 ] - k : if c [ 0 ] [ 1 ] - i == c [ 1 ] [ 1 ] - j == c [ 2 ] [ 1 ] - k : if c [ 0 ] [ 2 ] - i == c [ 1 ] [ 2 ] - j == c [ 2 ] [ 2 ] - k : res = " Yes " print ( res )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ ] b = [ ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : a . append ( c [ i ] [ j ] - c [ 0 ] [ j ] ) b . append ( c [ j ] [ i ] - c [ j ] [ 0 ] ) ans = ' No ' if a [ 0 ] == a [ 1 ] and a [ 0 ] == a [ 2 ] and a [ 3 ] == a [ 4 ] and a [ 3 ] == a [ 5 ] : if b [ 0 ] == b [ 1 ] and b [ 0 ] == b [ 2 ] and b [ 3 ] == b [ 4 ] and b [ 3 ] == b [ 5 ] : ans = ' Yes ' print ( ans )
mat = [ ] for i in range ( 3 ) : mat . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ 0 ] [ i ] != mat [ j ] [ 0 ] - mat [ j ] [ i ] : ans = ' No ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ i ] [ 0 ] != mat [ 0 ] [ j ] - mat [ i ] [ j ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] y = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] for i in range ( 3 ) : c [ 1 ] [ i ] -= x c [ 2 ] [ i ] -= y if c [ 0 ] == c [ 1 ] == c [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
A = [ int ( x ) for x in input ( ) . split ( ) ] B = [ int ( x ) for x in input ( ) . split ( ) ] C = [ int ( x ) for x in input ( ) . split ( ) ] a , b = A [ 1 ] - A [ 0 ] , A [ 2 ] - A [ 0 ] c , d = B [ 1 ] - B [ 0 ] , B [ 2 ] - B [ 0 ] e , f = C [ 1 ] - C [ 0 ] , C [ 2 ] - C [ 0 ] if a == c == e and b == d == f : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( len ( c ) ) : mi = min ( c [ i ] ) * c [ i ] , = map ( lambda x : x - mi , c [ i ] ) print ( " Yes " if c [ 0 ] == c [ 1 ] and c [ 1 ] == c [ 2 ] else " No " )
import math , string , itertools , fractions , heapq , collections , re , array , bisect , sys , random , time , copy , functools from collections import deque sys . setrecursionlimit ( 10 ** 7 ) inf = 10 ** 20 mod = 10 ** 9 + 7 DR = [ 1 , - 1 , 0 , 0 ] DC = [ 0 , 0 , 1 , - 1 ] def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ] def LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LS ( ) : return sys . stdin . readline ( ) . split ( ) def I ( ) : return int ( sys . stdin . readline ( ) ) def F ( ) : return float ( sys . stdin . readline ( ) ) def S ( ) : return input ( ) def main ( ) : c = [ ] csum = 0 for _ in range ( 3 ) : _c = LI ( ) csum += sum ( _c ) c . append ( _c ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == csum / 3 : print ( ' Yes ' ) else : print ( ' No ' ) main ( )
A = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for x , y in zip ( A , A [ 1 : ] ) : if not ( y [ 0 ] - x [ 0 ] == y [ 1 ] - x [ 1 ] == y [ 2 ] - x [ 2 ] ) : print ( " No " ) exit ( ) for x in range ( 2 ) : if not ( A [ 0 ] [ x + 1 ] - A [ 0 ] [ x ] == A [ 1 ] [ x + 1 ] - A [ 1 ] [ x ] == A [ 2 ] [ x + 1 ] - A [ 2 ] [ x ] ) : print ( " No " ) exit ( ) if A [ 0 ] [ 0 ] + A [ 2 ] [ 2 ] != A [ 0 ] [ 2 ] + A [ 2 ] [ 0 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] [ 0 ] , c [ i ] [ 1 ] , c [ i ] [ 2 ] = map ( int , input ( ) . split ( ' ' ) ) a_list = [ 0 ] * 3 b_list = [ 0 ] * 3 for a0 in range ( c [ 0 ] [ 0 ] + 1 ) : a_list [ 0 ] = a0 b_list [ 0 ] = c [ 0 ] [ 0 ] - a_list [ 0 ] a_list [ 1 ] = c [ 1 ] [ 0 ] - b_list [ 0 ] a_list [ 2 ] = c [ 2 ] [ 0 ] - b_list [ 0 ] b_list [ 1 ] = c [ 0 ] [ 1 ] - a_list [ 0 ] b_list [ 2 ] = c [ 0 ] [ 2 ] - a_list [ 0 ] if not all ( [ tmp >= 0 for tmp in a_list ] ) : continue if not all ( [ tmp >= 0 for tmp in b_list ] ) : continue tmp = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : tmp [ i ] [ j ] = a_list [ i ] + b_list [ j ] for n , m in zip ( c , tmp ) : if not n == m : break else : print ( ' Yes ' ) exit ( ) else : print ( ' No ' )
import math import calendar import fractions import itertools c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) : c [ i ] [ j ] = a [ j ] x = min ( c [ 0 ] ) y = min ( c [ 1 ] ) z = min ( c [ 2 ] ) ans = 0 for a1 in range ( x + 1 ) : for a2 in range ( y + 1 ) : for a3 in range ( z + 1 ) : if a1 - c [ 0 ] [ 0 ] == a2 - c [ 1 ] [ 0 ] == a3 - c [ 2 ] [ 0 ] and a1 - c [ 0 ] [ 1 ] == a2 - c [ 1 ] [ 1 ] == a3 - c [ 2 ] [ 1 ] and a1 - c [ 0 ] [ 2 ] == a2 - c [ 1 ] [ 2 ] == a3 - c [ 2 ] [ 2 ] : ans = 1 break if ans == 1 : break if ans == 1 : break if ans == 1 : print ( " Yes " ) else : print ( " No " )
* c , = map ( int , open ( 0 ) . read ( ) . split ( ) ) for i in range ( 2 ) : if ( ( c [ 1 + i ] - c [ 0 + i ] ) != ( c [ 4 + i ] - c [ 3 + i ] ) or ( c [ 1 + i ] - c [ 0 + i ] ) != ( c [ 7 + i ] - c [ 6 + i ] ) or ( c [ 3 + i * 3 ] - c [ i * 3 ] ) != ( c [ 4 + i * 3 ] - c [ 1 + i * 3 ] ) or ( c [ 3 + i * 3 ] - c [ i * 3 ] ) != ( c [ 5 + i * 3 ] - c [ 2 + i * 3 ] ) ) : print ( " No " ) break else : print ( " Yes " )
import sys import heapq , math from itertools import zip_longest , permutations , combinations , combinations_with_replacement from itertools import accumulate , dropwhile , takewhile , groupby from functools import lru_cache from copy import deepcopy c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) def ok ( c ) : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] \ and c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] \ and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : return True return False print ( " Yes " if ok ( [ c1 , c2 , c3 ] ) else " No " )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ok = True for i in ( 1 , 2 ) : if C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] != C [ i ] [ 1 ] - C [ i - 1 ] [ 1 ] or \ C [ i ] [ 1 ] - C [ i - 1 ] [ 1 ] != C [ i ] [ 2 ] - C [ i - 1 ] [ 2 ] : ok = False if C [ 0 ] [ i ] - C [ 0 ] [ i - 1 ] != C [ 1 ] [ i ] - C [ 1 ] [ i - 1 ] or \ C [ 1 ] [ i ] - C [ 1 ] [ i - 1 ] != C [ 2 ] [ i ] - C [ 2 ] [ i - 1 ] : ok = False if ok : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] if ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) % 3 != 0 : print ( ' No ' ) exit ( ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) n1 = max ( c [ 0 ] ) n2 = max ( c [ 1 ] ) n3 = max ( c [ 2 ] ) ans = ' No ' for a1 in range ( n1 + 1 ) : for a2 in range ( n2 + 1 ) : for a3 in range ( n3 + 1 ) : if c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 : if c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 : if c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 : ans = ' Yes ' break print ( ans )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians from itertools import permutations , combinations , product , accumulate from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from fractions import gcd from bisect import bisect def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] a [ 0 ] = 0 for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] != - 1 : b [ i ] = c [ i ] [ j ] - a [ j ] else : a [ j ] = c [ i ] [ j ] - b [ i ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) sys . exit ( ) else : print ( " Yes " )
def main ( ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if abs ( c1 [ 0 ] - c1 [ 1 ] ) == abs ( c2 [ 0 ] - c2 [ 1 ] ) == abs ( c3 [ 0 ] - c3 [ 1 ] ) and \ abs ( c1 [ 0 ] - c1 [ 2 ] ) == abs ( c2 [ 0 ] - c2 [ 2 ] ) == abs ( c3 [ 0 ] - c3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' ) main ( )
import sys def input ( ) : return sys . stdin . readline ( ) . strip ( ) def main ( ) : C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ C [ 0 ] [ i ] for i in range ( 3 ) ] a = [ C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] ans = [ [ a [ i ] + b [ j ] for j in range ( 3 ) ] for i in range ( 3 ) ] if ans == C : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys import numpy as np def main ( ) : grid = np . array ( sys . stdin . read ( ) . split ( ) , dtype = np . int64 ) . reshape ( 3 , 3 ) grid = grid - grid [ 0 ] grid = grid . T grid = grid - grid [ 0 ] if np . all ( grid == 0 ) : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) f = True for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False print ( " Yes " if f else " No " )
C = [ ] for i in range ( 3 ) : C . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) ans = " Yes " A = [ 0 ] * 3 B = C [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : ans = " No " break print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for __ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : if flag == False : break for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) flag = False break if flag == True : print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) s = 0 if ( c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] and c1 [ 0 ] - c2 [ 0 ] == c1 [ 2 ] - c2 [ 2 ] ) : s + = 1 if ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] and c3 [ 0 ] - c2 [ 0 ] == c3 [ 2 ] - c2 [ 2 ] ) : s + = 1 if ( s == 2 ) : print ( ' Yes ' ) else : print ( ' No ' )
data = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = data [ 0 ] [ 0 ] - a1 b2 = data [ 0 ] [ 1 ] - a1 b3 = data [ 0 ] [ 2 ] - a1 if ( b1 + a2 == data [ 1 ] [ 0 ] and b2 + a2 == data [ 1 ] [ 1 ] and b3 + a2 == data [ 1 ] [ 2 ] and b1 + a3 == data [ 2 ] [ 0 ] and b2 + a3 == data [ 2 ] [ 1 ] and b3 + a3 == data [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
grid = [ [ ] , [ ] , [ ] ] for i in range ( 3 ) : grid [ i ] = [ int ( i ) for i in input ( ) . split ( ) ] x = [ 0 ] * 3 y = [ ] ret = True for i in range ( 3 ) : y . append ( grid [ 0 ] [ i ] - x [ 0 ] ) for i in range ( 3 ) : x [ i ] = grid [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if not x [ i ] + y [ j ] == grid [ i ] [ j ] : ret = False else : continue break print ( " Yes " if ret else " No " )
import numpy as np M = np . array ( list ( map ( int , open ( 0 ) . read ( ) . split ( ) ) ) ) . reshape ( 3 , 3 ) hSum = M . sum ( axis = 0 ) vSum = M . sum ( axis = 1 ) f = True for i in range ( 3 ) : if ( hSum [ i ] - hSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False for i in range ( 3 ) : if ( vSum [ i ] - vSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False print ( " Yes " if f else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] ) != ( C [ 0 ] [ 1 ] + C [ 1 ] [ 0 ] ) : print ( " No " ) elif ( C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] ) != ( C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] ) : print ( " No " ) elif ( C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] ) != ( C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] ) : print ( " No " ) elif ( C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] ) != ( C [ 1 ] [ 2 ] + C [ 2 ] [ 1 ] ) : print ( " No " ) else : print ( " Yes " )
C = [ [ int ( zz ) for zz in input ( ) . split ( ) ] for _ in range ( 3 ) ] for j in range ( 3 ) : if j + 1 == 3 : p = 0 else : p = j + 1 tmp = C [ j ] [ 2 ] - C [ p ] [ 2 ] for i in range ( 2 ) : if C [ j ] [ i ] - C [ p ] [ i ] != tmp : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np N = 3 rows = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] arr = np . array ( rows ) b1 = arr [ 0 ] - arr [ 0 ] [ 0 ] b2 = arr [ 1 ] - arr [ 1 ] [ 0 ] b3 = arr [ 2 ] - arr [ 2 ] [ 0 ] if not ( list ( b1 ) == list ( b2 ) == list ( b3 ) ) : print ( " No " ) exit ( ) arr = arr . T a1 = arr [ 0 ] - arr [ 0 ] [ 0 ] a2 = arr [ 1 ] - arr [ 1 ] [ 0 ] a3 = arr [ 2 ] - arr [ 2 ] [ 0 ] if not ( list ( a1 ) == list ( a2 ) == list ( a3 ) ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a0 a1 = c [ 1 ] [ 0 ] - b [ 0 ] a2 = c [ 2 ] [ 0 ] - b [ 0 ] a = [ a0 , a1 , a2 ] is_ok = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : is_ok = False if is_ok : print ( " Yes " ) else : print ( " No " )
c_i_j = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c_i_j [ 0 ] [ 0 ] - a1 b2 = c_i_j [ 0 ] [ 1 ] - a1 b3 = c_i_j [ 0 ] [ 2 ] - a1 b = [ b1 , b2 , b3 ] flag = False for i in range ( 1 , 3 ) : if len ( set ( [ c_i_j [ i ] [ j ] - b [ j ] for j in range ( 3 ) ] ) ) != 1 : print ( " No " ) break else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) b = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] print ( ' Yes ' if a == 3 * b else ' No ' )
M = [ ] for i in range ( 3 ) : row = list ( map ( int , input ( ) . split ( ) ) ) M . append ( row ) flg = True for i in range ( 3 ) : if M [ 0 ] [ i ] - M [ 0 ] [ i - 1 ] == M [ 1 ] [ i ] - M [ 1 ] [ i - 1 ] == M [ 2 ] [ i ] - M [ 2 ] [ i - 1 ] : continue else : flg = False if M [ i ] [ 0 ] - M [ i - 1 ] [ 0 ] == M [ i ] [ 1 ] - M [ i - 1 ] [ 1 ] == M [ i ] [ 2 ] - M [ i - 1 ] [ 2 ] : continue else : flg = False if flg : print ( " Yes " ) else : print ( " No " )
x = [ ] for i in range ( 3 ) : x . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = x [ 0 ] [ 1 ] - x [ 0 ] [ 0 ] B = x [ 1 ] [ 1 ] - x [ 1 ] [ 0 ] C = x [ 2 ] [ 1 ] - x [ 2 ] [ 0 ] D = x [ 0 ] [ 2 ] - x [ 0 ] [ 1 ] E = x [ 1 ] [ 2 ] - x [ 1 ] [ 1 ] F = x [ 2 ] [ 2 ] - x [ 2 ] [ 1 ] G = x [ 1 ] [ 0 ] - x [ 0 ] [ 0 ] H = x [ 1 ] [ 1 ] - x [ 0 ] [ 1 ] I = x [ 1 ] [ 2 ] - x [ 0 ] [ 2 ] J = x [ 2 ] [ 0 ] - x [ 1 ] [ 0 ] K = x [ 2 ] [ 1 ] - x [ 1 ] [ 1 ] L = x [ 2 ] [ 2 ] - x [ 1 ] [ 2 ] cond1 = bool ( A == B and B == C ) cond2 = bool ( D == E and E == F ) cond3 = bool ( G == H and H == I ) cond4 = bool ( J == K and K == L ) if cond1 and cond2 and cond3 and cond4 : print ( " Yes " ) else : print ( " No " )
import sys sys . setrecursionlimit ( 10 ** 7 ) input = sys . stdin . readline f_inf = float ( ' inf ' ) mod = 10 ** 9 + 7 def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] for j in range ( 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] != C [ i ] [ j ] : print ( " No " ) break else : continue break else : print ( " Yes " ) if __name__ == ' __main__ ' : resolve ( )
import sys tmp = input ( ) . split ( ) a = list ( map ( lambda a : int ( a ) , tmp ) ) tmp = input ( ) . split ( ) b = list ( map ( lambda a : int ( a ) , tmp ) ) tmp = input ( ) . split ( ) c = list ( map ( lambda a : int ( a ) , tmp ) ) if ( a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] ) and ( a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] ) : if ( a [ 0 ] - c [ 0 ] == a [ 1 ] - c [ 1 ] ) and ( a [ 1 ] - c [ 1 ] == a [ 2 ] - c [ 2 ] ) : if ( c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] ) and ( c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] ) : if ( a [ 0 ] - a [ 1 ] == b [ 0 ] - b [ 1 ] ) and ( b [ 0 ] - b [ 1 ] == c [ 0 ] - c [ 1 ] ) : if ( a [ 2 ] - a [ 1 ] == b [ 2 ] - b [ 1 ] ) and ( b [ 2 ] - b [ 1 ] == c [ 2 ] - c [ 1 ] ) : if ( a [ 0 ] - a [ 2 ] == b [ 0 ] - b [ 2 ] ) and ( b [ 0 ] - b [ 2 ] == c [ 0 ] - c [ 2 ] ) : print ( " Yes " ) sys . exit ( ) print ( " No " )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e : if d - e == g - h : if b - c == e - f : if e - f == h - i : if a - d == b - e : if b - e == c - f : if d - g == e - h : if e - h == f - i : print ( " Yes " ) exit ( ) print ( " No " )
c = sum ( [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] , [ ] ) flag = True if c [ 1 ] - c [ 0 ] != c [ 4 ] - c [ 3 ] or c [ 4 ] - c [ 3 ] != c [ 7 ] - c [ 6 ] : flag = False elif c [ 2 ] - c [ 1 ] != c [ 5 ] - c [ 4 ] or c [ 5 ] - c [ 4 ] != c [ 8 ] - c [ 7 ] : flag = False elif c [ 3 ] - c [ 0 ] != c [ 4 ] - c [ 1 ] or c [ 4 ] - c [ 1 ] != c [ 5 ] - c [ 2 ] : flag = False elif c [ 6 ] - c [ 3 ] != c [ 7 ] - c [ 4 ] or c [ 7 ] - c [ 4 ] != c [ 8 ] - c [ 5 ] : flag = False print ( " Yes " if flag else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if C [ i ] [ 0 ] - C [ j ] [ 0 ] == C [ i ] [ 1 ] - C [ j ] [ 1 ] and C [ i ] [ 1 ] - C [ j ] [ 1 ] == C [ i ] [ 2 ] - C [ j ] [ 2 ] and C [ i ] [ 2 ] - C [ j ] [ 2 ] == C [ i ] [ 0 ] - C [ j ] [ 0 ] : continue else : print ( ' No ' ) exit ( ) for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if C [ 0 ] [ i ] - C [ 0 ] [ j ] == C [ 1 ] [ i ] - C [ 1 ] [ j ] and C [ 1 ] [ i ] - C [ 1 ] [ j ] == C [ 2 ] [ i ] - C [ 2 ] [ j ] and C [ 2 ] [ i ] - C [ 2 ] [ j ] == C [ 0 ] [ i ] - C [ 0 ] [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
y1_list = list ( map ( int , input ( ) . split ( ) ) ) y2_list = list ( map ( int , input ( ) . split ( ) ) ) y3_list = list ( map ( int , input ( ) . split ( ) ) ) L = [ y1_list , y2_list , y3_list ] a1 = list ( ) a2 = list ( ) b1 = list ( ) b2 = list ( ) for i in range ( 3 ) : a1 . append ( y1_list [ i ] - y2_list [ i ] ) a2 . append ( y2_list [ i ] - y3_list [ i ] ) b1 . append ( L [ i ] [ 0 ] - L [ i ] [ 1 ] ) b2 . append ( L [ i ] [ 1 ] - L [ i ] [ 2 ] ) if ( a1 [ 0 ] == a1 [ 1 ] and a1 [ 2 ] == a1 [ 0 ] ) and ( b1 [ 0 ] == b1 [ 1 ] and b1 [ 2 ] == b1 [ 0 ] ) : if ( a2 [ 0 ] == a2 [ 1 ] and a2 [ 2 ] == a2 [ 0 ] ) and ( b2 [ 0 ] == b2 [ 1 ] and b2 [ 2 ] == b2 [ 0 ] ) : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ C [ 0 ] [ 0 ] - C [ 0 ] [ 0 ] ] b = [ C [ 0 ] [ 0 ] - a [ 0 ] ] for i in range ( 1 , 3 ) : a . append ( C [ i ] [ 0 ] - b [ 0 ] ) b . append ( C [ 0 ] [ i ] - a [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : num = a [ i ] + b [ j ] if num != C [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
matrix = [ 0 ] * 3 for i in range ( 3 ) : matrix [ i ] = [ int ( j ) for j in input ( ) . split ( ) ] for a1 in range ( 101 ) : for b1 in range ( 101 ) : a2 = matrix [ 1 ] [ 0 ] - b1 a3 = matrix [ 2 ] [ 0 ] - b1 b2 = matrix [ 0 ] [ 1 ] - a1 b3 = matrix [ 0 ] [ 2 ] - a1 if matrix [ 1 ] [ 1 ] == a2 + b2 and matrix [ 1 ] [ 2 ] == a2 + b3 and matrix [ 2 ] [ 1 ] == a3 + b2 and matrix [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
c = [ [ int ( j ) for j in input ( ) . split ( ) ] for i in range ( 3 ) ] flag = True diffb21 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] diffb32 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != diffb21 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != diffb32 : flag = False tc = list ( zip ( * c ) ) diffa21 = tc [ 0 ] [ 1 ] - tc [ 0 ] [ 0 ] diffa32 = tc [ 0 ] [ 2 ] - tc [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if tc [ i ] [ 1 ] - tc [ i ] [ 0 ] != diffa21 or tc [ i ] [ 2 ] - tc [ i ] [ 1 ] != diffa32 : flag = False print ( ' Yes ' if flag else ' No ' )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not a [ 0 ] [ i ] - a [ 0 ] [ i + 1 ] == a [ 1 ] [ i ] - a [ 1 ] [ i + 1 ] == a [ 2 ] [ i ] - a [ 2 ] [ i + 1 ] : print ( " No " ) ; exit ( ) for i in range ( 2 ) : if not a [ i ] [ 0 ] - a [ i + 1 ] [ 0 ] == a [ i ] [ 1 ] - a [ i + 1 ] [ 1 ] == a [ i ] [ 2 ] - a [ i + 1 ] [ 2 ] : print ( " No " ) ; exit ( ) print ( " Yes " )
import sys [ a , b , c ] = list ( map ( int , input ( ) . split ( ) ) ) [ d , e , f ] = list ( map ( int , input ( ) . split ( ) ) ) [ g , h , i ] = list ( map ( int , input ( ) . split ( ) ) ) if d - a == e - b and e - b == f - c and g - d == h - e and h - e == i - f : if b - a == e - d and e - d == h - g and c - b == f - e and f - e == i - h : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
c_1_1 , c_1_2 , c_1_3 = map ( int , input ( ) . split ( ) ) c_2_1 , c_2_2 , c_2_3 = map ( int , input ( ) . split ( ) ) c_3_1 , c_3_2 , c_3_3 = map ( int , input ( ) . split ( ) ) ans = " No " for a_1 in range ( 101 ) : b_1 = c_1_1 - a_1 b_2 = c_1_2 - a_1 b_3 = c_1_3 - a_1 for a_2 in range ( 101 ) : if c_2_1 != a_2 + b_1 : continue if c_2_2 != a_2 + b_2 : continue if c_2_3 != a_2 + b_3 : continue for a_3 in range ( 101 ) : if c_3_1 != a_3 + b_1 : continue if c_3_2 != a_3 + b_2 : continue if c_3_3 != a_3 + b_3 : continue ans = " Yes " break if ans == " Yes " : break if ans == " Yes " : break print ( ans )
from sys import stdin if __name__ == " __main__ " : _in = [ _ . rstrip ( ) for _ in stdin . readlines ( ) ] c_arr = [ ] for i in range ( 3 ) : _ = list ( map ( int , _in [ i ] . split ( ' ' ) ) ) c_arr . append ( _ ) sum_c_arr = sum ( [ sum ( c ) for c in c_arr ] ) if ( c_arr [ 0 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 1 ] + c_arr [ 1 ] [ 2 ] + c_arr [ 2 ] [ 0 ] ) == sum_c_arr / 3 : TF = ' Yes ' else : TF = ' No ' print ( TF )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import sys min_a1 = min ( C [ 0 ] ) min_a2 = min ( C [ 1 ] ) min_a3 = min ( C [ 2 ] ) for a1 in range ( min_a1 + 1 ) : b1_a1 = C [ 0 ] [ 0 ] - a1 b2_a1 = C [ 0 ] [ 1 ] - a1 b3_a1 = C [ 0 ] [ 2 ] - a1 for a2 in range ( min_a2 + 1 ) : b1_a2 = C [ 1 ] [ 0 ] - a2 b2_a2 = C [ 1 ] [ 1 ] - a2 b3_a2 = C [ 1 ] [ 2 ] - a2 for a3 in range ( min_a3 + 1 ) : b1_a3 = C [ 2 ] [ 0 ] - a3 b2_a3 = C [ 2 ] [ 1 ] - a3 b3_a3 = C [ 2 ] [ 2 ] - a3 if b1_a1 == b1_a2 == b1_a3 and b2_a1 == b2_a2 == b2_a3 and b3_a1 == b3_a2 == b3_a3 : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
C = [ ] for _ in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) tmp = [ c1 , c2 , c3 ] C . append ( tmp ) if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : continue else : print ( " No " ) exit ( ) print ( " Yes " )
cnt = 0 c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) try : for j in range ( c1 + 1 ) : for k in range ( c2 + 1 ) : for l in range ( c3 + 1 ) : if c1 - j == c2 - k == c3 - l : c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) if c4 - j == c5 - k == c6 - l : c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c7 - j == c8 - k == c9 - l : cnt + = 1 break except EOFError : pass if cnt != 0 : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline class AtCoder : def main ( self ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for b1 in range ( 101 - a1 ) : a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 0 ] [ 0 ] == a1 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : AtCoder ( ) . main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = [ [ 0 ] * 3 ] * 3 flag = " True " while ( flag == " True " ) : flag = " false " for i in range ( 3 ) : if min ( C [ i ] [ 0 ] , C [ i ] [ 1 ] , C [ i ] [ 2 ] ) != 0 : C [ i ] [ 0 ] -= 1 C [ i ] [ 1 ] -= 1 C [ i ] [ 2 ] -= 1 flag = " True " break elif min ( C [ 0 ] [ i ] , C [ 1 ] [ i ] , C [ 2 ] [ i ] ) != 0 : C [ 0 ] [ i ] -= 1 C [ 1 ] [ i ] -= 1 C [ 2 ] [ i ] -= 1 flag = " True " break if C == check : print ( " Yes " ) else : print ( " No " )
list_c = [ ] for i in range ( 3 ) : temp_c = list ( map ( int , input ( ) . split ( ) ) ) list_c . append ( temp_c ) list_a = [ 0 for _ in range ( 3 ) ] list_b = [ 0 for _ in range ( 3 ) ] for i in range ( 3 ) : list_b [ i ] = list_c [ i ] [ 0 ] for i in range ( 3 ) : if i != 0 : list_a [ i ] = list_c [ 0 ] [ i ] - list_b [ 0 ] for j in range ( 3 ) : for i in range ( 3 ) : if list_c [ i ] [ j ] != list_a [ j ] + list_b [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ map ( int , raw_input ( ) . split ( ) ) for i in range ( 3 ) ] def C ( i , j ) : return c [ i - 1 ] [ j - 1 ] if C ( 1 , 1 ) - C ( 1 , 2 ) == C ( 3 , 1 ) - C ( 3 , 2 ) == C ( 2 , 1 ) - C ( 2 , 2 ) and C ( 1 , 2 ) - C ( 1 , 3 ) == C ( 2 , 2 ) - C ( 2 , 3 ) == C ( 3 , 2 ) - C ( 3 , 3 ) : print ( " Yes " ) else : print ( " No " )
A = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] count = 0 for i in range ( 2 ) : if A [ i ] [ 0 ] - A [ i + 1 ] [ 0 ] == A [ i ] [ 1 ] - A [ i + 1 ] [ 1 ] == A [ i ] [ 2 ] - A [ i + 1 ] [ 2 ] : count += 1 if count == 2 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ [ ] , [ ] , [ ] ] C [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) C [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) C [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) cond0_0 = C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] cond0_1 = C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] cond0_2 = C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] cond0 = cond0_0 and cond0_1 and cond0_2 cond1_0 = C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] cond1_1 = C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] cond1_2 = C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] cond1 = cond1_0 and cond1_1 and cond1_2 if cond0 and cond1 : print ( ' Yes ' ) else : print ( ' No ' )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) for b1 in range ( 101 ) : a = [ ] b = [ ] a1 = c [ 0 ] [ 0 ] - b1 if a1 < 0 : break a . append ( a1 ) b . append ( b1 ) for b2 in range ( 101 ) : a2 = c [ 1 ] [ 1 ] - b2 if a2 < 0 : break a . append ( a2 ) b . append ( b2 ) for b3 in range ( 101 ) : a3 = c [ 2 ] [ 2 ] - b3 if a3 < 0 : break a . append ( a3 ) b . append ( b3 ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : break if i == 2 and j == 2 : print ( " Yes " ) exit ( ) if a [ j ] + b [ i ] != c [ i ] [ j ] : break b . pop ( ) a . pop ( ) a . pop ( ) b . pop ( ) print ( " No " )
status = [ ] for _ in range ( 3 ) : row = list ( map ( int , input ( ) . split ( ) ) ) status . append ( row ) sum_status = 0 sum_dig = 0 for h in range ( 3 ) : for w in range ( 3 ) : sum_status += status [ h ] [ w ] if h == w : sum_dig + = status [ h ] [ w ] if sum_dig * 3 == sum_status : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for b1 in range ( 101 ) : a1 = C [ 0 ] [ 0 ] - b1 a2 = C [ 0 ] [ 1 ] - b1 a3 = C [ 0 ] [ 2 ] - b1 for b2 in range ( 101 ) : aa1 = C [ 1 ] [ 0 ] - b2 aa2 = C [ 1 ] [ 1 ] - b2 aa3 = C [ 1 ] [ 2 ] - b2 for b3 in range ( 101 ) : aaa1 = C [ 2 ] [ 0 ] - b3 aaa2 = C [ 2 ] [ 1 ] - b3 aaa3 = C [ 2 ] [ 2 ] - b3 if ( a1 , a2 , a3 ) == ( aa1 , aa2 , aa3 ) == ( aaa1 , aaa2 , aaa3 ) : print ( " Yes " ) exit ( ) print ( " No " )
x = list ( map ( int , input ( ) . split ( ) ) ) y = list ( map ( int , input ( ) . split ( ) ) ) z = list ( map ( int , input ( ) . split ( ) ) ) if x [ 1 ] - x [ 0 ] != y [ 1 ] - y [ 0 ] or y [ 1 ] - y [ 0 ] != z [ 1 ] - z [ 0 ] or x [ 2 ] - x [ 0 ] != y [ 2 ] - y [ 0 ] or y [ 0 ] - x [ 0 ] != y [ 1 ] - x [ 1 ] or z [ 1 ] - x [ 1 ] != z [ 2 ] - x [ 2 ] or z [ 0 ] - x [ 0 ] != z [ 1 ] - x [ 1 ] or z [ 1 ] - x [ 1 ] != z [ 2 ] - x [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) ans = ' Yes ' diff_w = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] for i in range ( 3 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != diff_w [ j - 1 ] : ans = ' No ' break diff_h = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != diff_h [ i - 1 ] : ans = ' No ' break print ( ans )
c = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = ' No ' print ( ans )
import sys input = sys . stdin . readline def main ( ) : while True : N , M = map ( int , input ( ) . split ( ) ) if N == 0 : break path = [ [ False ] * N for i in range ( N ) ] for i in range ( M ) : u , v = map ( int , input ( ) . split ( ) ) u -= 1 ; v - = 1 ; path [ u ] [ v ] = True path [ v ] [ u ] = True d = [ - 1 ] * N d [ 0 ] = 0 q = [ 0 ] while len ( q ) > 0 : now = q . pop ( 0 ) for i in range ( N ) : if path [ now ] [ i ] and d [ i ] == - 1 : q . append ( i ) d [ i ] = d [ now ] + 1 ok = True for i in range ( 1 , N ) : for j in range ( i + 1 , N ) : if path [ i ] [ j ] and d [ i ] == d [ j ] : ok = False break if not ok : break if not ok : print ( 0 ) else : num = 0 for i in range ( N ) : if d [ i ] & 1 : num + = 1 if N & 1 : print ( 1 ) if num & 1 : print ( ( N - num ) // 2 ) else : print ( num // 2 ) else : if num & 1 : print ( 0 ) else : if N // 2 == num : print ( 1 ) print ( num // 2 ) else : print ( 2 ) tmp = min ( num , N - num ) print ( tmp // 2 ) print ( ( N - tmp ) // 2 ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ok = True lis = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] d = [ [ c [ l [ 0 ] ] [ i ] - c [ l [ 1 ] ] [ i ] for i in range ( 3 ) ] for l in lis ] e = [ [ c [ i ] [ l [ 0 ] ] - c [ i ] [ l [ 1 ] ] for i in range ( 3 ) ] for l in lis ] for i in range ( 3 ) : if d [ i ] . count ( d [ i ] [ 0 ] ) != 3 : ok = False if e [ i ] . count ( e [ i ] [ 0 ] ) != 3 : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( c [ 0 ] [ 0 ] + 1 ) : a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - i for j in range ( 1 , 3 ) : a [ j ] = c [ j ] [ 0 ] - b [ 0 ] b [ j ] = c [ 0 ] [ j ] - a [ 0 ] flag = True for k in range ( 3 ) : for l in range ( 3 ) : if c [ k ] [ l ] != a [ k ] + b [ l ] : flag = False if flag : print ( " Yes " ) exit ( ) print ( " No " )
li = [ ] li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' for a0 in range ( li [ 0 ] [ 0 ] + 1 ) : b0 = li [ 0 ] [ 0 ] - a0 b1 = li [ 1 ] [ 0 ] - a0 b2 = li [ 2 ] [ 0 ] - a0 a1 = li [ 0 ] [ 1 ] - b0 a2 = li [ 0 ] [ 2 ] - b0 if li [ 0 ] [ 0 ] != a0 + b0 : ans = ' No ' if li [ 0 ] [ 1 ] != a1 + b0 : ans = ' No ' if li [ 0 ] [ 2 ] != a2 + b0 : ans = ' No ' if li [ 1 ] [ 0 ] != a0 + b1 : ans = ' No ' if li [ 1 ] [ 1 ] != a1 + b1 : ans = ' No ' if li [ 1 ] [ 2 ] != a2 + b1 : ans = ' No ' if li [ 2 ] [ 0 ] != a0 + b2 : ans = ' No ' if li [ 2 ] [ 1 ] != a1 + b2 : ans = ' No ' if li [ 2 ] [ 2 ] != a2 + b2 : ans = ' No ' print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i flg = True for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - i if b [ j ] < 0 : flg = False break if flg : for j in range ( 1 , 3 ) : a [ j ] = C [ j ] [ 0 ] - b [ 0 ] if a [ j ] < 0 : flg = False break if flg : for j in range ( 3 ) : for k in range ( 3 ) : if C [ j ] [ k ] != a [ j ] + b [ k ] : flg = False break if flg : print ( ' Yes ' ) quit ( ) print ( ' No ' )
def main ( ) : G = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] def is_ok ( rs , cs ) : for r , ri in enumerate ( rs , start = 1 ) : for c , ci in enumerate ( cs ) : if G [ r ] [ c ] != ri + ci : return False return True for r0 in range ( G [ 0 ] [ 0 ] + 1 ) : c0 = G [ 0 ] [ 0 ] - r0 c1 = G [ 0 ] [ 1 ] - r0 c2 = G [ 0 ] [ 2 ] - r0 r1 = G [ 1 ] [ 0 ] - c0 r2 = G [ 2 ] [ 0 ] - c0 rs = ( r1 , r2 ) cs = ( c0 , c1 , c2 ) if is_ok ( rs , cs ) : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
grid = [ list ( int ( s ) for s in input ( ) . split ( ) ) for _ in range ( 3 ) ] flg = False if ( grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 1 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 1 ] [ 2 ] - grid [ 0 ] [ 2 ] ) \ and ( grid [ 2 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 2 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 2 ] [ 2 ] - grid [ 0 ] [ 2 ] ) : flg = True print ( " Yes " if flg == True else " No " )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ' ' ) ] ) for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j + 1 ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : li = list ( map ( int , input ( ) . split ( ) ) ) c . append ( li ) a = [ 0 , ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) , ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == ( a [ i ] + b [ j ] ) : pass else : ans = " No " break if ans == " No " : break print ( ans )
grid = [ ] for _ in range ( 3 ) : grid . append ( ( list ) ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 3 ) : j = ( i + 1 ) % 3 diff1 = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] diff2 = grid [ i ] [ 1 ] - grid [ j ] [ 1 ] diff3 = grid [ i ] [ 2 ] - grid [ j ] [ 2 ] if diff1 != diff2 or diff2 != diff3 or diff1 != diff3 : print ( " No " ) exit ( ) for i in range ( 3 ) : j = ( i + 1 ) % 3 diff1 = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] diff2 = grid [ 1 ] [ i ] - grid [ 1 ] [ j ] diff3 = grid [ 2 ] [ i ] - grid [ 2 ] [ j ] if diff1 != diff2 or diff2 != diff3 or diff1 != diff3 : print ( " No " ) exit ( ) print ( " Yes " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = l [ 0 ] a2 = l [ 1 ] [ 0 ] - b [ 0 ] a3 = l [ 2 ] [ 0 ] - b [ 0 ] if l [ 1 ] == [ a2 + b [ 0 ] , a2 + b [ 1 ] , a2 + b [ 2 ] ] and l [ 2 ] == [ a3 + b [ 0 ] , a3 + b [ 1 ] , a3 + b [ 2 ] ] : print ( ' Yes ' ) else : print ( ' No ' )
a = [ input ( ) . split ( ) for l in range ( 3 ) ] x0 = 0 x1 = 0 x2 = 0 y0 = 0 y1 = 0 y2 = 0 judg = 0 for i in range ( 3 ) : for j in range ( 3 ) : a [ i ] [ j ] = int ( a [ i ] [ j ] ) for i in range ( 100 ) : x0 = i y0 = a [ 0 ] [ 0 ] - i y1 = a [ 0 ] [ 1 ] - i y2 = a [ 0 ] [ 2 ] - i x1 = a [ 1 ] [ 1 ] - y1 x2 = a [ 2 ] [ 2 ] - y2 if a [ 1 ] [ 0 ] == x1 + y0 and a [ 1 ] [ 2 ] == x1 + y2 and a [ 2 ] [ 0 ] == x2 + y0 and a [ 2 ] [ 1 ] == x2 + y1 : judg = 1 break if judg == 0 : print ( " No " ) else : print ( " Yes " )
b = list ( map ( int , input ( ) . split ( ) ) ) a2 = list ( map ( int , input ( ) . split ( ) ) ) a3 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( max ( 0 , b [ 0 ] - 100 , b [ 1 ] - 100 , b [ 2 ] - 100 ) , min ( 100 , b [ 0 ] , b [ 1 ] , b [ 2 ] ) + 1 ) : t1 = set ( ) t2 = set ( ) for j in range ( 3 ) : t1 . add ( a2 [ j ] - ( b [ j ] - i ) ) t2 . add ( a3 [ j ] - ( b [ j ] - i ) ) if len ( t1 ) == 1 and len ( t2 ) == 1 and list ( t1 ) [ 0 ] >= 0 and list ( t2 ) [ 0 ] >= 0 : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A , B , C , D , E , F , G , H , I = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] , c [ 1 ] [ 0 ] , c [ 1 ] [ 1 ] , c [ 1 ] [ 2 ] , c [ 2 ] [ 0 ] , c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] if max ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) == min ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) : print ( " Yes " ) else : print ( " No " )
c = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) sum_yoko = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : sum_yoko [ i ] = sum ( c [ i ] ) sum_tate = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : sum_tate [ i ] = c [ 0 ] [ i ] + c [ 1 ] [ i ] + c [ 2 ] [ i ] b1mb2 = ( sum_yoko [ 0 ] - sum_yoko [ 1 ] ) / 3 b2mb3 = ( sum_yoko [ 1 ] - sum_yoko [ 2 ] ) / 3 b3mb1 = ( sum_yoko [ 2 ] - sum_yoko [ 0 ] ) / 3 a1ma2 = ( sum_tate [ 0 ] - sum_tate [ 1 ] ) / 3 a2ma3 = ( sum_tate [ 1 ] - sum_tate [ 2 ] ) / 3 a3ma1 = ( sum_tate [ 2 ] - sum_tate [ 0 ] ) / 3 chk = [ b1mb2 , b2mb3 , b3mb1 , a1ma2 , a2ma3 , a3ma1 ] flg = 0 for i in chk : if ( i * 10 ) % 10 != 0 : flg = 1 if flg == 1 : print ( " No " ) else : print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] x = 0 for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : x += 1 for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] == c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : x += 1 if x == 4 : print ( " Yes " ) else : print ( " No " )
import numpy as np C = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) c12 = C [ 1 ] - C [ 0 ] c23 = C [ 2 ] - C [ 1 ] if len ( set ( c12 ) ) == 1 and len ( set ( c23 ) ) == 1 : CT = C . T ct12 = CT [ 1 ] - CT [ 0 ] ct23 = CT [ 2 ] - CT [ 1 ] if len ( set ( ct12 ) ) == 1 and len ( set ( ct23 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ None for _ in range ( 3 ) ] b = [ None for _ in range ( 3 ) ] b [ 0 ] , a [ 0 ] = 0 , c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for j in range ( 1 , 3 ) : b [ j ] = c [ j ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : ans = " No " break print ( ans )
c_0 = list ( map ( int , input ( ) . split ( ) ) ) c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) d = c_0 [ 0 ] + c_1 [ 1 ] + c_2 [ 2 ] e = c_1 [ 0 ] + c_0 [ 2 ] + c_2 [ 1 ] f = c_0 [ 1 ] + c_1 [ 2 ] + c_2 [ 0 ] if d == e == f : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c13 + c22 + c31 == c12 + c21 + c33 and c13 + c22 + c31 == c11 + c23 + c32 : print ( ' Yes ' ) else : print ( ' No ' )
matrix = [ ] for i in range ( 3 ) : matrix . append ( list ( map ( int , input ( ) . split ( ) ) ) ) mat_dif = [ 0 , 0 , 0 ] for i in range ( 3 ) : mat_dif [ i ] = ( [ matrix [ i ] [ 0 ] - matrix [ i ] [ 1 ] ] , [ matrix [ i ] [ 1 ] - matrix [ i ] [ 2 ] ] ) if mat_dif [ 0 ] == mat_dif [ 1 ] == mat_dif [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] sa_a = [ c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ] sa_b = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ] for i in range ( 2 ) : if sa_a [ i ] != c [ i ] [ i + 1 ] - c [ i + 1 ] [ i + 1 ] : print ( " No " ) quit ( ) for i in range ( 2 ) : if sa_b [ i ] != c [ i + 1 ] [ i ] - c [ i + 1 ] [ i + 1 ] : print ( " No " ) break else : print ( " Yes " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) d = [ 0 ] * 3 e = d for i in range ( 3 ) : d [ i ] = a [ i ] - b [ i ] e [ i ] = b [ i ] - c [ i ] f = [ a [ 0 ] - a [ 1 ] , b [ 0 ] - b [ 1 ] , c [ 0 ] - c [ 1 ] ] g = [ a [ 1 ] - a [ 2 ] , b [ 1 ] - b [ 2 ] , c [ 1 ] - c [ 2 ] ] d = len ( set ( d ) ) ; e = len ( set ( e ) ) ; f = len ( set ( f ) ) ; g = len ( set ( g ) ) if d == 1 and e == 1 and f == 1 and g == 1 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) for a1 in range ( - 200 , 200 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == " __main__ " : main ( )
def main ( ) : C1n = list ( map ( int , input ( ) . split ( ) ) ) C2n = list ( map ( int , input ( ) . split ( ) ) ) C3n = list ( map ( int , input ( ) . split ( ) ) ) C = [ C1n , C2n , C3n ] for i in range ( 3 ) : for j in range ( 3 ) : if ( not ( C [ i ] [ j ] - C [ ( i + 1 ) % 2 ] [ j ] ) == ( C [ i ] [ ( j + 1 ) % 2 ] - C [ ( i + 1 ) % 2 ] [ ( j + 1 ) % 2 ] ) ) or ( not ( C [ i ] [ j ] - C [ i ] [ ( j + 1 ) % 2 ] ) == ( C [ ( i + 1 ) % 2 ] [ j ] - C [ ( i + 1 ) % 2 ] [ ( j + 1 ) % 2 ] ) ) : print ( " No " ) return print ( " Yes " ) main ( )
import sys l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 def dfs ( a , b , i ) : if i > 2 : for j in range ( 3 ) : for k in range ( 3 ) : if j != k : if a [ j ] + b [ k ] != l [ j ] [ k ] : return print ( " Yes " ) sys . exit ( ) for a [ i ] in range ( l [ i ] [ i ] + 1 ) : b [ i ] = l [ i ] [ i ] - a [ i ] dfs ( a , b , i + 1 ) dfs ( a , b , 0 ) print ( " No " )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for M in range ( 3 ) ] ans = " No " for i in range ( min ( l [ 0 ] ) + 1 ) : for j in range ( min ( l [ 1 ] ) + 1 ) : for k in range ( min ( l [ 2 ] ) + 1 ) : if ( l [ 0 ] [ 0 ] - i ) == ( l [ 1 ] [ 0 ] - j ) and ( l [ 0 ] [ 0 ] - i ) == ( l [ 2 ] [ 0 ] - k ) and \ ( l [ 0 ] [ 1 ] - i ) == ( l [ 1 ] [ 1 ] - j ) and ( l [ 0 ] [ 1 ] - i ) == ( l [ 2 ] [ 1 ] - k ) and \ ( l [ 0 ] [ 2 ] - i ) == ( l [ 1 ] [ 2 ] - j ) and ( l [ 0 ] [ 2 ] - i ) == ( l [ 2 ] [ 2 ] - k ) : ans = " Yes " print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) res = 0 for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] and c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] : res += 1 for j in range ( 2 ) : if c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] == c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] and c [ 2 ] [ j ] - c [ 2 ] [ j + 1 ] == c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] : res += 1 print ( " Yes " if res == 4 else " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def solve ( ) : if not ( c11 - c21 == c12 - c22 == c13 - c23 ) : return False if not ( c11 - c31 == c12 - c32 == c13 - c33 ) : return False if not ( c11 - c12 == c21 - c22 == c31 - c32 ) : return False if not ( c11 - c13 == c21 - c23 == c31 - c33 ) : return False return True c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) print ( ' Yes ' if solve ( ) else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ind = 0 for j in range ( 1 , 3 ) : if not ( C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] == C [ 1 ] [ j ] - C [ 1 ] [ j - 1 ] == C [ 2 ] [ j ] - C [ 2 ] [ j - 1 ] ) : ind = 1 break if ind == 1 : print ( " No " ) else : print ( " Yes " )
c_array = [ ] for i in range ( 3 ) : c_list = [ int ( e ) for e in input ( ) . split ( ) ] c_array . append ( c_list ) c11 = c_array [ 0 ] [ 0 ] c12 = c_array [ 0 ] [ 1 ] c13 = c_array [ 0 ] [ 2 ] c21 = c_array [ 1 ] [ 0 ] c22 = c_array [ 1 ] [ 1 ] c23 = c_array [ 1 ] [ 2 ] c31 = c_array [ 2 ] [ 0 ] c32 = c_array [ 2 ] [ 1 ] c33 = c_array [ 2 ] [ 2 ] if ( c11 - c12 == c21 - c22 and c21 - c22 == c31 - c32 and c11 - c12 == c31 - c32 and c12 - c13 == c22 - c23 and c22 - c23 == c32 - c33 and c12 - c13 == c32 - c33 and c11 - c13 == c21 - c23 and c21 - c23 == c31 - c33 and c11 - c13 == c31 - c33 ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = True X = 0 b = [ c [ i ] [ 0 ] - X for i in range ( 3 ) ] a = [ c [ 0 ] [ i ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' )
c = [ int ( i ) for i in input ( ) . split ( ) ] d = [ int ( i ) for i in input ( ) . split ( ) ] e = [ int ( i ) for i in input ( ) . split ( ) ] if c [ 0 ] - d [ 0 ] == c [ 1 ] - d [ 1 ] == c [ 2 ] - d [ 2 ] and \ c [ 0 ] - e [ 0 ] == c [ 1 ] - e [ 1 ] == c [ 2 ] - e [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - \ c [ 2 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C11 , C12 , C13 = map ( int , input ( ) . split ( ) ) ; C21 , C22 , C23 = map ( int , input ( ) . split ( ) ) ; C31 , C32 , C33 = map ( int , input ( ) . split ( ) ) ; b1 = C11 ; b2 = C12 ; b3 = C13 ; a2 = C21 - b1 ; a3 = C31 - b1 ; if ( C22 == a2 + b2 and C23 == a2 + b3 and C32 == a3 + b2 and C33 == a3 + b3 ) : print ( " Yes " ) ; else : print ( " No " ) ;
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] q1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] q2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] q3 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] q4 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] if q1 and q2 and q3 and q4 == 1 : print ( " Yes " ) else : print ( " No " )
c = [ ' ' for _ in range ( 3 ) ] c [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] != c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] : ans = ' No ' break else : continue break print ( ans )
x = list ( map ( int , input ( ) . split ( ) ) ) y = list ( map ( int , input ( ) . split ( ) ) ) z = list ( map ( int , input ( ) . split ( ) ) ) if ( sum ( x ) - sum ( y ) ) % 3 == 0 and ( sum ( x ) - sum ( z ) ) % 3 == 0 \ and ( ( x [ 0 ] + y [ 0 ] + z [ 0 ] ) - ( x [ 1 ] + y [ 1 ] + z [ 1 ] ) ) % 3 == 0 \ and ( ( x [ 0 ] + y [ 0 ] + z [ 0 ] ) - ( x [ 2 ] + y [ 2 ] + z [ 2 ] ) ) % 3 == 0 : print ( ' Yes ' ) else : print ( ' No ' )
def taka ( A ) : t = 0 for a1 in range ( 101 ) : b1 = A [ 0 ] [ 0 ] - a1 b2 = A [ 0 ] [ 1 ] - a1 b3 = A [ 0 ] [ 2 ] - a1 a2 = A [ 1 ] [ 0 ] - b1 a3 = A [ 2 ] [ 0 ] - b1 if a2 + b2 != A [ 1 ] [ 1 ] : t = 1 if a2 + b3 != A [ 1 ] [ 2 ] : t = 1 if a3 + b2 != A [ 2 ] [ 1 ] : t = 1 if a3 + b3 != A [ 2 ] [ 2 ] : t = 1 if t == 0 : return " Yes " return " No " if __name__ == " __main__ " : C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) print ( taka ( C ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ] == [ c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ] == [ c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] : if [ c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ] == [ c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ] == [ c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
import numpy as np c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = [ ] c = np . array ( c ) ch = np . diff ( c ) if np . all ( ch [ 0 ] == ch [ 1 ] ) & np . all ( ch [ 1 ] == ch [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) cw = np . diff ( c . T ) if np . all ( cw [ 0 ] == cw [ 1 ] ) & np . all ( cw [ 1 ] == cw [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) ans = " Yes " if all ( ans ) else " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a in range ( 101 ) : for b in range ( 101 ) : for c in range ( 101 ) : d = C [ 0 ] [ 0 ] - a e = C [ 1 ] [ 1 ] - b f = C [ 2 ] [ 2 ] - c if all ( [ b + d == C [ 0 ] [ 1 ] , c + d == C [ 0 ] [ 2 ] , a + e == C [ 1 ] [ 0 ] , c + e == C [ 1 ] [ 2 ] , a + f == C [ 2 ] [ 0 ] , b + f == C [ 2 ] [ 1 ] ] ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ ] c_diff = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) for i in range ( 3 ) : c_diff . append ( [ c [ i ] [ j ] - c [ i ] [ 0 ] for j in range ( 3 ) ] ) if c_diff [ 0 ] == c_diff [ 1 ] == c_diff [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False print ( " Yes " if flag else " No " )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : for b1 in range ( 0 , 101 ) : for b2 in range ( 0 , 101 ) : for b3 in range ( 0 , 101 ) : for i in range ( 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : break else : print ( YES ) return print ( NO ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
import sys from collections import Counter from collections import deque def input ( ) : return sys . stdin . readline ( ) . strip ( ) def mp ( ) : return map ( int , input ( ) . split ( ) ) def lmp ( ) : return list ( map ( int , input ( ) . split ( ) ) ) l = [ lmp ( ) for i in range ( 3 ) ] n1 = l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] n2 = l [ 0 ] [ 0 ] - l [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if n1 != l [ i ] [ 0 ] - l [ i ] [ 1 ] or n2 != l [ i ] [ 0 ] - l [ i ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] Sum = 0 for i in c : Sum += sum ( i ) if Sum % 3 : print ( ' No ' ) else : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : print ( " No " ) else : print ( " Yes " )
c = [ ] for i in range ( 3 ) : C = list ( map ( int , input ( ) . split ( ) ) ) c . append ( C ) for i in range ( 3 ) : Min = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] -= Min for i in range ( 2 ) : if c [ i ] == c [ i + 1 ] : pass else : print ( " No " ) exit ( ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if ( C [ 1 ] [ 1 ] - b2 ) == a2 and ( C [ 1 ] [ 2 ] - b3 ) == a2 : if ( C [ 2 ] [ 1 ] - b2 ) == a3 and ( C [ 2 ] [ 2 ] - b3 ) == a3 : print ( " Yes " ) exit ( ) print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) out = ' No ' if c13 - c11 == c23 - c21 == c33 - c31 : if c11 - c12 == c21 - c22 == c31 - c32 : if c12 - c13 == c22 - c23 == c32 - c33 : out = ' Yes ' print ( out )
import numpy as np c = np . empty ( ( 3 , 3 ) , dtype = int ) for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) judge = " Yes " for i in range ( 2 ) : if len ( set ( c [ i ] - c [ i + 1 ] ) ) != 1 : judge = " No " break if len ( set ( c [ : , i ] - c [ : , i + 1 ] ) ) != 1 : judge = " No " break print ( judge )
from numpy import array a , b , c = array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) e , f , g = [ array ( i ) for i in zip ( a , b , c ) ] h = lambda x : list ( x ) == list ( set ( x ) ) * 3 print ( " YNeos " [ 1 ^ all ( [ h ( a - b ) , h ( b - c ) , h ( c - a ) , h ( e - f ) , h ( f - g ) , h ( g - e ) ] ) : : 2 ] )
si = lambda : input ( ) ni = lambda : int ( input ( ) ) nm = lambda : map ( int , input ( ) . split ( ) ) nl = lambda : list ( map ( int , input ( ) . split ( ) ) ) l = [ nl ( ) for i in range ( 3 ) ] a1 = 0 b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a2 = l [ 1 ] [ 0 ] - b1 a3 = l [ 2 ] [ 0 ] - b1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] for i , aa in enumerate ( a ) : for j , bb in enumerate ( b ) : if l [ i ] [ j ] != aa + bb : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : r = list ( map ( int , input ( ) . split ( ) ) ) c . append ( r ) d1 = set ( [ ] ) d2 = set ( [ ] ) d3 = set ( [ ] ) d4 = set ( [ ] ) for i in range ( 3 ) : d1 . add ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) d2 . add ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) d3 . add ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d4 . add ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) if len ( d1 ) == 1 and len ( d2 ) == 1 and len ( d3 ) == 1 and len ( d4 ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
A = [ ] A . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) A . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) A . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) A2 = [ ] for r in A : mi = min ( r ) A2 . append ( [ x - mi for x in r ] ) a2 = A2 [ 0 ] ans = " Yes " for x in A2 : if a2 != x : ans = " No " print ( ans )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] h1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] h2 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] w1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] w2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] if h1 and h2 and w1 and w2 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) flag = False if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : flag = True if flag : print ( ' Yes ' ) else : print ( ' No ' )
l = [ [ ] for _ in range ( 3 ) ] for i in range ( 0 , 3 ) : l [ i ] = [ int ( _ ) for _ in input ( ) . split ( ) ] t = [ 0 , 0 , 0 ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : t [ i ] += l [ j ] [ i ] p = ( t [ 0 ] - t [ 1 ] ) / 3 q = ( t [ 0 ] - t [ 2 ] ) / 3 if l [ 0 ] [ 0 ] - p == l [ 0 ] [ 1 ] and l [ 0 ] [ 0 ] - q == l [ 0 ] [ 2 ] and l [ 1 ] [ 0 ] - p == l [ 1 ] [ 1 ] and l [ 1 ] [ 0 ] - q == l [ 1 ] [ 2 ] and l [ 2 ] [ 0 ] - p == l [ 2 ] [ 1 ] and l [ 2 ] [ 0 ] - q == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True if not C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : flag = False if not C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : flag = False print ( " Yes " if flag is True else " No " )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) a = [ 0 ] * 3 b = [ 0 ] * 3 x = 0 for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - x for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : x = a [ i ] + b [ j ] if x != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
a = [ [ 0 , 0 , 0 ] ] * 3 for i in range ( 3 ) : a [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] == a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] and a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] == a [ 1 ] [ 2 ] + a [ 2 ] [ 1 ] and a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] == a [ 1 ] [ 1 ] + a [ 0 ] [ 2 ] and a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] == a [ 2 ] [ 0 ] + a [ 1 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx = [ 0 ] * 2 dy = [ 0 ] * 2 for i in range ( 2 ) : dx [ i ] = a [ 0 ] [ i + 1 ] - a [ 0 ] [ i ] for i in range ( 2 ) : dy [ i ] = a [ i + 1 ] [ 0 ] - a [ i ] [ 0 ] for i in range ( 3 ) : for j in range ( 2 ) : if a [ i ] [ j + 1 ] - a [ i ] [ j ] != dx [ j ] : print ( " No " ) exit ( 0 ) for i in range ( 3 ) : for j in range ( 2 ) : if a [ j + 1 ] [ i ] - a [ j ] [ i ] != dy [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ c [ 0 ] [ i ] - 0 for i in range ( 3 ) ] b = [ c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) ] d = [ [ a [ i ] + b [ j ] for i in range ( 3 ) ] for j in range ( 3 ) ] print ( ' Yes ' if c == d else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] res = 0 ans = 0 for i in range ( 3 ) : res += sum ( c [ i ] ) ans += c [ i ] [ i ] * 3 if res == ans : print ( ' Yes ' ) else : print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c4 - c1 == c5 - c2 == c6 - c3 and c7 - c1 == c8 - c2 == c9 - c3 : print ( " Yes " ) else : print ( " No " )
def check ( a , C ) : vertical = False horizonal = False d1 = C [ a [ 0 ] ] [ 0 ] - C [ a [ 1 ] ] [ 0 ] d2 = C [ a [ 0 ] ] [ 1 ] - C [ a [ 1 ] ] [ 1 ] d3 = C [ a [ 0 ] ] [ 2 ] - C [ a [ 1 ] ] [ 2 ] if d1 == d2 == d3 : vertical = True d4 = C [ 0 ] [ a [ 0 ] ] - C [ 0 ] [ a [ 1 ] ] d5 = C [ 1 ] [ a [ 0 ] ] - C [ 1 ] [ a [ 1 ] ] d6 = C [ 2 ] [ a [ 0 ] ] - C [ 2 ] [ a [ 1 ] ] if d4 == d5 == d6 : horizonal = True return vertical and horizonal def main ( ) : ans = True C = [ list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) for e in x : if check ( e , C ) == False : ans = False break return " Yes " if ans else " No " if __name__ == " __main__ " : print ( main ( ) )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] def thr_check ( a , b , c ) : if a == b and b == c and c == a : return True else : return False s1 = thr_check ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] , C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] , C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) s2 = thr_check ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] , C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] , C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) s3 = thr_check ( C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] , C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] , C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] ) s4 = thr_check ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] , C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] , C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) s5 = thr_check ( C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] , C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] , C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ) s6 = thr_check ( C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] , C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] ) if s1 and s2 and s3 and s4 and s5 and s6 : print ( " Yes " ) else : print ( " No " )
import numpy as np a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = np . array ( a ) for i in range ( 3 ) : a [ i ] -= min ( a [ i ] ) print ( ' Yes ' if all ( a [ 0 ] == a [ 1 ] ) and all ( a [ 1 ] == a [ 2 ] ) else ' No ' )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , tan , asin , acos , atan , radians , degrees , log2 from itertools import accumulate , permutations , combinations , combinations_with_replacement , product , groupby from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from bisect import bisect , bisect_left from fractions import gcd from heapq import heappush , heappop from functools import reduce def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
mat = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( [ c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] , c [ 0 ] - c [ 2 ] ] ) for v in zip ( * mat ) : if v [ 0 ] != v [ 1 ] or v [ 1 ] != v [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] a = np . empty ( 3 ) b = np . empty ( 3 ) c_n = np . array ( c ) for a1 in range ( 101 ) : a [ 0 ] = a1 b = c_n [ 0 , : ] - a1 a [ 1 : ] = c_n [ 1 : , 0 ] - b [ 0 ] if a . min ( ) < 0 or b . min ( ) < 0 : continue ab = a . reshape ( 3 , 1 ) + b . reshape ( 1 , 3 ) if np . all ( c_n == ab ) : print ( " Yes " ) break else : print ( " No " )
ls = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] flg = " Yes " for i in range ( 2 ) : if ls [ 0 ] [ i ] - ls [ 0 ] [ i + 1 ] == ls [ 1 ] [ i ] - ls [ 1 ] [ i + 1 ] and ls [ 0 ] [ i ] - ls [ 0 ] [ i + 1 ] == ls [ 2 ] [ i ] - ls [ 2 ] [ i + 1 ] : pass else : flg = " No " print ( flg )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 ans = " Yes " for a1 in range ( 101 ) : a [ 0 ] = a1 b [ 0 ] = c [ 0 ] [ 0 ] - a1 b [ 1 ] = c [ 0 ] [ 1 ] - a1 b [ 2 ] = c [ 0 ] [ 2 ] - a1 a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : ans = " No " print ( ans )
import sys def main ( ) : mod = 1000000007 inf = float ( ' inf ' ) sys . setrecursionlimit ( 10 ** 6 ) def input ( ) : return sys . stdin . readline ( ) . rstrip ( ) def ii ( ) : return int ( input ( ) ) def mi ( ) : return map ( int , input ( ) . split ( ) ) def mi_0 ( ) : return map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) def lmi ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def lmi_0 ( ) : return list ( map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) ) def li ( ) : return list ( input ( ) ) grid = [ lmi ( ) for _ in range ( 3 ) ] vertical = [ [ grid [ i + 1 ] [ j ] - grid [ i ] [ j ] for j in range ( 3 ) ] for i in range ( 2 ) ] horizontal = [ [ grid [ i ] [ j + 1 ] - grid [ i ] [ j ] for i in range ( 3 ) ] for j in range ( 2 ) ] if len ( list ( set ( vertical [ 0 ] ) ) ) == 1 and len ( list ( set ( vertical [ 1 ] ) ) ) == 1 and len ( list ( set ( horizontal [ 0 ] ) ) ) == 1 and len ( list ( set ( horizontal [ 1 ] ) ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == " __main__ " : main ( )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 2 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 2 ] [ 2 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 0 ] [ 2 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 2 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 2 ] : print ( " No " ) ; exit ( ) print ( " Yes " )
l = [ 0 ] * 3 for i in range ( 3 ) : l [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : if l [ 0 ] [ i ] - l [ 1 ] [ i ] != l [ 0 ] [ i + 1 ] - l [ 1 ] [ i + 1 ] : print ( ' No ' ) exit ( ) if l [ 1 ] [ i ] - l [ 2 ] [ i ] != l [ 1 ] [ i + 1 ] - l [ 2 ] [ i + 1 ] : print ( ' No ' ) exit ( ) else : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] if ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) and ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : print ( " Yes " ) else : print ( " No " )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : if ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) : ret = YES else : ret = NO print ( ret ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
ii = 3 s = [ ] icase = 0 if icase == 0 : for i in range ( ii ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) elif icase == 1 : s . append ( [ 1 , 0 , 1 ] ) s . append ( [ 2 , 1 , 2 ] ) s . append ( [ 1 , 0 , 1 ] ) yn = 1 for i in range ( ii - 1 ) : if ( s [ i ] [ 1 ] - s [ i ] [ 0 ] ) != ( s [ i + 1 ] [ 1 ] - s [ i + 1 ] [ 0 ] ) : yn = 0 for i in range ( ii - 1 ) : if ( s [ i ] [ 2 ] - s [ i ] [ 0 ] ) != ( s [ i + 1 ] [ 2 ] - s [ i + 1 ] [ 0 ] ) : yn = 0 for j in range ( ii - 1 ) : if ( s [ 1 ] [ j ] - s [ 0 ] [ j ] ) != ( s [ 1 ] [ j + 1 ] - s [ 0 ] [ j + 1 ] ) : yn = 0 for j in range ( ii - 1 ) : if ( s [ 2 ] [ j ] - s [ 0 ] [ j ] ) != ( s [ 2 ] [ j + 1 ] - s [ 0 ] [ j + 1 ] ) : yn = 0 if yn == 1 : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = False for i in range ( - 100 , 100 ) : for j in range ( - 100 , 100 ) : for k in range ( - 100 , 100 ) : a11 = c [ 0 ] [ 0 ] - i a12 = c [ 0 ] [ 1 ] - j a13 = c [ 0 ] [ 2 ] - k if a11 != a12 or a12 != a13 : continue a21 = c [ 1 ] [ 0 ] - i a22 = c [ 1 ] [ 1 ] - j a23 = c [ 1 ] [ 2 ] - k if a21 != a22 or a22 != a23 : continue a31 = c [ 2 ] [ 0 ] - i a32 = c [ 2 ] [ 1 ] - j a33 = c [ 2 ] [ 2 ] - k if a31 != a32 or a32 != a33 : continue flag = True print ( ' Yes ' if flag else ' No ' )
n = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : x , y , z = input ( ) . split ( ) n [ i ] [ 0 ] = int ( x ) n [ i ] [ 1 ] = int ( y ) n [ i ] [ 2 ] = int ( z ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] isCmp = False for j in range ( 100 + 1 ) : b [ 0 ] = j a [ 0 ] = n [ 0 ] [ 0 ] - b [ 0 ] a [ 1 ] = n [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = n [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = n [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = n [ 0 ] [ 2 ] - a [ 0 ] isCmp = True for l in range ( 3 ) : for m in range ( 3 ) : if n [ l ] [ m ] != a [ l ] + b [ m ] : isCmp = False if isCmp == False : break if isCmp == True : print ( ' Yes ' ) isCmp = True break if isCmp == False : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import itertools import numpy as np import sys input = sys . stdin . readline def IL ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def SL ( ) : return input ( ) . split ( ) def I ( ) : return int ( sys . stdin . readline ( ) ) def S ( ) : return input ( ) l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] num = l [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : tmp = l [ i ] [ 0 ] - num for j in range ( 3 ) : l [ i ] [ j ] -= tmp for i in range ( 1 , 3 ) : tmp = l [ 0 ] [ i ] - num for j in range ( 3 ) : l [ j ] [ i ] -= tmp cnt = 0 for i in range ( 3 ) : cnt += l [ i ] . count ( num ) if cnt == 9 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all_sum = 0 right_up = 0 right_down = 0 for c in C : all_sum += sum ( c ) right_up += ( C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] ) right_down += ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] ) if all_sum % 3 == 0 and right_up == all_sum // 3 and right_down == all_sum // 3 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 == C [ 1 ] [ 0 ] - a2 == C [ 2 ] [ 0 ] - a3 b2 = C [ 0 ] [ 1 ] - a1 == C [ 1 ] [ 1 ] - a2 == C [ 2 ] [ 1 ] - a3 b3 = C [ 0 ] [ 2 ] - a1 == C [ 1 ] [ 2 ] - a2 == C [ 2 ] [ 2 ] - a3 if b1 and b2 and b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
raw_1 = list ( map ( int , input ( ) . split ( ) ) ) raw_2 = list ( map ( int , input ( ) . split ( ) ) ) raw_3 = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] flg = False while ( a [ 0 ] <= raw_1 [ 0 ] ) : for raw in range ( len ( raw_1 ) ) : b [ raw ] = raw_1 [ raw ] - a [ 0 ] a [ 1 ] = raw_2 [ 0 ] - b [ 0 ] a [ 2 ] = raw_3 [ 0 ] - b [ 0 ] row_list = [ raw_1 , raw_2 , raw_3 ] tmp_flg = True for num_a in range ( 3 ) : for num_b in range ( 3 ) : if row_list [ num_a ] [ num_b ] != a [ num_a ] + b [ num_b ] : tmp_flg = False break if ( tmp_flg ) : flg = True break a [ 0 ] += 1 if ( flg ) : print ( " Yes " ) else : print ( " No " )
import sys def main ( ) : input = sys . stdin . readline C = [ ] s = 0 for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) s += sum ( c ) if s % 3 != 0 : print ( ' No ' ) else : p1 = C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] p2 = C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] p3 = C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] p4 = C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] p5 = C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] p6 = C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] if all ( [ p1 , p2 , p3 , p4 , p5 , p6 ] ) : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if len ( set ( [ l [ i + 1 ] [ j ] - l [ i ] [ j ] for j in range ( 3 ) ] ) ) != 1 or len ( set ( [ l [ j ] [ i + 1 ] - l [ j ] [ i ] for j in range ( 3 ) ] ) ) != 1 : print ( ' No ' ) break else : print ( ' Yes ' )
a = [ int ( i ) for i in input ( ) . split ( ) ] b = [ int ( i ) for i in input ( ) . split ( ) ] c = [ int ( i ) for i in input ( ) . split ( ) ] a1 = 0 b1 = a [ 0 ] - a1 b2 = a [ 1 ] - a1 b3 = a [ 2 ] - a1 a2 = b [ 0 ] - b1 a3 = c [ 0 ] - b1 if b [ 1 ] == a2 + b2 and b [ 2 ] == a2 + b3 and c [ 1 ] == a3 + b2 and c [ 2 ] == a3 + b3 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a1 , a2 , a3 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if ( b1 - a1 ) == ( b2 - a2 ) == ( b3 - a3 ) and ( c1 - b1 ) == ( c2 - b2 ) == ( c3 - b3 ) : if a2 - a1 == b2 - b1 == c2 - c1 and a3 - a2 == b3 - b2 == c3 - c2 : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) k = c2 - c1 failflag = 0 if ( c5 - c4 ) != k or ( c8 - c7 ) != k : failflag = 1 k = c3 - c2 if ( c6 - c5 ) != k or ( c9 - c8 ) != k : failflag = 1 k = c4 - c1 if ( c5 - c2 ) != k or ( c6 - c3 ) != k : failflag = 1 k = c7 - c4 if ( c8 - c5 ) != k or ( c9 - c6 ) != k : failflag = 1 if failflag == 0 : print ( ' Yes ' ) else : print ( ' No ' )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] def chk ( al , bl , li ) : for i in range ( 3 ) : for j in range ( 3 ) : if li [ i ] [ j ] != al [ i ] + bl [ j ] : return False return True flag = True for a1 in range ( max ( li [ 0 ] ) + 1 ) : al = [ ] bl = [ ] bl = [ li [ 0 ] [ 0 ] - a1 , li [ 0 ] [ 1 ] - a1 , li [ 0 ] [ 2 ] - a1 ] al . append ( a1 ) al . append ( li [ 1 ] [ 0 ] - bl [ 0 ] ) al . append ( li [ 2 ] [ 0 ] - bl [ 0 ] ) if chk ( al , bl , li ) : print ( " Yes " ) exit ( ) print ( " No " )
def solve ( string ) : c11 , c12 , c13 , c21 , c22 , c23 , c31 , c32 , c33 = map ( int , string . split ( ) ) check = c11 - c12 == c21 - c22 == c31 - c32 and c12 - c13 == c22 - c23 == c32 - c33 and c13 - c11 == c23 - c21 == c33 - c31 and c11 - c21 == c12 - c22 == c13 - c23 and c21 - c31 == c22 - c32 == c23 - c33 and c31 - c11 == c32 - c12 == c33 - c13 return " Yes " if check else " No " if __name__ == ' __main__ ' : n = 3 print ( solve ( ' \n ' . join ( [ input ( ) for _ in range ( n ) ] ) ) )
def II ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LMI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def LIIN ( n ) : return list ( int ( input ( ) ) for _ in range ( n ) ) def LMIN ( n ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] def IS ( ) : return input ( ) def MS ( ) : return map ( str , input ( ) . split ( ) ) def LMS ( ) : return list ( map ( str , input ( ) . split ( ) ) ) def LISN ( n ) : return list ( input ( ) for _ in range ( n ) ) def LMSN ( n ) : return [ input ( ) . split ( ) for _ in range ( n ) ] MOD = 10 ** 9 + 7 INF = 10 ** 18 def main ( ) : x = [ 0 ] * 3 y = [ 0 ] * 3 a = LMIN ( 3 ) x [ 0 ] = 0 for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != a [ i ] [ j ] : print ( ' No ' ) return 0 print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
import sys cl = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) cl . append ( c ) if cl [ 0 ] [ 0 ] + cl [ 1 ] [ 1 ] != cl [ 1 ] [ 0 ] + cl [ 0 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 1 ] [ 1 ] + cl [ 2 ] [ 2 ] != cl [ 1 ] [ 2 ] + cl [ 2 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 0 ] [ 0 ] + cl [ 2 ] [ 2 ] != cl [ 0 ] [ 2 ] + cl [ 2 ] [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False print ( " Yes " if flag else " No " )
"""
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' b1 = 0 a1 = grid [ 0 ] [ 0 ] a2 = grid [ 1 ] [ 0 ] a3 = grid [ 2 ] [ 0 ] b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if b2 + a2 != grid [ 1 ] [ 1 ] : ans = ' No ' if b2 + a3 != grid [ 2 ] [ 1 ] : ans = ' No ' if b3 + a2 != grid [ 1 ] [ 2 ] : ans = ' No ' if b3 + a3 != grid [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 b = [ - 1 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = False break if ans == True : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 101 ) : a1 = i b = [ grid [ 0 ] [ 0 ] - a1 , grid [ 0 ] [ 1 ] - a1 , grid [ 0 ] [ 2 ] - a1 ] flag = True for j in range ( 1 , 3 ) : for k in range ( 2 ) : if grid [ j ] [ k ] - b [ k ] != grid [ j ] [ k + 1 ] - b [ k + 1 ] : flag = False if flag : print ( " Yes " ) exit ( ) print ( " No " )
stand = list ( map ( int , input ( ) . split ( ) ) ) flag = 1 for i in range ( 2 ) : now = list ( map ( int , input ( ) . split ( ) ) ) diff = now [ 0 ] - stand [ 0 ] for j in range ( 1 , 3 ) : if now [ j ] != stand [ j ] + diff : flag = 0 if flag == 1 : print ( ' Yes ' ) else : print ( ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if ( C1 [ 0 ] - C1 [ 1 ] == C2 [ 0 ] - C2 [ 1 ] and C2 [ 0 ] - C2 [ 1 ] == C3 [ 0 ] - C3 [ 1 ] ) and ( C1 [ 0 ] - C1 [ 2 ] == C2 [ 0 ] - C2 [ 2 ] and C2 [ 0 ] - C2 [ 2 ] == C3 [ 0 ] - C3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
matrix = [ [ x for x in map ( int , input ( ) . split ( ) ) ] for _ in range ( 3 ) ] matrix = sorted ( matrix ) for i in range ( 1 , 3 ) : diff = matrix [ i ] [ 0 ] - matrix [ 0 ] [ 0 ] for j in range ( 3 ) : if matrix [ i ] [ j ] != matrix [ 0 ] [ j ] + diff : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from sys import exit C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
matrix = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 2 ) : for i in range ( 3 ) : if ( matrix [ i ] [ 0 ] > 0 and matrix [ i ] [ 1 ] > 0 and matrix [ i ] [ 2 ] > 0 ) : matrix [ i ] = list ( map ( lambda x : x - min ( matrix [ i ] [ 0 ] , matrix [ i ] [ 1 ] , matrix [ i ] [ 2 ] ) , matrix [ i ] ) ) matrix = [ list ( x ) for x in zip ( * matrix ) ] if ( matrix == [ [ 0 ] * 3 ] * 3 ) : print ( " Yes " ) else : print ( " No " )
c1 = [ int ( n ) for n in input ( ) . split ( ) ] c2 = [ int ( n ) for n in input ( ) . split ( ) ] c3 = [ int ( n ) for n in input ( ) . split ( ) ] if ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c2 [ 0 ] - c2 [ 1 ] ) ) and ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) and ( ( c2 [ 0 ] - c2 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c2 [ 1 ] - c2 [ 2 ] ) ) and ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) and ( ( c2 [ 1 ] - c2 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c2 [ 0 ] - c2 [ 2 ] ) ) and ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) and ( ( c2 [ 0 ] - c2 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) print ( " Yes " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e == b + d : if b + f == c + e : if d + h == e + g : if e + i == f + h : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = [ 0 ] B = [ C [ 0 ] [ i ] - A [ 0 ] for i in range ( 3 ) ] for i in range ( 1 , 3 ) : A . append ( C [ i ] [ 0 ] - B [ 0 ] ) for i , a in enumerate ( A ) : for j , b in enumerate ( B ) : if a + b != C [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 1 ] [ 0 ] == a2 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 0 ] == a3 + b1 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys def input ( ) : return sys . stdin . readline ( ) [ : - 1 ] def mi ( ) : return map ( int , input ( ) . split ( ) ) def ii ( ) : return int ( input ( ) ) def main ( ) : c = [ list ( mi ( ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] \ and c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ and c [ 2 ] [ 2 ] + c [ 0 ] [ 0 ] == c [ 2 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] YES = " Yes " NO = " No " def solver ( grid ) : result = NO a0 = 0 b0 = grid [ 0 ] [ 0 ] b1 = grid [ 0 ] [ 1 ] b2 = grid [ 0 ] [ 2 ] a1 = grid [ 1 ] [ 0 ] - b0 a2 = grid [ 2 ] [ 0 ] - b0 if a1 + b1 == grid [ 1 ] [ 1 ] and a1 + b2 == grid [ 1 ] [ 2 ] \ and a2 + b1 == grid [ 2 ] [ 1 ] and a2 + b2 == grid [ 2 ] [ 2 ] : result = YES return result if __name__ == " __main__ " : grid_c = [ [ 0 ] * 3 for j in range ( 0 , 3 ) ] for j in range ( 0 , 3 ) : grid_c [ j ] [ 0 ] , grid_c [ j ] [ 1 ] , grid_c [ j ] [ 2 ] = MI ( ) print ( " {} " . format ( solver ( grid_c ) ) )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) diff = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] c [ 1 ] [ 1 ] - = diff c [ 1 ] [ 0 ] - = diff diff = c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] c [ 0 ] [ 1 ] -= diff c [ 0 ] [ 0 ] -= diff if c [ 1 ] [ 1 ] == c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] == c [ 2 ] [ 1 ] and c [ 1 ] [ 0 ] == c [ 2 ] [ 0 ] and c [ 1 ] [ 0 ] == c [ 0 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
from itertools import product C1 = [ int ( x ) for x in input ( ) . split ( ) ] C2 = [ int ( x ) for x in input ( ) . split ( ) ] C3 = [ int ( x ) for x in input ( ) . split ( ) ] R1 = [ c [ 0 ] for c in [ C1 , C2 , C3 ] ] R2 = [ c [ 1 ] for c in [ C1 , C2 , C3 ] ] R3 = [ c [ 2 ] for c in [ C1 , C2 , C3 ] ] def check ( C1 , C2 ) : r = 1 == len ( set ( [ C1 [ 0 ] - C2 [ 0 ] , C1 [ 1 ] - C2 [ 1 ] , C1 [ 2 ] - C2 [ 2 ] ] ) ) return r if all ( check ( c1 , c2 ) for c1 , c2 , in product ( [ C1 , C2 , C3 ] , [ C1 , C2 , C3 ] ) ) and \ all ( check ( c1 , c2 ) for c1 , c2 in product ( [ R1 , R2 , R3 ] , [ R1 , R2 , R3 ] ) ) : print ( " Yes " ) else : print ( " No " )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] for i in range ( 3 ) : a = [ ] for j in range ( 3 ) : a . append ( s [ ( i + 1 ) % 3 ] [ j ] - s [ i % 3 ] [ j ] ) if a . count ( a [ 0 ] ) == len ( a ) : continue else : print ( ' No ' ) exit ( ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] : ans = " No " if c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] : ans = " No " for j in range ( 2 ) : if c [ 1 ] [ i + 1 ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : ans = " No " if c [ 2 ] [ i + 1 ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] : ans = " No " print ( ans )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : x = grid [ 0 ] [ 2 ] - grid [ 0 ] [ i ] y = grid [ 1 ] [ 2 ] - grid [ 1 ] [ i ] z = grid [ 2 ] [ 2 ] - grid [ 2 ] [ i ] if x != y or x != z : ans = " No " print ( ans )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) l = [ l1 , l2 , l3 ] c = l [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : l [ i ] [ j ] -= c if ( l [ 1 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 2 ] [ 0 ] ) and ( l [ 1 ] [ 2 ] == l [ 0 ] [ 2 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] and a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] ans = ' No ' for x in range ( 101 ) : for y in range ( 101 ) : for z in range ( 101 ) : d = [ ] d . append ( [ c [ 0 ] [ j ] - x for j in range ( 3 ) ] ) d . append ( [ c [ 1 ] [ j ] - y for j in range ( 3 ) ] ) d . append ( [ c [ 2 ] [ j ] - z for j in range ( 3 ) ] ) if sum ( len ( set ( d [ i ] [ j ] for i in range ( 3 ) ) ) for j in range ( 3 ) ) == 3 : ans = ' Yes ' print ( ans )
c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = c_1 + c_2 + c_3 if sum ( c ) == 3 * ( c_1 [ 0 ] + c_2 [ 1 ] + c_3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys stdin = sys . stdin def ns ( ) : return stdin . readline ( ) . rstrip ( ) def ni ( ) : return int ( ns ( ) ) def na ( ) : return list ( map ( int , stdin . readline ( ) . split ( ) ) ) def main ( ) : c = na ( ) dif1 , dif2 = c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] for i in range ( 2 ) : cn = na ( ) if cn [ 1 ] - cn [ 0 ] != dif1 or cn [ 2 ] - cn [ 1 ] != dif2 : print ( " No " ) quit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
grid = [ ] al = 0 cnt = 0 for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) al += sum ( a ) cnt += a [ i ] grid . append ( a ) if al == cnt * 3 : print ( ' Yes ' ) else : print ( ' No ' )
Z = [ ] for i in range ( 3 ) : A = list ( map ( int , input ( ) . split ( ) ) ) Z . append ( A ) Q = [ ] a1 = 0 b1 = Z [ 0 ] [ 0 ] - a1 b2 = Z [ 0 ] [ 1 ] - a1 b3 = Z [ 0 ] [ 2 ] - a1 a2 = Z [ 1 ] [ 0 ] - b1 a3 = Z [ 2 ] [ 0 ] - b1 c1 = [ a1 + b1 , a1 + b2 , a1 + b3 ] c2 = [ a2 + b1 , a2 + b2 , a2 + b3 ] c3 = [ a3 + b1 , a3 + b2 , a3 + b3 ] Q . append ( c1 ) Q . append ( c2 ) Q . append ( c3 ) if Z == Q : print ( " Yes " ) else : print ( " No " )
N = 3 c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] ds = [ sum ( c [ j ] [ ( i + j ) % 3 ] for j in range ( N ) ) for i in range ( N ) ] if ds [ 0 ] == ds [ 1 ] == ds [ 2 ] : print ( " Yes " ) else : print ( " No " )
a1 , a2 , a3 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if not ( a1 - a2 == b1 - b2 == c1 - c2 ) or not ( a2 - a3 == b2 - b3 == c2 - c3 ) : print ( ' No ' ) elif not ( a1 - b1 == a2 - b2 == a3 - b3 ) or not ( b1 - c1 == b2 - c2 == b3 - c3 ) : print ( ' No ' ) else : print ( ' Yes ' )
import sys import itertools sys . setrecursionlimit ( 10000 ) def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 for a2 in range ( 101 ) : b2 = C [ 1 ] [ 1 ] - a2 for a3 in range ( 101 ) : b3 = C [ 2 ] [ 2 ] - a3 if check ( C , [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ) : print ( " Yes " ) return print ( " No " ) def check ( C , A , B ) : for i in range ( len ( C ) ) : for j in range ( len ( C [ i ] ) ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : return False return True if ' __main__ ' == __name__ : resolve ( )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) C = [ C1 , C2 , C3 ] A = [ 0 ] * 3 B = [ 0 ] * 3 B = C1 A [ 1 ] = C2 [ 0 ] - B [ 0 ] A [ 2 ] = C3 [ 0 ] - B [ 0 ] flg = True for i , a in enumerate ( A ) : for j , b in enumerate ( B ) : if C [ i ] [ j ] != a + b : flg = False if flg is True : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e == g - h and b - c == e - f == h - i and a - c == d - f == g - i and a - d == b - e == c - f and d - g == e - h == f - i and a - g == b - h == c - i : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 1 , 3 ) : if C [ i ] [ 0 ] - C [ 0 ] [ 0 ] == C [ i ] [ 1 ] - C [ 0 ] [ 1 ] and C [ i ] [ 0 ] - C [ 0 ] [ 0 ] == C [ i ] [ 2 ] - C [ 0 ] [ 2 ] : pass else : print ( " No " ) exit ( ) print ( " Yes " )
import io array = [ ] for i in range ( 3 ) : array . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( array [ 0 ] [ 0 ] + array [ 1 ] [ 1 ] + array [ 2 ] [ 2 ] ) * 3 == ( sum ( array [ 0 ] ) + sum ( array [ 1 ] ) + sum ( array [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
mtx = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff1 = mtx [ 0 ] [ 0 ] - mtx [ 1 ] [ 0 ] diff2 = mtx [ 0 ] [ 0 ] - mtx [ 2 ] [ 0 ] diff3 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 1 ] diff4 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 2 ] if mtx [ 0 ] [ 1 ] - mtx [ 1 ] [ 1 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 1 ] [ 2 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 1 ] - mtx [ 2 ] [ 1 ] != diff2 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 2 ] [ 2 ] != diff2 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 2 ] != diff4 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 2 ] != diff4 : print ( ' No ' ) else : print ( ' Yes ' )
from functools import reduce import math def main ( ) : INF = float ( " inf " ) MOD = 10 ** 9 + 7 c = [ ] for _ in range ( 3 ) : c . append ( list ( int ( _ ) for _ in input ( ) . split ( ) ) ) c_row_sum = [ ] c_column_sum = [ ] for i in range ( 3 ) : c_row_sum . append ( sum ( c [ i ] ) ) for i in range ( 3 ) : tmp_sum = 0 for j in range ( 3 ) : tmp_sum += c [ j ] [ i ] c_column_sum . append ( tmp_sum ) for b in range ( 301 ) : a1 = ( c_column_sum [ 0 ] - b ) / 3 a2 = ( c_column_sum [ 1 ] - b ) / 3 a3 = ( c_column_sum [ 2 ] - b ) / 3 if a1 . is_integer ( ) and a2 . is_integer ( ) and a3 . is_integer ( ) : b1 = ( c_row_sum [ 0 ] - ( a1 + a2 + a3 ) ) / 3 b2 = ( c_row_sum [ 1 ] - ( a1 + a2 + a3 ) ) / 3 b3 = ( c_row_sum [ 2 ] - ( a1 + a2 + a3 ) ) / 3 if b1 . is_integer ( ) and b2 . is_integer ( ) and b3 . is_integer ( ) : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) bs = [ ] for a1 in range ( 0 , 101 ) : for b1 in range ( 0 , 101 ) : if a1 + b1 == c11 : f1 = True break for b2 in range ( 0 , 101 ) : if a1 + b2 == c12 : f2 = True break for b3 in range ( 0 , 101 ) : if a1 + b3 == c13 : f3 = True break if f1 and f2 and f3 : bs . append ( ( b1 , b2 , b3 ) ) bss = [ ] for a2 in range ( 0 , 101 ) : for b1 , b2 , b3 in bs : if a2 + b1 == c21 and a2 + b2 == c22 and a2 + b3 == c23 : bss . append ( ( b1 , b2 , b3 ) ) for a3 in range ( 0 , 101 ) : for b1 , b2 , b3 in bss : if a3 + b1 == c31 and a3 + b2 == c32 and a3 + b3 == c33 : print ( " Yes " ) break else : continue break else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] and \ c2 [ 0 ] - c3 [ 0 ] == c2 [ 1 ] - c3 [ 1 ] == c2 [ 2 ] - c3 [ 2 ] : print ( " Yes " ) else : print ( ' No ' )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' for i in range ( 1 , 3 ) : if C [ 0 ] [ i ] - C [ 1 ] [ i ] != C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] : ans = ' No ' break if C [ 0 ] [ i ] - C [ 2 ] [ i ] != C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] : ans = ' No ' break if C [ i ] [ 0 ] - C [ i ] [ 1 ] != C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] : ans = ' No ' break if C [ i ] [ 0 ] - C [ i ] [ 2 ] != C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] : ans = ' No ' break print ( ans )
if __name__ == ' __main__ ' : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] answer = ' No ' for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] ) - ( a1 + a2 + a3 ) b2 = ( c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] ) - ( a1 + a2 + a3 ) b3 = ( c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] ) - ( a1 + a2 + a3 ) if b1 % 3 == 0 and b2 % 3 == 0 and b3 % 3 == 0 : answer = ' Yes ' break print ( answer )
import sys input = lambda : sys . stdin . readline ( ) . rstrip ( ) def resolve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] absum = [ ] def dfs ( depth , perm , s ) : if depth == 3 : absum . append ( s ) else : for i in range ( 3 ) : if not i in perm : dfs ( depth + 1 , perm + [ i ] , s + c [ depth ] [ i ] ) dfs ( 0 , [ ] , 0 ) if len ( set ( absum ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : resolve ( )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " print ( ans )
import numpy as np import sys def validation ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : return False print ( ' Yes ' ) sys . exit ( ) return True c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] ) for i in range ( 101 ) : a = [ ] b = [ ] a . append ( i ) b . append ( c [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) validation ( c , a , b ) print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : x = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] y = c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] z = c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] p = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] q = c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] r = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] if x != y or y != z or x != z : flag = False break elif p != q or q != r or p != r : flag = False break if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a0 in range ( 0 , 100 + 1 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : print ( " Yes " ) else : print ( " No " )
import sys def solve ( ) : input = sys . stdin . readline mod = 10 ** 9 + 7 c = [ list ( map ( int , input ( ) . rstrip ( ' \n ' ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : m = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] -= m for i in range ( 3 ) : m = 10 ** 10 for j in range ( 3 ) : m = min ( c [ j ] [ i ] , m ) for j in range ( 3 ) : c [ j ] [ i ] -= m mt = 0 for i in range ( 3 ) : for j in range ( 3 ) : mt = max ( mt , c [ i ] [ j ] ) print ( " Yes " if mt == 0 else " No " ) if __name__ == ' __main__ ' : solve ( )
import sys def solve ( ) : input = sys . stdin . readline C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] possible = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : a11 = C [ 0 ] [ 0 ] - i a12 = C [ 0 ] [ 1 ] - j a13 = C [ 0 ] [ 2 ] - k a21 = C [ 1 ] [ 0 ] - i a22 = C [ 1 ] [ 1 ] - j a23 = C [ 1 ] [ 2 ] - k a31 = C [ 2 ] [ 0 ] - i a32 = C [ 2 ] [ 1 ] - j a33 = C [ 2 ] [ 2 ] - k if a11 == a12 == a13 and a21 == a22 == a23 and a31 == a32 == a33 : possible = True break if possible : break if possible : break print ( " Yes " if possible else " No " ) return 0 if __name__ == " __main__ " : solve ( )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] f1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] f2 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] == c [ 2 ] [ 1 ] f3 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] == c [ 1 ] [ 2 ] f4 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] == c [ 2 ] [ 2 ] if all ( [ f1 , f2 , f3 , f4 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c12 == c21 - c22 == c31 - c32 and c12 - c13 == c22 - c23 == c32 - c33 and c11 - c21 == c12 - c22 == c13 - c23 and c21 - c31 == c22 - c32 == c23 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] list_a = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] list_b = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != list_a [ i ] + list_b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
up = list ( map ( int , input ( ) . split ( ) ) ) mid = list ( map ( int , input ( ) . split ( ) ) ) down = list ( map ( int , input ( ) . split ( ) ) ) flag1 = 0 flag2 = 0 check = [ 0 , 0 , 0 ] for i in range ( - 100 , 101 , 1 ) : for j in range ( 3 ) : check [ j ] = up [ j ] + i if check == mid : flag1 = 1 if check == down : flag2 = 1 if flag1 == 1 & flag2 == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = 0 for j in range ( 2 ) : if ( C [ j + 1 ] [ 0 ] - C [ j ] [ 0 ] ) == ( C [ j + 1 ] [ 1 ] - C [ j ] [ 1 ] ) and ( C [ j + 1 ] [ 1 ] - C [ j ] [ 1 ] ) == ( C [ j + 1 ] [ 2 ] - C [ j ] [ 2 ] ) : pass else : flag = 1 break for k in range ( 2 ) : if ( C [ 0 ] [ k + 1 ] - C [ 0 ] [ k ] ) == ( C [ 1 ] [ k + 1 ] - C [ 1 ] [ k ] ) and ( C [ 1 ] [ k + 1 ] - C [ 1 ] [ k ] ) == ( C [ 2 ] [ k + 1 ] - C [ 2 ] [ k ] ) : pass else : flag = 1 break if flag == 0 : print ( " Yes " ) else : print ( " No " )
import sys c = [ ] for _ in range ( 3 ) : * C , = map ( int , input ( ) . split ( ) ) c . append ( C ) for a1 in range ( 0 , 101 , 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 if ( a2 + b2 ) != c [ 1 ] [ 1 ] : print ( " No " ) sys . exit ( ) if ( a2 + b3 ) != c [ 1 ] [ 2 ] : print ( " No " ) sys . exit ( ) a3 = c [ 2 ] [ 0 ] - b1 if ( a3 + b2 ) != c [ 2 ] [ 1 ] : print ( " No " ) sys . exit ( ) if ( a3 + b3 ) != c [ 2 ] [ 2 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] count = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : count += 1 if count == 9 : print ( ' Yes ' ) else : print ( ' No ' )
import sys input_methods = [ ' clipboard ' , ' file ' , ' key ' ] using_method = 0 input_method = input_methods [ using_method ] tin = lambda : map ( int , input ( ) . split ( ) ) lin = lambda : list ( tin ( ) ) mod = 1000000007 def main ( ) : vl = [ lin ( ) for _ in range ( 3 ) ] for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ f ] [ i ] - vl [ t ] [ i ] ) if len ( is_same ) != 1 : return ' No ' for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ i ] [ f ] - vl [ i ] [ t ] ) if len ( is_same ) != 1 : return ' No ' return ' Yes ' isTest = False def pa ( v ) : if isTest : print ( v ) def input_clipboard ( ) : import clipboard input_text = clipboard . get ( ) input_l = input_text . splitlines ( ) for l in input_l : yield l if __name__ == " __main__ " : if sys . platform == ' ios ' : if input_method == input_methods [ 0 ] : ic = input_clipboard ( ) input = lambda : ic . __next__ ( ) elif input_method == input_methods [ 1 ] : sys . stdin = open ( ' inputFile.txt ' ) else : pass isTest = True else : pass ret = main ( ) if ret is not None : print ( ret )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) print ( ' Yes ' ) if a - d == b - e == c - f and d - g == e - h == f - i else print ( ' No ' )
import numpy as np A = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for I in range ( 3 ) ] ) for I in range ( 3 ) : j , k , l = A [ 1 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) j , k , l = A [ 2 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) print ( " Yes " )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ax = x [ 0 ] [ 1 ] - x [ 0 ] [ 0 ] bx = x [ 0 ] [ 2 ] - x [ 0 ] [ 1 ] for i in range ( 3 ) : if ax != x [ i ] [ 1 ] - x [ i ] [ 0 ] or bx != x [ i ] [ 2 ] - x [ i ] [ 1 ] : print ( " No " ) break else : ay = x [ 1 ] [ 0 ] - x [ 0 ] [ 0 ] by = x [ 2 ] [ 0 ] - x [ 1 ] [ 0 ] for i in range ( 3 ) : if ay != x [ 1 ] [ i ] - x [ 0 ] [ i ] or by != x [ 2 ] [ i ] - x [ 1 ] [ i ] : print ( " No " ) break else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a = [ c [ 0 ] [ i ] for i in range ( 3 ) ] b = [ c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np C = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( C ) answer = ' Yes ' S = C . sum ( ) trace = np . diag ( C ) . sum ( ) S_row0 = C [ 0 , : ] . sum ( ) S_row1 = C [ 1 , : ] . sum ( ) S_row2 = C [ 2 , : ] . sum ( ) S_col0 = C [ : , 0 ] . sum ( ) S_col1 = C [ : , 1 ] . sum ( ) S_col2 = C [ : , 2 ] . sum ( ) if S != 3 * trace : answer = ' No ' elif S_row0 - 3 * C [ 0 , 0 ] != trace - S_col0 : answer = ' No ' elif S_row1 - 3 * C [ 1 , 0 ] != trace - S_col0 : answer = ' No ' print ( answer )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] == c1 [ 1 ] + c2 [ 2 ] + c3 [ 0 ] == c1 [ 2 ] + c2 [ 0 ] + c3 [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] targets = [ ( 0 , 1 ) , ( 1 , 0 ) , ( 1 , 2 ) , ( 2 , 1 ) , ( 2 , 0 ) , ( 0 , 2 ) ] for i , j in targets : if ( C [ i ] [ i ] + C [ i ] [ j ] + C [ j ] [ i ] + C [ j ] [ j ] ) % 2 != 0 : print ( " No " ) break else : if sum ( [ sum ( c ) for c in C ] ) % 3 != 0 : print ( " No " ) else : print ( " Yes " )
s = [ ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) b [ 0 ] = s [ 0 ] [ 0 ] b [ 1 ] = s [ 0 ] [ 1 ] b [ 2 ] = s [ 0 ] [ 2 ] a [ 1 ] = s [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = s [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if s [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from pprint import pprint c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ' ' ) ) ) ) diff_v = [ [ 0 ] * 3 for i in range ( 3 ) ] diff_h = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : if i > 0 : diff_v [ i ] [ j ] = c [ i ] [ j ] - c [ i - 1 ] [ j ] for j in range ( 0 , 3 ) : for i in range ( 0 , 3 ) : if j > 0 : diff_h [ j ] [ i ] = c [ i ] [ j ] - c [ i ] [ j - 1 ] def map_all ( es ) : return all ( [ e == es [ 0 ] for e in es [ 1 : ] ] ) if es else False eq_v = all ( [ map_all ( d ) for d in diff_v ] ) eq_h = all ( [ map_all ( d ) for d in diff_h ] ) if eq_v and eq_h : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = True perm = ( ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) ) for p in perm : x0 = c [ p [ 0 ] ] [ 0 ] - c [ p [ 1 ] ] [ 0 ] x1 = c [ p [ 0 ] ] [ 1 ] - c [ p [ 1 ] ] [ 1 ] x2 = c [ p [ 0 ] ] [ 2 ] - c [ p [ 1 ] ] [ 2 ] if not ( x0 == x1 and x1 == x2 ) : result = False break y0 = c [ 0 ] [ p [ 0 ] ] - c [ 0 ] [ p [ 1 ] ] y1 = c [ 1 ] [ p [ 0 ] ] - c [ 1 ] [ p [ 1 ] ] y2 = c [ 2 ] [ p [ 0 ] ] - c [ 2 ] [ p [ 1 ] ] if not ( y0 == y1 and y1 == y2 ) : result = False break if result : print ( ' Yes ' ) else : print ( ' No ' )
import itertools c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = True for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ 0 ] [ a ] - c [ 0 ] [ b ] for j in range ( 1 , 3 ) : if x != c [ j ] [ a ] - c [ j ] [ b ] : ans = False for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ a ] [ 0 ] - c [ b ] [ 0 ] for j in range ( 1 , 3 ) : if x != c [ a ] [ j ] - c [ b ] [ j ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if b - a == e - d == h - g and c - b == f - e == i - h and \ d - a == e - b == f - c and g - d == h - e == i - f : print ( " Yes " ) else : print ( " No " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) and ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) and ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) and ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in [ 0 , 1 , 2 ] ] if ( ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) and ( c [ 0 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) ) == True : print ( ' Yes ' ) else : print ( ' No ' )
def m ( a , b ) : n = 3 L = [ 0 ] * 3 for i in range ( n ) : L [ i ] = a [ i ] - b [ i ] return L def f ( L ) : return len ( set ( L ) ) == 1 C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) F = True for i , j in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : F &= f ( m ( C [ i ] , C [ j ] ) ) if F : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] \ and c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] \ and c [ 0 ] [ 1 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] \ and c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 0 , 101 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2 = C [ 1 ] [ 0 ] - b1 if a2 < 0 or C [ 1 ] [ 1 ] - b2 != C [ 1 ] [ 2 ] - b3 or C [ 1 ] [ 1 ] - b2 != a2 : continue a3 = C [ 2 ] [ 0 ] - b1 if a3 < 0 or a3 != C [ 2 ] [ 1 ] - b2 or a3 != C [ 2 ] [ 2 ] - b3 : continue print ( " Yes " ) exit ( ) print ( " No " )
from sys import exit , stdin C = [ list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 , a2 , a3 , b1 , b2 , b3 = 0 , 0 , 0 , 0 , 0 , 0 for i in range ( 0 , 101 ) : a1 = i b1 , b2 , b3 = C [ 0 ] [ 0 ] - a1 , C [ 0 ] [ 1 ] - a1 , C [ 0 ] [ 2 ] - a1 for j in range ( 0 , 101 ) : a2 = j j_flag = a2 + b1 == C [ 1 ] [ 0 ] and a2 + b2 == C [ 1 ] [ 1 ] and a2 + b3 == C [ 1 ] [ 2 ] for k in range ( 0 , 101 ) : a3 = k k_flag = a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] and a3 + b3 == C [ 2 ] [ 2 ] if j_flag == True and k_flag == True : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a2_a1 = c2 [ 0 ] - c1 [ 0 ] a3_a2 = c3 [ 0 ] - c2 [ 0 ] a1_a3 = c1 [ 0 ] - c3 [ 0 ] b2_b1 = c1 [ 1 ] - c1 [ 0 ] b3_b2 = c1 [ 2 ] - c1 [ 1 ] b1_b3 = c1 [ 0 ] - c1 [ 2 ] if a2_a1 != c2 [ 1 ] - c1 [ 1 ] or a2_a1 != c2 [ 2 ] - c1 [ 2 ] : print ( " No " ) elif a3_a2 != c3 [ 1 ] - c2 [ 1 ] or a3_a2 != c3 [ 2 ] - c2 [ 2 ] : print ( " No " ) elif a1_a3 != c1 [ 1 ] - c3 [ 1 ] or a1_a3 != c1 [ 2 ] - c3 [ 2 ] : print ( " No " ) elif b2_b1 != c2 [ 1 ] - c2 [ 0 ] or b2_b1 != c3 [ 1 ] - c3 [ 0 ] : print ( " No " ) elif b3_b2 != c2 [ 2 ] - c2 [ 1 ] or b3_b2 != c3 [ 2 ] - c3 [ 1 ] : print ( " No " ) elif b1_b3 != c2 [ 0 ] - c2 [ 2 ] or b1_b3 != c3 [ 0 ] - c3 [ 2 ] : print ( " No " ) else : print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' print ( ans )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] f = 1 for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : f = 0 if f == 1 : print ( " Yes " ) else : print ( " No " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 - c2 == c4 - c5 == c7 - c8 and c3 - c2 == c6 - c5 == c9 - c8 : print ( " Yes " ) else : print ( " No " )
An = [ [ 0 for j in range ( 3 ) ] for i in range ( 3 ) ] Bn = [ [ 0 for j in range ( 3 ) ] for i in range ( 3 ) ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) : An [ i ] [ j ] = a [ j ] Bn [ j ] [ i ] = a [ j ] def check ( cn ) : for i in range ( 2 ) : dif0 = cn [ i ] [ 0 ] - cn [ i + 1 ] [ 0 ] dif1 = cn [ i ] [ 1 ] - cn [ i + 1 ] [ 1 ] dif2 = cn [ i ] [ 2 ] - cn [ i + 1 ] [ 2 ] if dif0 != dif1 or dif1 != dif2 : return False return True if check ( An ) and check ( Bn ) : print ( " Yes " ) else : print ( " No " )
import sys import timeit def input ( ) : return sys . stdin . readline ( ) . strip ( ) def I ( ) : return int ( input ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def IR ( n ) : return [ I ( ) for i in range ( n ) ] def LIR ( n ) : return [ LI ( ) for i in range ( n ) ] def SR ( n ) : return [ S ( ) for i in range ( n ) ] def S ( ) : return input ( ) def LS ( ) : return input ( ) . split ( ) def main ( ) : c = LIR ( 3 ) a = [ 0 ] * 3 b = [ 0 ] * 3 ans = ' No ' for i in range ( 101 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] for j in range ( 101 ) : a [ 1 ] = j b [ 1 ] = c [ 1 ] [ 1 ] - a [ 1 ] for k in range ( 101 ) : a [ 2 ] = k b [ 2 ] = c [ 2 ] [ 2 ] - a [ 2 ] current = [ [ a [ i ] + b [ j ] for j in range ( 3 ) ] for i in range ( 3 ) ] if c == current : ans = ' Yes ' break print ( ans ) main ( )
c1 = [ int ( i ) for i in input ( ) . split ( ) ] c2 = [ int ( i ) for i in input ( ) . split ( ) ] c3 = [ int ( i ) for i in input ( ) . split ( ) ] flag = 0 for i in range ( 0 , c1 [ 0 ] + 1 ) : a1 = c1 [ 0 ] - i a2 = c2 [ 0 ] - i a3 = c3 [ 0 ] - i b2 = c1 [ 1 ] - a1 if b2 + a2 == c2 [ 1 ] and b2 + a3 == c3 [ 1 ] : b3 = c1 [ 2 ] - a1 if b3 + a2 == c2 [ 2 ] and b3 + a3 == c3 [ 2 ] : print ( ' Yes ' ) flag = 1 break if flag == 0 : print ( ' No ' )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] C = [ 0 , 0 , 0 ] for j in range ( 3 ) : for i in range ( 3 ) : C [ j ] += A [ i ] [ j ] R = [ 0 , 0 , 0 ] for i in range ( 3 ) : for j in range ( 3 ) : R [ i ] += A [ i ] [ j ] if ( C [ 0 ] - C [ 1 ] ) % 3 == 0 and ( C [ 1 ] - C [ 2 ] ) % 3 == 0 and ( R [ 0 ] - R [ 1 ] ) % 3 == 0 and ( R [ 1 ] - R [ 2 ] ) % 3 == 0 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] adif1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] adif2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] bdif1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] bdif2 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] for row in range ( 1 , 3 ) : if c [ row ] [ 1 ] - c [ row ] [ 0 ] != adif1 or c [ row ] [ 2 ] - c [ row ] [ 1 ] != adif2 : print ( ' No ' ) exit ( ) if c [ 1 ] [ row ] - c [ 0 ] [ row ] != bdif1 or c [ 2 ] [ row ] - c [ 1 ] [ row ] != bdif2 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
cc = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] tc = [ x for c in cc for x in c ] if sum ( tc ) % 3 != 0 : print ( ' No ' ) else : cnt = 0 for i in range ( 3 ) : cnt += cc [ i ] [ i ] if cnt == sum ( tc ) // 3 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] res = ' No ' for i in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : res = ' Yes ' break print ( res ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] \ and C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) cnt = [ ] ans = 0 for k in range ( 2 ) : cnt = c [ k ] for i in range ( k + 1 , 3 ) : for j in range ( - 100 , 101 , 1 ) : if k == i : break else : d = c [ i ] d = [ a + j for a in c [ i ] ] if d == c [ k ] : ans + = 1 break if ans == 3 : for k in range ( 2 ) : c1 = c [ 0 ] [ k ] c2 = c [ 1 ] [ k ] c3 = c [ 2 ] [ k ] for i in range ( k + 1 , 3 ) : d1 = c [ 0 ] [ i ] d2 = c [ 1 ] [ i ] d3 = c [ 2 ] [ i ] for j in range ( - 100 , 101 , 1 ) : if k == i : break else : d1 + = j d2 += j d3 += j if d1 == c1 and d2 == c2 and d3 == c3 : ans + = 1 break else : d1 = c [ 0 ] [ i ] d2 = c [ 1 ] [ i ] d3 = c [ 2 ] [ i ] if ans == 6 : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
import sys , os f = lambda : list ( map ( int , input ( ) . split ( ) ) ) if ' local ' in os . environ : sys . stdin = open ( ' ./input.txt ' , ' r ' ) def solve ( ) : g = [ f ( ) for i in range ( 3 ) ] for i in range ( 2 ) : if g [ i ] [ 0 ] - g [ i + 1 ] [ 0 ] != g [ i ] [ 1 ] - g [ i + 1 ] [ 1 ] or g [ i ] [ 1 ] - g [ i + 1 ] [ 1 ] != g [ i ] [ 2 ] - g [ i + 1 ] [ 2 ] : print ( ' No ' ) return for i in range ( 2 ) : if g [ 0 ] [ i ] - g [ 0 ] [ i + 1 ] != g [ 1 ] [ i ] - g [ 1 ] [ i + 1 ] or g [ 2 ] [ i ] - g [ 2 ] [ i + 1 ] != g [ 1 ] [ i ] - g [ 1 ] [ i + 1 ] : print ( ' No ' ) return print ( ' Yes ' ) solve ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] and c3 [ 0 ] - c1 [ 0 ] == c3 [ 1 ] - c1 [ 1 ] and c3 [ 1 ] - c1 [ 1 ] == c3 [ 2 ] - c1 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
def main ( ) : c_lst = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] c2 = c_lst [ 1 ] [ 0 ] + c_lst [ 2 ] [ 1 ] + c_lst [ 0 ] [ 2 ] c3 = c_lst [ 2 ] [ 0 ] + c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 2 ] if c1 == c2 and c2 == c3 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
import os import sys def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a_12 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] a_13 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] a_23 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] b_12 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] b_13 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] b_23 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if b_12 != c [ i ] [ 0 ] - c [ i ] [ 1 ] or b_13 != c [ i ] [ 0 ] - c [ i ] [ 2 ] or b_23 != c [ i ] [ 1 ] - c [ i ] [ 2 ] : print ( " No " ) return if a_12 != c [ 0 ] [ i ] - c [ 1 ] [ i ] or a_13 != c [ 0 ] [ i ] - c [ 2 ] [ i ] or a_23 != c [ 1 ] [ i ] - c [ 2 ] [ i ] : print ( " No " ) return print ( " Yes " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == c [ i - 1 ] [ j ] + c [ i ] [ j - 1 ] - c [ i - 1 ] [ j - 1 ] : continue ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 - c4 == c2 - c5 == c3 - c6 and \ c1 - c7 == c2 - c8 == c3 - c9 and \ c4 - c7 == c5 - c8 == c6 - c9 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) a1 , a2 , a3 = [ 0 , c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] , c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ] b1 , b2 , b3 = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] if ans == c : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] judge = True for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ j ] [ i ] - c [ j + 1 ] [ i ] ) != ( c [ j ] [ i + 1 ] - c [ j + 1 ] [ i + 1 ] ) : judge = False for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] - c [ i ] [ j + 1 ] ) != ( c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] ) : judge = False if judge : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] + c [ j ] [ i ] == c [ i ] [ i ] + c [ j ] [ j ] : count += 1 if count == 9 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) diff = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] if c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == diff and c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == diff : diff = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] if c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == diff and c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == diff : diff = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] if c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == diff and c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] == diff : print ( " Yes " ) else : print ( " No " ) else : print ( " No " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for j in range ( 100 ) : b1 = [ ] a1 = [ ] a = j for i in range ( 3 ) : b1 . append ( c [ 0 ] [ i ] - a ) a1 . append ( c [ i ] [ 0 ] - b1 [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a1 [ i ] + b1 [ j ] != c [ i ] [ j ] : count = 1 if count == 1 : print ( ' No ' ) else : print ( ' Yes ' )
c = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( - 500 , 500 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] and c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] and c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] and ( c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) : print ( " Yes " ) break if c [ 1 ] [ 1 ] != a [ 1 ] + b [ 1 ] or c [ 1 ] [ 2 ] != a [ 1 ] + b [ 2 ] or c [ 2 ] [ 1 ] != a [ 2 ] + b [ 1 ] or ( c [ 2 ] [ 2 ] != a [ 2 ] + b [ 2 ] ) : if i == 499 : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] : flag = False if C [ i ] [ j ] - C [ i ] [ j - 1 ] != C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] : flag = False print ( ' Yes ' if flag else ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if abs ( a [ 0 ] - a [ 1 ] ) == abs ( b [ 0 ] - b [ 1 ] ) == abs ( c [ 0 ] - c [ 1 ] ) and abs ( a [ 1 ] - a [ 2 ] ) == abs ( b [ 1 ] - b [ 2 ] ) == abs ( c [ 1 ] - c [ 2 ] ) and abs ( a [ 0 ] - b [ 0 ] ) == abs ( a [ 1 ] - b [ 1 ] ) == abs ( a [ 2 ] - b [ 2 ] ) and abs ( b [ 0 ] - c [ 0 ] ) == abs ( b [ 1 ] - c [ 1 ] ) == abs ( b [ 2 ] - c [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ ] ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) arr = [ 0 ] * 3 sum = 0 for i in range ( 3 ) : arr [ 0 ] += c [ i ] [ i ] for i in range ( 3 ) : if i + 1 < 3 : arr [ 1 ] + = c [ i ] [ i + 1 ] else : arr [ 1 ] + = c [ i ] [ 0 ] for i in range ( 3 ) : if i + 2 < 3 : arr [ 2 ] + = c [ i ] [ i + 2 ] else : arr [ 2 ] + = c [ i ] [ i - 1 ] if arr [ 0 ] != arr [ 1 ] or arr [ 0 ] != arr [ 2 ] : print ( " No " ) exit ( 0 ) print ( " Yes " ) exit ( 0 )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1_max = max ( s [ 0 ] ) for i in range ( 0 , a1_max + 1 ) : a1 = i b1 = s [ 0 ] [ 0 ] - a1 b2 = s [ 0 ] [ 1 ] - a1 b3 = s [ 0 ] [ 2 ] - a1 a2 = s [ 1 ] [ 0 ] - b1 a3 = s [ 2 ] [ 0 ] - b1 if b1 >= 0 and b2 >= 0 and b3 >= 0 and a2 >= 0 and a3 >= 0 : if s [ 1 ] [ 1 ] == a2 + b2 and s [ 1 ] [ 2 ] == a2 + b3 and s [ 2 ] [ 1 ] == a3 + b2 and s [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
import sys a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] : if a [ 1 ] - a [ 2 ] == b [ 1 ] - b [ 2 ] == c [ 1 ] - c [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
import itertools import math import string import collections from collections import Counter from collections import deque from operator import itemgetter import sys sys . setrecursionlimit ( 2 * 10 ** 5 ) INF = 2 ** 60 def readints ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def nCr ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def has_duplicates2 ( seq ) : seen = [ ] for item in seq : if not ( item in seen ) : seen . append ( item ) return len ( seq ) != len ( seen ) def divisor ( n ) : divisor = [ ] for i in range ( 1 , n + 1 ) : if n % i == 0 : divisor . append ( i ) return divisor dx = [ - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 ] dy = [ - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 ] c = [ None ] * 3 for i in range ( 3 ) : c [ i ] = [ None ] * 3 for i in range ( 3 ) : c [ i ] = readints ( ) def func ( a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : continue return False break return True a = [ None ] * 3 b = [ None ] * 3 for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : for l in range ( 3 ) : a [ 0 ] = i a [ 1 ] = j a [ 2 ] = k b [ 0 ] = c [ l ] [ 0 ] - a [ l ] b [ 1 ] = c [ l ] [ 1 ] - a [ l ] b [ 2 ] = c [ l ] [ 2 ] - a [ l ] if func ( a , b ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 101 ) : info = True a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if min ( a1 , a2 , a3 , b1 , b2 , b3 ) < 0 : info = False if c [ 1 ] [ 1 ] != a2 + b2 : info = False if c [ 2 ] [ 1 ] != a3 + b2 : info = False if c [ 1 ] [ 2 ] != a2 + b3 : info = False if c [ 2 ] [ 2 ] != a3 + b3 : info = False if info : print ( " Yes " ) break else : print ( " No " )
lst = [ ] for _ in range ( 3 ) : lst += [ list ( map ( int , input ( ) . split ( ) ) ) ] total = 0 for i in range ( 3 ) : for j in range ( 3 ) : total += lst [ i ] [ j ] total = total // 3 flag = True for i in range ( 3 ) : a = lst [ 0 ] [ i % 3 ] + lst [ 1 ] [ ( i + 1 ) % 3 ] + lst [ 2 ] [ ( i + 2 ) % 3 ] if a != total : flag = False a = lst [ 0 ] [ 0 ] + lst [ 1 ] [ 2 ] + lst [ 2 ] [ 1 ] if a != total : flag = False a = lst [ 1 ] [ 1 ] + lst [ 0 ] [ 2 ] + lst [ 2 ] [ 0 ] if a != total : flag = False a = lst [ 2 ] [ 2 ] + lst [ 1 ] [ 0 ] + lst [ 0 ] [ 1 ] if a != total : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
list1 = [ int ( s ) for s in input ( ) . split ( ) ] list2 = [ int ( s ) for s in input ( ) . split ( ) ] list3 = [ int ( s ) for s in input ( ) . split ( ) ] flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( list1 [ 0 ] - a1 ) == ( list2 [ 0 ] - a2 ) == ( list3 [ 0 ] - a3 ) : if ( list1 [ 1 ] - a1 ) == ( list2 [ 1 ] - a2 ) == ( list3 [ 1 ] - a3 ) : if ( list1 [ 2 ] - a1 ) == ( list2 [ 2 ] - a2 ) == ( list3 [ 2 ] - a3 ) : print ( ' Yes ' ) flag = 1 if flag == 1 : break if flag == 0 : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : good = False break else : continue break print ( ' Yes ' if good else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b = C [ 0 ] a = [ C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if ( c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] ) and \ ( c2 [ 2 ] - c2 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] ) and \ ( c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] ) and \ ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys def slove ( ) : input = sys . stdin . readline mod = 10 ** 9 + 7 a = [ list ( map ( int , input ( ) . rstrip ( ' \n ' ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : t = min ( a [ i ] ) if t != 0 : for j in range ( 3 ) : a [ i ] [ j ] - = t t = min ( [ a [ j ] [ i ] for j in range ( 3 ) ] ) if t != 0 : for j in range ( 3 ) : a [ j ] [ i ] - = t print ( " Yes " if max ( [ a [ i ] [ j ] for i in range ( 3 ) for j in range ( 3 ) ] ) == 0 else " No " ) if __name__ == ' __main__ ' : slove ( )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c7 - c4 == c8 - c5 == c9 - c6 and c4 - c1 == c5 - c2 == c6 - c3 and c3 - c2 == c6 - c5 == c9 - c8 and c2 - c1 == c5 - c4 == c8 - c7 : print ( " Yes " ) else : print ( " No " )
from statistics import mean , median , variance , stdev import numpy as np import sys import math import fractions import itertools import copy import collections from operator import itemgetter def j ( q ) : if q == 1 : print ( " Yes " ) else : print ( " No " ) exit ( 0 ) def ct ( x , y ) : if ( x > y ) : print ( " + " ) elif ( x < y ) : print ( " - " ) else : print ( " ? " ) def ip ( ) : return int ( input ( ) ) def printrow ( a ) : for i in range ( len ( a ) ) : print ( a [ i ] ) def combinations ( n , r ) : if n < r : return 0 return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def permutations ( n , r ) : if n < r : return 0 return math . factorial ( n ) // math . factorial ( n - r ) a = [ [ int ( i ) for i in input ( ) . split ( ) ] for k in range ( 3 ) ] for i in range ( 3 ) : m = min ( a [ i ] ) for k in range ( 3 ) : a [ i ] [ k ] -= m for i in range ( 3 ) : if not ( a [ 0 ] [ i ] == a [ 1 ] [ i ] and a [ 1 ] [ i ] == a [ 2 ] [ i ] ) : j ( 0 ) j ( 1 )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cmax = 0 for i in c : for j in i : cmax = max ( cmax , j ) ck = 0 for i in range ( - cmax , cmax + 1 ) : a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] - b [ 1 ] != a [ 1 ] or c [ 1 ] [ 2 ] - b [ 2 ] != a [ 1 ] : continue a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if a [ 2 ] != c [ 2 ] [ 1 ] - b [ 1 ] or a [ 2 ] != c [ 2 ] [ 2 ] - b [ 2 ] : continue ck = 1 break if ck : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for x in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c1 [ 1 ] != c2 [ 0 ] - c2 [ 1 ] or c1 [ 0 ] - c1 [ 1 ] != c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c1 [ 2 ] != c2 [ 0 ] - c2 [ 2 ] or c1 [ 0 ] - c1 [ 2 ] != c3 [ 0 ] - c3 [ 2 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c2 [ 0 ] != c1 [ 1 ] - c2 [ 1 ] or c1 [ 0 ] - c2 [ 0 ] != c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c3 [ 0 ] != c1 [ 1 ] - c3 [ 1 ] or c1 [ 0 ] - c3 [ 0 ] != c1 [ 2 ] - c3 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if l [ i ] [ j ] == a [ i ] + b [ j ] : cnt += 1 if cnt == 9 : print ( " Yes " ) exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for j in range ( 3 ) : B [ j ] = C [ 0 ] [ j ] - A [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for k in range ( 3 ) : for l in range ( 3 ) : if C [ k ] [ l ] != A [ k ] + B [ l ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != c [ i + 1 ] [ j ] - c [ i + 1 ] [ j - 1 ] : print ( ' No ' ) quit ( ) for i in range ( 1 , 3 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i - 1 ] [ j + 1 ] : print ( ' No ' ) quit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c21 == c12 - c22 == c13 - c23 and c11 - c31 == c12 - c32 == c13 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = " Yes " if not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : ans = " No " elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : ans = " No " elif not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : ans = " No " elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : ans = " No " print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys input = sys . stdin . readline L = [ None ] * 3 for i in range ( 3 ) : L [ i ] = [ int ( v ) for v in input ( ) . split ( ) ] rl = [ L [ 0 ] [ 0 ] - L [ 0 ] [ 1 ] , L [ 0 ] [ 1 ] - L [ 0 ] [ 2 ] ] hl = [ L [ 0 ] [ 0 ] - L [ 1 ] [ 0 ] , L [ 1 ] [ 0 ] - L [ 2 ] [ 0 ] ] for v in L : if [ v [ 0 ] - v [ 1 ] , v [ 1 ] - v [ 2 ] ] != rl : print ( " No " ) sys . exit ( ) for i in range ( 3 ) : if [ L [ 0 ] [ i ] - L [ 1 ] [ i ] , L [ 1 ] [ i ] - L [ 2 ] [ i ] ] != hl : print ( " No " ) sys . exit ( ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ ] B = [ ] for i in range ( 3 ) : A . append ( [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] ) for i in range ( 3 ) : B . append ( [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] ) ans = ' Yes ' if A [ 0 ] != A [ 1 ] : ans = ' No ' elif A [ 1 ] != A [ 2 ] : ans = ' No ' elif B [ 0 ] != B [ 1 ] : ans = ' No ' elif B [ 1 ] != B [ 2 ] : ans = ' No ' print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] and c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] dx2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] dy1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] dy2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] Ans = " Yes " for i in range ( 3 ) : if ( C [ i ] [ 1 ] - C [ i ] [ 0 ] != dx1 or C [ i ] [ 2 ] - C [ i ] [ 1 ] != dx2 or C [ 1 ] [ i ] - C [ 0 ] [ i ] != dy1 or C [ 2 ] [ i ] - C [ 1 ] [ i ] != dy2 ) : Ans = " No " break print ( Ans )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : pass else : print ( ' No ' ) exit ( 0 ) for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : pass else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
import collections import math import numpy as np is_true = True field = [ ] for i in range ( 3 ) : field . append ( list ( map ( int , input ( ) . split ( ) ) ) ) field = np . array ( field ) for i in range ( 3 ) : field [ i ] -= min ( field [ i ] ) is_true = np . where ( field == field [ 0 ] , True , False ) . all ( ) field = np . array ( field ) . T for i in range ( 3 ) : field [ i ] -= min ( field [ i ] ) is_true2 = np . where ( field == field [ 0 ] , True , False ) . all ( ) print ( ' Yes ' if is_true * is_true2 else ' No ' )
box = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = 1 for j in range ( 3 ) : checker = [ ] for i in range ( 3 ) : if j == 2 : a11 = box [ j ] [ i ] - box [ 0 ] [ i ] else : a11 = box [ j ] [ i ] - box [ j + 1 ] [ i ] checker . append ( a11 ) if checker . count ( checker [ 0 ] ) == 3 : continue else : flag = 0 break for j in range ( 3 ) : checker = [ ] for i in range ( 3 ) : if j == 2 : a11 = box [ i ] [ j ] - box [ i ] [ 0 ] else : a11 = box [ i ] [ j ] - box [ i ] [ j + 1 ] checker . append ( a11 ) if checker . count ( checker [ 0 ] ) == 3 : continue else : flag = 0 break if flag : print ( " Yes " ) else : print ( " No " )
import sys IS = lambda : sys . stdin . readline ( ) . rstrip ( ) II = lambda : int ( IS ( ) ) MII = lambda : list ( map ( int , IS ( ) . split ( ) ) ) MIIZ = lambda : list ( map ( lambda x : x - 1 , MII ( ) ) ) def main ( ) : cc = [ MII ( ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if cc [ i ] [ 0 ] - cc [ i + 1 ] [ 0 ] != cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] : flag = False if cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] != cc [ i ] [ 2 ] - cc [ i + 1 ] [ 2 ] : flag = False if cc [ 0 ] [ i ] - cc [ 0 ] [ i + 1 ] != cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] : flag = False if cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] != cc [ 2 ] [ i ] - cc [ 2 ] [ i + 1 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) for a in range ( 0 , 101 ) : for b in range ( 0 , 101 ) : for c in range ( 0 , 101 ) : a1 = a a2 = b a3 = c b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if a1 + b1 == c1 [ 0 ] and a1 + b2 == c1 [ 1 ] and a1 + b3 == c1 [ 2 ] \ and a2 + b1 == c2 [ 0 ] and a2 + b2 == c2 [ 1 ] and a2 + b3 == c2 [ 2 ] \ and a3 + b1 == c3 [ 0 ] and a3 + b2 == c3 [ 1 ] and a3 + b3 == c3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c1_m = c1 [ 0 ] c2_m = c2 [ 1 ] c3_m = c3 [ 2 ] for a_1 in range ( c1_m + 1 ) : b_1 = c1_m - a_1 for a_2 in range ( c2_m + 1 ) : b_2 = c2_m - a_2 for a_3 in range ( c3_m + 1 ) : b_3 = c3_m - a_3 flg = 0 if c1 [ 0 ] != ( a_1 + b_1 ) : flg + = 1 if c1 [ 1 ] != ( a_1 + b_2 ) : flg + = 1 if c1 [ 2 ] != ( a_1 + b_3 ) : flg + = 1 if c2 [ 0 ] != ( a_2 + b_1 ) : flg + = 1 if c2 [ 1 ] != ( a_2 + b_2 ) : flg + = 1 if c2 [ 2 ] != ( a_2 + b_3 ) : flg + = 1 if c3 [ 0 ] != ( a_3 + b_1 ) : flg + = 1 if c3 [ 1 ] != ( a_3 + b_2 ) : flg + = 1 if c3 [ 2 ] != ( a_3 + b_3 ) : flg + = 1 if flg == 0 : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] row = [ ] p1 = p2 = p3 = 0 for i in c : row . append ( sum ( i ) ) p1 += i [ 0 ] p2 += i [ 1 ] p3 += i [ 2 ] col = [ p1 , p2 , p3 ] con1 , con2 , con3 = row [ 0 ] - row [ 1 ] , row [ 0 ] - row [ 2 ] , row [ 1 ] - row [ 2 ] con4 , con5 , con6 = col [ 0 ] - col [ 1 ] , col [ 0 ] - col [ 2 ] , col [ 1 ] - col [ 2 ] con = [ con1 , con2 , con3 , con4 , con5 , con6 ] for j in con : if j % 3 != 0 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ 0 for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
vals = [ ] for line in range ( 3 ) : s = input ( ) . split ( ) val = [ ] for v in s : val . append ( int ( v ) ) vals . append ( val ) info = True a = [ 0 , ] b = vals [ 0 ] a . append ( vals [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( vals [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if vals [ i ] [ j ] != a [ i ] + b [ j ] : info = False print ( ' Yes ' if info else ' No ' )
import numpy as np import sys def validation ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) return sys . exit ( ) print ( ' Yes ' ) return sys . exit ( ) c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] ) for i in range ( np . max ( c ) + 1 ) : a = [ ] b = [ ] a . append ( i ) b . append ( c [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) validation ( c , a , b )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] C = np . array ( c ) check = np . zeros ( ( 3 , 3 ) ) for i in range ( min ( c [ 0 ] ) + 1 ) : check [ 0 ] = C [ 0 ] - i for j in range ( min ( c [ 1 ] ) + 1 ) : check [ 1 ] = C [ 1 ] - j for k in range ( min ( c [ 2 ] ) + 1 ) : check [ 2 ] = C [ 2 ] - k if list ( check [ 0 ] ) == list ( check [ 1 ] ) and list ( check [ 0 ] ) == list ( check [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * 3 ] x1 , x2 , y1 , y2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] , c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != x1 or c [ i ] [ 1 ] - c [ i ] [ 2 ] != x2 : print ( ' No ' ) exit ( ) if c [ 0 ] [ i ] - c [ 1 ] [ i ] != y1 or c [ 1 ] [ i ] - c [ 2 ] [ i ] != y2 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] m = 0 for i in range ( 3 ) : m += sum ( x [ i ] ) if m % 3 == 0 and ( x [ 0 ] [ 0 ] + x [ 1 ] [ 1 ] + x [ 2 ] [ 2 ] ) * 3 == m : print ( ' Yes ' ) else : print ( ' No ' )
from numpy import * x = array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) for i in range ( 3 ) : if sum ( x [ i ] - x [ i - 1 ] ) % 3 or sum ( x [ : , i ] - x [ : , i - 1 ] ) % 3 : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) def is_check ( a , b , c ) : for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != ( a [ j ] + b [ k ] ) : return False return True for i in range ( c [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if not ( b1 >= 0 and b1 <= 100 and b2 >= 0 and b2 <= 100 and b3 >= 0 and b3 <= 100 and a2 >= 0 and a2 <= 100 and a3 >= 0 and a3 <= 100 ) : continue a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] is_ok = is_check ( a , b , c ) if is_ok : print ( ' Yes ' ) break else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = ' No ' if c11 - c21 == c12 - c22 & c12 - c22 == c13 - c23 : if c21 - c31 == c22 - c32 & c22 - c32 == c23 - c33 : if c11 - c12 == c21 - c22 & c21 - c22 == c31 - c32 : if c12 - c13 == c22 - c23 & c22 - c23 == c32 - c33 : ans = ' Yes ' print ( ans )
c = [ ] ans = " No " for i in range ( 3 ) : nc = list ( map ( int , input ( ) . split ( ) ) ) c . append ( nc ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] and c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = " Yes " print ( ans )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if c + e + g == b + d + i and a + f + h == b + d + i : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] q1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] q2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] q3 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] q4 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] print ( " Yes " if q1 and q2 and q3 and q4 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : flag = True a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for j in range ( 1 , 3 ) : for k in range ( 1 , 3 ) : if a [ j ] + b [ k ] != c [ j ] [ k ] : flag = False break else : continue break if flag : break if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : L = [ ] for i in range ( 3 ) : L . append ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) if len ( set ( L ) ) > 1 : print ( NO ) return R = [ ] for i in range ( 3 ) : R . append ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) if len ( set ( R ) ) > 1 : print ( NO ) return print ( YES ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True a1 = 0 b1 = C [ 0 ] [ 0 ] b2 = C [ 0 ] [ 1 ] b3 = C [ 0 ] [ 2 ] if not ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 and C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) : flg = False if not ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 and C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : flg = False if flg : print ( ' Yes ' ) else : print ( ' No ' )
mycode = r import sys import os if sys . argv [ - 1 ] == ' ONLINE_JUDGE ' : with open ( ' mycode.pyx ' , ' w ' ) as f : f . write ( mycode ) os . system ( ' cythonize -i -3 -b mycode.pyx ' ) import mycode
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg_1 = True if memo [ 0 ] == memo [ 1 ] == memo [ 2 ] else False memo = [ ] for i in range ( 3 ) : i , j , k = arr [ 0 ] [ i ] , arr [ 1 ] [ i ] , arr [ 2 ] [ i ] memo += [ ( i - j , j - k ) ] flg_2 = True if memo [ 0 ] == memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg_1 and flg_2 else " No " ) if __name__ == " __main__ " : main ( )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i1 in range ( 0 , grid [ 0 ] [ 0 ] + 1 ) : a [ 0 ] = i1 b [ 0 ] = grid [ 0 ] [ 0 ] - i1 for j2 in range ( 0 , grid [ 1 ] [ 1 ] + 1 ) : a [ 1 ] = j2 b [ 1 ] = grid [ 1 ] [ 1 ] - j2 for k3 in range ( 0 , grid [ 2 ] [ 2 ] + 1 ) : a [ 2 ] = k3 b [ 2 ] = grid [ 2 ] [ 2 ] - k3 if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) == ( c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ) and ( c [ 0 ] [ 2 ] + c [ 2 ] [ 1 ] + c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] ; x2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] ; y1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] ; y2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] ; C2 = [ [ C [ 0 ] [ 0 ] , C [ 0 ] [ 0 ] + x1 , C [ 0 ] [ 0 ] + x1 + x2 ] , [ C [ 0 ] [ 0 ] + y1 , C [ 0 ] [ 0 ] + x1 + y1 , C [ 0 ] [ 0 ] + x1 + x2 + y1 ] , [ C [ 0 ] [ 0 ] + y1 + y2 , C [ 0 ] [ 0 ] + x1 + y1 + y2 , C [ 0 ] [ 0 ] + x1 + x2 + y1 + y2 ] ] print ( " Yes " if C == C2 else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c = np . array ( [ [ int ( item ) for item in input ( ) . split ( ) ] for _ in range ( 3 ) ] ) for i in range ( 3 ) : while not 0 in c [ : , i ] : c [ : , i ] -= 1 for i in range ( 3 ) : while not 0 in c [ i , : ] : c [ i , : ] -= 1 if np . all ( c == 0 ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for k in range ( 3 ) ] A = [ sum ( a ) for a in c ] B = [ 0 , 0 , 0 ] AB = 0 for y in range ( 3 ) : for x in range ( 3 ) : if x == y : AB += c [ y ] [ x ] B [ x ] += c [ y ] [ x ] for k in range ( 3 ) : t = ( A [ k ] + B [ k ] - AB ) if t >= 0 and t % 3 == 0 : pass else : print ( " No " ) exit ( 0 ) print ( " Yes " )
o = 0 t1 = list ( map ( int , input ( ) . split ( ) ) ) t2 = list ( map ( int , input ( ) . split ( ) ) ) t3 = list ( map ( int , input ( ) . split ( ) ) ) o = sum ( t1 ) + sum ( t2 ) + sum ( t3 ) if o % 3 > 0 : print ( ' No ' ) elif ( t1 [ 0 ] - t1 [ 1 ] == t2 [ 0 ] - t2 [ 1 ] == t3 [ 0 ] - t3 [ 1 ] and t1 [ 2 ] - t1 [ 1 ] == t2 [ 2 ] - t2 [ 1 ] == t3 [ 2 ] - t3 [ 1 ] and t1 [ 0 ] - t2 [ 0 ] == t1 [ 1 ] - t2 [ 1 ] == t1 [ 2 ] - t2 [ 2 ] and t1 [ 0 ] - t3 [ 0 ] == t1 [ 1 ] - t3 [ 1 ] == t1 [ 2 ] - t3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
ar = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] if ar [ 0 ] [ 0 ] + ar [ 1 ] [ 1 ] + ar [ 2 ] [ 2 ] == ar [ 0 ] [ 1 ] + ar [ 1 ] [ 2 ] + ar [ 2 ] [ 0 ] == ar [ 0 ] [ 2 ] + ar [ 1 ] [ 0 ] + ar [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i + 1 ] [ j ] - c [ i ] [ j + 1 ] + c [ i + 1 ] [ j + 1 ] != 0 : ans = " No " print ( ans )
def resolve ( ) : g = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = max ( map ( max , g ) ) for a in range ( m + 1 ) : for b in range ( m + 1 ) : for c in range ( m + 1 ) : y = [ a , b , c ] x = [ g [ i ] [ i ] - y [ i ] for i in range ( 3 ) ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : v = y [ i ] + x [ j ] if g [ i ] [ j ] != v : ans = False if ans : print ( ' Yes ' ) return print ( ' No ' ) resolve ( )
N = 3 C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] f = True for i in range ( N - 1 ) : a = C [ i ] [ 0 ] - C [ i + 1 ] [ 0 ] b = C [ i ] [ 1 ] - C [ i + 1 ] [ 1 ] c = C [ i ] [ 2 ] - C [ i + 1 ] [ 2 ] if a == b == c : continue else : f = False for j in range ( N - 1 ) : a = C [ 0 ] [ j ] - C [ 0 ] [ j + 1 ] b = C [ 1 ] [ j ] - C [ 1 ] [ j + 1 ] c = C [ 2 ] [ j ] - C [ 2 ] [ j + 1 ] if a == b == c : continue else : f = False if f : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 0 , 101 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def takahashis_information ( C : list ) -> bool : for a1 in range ( C [ 0 ] [ 0 ] + 1 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue if C [ 1 ] [ 0 ] - b1 != C [ 1 ] [ 1 ] - b2 : continue if C [ 1 ] [ 1 ] - b2 != C [ 1 ] [ 2 ] - b3 : continue if C [ 2 ] [ 0 ] - b1 != C [ 2 ] [ 1 ] - b2 : continue if C [ 2 ] [ 1 ] - b2 != C [ 2 ] [ 2 ] - b3 : continue return True return False if __name__ == " __main__ " : C = [ [ int ( s ) for s in input ( ) . split ( ) ] for _ in range ( 3 ) ] yes = takahashis_information ( C ) print ( ' Yes ' if yes else ' No ' )
S1 = list ( map ( int , input ( ) . split ( ) ) ) S2 = list ( map ( int , input ( ) . split ( ) ) ) S3 = list ( map ( int , input ( ) . split ( ) ) ) List = [ ] if S3 [ 2 ] - S3 [ 1 ] == S2 [ 2 ] - S2 [ 1 ] == S1 [ 2 ] - S1 [ 1 ] : List . append ( 1 ) if S3 [ 1 ] - S3 [ 0 ] == S2 [ 1 ] - S2 [ 0 ] == S1 [ 1 ] - S1 [ 0 ] : List . append ( 1 ) if S2 [ 0 ] - S1 [ 0 ] == S2 [ 1 ] - S1 [ 1 ] == S2 [ 2 ] - S1 [ 2 ] : List . append ( 1 ) if S2 [ 0 ] - S3 [ 0 ] == S2 [ 1 ] - S3 [ 1 ] == S2 [ 2 ] - S3 [ 2 ] : List . append ( 1 ) print ( " Yes " if sum ( List ) == 4 else " No " )
a = [ ] for i in range ( 3 ) : a += [ list ( map ( int , input ( ) . split ( ) ) ) ] for i in range ( 3 ) : x = a [ i ] [ 0 ] - a [ ( i + 1 ) % 3 ] [ 0 ] y = a [ 0 ] [ i ] - a [ 0 ] [ ( i + 1 ) % 3 ] if x != a [ i ] [ 1 ] - a [ ( i + 1 ) % 3 ] [ 1 ] or x != a [ i ] [ 2 ] - a [ ( i + 1 ) % 3 ] [ 2 ] : print ( ' No ' ) exit ( ) if y != a [ 1 ] [ i ] - a [ 1 ] [ ( i + 1 ) % 3 ] or y != a [ 2 ] [ i ] - a [ 2 ] [ ( i + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np c1 = [ int ( i ) for i in input ( ) . split ( " " ) ] c2 = [ int ( i ) for i in input ( ) . split ( " " ) ] c3 = [ int ( i ) for i in input ( ) . split ( " " ) ] c = np . array ( [ c1 , c2 , c3 ] ) a = [ [ i [ 2 ] - i [ 1 ] , i [ 1 ] - i [ 0 ] ] for i in c . T ] b = [ [ i [ 2 ] - i [ 1 ] , i [ 1 ] - i [ 0 ] ] for i in c ] if a [ 0 ] == a [ 1 ] and a [ 2 ] == a [ 1 ] and b [ 0 ] == b [ 1 ] and b [ 1 ] == b [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( C ) : D = [ [ c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] ] for c in C ] if D [ 0 ] == D [ 1 ] == D [ 2 ] : return 0 else : print ( ' No ' ) exit ( ) check ( C ) C = [ list ( c ) for c in zip ( * C ) ] check ( C ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a_1 = i b_1 = C [ 0 ] [ 0 ] - i b_2 = C [ 0 ] [ 1 ] - i b_3 = C [ 0 ] [ 2 ] - i a_2 = C [ 1 ] [ 0 ] - b_1 a_3 = C [ 2 ] [ 0 ] - b_1 if ( a_2 + b_2 ) == C [ 1 ] [ 1 ] and ( a_2 + b_3 ) == C [ 1 ] [ 2 ] and ( a_3 + b_2 ) == C [ 2 ] [ 1 ] and ( a_3 + b_3 ) == C [ 2 ] [ 2 ] : flag = True break if flag : print ( " Yes " ) else : print ( " No " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c3 - c2 == c6 - c5 and c6 - c5 == c9 - c8 and c2 - c1 == c5 - c4 and c5 - c4 == c8 - c7 and c4 - c1 == c5 - c2 and c5 - c2 == c6 - c3 and c7 - c4 == c8 - c5 and c8 - c5 == c9 - c6 : print ( " Yes " ) else : print ( " No " )
m = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 if m [ 0 ] [ 0 ] - m [ 1 ] [ 0 ] != m [ 0 ] [ 1 ] - m [ 1 ] [ 1 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 1 ] [ 0 ] != m [ 0 ] [ 2 ] - m [ 1 ] [ 2 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 2 ] [ 0 ] != m [ 0 ] [ 1 ] - m [ 2 ] [ 1 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 2 ] [ 0 ] != m [ 0 ] [ 2 ] - m [ 2 ] [ 2 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 0 ] [ 1 ] != m [ 1 ] [ 0 ] - m [ 1 ] [ 1 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 0 ] [ 1 ] != m [ 2 ] [ 0 ] - m [ 2 ] [ 1 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 0 ] [ 2 ] != m [ 1 ] [ 0 ] - m [ 1 ] [ 2 ] : ans = 1 if m [ 0 ] [ 0 ] - m [ 0 ] [ 2 ] != m [ 2 ] [ 0 ] - m [ 2 ] [ 2 ] : ans = 1 print ( " YNeos " [ ans : : 2 ] )
import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) b = np . array ( [ ] , int ) for l in range ( 3 ) : buf = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) b = np . concatenate ( ( b , buf ) , axis = None ) b = np . reshape ( b , ( 9 , 1 ) ) Ab = np . concatenate ( ( A , b ) , axis = 1 ) rA = np . linalg . matrix_rank ( A ) rAb = np . linalg . matrix_rank ( Ab ) if rA == rAb : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] a . append ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : continue else : print ( ' No ' ) quit ( ) print ( ' Yes ' )
import sys import math from fractions import gcd def lcm ( a , b ) : return a * b // gcd ( a , b ) def combination_count ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def permutations_count ( n , r ) : return math . factorial ( n ) // math . factorial ( n - r ) big_prime = 1000000007 L = [ list ( map ( int , list ( sys . stdin . readline ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = L [ 0 ] [ 0 ] - a1 b2 = L [ 0 ] [ 1 ] - a1 b3 = L [ 0 ] [ 2 ] - a1 a2 = L [ 1 ] [ 1 ] - b2 a3 = L [ 2 ] [ 2 ] - b3 if ( a2 + b1 ) == L [ 1 ] [ 0 ] and ( a3 + b1 ) == L [ 2 ] [ 0 ] and ( a3 + b2 ) == L [ 2 ] [ 1 ] and ( a2 + b3 ) == L [ 1 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
c_list = [ ] for i in range ( 3 ) : c_list . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) c_11 = c_list [ 0 ] [ 0 ] ans = 0 for a_1 in range ( c_11 + 1 ) : b_1 = c_11 - a_1 b_2 = c_list [ 0 ] [ 1 ] - a_1 b_3 = c_list [ 0 ] [ 2 ] - a_1 if c_list [ 1 ] [ 0 ] - b_1 == c_list [ 1 ] [ 1 ] - b_2 == c_list [ 1 ] [ 2 ] - b_3 and c_list [ 2 ] [ 0 ] - b_1 == c_list [ 2 ] [ 1 ] - b_2 == c_list [ 2 ] [ 2 ] - b_3 : print ( " Yes " ) ans = 1 exit ( ) if ans == 0 : print ( " No " )
c = [ ] for _ in range ( 3 ) : tmp = [ int ( x ) for x in input ( ) . split ( ) ] c . append ( tmp ) ans = True for i in range ( 2 ) : if ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] ) == ( c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) == ( c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) : pass else : ans = False break for i in range ( 2 ) : if ( c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] ) == ( c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] ) == ( c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] ) : pass else : ans = False break if ans : print ( " Yes " ) else : print ( " No " )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] [ 0 ] , c [ i ] [ 1 ] , c [ i ] [ 2 ] = map ( int , input ( ) . split ( " " ) ) success = False for a1 in range ( max ( [ max ( i ) for i in c ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if ( c [ 1 ] [ 0 ] - b1 ) == ( c [ 1 ] [ 1 ] - b2 ) and ( c [ 1 ] [ 1 ] - b2 ) == ( c [ 1 ] [ 2 ] - b3 ) : if ( c [ 2 ] [ 0 ] - b1 ) == ( c [ 2 ] [ 1 ] - b2 ) and ( c [ 2 ] [ 1 ] - b2 ) == ( c [ 2 ] [ 2 ] - b3 ) : success = True break if success : print ( " Yes " ) else : print ( " No " )
import numpy as np n1 = list ( map ( int , input ( ) . split ( ) ) ) n2 = list ( map ( int , input ( ) . split ( ) ) ) n3 = list ( map ( int , input ( ) . split ( ) ) ) A = np . array ( [ n1 , n2 , n3 ] ) def check ( b1 , b2 , b3 ) : if b1 == b2 and b2 == b3 : return True else : return False flg = False for i in range ( max ( A [ 0 ] ) + 1 ) : diff_n1 = A [ 0 ] - i b1 = A [ 1 ] [ 0 ] - diff_n1 [ 0 ] b2 = A [ 1 ] [ 1 ] - diff_n1 [ 1 ] b3 = A [ 1 ] [ 2 ] - diff_n1 [ 2 ] c1 = A [ 2 ] [ 0 ] - diff_n1 [ 0 ] c2 = A [ 2 ] [ 1 ] - diff_n1 [ 1 ] c3 = A [ 2 ] [ 2 ] - diff_n1 [ 2 ] if check ( b1 , b2 , b3 ) and check ( c1 , c2 , c3 ) : flg = True if flg : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = 0 a , b = [ 0 ] * 3 , [ 0 ] * 3 for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] == c [ i + 1 ] [ j ] + c [ i ] [ j + 1 ] : check += 1 if c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] : check + = 1 if check == 5 : print ( " Yes " ) else : print ( " No " )
import numpy as np lst = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] arr = np . array ( lst ) if len ( set ( arr [ 1 , : ] - arr [ 0 , : ] ) ) == 1 and len ( set ( arr [ 2 , : ] - arr [ 0 , : ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if C1 [ 0 ] - C1 [ 1 ] == C2 [ 0 ] - C2 [ 1 ] == C3 [ 0 ] - C3 [ 1 ] and C1 [ 1 ] - C1 [ 2 ] == C2 [ 1 ] - C2 [ 2 ] == C3 [ 1 ] - C3 [ 2 ] and C1 [ 0 ] - C2 [ 0 ] == C1 [ 1 ] - C2 [ 1 ] == C1 [ 2 ] - C2 [ 2 ] and C2 [ 0 ] - C3 [ 0 ] == C2 [ 1 ] - C3 [ 1 ] == C2 [ 2 ] - C3 [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ input ( ) . split ( ) for i in range ( 3 ) ] a1 = 0 a2 = 0 a3 = 0 b1 = 0 b2 = 0 b3 = 0 flag = 0 for i in range ( 0 , 101 ) : for j in range ( 0 , 101 ) : for k in range ( 0 , 101 ) : if i + j == int ( c [ 0 ] [ 0 ] ) and i + k == int ( c [ 0 ] [ 1 ] ) : a1 = i b1 = j b2 = k b3 = int ( c [ 0 ] [ 2 ] ) - i if int ( c [ 1 ] [ 0 ] ) - b1 == int ( c [ 1 ] [ 1 ] ) - b2 and int ( c [ 1 ] [ 1 ] ) - b2 == int ( c [ 1 ] [ 2 ] ) - b3 and int ( c [ 1 ] [ 0 ] ) - b1 == int ( c [ 1 ] [ 2 ] ) - b3 : if int ( c [ 2 ] [ 0 ] ) - b1 == int ( c [ 2 ] [ 1 ] ) - b2 and int ( c [ 2 ] [ 1 ] ) - b2 == int ( c [ 2 ] [ 2 ] ) - b3 and int ( c [ 2 ] [ 0 ] ) - b1 == int ( c [ 2 ] [ 2 ] ) - b3 : flag = 1 if flag == True : print ( " Yes " ) else : print ( " No " )
g = [ [ * map ( int , input ( ) . split ( ) ) ] for _ in range ( 3 ) ] for h in [ 0 , 1 ] : for w in [ 0 , 1 ] : if g [ h ] [ w ] + g [ h + 1 ] [ w + 1 ] != g [ h + 1 ] [ w ] + g [ h ] [ w + 1 ] : exit ( print ( ' No ' ) ) print ( ' Yes ' )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 10 , 0 , 0 ] y = [ 0 , 0 , 0 ] for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] [ j ] != x [ i ] + y [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) print ( ' Yes ' if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] and c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] and c2 [ 0 ] - c3 [ 0 ] == c2 [ 1 ] - c3 [ 1 ] == c2 [ 2 ] - c3 [ 2 ] and c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] else ' No ' )
from sys import stdin import sys [ c11 , c12 , c13 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) [ c21 , c22 , c23 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) [ c31 , c32 , c33 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) if ( ( c11 + c12 + c13 ) - ( c21 + c22 + c23 ) ) % 3 != 0 or ( ( c21 + c22 + c23 ) - ( c31 + c32 + c33 ) ) % 3 != 0 or ( ( c31 + c32 + c33 ) - ( c11 + c12 + c13 ) ) % 3 != 0 : print ( " No " ) elif ( ( c11 + c21 + c31 ) - ( c12 + c22 + c32 ) ) % 3 != 0 or ( ( c12 + c22 + c32 ) - ( c13 + c23 + c33 ) ) % 3 != 0 or ( ( c13 + c23 + c33 ) - ( c11 + c21 + c31 ) ) % 3 != 0 : print ( " No " ) else : print ( " Yes " )
from itertools import product flag = True c_list = [ ] for _ in range ( 3 ) : c_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) min_n = min ( sum ( c_list , [ ] ) ) new_list = [ ] for i in c_list : new_list . append ( [ j - min_n for j in i ] ) a = [ None , None , None ] b = [ None , None , None ] for i in range ( 3 ) : for j in range ( 3 ) : if new_list [ i ] [ j ] == 0 : a [ i ] = 0 a_other = [ num for num in [ 0 , 1 , 2 ] if i != num ] b [ j ] = 0 b_other = [ num for num in [ 0 , 1 , 2 ] if j != num ] for k in a_other : a [ k ] = new_list [ k ] [ j ] for k in b_other : b [ k ] = new_list [ i ] [ k ] break for i , j in product ( [ 0 , 1 , 2 ] , repeat = 2 ) : if new_list [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) flag = False break if flag : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c1 , c2 , c3 = C [ 0 ] c1 , c2 , c3 = c1 - c2 , c2 - c3 , c3 - c2 ans = ' Yes ' for c in C [ 1 : ] : cc1 , cc2 , cc3 = c cc1 , cc2 , cc3 = cc1 - cc2 , cc2 - cc3 , cc3 - cc2 if c1 == cc1 and c2 == cc2 and c3 == cc3 : pass else : ans = ' No ' break c1 , c2 , c3 = C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] c1 , c2 , c3 = c1 - c2 , c2 - c3 , c3 - c2 for i in range ( 1 , 3 ) : cc1 , cc2 , cc3 = C [ 0 ] [ i ] , C [ 1 ] [ i ] , C [ 2 ] [ i ] cc1 , cc2 , cc3 = cc1 - cc2 , cc2 - cc3 , cc3 - cc2 if c1 == cc1 and c2 == cc2 and c3 == cc3 : pass else : ans = ' No ' break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != ( a [ i ] + b [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] print ( " Yes " if c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] == c [ 2 ] [ 2 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] else " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] for i in range ( 2 ) : if not c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) for i in range ( 2 ) : if not c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np C = [ ] for i in range ( 3 ) : c_horizontal = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c_horizontal ) A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) Ab = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , C [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , C [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , C [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , C [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , C [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , C [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , C [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , C [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , C [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankAb = np . linalg . matrix_rank ( Ab ) if rankA == rankAb : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a = c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] b = c1 [ 1 ] + c2 [ 2 ] + c3 [ 0 ] c = c1 [ 2 ] + c2 [ 0 ] + c3 [ 1 ] d = c1 [ 0 ] + c2 [ 2 ] + c3 [ 1 ] e = c1 [ 1 ] + c2 [ 0 ] + c3 [ 2 ] f = c1 [ 2 ] + c2 [ 1 ] + c3 [ 0 ] if a == b == c == d == e == f : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and \ c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] and \ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and \ c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e + i == b + f + g == c + d + h : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( ' Yes ' if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] else ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 3 ) : d = [ ] for j in range ( 3 ) : d . append ( c [ i ] [ j ] - c [ i - 1 ] [ j ] ) if len ( set ( d ) ) > 1 : print ( ' No ' ) break else : print ( ' Yes ' )
def main ( ) : A = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] from itertools import product for a1 , a2 , a3 in product ( range ( 101 ) , repeat = 3 ) : c1 = A [ 0 ] [ 0 ] - a1 == A [ 1 ] [ 0 ] - a2 == A [ 2 ] [ 0 ] - a3 c2 = A [ 0 ] [ 1 ] - a1 == A [ 1 ] [ 1 ] - a2 == A [ 2 ] [ 1 ] - a3 c3 = A [ 0 ] [ 2 ] - a1 == A [ 1 ] [ 2 ] - a2 == A [ 2 ] [ 2 ] - a3 if c1 and c2 and c3 : return print ( " Yes " ) print ( " No " ) if __name__ == ' __main__ ' : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) d = [ ] for i in range ( 3 ) : sum = 0 d . append ( [ ] ) for j in range ( 3 ) : sum += c [ i ] [ j ] for j in range ( 3 ) : d [ i ] . append ( 3 * c [ i ] [ j ] - sum ) for i in range ( 3 ) : if d [ 0 ] [ i ] == d [ 1 ] [ i ] and d [ 0 ] [ i ] == d [ 2 ] [ i ] : pass else : print ( ' No ' ) break else : print ( ' Yes ' )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] a = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] b = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] hantei = True for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ j ] + b [ i ] : hantei = False print ( ' Yes ' if hantei else ' No ' )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] sum1 = li [ 0 ] [ 0 ] + li [ 1 ] [ 1 ] + li [ 2 ] [ 2 ] sum2 = li [ 1 ] [ 0 ] + li [ 2 ] [ 1 ] + li [ 0 ] [ 2 ] sum3 = li [ 2 ] [ 0 ] + li [ 0 ] [ 1 ] + li [ 1 ] [ 2 ] if sum1 == sum2 and sum2 == sum3 : print ( " Yes " ) else : print ( " No " )
import sys c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) coldif = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] for i in range ( 1 , 3 ) : dif = [ c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 1 ] ] if dif != coldif : print ( ' No ' ) sys . exit ( ) rowdif = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] for i in range ( 1 , 3 ) : dif = [ c [ 1 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 1 ] [ i ] ] if dif != rowdif : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 , b2 , b3 = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 check = [ ] check . append ( c [ 1 ] [ 1 ] == a2 + b2 ) check . append ( c [ 2 ] [ 1 ] == a3 + b2 ) check . append ( c [ 1 ] [ 2 ] == a2 + b3 ) check . append ( c [ 2 ] [ 2 ] == a3 + b3 ) if sum ( check ) == 4 : print ( " Yes " ) else : print ( " No " )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) if all ( c [ i ] [ 0 ] - c [ 0 ] [ 0 ] == c [ i ] [ 1 ] - c [ 0 ] [ 1 ] and c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == c [ i ] [ 2 ] - c [ 0 ] [ 2 ] for i in [ 1 , 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
lis1 = [ ] lis2 = [ ] lis3 = [ ] count = 0 flag = 0 for num in input ( ) . split ( ) : lis1 . append ( int ( num ) ) for num in input ( ) . split ( ) : lis2 . append ( int ( num ) ) for num in input ( ) . split ( ) : lis3 . append ( int ( num ) ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if lis1 [ 0 ] - a1 == lis2 [ 0 ] - a2 == lis3 [ 0 ] - a3 : if lis1 [ 1 ] - a1 == lis2 [ 1 ] - a2 == lis3 [ 1 ] - a3 : if lis1 [ 2 ] - a1 == lis2 [ 2 ] - a2 == lis3 [ 2 ] - a3 : print ( " Yes " ) flag = 1 break if flag == 1 : break if flag == 1 : break if a1 == 100 and flag == 0 : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( - 100 , 101 ) : b = [ c - a1 for c in C [ 0 ] ] for a2 in range ( - 100 , 101 ) : if b != [ c - a2 for c in C [ 1 ] ] : continue for a3 in range ( - 100 , 101 ) : if b == [ c - a3 for c in C [ 2 ] ] : print ( ' Yes ' ) quit ( ) print ( ' No ' )
from sys import stdin input = stdin . readline c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( " Yes " ) else : print ( " No " )
n = 3 rows = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] nums = rows [ 0 ] + rows [ 1 ] + rows [ 2 ] isTrue = False if nums [ 0 ] - nums [ 1 ] == nums [ 3 ] - nums [ 4 ] == nums [ 6 ] - nums [ 7 ] and nums [ 0 ] - nums [ 3 ] == nums [ 1 ] - nums [ 4 ] == nums [ 2 ] - nums [ 5 ] : isTrue = True else : isTrue = False if nums [ 1 ] - nums [ 2 ] == nums [ 4 ] - nums [ 5 ] == nums [ 7 ] - nums [ 8 ] and nums [ 3 ] - nums [ 6 ] == nums [ 4 ] - nums [ 7 ] == nums [ 5 ] - nums [ 8 ] : isTrue = True else : isTrue = False if isTrue : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) c . append ( a ) flag = True b = [ [ 0 ] * 3 ] * 3 B = dict ( ) for i in range ( 3 ) : for j in range ( 3 ) : if i == j : continue l = [ ] for k in range ( 3 ) : x = c [ k ] [ i ] - c [ k ] [ j ] if len ( l ) < 1 : l . append ( x ) else : for m in range ( len ( l ) ) : if x != l [ m ] : flag = False l . append ( x ) if flag : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) check = 0 for i in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - i b2 = c [ 0 ] [ 1 ] - i b3 = c [ 0 ] [ 2 ] - i if ( c [ 0 ] [ 0 ] - b1 == c [ 0 ] [ 1 ] - b2 == c [ 0 ] [ 2 ] - b3 and c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 and c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) : check = 1 break if check == 1 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] for i in range ( 3 ) : p = min ( C [ i ] ) for j in range ( 3 ) : C [ i ] [ j ] -= p ans = True for i in range ( 3 ) : if ( C [ i ] [ 0 ] == C [ i ] [ 1 ] == C [ i ] [ 2 ] ) : continue else : ans = False if ( not ans ) : ans = True for i in range ( 3 ) : if ( C [ 0 ] [ i ] == C [ 1 ] [ i ] == C [ 2 ] [ i ] ) : continue else : ans = False print ( " Yes " ) if ans else print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
L = [ ] f = True for _ in range ( 3 ) : l = list ( map ( int , input ( ) . split ( ) ) ) L . append ( l ) for i in range ( 2 ) : cnt = 0 tmp1 = - 1 for j in range ( 3 ) : if tmp1 != L [ i + 1 ] [ j ] - L [ i ] [ j ] : cnt += 1 tmp1 = L [ i + 1 ] [ j ] - L [ i ] [ j ] if cnt > 1 : f = False for i in range ( 2 ) : cnt = 0 tmp1 = - 1 for j in range ( 3 ) : if tmp1 != L [ j ] [ i + 1 ] - L [ j ] [ i ] : cnt + = 1 tmp1 = L [ j ] [ i + 1 ] - L [ j ] [ i ] if cnt > 1 : f = False if f : print ( " Yes " ) else : print ( " No " )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] for a1 in range ( 101 ) : b1 , b2 , b3 = c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2 , a3 = c [ 1 ] [ 0 ] - b1 , c [ 2 ] [ 0 ] - b1 if a2 < 0 or a3 < 0 : continue if a2 + b2 != c [ 1 ] [ 1 ] or a2 + b3 != c [ 1 ] [ 2 ] : continue if a3 + b2 != c [ 2 ] [ 1 ] or a3 + b3 != c [ 2 ] [ 2 ] : continue print ( " Yes " ) break else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] == c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) print ( " No " )
C = [ 0 ] * 3 A = [ 0 ] * 3 B = [ 0 ] * 3 for j in range ( 3 ) : C [ j ] = [ int ( x ) for x in input ( ) . split ( ) ] B [ 0 ] , B [ 1 ] , B [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] A [ 1 ] , A [ 2 ] = C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] flag = 0 for i in range ( 3 ) : for k in range ( 3 ) : if C [ i ] [ k ] != A [ i ] + B [ k ] : flag = 1 break if flag == 1 : print ( " No " ) else : print ( " Yes " )
import sys read = sys . stdin . read readlines = sys . stdin . readlines def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( tuple ( map ( int , input ( ) . split ( ) ) ) ) for i1 in range ( 101 ) : for i2 in range ( 101 ) : if i1 - c [ 0 ] [ 0 ] == i2 - c [ 0 ] [ 1 ] : i3 = c [ 0 ] [ 2 ] - ( c [ 0 ] [ 0 ] - i1 ) if i1 - c [ 1 ] [ 0 ] == i2 - c [ 1 ] [ 1 ] == i3 - c [ 1 ] [ 2 ] : if i1 - c [ 2 ] [ 0 ] == i2 - c [ 2 ] [ 1 ] == i3 - c [ 2 ] [ 2 ] : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] t1 = list ( map ( lambda x : x - min ( C [ 0 ] ) , C [ 0 ] ) ) t2 = list ( map ( lambda x : x - min ( C [ 1 ] ) , C [ 1 ] ) ) t3 = list ( map ( lambda x : x - min ( C [ 2 ] ) , C [ 2 ] ) ) s1 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] ] ) , [ C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] ] ) ) s2 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 1 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 1 ] ] ) , [ C [ 0 ] [ 1 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 1 ] ] ) ) s3 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 2 ] , C [ 1 ] [ 2 ] , C [ 2 ] [ 2 ] ] ) , [ C [ 0 ] [ 2 ] , C [ 1 ] [ 2 ] , C [ 2 ] [ 2 ] ] ) ) arr = [ ] for i , j , k in zip ( t1 + s1 , t2 + s2 , t3 + s3 ) : arr . append ( i == j == k ) print ( ' Yes ' if all ( arr ) else ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
import sys c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : arr1 = c [ i ] arr2 = c [ i + 1 ] d = arr1 [ 2 ] - arr2 [ 2 ] for j in range ( 2 ) : if d != arr1 [ j ] - arr2 [ j ] : print ( ' No ' ) sys . exit ( 0 ) for i in range ( 2 ) : d = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] for j in range ( 2 ) : if d != c [ j ] [ i ] - c [ j ] [ i + 1 ] : print ( ' No ' ) sys . exit ( 0 ) print ( ' Yes ' )
def main ( ) : a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( a [ 1 ] [ 0 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 0 ] [ 2 ] ) \ and ( a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] ) \ and ( a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] ) \ and ( a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] ) : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = ' Yes ' for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : pass else : flag = ' No ' for j in range ( 2 ) : if c [ j + 1 ] [ 0 ] - c [ j ] [ 0 ] == c [ j + 1 ] [ 1 ] - c [ j ] [ 1 ] == c [ j + 1 ] [ 2 ] - c [ j ] [ 2 ] : pass else : flag = ' No ' print ( flag )
def main ( ) : l = list ( ) for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , l [ 0 ] [ 0 ] + 1 ) : b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a2 = l [ 1 ] [ 0 ] - b1 a3 = l [ 2 ] [ 0 ] - b1 if b1 < 0 : continue if b2 < 0 : continue if b3 < 0 : continue if a2 < 0 : continue if a3 < 0 : continue if ( l [ 1 ] [ 1 ] == b2 + a2 and l [ 1 ] [ 2 ] == b3 + a2 and l [ 2 ] [ 1 ] == b2 + a3 and l [ 2 ] [ 2 ] == b3 + a3 ) : print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
import numpy as np if __name__ == ' __main__ ' : rows = [ ] for i in range ( 3 ) : rows . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) mat = np . matrix ( rows ) upper_a = [ mat [ i , : ] . max ( ) for i in range ( 3 ) ] upper_b = [ mat [ : , i ] . max ( ) for i in range ( 3 ) ] for a1 in range ( upper_a [ 0 ] + 1 ) : bs = [ v - a1 for v in mat [ 0 , : ] . tolist ( ) [ 0 ] ] for a2 in range ( upper_a [ 1 ] + 1 ) : vals = [ a2 + b for b in bs ] if vals == mat [ 1 , : ] . tolist ( ) [ 0 ] : for a3 in range ( upper_a [ 2 ] + 1 ) : vals = [ a3 + b for b in bs ] if vals == mat [ 2 , : ] . tolist ( ) [ 0 ] : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
import numpy as np arr = [ ] for i in range ( 3 ) : arr . append ( [ int ( s ) for s in input ( ) . split ( " " ) ] ) def calculate ( arr ) : arr = np . array ( arr ) minValPerRow = min ( arr [ 0 ] ) result = False for sa in range ( minValPerRow + 1 ) : mrr = arr [ 0 ] - sa mrr1 = arr [ 1 ] - mrr mrr2 = arr [ 2 ] - mrr s1 = mrr1 [ 0 ] == mrr1 [ 1 ] == mrr1 [ 2 ] s2 = mrr2 [ 0 ] == mrr2 [ 1 ] == mrr2 [ 2 ] if s1 == True and s2 == True : result = True break if result : print ( " Yes " ) else : print ( " No " ) calculate ( arr )
List = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] newlist = [ ] new = [ x - y for ( x , y ) in zip ( List [ 0 ] , List [ 1 ] ) ] new2 = [ x - y for ( x , y ) in zip ( List [ 2 ] , List [ 1 ] ) ] if new [ 0 ] == new [ 1 ] and new [ 1 ] == new [ 2 ] : pass else : print ( ' No ' ) exit ( ) if new2 [ 0 ] == new2 [ 1 ] and new2 [ 1 ] == new2 [ 2 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ [ int ( j ) for j in input ( ) . split ( ) ] for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] [ 0 ] , c [ i ] [ 1 ] , c [ i ] [ 2 ] = c [ i ] [ 0 ] - c [ i ] [ 0 ] , c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 0 ] if c [ 0 ] == c [ 1 ] == c [ 2 ] : print ( " Yes " ) else : print ( " No " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) d1 , d2 , d3 , d4 , d5 , d6 = c2 - c1 , c3 - c2 , c5 - c4 , c6 - c5 , c8 - c7 , c9 - c8 if d1 == d3 and d3 == d5 and d2 == d4 and d4 == d6 : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) f = 0 for a1 in range ( min ( c1 ) + 1 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a2_1 = c2 [ 0 ] - b1 a2_2 = c2 [ 1 ] - b2 a2_3 = c2 [ 2 ] - b3 if not ( a2_1 == a2_2 and a2_2 == a2_3 ) : continue a3_1 = c3 [ 0 ] - b1 a3_2 = c3 [ 1 ] - b2 a3_3 = c3 [ 2 ] - b3 if not ( a3_1 == a3_2 and a3_2 == a3_3 ) : continue print ( " Yes " ) f = 1 break if not f : print ( " No " )
G1 = list ( map ( int , input ( ) . split ( ) ) ) G2 = list ( map ( int , input ( ) . split ( ) ) ) G3 = list ( map ( int , input ( ) . split ( ) ) ) sub_G1 = [ ] sub_G2 = [ ] sub_G3 = [ ] sub_R12 = [ ] sub_R23 = [ ] for i in range ( 2 ) : sub_G1 . append ( G1 [ i + 1 ] - G1 [ i ] ) sub_G2 . append ( G2 [ i + 1 ] - G2 [ i ] ) sub_G3 . append ( G3 [ i + 1 ] - G3 [ i ] ) for k in range ( 3 ) : sub_R12 . append ( G2 [ i ] - G1 [ i ] ) sub_R23 . append ( G3 [ i ] - G2 [ i ] ) condition1 = bool ( sub_G1 [ 0 ] == sub_G2 [ 0 ] == sub_G3 [ 0 ] ) condition2 = bool ( sub_G1 [ 1 ] == sub_G2 [ 1 ] == sub_G3 [ 1 ] ) condition3 = bool ( len ( set ( sub_R12 ) ) == 1 ) condition4 = bool ( len ( set ( sub_R23 ) ) == 1 ) if condition1 and condition2 and condition3 and condition4 : print ( " Yes " ) else : print ( " No " )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for x in range ( 3 ) ] total1 = 0 total2 = 0 for i in range ( 3 ) : total1 += sum ( l [ i ] ) total2 += l [ i ] [ i ] if total1 == total2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] l . sort ( ) if l [ 1 ] [ 0 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 1 ] - l [ 0 ] [ 1 ] == l [ 1 ] [ 2 ] - l [ 0 ] [ 2 ] : if l [ 2 ] [ 0 ] - l [ 0 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 0 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 0 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
def solve ( ) : C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] diffr1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] diffr2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] diffc1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] diffc2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] == diffr1 : if C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] == diffr2 : if C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] == diffc1 : if C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] == diffc2 : return " Yes " return " No " if __name__ == " __main__ " : print ( solve ( ) )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] MAXSIZE = ( 1 << 31 ) - 1 MINSIZE = - ( 1 << 31 ) + 1 yes = " Yes " no = " No " def solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) : result = no a0 = 0 b0 = line00 b1 = line01 - a0 b2 = line02 - a0 a1 = line10 - line00 a2 = line20 - line00 if ( ( a1 + b1 ) == line11 ) and ( ( a1 + b2 ) == line12 ) and ( ( a2 + b1 ) == line21 ) and ( ( a2 + b2 ) == line22 ) : result = yes return result if __name__ == " __main__ " : line00 , line01 , line02 = MI ( ) line10 , line11 , line12 = MI ( ) line20 , line21 , line22 = MI ( ) print ( " {} " . format ( solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) ) )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = C [ 0 ] [ 0 ] a = [ c [ 0 ] - x for c in C ] b = [ C [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " print ( ans )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = [ ] B = [ ] for i in range ( 3 ) : A . append ( sum ( C [ i ] ) ) B . append ( C [ 0 ] [ i ] + C [ 1 ] [ i ] + C [ 2 ] [ i ] ) if ( A [ 0 ] - A [ 1 ] ) % 3 == 0 and ( A [ 1 ] - A [ 2 ] ) % 3 == 0 and ( A [ 2 ] - A [ 0 ] ) % 3 == 0 : if ( B [ 0 ] - B [ 1 ] ) % 3 == 0 and ( B [ 1 ] - B [ 2 ] ) % 3 == 0 and ( B [ 2 ] - B [ 0 ] ) % 3 == 0 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
cube = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = True x = [ 0 ] * 3 y = [ 0 ] * 3 x [ 0 ] = 0 y [ 0 ] = cube [ 0 ] [ 0 ] - x [ 0 ] y [ 1 ] = cube [ 0 ] [ 1 ] - x [ 0 ] y [ 2 ] = cube [ 0 ] [ 2 ] - x [ 0 ] x [ 1 ] = cube [ 1 ] [ 0 ] - y [ 0 ] x [ 2 ] = cube [ 2 ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if not ( x [ i ] + y [ j ] == cube [ i ] [ j ] ) : a = False if a : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a1 = 0 b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 != a2 + b2 : print ( " No " ) elif c23 != a2 + b3 : print ( " No " ) elif c32 != a3 + b2 : print ( " No " ) elif c33 != a3 + b3 : print ( " No " ) else : print ( " Yes " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] N = min ( c [ 0 ] ) ans = ' No ' for i in range ( N + 1 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = 1 for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != a [ j ] + b [ k ] : flag = 0 if flag == 1 : ans = ' Yes ' break print ( ans )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] t = [ ] for i in range ( 3 ) : t . append ( [ s [ i ] [ 0 ] - s [ i ] [ 1 ] , s [ i ] [ 0 ] - s [ i ] [ 2 ] ] ) if t [ 0 ] == t [ 1 ] and t [ 0 ] == t [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 1 , 3 , 1 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False ans = " Yes " for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " flag = True break print ( ans )
ls = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = [ 0 , 0 , 0 , 0 ] if ls [ 0 ] [ 0 ] - ls [ 1 ] [ 0 ] == ls [ 0 ] [ 1 ] - ls [ 1 ] [ 1 ] and ls [ 0 ] [ 1 ] - ls [ 1 ] [ 1 ] == ls [ 0 ] [ 2 ] - ls [ 1 ] [ 2 ] : flag [ 0 ] = 1 if ls [ 1 ] [ 0 ] - ls [ 2 ] [ 0 ] == ls [ 1 ] [ 1 ] - ls [ 2 ] [ 1 ] and ls [ 1 ] [ 1 ] - ls [ 2 ] [ 1 ] == ls [ 1 ] [ 2 ] - ls [ 2 ] [ 2 ] : flag [ 1 ] = 1 if ls [ 0 ] [ 0 ] - ls [ 0 ] [ 1 ] == ls [ 1 ] [ 0 ] - ls [ 1 ] [ 1 ] and ls [ 1 ] [ 0 ] - ls [ 1 ] [ 1 ] == ls [ 2 ] [ 0 ] - ls [ 2 ] [ 1 ] : flag [ 2 ] = 1 if ls [ 0 ] [ 1 ] - ls [ 0 ] [ 2 ] == ls [ 1 ] [ 1 ] - ls [ 1 ] [ 2 ] and ls [ 1 ] [ 1 ] - ls [ 1 ] [ 2 ] == ls [ 2 ] [ 1 ] - ls [ 2 ] [ 2 ] : flag [ 3 ] = 1 if sum ( flag ) == 4 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = [ ] for i in range ( 3 ) : d . append ( [ ] ) for j , k in zip ( [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] ) : d [ i ] . append ( c [ i ] [ j ] - c [ i ] [ k ] ) if d [ 0 ] == d [ 1 ] == d [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) a = ( a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 0 ] ) b = ( b [ 1 ] - b [ 0 ] , b [ 2 ] - b [ 0 ] ) c = ( c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 0 ] ) if a == b and b == c : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline def main ( ) : mC = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] mD = [ [ mC [ i ] [ j ] - mC [ i ] [ j + 1 ] for j in range ( 2 ) ] for i in range ( 3 ) ] mE = [ [ mC [ i ] [ j ] - mC [ i + 1 ] [ j ] for i in range ( 2 ) ] for j in range ( 3 ) ] res = " Yes " if any ( vd != mD [ 0 ] for vd in mD [ 1 : ] ) \ or any ( ve != mE [ 0 ] for ve in mE [ 1 : ] ) : res = " No " print ( res ) main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x1 = ( c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] ) x2 = ( c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] ) x3 = ( c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] ) x4 = ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] ) if x1 and x2 and x3 and x4 : print ( " Yes " ) else : print ( " No " )
c_one = list ( map ( int , input ( ) . split ( ) ) ) c_two = list ( map ( int , input ( ) . split ( ) ) ) c_thr = list ( map ( int , input ( ) . split ( ) ) ) a_b_ones = [ ( x , c_one [ 0 ] - x ) for x in range ( c_one [ 0 ] + 1 ) ] a_b_twos = [ ( x , c_two [ 1 ] - x ) for x in range ( c_two [ 1 ] + 1 ) ] a_b_thrs = [ ( x , c_thr [ 2 ] - x ) for x in range ( c_thr [ 2 ] + 1 ) ] ans = ' No ' for p in a_b_ones : for q in a_b_twos : for r in a_b_thrs : a1 , b1 = p [ 0 ] , p [ 1 ] a2 , b2 = q [ 0 ] , q [ 1 ] a3 , b3 = r [ 0 ] , r [ 1 ] if ( c_one [ 1 ] == a1 + b2 ) and ( c_one [ 2 ] == a1 + b3 ) and ( c_two [ 0 ] == a2 + b1 ) and ( c_two [ 2 ] == a2 + b3 ) and ( c_thr [ 0 ] == a3 + b1 ) and ( c_thr [ 1 ] == a3 + b2 ) : ans = ' Yes ' print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) def wrong ( ) : print ( ' No ' ) exit ( ) if c12 - c11 == c22 - c21 == c32 - c31 : pass else : wrong ( ) if c13 - c11 == c23 - c21 == c33 - c31 : pass else : wrong ( ) if c13 - c12 == c23 - c22 == c33 - c32 : pass else : wrong ( ) if c21 - c11 == c22 - c12 == c23 - c13 : pass else : wrong ( ) if c31 - c11 == c32 - c12 == c33 - c13 : pass else : wrong ( ) if c31 - c21 == c32 - c22 == c33 - c23 : pass else : wrong ( ) print ( ' Yes ' )
r = [ None ] * 3 for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) r [ i ] = [ x [ i ] - x [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( r [ i ] == r [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) for _ in range ( 2 ) : x , y , z = map ( int , input ( ) . split ( ) ) if x - b1 == y - b2 == z - b3 : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( 3 ) : for l in range ( 3 ) : if c [ i ] [ j ] + c [ k ] [ l ] != c [ i ] [ l ] + c [ k ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] + [ 100 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] + [ 100 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] + [ 100 ] ) + 1 ) : x1 = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] x2 = [ c [ 1 ] [ 0 ] - a2 , c [ 1 ] [ 1 ] - a2 , c [ 1 ] [ 2 ] - a2 ] x3 = [ c [ 2 ] [ 0 ] - a3 , c [ 2 ] [ 1 ] - a3 , c [ 2 ] [ 2 ] - a3 ] if x1 == x2 == x3 : print ( " Yes " ) sys . exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 for a2 in range ( c [ 1 ] [ 0 ] + 1 ) : if b1 != c [ 1 ] [ 0 ] - a2 : continue if b2 != c [ 1 ] [ 1 ] - a2 : continue if b3 != c [ 1 ] [ 2 ] - a2 : continue for a3 in range ( c [ 2 ] [ 0 ] + 1 ) : if b1 != c [ 2 ] [ 0 ] - a3 : continue if b2 != c [ 2 ] [ 1 ] - a3 : continue if b3 != c [ 2 ] [ 2 ] - a3 : continue print ( " Yes " ) exit ( ) print ( " No " )
c = [ ] for i in range ( 3 ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c1 ) count = 0 ans = " Yes " for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i ] [ j + 1 ] != c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] : ans = " No " if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : ans = " No " print ( ans )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ ] for i in range ( 3 ) : a . append ( [ c [ i ] [ 0 ] - c [ i ] [ 1 ] , c [ i ] [ 1 ] - c [ i ] [ 2 ] ] ) if a [ 0 ] == a [ 1 ] and a [ 0 ] == a [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x = min ( c1 ) y = min ( c2 ) z = min ( c3 ) for i in range ( 3 ) : c1 [ i ] -= x c2 [ i ] -= y c3 [ i ] -= z print ( ' NYoe s ' [ c1 == c2 == c3 : : 2 ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ 0 ] * 3 N = max ( max ( c ) ) + 1 for a1 in range ( N ) : for a2 in range ( N ) : for a3 in range ( N ) : b [ 0 ] = c [ 0 ] [ 0 ] - a1 b [ 1 ] = c [ 0 ] [ 1 ] - a1 b [ 2 ] = c [ 0 ] [ 2 ] - a1 flag = True nb = [ 0 ] * 3 for i in range ( 3 ) : nb [ i ] = c [ 1 ] [ i ] - a2 if nb [ i ] != b [ i ] : flag = False break for i in range ( 3 ) : nb [ i ] = c [ 2 ] [ i ] - a3 if nb [ i ] != b [ i ] : flag = False break if flag : import sys print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for x in range ( 101 ) : for y in range ( 101 ) : for z in range ( 101 ) : if x - y == c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if y - z == c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : if z - x == c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
import sys lst = [ ] for i in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) lst . append ( [ a , b , c ] ) for i in range ( 2 ) : for j in range ( 2 ) : if ( lst [ i ] [ j + 1 ] - lst [ i ] [ j ] ) != ( lst [ i + 1 ] [ j + 1 ] - lst [ i + 1 ] [ j ] ) or ( lst [ j + 1 ] [ i ] - lst [ j ] [ i ] ) != ( lst [ j + 1 ] [ i + 1 ] - lst [ j ] [ i + 1 ] ) : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : sub_list = list ( map ( int , input ( ) . split ( ) ) ) c . append ( sub_list ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - i b [ 1 ] = c [ 0 ] [ 1 ] - i b [ 2 ] = c [ 0 ] [ 2 ] - i a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] count = 0 for j in a : if not 0 <= j <= 100 : count = 1 for j in b : if not 0 <= j <= 100 : count = 1 if count == 1 : continue count = 0 for m in range ( 3 ) : for n in range ( 3 ) : if not c [ m ] [ n ] == a [ m ] + b [ n ] : count = 1 if count == 1 : continue else : print ( ' Yes ' ) import sys sys . exit ( ) print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] print ( ' Yes ' ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] else print ( ' No ' )
import sys c = list ( map ( int , input ( ) . split ( ) ) ) diffa = c [ 1 ] - c [ 0 ] diffb = c [ 2 ] - c [ 1 ] c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) print ( " Yes " )
from fractions import gcd from itertools import combinations , permutations , accumulate , product from collections import deque , defaultdict , Counter import decimal import re import math import bisect import sys sys . setrecursionlimit ( 10000000 ) mod = 10 ** 9 + 7 from sys import stdin readline = stdin . readline def readInts ( ) : return list ( map ( int , readline ( ) . split ( ) ) ) def readTuples ( ) : return tuple ( map ( int , readline ( ) . split ( ) ) ) def I ( ) : return int ( readline ( ) ) C = [ readInts ( ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 A [ 0 ] = 0 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] for j in range ( 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] == C [ i ] [ j ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = [ a [ 0 ] [ 0 ] , a [ 1 ] [ 0 ] , a [ 2 ] [ 0 ] ] for i in range ( 2 ) : if not a [ 0 ] [ i + 1 ] - b [ 0 ] == a [ 1 ] [ i + 1 ] - b [ 1 ] == a [ 2 ] [ i + 1 ] - b [ 2 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
a = input ( ) . split ( ) b = input ( ) . split ( ) c = input ( ) . split ( ) lista = [ int ( d ) for d in a ] listb = [ int ( e ) for e in b ] listc = [ int ( f ) for f in c ] b1 = lista [ 0 ] b2 = lista [ 1 ] b3 = lista [ 2 ] a2 = listb [ 0 ] - b1 a3 = listc [ 0 ] - b1 if a2 + b2 == listb [ 1 ] and a2 + b3 == listb [ 2 ] and a3 + b2 == listc [ 1 ] and a3 + b3 == listc [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] mx = 0 for i in range ( 3 ) : mx = max ( mx , max ( c [ i ] ) ) flag = True for i in range ( mx + 1 ) : d1 = [ c [ 0 ] [ 0 ] - i , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i ] for j in range ( mx + 1 ) : d2 = [ c [ 1 ] [ 0 ] - j , c [ 1 ] [ 1 ] - j , c [ 1 ] [ 2 ] - j ] for k in range ( mx + 1 ) : d3 = [ c [ 2 ] [ 0 ] - k , c [ 2 ] [ 1 ] - k , c [ 2 ] [ 2 ] - k ] if d1 == d2 == d3 : flag = False print ( " YNeos " [ flag : : 2 ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = c [ 0 ] flg = True for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : flg = False print ( ' Yes ' if flg else ' No ' )
cs = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : yoko = abs ( cs [ 0 ] [ i ] - cs [ 0 ] [ i + 1 ] ) for j in range ( 1 , 3 ) : if yoko - abs ( cs [ j ] [ i ] - cs [ j ] [ i + 1 ] ) != 0 : print ( ' No ' ) exit ( ) for i in range ( 2 ) : tate = abs ( cs [ 0 + i ] [ 0 ] - cs [ 1 + i ] [ 0 ] ) for j in range ( 1 , 3 ) : if tate - abs ( cs [ i ] [ j ] - cs [ i + 1 ] [ j ] ) != 0 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys if sys . platform == ' ios ' : sys . stdin = open ( ' input_file.txt ' ) c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 for i in range ( max ( max ( c ) ) + 1 ) : a0 = i b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : ans = ans + 1 break print ( ' Yes ' if ans != 0 else ' No ' )
ls = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if ls [ i % 3 ] [ j % 3 ] - ls [ i % 3 ] [ ( j + 1 ) % 3 ] == ls [ ( i + 1 ) % 3 ] [ j % 3 ] - ls [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : cnt += 1 print ( ' Yes ' if cnt == 9 else ' No ' )
c = [ ' ' for _ in range ( 3 ) ] c [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 2 ) : line = [ 0 for _ in range ( 3 ) ] column = [ 0 for _ in range ( 3 ) ] for j in range ( 3 ) : line [ j ] = c [ i + 1 ] [ j ] - c [ i ] [ j ] column [ j ] = c [ i + 1 ] [ j ] - c [ i ] [ j ] if len ( set ( line ) ) != 1 or len ( set ( column ) ) != 1 : ans = ' No ' break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : print ( " No " ) break if not ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : print ( " No " ) break else : print ( " Yes " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c0 = c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] c1 = c [ 1 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 1 ] [ 2 ] c2 = c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 2 ] [ 2 ] for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 for a1 in range ( 101 ) : a2 = ( c2 - c0 + 3 * a0 ) / 3 if ( c [ 1 ] [ 0 ] - a1 == b0 and c [ 1 ] [ 1 ] - a1 == b1 and c [ 1 ] [ 2 ] - a1 == b2 and c [ 2 ] [ 0 ] - a2 == b0 and c [ 2 ] [ 1 ] - a2 == b1 and c [ 2 ] [ 2 ] - a2 == b2 ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
line1 = list ( map ( int , input ( ) . split ( ) ) ) line2 = list ( map ( int , input ( ) . split ( ) ) ) line3 = list ( map ( int , input ( ) . split ( ) ) ) b1 = [ line1 [ 1 ] - line1 [ 0 ] , line1 [ 2 ] - line1 [ 0 ] ] b2 = [ line2 [ 1 ] - line2 [ 0 ] , line2 [ 2 ] - line2 [ 0 ] ] b3 = [ line3 [ 1 ] - line3 [ 0 ] , line3 [ 2 ] - line3 [ 0 ] ] a1 = [ line2 [ 0 ] - line1 [ 0 ] , line3 [ 0 ] - line1 [ 0 ] ] a2 = [ line2 [ 1 ] - line1 [ 1 ] , line3 [ 1 ] - line1 [ 1 ] ] a3 = [ line2 [ 2 ] - line1 [ 2 ] , line3 [ 2 ] - line1 [ 2 ] ] check = False if b1 [ 0 ] == b2 [ 0 ] and b1 [ 0 ] == b3 [ 0 ] : if b1 [ 1 ] == b2 [ 1 ] and b1 [ 1 ] == b3 [ 1 ] : if a1 [ 0 ] == a2 [ 0 ] and a1 [ 0 ] == a3 [ 0 ] : if a1 [ 1 ] == a2 [ 1 ] and a1 [ 1 ] == a3 [ 1 ] : check = True if check : print ( " Yes " ) else : print ( " No " )
import copy def a ( ) : return input ( ) def ai ( ) : return int ( input ( ) ) def ma ( ) : return map ( int , input ( ) . split ( ) ) def ms ( ) : return map ( str , input ( ) . split ( ) ) def lma ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def lms ( ) : return list ( map ( str , input ( ) . split ( ) ) ) k = [ ] l = [ ] for i in range ( 3 ) : k . append ( lma ( ) ) l = copy . deepcopy ( k ) p = copy . deepcopy ( k ) for i in range ( 1 , 3 ) : for j in range ( 0 , 3 ) : l [ i ] [ j ] -= k [ i - 1 ] [ j ] p [ j ] [ i ] -= k [ j ] [ i - 1 ] if l [ 1 ] [ 0 ] == l [ 1 ] [ 1 ] and l [ 1 ] [ 1 ] == l [ 1 ] [ 2 ] and l [ 2 ] [ 0 ] == l [ 2 ] [ 1 ] and l [ 2 ] [ 1 ] == l [ 2 ] [ 2 ] and p [ 0 ] [ 1 ] == p [ 1 ] [ 1 ] and p [ 2 ] [ 1 ] == p [ 1 ] [ 1 ] and p [ 2 ] [ 2 ] == p [ 1 ] [ 2 ] and p [ 0 ] [ 2 ] == p [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c1 , c2 , c3 = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] is_true = [ 0 , 0 ] for i in range ( - 100 , 101 ) : row = [ v + i for v in c1 ] if row == c2 : is_true [ 0 ] = 1 if row == c3 : is_true [ 1 ] = 1 print ( ' Yes ' if all ( is_true ) else ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 0 , 3 ) : for j in range ( i , 3 ) : if a [ i ] + b [ j ] != a [ j ] + b [ i ] or a [ i ] + c [ j ] != a [ j ] + c [ i ] or b [ i ] + c [ j ] != b [ j ] + c [ i ] : print ( " No " ) quit ( 0 ) print ( " Yes " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = " Yes " for i in range ( 3 ) : a1 = c [ 1 ] [ i ] - c [ 0 ] [ i ] a2 = c [ 2 ] [ i ] - c [ 1 ] [ i ] a3 = c [ i ] [ 2 ] - c [ i ] [ 1 ] a4 = c [ i ] [ 1 ] - c [ i ] [ 0 ] l = [ a1 , a2 , a3 , a4 ] if i == 0 : p = l else : if p != l : ans = " No " print ( ans )
X = list ( map ( int , input ( ) . split ( ) ) ) Y = list ( map ( int , input ( ) . split ( ) ) ) Z = list ( map ( int , input ( ) . split ( ) ) ) res = " Yes " for i in range ( 2 ) : if X [ i ] - X [ i + 1 ] == Y [ i ] - Y [ i + 1 ] and X [ i ] - X [ i + 1 ] == Z [ i ] - Z [ i + 1 ] : res = " No " break i if ( X [ 0 ] - X [ 1 ] == Y [ 0 ] - Y [ 1 ] and X [ 0 ] - X [ 1 ] == Z [ 0 ] - Z [ 1 ] and X [ 2 ] - X [ 1 ] == Y [ 2 ] - Y [ 1 ] and X [ 2 ] - X [ 1 ] == Z [ 2 ] - Z [ 1 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] ans = ' Yes ' for j in range ( 2 ) : if c [ j ] [ 0 ] - c [ j + 1 ] [ 0 ] == c [ j ] [ 1 ] - c [ j + 1 ] [ 1 ] == c [ j ] [ 2 ] - c [ j + 1 ] [ 2 ] : ans = ' Yes ' else : ans = ' No ' print ( ans ) exit ( ) for j in range ( 2 ) : if c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] == c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] == c [ 2 ] [ j ] - c [ 2 ] [ j + 1 ] : ans = ' Yes ' else : ans = ' No ' print ( ans ) exit ( ) print ( ans )
grid = [ ] for i in range ( 3 ) : grid . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) for _ in range ( 100 ) : a1 = i b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 and grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 flag = c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 print ( ' Yes ' if flag else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ 0 ] [ 0 ] == c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == c [ i ] [ 2 ] - c [ 0 ] [ 2 ] ) : flag = False if not ( c [ 0 ] [ i ] - c [ 0 ] [ 0 ] == c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == c [ 2 ] [ i ] - c [ 2 ] [ 0 ] ) : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : d = c [ i ] [ j ] - c [ i + 1 ] [ j ] e = c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] if d != e : print ( " No " ) exit ( 0 ) for i in range ( 2 ) : for j in range ( 2 ) : d = c [ i ] [ j ] - c [ i ] [ j + 1 ] e = c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] if d != e : print ( " No " ) exit ( 0 ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] b = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] f = True for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ i ] [ j + 1 ] - c [ i ] [ j ] ) if a != t : f = False for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ j + 1 ] [ i ] - c [ j ] [ i ] ) if b != t : f = False if f : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) for a1 in range ( 0 , 101 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if all ( [ c22 == a2 + b2 , c23 == a2 + b3 , c32 == a3 + b2 , c33 == a3 + b3 ] ) : print ( " Yes " ) exit ( 0 ) else : print ( " No " )
* C , = map ( int , open ( 0 ) . read ( ) . split ( ) ) a1 = 0 a2 = C [ 3 ] - C [ 0 ] a3 = C [ 6 ] - C [ 0 ] b1 = C [ 0 ] b2 = C [ 1 ] b3 = C [ 2 ] A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i * 3 + j ] != A [ i ] + B [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e == b + d : if b + f == c + e : if d + h == e + g : if e + i == f + h : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for k in range ( 3 ) ] A = [ sum ( a ) for a in c ] B = [ 0 , 0 , 0 ] AB = 0 for y in range ( 3 ) : for x in range ( 3 ) : if x == y : AB += c [ y ] [ x ] B [ x ] += c [ y ] [ x ] for k in range ( 3 ) : t = ( A [ k ] + B [ k ] - AB ) if t >= 0 and t % 3 == 0 : pass else : print ( " No " ) exit ( 0 ) print ( " Yes " )
C_list = [ ] for _ in range ( 3 ) : C_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) from itertools import combinations ans = ' Yes ' for r in combinations ( range ( 3 ) , 2 ) : for c in combinations ( range ( 3 ) , 2 ) : if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 0 ] ] != C_list [ r [ 0 ] ] [ c [ 1 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 0 ] ] [ c [ 1 ] ] != C_list [ r [ 1 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break print ( ans )
c = list ( list ( map ( int , raw_input ( ) . split ( ) ) ) for i in range ( 3 ) ) diff_list_x = [ ] diff_list_y = [ ] for i in range ( 3 ) : diff_list_x . append ( [ c [ i ] [ 0 ] - c [ i ] [ 1 ] , c [ i ] [ 1 ] - c [ i ] [ 2 ] ] ) for i in range ( 3 ) : diff_list_y . append ( [ c [ 0 ] [ i ] - c [ 1 ] [ i ] , c [ 1 ] [ i ] - c [ 2 ] [ i ] ] ) if diff_list_x [ 0 ] == diff_list_x [ 1 ] == diff_list_x [ 2 ] and diff_list_y [ 0 ] == diff_list_y [ 1 ] == diff_list_y [ 2 ] : print " Yes " else : print " No "
tab = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = tab [ 0 ] [ 0 ] - a [ 0 ] a [ 1 ] = tab [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = tab [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = tab [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = tab [ 0 ] [ 2 ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if tab [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : continue break else : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a2 , a3 = [ ] , [ ] for i in range ( 3 ) : a2 . append ( C [ 0 ] [ i ] - C [ 1 ] [ i ] ) a3 . append ( C [ 0 ] [ i ] - C [ 2 ] [ i ] ) if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a_1 in range ( min ( c [ 0 ] ) , max ( c [ 0 ] ) + 1 ) : for a_2 in range ( min ( c [ 1 ] ) , max ( c [ 1 ] ) + 1 ) : for a_3 in range ( min ( c [ 2 ] ) , max ( c [ 2 ] ) + 1 ) : b_1 , b_2 , b_3 = map ( lambda x : x - a_1 , c [ 0 ] ) if all ( [ a_2 + b_1 == c [ 1 ] [ 0 ] , a_2 + b_2 == c [ 1 ] [ 1 ] , a_2 + b_3 == c [ 1 ] [ 2 ] , a_3 + b_1 == c [ 2 ] [ 0 ] , a_3 + b_2 == c [ 2 ] [ 1 ] , a_3 + b_3 == c [ 2 ] [ 2 ] ] ) : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
import itertools def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i , j , k in itertools . product ( range ( grid [ 0 ] [ 0 ] + 1 ) , range ( grid [ 1 ] [ 1 ] + 1 ) , range ( grid [ 2 ] [ 2 ] + 1 ) ) : a = [ i , j , k ] b = [ grid [ idx ] [ idx ] - v for idx , v in enumerate ( a ) ] if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : next_i = ( i + 1 ) % 3 d = [ c [ i ] [ j ] - c [ next_i ] [ j ] for j in range ( 3 ) ] if len ( set ( d ) ) > 1 : print ( ' No ' ) return for j in range ( 3 ) : next_j = ( j + 1 ) % 3 d = [ c [ i ] [ j ] - c [ i ] [ next_j ] for i in range ( 3 ) ] if len ( set ( d ) ) > 1 : print ( ' No ' ) return print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 B = np . array ( [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ) if len ( set ( np . array ( c [ 1 ] ) - B ) ) == 1 and len ( set ( np . array ( c [ 2 ] ) - B ) ) == 1 : print ( " Yes " ) else : print ( " No " )
* l , = map ( int , open ( 0 ) . read ( ) . split ( ) ) print ( " YNeos " [ 4 != sum ( sum ( l [ j ] - l [ 0 ] + l [ i ] == l [ i + j ] for i in [ 1 , 2 ] ) for j in [ 3 , 6 ] ) : : 2 ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - i b2 = c [ 1 ] [ 0 ] - i b3 = c [ 2 ] [ 0 ] - i if j + b1 != c [ 0 ] [ 1 ] : continue elif j + b2 != c [ 1 ] [ 1 ] : continue elif j + b3 != c [ 2 ] [ 1 ] : continue elif k + b1 != c [ 0 ] [ 2 ] : continue elif k + b2 != c [ 1 ] [ 2 ] : continue elif k + b3 != c [ 2 ] [ 2 ] : continue ans = True if ans : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] and C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : pass else : flag = False for i in range ( 2 ) : if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] and C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : b1 , b2 , b3 = [ x - i for x in c [ 0 ] ] if [ b1 + j , b2 + j , b3 + j ] == c [ 1 ] and [ b1 + k , b2 + k , b3 + k ] == c [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
import sys c = [ ] for _ in range ( 3 ) : c += [ list ( map ( int , input ( ) . split ( ) ) ) ] a = [ 0 , - 1 , - 1 ] b = c [ 0 ] for l , m in enumerate ( c [ 1 : ] ) : for j , k in enumerate ( m ) : if j == 0 : a [ l + 1 ] = k - b [ j ] else : if k != a [ l + 1 ] + b [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
s = [ ] ; for i in range ( 3 ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) sum = 0 for i in range ( 3 ) : for j in range ( 3 ) : sum += s [ i ] [ j ] c1 = s [ 0 ] [ 0 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 2 ] c2 = s [ 0 ] [ 2 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 0 ] print ( ' Yes ' if sum == c1 * 3 and sum == c2 * 3 else ' No ' )
c = [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ; c [ 0 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; c [ 1 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; c [ 2 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; ans = ' true ' ; for i in range ( 1 , 3 ) : hdiff = c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] ; for j in range ( 1 , 3 ) : if c [ j ] [ i ] - c [ j ] [ i - 1 ] != hdiff : ans = ' false ' ; break ; for i in range ( 1 , 3 ) : vdiff = c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] ; for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != vdiff : ans = ' false ' ; break ; if ( ans == ' true ' ) : print ( ' Yes ' ) ; else : print ( ' No ' ) ;
P = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c_11 = P [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : P [ i ] [ j ] -= c_11 A_1 = 0 A_2 = P [ 1 ] [ 0 ] A_3 = P [ 2 ] [ 0 ] B_1 = 0 B_2 = P [ 0 ] [ 1 ] B_3 = P [ 0 ] [ 2 ] Flag = " Yes " if not A_2 + B_2 == P [ 1 ] [ 1 ] : Flag = " No " if not A_2 + B_3 == P [ 1 ] [ 2 ] : Flag = " No " if not A_3 + B_2 == P [ 2 ] [ 1 ] : Flag = " No " if not A_3 + B_3 == P [ 2 ] [ 2 ] : Flag = " No " print ( Flag )
import sys from math import sqrt from collections import Counter input = sys . stdin . readline def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( MI ( ) ) inf = float ( " inf " ) mod = 10 ** 9 + 7 def main ( ) : c1 = LI ( ) c2 = LI ( ) c3 = LI ( ) if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : if c2 [ 1 ] - c2 [ 2 ] == c2 [ 1 ] - c2 [ 2 ] == c3 [ 1 ] - c3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " ) pass if __name__ == " __main__ " : main ( )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if a [ i ] [ j ] - a [ i ] [ j + 1 ] == a [ i + 1 ] [ j ] - a [ i + 1 ] [ j + 1 ] : continue else : print ( " No " ) ; exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = True break if flag : print ( ' No ' ) else : print ( ' Yes ' )
ar1 = list ( map ( int , input ( ) . split ( ) ) ) ar2 = list ( map ( int , input ( ) . split ( ) ) ) ar3 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 100 ) : a1 = i b1 = ar1 [ 0 ] - a1 b2 = ar1 [ 1 ] - a1 b3 = ar1 [ 2 ] - a1 a2 = ar2 [ 0 ] - b1 a3 = ar3 [ 0 ] - b1 if a2 + b2 == ar2 [ 1 ] and a2 + b3 == ar2 [ 2 ] and a3 + b2 == ar3 [ 1 ] == ar3 [ 1 ] and a3 + b3 == ar3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( max ( C [ 0 ] ) + 1 ) : b1 = C [ 0 ] [ 0 ] - a1 for a2 in range ( max ( C [ 1 ] ) + 1 ) : b2 = C [ 1 ] [ 1 ] - a2 if a1 + b2 != C [ 0 ] [ 1 ] or a2 + b1 != C [ 1 ] [ 0 ] : continue for a3 in range ( max ( C [ 2 ] ) + 1 ) : b3 = C [ 2 ] [ 2 ] - a3 if a1 + b3 == C [ 0 ] [ 2 ] and a2 + b3 == C [ 1 ] [ 2 ] and a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) print ( " No " )
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
L = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] if L [ 0 ] [ 1 ] - L [ 0 ] [ 0 ] == L [ 1 ] [ 1 ] - L [ 1 ] [ 0 ] == L [ 2 ] [ 1 ] - L [ 2 ] [ 0 ] and L [ 0 ] [ 2 ] - L [ 0 ] [ 1 ] == L [ 1 ] [ 2 ] - L [ 1 ] [ 1 ] == L [ 2 ] [ 2 ] - L [ 2 ] [ 1 ] and L [ 1 ] [ 0 ] - L [ 0 ] [ 0 ] == L [ 1 ] [ 1 ] - L [ 0 ] [ 1 ] == L [ 1 ] [ 2 ] - L [ 0 ] [ 2 ] and L [ 2 ] [ 0 ] - L [ 1 ] [ 0 ] == L [ 2 ] [ 1 ] - L [ 1 ] [ 1 ] == L [ 2 ] [ 2 ] - L [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import sys from fractions import gcd import math from math import ceil , floor import collections from collections import Counter import itertools C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 2 ) : d = [ ] e = [ ] for j in range ( 3 ) : d . append ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) e . append ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) if len ( set ( d ) ) == 1 : a [ i + 1 ] = d [ 0 ] else : print ( ' No ' ) exit ( ) if len ( set ( e ) ) == 1 : b [ i + 1 ] = e [ 0 ] else : print ( ' No ' ) exit ( ) else : if min ( a ) < 0 : for i in range ( 3 ) : a [ i ] += abs ( min ( a ) ) if min ( b ) < 0 : for i in range ( 3 ) : b [ i ] + = abs ( min ( b ) ) cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if ( a [ i ] + b [ j ] ) <= 100 : cnt + = 1 if cnt == 9 : print ( ' Yes ' ) else : print ( ' No ' )
S = [ ] for _ in range ( 3 ) : s = list ( map ( int , input ( ) . split ( ) ) ) S . append ( s ) a = [ None , None , None ] b = [ None , None , None ] a [ 0 ] = 0 b [ 0 ] = S [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = S [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = S [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = S [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = S [ 2 ] [ 0 ] - b [ 0 ] yes = 1 for i in range ( 3 ) : for j in range ( 3 ) : if not S [ i ] [ j ] == a [ i ] + b [ j ] : yes = 0 break if yes : print ( " Yes " ) else : print ( " No " )
li1 = list ( map ( int , input ( ) . split ( ) ) ) li2 = list ( map ( int , input ( ) . split ( ) ) ) li3 = list ( map ( int , input ( ) . split ( ) ) ) dyoko1 = li1 [ 1 ] - li1 [ 0 ] dyoko2 = li1 [ 2 ] - li1 [ 1 ] dtate1 = li2 [ 0 ] - li1 [ 0 ] dtate2 = li3 [ 0 ] - li2 [ 0 ] if li2 [ 1 ] - li2 [ 0 ] != dyoko1 or li3 [ 1 ] - li3 [ 0 ] != dyoko1 : print ( " No " ) exit ( ) elif li2 [ 2 ] - li2 [ 1 ] != dyoko2 or li3 [ 2 ] - li3 [ 1 ] != dyoko2 : print ( " No " ) exit ( ) elif li2 [ 1 ] - li1 [ 1 ] != dtate1 or li2 [ 2 ] - li1 [ 2 ] != dtate1 : print ( " No " ) exit ( ) elif li3 [ 1 ] - li2 [ 1 ] != dtate2 or li3 [ 2 ] - li2 [ 2 ] != dtate2 : print ( " No " ) exit ( ) print ( " Yes " )
def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) r1max = max ( [ c11 , c12 , c13 ] ) r2max = max ( [ c21 , c22 , c23 ] ) r3max = max ( [ c31 , c32 , c33 ] ) c1max = max ( [ c11 , c21 , c31 ] ) c2max = max ( [ c12 , c22 , c32 ] ) c3max = max ( [ c13 , c23 , c33 ] ) for a1 in range ( 0 , r1max + 1 ) : for a2 in range ( 0 , r2max + 1 ) : for a3 in range ( 0 , r3max + 1 ) : m = max ( [ a1 , a2 , a3 ] ) for b1 in range ( 0 , c1max - m + 1 ) : if a1 + b1 == c11 and a2 + b1 == c21 and a3 + b1 == c31 : for b2 in range ( 0 , c2max - m + 1 ) : if a1 + b2 == c12 and a2 + b2 == c22 and a3 + b2 == c32 : for b3 in range ( 0 , c3max - m + 1 ) : if a1 + b3 == c13 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) return print ( ' No ' ) return if __name__ == ' __main__ ' : main ( )
C = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) if ( ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) and ( C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] ) ) : print ( " Yes " ) else : print ( " No " )
if __name__ == " __main__ " : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 , 0 , 0 ] b = [ c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] ] a [ 1 ] = c2 [ 1 ] - b [ 1 ] a [ 2 ] = c3 [ 1 ] - b [ 1 ] flg = True for i in range ( 3 ) : for j in range ( 3 ) : flg = flg & ( a [ i ] + b [ j ] == c [ i ] [ j ] ) if flg : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a = 0 if c13 - c12 == c23 - c22 == c33 - c32 : if c12 - c11 == c22 - c21 == c32 - c31 : if c33 - c23 == c32 - c22 == c31 - c21 : if c23 - c13 == c22 - c12 == c21 - c11 : print ( " Yes " ) a = 1 if a == 0 : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = max ( c [ 0 ] ) for i in range ( a + 1 ) : a1 = i b = [ 0 , 0 , 0 ] a = [ 0 , 0 , 0 ] cnt = 0 for j in range ( 3 ) : for k in range ( 3 ) : if j == 0 : b [ k ] = c [ j ] [ k ] - a1 elif j == 2 or j == 1 : a [ k ] = c [ j ] [ k ] - b [ k ] if ( j == 1 or j == 2 ) and k == 2 : if len ( set ( a ) ) == 1 and a [ 0 ] >= 0 : cnt + = 1 print ( ' Yes ' if cnt == 2 else ' No ' )
lst = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = ' No ' if ( lst [ 1 ] [ 0 ] - lst [ 0 ] [ 0 ] + lst [ 0 ] [ 1 ] == lst [ 1 ] [ 1 ] and lst [ 1 ] [ 2 ] - lst [ 0 ] [ 2 ] + lst [ 0 ] [ 1 ] == lst [ 1 ] [ 1 ] and lst [ 1 ] [ 0 ] - lst [ 2 ] [ 0 ] + lst [ 2 ] [ 1 ] == lst [ 1 ] [ 1 ] and lst [ 1 ] [ 2 ] - lst [ 2 ] [ 2 ] + lst [ 2 ] [ 1 ] == lst [ 1 ] [ 1 ] ) : ans = ' Yes ' print ( ans )
f = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a , b = [ 0 ] , f [ 0 ] a . append ( f [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( f [ 2 ] [ 0 ] - b [ 0 ] ) flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != f [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
import math import numpy as np from fractions import gcd import collections C = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] C = np . array ( C ) cross1 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] cross2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] if ( cross1 == cross2 and np . sum ( C ) / 6 == cross1 / 2 ) : print ( ' Yes ' ) else : print ( ' No ' )
c0 = list ( map ( int , input ( ) . split ( ) ) ) c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c0 , c1 , c2 ] judge = 0 if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : judge + = 1 if c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : judge + = 1 if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : judge + = 1 if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : judge + = 1 if judge == 4 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : t = list ( map ( int , input ( ) . split ( ) ) ) c . append ( t ) for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ 0 ] [ 0 ] == c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == c [ i ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for k in range ( 3 ) ] tC = [ list ( k ) for k in zip ( * C ) ] for i in range ( 2 ) : p = [ C [ i ] [ k ] - C [ i + 1 ] [ k ] for k in range ( 3 ) ] tp = [ tC [ i ] [ k ] - tC [ i + 1 ] [ k ] for k in range ( 3 ) ] if p [ 0 ] == p [ 1 ] == p [ 2 ] and tp [ 0 ] == tp [ 1 ] == tp [ 2 ] : continue else : print ( " No " ) exit ( ) else : print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A1 = [ C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] , C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] , C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ] A1 . sort ( ) A2 = [ C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] , C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] , C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ] A2 . sort ( ) B1 = [ C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] , C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] , C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ] B1 . sort ( ) B2 = [ C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] , C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] , C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ] B2 . sort ( ) if A1 [ 0 ] == A1 [ 2 ] and A2 [ 0 ] == A2 [ 2 ] and B1 [ 0 ] == B1 [ 2 ] and B2 [ 0 ] == B2 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != c [ i + 1 ] [ 0 ] - c [ i + 1 ] [ 1 ] : print ( ' No ' ) break if c [ i ] [ 1 ] - c [ i ] [ 2 ] != c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 2 ] : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 0 ] : print ( ' No ' ) break else : print ( ' Yes ' )
import sys from functools import reduce import copy import math from pprint import pprint sys . setrecursionlimit ( 4100000 ) def inputs ( num_of_input ) : ins = [ input ( ) for i in range ( num_of_input ) ] return ins def int_inputs ( num_of_input ) : ins = [ int ( input ( ) ) for i in range ( num_of_input ) ] return ins def solve ( inputs ) : grid = list ( map ( string_to_int , inputs ) ) for x in range ( 101 ) : a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] a [ 0 ] = x for j in range ( 3 ) : b [ j ] = grid [ 0 ] [ j ] - a [ 0 ] a [ 1 ] = grid [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = grid [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if grid [ i ] [ j ] != a [ i ] + b [ j ] : return ' No ' return ' Yes ' def string_to_int ( string ) : return list ( map ( int , string . split ( ) ) ) if __name__ == " __main__ " : ret = solve ( inputs ( 3 ) ) print ( ret )
C = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) cnt = 0 if C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] : cnt + = 1 if C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : cnt + = 1 if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] : cnt + = 1 if cnt == 6 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ i for i in map ( int , input ( ) . split ( ) ) ] for j in range ( 3 ) ] for i in range ( 101 ) : para = [ 0 ] * 6 para [ 0 ] = i para [ 3 ] = c [ 0 ] [ 0 ] - para [ 0 ] para [ 4 ] = c [ 0 ] [ 1 ] - para [ 0 ] para [ 5 ] = c [ 0 ] [ 2 ] - para [ 0 ] para [ 1 ] = c [ 1 ] [ 0 ] - para [ 3 ] para [ 2 ] = c [ 2 ] [ 0 ] - para [ 3 ] if c [ 1 ] [ 1 ] == para [ 1 ] + para [ 4 ] and c [ 1 ] [ 2 ] == para [ 1 ] + para [ 5 ] : if c [ 2 ] [ 1 ] == para [ 2 ] + para [ 4 ] and c [ 2 ] [ 2 ] == para [ 2 ] + para [ 5 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * 3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a , b , c = [ int ( v ) for v in input ( ) . split ( ) ] d , e , f = [ int ( v ) for v in input ( ) . split ( ) ] g , h , i = [ int ( v ) for v in input ( ) . split ( ) ] if a + e + i == d + h + c and a + e + i == b + f + g : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c_i = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_i ) h01 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] h12 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] v01 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] v12 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] buf = 1 for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != h01 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != h12 or c [ 1 ] [ i ] - c [ 0 ] [ i ] != v01 or c [ 2 ] [ i ] - c [ 1 ] [ i ] != v12 : buf = 0 break if buf == 1 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] b = C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] if a and b : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] dx2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] dy1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] dy2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] ans = " Yes " for i in range ( 3 ) : if C [ 1 ] [ i ] - C [ 0 ] [ i ] != dx1 or C [ 2 ] [ i ] - C [ 1 ] [ i ] != dx2 : ans = " No " break if C [ i ] [ 1 ] - C [ i ] [ 0 ] != dy1 or C [ i ] [ 2 ] - C [ i ] [ 1 ] != dy2 : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ians = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ] jans = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] ok = True for i in range ( 1 , 3 ) : for j in range ( 3 ) : if ians [ j ] != c [ i ] [ j ] - c [ i ] [ 0 ] : ok = False for i in range ( 1 , 3 ) : for j in range ( 3 ) : if jans [ j ] != c [ j ] [ i ] - c [ 0 ] [ i ] : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np A = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] col_0 = [ A [ 0 ] [ 1 ] - A [ 0 ] [ 0 ] , A [ 0 ] [ 2 ] - A [ 0 ] [ 0 ] ] col_1 = [ A [ 1 ] [ 1 ] - A [ 1 ] [ 0 ] , A [ 1 ] [ 2 ] - A [ 1 ] [ 0 ] ] col_2 = [ A [ 2 ] [ 1 ] - A [ 2 ] [ 0 ] , A [ 2 ] [ 2 ] - A [ 2 ] [ 0 ] ] bool = ( col_0 == col_1 ) and ( col_0 == col_2 ) if bool == True : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np import scipy C = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) : for j in range ( 3 ) : if C [ 0 ] [ 0 ] - C [ 0 ] [ j ] != C [ i ] [ 0 ] - C [ i ] [ j ] : print ( " No " ) exit ( ) if C [ 0 ] [ 0 ] - C [ i ] [ 0 ] != C [ 0 ] [ j ] - C [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False memo = [ ] for i in range ( 3 ) : i , j , k = arr [ 0 ] [ i ] , arr [ 1 ] [ i ] , arr [ 2 ] [ i ] memo += [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2_1 = c [ 1 ] [ 0 ] - b1 a2_2 = c [ 1 ] [ 1 ] - b2 a2_3 = c [ 1 ] [ 2 ] - b3 a3_1 = c [ 2 ] [ 0 ] - b1 a3_2 = c [ 2 ] [ 1 ] - b2 a3_3 = c [ 2 ] [ 2 ] - b3 if a2_1 == a2_2 == a2_3 and a3_1 == a3_2 == a3_3 : print ( ' Yes ' ) break else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = C [ 0 ] [ i ] - 0 a = [ 0 ] * 3 for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if ( C [ i ] [ j ] != a [ i ] + b [ j ] ) : ans = " No " print ( ans )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } List < String > list2 = new ArrayList < String > ( new HashSet < > ( list ) ) ; if ( list2 . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S [ ] = new String [ N ] ; String count = " Three " ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; if ( S [ i ] . equals ( " Y " ) ) count = " Four " ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n + 1 ] ; p [ 0 ] = Integer . MAX_VALUE ; int min [ ] = new int [ n + 1 ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( min [ i - 1 ] >= p [ i ] ) { cnt ++ ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , s = sc . nextInt ( ) , t = 0 ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { m . put ( i + j , m . get ( i + j ) == null ? 1 : m . get ( i + j ) + 1 ) ; } } for ( int k = 0 ; k <= K ; k ++ ) if ( m . containsKey ( s - k ) ) t += m . get ( s - k ) ; System . out . println ( t ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int k , s , x , y , z , n ; n = 0 ; Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { n ++ ; } } } System . out . println ( n ) ; sc . close ( ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int mini = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { mini = p [ i ] ; } else { mini = Math . min ( mini , p [ i ] ) ; } if ( mini < p [ i ] ) { count ++ ; } } System . out . println ( n - count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { int a = i + j + k ; if ( a == S ) { if ( i == j && j == k ) { count ++ ; } else if ( i != j && j != k && k != i ) { count += 6 ; } else { count += 3 ; } } } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( X + Y > S ) break ; if ( S - X - Y <= K ) count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 , min = n ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } if ( Arrays . asList ( s ) . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } boolean bool = true ; if ( ! ( map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 1 ] [ 0 ] - map [ 1 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 1 ] [ 1 ] - map [ 1 ] [ 2 ] && map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 2 ] [ 0 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 2 ] [ 1 ] - map [ 2 ] [ 2 ] ) ) bool = false ; if ( ! ( map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 1 ] - map [ 1 ] [ 1 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 1 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 2 ] - map [ 1 ] [ 2 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 2 ] - map [ 2 ] [ 2 ] ) ) bool = false ; System . out . println ( bool ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i != a + 1 ; i ++ ) { for ( int j = 0 ; j != a + 1 ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; String [ ] str = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( str [ 0 ] ) ; int s = Integer . parseInt ( str [ 1 ] ) ; int cnt = 0 ; int x = 0 ; int y = 0 ; int z = 0 ; for ( x = k ; x > - 1 ; -- x ) { int rest = s - x ; if ( rest > 2 * k || rest < 0 ) continue ; if ( rest > k ) { cnt += - ( rest - 2 * k ) + 1 ; } else { cnt += rest + 1 ; } } sb . append ( cnt ) ; System . out . println ( sb ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( min >= a ) { ans ++ ; min = a ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( ( z <= k ) && ( z >= 0 ) ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { TakashiInfo solver = new TakashiInfo ( ) ; solver . readInput ( ) ; solver . solve ( ) ; solver . writeOutput ( ) ; } static class TakashiInfo { private int map [ ] [ ] = new int [ 3 ] [ 3 ] ; private Scanner scanner ; private String output ; public TakashiInfo ( ) { scanner = new Scanner ( System . in ) ; } public void readInput ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = Integer . parseInt ( scanner . next ( ) ) ; } } } public void solve ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { map [ i ] [ j ] -= map [ i ] [ 0 ] ; } } output = ( map [ 0 ] [ 1 ] == map [ 1 ] [ 1 ] && map [ 1 ] [ 1 ] == map [ 2 ] [ 1 ] && map [ 0 ] [ 2 ] == map [ 1 ] [ 2 ] && map [ 1 ] [ 2 ] == map [ 2 ] [ 2 ] ) ? " Yes " : " No " ; } public void writeOutput ( ) { System . out . println ( output ) ; } } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . nextLine ( ) ) ; String line = sc . nextLine ( ) ; Set < String > sList = new HashSet < > ( Arrays . asList ( line . split ( " " ) ) ) ; if ( sList . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = c [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; long sum = 0 ; int check = s - 2 * k ; int initial = ( int ) Math . max ( 0 , check ) ; for ( int i = initial ; i <= k ; i ++ ) { int current = s - i ; int start = 0 ; int end = k ; if ( current > 2 * k ) { continue ; } else if ( current > k ) { start = current - k ; sum += end - start + 1 ; } else if ( current >= 0 ) { end = current ; sum += end - start + 1 ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , ans = 1 ; int a [ ] ; a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int mmin = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < mmin ) ans ++ ; mmin = Math . min ( mmin , a [ i ] ) ; } System . out . printf ( " %d \n " , ans ) ; in . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) flag = true ; if ( flag ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , 1 ) ; String s = r . readLine ( ) ; s = r . readLine ( ) ; String sl [ ] = s . split ( " " ) ; System . out . println ( s . contains ( " Y " ) ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String hina = " Three " ; String check ; for ( int i = 0 ; i < n ; i ++ ) { check = sc . next ( ) ; if ( check . equals ( " Y " ) ) { hina = " Four " ; } } System . out . println ( hina ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int sub = 0 ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i != S ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j != S ) { sub = S - ( i + j ) ; if ( sub >= 0 && sub <= K ) { count ++ ; } } else if ( i + j == S ) { count ++ ; break ; } } } else if ( i == S ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] C1 = new int [ 3 ] ; int [ ] C2 = new int [ 3 ] ; int [ ] C3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { C1 [ i ] = sc . nextInt ( ) ; C2 [ i ] = sc . nextInt ( ) ; C3 [ i ] = sc . nextInt ( ) ; } if ( sol ( C1 ) != sol ( C2 ) || sol ( C2 ) != sol ( C3 ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } private static int sol ( int [ ] C ) { Arrays . sort ( C ) ; int sum = 0 ; for ( int n : C ) { sum += n ; } return sum - C [ 0 ] * C . length ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = stdIn . nextInt ( ) ; } stdIn . close ( ) ; int count = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int K2 = K * 2 ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { if ( K2 + X >= S ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int sxy = S - X - Y ; if ( 0 <= sxy && sxy <= K ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int sum = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int min = P [ 0 ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( min >= P [ i + 1 ] ) { sum ++ ; min = P [ i + 1 ] ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && 0 <= s - x - y ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int max = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( max > p ) { ans ++ ; max = p ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner stdin = new Scanner ( System . in ) ; int inN = stdin . nextInt ( ) ; String result = " Three " ; for ( int i = 0 ; i < inN ; i ++ ) { if ( stdin . next ( ) . equals ( " Y " ) ) { result = " Four " ; break ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; long [ ] map = new long [ 100002 ] ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 || c [ 1 ] [ 1 ] - b2 != c [ 1 ] [ 2 ] - b3 ) { continue ; } if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 || c [ 2 ] [ 1 ] - b2 != c [ 2 ] [ 2 ] - b3 ) { continue ; } System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y <= K && S - x - y >= 0 ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= a [ i ] ) { min = a [ i ] ; count ++ ; } else { } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int n = ni ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = ni ( ) ; } int max = 1 ; long cnt = a [ 0 ] - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] == max + 1 ) { ++ max ; continue ; } long v = ( a [ i ] - 1 ) / ( max + 1 ) ; cnt += v ; } System . out . println ( cnt ) ; } int ni ( ) { return Integer . parseInt ( sc . next ( ) ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . util . function . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; sc . close ( ) ; int min = P [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min < P [ i ] ) continue ; min = P [ i ] ; ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; boolean ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( a + x == d && b + x == e && c + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; return ; } ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( g + x == d && h + x == e && i + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - ( i + j ) ; if ( 0 <= tmp && tmp <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static int [ ] a ; static boolean res ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; dfs ( " " ) ; System . out . println ( res ? " YES " : " NO " ) ; } public static void dfs ( String current ) { if ( res ) { return ; } if ( current . length ( ) == 4 ) { if ( current . equals ( " 1974 " ) ) { res = true ; } return ; } dfs ( current + a [ 0 ] ) ; dfs ( current + a [ 1 ] ) ; dfs ( current + a [ 2 ] ) ; dfs ( current + a [ 3 ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int c = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y == s ) { c ++ ; } else if ( s - ( x + y ) <= k && x + y < s ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str0 = sc . nextLine ( ) ; String [ ] array0 = str0 . split ( " " ) ; int K = Integer . parseInt ( array0 [ 0 ] ) ; int S = Integer . parseInt ( array0 [ 1 ] ) ; int result = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - x - y && S - x - y <= K ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean flag = false ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; flag = true ; for ( int m = 0 ; m < 3 ; m ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ m ] [ k ] != ( a [ m ] + b [ k ] ) ) flag = false ; } } if ( flag ) break ; } System . out . println ( flag ? " Yes " : " No " ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) throws IOException { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { List < String > vals = br . lines ( ) . limit ( 3 ) . collect ( Collectors . toList ( ) ) ; List < List < Integer > > grid = new ArrayList < > ( ) ; vals . stream ( ) . forEachOrdered ( v -> { grid . add ( splitBySpace ( v ) . stream ( ) . map ( s -> Integer . valueOf ( s ) ) . collect ( Collectors . toList ( ) ) ) ; } ) ; for ( int i = 0 ; i < grid . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < grid . size ( ) ; j ++ ) { int sub = grid . get ( i ) . get ( 0 ) - grid . get ( j ) . get ( 0 ) ; for ( int k = 1 ; k < grid . get ( i ) . size ( ) ; k ++ ) { if ( sub != grid . get ( i ) . get ( k ) - grid . get ( j ) . get ( k ) ) { System . out . println ( " No " ) ; return ; } } } } System . out . println ( " Yes " ) ; } } private static List < String > splitBySpace ( String target ) { return Arrays . asList ( target . split ( " \\ s " ) ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 < 201 ; a1 ++ ) { int b1 = c11 - a1 ; int b2 = c12 - a1 ; int b3 = c13 - a1 ; int a2 = c23 - b3 ; int a3 = c33 - b3 ; if ( a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; String ans = " No " ; LOOP : for ( a [ 0 ] = 0 ; a [ 0 ] <= 100 ; a [ 0 ] ++ ) { b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; if ( b [ 0 ] < 0 || b [ 1 ] < 0 || b [ 2 ] < 0 ) { break ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { continue LOOP ; } } } ans = " Yes " ; break ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i > S ) { break ; } for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j > S ) { break ; } if ( S - i - j >= 0 && S - i - j <= K ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scanner . nextInt ( ) ; } } int temp2 = map [ 0 ] [ 1 ] - map [ 0 ] [ 0 ] ; int temp3 = map [ 0 ] [ 2 ] - map [ 0 ] [ 0 ] ; if ( map [ 1 ] [ 1 ] - map [ 1 ] [ 0 ] == temp2 && map [ 2 ] [ 1 ] - map [ 2 ] [ 0 ] == temp2 && map [ 1 ] [ 2 ] - map [ 1 ] [ 0 ] == temp3 && map [ 2 ] [ 2 ] - map [ 2 ] [ 0 ] == temp3 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; int count = 0 ; int min = 99999999 ; while ( n -- > 0 ) { int num = sc . nextInt ( ) ; if ( num < min ) { count ++ ; min = num ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } out ( count ) ; } static long gcd ( long a , long b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static int gcd ( int a , int b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static void out ( String info ) { System . out . println ( info ) ; } static void out ( int info ) { System . out . println ( info ) ; } static void out ( double info ) { System . out . println ( info ) ; } static void out ( long info ) { System . out . println ( info ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] strlist = str . split ( " " ) ; int k = Integer . parseInt ( strlist [ 0 ] ) ; int s = Integer . parseInt ( strlist [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count = count + 1 ; continue ; } } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int ans = 0 ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String arare [ ] = new String [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) { arare [ i ] = sc . next ( ) ; if ( arare [ i ] . equals ( " Y " ) ) { System . out . println ( " Four " ) ; break ; } else if ( i == n - 1 ) { System . out . println ( " Three " ) ; break ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j <= k && s - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; int x = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { x = 1 ; } } } System . out . println ( x == 0 ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int t = s - i - j ; if ( t >= 0 && t <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) <= K && 0 <= ( S - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; boolean yellow = false ; int N = s . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( s . next ( ) . charAt ( 0 ) == 'Y' ) yellow = true ; } if ( yellow ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int N = gi ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = gs ( ) ; if ( s . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } public static long d ( long n ) { String a = String . valueOf ( n ) ; return ( long ) a . length ( ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { StringTokenizer st ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String temp = br . readLine ( ) ; int n = Integer . parseInt ( temp ) ; temp = br . readLine ( ) ; st = new StringTokenizer ( temp , " " ) ; int [ ] a = new int [ n ] ; int j = 0 ; int min = n + 1 ; int ans = 0 ; while ( st . hasMoreTokens ( ) ) { a [ j ] = Integer . parseInt ( st . nextToken ( ) ) ; if ( a [ j ] < min ) { min = a [ j ] ; ans ++ ; } j ++ ; } br . close ( ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int num = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) num ++ ; } } System . out . println ( num ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; list . add ( a ) ; list . add ( b ) ; list . add ( c ) ; list . add ( d ) ; Collections . sort ( list ) ; if ( list . get ( 0 ) == 1 && list . get ( 1 ) == 4 && list . get ( 2 ) == 7 && list . get ( 3 ) == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { @ SuppressWarnings ( " resource " ) public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( scanner . next ( ) ) ; } if ( set . size ( ) == 3 ) System . out . println ( " Three " ) ; else System . out . println ( " Four " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s [ ] = new String [ n ] ; int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { flag = 1 ; } } if ( flag == 1 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) { count += 1 ; } } } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int next = scan . nextInt ( ) ; if ( min > next ) { min = next ; ans ++ ; } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . Scanner ; public class Main { int count = 0 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y >= 0 && S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; String s ; int arare [ ] = new int [ 4 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; switch ( s ) { case " P " : arare [ 0 ] = 1 ; break ; case " W " : arare [ 1 ] = 1 ; break ; case " G " : arare [ 2 ] = 1 ; break ; case " Y " : arare [ 3 ] = 1 ; break ; } } for ( int i = 0 ; i < 4 ; i ++ ) ans += arare [ i ] ; System . out . println ( ans == 3 ? " Three " : " Four " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - ( i + j ) >= 0 && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = N + 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 , min = n , p ; i < n ; i ++ ) { p = sc . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int min = 200001 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int a = scan . nextInt ( ) ; if ( a < min ) { min = a ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ok = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < N ; j ++ ) { ok = Math . min ( ok , P [ j ] ) ; if ( ok == P [ j ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int k = s . nextInt ( ) ; int l = s . nextInt ( ) ; int i = 0 ; int j = 0 ; int m = 15 ; int count = 0 ; int ans = 0 ; int q = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { q = i + j ; m = l - q ; if ( m >= 0 && 0 <= i && i <= k && j <= k && m <= k ) { count ++ ; } else { } } j = 0 ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scan . nextInt ( ) ; } } int min = C [ 0 ] [ 0 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( C [ 0 ] [ i ] < min ) min = C [ 0 ] [ i ] ; } int check ; for ( int a1 = 0 ; a1 <= min ; a1 ++ ) { int c11 = C [ 0 ] [ 0 ] - a1 ; int a2 = C [ 1 ] [ 0 ] - c11 ; int a3 = C [ 2 ] [ 0 ] - c11 ; boolean flag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { check = C [ 0 ] [ i ] - a1 ; if ( C [ 1 ] [ i ] - a2 != check || C [ 2 ] [ i ] - a3 != check ) { flag = false ; break ; } } if ( flag == true ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String args [ ] ) throws IOException { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { int N = Integer . parseInt ( br . readLine ( ) ) ; String [ ] permutation = br . readLine ( ) . split ( " " ) ; int min = 0 ; int result = 0 ; int tmp = 0 ; for ( int i = 0 ; i < N ; i ++ ) { tmp = Integer . parseInt ( permutation [ i ] ) ; if ( i == 0 ) { min = tmp ; result ++ ; } else { if ( min >= tmp ) { result ++ ; min = tmp ; } else { continue ; } } } System . out . println ( result ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . Arrays ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int [ ] unko = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { unko [ i ] = sc . nextInt ( ) ; } Arrays . sort ( unko ) ; if ( unko [ 0 ] == 1 && unko [ 1 ] == 4 && unko [ 2 ] == 7 && unko [ 3 ] == 9 ) { pl ( " YES " ) ; } else { pl ( " NO " ) ; } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void pl ( ) { System . out . println ( ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Stack < Integer > st = new Stack < > ( ) ; int min = 200001 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { min = p ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String line1 = sc . nextLine ( ) ; String line2 = sc . nextLine ( ) ; String [ ] array = line2 . split ( " " ) ; int n = Integer . parseInt ( line1 ) ; int min = Integer . parseInt ( array [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int buf = Integer . parseInt ( array [ i ] ) ; if ( buf < min ) { min = buf ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int l = s - i - j ; if ( l >= 0 && l <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int retu = scan . nextInt ( ) ; Integer [ ] jun = new Integer [ retu ] ; int count = 0 ; for ( int i = 0 ; i < retu ; i ++ ) { jun [ i ] = scan . nextInt ( ) ; } int re = 1 ; int min = jun [ 0 ] ; for ( int i = 0 ; i < retu ; i ++ ) { if ( min >= jun [ i ] ) { count ++ ; } min = Math . min ( min , jun [ i ] ) ; } System . out . println ( count ) ; scan . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int answer = sc . nextInt ( ) ; int count = 0 ; for ( int a = 0 ; a <= max ; a ++ ) { for ( int b = 0 ; b <= max ; b ++ ) { if ( answer - a - b <= max && answer - a - b >= 0 ) count ++ ; } } System . out . println ( count ) ; ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { int n ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = sc . nextInt ( ) ; } long max_now = arr [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( arr [ i ] <= max_now ) { ans ++ ; } max_now = Math . min ( max_now , arr [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int last = s - i - j ; if ( last >= 0 && last <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc1 = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc1 . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 && n [ 1 ] == 4 && n [ 2 ] == 7 && n [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } sc1 . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } scan . close ( ) ; int cnt = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > p [ i ] ) { cnt ++ ; min = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; List < Integer > compareList = new ArrayList < Integer > ( ) ; compareList . add ( 1 ) ; compareList . add ( 9 ) ; compareList . add ( 7 ) ; compareList . add ( 4 ) ; list . add ( a ) ; list . add ( b ) ; list . add ( c ) ; list . add ( d ) ; if ( list . containsAll ( compareList ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int max = Integer . parseInt ( s [ 0 ] ) ; int ans = Integer . parseInt ( s [ 1 ] ) ; int result = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int k = ans - ( i + j ) ; if ( 0 <= k && k <= max ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] m = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; m [ i ] = ( i == 0 ) ? p [ i ] : Math . min ( p [ i ] , m [ i - 1 ] ) ; if ( p [ i ] == m [ i ] ) ++ ans ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( sc . hasNext ( ) ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static final PrintStream out = System . out ; static final Scanner sc = new Scanner ( System . in ) ; static final long Mod = 1000_000_007L ; int N ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; System . exit ( 0 ) ; } void solve ( ) { N = nextInt ( ) ; int [ ] P = nextIntArray ( N ) ; int cnt = 1 , min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { cnt ++ ; min = P [ i ] ; } } out . println ( cnt ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { return sc . next ( ) ; } long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } long lcm ( long m , long n ) { return m * n / gcd ( m , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; double dMax = Double . MIN_VALUE ; double dMin = Double . MAX_VALUE ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) list . add ( sc . nextInt ( ) ) ; for ( int i = 0 ; i < n ; ++ i ) { int pi = list . get ( i ) ; if ( i == 0 ) { ++ count ; } else if ( pi <= min ) { ++ count ; } if ( min > pi ) min = pi ; } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] ab = new int [ 3 ] [ 3 ] ; ab [ 0 ] [ 0 ] = sc . nextInt ( ) ; ab [ 0 ] [ 1 ] = sc . nextInt ( ) ; ab [ 0 ] [ 2 ] = sc . nextInt ( ) ; ab [ 1 ] [ 0 ] = sc . nextInt ( ) ; ab [ 1 ] [ 1 ] = sc . nextInt ( ) ; ab [ 1 ] [ 2 ] = sc . nextInt ( ) ; ab [ 2 ] [ 0 ] = sc . nextInt ( ) ; ab [ 2 ] [ 1 ] = sc . nextInt ( ) ; ab [ 2 ] [ 2 ] = sc . nextInt ( ) ; if ( diff_check ( ab , 0 , 1 , true ) && diff_check ( ab , 0 , 2 , true ) && diff_check ( ab , 1 , 2 , true ) && diff_check ( ab , 0 , 1 , false ) && diff_check ( ab , 0 , 2 , false ) && diff_check ( ab , 1 , 2 , false ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private static boolean diff_check ( int [ ] [ ] ab , int i , int j , boolean b ) { int point ; if ( b ) { point = ab [ i ] [ 0 ] - ab [ j ] [ 0 ] ; if ( point != ab [ i ] [ 1 ] - ab [ j ] [ 1 ] ) return false ; if ( point != ab [ i ] [ 2 ] - ab [ j ] [ 2 ] ) return false ; } else { point = ab [ 0 ] [ i ] - ab [ 0 ] [ j ] ; if ( point != ab [ 1 ] [ i ] - ab [ 1 ] [ j ] ) return false ; if ( point != ab [ 2 ] [ i ] - ab [ 2 ] [ j ] ) return false ; } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; int z = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { z = s - ( i + j ) ; if ( 0 <= z && z <= k ) cnt ++ ; } } out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; Integer count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - ( i + j ) ; if ( 0 <= z && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; ArrayList < String > c = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; if ( ! c . contains ( S [ i ] ) ) { c . add ( S [ i ] ) ; } } if ( c . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } long ans = A [ 0 ] - 1 ; int max = 2 ; for ( int i = 1 ; i < N ; i ++ ) { if ( A [ i ] == max ) max ++ ; else if ( A [ i ] > max ) { ans += ( A [ i ] - 1 ) / max ; } } System . out . println ( ans ) ; } }
import java . util . LinkedHashSet ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] c = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . next ( ) . charAt ( 0 ) ; } LinkedHashSet < Character > lhs = new LinkedHashSet < Character > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { lhs . add ( c [ i ] ) ; } Object [ ] newc = lhs . toArray ( ) ; if ( newc . length == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Set < Character > set = new HashSet < Character > ( ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( sc . next ( ) . charAt ( 0 ) ) ; } sc . close ( ) ; if ( set . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int digit = sc . nextInt ( ) ; if ( min > digit ) { min = digit ; ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { map . put ( sc . next ( ) . charAt ( 0 ) , 0 ) ; } Object [ ] array = map . keySet ( ) . toArray ( ) ; if ( array . length == 4 ) System . out . println ( " Four " ) ; else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] ar ) { Scanner sc = new Scanner ( System . in ) ; int cnt = 0 ; int k = sc . nextInt ( ) , def = sc . nextInt ( ) ; int x = 0 , y = 0 , z = def ; while ( true ) { z = def - x ; y = 0 ; while ( true ) { if ( x <= k && y <= k && z <= k ) { ++ cnt ; } if ( z == 0 ) { break ; } -- z ; ++ y ; } ++ x ; if ( x > def ) { break ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && s - ( i + j ) >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; try { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! check_h ( c , i ) ) { System . out . println ( " No " ) ; return ; } } for ( int j = 0 ; j < 2 ; j ++ ) { if ( ! check_v ( c , j ) ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } finally { scanner . close ( ) ; } } private static boolean check_v ( int [ ] [ ] c , int j ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ i ] [ j + 1 ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] ) return false ; } return true ; } private static boolean check_h ( int [ ] [ ] c , int i ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ i + 1 ] [ j ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] ) return false ; } return true ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; int array [ ] = new int [ num ] ; int array_min [ ] = new int [ num ] ; int min = num + 1 ; for ( int i = 0 ; i < num ; i ++ ) { array [ i ] = sc . nextInt ( ) ; if ( min > array [ i ] ) { min = array [ i ] ; } array_min [ i ] = min ; } int count = 0 ; for ( int i = 0 ; i < num ; i ++ ) { if ( array_min [ i ] >= array [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; int [ ] P = nextIntArray1origin ( sc , N ) ; sc . close ( ) ; int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } @ SuppressWarnings ( " unused " ) private int [ ] nextIntArray1origin ( Scanner sc , int n ) { int [ ] result = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { result [ i ] = sc . nextInt ( ) ; } return result ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; boolean [ ] k = new boolean [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int n = sc . nextInt ( ) ; if ( n == 1 ) k [ 0 ] = true ; if ( n == 9 ) k [ 1 ] = true ; if ( n == 7 ) k [ 2 ] = true ; if ( n == 4 ) k [ 3 ] = true ; } boolean ans = true ; for ( int i = 0 ; i < 4 ; i ++ ) { ans &= k [ i ] ; } System . out . println ( ans ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { private static int N ; private static int [ ] P ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int tempMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= tempMin ) { ans ++ ; } tempMin = Math . min ( P [ i ] , tempMin ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] s = new String [ n ] ; boolean yellow = false ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { yellow = true ; break ; } } if ( yellow ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int min = 0 ; int count = 1 ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = sc . nextInt ( ) ; } min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean F = false ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 && ! F ; a1 ++ ) { for ( int a2 = 0 ; a2 <= 100 && ! F ; a2 ++ ) { for ( int a3 = 0 ; a3 <= 100 && ! F ; a3 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 , b2 = c [ 0 ] [ 1 ] - a1 , b3 = c [ 0 ] [ 2 ] - a1 ; boolean L2 , L3 ; L2 = ( c [ 1 ] [ 0 ] == a2 + b1 && c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) ; L3 = ( c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 2 ] [ 2 ] == a3 + b3 ) ; F = L2 && L3 ; } } } System . out . println ( F ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int ans = 1 ; a [ 0 ] = sc . nextInt ( ) ; int min = a [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] <= min ) { min = a [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { int x = 0 ; int y = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { int bX = grid [ j ] [ i ] - grid [ j ] [ ( ( i + 1 ) % 3 ) ] ; int bY = grid [ i ] [ j ] - grid [ ( ( i + 1 ) % 3 ) ] [ j ] ; if ( j == 0 ) { x = bX ; y = bY ; } else { b &= x == bX ; b &= y == bY ; } if ( ! b ) break ; } if ( ! b ) break ; } System . out . println ( b ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int X = 0 , Y = 0 , Z = 0 ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { X = i ; Y = j ; Z = S - X - Y ; int total = X + Y + Z ; if ( total == S && Z >= 0 && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] List = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { List [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = List [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = List [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( List [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( sc . next ( ) ) ; } System . out . println ( sb . toString ( ) . indexOf ( 'Y' ) >= 0 ? " Four " : " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; String yellow = " Y " ; String [ ] color = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { color [ i ] = scan . next ( ) ; if ( color [ i ] . contains ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int N = scn . nextInt ( ) ; int min = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int a = scn . nextInt ( ) ; if ( min >= a ) { min = a ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int minium = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= minium ) { minium = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static int k , s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; long count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { continue ; } for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Integer n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String color = sc . next ( ) ; if ( " Y " . equals ( color ) ) { System . out . println ( " Four " ) ; break ; } else if ( i == n - 1 ) { System . out . println ( " Three " ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; try { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { if ( a == s ) { ans ++ ; break ; } int bc = ( int ) Math . ceil ( ( double ) ( s - a ) / 2 ) ; if ( bc <= k ) { for ( int b = 0 ; b <= k ; b ++ ) { if ( s - a - b >= 0 && s - a - b <= k ) { ans ++ ; } } } } System . out . println ( ans ) ; } finally { sc . close ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ i ] [ 0 ] - c [ j ] [ 0 ] == c [ i ] [ 1 ] - c [ j ] [ 1 ] && c [ i ] [ 1 ] - c [ j ] [ 1 ] == c [ i ] [ 2 ] - c [ j ] [ 2 ] ) { } else { b = false ; break loop ; } } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ j ] == c [ 1 ] [ i ] - c [ 1 ] [ j ] && c [ 1 ] [ i ] - c [ 1 ] [ j ] == c [ 2 ] [ i ] - c [ 2 ] [ j ] ) { } else { b = false ; break loop ; } } } if ( b ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { static final int SIZE = 3 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ SIZE ] [ SIZE ] ; for ( int i = 0 ; i < SIZE ; ++ i ) { for ( int j = 0 ; j < SIZE ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( solve ( c ) ? " Yes " : " No " ) ; sc . close ( ) ; } static boolean solve ( int [ ] [ ] c ) { return IntStream . range ( 0 , SIZE ) . map ( i -> c [ i ] [ 1 ] - c [ i ] [ 0 ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( i -> c [ i ] [ 2 ] - c [ i ] [ 1 ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( j -> c [ 1 ] [ j ] - c [ 0 ] [ j ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( j -> c [ 2 ] [ j ] - c [ 1 ] [ j ] ) . distinct ( ) . count ( ) == 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int tmp = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( tmp > p [ i ] ) { tmp = p [ i ] ; count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int result = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { boolean isMacth = k >= s - ( x + y ) && s - ( x + y ) >= 0 ; if ( isMacth ) { result ++ ; } } } System . out . println ( result ) ; scanner . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , 1 ) ; String s ; String sl [ ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { sl = r . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sl [ j ] ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; boolean f = true ; for ( int i = 0 ; i < 2 ; i ++ ) { int z = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] - c [ i + 1 ] [ j ] != z ) { f = false ; } } } for ( int i = 0 ; i < 2 ; i ++ ) { int z = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != z ) { f = false ; } } } System . out . println ( f ? " Yes " : " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] map = new int [ 3 ] [ 3 ] ; int [ ] [ ] subMap = new int [ 3 ] [ 3 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { map [ i ] [ 0 ] = in . nextInt ( ) ; map [ i ] [ 1 ] = in . nextInt ( ) ; map [ i ] [ 2 ] = in . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { subMap [ i ] [ 0 ] = map [ i ] [ 0 ] - map [ 0 ] [ 0 ] ; subMap [ i ] [ 1 ] = map [ i ] [ 1 ] - map [ 0 ] [ 1 ] ; subMap [ i ] [ 2 ] = map [ i ] [ 2 ] - map [ 0 ] [ 2 ] ; if ( subMap [ i ] [ 0 ] == subMap [ i ] [ 1 ] && subMap [ i ] [ 0 ] == subMap [ i ] [ 2 ] ) { } else { ans = " No " ; } } out . print ( ans ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long cnt = a [ 0 ] - 1 ; int max = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max < a [ i ] ) { int c = a [ i ] % max == 0 ? ( int ) Math . floor ( a [ i ] / max ) - 1 : ( int ) Math . floor ( a [ i ] / max ) ; cnt += c ; a [ i ] = 1 ; } max = Math . max ( a [ i ] + 1 , max ) ; } sb . append ( cnt ) ; System . out . println ( sb ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , 1 ) ; String s = r . readLine ( ) ; s = r . readLine ( ) ; if ( s . contains ( " Y " ) ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( a [ 0 ] = 0 ; a [ 0 ] < 101 ; a [ 0 ] ++ ) { b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; for ( a [ 1 ] = 0 ; a [ 1 ] < 101 ; a [ 1 ] ++ ) { b [ 1 ] = c [ 1 ] [ 1 ] - a [ 1 ] ; for ( a [ 2 ] = 0 ; a [ 2 ] < 101 ; a [ 2 ] ++ ) { b [ 2 ] = c [ 2 ] [ 2 ] - a [ 2 ] ; boolean ok = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { ok = false ; } } } if ( ok ) { out . println ( " Yes " ) ; return ; } } } } out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int res = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - i - j ; if ( 0 <= tmp && tmp <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Map < String , Integer > map = new HashMap < > ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) map . put ( sc . next ( ) , 1 ) ; System . out . println ( ( map . size ( ) == 3 ) ? " Three " : " Four " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int b = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; int d = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( a == b && b == d ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int n = sc . nextInt ( ) ; Set < Character > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char a = sc . next ( ) . toCharArray ( ) [ 0 ] ; hs . add ( a ) ; } if ( hs . size ( ) == 3 ) { pr . println ( " Three " ) ; } else if ( hs . size ( ) == 4 ) { pr . println ( " Four " ) ; } } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( min > P [ i ] ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; N [ 0 ] = sc . nextInt ( ) ; N [ 1 ] = sc . nextInt ( ) ; N [ 2 ] = sc . nextInt ( ) ; N [ 3 ] = sc . nextInt ( ) ; boolean f1 , f9 , f7 , f4 ; f1 = Arrays . stream ( N ) . anyMatch ( a -> a == 1 ) ; f9 = Arrays . stream ( N ) . anyMatch ( a -> a == 9 ) ; f7 = Arrays . stream ( N ) . anyMatch ( a -> a == 7 ) ; f4 = Arrays . stream ( N ) . anyMatch ( a -> a == 4 ) ; String result = ( f1 && f9 && f7 && f4 ) ? " YES " : " NO " ; System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { final int size = 3 ; final int [ ] [ ] grid = new int [ size ] [ size ] ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < size ; i ++ ) for ( int j = 0 ; j < size ; j ++ ) grid [ i ] [ j ] = sc . nextInt ( ) ; sc . close ( ) ; int aAry [ ] = new int [ size ] ; int bAry [ ] = new int [ size ] ; for ( int i = 0 ; i <= grid [ 0 ] [ 0 ] ; i ++ ) { aAry [ 0 ] = i ; bAry [ 0 ] = grid [ 0 ] [ 0 ] - aAry [ 0 ] ; bAry [ 1 ] = grid [ 0 ] [ 1 ] - aAry [ 0 ] ; bAry [ 2 ] = grid [ 0 ] [ 2 ] - aAry [ 0 ] ; aAry [ 1 ] = grid [ 1 ] [ 0 ] - bAry [ 0 ] ; aAry [ 2 ] = grid [ 2 ] [ 0 ] - bAry [ 0 ] ; if ( judge ( aAry , bAry ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } boolean judge ( int aAry [ ] , int bAry [ ] ) { boolean res = true ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { if ( grid [ i ] [ j ] != aAry [ i ] + bAry [ j ] ) return false ; } } return res ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > set1 = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set1 . add ( sc . next ( ) ) ; } int ans = set1 . size ( ) ; if ( ans == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { try { while ( st == null || ! st . hasMoreElements ( ) ) { st = new StringTokenizer ( br . readLine ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { String s = " " ; try { s = br . readLine ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return s ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) cnt ++ ; } } out . println ( cnt ) ; out . flush ( ) ; out . close ( ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; ArrayList < Integer > numList = new ArrayList < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { numList . add ( sc . nextInt ( ) ) ; } int min = numList . get ( 0 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList . get ( i ) < min ) { min = numList . get ( i ) ; } if ( numList . get ( i ) <= min ) { ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; Set < String > set = new HashSet < > ( ) ; String [ ] a = sc . nextLine ( ) . split ( " " , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( a [ i ] ) ; } int answer = 0 ; if ( set . contains ( " Y " ) == true ) { answer ++ ; } if ( set . contains ( " G " ) == true ) { answer ++ ; } if ( set . contains ( " W " ) == true ) { answer ++ ; } if ( set . contains ( " P " ) == true ) { answer ++ ; } if ( answer >= 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String output = " Three " ; int num = sc . nextInt ( ) ; String [ ] colors = new String [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { colors [ i ] = sc . next ( ) ; } sc . close ( ) ; for ( int i = 0 ; i < colors . length ; i ++ ) { if ( colors [ i ] . equals ( " Y " ) ) { output = " Four " ; break ; } } System . out . println ( output ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ; int K = cin . nextInt ( ) ; int S = cin . nextInt ( ) ; int c = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = Integer . parseInt ( scanner . next ( ) ) ; int S = Integer . parseInt ( scanner . next ( ) ) ; scanner . close ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { BufferedReader rd ; Main ( ) throws IOException { rd = new BufferedReader ( new InputStreamReader ( System . in ) ) ; compute ( ) ; } private void compute ( ) throws IOException { rd . readLine ( ) ; String s = rd . readLine ( ) ; out ( s . contains ( " Y " ) ? " Four " : " Three " ) ; } private static void out ( Object x ) { System . out . println ( x ) ; } public static void main ( String [ ] args ) throws IOException { new Main ( ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; String ans = a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ? " YES " : " NO " ; System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { resolve ( System . in , System . out ) ; } static void resolve ( InputStream is , PrintStream pw ) { Scanner sc = new Scanner ( is ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int min = p [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pi = p [ i ] ; if ( pi <= min ) { count ++ ; } min = Math . min ( min , pi ) ; } pw . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; long answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { int limit_y = Math . min ( K , S - x ) ; for ( int y = 0 ; y <= limit_y ; y ++ ) { if ( S - x - y <= K ) { answer += 1 ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; ArrayList < String > hina = new ArrayList < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { S [ i ] = sc . next ( ) ; if ( ! hina . contains ( S [ i ] ) ) { hina . add ( S [ i ] ) ; } } if ( hina . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( z <= k ) && ( z >= 0 ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int curMax = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { cnt ++ ; curMax = sc . nextInt ( ) ; continue ; } int num = sc . nextInt ( ) ; if ( curMax >= num ) { cnt ++ ; curMax = num ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] c1 = sc . nextLine ( ) . split ( " " ) ; String [ ] c2 = sc . nextLine ( ) . split ( " " ) ; String [ ] c3 = sc . nextLine ( ) . split ( " " ) ; int [ ] [ ] grid = new int [ ] [ ] { { Integer . valueOf ( c1 [ 0 ] ) , Integer . valueOf ( c2 [ 0 ] ) , Integer . valueOf ( c3 [ 0 ] ) } , { Integer . valueOf ( c1 [ 1 ] ) , Integer . valueOf ( c2 [ 1 ] ) , Integer . valueOf ( c3 [ 1 ] ) } , { Integer . valueOf ( c1 [ 2 ] ) , Integer . valueOf ( c2 [ 2 ] ) , Integer . valueOf ( c3 [ 2 ] ) } } ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = grid [ 0 ] [ i ] - x [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) x [ i ] = grid [ i ] [ 0 ] - y [ 0 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != grid [ i ] [ j ] ) ans = " No " ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Scanner sc ) { int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = grid [ 0 ] [ ( i + 2 ) % 3 ] - grid [ 0 ] [ ( i + 1 ) % 3 ] ; b [ i ] = grid [ ( i + 2 ) % 3 ] [ 0 ] - grid [ ( i + 1 ) % 3 ] [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] != grid [ j ] [ ( i + 2 ) % 3 ] - grid [ j ] [ ( i + 1 ) % 3 ] || b [ i ] != grid [ ( i + 2 ) % 3 ] [ j ] - grid [ ( i + 1 ) % 3 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } class Main { public static void main ( String ... args ) { Scanner in = new Scanner ( System . in ) ; Solver . INSTANCE . solve ( in ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int X = 0 ; int Y = 0 ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { X = i ; Y = j ; int Z = S - ( X + Y ) ; if ( ( Z >= 0 ) && ( Z <= K ) ) { sum = sum + 1 ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int N = reader . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < N ; i ++ ) { char ch = reader . next ( ) . charAt ( 0 ) ; if ( ch == 'Y' ) { ans = " Four " ; } } System . out . print ( ans ) ; reader . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { c [ y ] [ x ] = sc . nextInt ( ) ; if ( y == 0 ) b [ x ] = c [ y ] [ x ] ; else a [ y ] = c [ y ] [ x ] - b [ x ] ; } } boolean isAns = true ; for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { if ( c [ y ] [ x ] != a [ y ] + b [ x ] ) { isAns = false ; break ; } } } System . out . println ( isAns ? " Yes " : " No " ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) { ans = false ; break ; } if ( c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) { ans = false ; break ; } } if ( ans == true ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] ) { ans = false ; break ; } if ( c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] ) { ans = false ; break ; } } } if ( ans == true ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; class Main { void solve ( ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int out = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) out ++ ; } } System . out . println ( out ) ; scan . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { min = p ; count ++ ; } } print ( count ) ; sc . close ( ) ; } public static void print ( Object obj ) { System . out . println ( obj ) ; } }
import java . util . Scanner ; class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; boolean hasY = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { hasY = true ; } } System . out . println ( hasY ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] sa = br . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sa [ i ] ) ; } br . close ( ) ; int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; long min = Long . MAX_VALUE ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long temp = Long . parseLong ( sc . next ( ) ) ; if ( min > temp ) { ans ++ ; min = temp ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] d = new int [ 3 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { d [ i ] [ j ] = c [ i ] [ j + 1 ] - c [ i ] [ j ] ; } } if ( d [ 0 ] [ 0 ] == d [ 1 ] [ 0 ] && d [ 1 ] [ 0 ] == d [ 2 ] [ 0 ] && d [ 0 ] [ 1 ] == d [ 1 ] [ 1 ] && d [ 1 ] [ 1 ] == d [ 2 ] [ 1 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int box = sc . nextInt ( ) ; int [ ] list = new int [ box ] ; for ( int i = 0 ; i < list . length ; ++ i ) { list [ i ] = sc . nextInt ( ) ; } int intMin = list [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < list . length ; ++ i ) { if ( intMin > list [ i ] ) { intMin = list [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int C = 0 ; int nam = 0 ; for ( int a = 0 ; a <= K ; a ++ ) { for ( int b = 0 ; b <= K ; b ++ ) { C = S - a - b ; if ( 0 <= C && C <= K ) { nam = nam + 1 ; } } } System . out . print ( nam ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } scan . close ( ) ; int check = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } System . out . println ( ( check == 0 ) ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S [ ] = new String [ N ] ; String Str = " Two " ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] . equals ( " Y " ) ) { Str = " Four " ; break ; } else Str = " Three " ; } System . out . println ( Str ) ; } }
public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; int max = a [ 0 ] ; int min = a [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max && a [ i ] < min ) { count ++ ; min = a [ i ] ; } else { max = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] rx = new int [ 3 ] ; int [ ] ry = new int [ 3 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } ry [ 0 ] = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { rx [ j ] = c [ 0 ] [ j ] - ry [ 0 ] ; } for ( int j = 1 ; j < 3 ; j ++ ) { ry [ j ] = c [ j ] [ 0 ] - rx [ 0 ] ; } outside : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( rx [ j ] + ry [ i ] != c [ i ] [ j ] ) { flag = false ; System . out . println ( " No " ) ; break outside ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; ArrayList < String > array = new ArrayList < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String str = scanner . next ( ) ; array . add ( str ) ; } if ( array . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } scanner . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int b = sc . nextInt ( ) ; int [ ] hairetu = new int [ b ] ; for ( int i = 0 ; i < hairetu . length ; i ++ ) { int c = sc . nextInt ( ) ; hairetu [ i ] = c ; } int count = 0 ; int champ = hairetu [ 0 ] ; for ( int k = 0 ; k < hairetu . length ; k ++ ) { if ( champ >= hairetu [ k ] ) { champ = hairetu [ k ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner keyboard = new Scanner ( System . in ) ; int K = keyboard . nextInt ( ) ; int S = keyboard . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; keyboard . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } boolean F = false ; int A = 0 ; int B = 0 ; int C = 0 ; A = c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] ; B = c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] ; C = c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ( A - i ) % 3 == 0 && ( B - i ) % 3 == 0 && ( C - i ) % 3 == 0 ) { F = true ; } } if ( F ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; class Main { int [ ] [ ] c ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } } void solve ( ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int min = Math . min ( c [ 0 ] [ 0 ] , Math . min ( c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ) ) ; for ( int i = 0 ; i <= min ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 1 ] - b [ 1 ] ; check : for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) break check ; if ( j == 2 && k == 2 ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int com = s - ( i + j ) ; if ( com >= 0 && k >= com ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] min = new int [ n + 1 ] ; min [ 0 ] = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i > 0 ) min [ i ] = Math . min ( min [ i - 1 ] , p [ i - 1 ] ) ; } int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min [ i ] > p [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( ( new InputStreamReader ( System . in ) ) ) ; String [ ] l = reader . readLine ( ) . split ( " " ) ; int N = Integer . parseInt ( l [ 0 ] ) ; String [ ] list = reader . readLine ( ) . split ( " " ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( list [ i ] ) ; } int [ ] dp = new int [ N ] ; dp [ 0 ] = 1 ; int min = arr [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( arr [ j ] < min ) { dp [ j ] = 1 + dp [ j - 1 ] ; min = arr [ j ] ; } else { dp [ j ] = dp [ j - 1 ] ; } } System . out . println ( dp [ dp . length - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] a = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = sc . next ( ) ; boolean four = false ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] . equals ( " Y " ) ) { four = true ; break ; } } if ( four ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int a1 , b1 , b2 , b3 ; a1 = 0 ; b1 = c [ 0 ] [ 0 ] ; b2 = c [ 0 ] [ 1 ] ; b3 = c [ 0 ] [ 2 ] ; if ( c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 && c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } if ( c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 && c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) throws Exception { Main main = new Main ( ) ; } public Main ( ) { Scanner scanner = new Scanner ( System . in ) ; int N ; N = Integer . parseInt ( scanner . next ( ) ) ; int min = Integer . MAX_VALUE ; int result = 0 , in ; for ( int i = 0 ; i < N ; i ++ ) { in = Integer . parseInt ( scanner . next ( ) ) ; if ( min >= in ) { result ++ ; min = in ; } } System . out . println ( result ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; boolean flag = true ; if ( a [ 0 ] != 1 ) flag = false ; if ( a [ 1 ] != 4 ) flag = false ; if ( a [ 2 ] != 7 ) flag = false ; if ( a [ 3 ] != 9 ) flag = false ; if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner kb = new Scanner ( System . in ) ; int n = kb . nextInt ( ) ; int min = kb . nextInt ( ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j = kb . nextInt ( ) ; int b = j ; if ( b > min ) { } else { count += 1 ; min = b ; } } System . out . println ( count ) ; kb . close ( ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ ] ; for ( int i = 0 ; i < 3 ; i ++ ) arr [ i ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = scan . nextInt ( ) ; } int [ ] diff = new int [ 9 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) diff [ i * 3 + j ] = arr [ i ] [ j ] - arr [ i ] [ ( j + 1 ) % 3 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { if ( diff [ i ] != diff [ i + 3 ] || diff [ i + 3 ] != diff [ i + 6 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int x [ ] = new int [ 3 ] ; int y [ ] = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != c [ i ] [ j ] ) flag = false ; } } System . out . println ( flag ? " Yes " : " No " ) ; } }
import java . io . * ; import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int lo = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = input . nextInt ( ) ; if ( x <= lo ) { cnt ++ ; lo = x ; } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int kari = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; if ( kari == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && kari == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) { kari = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; if ( kari == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] && kari == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int P [ ] = new int [ N ] ; int sum = 1 ; boolean flag = true ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int pre_min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { flag = true ; if ( P [ i ] < pre_min ) { sum += 1 ; pre_min = P [ i ] ; } } System . out . print ( sum ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > hina = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hina . add ( sc . next ( ) ) ; } String ans = " Three " ; if ( hina . size ( ) == 4 ) { ans = " Four " ; } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; long count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } out . println ( count ) ; } } }
import java . math . BigInteger ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ps = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ps [ i ] = sc . nextInt ( ) ; } int ans = 1 ; int min = ps [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= ps [ i ] ) { ans ++ ; min = ps [ i ] ; } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BHinaArare solver = new BHinaArare ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BHinaArare { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; boolean four = false ; for ( int i = 0 ; i < n ; i ++ ) { char c = in . next ( ) . charAt ( 0 ) ; if ( c == 'Y' ) four = true ; } out . println ( four ? " Four " : " Three " ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n1 = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int n3 = sc . nextInt ( ) ; int n4 = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; list . add ( n1 ) ; list . add ( n2 ) ; list . add ( n3 ) ; list . add ( n4 ) ; if ( list . contains ( 1 ) && list . contains ( 9 ) && list . contains ( 7 ) && list . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int b0b1_1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int b1b2_1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int b0b1_2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int b1b2_2 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int b0b1_3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; int b1b2_3 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; int a0a1_1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ; int a1a2_1 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ; int a0a1_2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; int a1a2_2 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; int a0a1_3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; int a1a2_3 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; String result = " No " ; if ( b0b1_1 == b0b1_2 && b0b1_2 == b0b1_3 ) { if ( b1b2_1 == b1b2_2 && b1b2_2 == b1b2_3 ) { if ( a0a1_1 == a0a1_2 && a0a1_2 == a0a1_3 ) { if ( a1a2_1 == a1a2_2 && a1a2_2 == a1a2_3 ) { result = " Yes " ; } } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int total = x + y ; if ( ! ( total > S ) && ( total + K ) >= S ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { private static final PrintStream so = System . out ; private static final Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { String s = sc . next ( ) + sc . next ( ) + sc . next ( ) + sc . next ( ) ; if ( s . contains ( " 1 " ) && s . contains ( " 9 " ) && s . contains ( " 7 " ) && s . contains ( " 4 " ) ) { so . println ( " YES " ) ; } else { so . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int [ ] c = new int [ 6 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { int a = scn . nextInt ( ) ; if ( i < 3 ) { c [ 2 * i ] += a ; c [ 2 * i + 1 ] += a ; } else { if ( i == 3 ) { c [ 2 ] += a ; c [ 4 ] += a ; } if ( i == 4 ) { c [ 0 ] += a ; c [ 5 ] += a ; } if ( i == 5 ) { c [ 1 ] += a ; c [ 3 ] += a ; } if ( i == 6 ) { c [ 3 ] += a ; c [ 5 ] += a ; } if ( i == 7 ) { c [ 1 ] += a ; c [ 4 ] += a ; } if ( i == 8 ) { c [ 0 ] += a ; c [ 2 ] += a ; } } } boolean ans = true ; for ( int i = 0 ; i < 6 ; i ++ ) { ans &= ( c [ i ] == c [ 0 ] ) ; } System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] intArray = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { intArray [ i ] = sc . nextInt ( ) ; } double curMin = 1e9 ; for ( int value : intArray ) { curMin = Math . min ( curMin , value ) ; if ( curMin == value ) { count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { String line = " " ; try { line = readLine ( ) ; StringTokenizer st = new StringTokenizer ( line , " " ) ; String tempK = st . nextToken ( ) ; String tempS = st . nextToken ( ) ; int k = Integer . parseInt ( tempK ) ; int s = Integer . parseInt ( tempS ) ; int cnt = 0 ; for ( int i = 0 ; i < s + 1 ; i ++ ) { if ( i > k ) { continue ; } for ( int j = 0 ; j < s + 1 ; j ++ ) { if ( j > k ) { continue ; } else if ( s - i - j > k ) { continue ; } if ( i + j <= s ) { cnt ++ ; } } } System . out . println ( cnt ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private static String readLine ( ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; return br . readLine ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int n = sc . nextInt ( ) ; num [ n ] ++ ; } if ( num [ 1 ] == 1 && num [ 9 ] == 1 && num [ 7 ] == 1 && num [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean flg = false ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { flg = true ; } } if ( flg ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int min = 200005 ; for ( int i = 0 ; i < n ; i ++ ) { int val = sc . nextInt ( ) ; if ( val < min ) { ++ count ; min = val ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int result = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int total = x + y ; if ( ! ( total > S ) && ( total + K ) >= S ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int b [ ] = { c [ 0 ] [ 0 ] - 0 , c [ 0 ] [ 1 ] - 0 , c [ 0 ] [ 2 ] - 0 } ; int a [ ] = { 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] } ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int temp_max = p [ 0 ] ; int cnt = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( temp_max > p [ i ] ) { temp_max = p [ i ] ; cnt ++ ; } } System . out . print ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; class Main { static int A ; public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] map = { 1 , 9 , 7 , 4 } ; boolean [ ] visit = new boolean [ 4 ] ; boolean flag = false ; for ( int i = 0 ; i < 4 ; i ++ ) { int A = scan . nextInt ( ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( A == map [ j ] ) { visit [ j ] = true ; } } } for ( int i = 0 ; i < 4 ; i ++ ) { if ( ! visit [ i ] ) flag = true ; } if ( flag ) System . out . println ( " NO " ) ; else System . out . println ( " YES " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] i1 = new int [ 3 ] ; int [ ] i2 = new int [ 3 ] ; int [ ] i3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { i1 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i2 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i3 [ i ] = sc . nextInt ( ) ; } int diff21 = i2 [ 0 ] - i1 [ 0 ] ; int diff31 = i3 [ 0 ] - i1 [ 0 ] ; if ( i2 [ 1 ] - i1 [ 1 ] == diff21 && i2 [ 2 ] - i1 [ 2 ] == diff21 && i3 [ 1 ] - i1 [ 1 ] == diff31 && i3 [ 2 ] - i1 [ 2 ] == diff31 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . InputMismatchException ; import java . util . Scanner ; import java . util . StringTokenizer ; public class Main { static Scanner in = new Scanner ( System . in ) ; public static void main ( String args [ ] ) throws IOException { while ( in . hasNext ( ) ) { int [ ] a = new int [ 4 + 1 ] ; int [ ] vis = new int [ 11 ] ; for ( int i = 1 ; i <= 4 ; i ++ ) { a [ i ] = in . nextInt ( ) ; vis [ a [ i ] ] ++ ; } if ( vis [ 1 ] == 1 && vis [ 7 ] == 1 && vis [ 9 ] == 1 && vis [ 4 ] == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
import java . util . ArrayDeque ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int book [ ] = new int [ 4 ] ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { book [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " P " ) ) { book [ 0 ] = 1 ; } else if ( s . equals ( " W " ) ) { book [ 1 ] = 1 ; } else if ( s . equals ( " G " ) ) { book [ 2 ] = 1 ; } else { book [ 3 ] = 1 ; } } int sum = book [ 0 ] + book [ 1 ] + book [ 2 ] + book [ 3 ] ; if ( sum == 3 ) System . out . println ( " Three " ) ; else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int max = Integer . parseInt ( sc . next ( ) ) ; int target = Integer . parseInt ( sc . next ( ) ) ; int cnt = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int total = i + j ; if ( target - total <= max && target - total >= 0 ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int answer = 0 ; if ( S > K * 3 ) { System . out . println ( 0 ) ; return ; } for ( int i = K ; i >= 0 ; i -- ) { int tmp1 = S - i ; if ( tmp1 > K + K ) { break ; } for ( int j = K ; j >= 0 ; j -- ) { int tmp2 = tmp1 - j ; if ( tmp2 < 0 ) { continue ; } else if ( tmp2 > K ) { break ; } answer ++ ; } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int lastOne = s - i - j ; if ( lastOne >= 0 && lastOne <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; try { long k = scanner . nextLong ( ) ; long s = scanner . nextLong ( ) ; long ans = 0 ; for ( long x = 0 ; x <= k ; x ++ ) { for ( long y = 0 ; y <= k ; y ++ ) { long z = s - x - y ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } finally { scanner . close ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = C [ 0 ] [ 0 ] ; b [ 1 ] = C [ 0 ] [ 1 ] ; b [ 2 ] = C [ 0 ] [ 2 ] ; a [ 1 ] = C [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = C [ 2 ] [ 0 ] - b [ 0 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != C [ i ] [ j ] ) { ans = " No " ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import static java . lang . System . * ; class Main { public static final int MOD = 1000000007 ; public static final int INF = 1000000000 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a , b ; a = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; b = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; String ans = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( a != c [ i ] [ 0 ] - c [ i ] [ 1 ] || b != c [ i ] [ 1 ] - c [ i ] [ 2 ] ) { ans = " No " ; break ; } } for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ j ] - c [ 1 ] [ j ] || c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ j ] - c [ 2 ] [ j ] ) { ans = " No " ; break ; } } out . println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; String moji = " " ; int flag = 0 ; for ( int i = 0 ; i < N ; i ++ ) { moji = in . next ( ) ; if ( moji . equals ( " Y " ) ) { flag = 1 ; } } if ( flag == 1 ) { System . out . print ( " Four " ) ; } else { System . out . print ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] level = new int [ n ] ; int count = 1 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { level [ i ] = input . nextInt ( ) ; if ( i == 0 ) { min = level [ 0 ] ; } else { if ( level [ i ] <= min ) { count ++ ; min = level [ i ] ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String output = " Three " ; int num = sc . nextInt ( ) ; String [ ] color = new String [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { color [ i ] = sc . next ( ) ; } sc . close ( ) ; for ( int i = 0 ; i < num ; i ++ ) { if ( color [ i ] . equals ( " Y " ) ) { output = " Four " ; break ; } } System . out . println ( output ) ; } }
import java . util . * ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; long count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { if ( x == S ) { count ++ ; break ; } if ( x > S ) { break ; } if ( x + K + K < S ) { continue ; } for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y == S ) { count ++ ; break ; } if ( x + y > S ) { break ; } if ( x + y + K < S ) { continue ; } count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; String answer = " " ; int e = 0 ; int f = 0 ; int g = 0 ; int h = 0 ; Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a == 1 || b == 1 || c == 1 || d == 1 ) { e = 1 ; } if ( a == 9 || b == 9 || c == 9 || d == 9 ) { f = 1 ; } if ( a == 7 || b == 7 || c == 7 || d == 7 ) { g = 1 ; } if ( a == 4 || b == 4 || c == 4 || d == 4 ) { h = 1 ; } if ( e == 1 && f == 1 && g == 1 && h == 1 ) { answer = " YES " ; } else { answer = " NO " ; } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] $ ) { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = s . nextInt ( ) ; } int min = N + 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int max = p [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max > p [ i ] ) { max = p [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ 0 ] [ i ] = sc . nextInt ( ) ; c [ 1 ] [ i ] = sc . nextInt ( ) ; c [ 2 ] [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ i - 1 ] [ j - 1 ] - c [ i ] [ j - 1 ] != c [ i - 1 ] [ j ] - c [ i ] [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int [ ] arr = new int [ 4 ] ; int n = scan . nextInt ( ) ; while ( n -- > 0 ) { String temp = scan . next ( ) ; switch ( temp ) { case " G " : arr [ 0 ] ++ ; break ; case " W " : arr [ 1 ] ++ ; break ; case " Y " : arr [ 2 ] ++ ; break ; case " P " : arr [ 3 ] ++ ; break ; } } int ans = 0 ; for ( int i : arr ) if ( i > 0 ) ans ++ ; switch ( ans ) { case 1 : System . out . println ( " One " ) ; break ; case 2 : System . out . println ( " Two " ) ; break ; case 3 : System . out . println ( " Three " ) ; break ; case 4 : System . out . println ( " Four " ) ; break ; } } }
import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; MyScanner in = new MyScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; C solver = new C ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class C { public void solve ( int testNumber , MyScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] P = in . nextIntArray ( N ) ; int max = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= max ) { max = P [ i ] ; ans ++ ; } } out . println ( ans ) ; } } static class MyScanner { private BufferedReader in ; private StringTokenizer st ; public MyScanner ( InputStream stream ) { in = new BufferedReader ( new InputStreamReader ( stream ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { String rl = in . readLine ( ) ; if ( rl == null ) { return null ; } st = new StringTokenizer ( rl ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = nextInt ( ) ; } return a ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] N = new int [ 4 ] ; N [ 0 ] = scan . nextInt ( ) ; N [ 1 ] = scan . nextInt ( ) ; N [ 2 ] = scan . nextInt ( ) ; N [ 3 ] = scan . nextInt ( ) ; Arrays . sort ( N ) ; if ( N [ 0 ] == 1 && N [ 1 ] == 4 && N [ 2 ] == 7 && N [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; boolean ans = false ; for ( int n = 0 ; n <= c [ 0 ] [ 0 ] ; n ++ ) { a [ 0 ] = n ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; loop : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] == a [ i ] + b [ j ] ) { ans = true ; } else { ans = false ; break loop ; } } } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; boolean flg = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( scan . next ( ) . equals ( " Y " ) ) { flg = true ; break ; } } if ( flg ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int counter = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) counter ++ ; } } System . out . println ( String . valueOf ( counter ) ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( in . next ( ) . equals ( " Y " ) ) { out . print ( " Four " ) ; return ; } } out . print ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scanner . nextInt ( ) ) ; } scanner . close ( ) ; int count = 0 ; int min = list . get ( 0 ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) . compareTo ( min ) == 1 ) { continue ; } count += 1 ; min = list . get ( i ) ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 , z ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( k >= z && z >= 0 ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int num = s - i - j ; if ( num >= 0 && num <= k ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; if ( a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { list . add ( sc . next ( ) ) ; } System . out . println ( list . contains ( " 1 " ) && list . contains ( " 9 " ) && list . contains ( " 7 " ) && list . contains ( " 4 " ) ? " YES " : " NO " ) ; } }
import java . util . * ; import java . math . * ; import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K && S - i >= 0 ; i ++ ) { int sum = S - i ; if ( sum <= K ) { count += sum + 1 ; } else { int dif = Math . max ( 0 , 2 * K - sum + 1 ) ; count += dif ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && 0 <= s - x - y ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int con = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int item = sc . nextInt ( ) ; if ( min > item ) { min = item ; } if ( min >= item ) { con ++ ; } } System . out . println ( con ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; System . out . println ( three ( K , S ) ) ; } private static int one ( int K , int S ) { return 0 <= S && S <= K ? 1 : 0 ; } private static int two ( int K , int S ) { int result = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { result += one ( K , S - i ) ; } return result ; } private static int three ( int K , int S ) { int result = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { result += two ( K , S - i ) ; } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int in_num = Integer . parseInt ( sc . next ( ) ) ; int [ ] l = new int [ in_num ] ; for ( int i = 0 ; i < in_num ; i ++ ) { l [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int count = 0 ; int mi = Integer . MAX_VALUE ; for ( int i = 0 ; i < in_num ; i ++ ) { if ( l [ i ] <= mi ) { count ++ ; mi = l [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; String arare [ ] = new String [ a ] ; for ( int x = 0 ; x < a ; x ++ ) { arare [ x ] = scanner . next ( ) ; } int n = 0 ; boolean i = false ; String str = " Y " ; for ( n = 0 ; n < a ; n ++ ) { if ( str . equals ( arare [ n ] ) ) i = true ; } if ( i ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int min = in . nextInt ( ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = in . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; KEYENCE2019_A solver = new KEYENCE2019_A ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class KEYENCE2019_A { public void solve ( int testNumber , Scanner in , PrintWriter out ) { String [ ] c = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { c [ i ] = in . next ( ) ; } Arrays . sort ( c ) ; if ( String . join ( " " , c ) . equals ( " 1479 " ) ) { out . print ( " YES " ) ; } else { out . print ( " NO " ) ; } } } }
import java . io . IOException ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean A = false ; for ( int i = 0 ; i < N ; i ++ ) { String C = sc . next ( ) ; if ( C . contains ( " Y " ) ) { A = true ; break ; } } System . out . println ( A ? " Four " : " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; ++ i ) { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int count = 0 ; int x = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { x = Math . min ( x , a [ i ] ) ; if ( x == a [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) c [ i ] = scan . nextInt ( ) ; for ( int i = 0 ; i < 2 ; ++ i ) { int d = c [ i * 3 ] - c [ ( i + 1 ) * 3 ] ; for ( int j = 0 ; j < 3 ; ++ j ) { if ( c [ i * 3 + j ] - c [ ( i + 1 ) * 3 + j ] != d ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int x , y , z ; int s , k ; int count = 0 ; Scanner sc = new Scanner ( System . in ) ; k = Integer . parseInt ( sc . next ( ) ) ; s = Integer . parseInt ( sc . next ( ) ) ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; for ( int x = 0 ; x <= 100 ; x ++ ) { int a1 = c [ 0 ] [ 0 ] - x ; int a2 = c [ 0 ] [ 1 ] - x ; int a3 = c [ 0 ] [ 2 ] - x ; int b1 = x ; int b2 = c [ 1 ] [ 0 ] - a1 ; int b3 = c [ 2 ] [ 0 ] - a1 ; if ( c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a3 + b2 && c [ 2 ] [ 1 ] == a2 + b3 && c [ 2 ] [ 2 ] == a3 + b3 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void testArr ( int [ ] [ ] a ) { int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( int i = 0 ; i <= a [ 0 ] [ 0 ] ; i ++ ) { for ( int j = 0 ; j <= a [ 1 ] [ 1 ] ; j ++ ) { for ( int k = 0 ; k <= a [ 2 ] [ 2 ] ; k ++ ) { a1 = i ; b1 = a [ 0 ] [ 0 ] - i ; a2 = j ; b2 = a [ 1 ] [ 1 ] - j ; a3 = k ; b3 = a [ 2 ] [ 2 ] - k ; if ( a1 + b1 == a [ 0 ] [ 0 ] && a1 + b2 == a [ 0 ] [ 1 ] && a1 + b3 == a [ 0 ] [ 2 ] && a2 + b1 == a [ 1 ] [ 0 ] && a2 + b2 == a [ 1 ] [ 1 ] && a2 + b3 == a [ 1 ] [ 2 ] && a3 + b1 == a [ 2 ] [ 0 ] && a3 + b2 == a [ 2 ] [ 1 ] && a3 + b3 == a [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; return ; } public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = s . nextInt ( ) ; } } testArr ( a ) ; s . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int curMin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( i == 0 ) { curMin = p ; cnt ++ ; continue ; } if ( p < curMin ) { curMin = p ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int sum = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int tmp = sum - i - j ; if ( 0 <= tmp && tmp <= max ) result ++ ; } } System . out . println ( Integer . toString ( result ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { ArrayList < Integer > [ ] graph ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long ans = a [ 0 ] - 1 ; int max = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max + 1 ) max = Math . max ( max , a [ i ] ) ; else { ans += ( a [ i ] - 1 ) / ( max + 1 ) ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . show ( m . solve ( ) ) ; sc . close ( ) ; } Scanner sc ; int K ; int S ; Main ( Scanner sc ) { this . sc = sc ; K = sc . nextInt ( ) ; S = sc . nextInt ( ) ; } private int solve ( ) { int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K && x + y + z == S ) { count ++ ; } } } return count ; } public void show ( int answer ) { System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int counter = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { counter ++ ; } } } System . out . print ( counter ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; int b = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; int x = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; int y = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; boolean correct = true ; if ( c [ 1 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a ) correct = false ; if ( c [ 1 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a ) correct = false ; if ( c [ 2 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a + b ) correct = false ; if ( c [ 2 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a + b ) correct = false ; if ( correct ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] atgs ) { Scanner scan = new Scanner ( System . in ) ; int ans = 0 ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; ++ x ) { for ( int y = 0 ; y <= K ; ++ y ) { int z = S - x - y ; if ( z < 0 || z > K ) continue ; ++ ans ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . HashSet ; import java . lang . Integer ; import java . lang . StringBuilder ; import java . lang . Math ; public class Main { public static int calc ( int max , int target ) { int cnt = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int sum = i + j ; int k = target - sum ; if ( k <= max && k >= 0 ) { cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int result = calc ( K , S ) ; System . out . println ( result ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; String [ ] charac = { " P " , " W " , " G " , " Y " } ; boolean [ ] state = new boolean [ 4 ] ; String h ; for ( int i = 0 ; i < n ; i ++ ) { h = tokenizer . nextToken ( ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( h . equals ( charac [ j ] ) ) { state [ j ] = true ; break ; } } } System . out . println ( state [ 3 ] ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int k = 0 ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { k = S - i - j ; if ( ( k <= K ) && ( k >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = 0 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } ans += a [ 0 ] - 1 ; int k = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == k ) { k ++ ; continue ; } ans += ( a [ i ] - 1 ) / k ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int c3 = sc . nextInt ( ) ; int c4 = sc . nextInt ( ) ; int c5 = sc . nextInt ( ) ; int c6 = sc . nextInt ( ) ; int c7 = sc . nextInt ( ) ; int c8 = sc . nextInt ( ) ; int c9 = sc . nextInt ( ) ; int sum1 = c1 + c5 + c9 ; int sum2 = c1 + c6 + c8 ; int sum3 = c2 + c4 + c9 ; int sum4 = c2 + c6 + c7 ; int sum5 = c3 + c4 + c8 ; int sum6 = c3 + c5 + c7 ; if ( sum1 == sum2 && sum2 == sum3 && sum3 == sum4 && sum4 == sum5 && sum5 == sum6 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( ( S - x - y >= 0 ) && ( S - x - y <= K ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = ( int ) 1e9 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . ArrayDeque ; import java . util . Queue ; import java . util . LinkedList ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; int s [ ] = new int [ 4 ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] . charAt ( 0 ) == 'P' ) s [ 0 ] ++ ; if ( S [ i ] . charAt ( 0 ) == 'W' ) s [ 1 ] ++ ; if ( S [ i ] . charAt ( 0 ) == 'G' ) s [ 2 ] ++ ; if ( S [ i ] . charAt ( 0 ) == 'Y' ) s [ 3 ] ++ ; } for ( int i = 0 ; i < 4 ; i ++ ) { if ( s [ i ] > 0 ) { ans ++ ; } } if ( ans == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] values = IOUtils . readIntArray ( in , n , 0 ) ; long res = 0 ; int cost = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int canBuy = ( values [ i ] - 1 ) / cost ; res += canBuy ; int afterBuy = canBuy == 0 ? values [ i ] : 1 ; cost = Math . max ( cost , afterBuy + 1 ) ; } out . println ( res ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String nextString ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } } static class IOUtils { public static int [ ] readIntArray ( InputReader in , int size , int start ) { int [ ] res = new int [ start + size ] ; for ( int i = start ; i < start + size ; i ++ ) res [ i ] = in . nextInt ( ) ; return res ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; boolean judge = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 1 ; i < 3 ; i ++ ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != ( a [ i ] + b [ j ] ) ) { judge = false ; } } } if ( judge ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int maxNum = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= maxNum ; ++ x ) { for ( int y = 0 ; y <= maxNum ; ++ y ) { int z = sum - x - y ; if ( 0 <= z && z <= maxNum ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; a [ 0 ] = 0 ; int [ ] b = { c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] } ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( ( a [ i ] + b [ j ] ) != c [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - a - b ; if ( 0 <= c && c <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { try ( Scanner in = new Scanner ( System . in ) ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( ! ( Z >= 0 && Z <= K ) ) { continue ; } count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] ks = scanner . nextLine ( ) . split ( " " , 2 ) ; int k = Integer . parseInt ( ks [ 0 ] ) ; int s = Integer . parseInt ( ks [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum - n ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum - n ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in , " UTF-8 " ) ; int n [ ] = { 1 , 9 , 7 , 4 } ; String [ ] inp = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { inp [ i ] = sc . next ( ) ; } int cont = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( n [ i ] == Integer . parseInt ( inp [ j ] ) ) { cont ++ ; break ; } } } if ( cont == 4 ) { System . out . print ( " YES " ) ; } else if ( cont != 4 ) { System . out . print ( " NO " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveB ( ) ; } private void solveA ( ) { Scanner scanner = null ; String wk = " " ; try { scanner = new Scanner ( System . in ) ; wk = scanner . next ( ) ; System . out . println ( wk . replaceAll ( " , " , " " ) ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numK = 0 ; int s = 0 ; try { scanner = new Scanner ( System . in ) ; numK = scanner . nextInt ( ) ; s = scanner . nextInt ( ) ; int startK = 0 ; if ( numK <= s / 3 ) { startK = numK ; } int res = 0 ; for ( int i = 0 ; i <= numK ; i ++ ) { for ( int j = 0 ; j <= numK ; j ++ ) { if ( s - i - j < 0 ) { break ; } else if ( s - i - j <= numK ) { res ++ ; } } } System . out . println ( res ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) cnt ++ ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { void submit ( ) { int N = nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = nextInt ( ) ; } int count = 1 ; if ( N == 1 ) { out . println ( count ) ; return ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } out . println ( count ) ; } void preCalc ( ) { } void stress ( ) { } void test ( ) { } Main ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; preCalc ( ) ; submit ( ) ; out . close ( ) ; } static final Random rng = new Random ( ) ; static int rand ( int l , int r ) { return l + rng . nextInt ( r - l + 1 ) ; } public static void main ( String [ ] args ) throws IOException { new Main ( ) ; } BufferedReader br ; PrintWriter out ; StringTokenizer st ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } String nextString ( ) { try { return br . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . InputStreamReader ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = in . nextString ( ) ; if ( s . equals ( " Y " ) ) cnt ++ ; } if ( cnt == 0 ) out . println ( " Three " ) ; else out . println ( " Four " ) ; } } static class FastScanner { private BufferedReader br ; private StringTokenizer st ; public FastScanner ( File f ) { try { br = new BufferedReader ( new FileReader ( f ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } } public FastScanner ( InputStream f ) { br = new BufferedReader ( new InputStreamReader ( f ) ) ; } public String nextString ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { String s = null ; try { s = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( s == null ) return null ; st = new StringTokenizer ( s ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; String s = sc . nextLine ( ) ; boolean haveFour = s . contains ( " Y " ) ; System . out . println ( haveFour ? " Four " : " Three " ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; int d = scan . nextInt ( ) ; int count1 = 0 ; int count2 = 0 ; int count3 = 0 ; int count4 = 0 ; if ( a == 1 || b == 1 || c == 1 || d == 1 ) { count1 = 1 ; } if ( a == 9 || b == 9 || c == 9 || d == 9 ) { count2 = 1 ; } if ( a == 7 || b == 7 || c == 7 || d == 7 ) { count3 = 1 ; } if ( a == 4 || b == 4 || c == 4 || d == 4 ) { count4 = 1 ; } if ( count1 == 1 && count2 == 1 && count3 == 1 && count4 == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; sc . nextLine ( ) ; int [ ] n = new int [ 4 ] ; n [ 0 ] = 0 ; n [ 1 ] = 0 ; n [ 2 ] = 0 ; n [ 3 ] = 0 ; String StringLine = sc . nextLine ( ) ; StringLine = StringLine . replace ( " " , " " ) ; char [ ] array = StringLine . toCharArray ( ) ; for ( int i = 0 ; i < num ; i ++ ) { switch ( array [ i ] ) { case 'P' : n [ 0 ] ++ ; break ; case 'W' : n [ 1 ] ++ ; break ; case 'G' : n [ 2 ] ++ ; break ; case 'Y' : n [ 3 ] ++ ; break ; } } int rc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( n [ i ] == 0 ) { rc ++ ; } } switch ( rc ) { case 0 : System . out . println ( " Four " ) ; break ; case 1 : System . out . println ( " Three " ) ; break ; case 2 : System . out . println ( " Two " ) ; break ; case 3 : System . out . println ( " One " ) ; break ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) , temp = t , counter = 0 ; for ( int count = 0 ; count < t ; count ++ ) { int x = scan . nextInt ( ) ; if ( x <= temp ) { temp = x ; counter ++ ; } } System . out . println ( counter ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int a ; int b ; int cnt = 0 ; for ( a = 0 ; a <= K ; a ++ ) { int qw = K ; if ( S - a < qw ) { qw = S - a ; } for ( b = 0 ; b <= qw ; b ++ ) { if ( S - a - b <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int res = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= k ) { res ++ ; } } } System . out . println ( res ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = new StringTokenizer ( " " ) ; } public String next ( ) throws IOException { if ( ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( br . readLine ( ) ) ; return next ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { static int [ ] [ ] mat = new int [ 3 ] [ 3 ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i , j ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { mat [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( ( mat [ 0 ] [ 0 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] && mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] == mat [ 2 ] [ 0 ] - mat [ 2 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 0 ] [ 2 ] == mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] == mat [ 2 ] [ 1 ] - mat [ 2 ] [ 2 ] && mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] ) ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] x = new int [ 4 ] ; for ( int i = 0 ; i < N ; i ++ ) { String a = sc . next ( ) ; char b = a . charAt ( 0 ) ; if ( b == 'P' ) { x [ 0 ] = 1 ; } else if ( b == 'W' ) { x [ 1 ] = 1 ; } else if ( b == 'G' ) { x [ 2 ] = 1 ; } else if ( b == 'Y' ) { x [ 3 ] = 1 ; } } int count = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( x [ i ] == 1 ) { count ++ ; } } if ( count == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { static char [ ] [ ] c ; public static void main ( String [ ] args ) throws InterruptedException { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i ] [ 1 ] != c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] || c [ i ] [ 1 ] - c [ i ] [ 2 ] != c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 3 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 1 ] [ i ] != c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] || c [ 1 ] [ i ] - c [ 2 ] [ i ] != c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int k , s , ans = 0 ; Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . contains ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { private int N ; private char [ ] S ; public void inputData ( ) { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; S = new char [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) . charAt ( 0 ) ; } } public void printAnswer ( ) { for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } public void run ( ) { inputData ( ) ; printAnswer ( ) ; } public static void main ( String [ ] args ) { ( new Main ( ) ) . run ( ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( args ) ; } public void solve ( String [ ] args ) { MyScanner scanner = new MyScanner ( ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { break ; } for ( int y = 0 ; y <= k ; y ++ ) { if ( ( x + y ) > s ) { break ; } if ( ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = " " ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { try { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( " " ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; } public int nextInt ( ) { try { return Integer . parseInt ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public double nextDouble ( ) { try { return Double . parseDouble ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public long nextLong ( ) { try { return Long . parseLong ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } if ( arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] == arr [ 1 ] [ 0 ] - arr [ 1 ] [ 1 ] && arr [ 1 ] [ 0 ] - arr [ 1 ] [ 1 ] == arr [ 2 ] [ 0 ] - arr [ 2 ] [ 1 ] ) { if ( arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] == arr [ 1 ] [ 1 ] - arr [ 1 ] [ 2 ] && arr [ 1 ] [ 1 ] - arr [ 1 ] [ 2 ] == arr [ 2 ] [ 1 ] - arr [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; } int counter = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { counter ++ ; min = p [ i ] ; } } System . out . println ( counter ) ; } }
import java . io . * ; import java . util . Scanner ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int n1 = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int n3 = sc . nextInt ( ) ; int n4 = sc . nextInt ( ) ; int [ ] cnt = new int [ 10 ] ; cnt [ n1 ] ++ ; cnt [ n2 ] ++ ; cnt [ n3 ] ++ ; cnt [ n4 ] ++ ; if ( cnt [ 1 ] == 1 && cnt [ 9 ] == 1 && cnt [ 7 ] == 1 && cnt [ 4 ] == 1 ) { pr . println ( " YES " ) ; } else { pr . println ( " NO " ) ; } } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } static class Printer extends PrintWriter { Printer ( OutputStream out ) { super ( out ) ; } } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] N ; N = new int [ 4 ] ; N [ 0 ] = sc . nextInt ( ) ; N [ 1 ] = sc . nextInt ( ) ; N [ 2 ] = sc . nextInt ( ) ; N [ 3 ] = sc . nextInt ( ) ; Arrays . sort ( N ) ; if ( N [ 0 ] == 1 ) { if ( N [ 1 ] == 4 ) { if ( N [ 2 ] == 7 ) { if ( N [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] line = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( line [ 0 ] ) ; int S = Integer . parseInt ( line [ 1 ] ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int target = S - x - y ; if ( target >= 0 && target <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scn = new Scanner ( System . in ) ; boolean [ ] n = new boolean [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int a = scn . nextInt ( ) ; switch ( a ) { case 1 : n [ 0 ] = true ; break ; case 9 : n [ 1 ] = true ; break ; case 7 : n [ 2 ] = true ; break ; case 4 : n [ 3 ] = true ; break ; default : break ; } } boolean ans = true ; for ( int i = 0 ; i < 4 ; i ++ ) { ans &= n [ i ] ; } System . out . println ( ans ? " YES " : " NO " ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; final int n = scanner . nextInt ( ) ; int min = 200001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = scanner . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public Main ( ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { N [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ ] { 1 , 7 , 9 , 4 } ; boolean [ ] frag = new boolean [ ] { false , false , false , false } ; loop1 : for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( ans [ i ] == N [ j ] ) { continue loop1 ; } } System . out . println ( " NO " ) ; return ; } System . out . println ( " YES " ) ; } public static void main ( String [ ] args ) { Main main = new Main ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - i - j <= k ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int i = 0 ; while ( i < N ) { P [ i ] = sc . nextInt ( ) ; i ++ ; } int counter = 1 ; int min = P [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Map ; import java . util . HashMap ; public class Main { int k , s ; public static void main ( String args [ ] ) { new Main ( ) . solve ( ) ; } void solve ( ) { in ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int n = s - i - j ; if ( n >= 0 && n <= k ) cnt ++ ; } } out ( cnt ) ; } void in ( ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void out ( ) { } void out ( int n ) { System . out . println ( n ) ; } void out ( char c ) { System . out . print ( c ) ; } void out ( String s ) { System . out . println ( s ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s [ i ] = sc . next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " Y " ) ) cnt ++ ; } if ( cnt >= 1 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j == S ) { count ++ ; } else { int s = S - i - j ; if ( s >= 0 && s <= K ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] arg ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int total = 0 ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < K + 1 ; i ++ ) { list . add ( i ) ; } for ( int x = 0 ; x < K + 1 ; x ++ ) { for ( int y = 0 ; y < K + 1 ; y ++ ) { if ( S - ( list . get ( x ) + list . get ( y ) ) <= K && ( S - ( list . get ( x ) + list . get ( y ) ) >= 0 ) ) { total += 1 ; } } } System . out . println ( total ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int g [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { g [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { int a1 = i ; int b1 = g [ 0 ] [ 0 ] - a1 ; int b2 = g [ 0 ] [ 1 ] - a1 ; int b3 = g [ 0 ] [ 2 ] - a1 ; int a2 = g [ 1 ] [ 0 ] - b1 ; int a3 = g [ 2 ] [ 0 ] - b1 ; if ( g [ 0 ] [ 0 ] == a1 + b1 && g [ 0 ] [ 1 ] == a1 + b2 && g [ 0 ] [ 2 ] == a1 + b3 && g [ 1 ] [ 0 ] == a2 + b1 && g [ 1 ] [ 1 ] == a2 + b2 && g [ 1 ] [ 2 ] == a2 + b3 && g [ 2 ] [ 0 ] == a3 + b1 && g [ 2 ] [ 1 ] == a3 + b2 && g [ 2 ] [ 2 ] == a3 + b3 ) { ok = true ; break ; } } if ( ok ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long count = 0 ; int price = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( x == price ) { price ++ ; continue ; } int d = ( x - 1 ) / price ; count += d ; if ( price == 1 ) { price ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } if ( s < i + j ) break ; } if ( s < i ) break ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int w = 0 ; w <= k ; w ++ ) { if ( s - i - w >= 0 && s - i - w <= k ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans = ans * 2 + 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; sum = sum + C [ i ] [ j ] ; } } boolean result = false ; if ( sum % 3 == 0 ) { int D = sum / 3 ; if ( D == C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 0 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 1 ] ) { result = true ; } } System . out . println ( result ? " Yes " : " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; System . out . println ( sc . nextLine ( ) . contains ( " Y " ) ? " Four " : " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 && n [ 1 ] == 4 && n [ 2 ] == 7 && n [ 3 ] == 9 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . io . File ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; sc . nextLine ( ) ; String [ ] ary = sc . nextLine ( ) . split ( " " ) ; boolean flg_3 = true ; for ( String str : ary ) { if ( str . equals ( " Y " ) ) { flg_3 = false ; } } System . out . println ( flg_3 ? " Three " : " Four " ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long ret = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= Math . min ( k , s - x ) ; y ++ ) { if ( s - x - y <= k ) { ret ++ ; } } } pr . println ( ret ) ; } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean isYes = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { isYes = false ; } } } System . out . println ( isYes ? " Yes " : " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . util . stream . Stream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BHinaArare solver = new BHinaArare ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BHinaArare { public void solve ( int testNumber , Scanner in , PrintWriter out ) { out . println ( IntStream . range ( 0 , in . nextInt ( ) ) . mapToObj ( x -> in . next ( ) ) . distinct ( ) . count ( ) == 3 ? " Three " : " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int ans = 1 ; int min = P [ 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; long ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] min = new int [ n ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int a = 0 ; for ( int x = 0 ; x <= k ; ++ x ) { for ( int y = 0 ; y <= k ; ++ y ) { if ( s - x - y >= 0 && s - x - y <= k ) { ++ a ; } } } System . out . println ( a ) ; } }
import java . util . * ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int suces = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { suces = suces + 1 ; } } } System . out . println ( suces ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( final String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; long N ; N = sc . nextLong ( ) ; long [ ] P = new long [ ( int ) ( N ) ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } final Solver solver = new Solver ( ) ; solver . solve ( N , P ) ; } } class Solver { public void solve ( long N , long [ ] P ) { long ans = 0 ; long min = Long . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; Set < Character > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char c = sc . next ( ) . charAt ( 0 ) ; set . add ( c ) ; } if ( set . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else if ( set . size ( ) == 4 ) { System . out . println ( " Four " ) ; } } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = P [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( min > P [ j ] ) { count ++ ; min = P [ j ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int count = 0 ; sc . nextLine ( ) ; String line = sc . nextLine ( ) ; String [ ] array = line . split ( " " ) ; int pi ; int min = a + 1 ; for ( int i = 0 ; i < a ; i ++ ) { pi = Integer . parseInt ( array [ i ] ) ; if ( min > pi ) { count ++ ; min = pi ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int z = 0 , y = 0 , fin = 0 , a1 = 0 , a2 = 0 ; while ( z < 3 ) { while ( y < 3 ) { c [ z ] [ y ] = stdIn . nextInt ( ) ; y ++ ; } y = 0 ; z ++ ; } z = 1 ; a1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; a2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; while ( z < 3 ) { if ( c [ z ] [ 0 ] - c [ z ] [ 1 ] != a1 ) { fin = 1 ; break ; } if ( c [ z ] [ 1 ] - c [ z ] [ 2 ] != a2 ) { fin = 1 ; break ; } z ++ ; } if ( fin == 1 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = in . nextInt ( ) ; for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = arr [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = arr [ 0 ] [ j ] - a [ 0 ] ; for ( int k = 0 ; k < 3 ; k ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ k ] [ j ] != a [ k ] + b [ j ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } a = null ; b = null ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( " " ) ; int k = Integer . parseInt ( line [ 0 ] ) ; int s = Integer . parseInt ( line [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void run ( int C [ ] [ ] ) { int r [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int d = C [ i ] [ j ] - C [ i ] [ j == 2 ? 0 : j + 1 ] ; if ( i == 0 ) { r [ j ] = d ; } else if ( d != r [ j ] ) { System . out . println ( " No " ) ; return ; } } } for ( int j = 0 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) { int d = C [ i ] [ j ] - C [ i == 2 ? 0 : i + 1 ] [ j ] ; if ( j == 0 ) { r [ i ] = d ; } else if ( d != r [ i ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } public static void runInput ( ) { Scanner scanner = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scanner . nextInt ( ) ; } } run ( C ) ; } public static void main ( String args [ ] ) { runInput ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int buff = sc . nextInt ( ) ; if ( a [ buff ] != 0 ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } a [ buff ] ++ ; } if ( a [ 1 ] + a [ 9 ] + a [ 7 ] + a [ 4 ] == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) throws IOException { ReaderB . init ( System . in ) ; Set < Character > arare = new HashSet < > ( ) ; int n = ReaderB . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arare . add ( ReaderB . next ( ) . charAt ( 0 ) ) ; } System . out . println ( arare . size ( ) == 4 ? " Four " : " Three " ) ; } } class ReaderB { private static BufferedReader reader ; private static StringTokenizer tokenizer ; static void init ( InputStream inputStream ) { reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; tokenizer = new StringTokenizer ( " " ) ; } static String next ( ) throws IOException { String read ; while ( ! tokenizer . hasMoreTokens ( ) ) { read = reader . readLine ( ) ; if ( read == null || read . equals ( " " ) ) return " -1 " ; tokenizer = new StringTokenizer ( read ) ; } return tokenizer . nextToken ( ) ; } static int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } static long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } static String line ( ) throws IOException { return reader . readLine ( ) ; } static double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String arare [ ] = new String [ N ] ; boolean answer = false ; for ( int i = 0 ; i < N ; i ++ ) { arare [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( arare [ i ] . equals ( " Y " ) ) { answer = true ; } } if ( answer == true ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { new Main ( ) . solve ( sc ) ; } } void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; Set < String > sSet = new HashSet < > ( 4 ) ; for ( int i = 0 ; i < n ; i ++ ) { sSet . add ( sc . next ( ) ) ; } System . out . println ( sSet . size ( ) == 3 ? " Three " : " Four " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Character > list = new ArrayList < Character > ( ) ; while ( n -- > 0 ) list . add ( sc . next ( ) . charAt ( 0 ) ) ; List < Character > list2 = new ArrayList < Character > ( new HashSet < > ( list ) ) ; if ( list2 . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else if ( list2 . size ( ) == 3 ) { System . out . println ( " Three " ) ; } } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( list ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( list . get ( i ) <= min ) { min = list . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] cc = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int k = 1 ; k <= 3 ; k ++ ) { cc [ i ] [ k ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { int a = cc [ 1 ] [ 1 ] - i ; int b = cc [ 1 ] [ 2 ] - i ; int c = cc [ 1 ] [ 3 ] - i ; int d = cc [ 2 ] [ 1 ] - j ; int e = cc [ 2 ] [ 2 ] - j ; int f = cc [ 2 ] [ 3 ] - j ; int g = cc [ 3 ] [ 1 ] - k ; int h = cc [ 3 ] [ 2 ] - k ; int l = cc [ 3 ] [ 3 ] - k ; if ( a == d && d == g && b == e && e == h && c == f && f == l ) { System . out . println ( " Yes " ) ; break loop ; } } } if ( i == 100 ) { System . out . println ( " No " ) ; break ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int sum2 = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] ; int sum3 = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] ; if ( sum1 == sum2 && sum2 == sum3 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } boolean ok = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) ok = false ; } } if ( ok ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 9999999 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { long n = sc . nextLong ( ) ; List < Long > an = new ArrayList < > ( ) ; for ( long i = 0 ; i < n ; i ++ ) { an . add ( sc . nextLong ( ) ) ; } long result = 0 ; long min = Integer . MAX_VALUE ; for ( long l : an ) { if ( min > l ) { result ++ ; min = l ; } } System . out . println ( result ) ; } } static long lcm ( long a , long b ) { long temp ; long c = a ; c *= b ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return c / b ; } static long gcd ( long a , long b ) { long temp ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return b ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int l = s - ( i + j ) ; if ( l >= 0 && l <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . util . function . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { if ( i > S ) break ; for ( int j = 0 ; j < K + 1 ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { int z = s ; z = z - i - j ; if ( z >= 0 && z <= n ) counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int j , cnt = 0 ; int min = 999999999 ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( min == p [ i ] ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < p . length ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int count = 1 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( min > p [ i ] ) { min = p [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ret = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && s - x - y >= 0 ) ret ++ ; } } System . out . println ( ret ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static char [ ] cs = { '.' , '#' } ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = Integer . parseInt ( sc . next ( ) ) ; } long ans = A [ 0 ] - 1 ; int min = 2 ; for ( int i = 1 ; i < N ; ++ i ) { if ( A [ i ] == min ) { ++ min ; continue ; } ans += ( A [ i ] - 1 ) / min ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean flag = false ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { flag = true ; } } if ( flag ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String colorNumber = " Three " ; int a = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String str = sc . next ( ) ; if ( str . equals ( " Y " ) ) a = 1 ; if ( a == 1 ) { colorNumber = " Four " ; break ; } } System . out . println ( colorNumber ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int p = in . nextInt ( ) ; if ( p <= min ) { min = p ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int adis1 = 0 ; int adis2 = 0 ; int bdis1 = 0 ; int bdis2 = 0 ; int [ ] [ ] nums = new int [ 3 ] [ 3 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { nums [ i ] [ j ] = scan . nextInt ( ) ; } } adis1 = nums [ 1 ] [ 0 ] - nums [ 0 ] [ 0 ] ; adis2 = nums [ 2 ] [ 0 ] - nums [ 1 ] [ 0 ] ; for ( int j = 1 ; j < 3 ; j ++ ) { if ( nums [ 1 ] [ j ] - nums [ 0 ] [ j ] != adis1 ) { answer = " No " ; } if ( nums [ 2 ] [ j ] - nums [ 1 ] [ j ] != adis2 ) { answer = " No " ; } } bdis1 = nums [ 0 ] [ 1 ] - nums [ 0 ] [ 0 ] ; bdis2 = nums [ 0 ] [ 2 ] - nums [ 0 ] [ 1 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( nums [ i ] [ 1 ] - nums [ i ] [ 0 ] != bdis1 ) { answer = " No " ; } if ( nums [ i ] [ 2 ] - nums [ i ] [ 1 ] != bdis2 ) { answer = " No " ; } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( 0 <= num && num <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int l = S - i - j ; if ( l >= 0 && l <= K && i + j + l == S ) { count ++ ; } } } System . out . println ( count ) ; } public static int sample ( int n ) { return n ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int total = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { total += Math . max ( Math . min ( K , S - X ) - Math . max ( S - K - X , 0 ) + 1 , 0 ) ; } System . out . println ( total ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ns [ ] = new int [ n ] ; int min ; int nc = 1 ; boolean edge ; boolean edge2 = true ; for ( int i = 0 ; i < n ; i ++ ) ns [ i ] = sc . nextInt ( ) ; min = ns [ 0 ] ; if ( min != 1 ) { for ( int i = 0 ; i < n && edge2 ; i ++ ) { edge = true ; if ( ns [ i ] == 1 ) { nc ++ ; edge2 = false ; } else if ( min > ns [ i ] ) { nc ++ ; min = ns [ i ] ; } } } System . out . println ( nc ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int sum = 0 ; int min = - 1 ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int b = scan . nextInt ( ) ; int [ ] g = put ( b , min ) ; sum += g [ 0 ] ; min = g [ 1 ] ; } System . out . println ( sum ) ; } public static int [ ] put ( int a , int b ) { int [ ] g = new int [ 2 ] ; if ( b == - 1 ) { g [ 1 ] = a ; g [ 0 ] = 1 ; return g ; } if ( a <= b ) { g [ 1 ] = a ; g [ 0 ] = 1 ; return g ; } g [ 1 ] = b ; g [ 0 ] = 0 ; return g ; } }
import java . util . * ; public class Main { static int c [ ] [ ] ; public static boolean judge ( int tmpa , int tmpb ) { int b [ ] = new int [ 3 ] ; int a [ ] = new int [ 3 ] ; a [ 0 ] = tmpa ; b [ 0 ] = tmpb ; for ( int i = 1 ; i < 3 ; ++ i ) b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { int tmp = a [ i ] + b [ j ] ; if ( c [ i ] [ j ] != tmp ) return false ; } } return true ; } public static boolean solve ( ) { for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; ++ i ) { if ( judge ( i , c [ 0 ] [ 0 ] - i ) ) return true ; } return false ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) c [ i ] [ j ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 1 ; String ans [ ] = { " Yes " , " No " } ; if ( solve ( ) ) a = 0 ; System . out . println ( ans [ a ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int cnt = 0 ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( ( S - x - y >= 0 ) && ( S - x - y <= K ) ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . math . * ; import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws FileNotFoundException { new Main ( ) . run ( ) ; } class SegTree { int n = 1 ; int [ ] v ; public SegTree ( int n ) { while ( this . n < n ) this . n *= 2 ; v = new int [ 2 * this . n - 1 ] ; } void set ( int k ) { v [ k ] = 1 ; while ( k > 0 ) { k = ( k - 1 ) / 2 ; v [ k ] = v [ 2 * k + 1 ] + v [ 2 * k + 2 ] ; } } int query ( int a , int b ) { return query ( 0 , n , a , b , 0 ) ; } int query ( int l , int r , int a , int b , int k ) { if ( r <= a || b <= l ) return 0 ; else if ( a <= l && r <= b ) return v [ k ] ; else { int vl = query ( l , ( l + r ) / 2 , a , b , 2 * k + 1 ) ; int vr = query ( ( l + r ) / 2 , r , a , b , 2 * k + 2 ) ; return vl + vr ; } } } void run ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE / 3 ; int ans = 0 ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; -- P [ i ] ; if ( min >= P [ i ] ) ++ ans ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean flag = false ; String arare [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arare [ i ] = sc . next ( ) ; } for ( int k = 0 ; k < arare . length ; k ++ ) { if ( arare [ k ] . equals ( " Y " ) ) { flag = true ; } } if ( flag ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } sc . close ( ) ; sc = null ; int a1 , a2 , a3 , b1 , b2 , b3 ; String ans = " No " ; LABEL : for ( a1 = 0 ; a1 <= 100 ; a1 ++ ) { for ( a2 = 0 ; a2 <= 100 ; a2 ++ ) { for ( a3 = 0 ; a3 <= 100 ; a3 ++ ) { b1 = c [ 0 ] [ 0 ] - a1 ; b2 = c [ 0 ] [ 1 ] - a1 ; b3 = c [ 0 ] [ 2 ] - a1 ; if ( a2 + b1 == c [ 1 ] [ 0 ] && a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b1 == c [ 2 ] [ 0 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { ans = " Yes " ; break LABEL ; } } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { ans ++ ; min = a [ i ] ; } } System . out . println ( ans + 1 ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] strlist = str . split ( " " ) ; int k = Integer . parseInt ( strlist [ 0 ] ) ; int s = Integer . parseInt ( strlist [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count = count + 1 ; continue ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; HashSet < Character > hashSet = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String S = scanner . next ( ) ; hashSet . add ( S . charAt ( 0 ) ) ; } if ( hashSet . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; class Main { static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int K = in . nextInt ( ) , S = in . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j >= S - K && i + j <= S ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] p = in . readIntArray ( n ) ; int answer = 0 ; for ( int i = 0 , min = Integer . MAX_VALUE ; i < n ; i ++ ) { if ( p [ i ] < min ) answer ++ ; min = Math . min ( min , p [ i ] ) ; } out . println ( answer ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] readIntArray ( int n ) { int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = nextInt ( ) ; } return x ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; double dMax = Double . MIN_VALUE ; double dMin = Double . MAX_VALUE ; Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int a = s - i - j ; if ( a <= k && a >= 0 ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] arare = new String [ N ] ; int counterP = 0 ; int counterW = 0 ; int counterG = 0 ; int counterY = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String color = sc . next ( ) ; arare [ i ] = color ; } for ( int j = 0 ; j < N ; j ++ ) { if ( arare [ j ] . equals ( " P " ) ) { counterP ++ ; } else if ( arare [ j ] . equals ( " W " ) ) { counterW ++ ; } else if ( arare [ j ] . equals ( " G " ) ) { counterG ++ ; } else if ( arare [ j ] . equals ( " Y " ) ) { counterY ++ ; } } int count = 0 ; if ( counterY == 0 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int D = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; int [ ] T = new int [ D ] ; for ( int i = 0 ; i < D ; ++ i ) { T [ i ] = sc . nextInt ( ) ; } int [ ] A = new int [ N ] ; int [ ] B = new int [ N ] ; int [ ] C = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = sc . nextInt ( ) ; B [ i ] = sc . nextInt ( ) ; C [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ D ] [ N ] ; for ( int [ ] a : dp ) { Arrays . fill ( a , - 1 ) ; } for ( int i = 0 ; i < N ; ++ i ) { if ( A [ i ] <= T [ 0 ] && T [ 0 ] <= B [ i ] ) dp [ 0 ] [ i ] = 0 ; } for ( int i = 1 ; i < D ; ++ i ) { for ( int j = 0 ; j < N ; ++ j ) { if ( A [ j ] <= T [ i ] && T [ i ] <= B [ j ] ) { for ( int k = 0 ; k < N ; ++ k ) { if ( dp [ i - 1 ] [ k ] < 0 ) continue ; dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + Math . abs ( C [ j ] - C [ k ] ) ) ; } } } } int ans = 0 ; for ( int i = 0 ; i < N ; ++ i ) { ans = Math . max ( ans , dp [ D - 1 ] [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { result ++ ; min = p ; } } sc . close ( ) ; System . out . println ( result ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; } boolean f1 = false , f2 = false , f3 = false , f4 = false ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( num [ i ] == 1 ) f1 = true ; else if ( num [ i ] == 9 ) f2 = true ; else if ( num [ i ] == 7 ) f3 = true ; else if ( num [ i ] == 4 ) f4 = true ; } if ( f1 && f2 && f3 && f4 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 200000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = sc . nextInt ( ) ; if ( min >= current ) { count ++ ; min = current ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Integer . parseInt ; public class Main { static int [ ] nums ; static boolean [ ] used ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String line ; String [ ] words ; words = br . readLine ( ) . split ( " " ) ; nums = new int [ 9 ] ; used = new boolean [ 10 ] ; for ( int i = 0 ; i < words . length ; i ++ ) { nums [ i ] = parseInt ( words [ i ] ) ; if ( nums [ i ] != - 1 ) used [ nums [ i ] ] = true ; } System . out . println ( solve ( 0 ) ) ; } static int solve ( int idx ) { if ( idx == nums . length ) { int a = nums [ 3 ] * 100 + ( nums [ 1 ] + nums [ 4 ] ) * 10 + nums [ 0 ] + nums [ 2 ] + nums [ 5 ] ; int b = nums [ 6 ] * 100 + nums [ 7 ] * 10 + nums [ 8 ] ; if ( a == b ) return 1 ; else return 0 ; } int ret = 0 ; if ( nums [ idx ] == - 1 ) { for ( int k = 1 ; k <= 9 ; k ++ ) { if ( ! used [ k ] ) { nums [ idx ] = k ; used [ k ] = true ; ret += solve ( idx + 1 ) ; nums [ idx ] = - 1 ; used [ k ] = false ; } } } else { ret = solve ( idx + 1 ) ; } return ret ; } }
import java . io . * ; import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) P [ n ] = sc . nextInt ( ) ; int ans = 0 ; int min = 1000000 ; for ( int n = 0 ; n < N ; n ++ ) { if ( P [ n ] < min ) ans ++ ; min = Math . min ( min , P [ n ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static final int MOD = 1000000007 ; public static ArrayList < Integer > list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int n = parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = parseInt ( sc . next ( ) ) ; } sc . close ( ) ; int cnt = 0 ; int mn = 200001 ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= mn ) { cnt ++ ; mn = p [ i ] ; } } out . println ( cnt ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int count = 0 ; for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { a [ 0 ] = i ; b [ 0 ] = j ; if ( a [ 0 ] + b [ 0 ] != c [ 0 ] [ 0 ] ) continue ; else { a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; for ( int k = 1 ; k < 3 ; k ++ ) { for ( int l = 1 ; l < 3 ; l ++ ) { if ( c [ k ] [ l ] == a [ k ] + b [ l ] ) { count ++ ; } else { count = 0 ; } } } if ( count == 4 ) { System . out . println ( " Yes " ) ; return ; } count = 0 ; } } } System . out . println ( " No " ) ; sc . close ( ) ; } void debug ( Object ... o ) { System . out . println ( Arrays . deepToString ( o ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . Scanner ; import java . util . Stack ; public class Main { final int [ ] [ ] dir = { { - 1 , - 1 } , { - 1 , 1 } , { 1 , - 1 } , { 1 , 1 } } ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = readInt ( sc ) ; int s = readInt ( sc ) ; int cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - a - b ; if ( c >= 0 && c <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } static int readInt ( Scanner sc ) { return Integer . parseInt ( sc . next ( ) ) ; } static double calcDistance ( Pair p1 , Pair p2 ) { return Math . pow ( Math . pow ( p1 . getX ( ) - p2 . getX ( ) , 2 ) + Math . pow ( p1 . getY ( ) - p2 . getY ( ) , 2 ) , 0.5 ) ; } } class Pair { private int x ; private int y ; public int getX ( ) { return x ; } public void setX ( int x ) { this . x = x ; } public int getY ( ) { return y ; } public void setY ( int y ) { this . y = y ; } public Pair ( ) { } public Pair ( int x , int y ) { this . x = x ; this . y = y ; } }
import java . util . * ; class Main { static int [ ] [ ] c ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; a [ 0 ] = sc . nextInt ( ) ; a [ 1 ] = sc . nextInt ( ) ; a [ 2 ] = sc . nextInt ( ) ; a [ 3 ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; String ans = ( a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ) ? " YES " : " NO " ; System . out . println ( ans ) ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; br . readLine ( ) ; String s = br . readLine ( ) ; if ( s . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { private static boolean debug = false ; private static boolean elapsed = false ; private static PrintWriter _out = new PrintWriter ( System . out ) ; private static PrintWriter _err = new PrintWriter ( System . err ) ; private void solve ( Scanner sc ) { int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; ++ x ) { for ( int y = 0 ; y <= K ; ++ y ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ++ cnt ; } } } _out . println ( cnt ) ; } private long C ( long n , long r ) { long res = 1 ; for ( long i = n ; i > n - r ; -- i ) { res *= i ; } for ( long i = r ; i > 1 ; -- i ) { res /= i ; } return res ; } private long P ( long n , long r ) { long res = 1 ; for ( long i = n ; i > n - r ; -- i ) { res *= i ; } return res ; } public static void main ( String [ ] args ) { long S = System . currentTimeMillis ( ) ; Scanner sc = new Scanner ( System . in ) ; new Main ( ) . solve ( sc ) ; _out . flush ( ) ; long G = System . currentTimeMillis ( ) ; if ( elapsed ) { _err . println ( ( G - S ) + " ms " ) ; } _err . flush ( ) ; } }
import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . InputMismatchException ; import java . util . List ; import java . util . NoSuchElementException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; int [ ] S = new int [ N ] ; boolean flg = false ; for ( int i = 0 ; i < N ; i ++ ) { flg |= s . next ( ) . equals ( " Y " ) ; } System . out . println ( flg ? " Four " : " Three " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 1 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 3 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 3 ] [ 3 ] - c [ 3 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b = true ; b &= a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; System . out . println ( b ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main implements Runnable { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , " " , 128 * 1024 * 1024 ) . start ( ) ; } public void run ( ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int a1 , a2 , a3 , b1 , b2 , b3 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a1 = Math . min ( c [ 0 ] [ 0 ] , Math . min ( c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ) ) ; a2 = Math . min ( c [ 1 ] [ 0 ] , Math . min ( c [ 1 ] [ 1 ] , c [ 1 ] [ 2 ] ) ) ; a3 = Math . min ( c [ 2 ] [ 0 ] , Math . min ( c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] ) ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int min = i == 0 ? a1 : i == 1 ? a2 : a3 ; c [ i ] [ j ] -= min ; } } for ( int j = 0 ; j < 3 ; j ++ ) { int tmp = c [ 0 ] [ j ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( c [ i ] [ j ] != tmp ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { InputStream in = System . in ; Scanner sc = new Scanner ( in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int num = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { num ++ ; } } } System . out . println ( num ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final int N = 3 ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] c = new int [ N ] [ N ] ; IntStream . range ( 0 , N ) . forEach ( i -> IntStream . range ( 0 , N ) . forEach ( j -> c [ i ] [ j ] = scanner . nextInt ( ) ) ) ; boolean result = true ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int diff2 = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) != diff1 ) { result = false ; break ; } if ( ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) != diff2 ) { result = false ; break ; } } } System . out . println ( result ? " Yes " : " No " ) ; } } }
import java . io . IOException ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; } private void run ( ) throws IOException { Scanner scanner = new Scanner ( System . in ) ; n = scanner . nextInt ( ) ; m = scanner . nextInt ( ) ; t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) t [ i ] = scanner . nextInt ( ) ; d = new int [ 3 ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) { int a = scanner . nextInt ( ) ; d [ j ] [ i ] = a ; } dp = new int [ n ] [ m ] ; for ( int [ ] dp1 : dp ) Arrays . fill ( dp1 , - 1 ) ; int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( t [ 0 ] < d [ 0 ] [ i ] || d [ 1 ] [ i ] < t [ 0 ] ) continue ; ans = Math . max ( ans , slove ( 1 , i ) ) ; } System . out . println ( ans ) ; } private int slove ( int day , int x ) { if ( day == n ) return 0 ; if ( dp [ day ] [ x ] != - 1 ) return dp [ day ] [ x ] ; int ret = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( t [ day ] < d [ 0 ] [ i ] || d [ 1 ] [ i ] < t [ day ] ) continue ; ret = Math . max ( ret , slove ( day + 1 , i ) + Math . abs ( d [ 2 ] [ x ] - d [ 2 ] [ i ] ) ) ; } return dp [ day ] [ x ] = ret ; } int n , m ; int [ ] t ; int [ ] [ ] d , dp ; }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { ans += 1 ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 , z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z >= 0 && z <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int X = 0 ; X <= Math . min ( K , S ) ; X ++ ) { for ( int Y = 0 ; Y <= Math . min ( K , S - X ) ; Y ++ ) { int Z = S - X - Y ; if ( 0 <= Z && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , S - 2 * K ) ; x <= Math . min ( K , S ) ; x ++ ) { int left = S - x ; ans += Math . min ( K , left ) - Math . max ( 0 , left - K ) + 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] ci = new int [ 3 ] [ 3 ] ; for ( int c = 0 ; c < 3 ; c ++ ) { ci [ c ] [ 0 ] = sc . nextInt ( ) ; ci [ c ] [ 1 ] = sc . nextInt ( ) ; ci [ c ] [ 2 ] = sc . nextInt ( ) ; } int count = 0 ; for ( int b = 0 ; b < 2 ; b ++ ) { if ( ( ci [ b + 1 ] [ 0 ] - ci [ b ] [ 0 ] ) != ( ci [ b + 1 ] [ 1 ] - ci [ b ] [ 1 ] ) || ( ci [ b + 1 ] [ 1 ] - ci [ b ] [ 1 ] ) != ( ci [ b + 1 ] [ 2 ] - ci [ b ] [ 2 ] ) ) { count = 1 ; } } for ( int b = 0 ; b < 2 ; b ++ ) { if ( ( ci [ 0 ] [ b + 1 ] - ci [ 0 ] [ b ] ) != ( ci [ 1 ] [ b + 1 ] - ci [ 1 ] [ b ] ) || ( ci [ 1 ] [ b + 1 ] - ci [ 1 ] [ b ] ) != ( ci [ 2 ] [ b + 1 ] - ci [ 2 ] [ b ] ) ) { count = 1 ; } } if ( count == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean i = true ; String [ ] s = new String [ N ] ; for ( int l = 0 ; l < N ; l ++ ) { s [ l ] = sc . next ( ) ; if ( s [ l ] . equals ( " Y " ) ) i = false ; } sc . close ( ) ; if ( i ) System . out . println ( " Three " ) ; else System . out . println ( " Four " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) { break ; } if ( S - ( x + y ) <= K ) { count ++ ; } } } out . println ( count ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { ans ++ ; } min = Math . min ( min , p [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , i , j ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - ( i + j ) <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . File ; import java . io . IOException ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . Deque ; import java . util . HashMap ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean ans = true ; for ( int i = 0 ; i < N ; i ++ ) { String S = sc . next ( ) ; if ( S . equals ( " Y " ) ) { ans = false ; break ; } } System . out . println ( ans ? " Three " : " Four " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int index = 0 ; int x , y , z ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { index ++ ; } } } System . out . print ( index ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int N = in . nextInt ( ) ; String [ ] S = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = in . next ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] . equals ( " Y " ) ) { out . println ( " Four " ) ; return ; } } out . println ( " Three " ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scan . nextInt ( ) ; } } boolean found = true ; int b1 = map [ 0 ] [ 0 ] ; int b2 = map [ 0 ] [ 1 ] ; int b3 = map [ 0 ] [ 2 ] ; int a1 = 0 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] != a2 + b2 || map [ 1 ] [ 2 ] != a2 + b3 || map [ 2 ] [ 1 ] != a3 + b2 || map [ 2 ] [ 2 ] != a3 + b3 ) { found = false ; } System . out . println ( found ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; } if ( num [ 0 ] - num [ 3 ] == num [ 1 ] - num [ 4 ] && num [ 2 ] - num [ 5 ] == num [ 1 ] - num [ 4 ] && num [ 0 ] - num [ 3 ] == num [ 2 ] - num [ 5 ] ) { if ( num [ 0 ] - num [ 6 ] == num [ 1 ] - num [ 7 ] && num [ 2 ] - num [ 8 ] == num [ 1 ] - num [ 7 ] && num [ 0 ] - num [ 6 ] == num [ 2 ] - num [ 8 ] ) { if ( num [ 3 ] - num [ 6 ] == num [ 4 ] - num [ 7 ] && num [ 5 ] - num [ 8 ] == num [ 4 ] - num [ 7 ] && num [ 3 ] - num [ 6 ] == num [ 5 ] - num [ 8 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String ans = " Three " ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { ans = " Four " ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = s . nextInt ( ) ; } } int flag = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ) != ( arr [ i + 1 ] [ 0 ] - arr [ i + 1 ] [ 1 ] ) ) flag = 1 ; if ( ( arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ) != ( arr [ i + 1 ] [ 1 ] - arr [ i + 1 ] [ 2 ] ) ) flag = 1 ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ 0 ] [ i ] - arr [ 1 ] [ i ] ) != ( arr [ 0 ] [ i + 1 ] - arr [ 1 ] [ i + 1 ] ) ) flag = 1 ; if ( ( arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ) != ( arr [ 1 ] [ i + 1 ] - arr [ 2 ] [ i + 1 ] ) ) flag = 1 ; } if ( flag != 0 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] min_p = new int [ n ] ; int counter = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } min_p [ 0 ] = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i >= 1 ) { if ( min_p [ i - 1 ] > p [ i ] ) { min_p [ i ] = p [ i ] ; } else { min_p [ i ] = min_p [ i - 1 ] ; } } if ( p [ i ] == min_p [ i ] ) { counter ++ ; } } System . out . println ( counter ) ; sc . close ( ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , Scanner sc , PrintWriter pw ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) c ++ ; min = Math . min ( min , arr [ i ] ) ; } pw . println ( c ) ; } } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( FileReader r ) { br = new BufferedReader ( r ) ; } public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N ; N = sc . nextInt ( ) ; ArrayList < String > List = new ArrayList < String > ( ) ; for ( int a = 0 ; a < N ; a ++ ) { String moji = sc . next ( ) ; List . add ( moji ) ; } if ( List . contains ( " Y " ) == true ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Long > list = new ArrayList < Long > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { list . add ( sc . nextLong ( ) ) ; } for ( int a1 = 0 ; a1 <= list . get ( 0 ) ; a1 ++ ) { List < Long > list2 = new ArrayList < Long > ( ) ; long b1 = list . get ( 0 ) - a1 ; long b2 = list . get ( 1 ) - a1 ; long b3 = list . get ( 2 ) - a1 ; long a2 = list . get ( 4 ) - b2 ; long a3 = list . get ( 8 ) - b3 ; list2 . add ( a1 + b1 ) ; list2 . add ( a1 + b2 ) ; list2 . add ( a1 + b3 ) ; list2 . add ( a2 + b1 ) ; list2 . add ( a2 + b2 ) ; list2 . add ( a2 + b3 ) ; list2 . add ( a3 + b1 ) ; list2 . add ( a3 + b2 ) ; list2 . add ( a3 + b3 ) ; boolean flag = true ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( list . get ( i ) < 0 || list2 . get ( i ) < 0 ) { flag = false ; break ; } if ( ! list . get ( i ) . equals ( list2 . get ( i ) ) ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; List < Character > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scan . next ( ) . charAt ( 0 ) ) ; } if ( list . contains ( 'Y' ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = - 100 ; i <= 100 ; i ++ ) { for ( int j = - 100 ; j <= 100 ; j ++ ) { for ( int k = - 100 ; k <= 100 ; k ++ ) { int [ ] b = new int [ 3 ] ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 1 ] [ 1 ] - j ; b [ 2 ] = c [ 2 ] [ 2 ] - k ; if ( i + b [ 0 ] == c [ 0 ] [ 0 ] && i + b [ 1 ] == c [ 0 ] [ 1 ] && i + b [ 2 ] == c [ 0 ] [ 2 ] && j + b [ 0 ] == c [ 1 ] [ 0 ] && j + b [ 1 ] == c [ 1 ] [ 1 ] && j + b [ 2 ] == c [ 1 ] [ 2 ] && k + b [ 0 ] == c [ 2 ] [ 0 ] && k + b [ 1 ] == c [ 2 ] [ 1 ] && k + b [ 2 ] == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ 2 - j ] -= c [ i ] [ 0 ] ; } } if ( c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] == c [ 2 ] [ 1 ] && c [ 0 ] [ 2 ] == c [ 1 ] [ 2 ] && c [ 0 ] [ 2 ] == c [ 2 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; char arr [ ] = new char [ n ] ; ArrayList < Character > a = new ArrayList < Character > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan . next ( ) . charAt ( 0 ) ; if ( ! a . contains ( arr [ i ] ) ) { a . add ( arr [ i ] ) ; } } System . out . println ( a . size ( ) == 4 ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { atcode ( ) ; } public static void atcode ( ) { String [ ] info = new Scanner ( System . in ) . nextLine ( ) . split ( " " ) ; Integer max = Integer . valueOf ( info [ 0 ] ) ; Integer sum = Integer . valueOf ( info [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= max ; x ++ ) { for ( int y = 0 ; y <= max ; y ++ ) { int z = sum - x - y ; if ( z >= 0 && z <= max ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { private static BufferedReader br ; private static StringTokenizer tokenizer ; private static void solve ( ) throws IOException { int n = nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } int min = arr [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , arr [ i ] ) ; if ( min >= arr [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solve ( ) ; } public static String next ( ) throws IOException { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { String line = br . readLine ( ) ; if ( line == null ) throw new IOException ( ) ; tokenizer = new StringTokenizer ( line ) ; } return tokenizer . nextToken ( ) ; } public static int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public static long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public static double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int num = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) num ++ ; } } System . out . println ( num ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = 4 ; int obj [ ] = { 1 , 7 , 9 , 4 } ; int arr [ ] = new int [ 4 ] ; boolean judge [ ] = new boolean [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = scan . nextInt ( ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( arr [ i ] == obj [ j ] ) { judge [ j ] = true ; break ; } } } boolean flag = true ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( ! judge [ j ] ) { System . out . println ( " NO " ) ; flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) { res ++ ; } } } System . out . println ( res ) ; } }
import java . util . PriorityQueue ; import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - x - y && S - x - y <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int k = scanner . nextInt ( ) , s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( ( z >= 0 ) && ( z <= k ) ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 ) { if ( n [ 1 ] == 4 ) { if ( n [ 2 ] == 7 ) { if ( n [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int board [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int y = 0 ; y < 3 ; ++ y ) { for ( int x = 0 ; x < 3 ; ++ x ) { board [ x ] [ y ] = sc . nextInt ( ) ; } } if ( search ( board ) ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; } public static boolean search ( int board [ ] [ ] ) { int k = 0 ; for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ 0 ] [ j ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ i ] [ j ] - board [ i ] [ 0 ] ) { return false ; } } } } for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ j ] [ 0 ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ j ] [ i ] - board [ 0 ] [ i ] ) { return false ; } } } } return true ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean state = true ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) state = false ; } System . out . println ( state ? " Three " : " Four " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . A ( ) ; } void A ( ) { int N ; Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int a = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { a ++ ; min = P [ i ] ; } } System . out . println ( a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min ) { count ++ ; min = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { ans ++ ; min = a [ i ] ; } } System . out . println ( ans + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int a [ ] = new int [ N ] ; int nowp = 1 ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == nowp ) { nowp ++ ; continue ; } if ( a [ i ] < nowp ) { continue ; } if ( a [ i ] % nowp == 0 || nowp == 1 ) { ans = ans + a [ i ] / nowp - 1 ; if ( nowp == 1 ) { nowp ++ ; } } else { ans = ans + a [ i ] / nowp ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int stack ; int start = 0 ; if ( s - 2 * k > 0 ) start = s - 2 * k ; int end = k ; if ( s < k ) end = s ; for ( int x = 0 ; x <= k ; x ++ ) { stack = s - x ; if ( stack <= 2 * k && stack >= 0 ) { if ( stack <= k ) count += stack + 1 ; else count += k - ( stack - k ) + 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; sc . nextLine ( ) ; String S = sc . nextLine ( ) ; String [ ] arare = S . split ( " " , 0 ) ; List < String > listA = new ArrayList < String > ( ) ; for ( int i = 0 ; i < arare . length ; i ++ ) { listA . add ( arare [ i ] ) ; } List < String > listB = new ArrayList < String > ( new HashSet < > ( listA ) ) ; if ( listB . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else if ( listB . size ( ) == 4 ) { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) == 3 ? " Three " : " Four " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; boolean isA = false , isB = false , isC = false , isD = false ; int [ ] index = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { index [ i ] = scanner . nextInt ( ) ; } for ( int i = 0 ; i < 4 ; i ++ ) { int idx = index [ i ] ; if ( idx == 1 ) { isA = true ; } else if ( idx == 9 ) { isB = true ; } else if ( idx == 7 ) { isC = true ; } else if ( idx == 4 ) { isD = true ; } } System . out . println ( isA && isB && isC && isD ? " YES " : " NO " ) ; } }
import java . io . * ; import java . util . * ; public class Main implements Runnable { private void solve ( ) throws IOException { int K = nextInt ( ) ; int S = nextInt ( ) ; long ret = 0L ; for ( int a = 0 ; a <= K ; ++ a ) { for ( int b = 0 ; b <= K ; ++ b ) { if ( a + b > S ) continue ; int left = S - ( a + b ) ; if ( left <= K ) ++ ret ; } } writer . println ( ret ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } BufferedReader reader ; StringTokenizer tokenizer ; PrintWriter writer ; public void run ( ) { try { reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; tokenizer = null ; writer = new PrintWriter ( System . out ) ; solve ( ) ; reader . close ( ) ; writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } } int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) throws IOException { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) throws IOException { return Double . parseDouble ( nextToken ( ) ) ; } short nextShort ( ) throws IOException { return Short . parseShort ( nextToken ( ) ) ; } String nextToken ( ) throws IOException { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } return tokenizer . nextToken ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; long A [ ] = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scan . nextLong ( ) ; } long res = 0 ; long min = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { res += A [ i ] - 1 ; min = 1 ; continue ; } if ( min + 1 == A [ i ] ) { min = A [ i ] ; } else if ( min + 1 < A [ i ] ) { res += ( A [ i ] - 1 ) / ( min + 1 ) ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { static int [ ] [ ] memory ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; boolean [ ] color = { false , false , false , false } ; for ( int i = 0 ; i < N ; i ++ ) { String line = sc . next ( ) ; if ( 'P' == line . charAt ( 0 ) && ! color [ 0 ] ) { color [ 0 ] = true ; count ++ ; } else if ( 'W' == line . charAt ( 0 ) && ! color [ 1 ] ) { color [ 1 ] = true ; count ++ ; } else if ( 'G' == line . charAt ( 0 ) && ! color [ 2 ] ) { color [ 2 ] = true ; count ++ ; } else if ( 'Y' == line . charAt ( 0 ) && ! color [ 3 ] ) { color [ 3 ] = true ; count ++ ; } if ( count == 4 ) break ; } if ( color [ 3 ] ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; if ( 3 * k < s ) { System . out . println ( " " ) ; System . exit ( 0 ) ; } int r = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k && y <= s - x ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) { r ++ ; } } } System . out . println ( r ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int w = 0 ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( w = 0 ; w <= 100 ; w ++ ) { a [ 0 ] = w ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( b [ i ] < 0 ) { System . out . println ( " No " ) ; return ; } } int aa [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { aa [ i ] [ j ] = c [ i ] [ j ] - b [ j ] ; } } if ( aa [ 1 ] [ 0 ] != aa [ 1 ] [ 1 ] || aa [ 1 ] [ 0 ] != aa [ 1 ] [ 2 ] || aa [ 2 ] [ 0 ] != aa [ 2 ] [ 1 ] || aa [ 2 ] [ 0 ] != aa [ 2 ] [ 2 ] ) { continue ; } System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; out . println ( IntStream . rangeClosed ( Math . max ( 0 , s - 2 * k ) , Math . min ( k , s ) ) . map ( x -> Math . min ( k , s - x ) - Math . max ( 0 , s - x - k ) + 1 ) . filter ( v -> v > 0 ) . sum ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i - 1 ] || c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i - 1 ] ) ok = false ; } for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i - 1 ] [ 1 ] || c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 2 ] - c [ i - 1 ] [ 2 ] ) ok = false ; } System . out . println ( ok ? " Yes " : " No " ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; ++ i ) a [ i ] = sc . nextLong ( ) ; long ans = 0 ; long c = 1 ; for ( int i = 0 ; i < n ; ++ i ) { long q = ( a [ i ] - 1 ) / c ; ans += q ; if ( q > 0 ) a [ i ] = 1 ; c = Math . max ( c , a [ i ] + 1 ) ; } out . println ( ans ) ; out . close ( ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int day = sc . nextInt ( ) , n = sc . nextInt ( ) ; int [ ] high = new int [ day ] ; for ( int i = 0 ; i < day ; i ++ ) { high [ i ] = sc . nextInt ( ) ; } int [ ] ht = new int [ n ] ; int [ ] lt = new int [ n ] ; int [ ] loud = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lt [ i ] = sc . nextInt ( ) ; ht [ i ] = sc . nextInt ( ) ; loud [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ day ] [ n ] ; for ( int i = 0 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 1 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( lt [ j ] <= high [ i ] && high [ i ] <= ht [ j ] ) ; else continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( lt [ k ] <= high [ i - 1 ] && high [ i - 1 ] <= ht [ k ] ) ; else continue ; dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , Math . abs ( loud [ j ] - loud [ k ] ) + dp [ i - 1 ] [ k ] ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { void run ( ) { int [ ] need = new int [ ] { 1 , 4 , 7 , 9 } ; int [ ] a = new int [ need . length ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; System . out . println ( Arrays . equals ( a , need ) ? " YES " : " NO " ) ; } static MyScanner in ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { boolean stdStreams = true ; String fileName = Main . class . getSimpleName ( ) . replaceFirst ( " _.* " , " " ) . toLowerCase ( ) ; String inputFileName = fileName + " .in " ; String outputFileName = fileName + " .out " ; Locale . setDefault ( Locale . US ) ; BufferedReader br ; if ( stdStreams ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; } else { br = new BufferedReader ( new FileReader ( inputFileName ) ) ; out = new PrintWriter ( outputFileName ) ; } in = new MyScanner ( br ) ; int tests = 1 ; for ( int test = 0 ; test < tests ; test ++ ) { new Main ( ) . run ( ) ; } br . close ( ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; MyScanner ( BufferedReader br ) { this . br = br ; } void findToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } } String next ( ) { findToken ( ) ; return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int check = 0 ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = 0 ; int x2 = 0 ; int y1 = 0 ; int y2 = 0 ; x1 = a [ 3 ] - a [ 0 ] ; x2 = a [ 6 ] - a [ 3 ] ; y1 = a [ 1 ] - a [ 0 ] ; y2 = a [ 2 ] - a [ 1 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = 1 ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = 1 ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = 1 ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = 1 ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long next = 2 ; for ( int i = 0 ; i < x ; i ++ ) { next = ( next + 1 ) * 2 ; } System . out . println ( next ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 0 ; int o = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( o > p ) { c ++ ; o = p ; } } System . out . println ( c ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int N = sc . nextInt ( ) ; if ( N == 1 ) n [ 0 ] ++ ; else if ( N == 9 ) n [ 1 ] ++ ; else if ( N == 7 ) n [ 2 ] ++ ; else if ( N == 4 ) n [ 3 ] ++ ; } if ( n [ 0 ] == 1 && n [ 1 ] == 1 && n [ 2 ] == 1 && n [ 3 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = Integer . parseInt ( in . next ( ) ) ; int s = Integer . parseInt ( in . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - j - i ; if ( 0 <= z && z <= k ) { ans ++ ; } } } out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String str = sc . next ( ) ; if ( str . equals ( " Y " ) ) { System . out . println ( " Four " ) ; sc . close ( ) ; return ; } } System . out . println ( " Three " ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { int k ; int s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void solve ( ) { int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) <= k ) && ( s - ( x + y ) >= 0 ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } if ( list . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } int temp1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int temp2 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int temp3 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; int temp4 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int temp5 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int temp6 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; boolean ans = true ; if ( temp1 != temp2 ) { ans = false ; } if ( temp1 != temp3 ) { ans = false ; } if ( temp4 != temp5 ) { ans = false ; } if ( temp4 != temp6 ) { ans = false ; } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int min = Integer . parseInt ( sc . next ( ) ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = Integer . parseInt ( sc . next ( ) ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; if ( 3 * k < s ) { System . out . println ( 0 ) ; } else if ( 3 * k == s ) { System . out . println ( 1 ) ; } else { int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - ( x + y ) <= k && s - ( x + y ) >= 0 ) count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] input = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { input [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int res = 0 ; for ( int i = 0 ; i < input . length ; i ++ ) { if ( input [ i ] < min ) { min = input [ i ] ; res ++ ; } } System . out . print ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean i = false ; boolean j = false ; boolean k = false ; String [ ] s = new String [ N ] ; for ( int l = 0 ; l < N ; l ++ ) { s [ l ] = sc . next ( ) ; } for ( int l = 0 ; l < N ; l ++ ) { if ( s [ l ] . equals ( " P " ) ) { i = true ; } else if ( s [ l ] . equals ( " W " ) ) { j = true ; } else if ( s [ l ] . equals ( " G " ) ) { k = true ; } else { i = false ; j = false ; k = false ; break ; } } if ( i = true && j && k ) System . out . println ( " Three " ) ; else if ( ! i && ! j && ! k ) System . out . println ( " Four " ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && k >= s - i - j ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; int [ ] b = new int [ 4 ] ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 1 ] = c [ 1 ] [ 1 ] ; a [ 2 ] = c [ 2 ] [ 1 ] ; a [ 3 ] = c [ 3 ] [ 1 ] ; b [ 1 ] = 0 ; b [ 2 ] = c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ; b [ 3 ] = c [ 1 ] [ 3 ] - c [ 1 ] [ 1 ] ; boolean ans = true ; int numbers [ ] = { 2 , 3 } ; for ( int i : numbers ) { for ( int j : numbers ) { if ( a [ i ] + b [ j ] == c [ i ] [ j ] ) ; else ans = false ; } } if ( ans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean [ ] b = new boolean [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { char a = sc . next ( ) . charAt ( 0 ) ; switch ( a ) { case 'P' : b [ 0 ] = true ; break ; case 'W' : b [ 1 ] = true ; break ; case 'G' : b [ 2 ] = true ; break ; case 'Y' : b [ 3 ] = true ; break ; } } int cnt = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( b [ i ] ) { cnt ++ ; } } if ( cnt == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] tmpArray = br . readLine ( ) . split ( " " ) ; int [ ] low = new int [ n ] ; int result = 1 ; low [ 0 ] = Integer . parseInt ( tmpArray [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = Integer . parseInt ( tmpArray [ i ] ) ; if ( tmp > low [ i - 1 ] ) { low [ i ] = low [ i - 1 ] ; } else { low [ i ] = tmp ; result ++ ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; max = Math . max ( c [ i ] [ j ] , max ) ; } } for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { for ( int k = 0 ; k <= max ; k ++ ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == j - i && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == j - k ) { if ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == j - i && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == j - k ) { if ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] == j - i && c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == j - k ) { System . out . println ( " Yes " ) ; return ; } } } } } } System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static PrintWriter out ; static CF_Reader in ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; in = new CF_Reader ( ) ; int n = in . intNext ( ) ; int [ ] nums = in . nextIntArray ( n ) ; int res = 0 ; int minVal = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( nums [ i ] <= minVal ) { minVal = nums [ i ] ; res += 1 ; } } out . println ( res ) ; out . close ( ) ; } static class CF_Reader { BufferedReader br ; StringTokenizer st ; public CF_Reader ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } long longNext ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } int intNext ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } double doubleNext ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } char charNext ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } public int [ ] nextIntArray ( final int n ) throws IOException { final int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = intNext ( ) ; return a ; } public long [ ] nextLongArray ( final int n ) throws IOException { final long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = longNext ( ) ; return a ; } String line ( ) throws IOException { return br . readLine ( ) . trim ( ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int a = sc . nextInt ( ) ; if ( H >= a ) { ans ++ ; } H = Math . min ( a , H ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = Integer . parseInt ( scan . next ( ) ) ; int S = Integer . parseInt ( scan . next ( ) ) ; int cou = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { if ( i + j + ( S - i - j ) == S ) { cou ++ ; } } } } System . out . println ( cou ) ; } }
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; String result = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int b1 = c [ 0 ] [ 0 ] ; int b2 = c [ 1 ] [ 0 ] ; int b3 = c [ 2 ] [ 0 ] ; if ( ( c [ 0 ] [ 1 ] - b1 != c [ 1 ] [ 1 ] - b2 ) || ( c [ 1 ] [ 1 ] - b2 != c [ 2 ] [ 1 ] - b3 ) ) { result = " No " ; } if ( ( c [ 0 ] [ 2 ] - b1 != c [ 1 ] [ 2 ] - b2 ) || ( c [ 1 ] [ 2 ] - b2 != c [ 2 ] [ 2 ] - b3 ) ) { result = " No " ; } System . out . println ( result ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( num >= 0 && num <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { sc . nextLine ( ) ; System . out . println ( sc . nextLine ( ) . contains ( " Y " ) ? " Four " : " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { for ( int y = 0 ; y <= K && x + y <= S ; y ++ ) { if ( S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; if ( a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; Set < String > set = new HashSet < String > ( ) ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { set . add ( scan . next ( ) ) ; } if ( set . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) >= 0 && ( S - i - j ) <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N1 = stdIn . nextInt ( ) ; int N2 = stdIn . nextInt ( ) ; int N3 = stdIn . nextInt ( ) ; int N4 = stdIn . nextInt ( ) ; int h1 = 0 , h2 = 0 , h3 = 0 , h4 = 0 ; if ( N1 == 1 ) h1 ++ ; if ( N2 == 1 ) h1 ++ ; if ( N3 == 1 ) h1 ++ ; if ( N4 == 1 ) h1 ++ ; if ( h1 == 0 || h1 > 1 ) System . out . println ( " NO " ) ; else { if ( N1 == 9 ) h2 ++ ; if ( N2 == 9 ) h2 ++ ; if ( N3 == 9 ) h2 ++ ; if ( N4 == 9 ) h2 ++ ; if ( h2 == 0 || h2 > 1 ) System . out . println ( " NO " ) ; else { if ( N1 == 7 ) h3 ++ ; if ( N2 == 7 ) h3 ++ ; if ( N3 == 7 ) h3 ++ ; if ( N4 == 7 ) h3 ++ ; if ( h3 == 0 || h3 > 1 ) System . out . println ( " NO " ) ; else { if ( N1 == 4 ) h4 ++ ; if ( N2 == 4 ) h4 ++ ; if ( N3 == 4 ) h4 ++ ; if ( N4 == 4 ) h4 ++ ; if ( h4 == 0 || h4 > 1 ) System . out . println ( " NO " ) ; else { System . out . println ( " YES " ) ; } } } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int limit = scanner . nextInt ( ) ; int target = scanner . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= limit ; i ++ ) { for ( int j = 0 ; j <= limit ; j ++ ) { z = target - i - j  ; if ( z >= 0 && z <= limit ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - ( i + j ) <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { if ( s - a - b <= k && s - a - b >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { System . out . println ( solve ( ) ) ; } public static int solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; Queue < Integer > q = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { q . add ( arr [ i ] ) ; if ( arr [ i ] <= q . peek ( ) ) { sum ++ ; } } return sum ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z <= K && z >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int data [ ] = new int [ 10 ] ; int x = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) { data [ i ] = scan . nextInt ( ) ; } for ( int a = 0 ; a < 101 ; a ++ ) { for ( int b = 0 ; b < 101 ; b ++ ) { for ( int c = 0 ; c < 101 ; c ++ ) { for ( int d = 0 ; d < 101 ; d ++ ) { if ( data [ 1 ] == a + d && data [ 4 ] == b + d && data [ 7 ] == c + d ) { for ( int e = 0 ; e < 101 ; e ++ ) { if ( data [ 2 ] == a + e && data [ 5 ] == b + e && data [ 8 ] == c + e ) { for ( int f = 0 ; f < 101 ; f ++ ) { if ( data [ 3 ] == a + f && data [ 6 ] == b + f && data [ 9 ] == c + f ) { System . out . println ( " Yes " ) ; return ; } } } } } } } } } System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int array [ ] = new int [ s . length ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = Integer . parseInt ( s [ i ] ) ; } int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] < min ) { count ++ ; min = array [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) == 3 ? " Three " : " Four " ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && s - x - y >= 0 ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i < s + 1 ; i ++ ) { int x = i ; for ( int j = 0 ; j < s + 1 - i ; j ++ ) { int y = j ; int z = s - x - y ; if ( x > k || y > k || z > k ) { continue ; } result ++ ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . lang . Integer ; import java . lang . Math ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String tokens1 [ ] = scanner . nextLine ( ) . split ( " " ) ; String tokens2 [ ] = scanner . nextLine ( ) . split ( " " ) ; int min = Integer . parseInt ( tokens2 [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < tokens2 . length ; i ++ ) { int val = Integer . parseInt ( tokens2 [ i ] ) ; if ( val <= min ) { count ++ ; } min = Math . min ( min , val ) ; } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z <= k && z >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { try ( Scanner sc = new Scanner ( System . in ) ) { int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } long ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( min >= P [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . * ; import java . util . TreeMap ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int cnt = 1 ; int min = sc . nextInt ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int next = sc . nextInt ( ) ; if ( min > next ) { cnt ++ ; } min = Math . min ( min , next ) ; } System . out . println ( cnt ) ; } }
import java . util . * ; import java . io . * ; public class Main { static InputStreamReader r ; public static void main ( String [ ] args ) throws Exception { r = new InputStreamReader ( System . in ) ; int N = nextInt ( ) ; int min = 200005 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = nextInt ( ) ; if ( Pi < min ) { min = Pi ; ans ++ ; } } System . out . println ( ans ) ; } public static String nextString ( ) throws Exception { String res = " " ; while ( true ) { int c = r . read ( ) ; if ( c == 32 || c == 10 || c == - 1 ) { break ; } res += ( char ) c ; } return res ; } public static int nextInt ( ) throws Exception { return Integer . parseInt ( nextString ( ) ) ; } public static long nextLong ( ) throws Exception { return Long . parseLong ( nextString ( ) ) ; } public static double nextDouble ( ) throws Exception { return Double . parseDouble ( nextString ( ) ) ; } }
import java . util . Scanner ; public class Main { private static final String YES = " YES " ; private static final String NO = " NO " ; public static void main ( String [ ] args ) { new Main ( ) . execute ( ) ; } public void execute ( ) { Scanner sc = new Scanner ( System . in ) ; final int N1 = sc . nextInt ( ) ; final int N2 = sc . nextInt ( ) ; final int N3 = sc . nextInt ( ) ; final int N4 = sc . nextInt ( ) ; boolean [ ] b = new boolean [ 10 ] ; b [ N1 ] = true ; b [ N2 ] = true ; b [ N3 ] = true ; b [ N4 ] = true ; if ( b [ 1 ] && b [ 9 ] && b [ 7 ] && b [ 4 ] ) { System . out . println ( YES ) ; } else { System . out . println ( NO ) ; } sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
/ * package whatever import java . io . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } public static void main ( String [ ] args ) { FastReader ob = new FastReader ( ) ; int n = ob . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ob . nextInt ( ) ; } int count = 1 ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= arr [ i ] ) { count ++ ; min = arr [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int t = S - x - y ; if ( t >= 0 && t <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] nums = new int [ k + 1 ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { nums [ i ] = i ; } int count = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) { int x = nums [ i ] ; for ( int j = 0 ; j < nums . length ; j ++ ) { int y = nums [ j ] ; int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Set < Integer > remaining = new HashSet < > ( Arrays . asList ( 1 , 9 , 7 , 4 ) ) ; for ( int i = 0 ; i < 4 ; i ++ ) { int a = sc . nextInt ( ) ; if ( remaining . contains ( a ) ) { remaining . remove ( a ) ; } } System . out . println ( remaining . isEmpty ( ) ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int maxValue = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= maxValue ; x ++ ) { for ( int y = 0 ; y <= maxValue ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= maxValue ) cnt ++ ; } } System . out . println ( cnt ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; for ( int j = 0 ; j < 2 ; j ++ ) { b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; if ( infomation ( a , b , c ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } public static boolean infomation ( int [ ] a , int [ ] b , int [ ] [ ] c ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { return false ; } } } return true ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } String ans = " No " ; for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; if ( c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] && c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] && c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] && c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] permutaion = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { permutaion [ i ] = in . nextInt ( ) ; } int min = permutaion [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( permutaion [ i ] <= min ) { ans ++ ; min = permutaion [ i ] ; } } System . out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . math . BigDecimal ; import java . util . * ; import java . util . stream . Collectors ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int a = s - y - x ; if ( a >= 0 && a <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { @ SuppressWarnings ( " resource " ) public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = 2000001 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) { ans ++ ; if ( P [ i ] < min ) { min = P [ i ] ; } } } System . out . println ( ans ) ; } }
import java . io . PrintWriter ; import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; TreeSet < Character > ts = new TreeSet < > ( ) ; int n = Integer . valueOf ( sc . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) ts . add ( sc . next ( ) . charAt ( 0 ) ) ; if ( ts . size ( ) == 3 ) out . println ( " Three " ) ; else out . println ( " Four " ) ; out . flush ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int Ans = 0 ; if ( S <= K ) Ans = ( S + 1 ) * ( S + 2 ) / 2 ; else if ( K < S && S <= 2 * K ) Ans = ( K + 1 ) * ( K + 1 ) - ( 2 * K - S + 1 ) * ( 2 * K - S ) / 2 - ( S - K + 1 ) * ( S - K ) / 2 ; else if ( 2 * K <= S ) Ans = ( 3 * K - S + 1 ) * ( 3 * K - S + 2 ) / 2 ; System . out . println ( Ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int s1 = c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] ; int s2 = c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] ; int s = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; if ( s1 + s2 == 2 * s ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z < 0 ) continue ; if ( z > K ) continue ; if ( x + y + z == S ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; long [ ] map = new long [ 5 ] ; for ( int i = 0 ; i < N ; i ++ ) { String s = scanner . next ( ) ; if ( s . charAt ( 0 ) == 'P' ) map [ 0 ] ++ ; if ( s . charAt ( 0 ) == 'Y' ) map [ 1 ] ++ ; if ( s . charAt ( 0 ) == 'W' ) map [ 2 ] ++ ; if ( s . charAt ( 0 ) == 'G' ) map [ 3 ] ++ ; } long ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( map [ i ] > 0 ) ans ++ ; } if ( ans == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int k = scn . nextInt ( ) ; int s = scn . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; ++ x ) { for ( int y = 0 ; y <= k ; ++ y ) { if ( s >= x + y && s - ( x + y ) <= k ) { count = count + 1 ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - i - j ; if ( tmp <= k && tmp >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] youso = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { youso [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] tmp = new int [ 3 ] ; tmp [ 0 ] = youso [ 1 ] [ 0 ] - youso [ 0 ] [ 0 ] ; tmp [ 1 ] = youso [ 2 ] [ 0 ] - youso [ 1 ] [ 0 ] ; tmp [ 2 ] = youso [ 2 ] [ 0 ] - youso [ 0 ] [ 0 ] ; int aa [ ] [ ] = { { 1 , 0 } , { 2 , 1 } , { 2 , 0 } } ; boolean [ ] vali = new boolean [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { vali [ i ] = true ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( youso [ aa [ i ] [ 0 ] ] [ j ] - youso [ aa [ i ] [ 1 ] ] [ j ] != tmp [ i ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= Math . min ( s , k ) ; i ++ ) { ans += Math . max ( 0 , Math . min ( s - i + 1 , k + 1 ) - Math . max ( 0 , s - i - k ) ) ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { for ( int j = 0 ; j < K + 1 ; j ++ ) { if ( S - ( i + j ) <= K && 0 <= S - ( i + j ) ) { c += 1 ; } } } System . out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { answer = " No " ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( min >= x ) { count ++ ; min = x ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( final String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int [ ] [ ] table = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { table [ i ] [ j ] = scanner . nextInt ( ) ; } } int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( a1 = 0 ; a1 <= table [ 0 ] [ 0 ] ; a1 ++ ) { b1 = table [ 0 ] [ 0 ] - a1 ; a2 = table [ 1 ] [ 0 ] - b1 ; if ( a2 < 0 ) continue ; a3 = table [ 2 ] [ 0 ] - b1 ; if ( a3 < 0 ) continue ; b2 = table [ 0 ] [ 1 ] - a1 ; if ( b2 < 0 ) continue ; b3 = table [ 0 ] [ 2 ] - a1 ; if ( b3 < 0 ) continue ; if ( a2 + b2 != table [ 1 ] [ 1 ] ) continue ; if ( a2 + b3 != table [ 1 ] [ 2 ] ) continue ; if ( a3 + b2 != table [ 2 ] [ 1 ] ) continue ; if ( a3 + b3 != table [ 2 ] [ 2 ] ) continue ; System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( n - i - j <= k && n - i - j >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; long S = sc . nextLong ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && 0 <= S - i - j ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { static String [ ] ANS = { " Three " , " Four " } ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( ANS [ set . size ( ) - 3 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int cnt = 0 ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public Main ( ) { Scanner sc = new Scanner ( System . in ) ; int n = 3 ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; int [ ] b1 = dif ( a [ 0 ] ) ; int [ ] b2 = dif ( a [ 1 ] ) ; int [ ] b3 = dif ( a [ 2 ] ) ; if ( b1 [ 0 ] == b2 [ 0 ] && b1 [ 1 ] == b2 [ 1 ] && b2 [ 0 ] == b3 [ 0 ] && b2 [ 1 ] == b3 [ 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private int [ ] dif ( int a [ ] ) { return new int [ ] { a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 1 ] } ; } public static void main ( String [ ] args ) { new Main ( ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { map [ i / 3 ] [ i % 3 ] = sc . nextInt ( ) ; } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = map [ 0 ] [ 0 ] - a1 ; int b2 = map [ 0 ] [ 1 ] - a1 ; int b3 = map [ 0 ] [ 2 ] - a1 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] == a2 + b2 && map [ 1 ] [ 2 ] == a2 + b3 && map [ 2 ] [ 1 ] == a3 + b2 && map [ 2 ] [ 2 ] == a3 + b3 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int i = 0 ; int min = N + 1 ; int count = 0 ; int P [ ] = new int [ N ] ; for ( i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] < min ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int max = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( max >= P [ i ] ) { ans ++ ; max = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] [ 0 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 1 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 2 ] = Integer . parseInt ( scanner . next ( ) ) ; } scanner . close ( ) ; for ( int i = 0 ; i < c . length ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { int num = c [ i ] [ j ] ; if ( min > num ) { min = num ; } } for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { c [ i ] [ j ] -= min ; } } for ( int i = 0 ; i < c . length ; i ++ ) { if ( c [ 0 ] [ i ] != c [ 1 ] [ i ] || c [ 1 ] [ i ] != c [ 2 ] [ i ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int c = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( min >= p [ i ] ) { c ++ ; } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; String S = gs ( ) + gs ( ) + gs ( ) + gs ( ) ; if ( S . contains ( " 1 " ) && S . contains ( " 7 " ) && S . contains ( " 9 " ) && S . contains ( " 4 " ) ) { System . out . print ( " YES " ) ; } else { System . out . print ( " NO " ) ; } } public static long d ( long n ) { String a = String . valueOf ( n ) ; return ( long ) a . length ( ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 == 0 && sum / 3 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = sc . nextInt ( ) ; for ( int i = 0 ; i < count ; i ++ ) { String color = sc . next ( ) ; if ( color . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; if ( c [ 3 ] - c [ 0 ] == c [ 4 ] - c [ 1 ] && c [ 3 ] - c [ 0 ] == c [ 5 ] - c [ 2 ] && c [ 6 ] - c [ 3 ] == c [ 7 ] - c [ 4 ] && c [ 6 ] - c [ 3 ] == c [ 8 ] - c [ 5 ] && c [ 1 ] - c [ 0 ] == c [ 4 ] - c [ 3 ] && c [ 1 ] - c [ 0 ] == c [ 7 ] - c [ 6 ] && c [ 2 ] - c [ 1 ] == c [ 5 ] - c [ 4 ] && c [ 2 ] - c [ 1 ] == c [ 8 ] - c [ 7 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j < 0 || s - i - j > k ) { continue ; } cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int a ; int b ; int cnt = 0 ; for ( a = 0 ; a <= K ; a ++ ) { int qw = K ; if ( S - a < qw ) { qw = S - a ; } for ( b = 0 ; b <= qw ; b ++ ) { if ( S - a - b <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) , a = 0 , i , j ; scan . close ( ) ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j > s ) break ; if ( k >= s - i - j ) a ++ ; } } System . out . print ( a ) ; } }
import java . math . BigInteger ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; long ans = a [ 0 ] - 1 ; int p = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != p ) { ans += ( a [ i ] - 1 ) / p ; } else { p ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final int N = 3 ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] c = new int [ N ] [ N ] ; IntStream . range ( 0 , N ) . forEach ( i -> IntStream . range ( 0 , N ) . forEach ( j -> c [ i ] [ j ] = scanner . nextInt ( ) ) ) ; boolean result = true ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int diff2 = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) != diff1 ) { result = false ; break ; } if ( ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) != diff2 ) { result = false ; break ; } } } System . out . println ( result ? " Yes " : " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } else if ( z < 0 ) { break ; } } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = Integer . parseInt ( scan . next ( ) ) ; int counter = 0 ; int min = Integer . MAX_VALUE ; ArrayList < Integer > pi = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int numPi = Integer . parseInt ( scan . next ( ) ) ; if ( i == 0 ) { counter ++ ; } else { if ( numPi <= min ) { counter ++ ; } } if ( min > numPi ) { min = numPi ; } } System . out . println ( counter ) ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int pos = c [ i ] [ j ] = s . nextInt ( ) ; max = Math . max ( max , pos ) ; } } System . out . println ( Main . calc ( c , max ) ? " Yes " : " No " ) ; } public static boolean calc ( Integer c [ ] [ ] , int max ) { for ( int a1 = 0 ; a1 <= max && a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; if ( 0 > b1 || b1 > 100 ) { continue ; } for ( int a2 = 0 ; a2 <= max && a2 <= 100 ; a2 ++ ) { int b2 = c [ 1 ] [ 1 ] - a2 ; if ( 0 > b2 || b2 > 100 ) { continue ; } for ( int a3 = 0 ; a3 <= max && a3 <= 100 ; a3 ++ ) { int b3 = c [ 2 ] [ 2 ] - a3 ; if ( 0 > b3 || b3 > 100 ) { continue ; } if ( c [ 0 ] [ 1 ] == a1 + b2 && c [ 0 ] [ 2 ] == a1 + b3 && c [ 1 ] [ 0 ] == a2 + b1 && c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) { return true ; } } } } return false ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; break ; } if ( i == N - 1 ) { System . out . println ( " Three " ) ; } } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean result = false ; for ( int i = 0 ; i < N ; i ++ ) { if ( " Y " . equals ( sc . next ( ) ) ) { result = true ; } } System . out . println ( result ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int P [ ] = new int [ N ] ; int result = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; result ++ ; } } System . out . println ( result ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; Set < String > s = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { s . add ( sc . next ( ) ) ; } sc . close ( ) ; if ( s . size ( ) == 3 ) { out . println ( " Three " ) ; } else { out . println ( " Four " ) ; } } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }
import java . lang . reflect . Array ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ret = 0 ; for ( int i = 0 ; i <= k ; i ++ ) for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) ret += 1 ; } System . out . println ( ret ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] srgs ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i != a ; i ++ ) { String str = scan . next ( ) ; if ( ! list . contains ( str ) ) { list . add ( str ) ; } } System . out . println ( list . size ( ) == 4 ? " Four " : " Three " ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < Character > set = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( sc . next ( ) . charAt ( 0 ) ) ; } System . out . println ( set . size ( ) == 4 ? " Four " : " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = x ; y <= k ; y ++ ) { int z = s - y - x ; if ( y <= z && z <= k ) { if ( x == y && y == z && x == z ) { answer += 1 ; } else if ( x == y || y == z || x == z ) { answer += 3 ; } else { answer += 6 ; } } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { C [ r ] [ c ] = in . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] a2 = new int [ 3 ] [ 3 ] ; a [ 0 ] = 0 ; for ( int c = 0 ; c < 3 ; c ++ ) { b [ c ] = C [ 0 ] [ c ] - a [ 0 ] ; } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { a2 [ r ] [ c ] = C [ r ] [ c ] - b [ c ] ; } } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 1 ; c < 3 ; c ++ ) { if ( a2 [ r ] [ c - 1 ] != a2 [ r ] [ c ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) == 3 ? " Three " : " Four " ) ; } }
import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String line1 = sc . nextLine ( ) ; List < String > lines1 = Arrays . asList ( line1 . split ( " " ) ) ; Integer K = Integer . parseInt ( lines1 . get ( 0 ) ) ; Integer S = Integer . parseInt ( lines1 . get ( 1 ) ) ; int res = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { res ++ ; } } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . execute ( ) ; } public void execute ( ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] board = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { board [ i ] [ j ] = sc . nextInt ( ) ; } } if ( check ( board ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } private boolean check ( int [ ] [ ] board ) { if ( board . length != 3 || board [ 0 ] . length != 3 ) { throw new IllegalArgumentException ( ) ; } boolean check = false ; for ( int i = 0 ; i < 100 ; i ++ ) { int a1 = i ; int b1 = board [ 0 ] [ 0 ] - a1 ; int b2 = board [ 0 ] [ 1 ] - a1 ; int b3 = board [ 0 ] [ 2 ] - a1 ; if ( withoutRange ( b1 ) || withoutRange ( b2 ) || withoutRange ( b3 ) ) { continue ; } int a2 = board [ 1 ] [ 0 ] - b1 ; if ( withoutRange ( a2 ) || ( board [ 1 ] [ 1 ] - b2 ) != a2 || ( board [ 1 ] [ 2 ] - b3 ) != a2 ) { continue ; } int a3 = board [ 2 ] [ 0 ] - b1 ; if ( withoutRange ( a3 ) || ( board [ 2 ] [ 1 ] - b2 ) != a3 || ( board [ 2 ] [ 2 ] - b3 ) != a3 ) { continue ; } check = true ; break ; } return check ; } private boolean withoutRange ( int x ) { return ( x < 0 && x > 100 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M [ ] = new int [ N ] ; int s = 0 ; for ( int i = 0 ; i < N ; i ++ ) { M [ i ] = sc . nextInt ( ) ; s = s + 1 ; if ( M [ i ] == 1 ) { break ; } } int x = 0 ; int L = M [ 0 ] ; for ( int j = 0 ; j < s ; j ++ ) { L = Math . min ( M [ j ] , L ) ; if ( L == M [ j ] ) { x = x + 1 ; } else { x = x ; } } System . out . println ( x ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x , y , z , cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { x = i ; for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { y = j ; for ( int l = Math . max ( 0 , s - i - j ) ; l <= Math . min ( k , s - i - j ) ; l ++ ) { z = l ; if ( x + y + z == s ) { cnt ++ ; } } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int limit = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= limit ; i ++ ) { for ( j = 0 ; j <= limit ; j ++ ) { if ( sum - i - j <= limit && sum - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) p [ i ] = sc . nextInt ( ) ; int ans = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; ++ i ) { if ( p [ i ] <= min ) { min = p [ i ] ; ++ ans ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 , a2 , a3 , b1 , b2 , b3 ; boolean fans = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { boolean ans = true ; a1 = i ; b1 = c [ 0 ] [ 0 ] - i ; b2 = c [ 1 ] [ 0 ] - a1 ; b3 = c [ 2 ] [ 0 ] - a1 ; a2 = c [ 0 ] [ 1 ] - b1 ; a3 = c [ 0 ] [ 2 ] - b1 ; if ( a1 < 0 || b1 < 0 || a2 < 0 || a3 < 0 || b2 < 0 || b3 < 0 ) ans = false ; if ( b2 + a2 != c [ 1 ] [ 1 ] ) ans = false ; if ( b2 + a3 != c [ 1 ] [ 2 ] ) ans = false ; if ( b3 + a2 != c [ 2 ] [ 1 ] ) ans = false ; if ( b3 + a3 != c [ 2 ] [ 2 ] ) ans = false ; if ( ans ) fans = true ; } if ( fans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . function . Consumer ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String str [ ] = br . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( str [ j ] ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { int s = c [ ( i + 1 ) % 3 ] [ 0 ] - c [ i ] [ 0 ] ; int t = c [ ( i + 1 ) % 3 ] [ 1 ] - c [ i ] [ 1 ] ; int u = c [ ( i + 1 ) % 3 ] [ 2 ] - c [ i ] [ 2 ] ; if ( s != t || t != u || u != s ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = a [ 0 ] [ i ] ; x [ 1 ] = a [ 1 ] [ 0 ] - y [ 0 ] ; x [ 2 ] = a [ 2 ] [ 0 ] - y [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] t = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( t [ 0 ] ) ; int S = Integer . parseInt ( t [ 1 ] ) ; int count = 0 ; br : for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( 0 <= k && k <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , s - 2 * k ) ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { ans ++ ; } } out . println ( ans ) ; } } }
import java . io . File ; import java . io . IOException ; import java . lang . reflect . Array ; import java . util . * ; import java . util . Map . Entry ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; boolean ans = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } if ( ! ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count_y = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String tmp = sc . next ( ) ; if ( tmp . charAt ( 0 ) == 'Y' ) { count_y ++ ; } } if ( count_y > 0 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long A [ ] = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextLong ( ) ; } long min = A [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] <= min ) { count ++ ; min = A [ i ] ; } } System . out . println ( count ) ; return ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; P [ 0 ] = sc . nextInt ( ) ; int min = P [ 0 ] ; int R = 1 ; for ( int i = 1 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) { min = P [ i ] ; R ++ ; } } System . out . println ( R ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { sum = s - ( i + j ) ; if ( sum >= 0 && sum <= k ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = 0 , m = 0 ; if ( scan . hasNext ( ) ) n = scan . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( scan . hasNext ( ) ) arr [ i ] = scan . nextInt ( ) ; } int min = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= min ) { count ++ ; } min = Math . min ( arr [ i ] , min ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int C11 = scan . nextInt ( ) ; int C12 = scan . nextInt ( ) ; int C13 = scan . nextInt ( ) ; scan . nextLine ( ) ; int C21 = scan . nextInt ( ) ; int C22 = scan . nextInt ( ) ; int C23 = scan . nextInt ( ) ; scan . nextLine ( ) ; int C31 = scan . nextInt ( ) ; int C32 = scan . nextInt ( ) ; int C33 = scan . nextInt ( ) ; scan . nextLine ( ) ; if ( ( ( C12 - C11 ) == ( C22 - C21 ) && ( C22 - C21 ) == ( C32 - C31 ) ) && ( ( C13 - C12 ) == ( C23 - C22 ) && ( C23 - C22 ) == ( C33 - C32 ) ) && ( ( C31 - C21 ) == ( C32 - C22 ) && ( C32 - C22 ) == ( C33 - C23 ) ) && ( ( C21 - C11 ) == ( C22 - C12 ) && ( C22 - C12 ) == ( C23 - C13 ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { int left = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int center = c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ; int right = c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ; if ( left != center || center != right || right != left ) { ans = false ; } } for ( int j = 0 ; j < 2 ; j ++ ) { int up = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ; int center = c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ; int down = c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ; if ( up != down || up != center || down != center ) { ans = false ; } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s ; boolean isAns = false ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { isAns = true ; break ; } } System . out . println ( isAns ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int b = sc . nextInt ( ) ; if ( b == 1 ) a [ 0 ] = 1 ; if ( b == 4 ) a [ 1 ] = 1 ; if ( b == 7 ) a [ 2 ] = 1 ; if ( b == 9 ) a [ 3 ] = 1 ; } if ( a [ 0 ] == 1 && a [ 1 ] == 1 && a [ 2 ] == 1 && a [ 3 ] == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; HashSet < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; set . add ( s ) ; } if ( set . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( in . readLine ( ) ) ; String [ ] str = in . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; int min = 100000 * 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( str [ i ] ) ; min = Math . min ( p [ i ] , min ) ; if ( p [ i ] <= min ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . lang . Math ; import java . util . ArrayList ; import java . util . List ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; List < Integer > n = new ArrayList < > ( ) ; int [ ] n1 = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) n1 [ i ] = stdIn . nextInt ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) n . add ( n1 [ i ] ) ; if ( n . contains ( 1 ) ) { int b = n . indexOf ( 1 ) ; n . remove ( b ) ; } if ( n . contains ( 9 ) ) { int c = n . indexOf ( 9 ) ; n . remove ( c ) ; } if ( n . contains ( 7 ) ) { int d = n . indexOf ( 7 ) ; n . remove ( d ) ; } if ( n . contains ( 4 ) ) { int e = n . indexOf ( 4 ) ; n . remove ( e ) ; } if ( n . isEmpty ( ) == true ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . io . BufferedReader ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { final Scanner sc = new Scanner ( System . in ) ; final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { final int k = S - ( i + j ) ; if ( 0 <= k && k <= K ) { count ++ ; } } } System . out . println ( count ) ; } public static class Scanner implements Closeable { private BufferedReader br ; private StringTokenizer tok ; public Scanner ( InputStream is ) throws IOException { br = new BufferedReader ( new InputStreamReader ( is ) ) ; } private void getLine ( ) throws IOException { while ( ! hasNext ( ) ) { tok = new StringTokenizer ( br . readLine ( ) ) ; } } private boolean hasNext ( ) { return tok != null && tok . hasMoreTokens ( ) ; } public String next ( ) throws IOException { getLine ( ) ; return tok . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) throws IOException { final int [ ] ret = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ret [ i ] = this . nextInt ( ) ; } return ret ; } public void close ( ) throws IOException { br . close ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < N ; i ++ ) { int now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( min >= p [ i + 1 ] ) { cnt ++ ; min = p [ i + 1 ] ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int ans = 1 ; boolean [ ] b = new boolean [ n ] ; b [ 0 ] = true ; int j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( b [ j ] ) { if ( p [ i ] <= p [ j ] ) { b [ i ] = true ; j = i ; ans ++ ; } else { b [ i ] = false ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean find = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { a [ 0 ] = i ; for ( int j = 0 ; j < 3 ; j ++ ) { b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b1 = c [ 1 ] [ j ] - a [ 1 ] ; if ( b1 != b [ j ] ) { find = false ; } } if ( find == true ) { a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b2 = c [ 2 ] [ j ] - a [ 2 ] ; if ( b2 != b [ j ] ) { find = false ; } } } if ( find == true ) { System . out . println ( " Yes " ) ; return ; } find = true ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int want = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int m = 0 ; m <= k ; m ++ ) { if ( want - i - m <= k && want - i - m >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; int [ ] PList = new int [ N ] ; PList [ 0 ] = sc . nextInt ( ) ; int minNumber = PList [ 0 ] ; int cnt = 1 ; for ( int i = 1 ; i < N ; i ++ ) { PList [ i ] = sc . nextInt ( ) ; if ( minNumber >= PList [ i ] ) { minNumber = PList [ i ] ; cnt ++ ; } else { } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String cur = sc . next ( ) ; if ( cur . equals ( " Y " ) ) { result = 1 ; break ; } } String ans ; if ( result == 0 ) ans = " Three " ; else ans = " Four " ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; ArrayList < Integer > numbers = new ArrayList < > ( ) ; int temp = 0 ; for ( int i = 0 ; i < a ; i ++ ) { numbers . add ( sc . nextInt ( ) ) ; } int low = numbers . get ( 0 ) ; for ( int i = 0 ; i < a ; i ++ ) { if ( numbers . get ( i ) < low ) { low = numbers . get ( i ) ; } if ( numbers . get ( i ) <= low ) { temp ++ ; } } System . out . println ( temp ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { int tmp = s - i - j ; if ( tmp >= 0 && tmp <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { ans = " Four " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int row = 1 ; row <= 3 ; row ++ ) { for ( int col = 1 ; col <= 3 ; col ++ ) { c [ row ] [ col ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int col = 2 ; col <= 3 ; col ++ ) { int cur = c [ 1 ] [ 1 ] - c [ 1 ] [ col ] ; int d1 = c [ 2 ] [ 1 ] - c [ 2 ] [ col ] ; int d2 = c [ 3 ] [ 1 ] - c [ 3 ] [ col ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; for ( int row = 2 ; row <= 3 ; row ++ ) { int cur = c [ 1 ] [ 1 ] - c [ row ] [ 1 ] ; int d1 = c [ 1 ] [ 2 ] - c [ row ] [ 2 ] ; int d2 = c [ 1 ] [ 3 ] - c [ row ] [ 3 ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 10000000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; for ( int k = 0 ; k < 100 ; k ++ ) { x [ 0 ] = k ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; ++ i ) n [ i ] = sc . nextInt ( ) ; Arrays . sort ( n ) ; int [ ] m = { 1 , 4 , 7 , 9 } ; String ans = ( Arrays . equals ( n , m ) ) ? " YES " : " NO " ; System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; if ( a [ i ] [ j ] > max ) { max = a [ i ] [ j ] ; } } } String f = " Yes " ; x [ 0 ] = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { y [ j ] = a [ 0 ] [ j ] - x [ 0 ] ; } for ( int j = 0 ; j < 3 ; j ++ ) { x [ j ] = a [ j ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) { f = " No " ; } } } System . out . println ( f ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { try ( Scanner sc = new Scanner ( System . in ) ) { int X = sc . nextInt ( ) ; long ans = 2 ; for ( int i = X ; i > 0 ; i -- ) { ans = ans * 2 + 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; Integer K = Integer . parseInt ( st . nextToken ( ) ) ; Integer S = Integer . parseInt ( st . nextToken ( ) ) ; long ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j > S ) continue ; if ( S - i - j <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { int tmp = 0 ; int tmp2 = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { tmp += c [ j ] [ ( i + j ) % 3 ] ; tmp2 += c [ j ] [ ( i - j + 3 ) % 3 ] ; } if ( tmp != sum ) { pr . println ( " No " ) ; return ; } if ( tmp2 != sum ) { pr . println ( " No " ) ; return ; } } pr . println ( " Yes " ) ; } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scan . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( list ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( list . get ( i ) <= min ) { min = list . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( cal ( n , a ) ) ; } private static long cal ( final int n , final int [ ] a ) { long res = 0L ; int maxP = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( maxP == 0 ) { res += a [ i ] - 1 ; maxP = 1 ; } else { int num = a [ i ] / ( maxP + 1 ) ; if ( a [ i ] == maxP + 1 ) { maxP ++ ; } else if ( a [ i ] % ( maxP + 1 ) == 0 ) { res += num - 1 ; } else { res += num ; } } } return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; String [ ] s = new String [ N ] ; int truefalse = 0 ; for ( int i = 0 ; i < N ; i ++ ) { s [ i ] = scanner . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { System . out . println ( " Four " ) ; truefalse ++ ; break ; } } if ( truefalse == 0 ) { System . out . println ( " Three " ) ; } scanner . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( 0 <= k && k <= K ) { counter ++ ; } } } System . out . println ( counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; sc . nextLine ( ) ; String S = sc . nextLine ( ) ; sc . close ( ) ; boolean flag = false ; for ( int i = 0 ; i < N ; ++ i ) if ( S . charAt ( 2 * i ) == 'Y' ) flag = true ; if ( flag ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; String [ ] s = new String [ n ] ; Arrays . setAll ( s , i -> sc . next ( ) ) ; sc . close ( ) ; Set < String > set = new HashSet < > ( Arrays . asList ( s ) ) ; boolean judge = set . size ( ) == 3 ; String result = judge ? " Three " : " Four " ; System . out . println ( result ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; new Main ( ) . solve ( ) ; } private void solve ( ) { int n = sc . nextInt ( ) ; Set < String > s = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( sc . next ( ) ) ; } if ( s . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { static int [ ] parent ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans = ( ans + 1 ) * 2 ; } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; min = Math . min ( min , p ) ; if ( p <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ret = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= ( s - i - j ) && ( s - i - j ) <= k ) { ret ++ ; } } } System . out . println ( ret ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] suuji = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { suuji [ i ] = sc . nextInt ( ) ; } int min = suuji [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > suuji [ i ] ) { min = suuji [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = N ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 1 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 1 ] [ 3 ] ) { out . println ( " Yes " ) ; } else { out . println ( " No " ) ; } } }
import java . io . * ; class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int output = 0 ; try { String [ ] keyboardInput = br . readLine ( ) . split ( " " ) ; int K = Integer . parseInt ( keyboardInput [ 0 ] ) ; int S = Integer . parseInt ( keyboardInput [ 1 ] ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y >= 0 && S - x - y <= K ) { output ++ ; } } } System . out . println ( output ) ; } catch ( IOException e ) { System . out . println ( e . getMessage ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String N = sc . nextLine ( ) ; String Str = sc . nextLine ( ) ; String s ; int i = Str . indexOf ( " Y " ) ; if ( i == - 1 ) s = " Three " ; else s = " Four " ; System . out . println ( s ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; Integer n = s . nextInt ( ) ; long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { Integer p = s . nextInt ( ) ; if ( p <= min ) { count ++ ; } min = Math . min ( p , min ) ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Map < String , Integer > minMap = new HashMap < > ( ) ; final String MIN = " min " ; int [ ] numList = new int [ 220000 ] ; for ( int i = 0 ; i < N ; i ++ ) { numList [ i ] = Integer . parseInt ( sc . next ( ) ) ; } minMap . put ( MIN , numList [ 0 ] ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList [ i ] <= minMap . get ( MIN ) ) { minMap . put ( MIN , numList [ i ] ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; boolean check = false ; for ( int i = 0 ; i < N ; i ++ ) { String color = s . next ( ) ; if ( color . equals ( " Y " ) ) { check = true ; break ; } } System . out . println ( check ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int P = 0 ; int Q = 0 ; for ( int X = 0 ; X < K + 1 ; X ++ ) { for ( int Y = 0 ; Y < K + 1 ; Y ++ ) { P = S - X - Y ; if ( 0 <= P && P <= K ) { Q ++ ; } } } System . out . println ( Q ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int day = sc . nextInt ( ) , n = sc . nextInt ( ) ; int [ ] high = new int [ day ] ; for ( int i = 0 ; i < day ; i ++ ) { high [ i ] = sc . nextInt ( ) ; } int [ ] ht = new int [ n ] ; int [ ] lt = new int [ n ] ; int [ ] loud = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lt [ i ] = sc . nextInt ( ) ; ht [ i ] = sc . nextInt ( ) ; loud [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ day ] [ n ] ; for ( int i = 0 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 1 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( lt [ j ] <= high [ i ] && high [ i ] <= ht [ j ] ) ; else continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( lt [ k ] <= high [ i - 1 ] && high [ i - 1 ] <= ht [ k ] ) ; else continue ; dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , Math . abs ( loud [ j ] - loud [ k ] ) + dp [ i - 1 ] [ k ] ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( ; sc . hasNext ( ) ; ) { arr . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = arr . get ( 0 ) ; for ( int num : arr ) { if ( num <= min ) { count ++ ; min = num ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { private static void solve ( ) { int N = ni ( ) ; int [ ] P = na ( N ) ; int min = P [ 0 ] ; int result = 1 ; for ( int i = 1 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) result ++ ; } System . out . println ( result ) ; } private static BufferedReader br ; public static void main ( String [ ] args ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String debugDataPath = System . getenv ( " DD_PATH " ) ; if ( debugDataPath != null ) { try { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( new File ( debugDataPath ) ) ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } solve ( ) ; } private static StringTokenizer tokenizer = null ; public static String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } private static int ni ( ) { return Integer . parseInt ( next ( ) ) ; } private static long nl ( ) { return Long . parseLong ( next ( ) ) ; } private static double nd ( ) { return Double . parseDouble ( next ( ) ) ; } private static int [ ] na ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = ni ( ) ; return a ; } private static char [ ] ns ( ) { return next ( ) . toCharArray ( ) ; } private static long [ ] nal ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nl ( ) ; return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y <= K && S - X - Y >= 0 ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > all = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { all . add ( sc . nextInt ( ) ) ; } boolean takahashi = true ; Integer diff1 = all . get ( 3 ) - all . get ( 0 ) ; Integer diff2 = all . get ( 4 ) - all . get ( 1 ) ; Integer diff3 = all . get ( 5 ) - all . get ( 2 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } if ( takahashi ) { diff1 = all . get ( 6 ) - all . get ( 3 ) ; diff2 = all . get ( 7 ) - all . get ( 4 ) ; diff3 = all . get ( 8 ) - all . get ( 5 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { diff1 = all . get ( 1 ) - all . get ( 0 ) ; diff2 = all . get ( 4 ) - all . get ( 3 ) ; diff3 = all . get ( 7 ) - all . get ( 6 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { diff1 = all . get ( 2 ) - all . get ( 1 ) ; diff2 = all . get ( 5 ) - all . get ( 4 ) ; diff3 = all . get ( 8 ) - all . get ( 7 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import static java . lang . Math . * ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int result = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int now = sc . nextInt ( ) ; if ( min > now ) { result ++ ; min = now ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { private static final int MOD = 1_000_000_007 ; private static final String YES = " Yes " ; private static final String NO = " No " ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( N , P ) ) ; } private static int solve ( int N , int [ ] P ) { int count = 0 ; int min = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } return count ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Reader r = new Reader ( ) ; int [ ] [ ] c = new int [ 3 ] [ ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] = r . ii ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) sum += c [ i ] [ j ] ; boolean flag = true ; loop : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int d = 1 ; d < 3 ; d ++ ) { int j = ( i + d ) % 3 ; int k = 3 - i - j ; int s = c [ 0 ] [ i ] + c [ 1 ] [ j ] + c [ 2 ] [ k ] ; if ( 3 * s != sum ) { flag = false ; break loop ; } } } println ( flag ? " Yes " : " No " ) ; } static void print ( Object o ) { System . out . print ( o . toString ( ) ) ; } static void println ( Object o ) { System . out . println ( o . toString ( ) ) ; } static class Reader extends BufferedReader { Reader ( ) { super ( new InputStreamReader ( System . in ) ) ; } String s ( ) throws IOException { return readLine ( ) ; } String [ ] ss ( ) throws IOException { return s ( ) . split ( " " ) ; } int Int ( String s ) { return Integer . parseInt ( s ) ; } int i ( ) throws IOException { return Int ( s ( ) ) ; } int [ ] ii ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; int [ ] ii = new int [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ii [ j ] = Int ( ss [ j ] ) ; return ii ; } } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Vector ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] sequence = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sequence [ i ] = sc . nextInt ( ) ; } int koike = 1 ; int tanaka = 0 ; int min = sequence [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= sequence [ i ] ) { tanaka ++ ; } min = Math . min ( min , sequence [ i ] ) ; } System . out . println ( tanaka ) ; } }
import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . Stack ; public class Main { public static class FastReader { BufferedReader br ; StringTokenizer root ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( root == null || ! root . hasMoreTokens ( ) ) { try { root = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } } return root . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } return str ; } } public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static int mod = ( int ) ( 1e9 + 7 ) ; static long cf = 998244353 ; static final long MAX = ( long ) 1e18 ; public static List < Integer > [ ] edges ; public static int [ ] [ ] parent ; public static int col = 32 ; public static int [ ] Bit ; public static long [ ] dp ; public static long [ ] fac , inv ; public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 ; int min = n ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; min = Math . min ( min , p [ i ] ) ; if ( p [ i ] <= min ) ++ ans ; } out . print ( ans ) ; out . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( ) { try { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public String next ( ) { if ( st . hasMoreTokens ( ) ) return st . nextToken ( ) ; try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { String line = " " ; if ( st . hasMoreTokens ( ) ) line = st . nextToken ( ) ; else try { return br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } while ( st . hasMoreTokens ( ) ) line += " " + st . nextToken ( ) ; return line ; } } public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; boolean one = false , two = false , three = false , four = false ; for ( int i = 0 ; i < 4 ; i ++ ) { int a = sc . nextInt ( ) ; if ( a == 1 ) one = true ; else if ( a == 9 ) two = true ; else if ( a == 7 ) three = true ; else if ( a == 4 ) four = true ; } pw . println ( one && two && three && four ? " YES " : " NO " ) ; pw . close ( ) ; } }
import java . util . * ; public class Main { public static String printAnswer ( int [ ] [ ] c ) { int col1 = 0 ; int col2 = 0 ; int col3 = 0 ; int row1 = 0 ; int row2 = 0 ; int row3 = 0 ; for ( int i = 1 ; i < 3 ; i ++ ) { col1 = c [ 0 ] [ 0 ] - c [ i ] [ 0 ] ; col2 = c [ 0 ] [ 1 ] - c [ i ] [ 1 ] ; col3 = c [ 0 ] [ 2 ] - c [ i ] [ 2 ] ; if ( col1 != col2 || col2 != col3 ) { return " No " ; } row1 = c [ 0 ] [ 0 ] - c [ 0 ] [ i ] ; row2 = c [ 1 ] [ 0 ] - c [ 1 ] [ i ] ; row3 = c [ 2 ] [ 0 ] - c [ 2 ] [ i ] ; if ( row1 != row2 || row2 != row3 ) { return " No " ; } } return " Yes " ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( printAnswer ( c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] N = new int [ 4 ] ; N [ 0 ] = sc . nextInt ( ) ; N [ 1 ] = sc . nextInt ( ) ; N [ 2 ] = sc . nextInt ( ) ; N [ 3 ] = sc . nextInt ( ) ; Arrays . sort ( N ) ; int [ ] array = { 1 , 4 , 7 , 9 } ; if ( Arrays . equals ( N , array ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Map < String , String > hinaMap = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; hinaMap . put ( s , s ) ; } sc . close ( ) ; String answer = " " ; if ( hinaMap . size ( ) == 3 ) { answer = " Three " ; } else if ( hinaMap . size ( ) == 4 ) { answer = " Four " ; } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int temp = s - i - j ; if ( k >= temp && temp >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( ( System . in ) ) ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; int [ ] z = new int [ 3 ] ; String ans = " No " ; for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { z [ i ] = sc . nextInt ( ) ; } if ( x [ 0 ] - x [ 1 ] == y [ 0 ] - y [ 1 ] && z [ 0 ] - z [ 1 ] == y [ 0 ] - y [ 1 ] && x [ 0 ] - x [ 1 ] == z [ 0 ] - z [ 1 ] ) { if ( x [ 1 ] - x [ 2 ] == y [ 1 ] - y [ 2 ] && z [ 1 ] - z [ 2 ] == y [ 1 ] - y [ 2 ] && x [ 1 ] - x [ 2 ] == z [ 1 ] - z [ 2 ] ) { if ( x [ 2 ] - x [ 0 ] == y [ 2 ] - y [ 0 ] && z [ 2 ] - z [ 0 ] == y [ 2 ] - y [ 0 ] && x [ 2 ] - x [ 0 ] == z [ 2 ] - z [ 0 ] ) { ans = " Yes " ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long cnt = 0 ; int K = input . nextInt ( ) ; int S = input . nextInt ( ) ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k >= 0 && k <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } public static boolean Three ( int a , int b , int c ) { if ( a != b && b != c && c != a ) return true ; return false ; } public static boolean One ( int a , int b , int c ) { if ( a == b && b == c && c == a ) return true ; return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; if ( min > P [ i ] ) { count ++ ; min = P [ i ] ; } } scan . close ( ) ; System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , i , j ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - ( i + j ) <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] l = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) l [ i ] [ j ] = sc . nextInt ( ) ; if ( l [ 0 ] [ 0 ] + l [ 1 ] [ 1 ] == l [ 1 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 1 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 1 ] [ 0 ] + l [ 0 ] [ 2 ] == l [ 0 ] [ 0 ] + l [ 1 ] [ 2 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int min = 10000000 ; int count = 0 ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; if ( min >= p [ i ] ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; stdIn . close ( ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String [ ] strs = sc . nextLine ( ) . split ( " " ) ; ArrayList < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { list . add ( Integer . parseInt ( strs [ i ] ) ) ; } Collections . sort ( list ) ; if ( list . get ( 0 ) == 1 && list . get ( 1 ) == 4 && list . get ( 2 ) == 7 && list . get ( 3 ) == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean hasY = false ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { hasY = true ; break ; } } if ( ! hasY ) System . out . println ( " Three " ) ; else System . out . println ( " Four " ) ; sc . close ( ) ; } }
import java . util . * ; import java . util . HashSet ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > colors = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { colors . add ( sc . next ( ) ) ; } if ( colors . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; long ok = Long . MAX_VALUE / 3 ; long ng = 0 ; while ( ok - ng > 1 ) { long m = ( ok + ng ) / 2 ; if ( f ( m ) > X ) { ok = m ; } else { ng = m ; } } System . out . println ( ok - 1 ) ; } static int f ( long n ) { if ( n <= 2 ) return 0 ; return 1 + f ( ( n - 1 ) / 2 ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; Scanner sc = new Scanner ( System . in ) ; main . solve ( sc ) ; sc . close ( ) ; } void solve ( Scanner sc ) { int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y <= K && S >= x + y ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; boolean bl = true ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] || c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class Main { public static void main ( String args [ ] ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean f = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) f = true ; } System . out . println ( f ? " Four " : " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int leftTop = sc . nextInt ( ) ; int middleTop = sc . nextInt ( ) ; int rightTop = sc . nextInt ( ) ; int leftMiddle = sc . nextInt ( ) ; int middleMiddle = sc . nextInt ( ) ; int rightMiddle = sc . nextInt ( ) ; int leftDown = sc . nextInt ( ) ; int middleDown = sc . nextInt ( ) ; int rightDown = sc . nextInt ( ) ; String ans = " Yes " ; int [ ] aTop = { 0 , leftTop - middleTop , leftTop - rightTop } ; int [ ] aMiddle = { 0 , leftMiddle - middleMiddle , leftMiddle - rightMiddle } ; int [ ] aDown = { 0 , leftDown - middleDown , leftDown - rightDown } ; int [ ] bLeft = { 0 , leftTop - leftMiddle , leftTop - leftDown } ; int [ ] bMiddle = { 0 , middleTop - middleMiddle , middleTop - middleDown } ; int [ ] bRight = { 0 , rightTop - rightMiddle , rightTop - rightDown } ; if ( ! Arrays . equals ( aTop , aMiddle ) || ! Arrays . equals ( aTop , aDown ) ) { ans = " No " ; } if ( ! Arrays . equals ( bLeft , bMiddle ) || ! Arrays . equals ( bLeft , bRight ) ) { ans = " No " ; } System . out . println ( ans ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; Set < String > list = new HashSet < String > ( ) ; int num = sc . nextInt ( ) ; for ( int i = 0 ; i < num ; i ++ ) { list . add ( sc . next ( ) ) ; } if ( list . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else if ( list . size ( ) == 4 ) { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int ret = 0 ; for ( int x = 0 ; x <= K ; x ++ ) for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z < 0 ) break ; if ( z > K ) continue ; ret ++ ; } System . out . println ( ret ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] sum = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean jdg = true ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 0 ] = 0 ; a [ 1 ] = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { jdg = false ; break ; } } } if ( jdg ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) ) >= 0 && ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int maxNum = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= maxNum ; ++ x ) { for ( int y = 0 ; y <= maxNum ; ++ y ) { int z = sum - x - y ; if ( 0 <= z && z <= maxNum ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int array [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { array [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long ans = array [ 1 ] - 1 ; array [ 1 ] = 1 ; int curr = 2 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( array [ i ] < curr ) continue ; if ( array [ i ] > curr ) { ans += array [ i ] / curr ; if ( array [ i ] % curr == 0 ) -- ans ; } if ( array [ i ] == curr ) ++ curr ; } System . out . print ( ans ) ; } }
function main ( input ) { const n = parseInt ( input , 10 ) ; let total = n * 800 , get = Math . floor ( n / 15 ) * 200 ; console . log ( total - get ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " / " ) ; for ( i = 0 ; i <= 2 ; i ++ ) { inputs [ i ] = parseInt ( inputs [ i ] , 10 ) ; } if ( inputs [ 0 ] <= 2019 ) { if ( inputs [ 1 ] <= 4 ) { if ( inputs [ 2 ] <= 30 ) { console . log ( " Heisei " ) } else { console . log ( " TBD " ) ; } } else { console . log ( " TBD " ) ; } } else { console . log ( " TBD " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; s = s . slice ( 0 , j ) + String . fromCharCode ( code ) + s . slice ( j + 1 ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; s = s . slice ( 0 , j ) + " a " + s . slice ( j + 1 ) ; } } } console . log ( s ) ;
function main ( input ) { var N = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var M = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; var list = [ ] ; for ( var i = 1 ; i <= M ; i ++ ) { list . push ( input [ i ] . split ( " " ) . map ( v => v - 0 ) ) ; } list = list . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] ) || ( a [ 1 ] - b [ 1 ] ) ) ; var map = { } ; list . forEach ( ( v , i ) => { var c = v [ 0 ] ; var y = v [ 1 ] ; if ( ! map [ c ] ) { map [ c ] = { len : 0 } ; } map [ c ] [ y ] = ++ map [ c ] . len ; } ) ; for ( var i = 1 ; i <= M ; i ++ ) { var c = input [ i ] . split ( " " ) [ 0 ] ; var y = input [ i ] . split ( " " ) [ 1 ] ; var num = map [ c ] [ y ] ; console . log ( ( " 000000 " + c ) . slice ( - 6 ) + ( " 000000 " + num ) . slice ( - 6 ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = arg [ 0 ] . split ( " " ) . map ( n => ~ ~ n ) ; console . log ( ~ ~ N . sort ( ( a , b ) => a - b ) . join ( " " ) === 1479 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const input_array = input . split ( " \n " ) ; const a = parseInt ( input_array [ 0 ] , 10 ) ; const b = parseInt ( input_array [ 1 ] , 10 ) ; const c = parseInt ( input_array [ 2 ] , 10 ) ; const desired_sum = parseInt ( input_array [ 3 ] , 10 ) ; var answer = 0 ; for ( i = 0 ; i <= a ; ++ i ) { for ( j = 0 ; j <= b ; ++ j ) { for ( k = 0 ; k <= c ; ++ k ) { if ( 500 * i + 100 * j + 50 * k == desired_sum ) { answer += 1 ; } } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function Main ( is ) { const i = is . split ( " \n " ) ; let s = i [ 0 ] ; let p = parseInt ( i [ 1 ] ) ; for ( let i = 0 ; i < s . length ; i ++ ) { let code = s [ i ] . charCodeAt ( 0 ) ; if ( s . length - 1 == i ) { code += p % 26 ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } let lastLetter = String . fromCharCode ( code ) ; s = s . slice ( 0 , i ) + lastLetter + s . slice ( i + 1 ) ; } else { if ( ( 27 - ( code - 97 + 1 ) ) <= p && ! ( s [ i ] == " a " ) ) { p = p - ( 27 - ( code - 97 + 1 ) ) ; s = s . slice ( 0 , i ) + " a " + s . slice ( i + 1 ) ; } } } console . log ( s ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) . map ( Number ) ; arr . some ( function ( v ) { if ( v == 0 ) return true ; var cnt = 0 ; for ( var a = 1 ; a <= 181 ; a ++ ) { var A = a * a ; if ( v < A ) break ; if ( A == v ) cnt ++ ; for ( var b = a ; b <= 181 ; b ++ ) { var B = A + b * b ; if ( v < B ) break ; if ( B == v ) cnt ++ ; for ( var c = b ; c <= 181 ; c ++ ) { var C = B + c * c ; if ( v < C ) break ; if ( C == v ) cnt ++ ; for ( var d = c ; d <= 181 ; d ++ ) { var D = C + d * d ; if ( v < D ) break ; if ( D == v ) cnt ++ ; } } } } console . log ( cnt ) ; } ) ;
function Main ( input ) { input = input . split ( ' ' ) var A = parseInt ( input [ 0 ] ) var B = parseInt ( input [ 1 ] ) if ( A <= 8 && B <= 8 ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const a = s [ 0 ] ; const b = s [ 1 ] ; const c = s [ 2 ] ; const d = s [ 3 ] ; const ans = Math . max ( a * b , c * d ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ;
function main ( input ) { console . log ( input * input ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let a = next ( ) ; let b = next ( ) ; return Math . ceil ( ( a + b ) / 2 ) }
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , len = X . length , result = 0 , avg = function ( data ) { var sum = 0 ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < len ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var words = lines [ 0 ] . split ( " " ) ; var ans1 = [ 5 , 5 , 7 ] var ans2 = [ 5 , 7 , 5 ] var ans3 = [ 7 , 5 , 5 ] console . log ( words . join ( ' ' ) === ans1 . join ( ' ' ) || words . join ( ' ' ) === ans2 . join ( ' ' ) || words . join ( ' ' ) === ans3 . join ( ' ' ) ? ' YES ' : ' NO ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( Number ) const ans = Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines = Number ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { console . log ( lines * lines * lines ) ; } ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const NM = input [ 0 ] . split ( ' ' ) . map ( Number ) ; const N = NM [ 0 ] ; const M = NM [ 1 ] ; const As = input . slice ( 1 , N + 1 ) ; const Bs = input . slice ( N + 1 , N + M + 1 ) ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { let flag = true ; for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] !== Bs [ bx ] [ by ] ) { flag = false ; break ; } } if ( ! flag ) break ; } if ( flag ) { console . log ( ' Yes ' ) ; process . exit ( 0 ) ; } } } console . log ( ' No ' ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) . createInterface ( process . stdin , process . stdout ) ; var parseInt10 = function ( elem ) { return parseInt ( elem , 10 ) ; } var toInt = function ( line ) { var intArray = line . split ( ' ' ) . map ( parseInt10 ) ; if ( intArray . length === 1 ) { return intArray [ 0 ] ; } else { return intArray ; } } ; var settings = { } ; var defineRule = function ( index , data , vars ) { settings [ index ] = { } ; for ( var i = 0 ; i < vars . length ; i += 1 ) { settings [ index ] [ vars [ i ] ] = data [ i ] ; } } ; var calculate = function ( data ) { var v = Math . pow ( data , 3 ) ; console . log ( v ) ; } ; readline . on ( ' line ' , function ( line ) { line = toInt ( line ) ; lines . push ( line ) ; calculate ( line ) ; } ) ;
let [ a , b , c ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) . sort ( ( x , y ) => x - y ) ; console . log ( a == 5 && b == 5 && c == 7 ? " YES " : " NO " ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; let go = 0 ; let nana = 0 ; for ( let i = 0 ; i < args . length ; i ++ ) { if ( args [ i ] === 5 ) { go ++ ; } ; if ( args [ i ] === 7 ) { nana ++ ; } ; } if ( go === 2 && nana === 1 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( args => { const [ A , B , H , M ] = args . trim ( ) . split ( ' ' ) . map ( parseFloat ) ; const theta = ( ( H + M / 60 ) / 12.0 - M / 60.0 ) * Math . PI * 2.0 ; const CC = A * A + B * B - 2.0 * A * B * Math . cos ( theta ) ; console . log ( ( Math . sqrt ( CC ) ) . toString ( ) ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var main = function main ( input ) { var A = parseInt ( input . split ( " \n " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " \n " ) [ 1 ] , 10 ) ; var C = parseInt ( input . split ( " \n " ) [ 2 ] , 10 ) ; var X = parseInt ( input . split ( " \n " ) [ 3 ] , 10 ) ; var count = 0 ; for ( var i = 0 ; i <= A ; i ++ ) { for ( var j = 0 ; j <= B ; j ++ ) { for ( var k = 0 ; k <= C ; k ++ ) { var total = 500 * i + 100 * j + 50 * k ; if ( total == X ) { count ++ ; } } } } console . log ( count ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) ; const a = Number ( s [ 0 ] ) ; const b = Number ( s [ 1 ] ) ; const c = Number ( s [ 2 ] ) ; const x = Number ( s [ 3 ] ) ; let counter = 0 ; for ( let i = 0 ; i <= a ; i ++ ) { for ( let j = 0 ; j <= b ; j ++ ) { for ( let k = 0 ; k <= c ; k ++ ) { const sum = ( 500 * i ) + ( 100 * j ) + ( 50 * k ) if ( sum === x ) counter += 1 ; } } } console . log ( counter ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = input => { const n = parseInt ( input [ 0 ] . split ( ' ' ) [ 0 ] ) , d = parseInt ( input [ 0 ] . split ( ' ' ) [ 1 ] ) ; let x = new Array ( ) ; for ( let i = 0 ; i < n ; i ++ ) { x [ i ] = input [ i + 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; } let ans = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let value = 0 ; for ( let k = 0 ; k < d ; k ++ ) { value += Math . pow ( Math . abs ( x [ i ] [ k ] - x [ j ] [ k ] ) , 2 ) ; } value = Math . pow ( value , 0.5 ) ; if ( Number . isInteger ( value ) ) { ans ++ ; } } } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function Main ( input ) { var cards = input . split ( " " ) ; var cardA = parseInt ( cards [ 0 ] ) ; var cardB = parseInt ( cards [ 1 ] ) ; if ( cardA == 1 ) { cardA = 14 ; } if ( cardB == 1 ) { cardB = 14 ; } if ( cardA > cardB ) { console . log ( " Alice " ) ; } else if ( cardA < cardB ) { console . log ( " Bob " ) ; } else if ( cardA == cardB ) console . log ( " Draw " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var s = a + b if ( s >= c ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var arr = input . split ( ' \n ' ) ; var c = [ ] ; c . push ( arr [ 0 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 1 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 2 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; if ( ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) ) { console . log ( ' Yes ' ) ; } else { console . log ( ' No ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var toInt = x => parseInt ( x , 10 ) ; var toIntArr = arr => arr . map ( x => toInt ( x ) ) ; var abs = x => x > 0 ? x : - x ; function min ( ) { var rest = arguments , val = rest [ 0 ] ; for ( var i = 1 ; i < rest . length ; i ++ ) if ( rest [ i ] < val ) val = rest [ i ] ; return val } function max ( ) { var rest = arguments , val = rest [ 0 ] ; for ( var i = 1 ; i < rest . length ; i ++ ) if ( rest [ i ] > val ) val = rest [ i ] ; return val } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( input ) { var input = input . split ( ' \n ' ) ; input = input [ 0 ] . split ( ' ' ) ; var as = toIntArr ( input ) . sort ( function ( a , b ) { return a - b } ) ; console . log ( as [ 2 ] - as [ 0 ] ) ; }
" use strict " ; function main ( input ) { input = input . split ( ' ' ) ; const K = parseInt ( input [ 0 ] ) ; const S = parseInt ( input [ 1 ] ) ; let count = 0 if ( S < 0 || S > 3 * K ) { } else if ( K < 2 || K > 2500 ) { } else if ( S === 3 * K ) { count = 1 } else { for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { const Z = S - ( i + j ) if ( Z >= 0 && Z <= K ) { count ++ } } } } console . log ( count ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function m ( input ) { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function Main ( input ) { const args = input . trim ( ) . split ( ' \n ' ) ; const A = Number ( args [ 0 ] ) ; const B = Number ( args [ 1 ] ) ; const C = Number ( args [ 2 ] ) ; const X = Number ( args [ 3 ] ) ; let ret = 0 ; for ( let a = 0 ; a <= A ; ++ a ) { for ( let b = 0 ; b <= B ; ++ b ) { for ( let c = 0 ; c <= C ; ++ c ) { let cnt = 500 * a + 100 * b + 50 * c ; if ( X == cnt ) ++ ret ; } } } console . log ( ret ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var s = input [ 0 ] - 0 ; console . log ( Math . pow ( s , 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) )
function main ( input ) { var args = input . split ( " " ) . map ( x => parseInt ( x ) ) ; if ( args [ 0 ] < 9 && args [ 1 ] < 9 ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
" use strict " const Main = ( input ) => { const Array = input . split ( " " ) const A = parseInt ( Array [ 0 ] , 10 ) const B = parseInt ( Array [ 1 ] , 10 ) const C = parseInt ( Array [ 2 ] , 10 ) const Answer = ( A + B ) >= C ? " Yes " : " No " console . log ( Answer ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) N = inp . shift ( ) * 1 a = inp . shift ( ) . split ( ' ' ) . map ( x => x - 0 ) min = a [ 0 ] c = 1 for ( i = 1 ; i < N ; i ++ ) { if ( min > a [ i ] ) { c ++ min = a [ i ] } } console . log ( c )
" use strict " const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const n = ~ ~ ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const m = ~ ~ ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const a = arg . slice ( 1 , n + 1 ) . map ( n => n . split ( " " ) ) ; const b = arg . slice ( n + 1 , ( n + 1 ) + ( m + 1 ) ) . map ( n => n . split ( " " ) ) ; let answer = false ; const A = [ ] ; const B = [ ] ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { A . push ( i ) ; B . push ( j ) ; } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { for ( let k = 0 , len = Math . pow ( m , 2 ) ; k < len ; k ++ ) { const X = i + A [ k ] ; const Y = j + B [ k ] ; if ( X < 0 || n <= X ) break ; if ( Y < 0 || n <= Y ) break ; if ( a [ X ] [ Y ] !== b [ A [ k ] ] [ B [ k ] ] ) break ; if ( k === ( len - 1 ) ) answer = true ; } } } console . log ( answer ? " Yes " : " No " ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
' use strict ' const main = ( input ) => { let tasks = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) tasks = tasks . sort ( ( a , b ) => a - b ) let total = 0 for ( let i = 1 ; i < tasks . length ; i ++ ) { total += tasks [ i ] - tasks [ i - 1 ] } console . log ( total ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; const N = parseInt ( input [ 0 ] ) ; const X = input [ 1 ] . split ( " " ) . map ( v => parseInt ( v ) ) ; t = X . reduce ( ( p , c ) => p + c ) ; av = Math . round ( t / N ) ; total = 0 ; X . forEach ( v => { total += Math . pow ( v - av , 2 ) ; } ) ; console . log ( total ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) ; const birth = Number ( input [ 0 ] ) ; const price = birth > 5 ? birth <= 12 ? Number ( input [ 1 ] ) / 2 : Number ( input [ 1 ] ) : 0 console . log ( price ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { input = input . split ( " " ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; let result = B ; if ( 6 <= A && A <= 12 ) result = B / 2 ; else if ( A <= 5 ) result = 0 console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; inA = parseInt ( input [ 0 ] ) ; inB = parseInt ( input [ 1 ] ) ; answerY = " Yay! " ; answerN = " :( " ; answer = answerY ; if ( inA > 8 || inB > 8 ) { answer = answerN ; } console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const radius = parseInt ( lines [ 0 ] ) const circle = radius * radius console . log ( circle ) } ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } else if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) { m = index ; MAX = V [ 0 ] ; } } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
function main ( sti ) { let items = sti ; console . log ( Math . pow ( sti , 3 ) ) ; } var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; main ( input ) ;
function Main ( input ) { var input = parseInt ( input , 10 ) ; const num = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; for ( var i = num . length - 1 ; - 1 < i ; i -- ) { if ( num [ i ] <= input ) { console . log ( num [ i ] ) ; break ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var ans = 0 ; var maxover3 = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= maxover3 ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( k >= j && k <= max ) { if ( i === j && i === k ) { ans ++ ; } else if ( i === j || i === k || k === j ) { ans += 3 ; } else { ans += 6 ; } } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( x * x * x ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( Arr . length != 0 ) { var result = [ ] ; var NT = ( Arr . shift ( ) ) . split ( " " ) . map ( Number ) ; for ( var i = 0 ; i < NT [ 0 ] ; i ++ ) { var arr = ( Arr . shift ( ) ) . split ( " " ) ; var a = arr [ 0 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; if ( i > 0 ) { var A = a [ 0 ] * 60 + a [ 1 ] ; var B = b [ 0 ] * 60 + b [ 1 ] ; if ( A - B >= NT [ 1 ] ) result . push ( c + " " + ( A - B ) ) ; } var b = arr [ 2 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; var c = arr [ 3 ] ; } console . log ( result . length ) ; result . forEach ( function ( v ) { console . log ( v ) ; } ) ; }
function Main ( input ) { var inp = input . split ( ' \n ' ) ; var c1 = inp [ 0 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var c2 = inp [ 1 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var c3 = inp [ 2 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var C = [ ] ; C [ 0 ] = c1 ; C [ 1 ] = c2 ; C [ 2 ] = c3 ; var x = [ ] ; var y = [ ] ; x [ 0 ] = 0 ; for ( var i = 0 ; i < 3 ; i ++ ) { y [ i ] = C [ 0 ] [ i ] - x [ 0 ] ; } for ( var i = 0 ; i < 3 ; i ++ ) { x [ i ] = C [ i ] [ 0 ] - y [ 0 ] ; } var good = true ; for ( var i = 0 ; i < 3 ; i ++ ) { for ( var j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] !== C [ i ] [ j ] ) { good = false ; } } } if ( good ) { console . log ( ' Yes ' ) ; } else { console . log ( ' No ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { let output = input * input * input ; console . log ( output ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_string = " " ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { input_string = line ; } ) ; reader . on ( ' close ' , ( ) => { var x = input_string ; console . log ( x * x * x ) ; } ) ;
var input = require ( " fs " ) . readFileSync ( 0 , " utf8 " ) ; var a = input . match ( / \d+ / g ) . map ( Number ) ; var x = Math . abs ( a [ 0 ] - a [ 1 ] ) , y = Math . abs ( a [ 1 ] - a [ 2 ] ) , z = Math . abs ( a [ 2 ] - a [ 0 ] ) ; var ans = x + y + z - Math . max ( x , y , z ) ; console . log ( ans ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var n = Number ( lines [ 0 ] ) ; var info = [ ] ; for ( i = 1 ; i <= n ; i ++ ) { var num = i ; var count = 0 ; while ( num % 2 == 0 ) { count ++ ; num = num / 2 ; } info . push ( count ) ; } var max = Math . max ( ... info ) ; var index = info . indexOf ( max ) ; console . log ( index + 1 ) ; } ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , ( x ) => { lines . push ( x ) ; } ) ; rl . on ( ' close ' , ( ) => { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A <= 8 && B <= 8 ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } )
function Main ( input ) { console . log ( input * 800 - Math . floor ( input / 15 ) * 200 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var data = arg . trim ( ) . split ( " \n " ) var tmp = data . shift ( ) . split ( ' ' ) . map ( Number ) var N = tmp [ 0 ] var D = tmp [ 1 ] data = data . map ( e => e . split ( ' ' ) . map ( Number ) ) var ans = 0 for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i ; j < N ; j ++ ) { if ( i === j ) continue var row1 = data [ i ] var row2 = data [ j ] var yz = 0 for ( var d = 0 ; d < D ; d ++ ) { var t = Math . abs ( row1 [ d ] - row2 [ d ] ) yz += t * t } var tAns = Math . sqrt ( yz ) if ( ! ( String ( tAns ) . split ( ' . ' ) . length > 1 ) ) { ans ++ } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input ; list = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; for ( i = 0 ; i < list . length ; i ++ ) { if ( list [ i ] <= input ) { console . log ( list [ i ] ) ; break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; tmp . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) result = tmp . toString ( ) == [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ; console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) ; const B = parseInt ( args [ 1 ] , 10 ) ; const C = parseInt ( args [ 2 ] , 10 ) ; const X = parseInt ( args [ 3 ] , 10 ) ; const patArray = [ ] ; for ( var a = 0 ; a <= A ; a ++ ) { for ( var b = 0 ; b <= B ; b ++ ) { for ( var c = 0 ; c <= C ; c ++ ) { patArray . push ( 500 * a + 100 * b + 50 * c ) ; } } } console . log ( patArray . filter ( function ( x ) { return x == X } ) . length ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { let n = parseInt ( input [ 0 ] ) ; let x = input [ 1 ] . trim ( ) . split ( " " ) ; for ( let i = 0 ; i < x . length ; i ++ ) { x [ i ] = parseInt ( x [ i ] ) ; } x . sort ( function ( a , b ) { return b - a ; } ) ; let sum = [ ] ; for ( let i = 0 ; i < x [ 0 ] + 1 ; i ++ ) { sum [ i ] = 0 ; for ( let j = 0 ; j < x . length ; j ++ ) { sum [ i ] += Math . pow ( ( i - x [ j ] ) , 2 ) ; } } console . log ( Math . min ( ... sum ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
function Main ( input ) { var number = parseInt ( input ) ; console . log ( number * number * number ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { const tmp = input . split ( ' ' ) ; let five = 0 ; let seven = 0 ; for ( let i = 0 ; i < tmp . length ; i ++ ) { if ( tmp [ i ] == 5 ) { five ++ ; } else if ( tmp [ i ] == 7 ) { seven ++ ; } } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; console . log ( Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; x = input [ 1 ] . split ( " " ) . map ( x => Number ( x ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var p = Math . round ( total / x . length ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . abs ( Math . pow ( ( x [ i ] - p ) , 2 ) ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let A = next ( ) ; let V = next ( ) ; let B = next ( ) ; let W = next ( ) ; let T = next ( ) ; if ( A == B ) return ' YES ' ; let kyori = Math . abs ( A - B ) ; let sokudo = V - W ; if ( sokudo <= 0 ) return ' NO ' if ( kyori <= sokudo * T ) return ' YES ' return ' NO ' }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; function main ( input ) { var arg = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n ) ) ; var ans = 0 for ( var f = 0 ; f <= arg [ 0 ] ; f ++ ) { for ( var h = 0 ; h <= arg [ 1 ] ; h ++ ) { for ( var o = 0 ; o <= arg [ 2 ] ; o ++ ) { if ( 500 * f + 100 * h + 50 * o === arg [ 3 ] ) { ans += 1 ; } } } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( i => parseInt ( i ) ) const A = input [ 0 ] const B = input [ 1 ] if ( A <= 8 && B <= 8 ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' ; function Main ( input ) { const tmp = input . split ( " \n " ) [ 0 ] . split ( " " ) ; const one = tmp [ 0 ] * tmp [ 1 ] ; const two = tmp [ 2 ] * tmp [ 3 ] ; if ( one < two ) { console . log ( two ) ; } else { console . log ( one ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , len = X . length , result = 0 , avg = function ( data ) { var sum = 0 ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < len ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { const inputLines = input . split ( " \n " ) ; const line0 = inputLines [ 0 ] ; const line0vars = line0 . split ( " " ) ; const h1 = parseInt ( line0vars [ 0 ] , 10 ) const m1 = parseInt ( line0vars [ 1 ] , 10 ) const h2 = parseInt ( line0vars [ 2 ] , 10 ) const m2 = parseInt ( line0vars [ 3 ] , 10 ) const k = parseInt ( line0vars [ 4 ] , 10 ) const result = h2 * 60 + m2 - h1 * 60 - m1 - k ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var limit = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; console . log ( array [ array . length - 1 ] - array [ 0 ] <= limit ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function dist ( a , b ) { const xa = a . trim ( ) . split ( ' ' ) . map ( Number ) [ 0 ] ; const ya = a . trim ( ) . split ( ' ' ) . map ( Number ) [ 1 ] ; const xb = b . trim ( ) . split ( ' ' ) . map ( Number ) [ 0 ] ; const yb = b . trim ( ) . split ( ' ' ) . map ( Number ) [ 1 ] ; const X = xa - xb ; const Y = ya - yb ; return Math . sqrt ( Math . pow ( X , 2 ) + Math . pow ( Y , 2 ) ) } function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; const N = Number ( input [ 0 ] ) ; const XY = input . slice ( 1 , input . length ) ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { let a = XY [ i ] ; let b = XY [ j ] ; sum += dist ( a , b ) ; } } console . log ( sum / N ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const [ a , b , t ] = input . trim ( ) . split ( ' \n ' ) . map ( ( x ) => x . split ( ' ' ) . map ( ( v ) => Number ( v ) ) ) const distance = Math . abs ( a [ 0 ] - b [ 0 ] ) const distance2 = ( a [ 1 ] - b [ 1 ] ) * t [ 0 ] console . log ( distance <= distance2 ? ' YES ' : ' NO ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const distance = input . pop ( ) in put = input . map ( ( val , index ) => { let result = true for ( let i = index ; i < input . length ; i ++ ) { if ( result ) { result = input [ i ] - val <= distance } } return result } ) console . log ( input . filter ( result => result === false ) . length === 0 ? ' Yay! ' : ' :( ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var str = input ; var tmp = str . split ( " \n " ) ; var a = tmp [ 0 ] ; var b = tmp [ 1 ] ; var c = tmp [ 2 ] ; var d = tmp [ 3 ] ; var e = tmp [ 4 ] ; var a1 = parseInt ( a . slice ( - 1 ) , 10 ) ; var b1 = parseInt ( b . slice ( - 1 ) , 10 ) ; var c1 = parseInt ( c . slice ( - 1 ) , 10 ) ; var d1 = parseInt ( d . slice ( - 1 ) , 10 ) ; var e1 = parseInt ( e . slice ( - 1 ) , 10 ) ; var array = [ a1 , b1 , c1 , d1 , e1 ] ; for ( i = 0 ; i < 5 ; i ++ ) { if ( array [ i ] == 0 ) { array [ i ] = 10 ; } } var min_index = array . indexOf ( Math . min . apply ( null , array ) ) ; var kekka = 0 ; for ( i = 0 ; i < 5 ; i ++ ) { if ( i == min_index ) { tmp [ i ] = parseInt ( tmp [ i ] , 10 ) ; } else { tmp [ i ] = Math . ceil ( tmp [ i ] / 10 ) * 10 ; } } function sum ( a ) { return a . reduce ( function ( x , y ) { return x + y ; } ) ; } var kekka = sum ( tmp ) ; console . log ( kekka ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . split ( " " ) var a = input [ 0 ] var b = input [ 1 ] var h = input [ 2 ] var m = input [ 3 ] var c = h * 30 + m * 30 / 60 ; var d = m * 6 ; if ( Math . abs ( c - d ) < 180 ) { var theta = Math . abs ( c - d ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } else { var theta = ( 360 - Math . abs ( c - d ) ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Vector ( x , y ) { this . x = x ; this . y = y ; } Vector . prototype . sub = function ( v ) { return new Vector ( this . x - v . x , this . y - v . y ) ; } ; Vector . prototype . product = function ( v ) { return this . x * v . y - this . y * v . x ; } ; ( function ( input ) { var line = input . replace ( / \n$ / , ' ' ) . split ( ' \n ' ) ; while ( line . length > 0 ) { var p = line . shift ( ) . split ( ' ' ) . map ( Number ) ; var v1 = new Vector ( p . shift ( ) , p . shift ( ) ) ; var v2 = new Vector ( p . shift ( ) , p . shift ( ) ) ; var v3 = new Vector ( p . shift ( ) , p . shift ( ) ) ; var p = new Vector ( p . shift ( ) , p . shift ( ) ) ; var v12 = v2 . sub ( v1 ) ; var v2p = p . sub ( v2 ) ; var v23 = v3 . sub ( v2 ) ; var v3p = p . sub ( v3 ) ; var v31 = v1 . sub ( v3 ) ; var v1p = p . sub ( v1 ) ; var c1 = v12 . product ( v2p ) ; var c2 = v23 . product ( v3p ) ; var c3 = v31 . product ( v1p ) ; if ( ( c1 > 0 && c2 > 0 && c3 > 0 ) || ( c1 < 0 && c2 < 0 && c3 < 0 ) ) { console . log ( ' YES ' ) ; continue ; } console . log ( ' NO ' ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , result = 0 , avg = function ( data ) { var sum = 0 , len = data . length ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < X . length ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( Math . max ( a [ 0 ] , a [ 1 ] ) > 8 ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const BKRT = " \n " ; const SPAC = " " ; const NOSP = " " ; function Main ( input ) { input = [ ] . concat ( ... input . split ( BKRT ) . map ( a => a . split ( SPAC ) ) ) ; const strShift = ( ) => input . shift ( ) ; const intShift = ( ) => ~ ~ input . shift ( ) ; var A = intShift ( ) ; var B = intShift ( ) ; var C = intShift ( ) ; var X = intShift ( ) ; var sum = 0 ; for ( var a = 0 ; a <= A ; a ++ ) for ( var b = 0 ; b <= B ; b ++ ) for ( var c = 0 ; c <= C ; c ++ ) { if ( 500 * a + 100 * b + 50 * c == X ) sum ++ ; } return ~ ~ sum ; } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
function main ( input ) { var foods = input . split ( / \n / ) . map ( s => ~ ~ s ) ; var lastServeIndex = 0 ; foods . reduce ( ( minSurplus , curTime , index ) => { const curSurplus = curTime % 10 ; if ( curSurplus !== 0 && minSurplus > curSurplus ) { lastServeIndex = index ; return curSurplus ; } else { return minSurplus ; } } , 10 ) ; const res = foods . reduce ( ( pre , cur , index ) => { if ( index === lastServeIndex ) { return pre + cur ; } else { return pre + Math . ceil ( cur / 10 ) * 10 ; } } , 0 ) console . log ( res ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( x * x * x ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . trim ( ) var a = input * 800 a -= Math . floor ( input / 15 ) * 200 ; console . log ( a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { function compareFunc ( a , b ) { return a - b ; } input = input . trim ( ) . split ( ' ' ) ; input . sort ( compareFunc ) ; a = input [ 1 ] - input [ 0 ] ; b = input [ 2 ] - input [ 1 ] ; ans = a + b ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { let x = parseInt ( input , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; input = input [ 0 ] . split ( " " ) ; let a = parseInt ( input [ 0 ] , 10 ) ; let b = parseInt ( input [ 1 ] , 10 ) ; let h = parseInt ( input [ 2 ] , 10 ) ; let m = parseInt ( input [ 3 ] , 10 ) ; console . log ( Math . sqrt ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) - 2 * a * b * Math . cos ( 2 * Math . PI * Math . abs ( h / 12 + m / 60 / 12 - m / 60 ) ) ) . toFixed ( 20 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( input ) { Array . prototype . max = function ( ) { return Math . max . apply ( null , this ) } Array . prototype . min = function ( ) { return Math . min . apply ( null , this ) } num = ( val ) => Array . isArray ( val ) ? val . map ( ( v ) => Number ( v ) ) : Number ( val ) print = console . log var line = input . split ( " \n " ) var n = num ( line [ 0 ] ) var a = num ( line [ 1 ] . split ( " " ) ) print ( a . max ( ) - a . min ( ) ) }
' use strict ' ; const fs = require ( ' fs ' ) ; function main ( arg ) { let input = arg . split ( / \s / ) ; let a = parseInt ( input [ 0 ] , 10 ) ; console . log ( ` ${ a * a } ` ) ; } main ( fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( num => Number ( num ) ) ; input . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; if ( input . toString ( ) === [ 5 , 5 , 7 ] . toString ( ) ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] ) ; var b = parseInt ( input [ 1 ] ) ; var x = ( a + b ) / 2 ; console . log ( Math . ceil ( x ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . split ( ' ' ) const a = parseInt ( args [ 0 ] , 10 ) const b = parseInt ( args [ 1 ] , 10 ) console . log ( Math . ceil ( ( a + b ) / 2 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var A = ~ ~ input [ 0 ] ; var B = ~ ~ input [ 1 ] ; var C = ~ ~ input [ 2 ] ; var X = ~ ~ input [ 3 ] ; var You = function ( ) { this . match = 0 ; } ; You . prototype = { procedure : function ( ) { this . match = 0 ; for ( var a = 0 ; a <= A ; a ++ ) { for ( var b = 0 ; b <= B ; b ++ ) { for ( var c = 0 ; c <= C ; c ++ ) { if ( a * 500 + b * 100 + c * 50 == X ) { this . match ++ ; } } } } return this . match ; } } var you = new You ( ) ; console . log ( you . procedure ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( Math . pow ( Number ( input ) , 3 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var square = function ( x ) { return Math . pow ( x , 3 ) ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
a = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' / ' ) . map ( Number ) ; console . log ( a [ 0 ] >= 2019 && a [ 1 ] >= 5 ? ' TBD ' : ' Heisei ' ) ;
' use strict ' ; function Main ( input ) { const tmp = input . split ( " \n " ) ; const A = tmp [ 0 ] ; const B = tmp [ 1 ] ; const C = tmp [ 2 ] ; const X = tmp [ 3 ] ; let cnt = 0 ; for ( let a = 0 ; a <= A ; a ++ ) { for ( let b = 0 ; b <= B ; b ++ ) { for ( let c = 0 ; c <= C ; c ++ ) { let total = a * 500 + b * 100 + c * 50 ; if ( total == X ) { cnt ++ ; } } } } console . log ( cnt ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var K = parseInt ( tmp [ 0 ] , 10 ) ; var S = parseInt ( tmp [ 1 ] , 10 ) ; var x , y , z ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { x = i ; for ( var j = 0 ; j <= K ; j ++ ) { y = j ; z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count += 1 ; } } } console . log ( ' %d ' , count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( x * x * x ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; const d = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; console . log ( Math . max . apply ( null , [ a * b , c * d ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const CODE_A = 97 ; let s = inputs [ 0 ] ; let K = parseInt ( inputs [ 1 ] ) ; let cur = 0 ; let result = ' ' ; let lastFailedCur = - 1 ; let lastFailedCode = - 1 ; while ( cur < s . length ) { let distance = 26 - ( s . charCodeAt ( cur ) - CODE_A ) ; if ( distance === 26 ) { result += ' a ' ; } else if ( distance <= K ) { K -= distance ; result += ' a ' ; } else { lastFailedCur = cur ; lastFailedCode = s . charCodeAt ( cur ) ; result += s [ cur ] ; } cur ++ ; } if ( K > 0 ) { K = K % 26 ; if ( lastFailedCode === - 1 ) { lastFailedCur = s . length - 1 ; lastFailedCode = result . charCodeAt ( result . length - 1 ) ; } result = result . substr ( 0 , lastFailedCur ) + String . fromCharCode ( CODE_A + ( lastFailedCode + K - CODE_A ) % 26 ) + result . substr ( lastFailedCur + 1 ) ; } console . log ( result ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) K = l [ 0 ] * 1 S = l [ 1 ] * 1 cnt = 0 for ( i = 0 ; i <= K ; i ++ ) { for ( j = 0 ; j <= K ; j ++ ) { t = S - ( i + j ) if ( t >= 0 && t <= K ) { cnt ++ } } } console . log ( cnt )
function length_plus ( moji ) { moji = String ( moji ) ; while ( moji . length < 6 ) { moji = " 0 " + moji ; } return ( moji ) ; } function Main ( input ) { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; N = parseInt ( tmp1 [ 0 ] ) ; M = parseInt ( tmp1 [ 1 ] ) ; var hairetu = [ ] ; for ( i = 1 ; i < M + 1 ; i ++ ) { i_nojyoho = input [ i ] . split ( " " ) hairetu . push ( { kuni : parseInt ( i_nojyoho [ 0 ] ) , shi : i , nen : parseInt ( i_nojyoho [ 1 ] ) } ) ; } hairetu . sort ( function ( a , b ) { if ( a . kuni < b . kuni ) return - 1 ; if ( a . kuni > b . kuni ) return 1 ; if ( a . nen < b . nen ) return - 1 ; if ( a . nen > b . nen ) return 1 ; return 0 ; } ) ; for ( i = 0 ; i < hairetu . length ; i ++ ) { if ( i === 0 || hairetu [ i ] . kuni !== hairetu [ i - 1 ] . kuni ) { hairetu [ i ] . jyun = 1 ; } else { hairetu [ i ] . jyun = hairetu [ i - 1 ] . jyun + 1 ; } } for ( i = 0 ; i < hairetu . length ; i ++ ) { bangou = length_plus ( hairetu [ i ] . kuni ) + length_plus ( hairetu [ i ] . jyun ) ; hairetu [ i ] . bangou = bangou ; } hairetu . sort ( function ( a , b ) { if ( a . shi < b . shi ) return - 1 ; if ( a . shi > b . shi ) return 1 ; return 0 ; } ) ; for ( i = 0 ; i < hairetu . length ; i ++ ) { console . log ( hairetu [ i ] . bangou ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( t ) { let characters = t . split ( " " ) ; for ( let i = 0 ; characters [ i ] ; i ++ ) if ( characters [ i ] == " ? " ) characters [ i ] = " D " ; let joined = characters . join ( " " ) ; console . log ( joined ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) if ( args [ 0 ] === 1 ) args [ 0 ] += 13 if ( args [ 1 ] === 1 ) args [ 1 ] += 13 if ( args [ 0 ] > args [ 1 ] ) console . log ( ' Alice ' ) else if ( args [ 1 ] > args [ 0 ] ) console . log ( ' Bob ' ) else console . log ( ' Draw ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " next " : function ( ) { if ( ! this . hasNext ( ) ) { return null ; } var returnObj = this . list [ this . index ] ; this . index ++ ; return returnObj ; } , " hasNext " : function ( ) { return ( this . index < this . max ) ; } } function next ( ) { return obj . next ( ) ; } function hasNext ( ) { return obj . hasNext ( ) ; } function Main ( ) { var k = 1 * input [ 0 ] . split ( " " ) [ 0 ] var s = 1 * input [ 0 ] . split ( " " ) [ 1 ] var c = 0 ; for ( var i = 0 ; i <= k ; ++ i ) { for ( var j = 0 ; j <= ( s - i ) && j <= k ; ++ j ) { if ( ( s - i - j ) >= 0 && ( s - i - j ) <= k ) { ++ c } } } console . log ( c ) } Main ( ) ;
function main ( input ) { const a = input . split ( " " ) ; console . log ( Math . max ( a [ 0 ] * a [ 1 ] , a [ 2 ] * a [ 3 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const A = args [ 0 ] . map ( arg => parseInt ( arg , 10 ) ) . sort ( ( a , b ) => a - b ) let sum = 0 sum += A [ 1 ] - A [ 0 ] sum += A [ 2 ] - A [ 1 ] console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function main ( input ) { const n = input . trim ( ) . split ( / \s / ) . map ( str => ~ ~ str ) const deg = Math . abs ( ( 360 * n [ 2 ] / 12 ) + 30 * n [ 3 ] / 60 - ( 360 * n [ 3 ] / 60 ) ) % 360 console . log ( Math . sqrt ( n [ 0 ] ** 2 + n [ 1 ] ** 2 - 2 * n [ 0 ] * n [ 1 ] * Math . cos ( deg * Math . PI / 180 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { const input_array = input . split ( " \n " ) ; const coins_count = input_array . slice ( 0 , 3 ) ; const desired_sum = parseInt ( input_array . slice ( - 1 ) , 10 ) ; const A = parseInt ( input_array [ 0 ] , 10 ) , B = parseInt ( input_array [ 1 ] , 10 ) , C = parseInt ( input_array [ 2 ] , 10 ) , X = parseInt ( input_array [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = Number ( stdin ) ; console . log ( x * x * x ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var g_input = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { g_input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { main ( g_input . split ( / \r?\n / ) ) ; } ) ; function main ( inputs ) { var N = parseInt ( inputs [ 0 ] ) ; var vs = inputs [ 1 ] . split ( " " ) . map ( function ( a ) { return parseInt ( a ) ; } ) ; var max = 0 ; var min = 100000 ; for ( var i in vs ) { max = Math . max ( max , vs [ i ] ) ; min = Math . min ( min , vs [ i ] ) ; } console . log ( max - min ) ; }
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( a ) { return a ? cin [ cid ++ ] : + cin [ cid ++ ] ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var x = BigInt ( next ( ) ) ; for ( var a = 1n ; a < 1000n ; a ++ ) { var A = a * a * a * a * a ; for ( var b = - a ; b < a ; b ++ ) { var B = b * b * b * b * b ; if ( A - B === x ) return a . toString ( ) + " " + b . toString ( ) ; } } }
function C168 ( _input ) { var lines = _input . split ( " \n " ) ; var [ a , b , H , M ] = lines . shift ( ) . split ( ' ' ) . map ( v => v * 1 ) ; var min = ( H * 60 + M ) ; const radA = ( min * 0.5 ) * ( Math . PI / 180 ) ; const radB = ( M * 6 ) * ( Math . PI / 180 ) ; var posA = { x : Math . cos ( radA ) * a , y : Math . sin ( radA ) * a } ; var posB = { x : Math . cos ( radB ) * b , y : Math . sin ( radB ) * b } ; const x = ( posB . x - posA . x ) * ( posB . x - posA . x ) ; const y = ( posB . y - posA . y ) * ( posB . y - posA . y ) ; console . log ( Math . sqrt ( x + y ) ) ; } C168 ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { const A = parseInt ( input [ 0 ] ) ; const E = parseInt ( input [ 4 ] ) ; const K = parseInt ( input [ 5 ] ) ; console . log ( ( E - A > K ) ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
" use strict " ; function main ( input ) { const args = input . split ( " " ) ; const A = parseInt ( args [ 0 ] ) ; const B = parseInt ( args [ 1 ] ) ; let ans = ' ' ; if ( A < 6 ) { ans = 0 ; } else if ( A <= 12 ) { ans = B / 2 ; } else { ans = B ; } console . log ( ans ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; console . log ( ' %d ' , a * a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ; function main ( input ) { const radius = parseInt ( input . split ( " \n " ) . shift ( ) ) ; console . log ( radius * radius ) ; }
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var X = Number ( inputs ) ; console . log ( Math . pow ( X , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
( stdin => { const identity = v => v const always = v => _ => v const join = sep => array => array . join ( sep ) const split = sep => str => str . split ( sep ) const print = fun => ( f , v ) => fun ( f ( v ) ) const power = m => n => Math . pow ( n , m ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const n = parseInt ( inputs [ 0 ] , 10 ) const result = power ( 3 ) ( n ) const display = print ( console . log ) display ( identity , result ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function sum_arr ( arr ) { return arr . reduce ( function ( prev , current , i , arr ) { return prev + current ; } ) ; } ; function main ( arg ) { arg = arg . split ( " \n " ) var N = arg [ 0 ] . split ( " " ) [ 0 ] var A = arg [ 1 ] . split ( " " ) . map ( e => Number ( e ) ) var B = arg [ 2 ] . split ( " " ) . map ( e => Number ( e ) ) var diffs = [ ] var diff_m = 0 var counter = 0 for ( var i = 0 ; i < A . length ; i ++ ) { var tmp = A [ i ] - B [ i ] if ( tmp < 0 ) { diff_m += tmp counter ++ } else { diffs . push ( tmp ) } } if ( diff_m >= 0 ) { console . log ( 0 ) return } diffs . sort ( ( a , b ) => b - a ) for ( var i = 0 ; i < diffs . length ; i ++ ) { diff_m += diffs [ i ] counter ++ if ( diff_m > 0 ) { break } } if ( diff_m <= 0 ) { console . log ( - 1 ) return ; } console . log ( counter ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const Main = input => { input = input [ 0 ] . split ( ' ' ) var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function main ( a ) { a = a . split ( " " ) ; a = stn ( a ) ; function Actor ( name , card ) { this . name = name ; this . card = card ; } var Alice = new Actor ( " Alice " , a [ 0 ] ) ; var Bob = new Actor ( " Bob " , a [ 1 ] ) ; console . log ( poker ( Alice , Bob ) ) ; } function poker ( Alice , Bob ) { if ( Alice . card == Bob . card ) return " Draw " ; if ( Alice . card == 1 ) return Alice . name ; if ( Bob . card == 1 ) return Bob . name ; if ( Alice . card > Bob . card ) { return Alice . name ; } else { return Bob . name ; } } function stn ( a ) { return a . map ( function ( x ) { return parseInt ( x , 10 ) ; } ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const N = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) if ( N [ 0 ] <= 5 ) { console . log ( 0 ) } else if ( N [ 0 ] <= 12 ) { console . log ( N [ 1 ] / 2 ) } else { console . log ( N [ 1 ] ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var t = nextstr ( ) ; t = t . replace ( / \? / g , " D " ) ; return t ; }
function Main ( input ) { var data = input . split ( " \n " ) console . log ( parseInt ( data [ 0 ] ) * parseInt ( data [ 0 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; ( inp => { inp = inp . split ( " " ) ; console . log ( Math . ceil ( ( + inp [ 0 ] + + inp [ 1 ] ) / 2 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const lines = input . split ( ' \n ' ) const [ N , M ] = lines [ 0 ] . split ( ' ' ) . map ( Number ) const C = [ ] for ( let i = 0 ; i < M ; i ++ ) { C [ i ] = [ ... lines [ i + 1 ] . split ( ' ' ) . map ( Number ) , i ] } C . sort ( ( a , b ) => { if ( a [ 0 ] === b [ 0 ] ) { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } else { return a [ 0 ] > b [ 0 ] ? 1 : - 1 } } ) let ans = [ ] let p = 0 let x = 0 for ( let i = 0 ; i < M ; i ++ ) { if ( p === C [ i ] [ 0 ] ) { x ++ } else { p = C [ i ] [ 0 ] x = 1 } ans . push ( [ ( ' 000000 ' + C [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + x ) . slice ( - 6 ) , C [ i ] [ 2 ] ] ) } ans . sort ( ( a , b ) => { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } ) for ( let i = 0 ; i < M ; i ++ ) { ans [ i ] = ans [ i ] [ 0 ] } console . log ( ans . join ( ' \n ' ) ) } ) ( input )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk . trim ( ) , 3 ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; nums = input [ 0 ] . split ( " / " ) ; if ( input [ 0 ] <= ' 2019/04/30 ' ) console . log ( ' Heisei ' ) ; else console . log ( ' TBD ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; c = a + b ; if ( c % 2 == 1 ) { console . log ( Math . floor ( ( a + b ) / 2 ) + 1 ) } else { console . log ( c / 2 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const n = parseInt ( input . trim ( ) , 10 ) let maxNum = 0 let maxCnt = - 1 for ( let i = 1 ; i <= n ; i ++ ) { let tmpNum = i let tmpCnt = 0 while ( true ) { if ( tmpNum % 2 === 1 ) break tmpNum /= 2 tmpCnt ++ } if ( tmpCnt > maxCnt ) { maxNum = i maxCnt = tmpCnt } } console . log ( maxNum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( / \s+ / ) . map ( s => parseInt ( s ) ) const A = inputs [ 0 ] const B = inputs [ 1 ] const H = inputs [ 2 ] const M = inputs [ 3 ] const ratioH = ( H * 60 + M ) / ( 12 * 60 ) const ratioM = M / 60 const theta = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) const C = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta ) ) console . log ( C . toFixed ( 10 ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) ; const r = n . split ( " \n " ) . filter ( x => x != 0 ) ; r . forEach ( x => sp ( x ) ) ; } ) ; function sp ( rep ) { const x = rep . split ( " " ) . map ( x => Number ( x ) ) ; var acc = 0 ; if ( x . length === 1 ) { return console . log ( x [ 0 ] ) ; } for ( var i = 0 ; i < x . length ; i ++ ) { acc += x [ i ] ; } console . log ( acc ) ; }
function Main ( input ) { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; var result = xs . reduce ( function ( previous , current , index , array ) { return previous + current ; } ) ; console . log ( Math . ceil ( result / xs . length ) ) ; } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( " readline " ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var date = lines [ 0 ] . split ( " / " ) ; var year = Number ( date [ 0 ] ) ; var month = Number ( date [ 1 ] ) ; var day = Number ( date [ 2 ] ) ; if ( year <= 2019 && month <= 4 ) { console . log ( " Heisei " ) ; } else if ( year < 2019 ) { console . log ( " Heisei " ) ; } else { console . log ( " TBD " ) ; } } ) ;
function main ( arg ) { const lines = arg . trim ( ) . split ( ' \n ' ) ; const INF = Math . pow ( 10 , 100 ) ; const times = lines . map ( Number ) ; const ceilTimes = times . map ( ( v ) => parseInt ( Math . ceil ( v / 10 ) * 10 ) ) ; const sum = ( acc , v ) => acc + v ; let ans = INF ; for ( let i = 0 ; i < 5 ; i ++ ) { let sumTimes = 0 ; sumTimes += ceilTimes . reduce ( sum ) - ceilTimes [ i ] ; sumTimes += times [ i ] ; ans = Math . min ( ans , sumTimes ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; console . log ( function ( args ) { const tmp = args . trim ( ) . split ( ' \n ' ) ; const N = tmp [ 0 ] | 0 ; const x = [ ] , y = [ ] ; for ( let i = 0 ; i < N ; i ++ ) { const cood = tmp [ i + 1 ] . split ( ' ' ) . map ( v => v | 0 ) ; x [ i ] = cood [ 0 ] , y [ i ] = cood [ 1 ] ; } let sumL = 0 , nL = 0.0 ; function travel ( trail , length , current ) { for ( let next = 0 ; next < N ; next ++ ) { if ( trail & 1 << next ) continue ; const l = Math . sqrt ( Math . pow ( x [ current ] - x [ next ] , 2.0 ) + Math . pow ( y [ current ] - y [ next ] , 2.0 ) ) ; if ( ( trail | 1 << next ) === ( 1 << N ) - 1 ) { sumL += length + l ; nL = nL + 1.0 ; return ; } travel ( trail | 1 << next , length + l , next ) ; } } for ( let i = 0 ; i < N ; i ++ ) { travel ( 1 << i , 0.0 , i ) ; } return ( sumL / nL ) . toString ( ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; const X = Number ( input . trim ( ) ) ; const memo = { } ; const pow5 = ( n ) => { if ( ! memo [ n ] ) { memo [ n ] = Math . pow ( n , 5 ) ; } return memo [ n ] ; } ; const MAX = 120 ; const resultList = [ ] ; for ( let a = - MAX ; a <= MAX ; a ++ ) { for ( let b = - MAX ; b < MAX ; b ++ ) { if ( pow5 ( a ) - pow5 ( b ) === X ) { resultList . push ( a , b ) ; break ; } } if ( resultList . length ) { break ; } } console . log ( resultList . join ( " " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; Arr . forEach ( function ( v ) { var a = ( v . split ( " " ) ) [ 0 ] - 0 ; var b = ( v . split ( " " ) ) [ 1 ] - 0 ; console . log ( a + b ) ; } ) ;
" use strict " ; const main = arg => { let K = arg . split ( " " ) [ 0 ] ; let S = arg . split ( " " ) [ 1 ] ; let cnt = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { let z = S - ( x + y ) ; if ( ( z <= K ) && ( z >= 0 ) ) { cnt ++ ; } } } console . log ( cnt ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const tasks = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) . sort ( ( a , b ) => a - b ) console . log ( Math . abs ( tasks [ 0 ] - tasks [ 1 ] ) + Math . abs ( tasks [ 1 ] - tasks [ 2 ] ) ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) const [ A , B , H , M ] = input [ 0 ] . split ( ' ' ) . map ( Number ) const degA = ( H * 30 ) + ( M / 60 * 30 ) const degB = M * 6 const deg = Math . abs ( degA - degB ) const rad = deg * ( Math . PI / 180 ) const height = A * Math . sin ( rad ) const width = A * Math . cos ( rad ) - B const ans = Math . sqrt ( Math . pow ( height , 2 ) + Math . pow ( width , 2 ) ) console . log ( ans )
function main ( input ) { var lines = input . split ( " " ) . map ( n => parseInt ( n , 10 ) ) ; var result = ( lines [ 0 ] + lines [ 1 ] + lines . length - 1 ) / lines . length ; console . log ( parseInt ( result , 10 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var V = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; var B = Number ( lines [ 1 ] . split ( " " ) [ 0 ] ) ; var W = Number ( lines [ 1 ] . split ( " " ) [ 1 ] ) ; var T = Number ( lines [ 2 ] . split ( " " ) [ 0 ] ) ; var D = Math . abs ( A - B ) ; var S = V - W ; if ( D <= S * T ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } ) ;
" use strict " ; const main = arg => { const N = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; console . log ( ( 800 * N ) - ( Math . floor ( N / 15 ) * 200 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
function main ( s ) { var a = s . split ( " " ) ; for ( var i = 0 ; i < a . length ; i ++ ) a [ i ] = parseInt ( a [ i ] ) ; if ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ) console . log ( " Yes \n " ) ; else console . log ( " No \n " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] ; var A = a . split ( " " ) ; var min = A [ 0 ] ; var max = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { min = Math . min ( min , A [ i ] ) ; } for ( i = 0 ; i < N ; i ++ ) { max = Math . max ( max , A [ i ] ) ; } var ans = max - min ; console . log ( ans ) ; } ) ;
function Main ( input ) { const abcde = input . split ( " \n " ) . map ( n => parseInt ( n ) ) ; const len = abcde . length ; var total_time = 0 ; var last_cal_num = 10 ; var last_cal_num_index = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { var j = abcde [ i ] % 10 if ( 0 < j && j < last_cal_num ) { last_cal_num = j ; last_cal_num_index = i ; } } for ( var i = 0 ; i < 5 ; i ++ ) { if ( i !== last_cal_num_index ) { var j = abcde [ i ] ; var k = j % 10 ; j = k ? j + ( 10 - k ) : j ; total_time += j ; } } total_time += abcde [ last_cal_num_index ] ; console . log ( String ( total_time ) . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
" use strict " const main = ( input ) => { const Array = input . split ( " \n " ) . map ( ( n ) => parseInt ( n , 10 ) ) const a = Array [ 0 ] const b = Array [ 1 ] const c = Array [ 2 ] const x = Array [ 3 ] let result = 0 ; for ( let i = 0 ; i <= a ; i ++ ) for ( let j = 0 ; j <= b ; j ++ ) for ( let k = 0 ; k <= c ; k ++ ) { if ( 500 * i + 100 * j + 50 * k == x ) result ++ ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) ; const n = Number ( s [ 0 ] ) ; const circle = n * n ; console . log ( circle ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var arr = [ a , b , c ] arr . sort ( ) if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( r ) { console . log ( r * r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var [ h1 , m1 , h2 , m2 , k ] = nexts ( 5 ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; return m2 - m1 - k ; }
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let a = + cin . shift ( ) ; let b = + cin . shift ( ) ; let h = + cin . shift ( ) ; let m = + cin . shift ( ) ; let theta = Math . PI * ( ( h / 6 + m / 360 ) - m / 30 ) ; let xx = a * a + b * b - 2 * a * b * Math . cos ( theta ) ; let x = Math . sqrt ( xx ) ; console . log ( x ) ; } main ( ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , data => { console . log ( data * data * data ) ; } ) ;
function main ( input ) { var N = parseInt ( input [ 0 ] ) ; console . log ( 800 * N - 200 * Math . floor ( N / 15 ) ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; var I = 0 ; while ( true ) { var nS = Arr [ I ] . split ( " " ) . map ( Number ) ; I ++ ; var n = nS [ 0 ] ; var S = nS [ 1 ] ; if ( n == 0 && S == 0 ) break ; var arr = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { var r = Arr [ I ] - 0 ; I ++ ; arr . push ( r ) ; } arr . sort ( function ( a , b ) { return a - b ; } ) ; var cnt = 0 ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] + arr [ j ] > S ) { cnt += n - j ; break ; } } } console . log ( cnt ) ; }
' use strict ' function main ( o ) { o = o . split ( ' \n ' ) . map ( v => ~ ~ v ) const k = o [ 5 ] const a = o . slice ( 0 , 5 ) let i2 = 0 for ( let i = 0 ; i < a . length ; i ++ ) { for ( let j = i + 1 ; j < a . length ; j ++ ) { if ( a [ j ] - a [ i ] > k ) { console . log ( ' :( ' ) return } } } console . log ( ' Yay! ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( inputData ) { init ( inputData ) ; var a = inI ( ) ; var b = inI ( ) ; var c = inI ( ) ; var d = inI ( ) ; out ( Math . max ( a * b , c * d ) ) ; } var input , inputCnt ; function debug ( ) { Main ( document . getElementById ( " input " ) . value ) ; } function init ( inputData ) { input = inputData . replace ( / \n / g , " " ) ; input = input . split ( " " ) ; inputCnt = 0 ; } const out = ( output ) => { console . log ( output ) } const outln = ( output ) => { console . log ( output + " \n " ) } const inS = ( ) => { return input [ inputCnt ++ ] } ; const inI = ( ) => { return parseInt ( inS ( ) , 10 ) } ; const inF = ( ) => { return parseFloat ( inS ( ) ) } ; Array . prototype . rsort = function ( ) { return this . sort ( function ( a , b ) { return ( a < b ? 1 : - 1 ) ; } ) ; } Array . prototype . max = function ( ) { return Math . max . apply ( null , this ) ; } Array . prototype . min = function ( ) { return Math . min . apply ( null , this ) ; } function values ( array ) { var values = [ ] ; if ( array ) for ( var key in array ) values . push ( array [ key ] ) ; return values ; } ; function keys ( array ) { var keys = [ ] ; if ( array ) for ( var key in array ) keys . push ( key ) ; return keys ; } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) . map ( e => Number ( e ) ) . sort ( ) ; console . log ( input [ 0 ] === 1 && input [ 1 ] === 4 && input [ 2 ] === 7 && input [ 3 ] === 9 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const [ A , B ] = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) if ( A <= 5 ) { console . log ( 0 ) } else if ( A <= 12 ) { console . log ( B / 2 ) } else { console . log ( B ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { const input_array = input . split ( " \n " ) ; const coins_count = input_array . slice ( 0 , 3 ) ; const desired_sum = parseInt ( input_array . slice ( - 1 ) , 10 ) ; const A = parseInt ( coins_count [ 0 ] , 10 ) , B = parseInt ( coins_count [ 1 ] , 10 ) , C = parseInt ( coins_count [ 2 ] , 10 ) , X = parseInt ( input_array [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var max = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; var success = true ; for ( var i = 0 ; i < array . length ; i ++ ) { for ( var j = 0 ; j < array . length ; j ++ ) { if ( i >= j ) continue ; var dist = array [ j ] - array [ i ] ; if ( max < dist ) { success = false ; break ; } } } console . log ( success ? " Yay! " : " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 ; let count7 = 0 ; arr . forEach ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; if ( count5 == 2 && count7 == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function combination ( input ) { var max = parseInt ( input . split ( " " ) [ 0 ] ) ; var sum = parseInt ( input . split ( " " ) [ 1 ] ) ; var count = 0 ; if ( sum <= max ) { for ( var x = 0 ; x < sum + 1 ; x ++ ) { for ( var y = 0 ; y < sum + 1 - x ; y ++ ) { count ++ ; } } } else if ( sum > max ) { for ( var x = 0 ; x < max + 1 ; x ++ ) { if ( sum - x <= max ) { for ( var y = 0 ; y < sum + 1 - x ; y ++ ) { count ++ ; } } else if ( sum - x > max ) { for ( var y = 0 ; y < max + 1 ; y ++ ) { if ( sum - x - y <= max ) { count ++ ; } else if ( sum - x - y > max ) { } } } } } console . log ( count ) ; } combination ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const Main = ( input ) => { let xs = Number ( input ) ; let pay = xs * 800 ; let back = Math . floor ( xs / 15 ) ; let ans = pay - ( back * 200 ) ; console . log ( ans ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; if ( input [ 0 ] + input [ 1 ] >= input [ 2 ] ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; if ( input [ 0 ] <= 8 && input [ 1 ] <= 8 ) console . log ( " Yay! " ) else console . log ( " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( s ) { const houses = s . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const min = Math . min ( ... houses ) ; const max = Math . max ( ... houses ) ; const answer = max - min ; console . log ( answer ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { const heisei = input . split ( " / " ) ; for ( i = 0 ; i <= 2 ; i ++ ) { heisei [ i ] = parseInt ( heisei [ i ] , 10 ) ; } if ( heisei [ 0 ] <= 2019 && heisei [ 1 ] <= 4 && heisei [ 2 ] <= 30 ) { console . log ( " Heisei " ) ; } else { console . log ( " TBD " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var num = parseInt ( chunk ) ; console . log ( num * num * num ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , arg . length ) ) ; const antennas = arg . slice ( 0 , arg . length - 1 ) . map ( n => parseInt ( n ) ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = new Date ( input ) ; if ( input . getFullYear ( ) <= 2019 && input . getMonth ( ) <= 3 && input . getDate ( ) <= 30 ) console . log ( " Heisei " ) ; else console . log ( " TBD " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const five_hundreds = parseInt ( input [ 0 ] , 10 ) ; const hundreds = parseInt ( input [ 1 ] , 10 ) ; const fifty = parseInt ( input [ 2 ] , 10 ) ; const total = parseInt ( input [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= five_hundreds ; a ++ ) { for ( var b = 0 ; b <= hundreds ; b ++ ) { for ( var c = 0 ; c <= fifty ; c ++ ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( total == sum ) count ++ ; } } } console . log ( count ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const nums = input . split ( " " ) const age = parseInt ( nums [ 0 ] , 10 ) const B = parseInt ( nums [ 1 ] , 10 ) if ( age >= 13 ) { console . log ( B ) } else if ( age >= 6 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { const ALL = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) ; var count = 0 ; for ( a = 0 ; a <= ALL [ 0 ] ; a ++ ) { for ( var b = 0 ; b <= ALL [ 1 ] ; b ++ ) { for ( var c = 0 ; c <= ALL [ 2 ] ; c ++ ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === ALL [ 3 ] ) count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; var main = function main ( input ) { var A = parseInt ( input . split ( " \n " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " \n " ) [ 1 ] , 10 ) ; var C = parseInt ( input . split ( " \n " ) [ 2 ] , 10 ) ; var X = parseInt ( input . split ( " \n " ) [ 3 ] , 10 ) ; var startNum50 = X / 50 > C ? C : X / 50 ; var count = 0 ; for ( var i = startNum50 ; i >= 0 ; i -- ) { var Xminus50 = X - 50 * i ; if ( Xminus50 == 0 ) { count ++ ; continue ; } if ( Xminus50 % 100 == 0 ) { var startNum100 = Xminus50 / 100 > B ? B : Xminus50 / 100 ; for ( var j = startNum100 ; j >= 0 ; j -- ) { var Xminus50minus100 = Xminus50 - 100 * j ; if ( Xminus50minus100 == 0 ) { count ++ ; continue ; } if ( Xminus50minus100 % 500 == 0 && Xminus50minus100 / 500 <= A ) { count ++ ; } } } } console . log ( count ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const result = input . split ( / \s / ) ; if ( result [ 0 ] <= 8 && result [ 1 ] <= 8 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; const reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout , } ) ; let lines = [ ] ; reader . on ( " line " , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( " close " , ( ) => { const x = Number ( lines [ 0 ] ) ; console . log ( Math . pow ( x , 3 ) ) } ) ;
function main ( input ) { var a = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var b = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function Main ( input ) { input = input . split ( " \n " ) ; var gohyaku = Number ( input [ 0 ] ) ; var hyaku = Number ( input [ 1 ] ) ; var goju = Number ( input [ 2 ] ) ; var sum = Number ( input [ 3 ] ) ; var count = 0 ; for ( i = 0 ; i <= gohyaku ; i ++ ) { for ( j = 0 ; j <= hyaku ; j ++ ) { for ( k = 0 ; k <= goju ; k ++ ) { if ( 500 * i + 100 * j + 50 * k == sum ) { count ++ ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const a = s [ 0 ] ; const b = s [ 1 ] ; const strength = [ 0 , 13 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ; let ans = ' ' ; if ( strength [ a ] > strength [ b ] ) ans = ' Alice ' ; if ( strength [ a ] < strength [ b ] ) ans = ' Bob ' ; if ( strength [ a ] === strength [ b ] ) ans = ' Draw ' ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( s ) { s = s . split ( " " ) ; var a , b ; a = parseInt ( s [ 0 ] ) ; b = parseInt ( s [ 1 ] ) ; console . log ( Math . round ( ( a + b ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( arg ) { var n = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] - 0 ; var m = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] - 0 ; var A = new Array ( n ) ; var B = new Array ( m ) ; for ( var i = 0 ; i < n ; i ++ ) { A [ i ] = arg . split ( " \n " ) [ i + 1 ] . split ( " " ) ; } for ( var i = 0 ; i < m ; i ++ ) { B [ i ] = arg . split ( " \n " ) [ n + 1 + i ] . split ( " " ) ; } for ( var i = 0 ; i <= n - m ; i ++ ) { for ( var j = 0 ; j <= n - m ; j ++ ) { var cnt = 0 ; for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( A [ i + k ] [ j + l ] == B [ k ] [ l ] ) cnt ++ ; } } if ( cnt == m * m ) { console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const NK = input . split ( ' ' ) . map ( x => parseInt ( x ) ) if ( NK [ 1 ] == 1 ) { console . log ( 0 ) ; } else { console . log ( NK [ 0 ] - NK [ 1 ] ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; let ans0 = xs [ 0 ] ; let ans1 = xs [ 1 ] ; if ( xs [ 0 ] == 1 ) { ans0 = xs [ 0 ] + 13 ; } if ( xs [ 1 ] == 1 ) { ans1 = xs [ 1 ] + 13 ; } if ( ans0 == ans1 ) { console . log ( ' Draw ' ) ; } else if ( ans0 > ans1 ) { console . log ( ' Alice ' ) ; } else { console . log ( ' Bob ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { arg = arg . split ( " \n " ) [ 0 ] arg = Number ( arg . split ( " / " ) . join ( " " ) ) if ( arg <= 20190430 ) { console . log ( " Heisei " ) } else { console . log ( " TBD " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var C = parseInt ( input [ 2 ] , 10 ) ; var five = 2 ; if ( A + B + C != 17 ) { console . log ( " NO " ) ; } else { if ( A == 5 ) { five -- ; } if ( B == 5 ) { five -- ; } if ( C == 5 ) { five -- ; } if ( five == 0 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let at = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let k = at [ 5 ] ; for ( let n = 0 ; n < 4 ; n ++ ) { for ( let m = n + 1 ; m < 5 ; m ++ ) { let d = at [ m ] - at [ n ] ; if ( d > k ) { console . log ( ' :( ' ) ; return ; } } } console . log ( ' Yay! ' ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const maxTime = ( x ) => Math . ceil ( x / 10 ) * 10 const remainTime = ( x ) => maxTime ( x ) - x const Main = ( ) => { let total = 0 let a = nextInt ( ) let b = nextInt ( ) let c = nextInt ( ) let d = nextInt ( ) let e = nextInt ( ) total = maxTime ( a ) + maxTime ( b ) + maxTime ( c ) + maxTime ( d ) + maxTime ( e ) total -= Math . max ( remainTime ( a ) , remainTime ( b ) , remainTime ( c ) , remainTime ( d ) , remainTime ( e ) ) console . log ( total ) } Main ( )
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const n = Number ( input ) ; console . log ( ` ${ ( n * 800 ) - ( 200 * Math . floor ( n / 15 ) ) } ` ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; x = parseInt ( x , 10 ) ; console . log ( x * x * x ) ;
" use strict " function main ( arg ) { let [ H1 , M1 , H2 , M2 , K ] = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) let H1x = H1 * 60 + M1 let H2x = H2 * 60 + M2 console . log ( H2x - H1x - K ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; var print = function print ( x ) { return console . log ( x ) ; } ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , terminal : false } ) ; var A , B , C ; function solve ( A , B , C ) { if ( A + B >= C ) return true ; return false ; } rl . on ( ' line ' , function ( line ) { var ret = line . split ( ' ' ) ; A = parseInt ( ret [ 0 ] ) ; B = parseInt ( ret [ 1 ] ) ; C = parseInt ( ret [ 2 ] ) ; if ( solve ( A , B , C ) ) { print ( ' Yes ' ) ; } else { print ( ' No ' ) ; } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp0 = input [ 0 ] . split ( " " ) ; N = Number ( tmp0 [ 0 ] ) D = Number ( tmp0 [ 1 ] ) num = [ ] for ( var i = 1 ; i <= N ; i ++ ) { tmp = input [ i ] . split ( " " ) x = [ ] for ( var j = 1 ; j <= D ; j ++ ) { x . push ( Number ( tmp [ j - 1 ] ) ) } num . push ( x ) } ans = 0 for ( var i = 1 ; i < N ; i ++ ) { for ( var j = i + 1 ; j <= N ; j ++ ) { var tmp = 0 for ( var k = 0 ; k < D ; k ++ ) { tmp += Math . pow ( Math . abs ( num [ i - 1 ] [ k ] - num [ j - 1 ] [ k ] ) , 2 ) } if ( Math . round ( Math . sqrt ( tmp ) ) === Math . sqrt ( tmp ) ) { ans ++ } } } console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( x => parseFloat ( x ) ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var h = input [ 2 ] ; var m = input [ 3 ] ; var angle = ( ( h + m / 60.0 ) / 12.0 - m / 60.0 ) * 2.0 * Math . PI ; var cos = Math . cos ( angle ) ; var ans = Math . sqrt ( a ** 2.0 + b ** 2.0 - 2.0 * a * b * cos ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { for ( var i = 0 ; i < lines . length ; i ++ ) { console . log ( lines [ i ] * lines [ i ] * lines [ i ] ) ; } } ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
function main ( input ) { input = input . split ( " \n " ) . map ( Number ) ; var count = 0 for ( i = 0 ; i < input [ 0 ] + 1 ; i ++ ) { for ( j = 0 ; j < input [ 1 ] + 1 ; j ++ ) { for ( k = 0 ; k < input [ 2 ] + 1 ; k ++ ) { if ( ( 500 * i + 100 * j + 50 * k ) == input [ 3 ] ) { count ++ ; } else continue ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const input_array = input . split ( ' \n ' ) ; const coins_count = input_array . slice ( 0 , 3 ) ; const desired_sum = parseInt ( input_array . slice ( - 1 ) , 10 ) ; const A = parseInt ( input_array [ 0 ] , 10 ) , B = parseInt ( input_array [ 1 ] , 10 ) , C = parseInt ( input_array [ 2 ] , 10 ) , X = parseInt ( input_array [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] * 800 - ( Math . floor ( a [ 0 ] / 15 ) * 200 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( arg ) { var r = arg . split ( " \n " ) [ 0 ] - 0 ; console . log ( r * r ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var ans = " " ; if ( a === 5 && b === 5 && c === 7 ) { ans = " YES " ; } else if ( a === 5 && b === 7 && c === 5 ) { ans = " YES " ; } else if ( a === 7 && b === 5 && c === 5 ) { ans = " YES " ; } else { ans = " NO " ; } console . log ( ' %s ' , ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { if ( new Date ( ' 2019/04/30 ' ) >= new Date ( input ) ) { console . log ( ' Heisei ' ) ; } else { console . log ( ' TBD ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function main ( input ) { const args = input . split ( ' ' ) ; var arr = [ parseInt ( args [ 0 ] , 10 ) , parseInt ( args [ 1 ] , 10 ) , parseInt ( args [ 2 ] , 10 ) ] ; arr . sort ( ) ; if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { var lines = stdin . trim ( ) . split ( ' \n ' ) ; lines . forEach ( function ( line ) { var numbers = line . trim ( ) . split ( ' ' ) . map ( Number ) ; console . log ( numbers [ 0 ] + numbers [ 1 ] ) ; } ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const date = new Date ( input ) ; if ( date <= new Date ( ' 2019/4/30 ' ) ) { console . log ( ' Heisei ' ) } else { console . log ( ' TBD ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var x = input ; if ( x == 2 ) { x = 2 ; } else if ( x >= 2 && x < 4 ) { x = 2 } else if ( x >= 4 && x < 8 ) { x = 4 } else if ( x >= 8 && x < 16 ) { x = 8 } else if ( x >= 16 && x < 32 ) { x = 16 } else if ( x >= 32 && x < 64 ) { x = 32 } else if ( x >= 64 && x < 128 ) { x = 64 } console . log ( x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ) ? " Yes " : " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var a = parseInt ( input [ 0 ] . trim ( ) , 10 ) ; console . log ( ' %s ' , a * a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) ; var answer ; var nums = input [ 0 ] . split ( ' ' ) ; nums = nums . map ( ( e ) => parseInt ( e ) ) ; answer = nums [ 0 ] + nums [ 1 ] >= nums [ 2 ] ; console . log ( answer ? ' Yes ' : ' No ' ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { console . log ( + input * + input ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = stdin => { const S = stdin . trim ( ) if ( S [ 2 ] === S [ 3 ] && S [ 4 ] === S [ 5 ] ) { console . log ( ' Yes ' ) } else { console . log ( ' No ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function * main ( ) { const N = + ( yield ) ; const A = ( yield ) . split ( " " ) . map ( s => + s ) ; const avg = A . reduce ( ( a , b ) => a + b ) / N ; const P = Math . round ( avg ) ; const sum = A . reduce ( ( t , x ) => t + ( x - P ) ** 2 , 0 ) ; console . log ( sum ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin } ) . on ( " line " , s => iter . next ( s ) ) ;
const BKRT = " \n " ; const SPAC = " " ; const NOSP = " " ; function Main ( input ) { input = [ ] . concat ( ... input . split ( BKRT ) . map ( a => a . split ( SPAC ) ) ) ; const strShift = ( ) => input . shift ( ) ; const intShift = ( ) => ~ ~ input . shift ( ) ; var o = [ intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) ] ; o = o . sort ( ( a , b ) => a - b ) ; return o [ 4 ] - o [ 0 ] <= intShift ( ) ? " Yay! " : " :( " } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; const hour = ( args [ 2 ] - args [ 0 ] ) * 60 ; const minute = args [ 3 ] - args [ 1 ] ; const result = hour + minute - args [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const strList = input . split ( " \n " ) . filter ( v => v != " " ) ; strList . pop ( ) ; const ans = strList . map ( str => { return sumChar ( str ) ; } ) . join ( " \n " ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function sumChar ( str ) { const chars = str . split ( " " ) ; const sum = chars . reduce ( ( memo , value ) => { memo += Number ( value ) ; return memo ; } , 0 ) ; return sum ; }
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var arr = chunk . split ( ' \n ' ) ; var x = parseInt ( arr [ 0 ] ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . map ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } else if ( d - a > k ) { ans = " :( " ; } else if ( c - a > k ) { ans = " :( " ; } else if ( b - a > k ) { ans = " :( " ; } if ( e - b > k ) { ans = " :( " ; } else if ( d - b > k ) { ans = " :( " ; } else if ( c - b > k ) { ans = " :( " ; } if ( e - c > k ) { ans = " :( " ; } else if ( d - c > k ) { ans = " :( " ; } if ( e - d > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { const RANK = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 1 ] ; const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; if ( args [ 0 ] === args [ 1 ] ) console . log ( " Draw " ) ; else console . log ( RANK . indexOf ( args [ 0 ] ) < RANK . indexOf ( args [ 1 ] ) ? " Bob " : " Alice " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var a = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var b = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; var c = input [ 0 ] . split ( " " ) [ 2 ] - 0 ; console . log ( a + b >= c ? " Yes " : " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
" use strict " function Main ( input ) { const params = input . split ( ' \n ' ) . map ( Number ) ; const a = params [ 0 ] ; const b = params [ 1 ] ; const c = params [ 2 ] ; const x = params [ 3 ] ; let count = 0 ; for ( let i = 0 ; i <= a ; i ++ ) { for ( let j = 0 ; j <= b ; j ++ ) { for ( let k = 0 ; k <= c ; k ++ ) { const sum = ( 500 * i ) + ( 100 * j ) + ( 50 * k ) ; const price = x - sum ; if ( price === 0 ) { count ++ ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( args ) { input = args . split ( " \n " ) ; const N = parseInt ( input [ 0 ] ) ; var count = 0 ; var maxCount = 0 ; var result = 1 ; for ( var i = 1 ; i <= N ; i ++ ) { count = 0 ; var j = i ; while ( true ) { if ( j % 2 == 0 ) { count ++ ; j /= 2 ; } else { break ; } if ( maxCount < count ) { maxCount = count ; result = i ; } } } console . log ( result ) ; }
function Main ( input ) { var ans = " Three " ; if ( input . match ( / Y / ) ) ans = " Four " ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var val = input . split ( ' ' ) ; var K = parseInt ( val [ 0 ] ) ; var S = parseInt ( val [ 1 ] ) ; var sum = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var value = S - ( i + j ) ; if ( value >= 0 && value <= K ) { sum ++ ; } } } console . log ( sum ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = ( input ) => { const spi = input . split ( ' \n ' ) ; const [ a , b , h , m ] = spi [ 0 ] . split ( ' ' ) . map ( e => parseInt ( e ) ) ; const sho = h * 30 + m * 0.5 ; const lon = 6 * m ; const kakudo = sho - lon ; const ans = a * a + b * b - 2 * a * b * Math . cos ( Math . PI / 180 * kakudo ) ; console . log ( Math . sqrt ( ans ) ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var line = chunk . toString ( ) . split ( ' ' ) ; var x = Number ( line [ 0 ] ) ; var y = Math . pow ( x , 3 ) ; console . log ( y ) ; } ) ;
' use strict ' function main ( input ) { const sum = input . split ( / \s / ) . map ( v => ~ ~ v ) . reduce ( ( a , b ) => a + b ) const ans = Math . ceil ( sum / 2 ) console . log ( ans ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var a = Number ( lines [ 0 ] . split ( ' ' ) [ 0 ] ) ; var v = Number ( lines [ 0 ] . split ( ' ' ) [ 1 ] ) ; var b = Number ( lines [ 1 ] . split ( ' ' ) [ 0 ] ) ; var w = Number ( lines [ 1 ] . split ( ' ' ) [ 1 ] ) ; var t = Number ( lines [ 2 ] ) ; var ichisa = a - b ; var hayasa = v - w ; var ans = ' ' ; if ( hayasa <= 0 ) { ans = ' NO ' ; } else { if ( Math . abs ( ichisa ) / hayasa <= t ) { ans = " YES " ; } else { ans = " NO " ; } } console . log ( ans ) ; } ) ;
function MainB ( input ) { input = input . split ( " \n " ) ; var mod10 = 10 ; var dish = 0 ; var total = 0 ; for ( var i in input ) { var tmp = input [ i ] % 10 ; if ( tmp != 0 && tmp < mod10 ) { mod10 = tmp ; dish = i ; } total += Math . ceil ( input [ i ] / 10 ) * 10 ; } if ( mod10 != 10 ) total = total - 10 + mod10 ; console . log ( ' %d ' , total ) ; } MainB ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var date = new Date ( input ) ; var base = new Date ( ' 2019/4/30 ' ) ; console . log ( date <= base ? " Heisei " : " TBD " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function spilitInput ( input ) { var splited = [ ] ; var rows = input . split ( ' \n ' ) ; for ( var i = 0 ; i < rows . length ; i += 1 ) { splited . push ( rows [ i ] . split ( ' ' ) ) ; } return splited ; } function Main ( input ) { var splited = spilitInput ( input ) ; var a = 500 ; var b = 100 ; var c = 50 ; var a_max = splited [ 0 ] [ 0 ] ; var b_max = splited [ 1 ] [ 0 ] ; var c_max = splited [ 2 ] [ 0 ] ; var y = splited [ 3 ] [ 0 ] ; var success_counter = 0 ; for ( var ax = 0 ; ax <= a_max ; ax += 1 ) { for ( var bx = 0 ; bx <= b_max ; bx += 1 ) { for ( var cx = 0 ; cx <= c_max ; cx += 1 ) { if ( ( a * ax ) + ( b * bx ) + ( c * cx ) == y ) success_counter += 1 ; } } } console . log ( success_counter ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; if ( a <= 8 && b <= 8 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { var input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var c = parseInt ( tmp [ 2 ] , 10 ) ; if ( a + b >= c ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var data = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) var min_i = 0 var min_v = data [ 0 ] var count = 1 for ( var i = 1 ; i < data . length ; i ++ ) { if ( min_v >= data [ i ] ) { count ++ min_v = data [ i ] } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; var input_string = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { var lines = input_string . split ( ' \n ' ) ; main ( lines . slice ( 0 , lines . length - 1 ) ) ; } ) ; var main = function ( lines ) { lines . forEach ( function ( x ) { console . log ( Math . pow ( parseInt ( x ) , 3 ) ) ; } ) ; } ;
const main = stdin => { const dishes = [ A , B , C , D , E ] = stdin . trim ( ) . split ( ' \n ' ) . map ( ( x ) => parseInt ( x ) ) let time = 999999 for ( let i = 0 ; i < 5 ; i ++ ) { for ( let j = 0 ; j < 5 ; j ++ ) { if ( i === j ) continue for ( let k = 0 ; k < 5 ; k ++ ) { if ( i === k || j === k ) continue for ( let l = 0 ; l < 5 ; l ++ ) { if ( i === l || j === l || k === l ) continue for ( let m = 0 ; m < 5 ; m ++ ) { if ( i === m || j === m || k === m || l === m ) continue let tmpTime = dishes [ i ] ; if ( tmpTime % 10 !== 0 ) { tmpTime += 10 - tmpTime % 10 } tmpTime += dishes [ j ] ; if ( tmpTime % 10 !== 0 ) { tmpTime += 10 - tmpTime % 10 } tmpTime += dishes [ k ] ; if ( tmpTime % 10 !== 0 ) { tmpTime += 10 - tmpTime % 10 } tmpTime += dishes [ l ] ; if ( tmpTime % 10 !== 0 ) { tmpTime += 10 - tmpTime % 10 } tmpTime += dishes [ m ] ; time = Math . min ( time , tmpTime ) } } } } } console . log ( time ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const lines = input . split ( ' \n ' ) const S = lines [ 0 ] if ( S [ 2 ] === S [ 3 ] && S [ 4 ] === S [ 5 ] ) { console . log ( ' Yes ' ) } else { console . log ( ' No ' ) } } ) ( input )
function Main ( r ) { console . log ( r * r ) } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var s = input . trim ( ) ; for ( var i = 0 ; i < s . length - 7 ; i ++ ) { var arr = [ s [ i ] , s [ i + 1 ] , s [ i + 2 ] , s [ i + 3 ] , s [ i + 4 ] , s [ i + 5 ] , s [ i + 6 ] , s [ i + 7 ] ] ; if ( arr . join ( " " ) == " AIZUNYAN " ) { i += 7 ; continue ; } var str = arr . sort ( ) . join ( " " ) ; if ( str == " AADINNUY " ) { s = s . slice ( 0 , i ) + " AIZUNYAN " + s . slice ( i + 8 , s . length ) ; i += 7 ; } } console . log ( s ) ;
function main ( input ) { const formatted_input = input . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; var tmp_minimum = 0 ; var result = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { result += ( formatted_input [ i ] - formatted_input [ i ] % 10 ) if ( formatted_input [ i ] % 10 == 0 ) { } else { if ( tmp_minimum == 0 ) { tmp_minimum = formatted_input [ i ] % 10 } else { result += 10 ; tmp_minimum = Math . min ( tmp_minimum , formatted_input [ i ] % 10 ) } } } result += tmp_minimum ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var array = input . split ( ' \n ' ) ; var limit = array [ 5 ] ; var max = array [ 4 ] ; var min = array [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const x = Number ( input ) for ( let a = - 118 ; a <= 119 ; a ++ ) { for ( let b = - 119 ; b <= 118 ; b ++ ) { if ( a ** 5 - b ** 5 === x ) { console . log ( ` ${ a } ${ b } ` ) return } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { var a = input . trim ( ) . split ( / \s+ / ) . map ( ( e ) => { return Number ( e ) } ) . sort ( ) ; console . log ( a [ 0 ] == 5 && a [ 1 ] == 5 && a [ 2 ] == 7 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nmab = arr [ 0 ] . split ( " " ) . map ( Number ) ; var d = arr [ 1 ] . split ( " " ) . map ( Number ) ; var m = nmab [ 1 ] ; var a = nmab [ 2 ] ; var b = nmab [ 3 ] ; var haiki = [ ] ; for ( var i = 0 ; i < d . length ; i ++ ) { if ( d [ i ] >= a ) haiki . push ( d [ i ] ) ; else break ; } if ( d . length - haiki . length < m ) { haiki . reverse ( ) ; var cnt = 0 ; for ( var i = 0 ; i < haiki . length ; i ++ ) { if ( haiki [ i ] <= b ) cnt ++ ; else break ; } console . log ( haiki . length - cnt ) ; } else { console . log ( haiki . length ) ; }
" use strict " function Main ( input ) { const args = input . trim ( ) . split ( ' \n ' ) ; const n = args [ 0 ] ; const p = args [ 1 ] . split ( ' ' ) . map ( Number ) ; let max = 1e10 ; let cnt = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( p [ i ] < max ) cnt ++ , max = p [ i ] ; } console . log ( cnt ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function listsGetSortCompare ( type , direction ) { var compareFuncs = { " NUMERIC " : function ( a , b ) { return parseFloat ( a ) - parseFloat ( b ) ; } , " TEXT " : function ( a , b ) { return a . toString ( ) > b . toString ( ) ? 1 : - 1 ; } , " IGNORE_CASE " : function ( a , b ) { return a . toString ( ) . toLowerCase ( ) > b . toString ( ) . toLowerCase ( ) ? 1 : - 1 ; } , } ; var compare = compareFuncs [ type ] ; return function ( a , b ) { return compare ( a , b ) * direction ; } } function main ( input ) { var args = input . split ( ' ' ) ; sorted = args . slice ( ) . sort ( listsGetSortCompare ( " NUMERIC " , - 1 ) ) ; result = 0 ; var i_end = sorted . length - 1 ; var i_inc = 1 ; if ( 1 > i_end ) { i_inc = - i_inc ; } for ( i = 1 ; i_inc >= 0 ? i <= i_end : i >= i_end ; i += i_inc ) { cur = sorted [ ( i - 1 ) ] ; next = sorted [ ( ( i + 1 ) - 1 ) ] ; result = result + Math . abs ( cur - next ) ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( lines [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function main ( s ) { s = s . split ( " " ) ; for ( var i = 0 ; i < 4 ; i ++ ) s [ i ] = parseInt ( s [ i ] ) ; console . log ( ( s [ 0 ] * s [ 1 ] > s [ 2 ] * s [ 3 ] ) ? ( s [ 0 ] * s [ 1 ] ) : ( s [ 2 ] * s [ 3 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) var T = input [ 0 ] var pdReg = / [\?|P][\?|D] / g var dReg = / \? / g console . log ( T . replace ( pdReg , ' PD ' ) . replace ( dReg , ' D ' ) )
function main ( input ) { let [ A , B , H , M ] = input . split ( ' ' ) . map ( Number ) ; const minute = H * 60 + M ; const theata = ( 11 * minute ) / 360 * Math . PI const a = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theata ) ) ; console . log ( a ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ) ;
const main = ( r ) => { console . log ( r * r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( s ) { var s = s . split ( " \n " ) ; var s = [ s [ 0 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 1 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 2 ] . split ( " " ) . map ( e => Number ( e ) ) ] ; var t , cnt , a2 , a3 , b1 , b2 , b3 ; for ( var a1 = 0 ; a1 <= s [ 0 ] [ 0 ] ; a1 ++ ) { cnt = 0 ; b1 = s [ 0 ] [ 0 ] - a1 ; b2 = s [ 0 ] [ 1 ] - a1 ; b3 = s [ 0 ] [ 2 ] - a1 ; a2 = s [ 1 ] [ 0 ] - b1 ; a3 = s [ 2 ] [ 0 ] - b1 ; t = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] ; for ( var i = 0 ; i < 3 ; i ++ ) { for ( var j = 0 ; j < 3 ; j ++ ) { if ( s [ i ] [ j ] === t [ i ] [ j ] ) cnt ++ ; } } if ( cnt === 9 ) { console . log ( " Yes " ) ; return ; } } console . log ( " No " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function longAngle ( m ) { return m * 6 } function shortAngle ( h , m ) { return 30 * ( h + m / 60 ) } function cosTheo ( a , b , A ) { return Math . sqrt ( Math . abs ( a * a + b * b - 2 * Math . cos ( A ) * a * b ) ) } function main ( input ) { const inputs = input . split ( ' ' ) const a = Number ( inputs [ 0 ] ) const b = Number ( inputs [ 1 ] ) const h = Number ( inputs [ 2 ] ) const m = Number ( inputs [ 3 ] ) let angle = ( Math . abs ( longAngle ( m ) - shortAngle ( h , m ) ) ) * Math . PI / 180 let rad = Math . PI * 2 * ( h / 12.0 + ( m / 60.0 ) / 12.0 - m / 60.0 ) console . log ( cosTheo ( a , b , angle ) ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var t = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var a = t [ 0 ] var b = t [ 1 ] if ( a <= 5 ) { console . log ( 0 ) } else if ( a < 13 ) { console . log ( b / 2 ) } else { console . log ( b ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( r ) { console . log ( r * r ) } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , ' utf8 ' ) )
function Main ( input ) { var arr = input . split ( " " ) ; var count5 = 0 ; var count7 = 0 ; for ( var a of arr ) { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } if ( count5 == 2 && count7 == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = args => { const [ a , b , c , x ] = args . split ( ' \n ' ) . map ( arg => Number ( arg ) ) ; let ans = 0 ; [ ... Array ( a + 1 ) ] . forEach ( ( _ , i ) => { [ ... Array ( b + 1 ) ] . forEach ( ( _ , j ) => { [ ... Array ( c + 1 ) ] . forEach ( ( _ , k ) => { if ( 500 * i + 100 * j + 50 * k === x ) ++ ans } ) } ) } ) ; console . log ( ans ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const a = + lines [ 0 ] ; const e = + lines [ 4 ] ; const k = + lines [ 5 ] ; console . log ( e - a <= k ? " Yay! " : " :( " ) ; } ) ;
var stdin = require ( ' process ' ) . stdin ; var input = " " ; stdin . on ( ' data ' , function ( x ) { input += x ; } ) ; stdin . on ( ' end ' , function ( ) { var _a = input . split ( ' ' ) . map ( function ( x ) { return x . trim ( ) ; } ) . map ( function ( x ) { return parseInt ( x ) ; } ) , a = _a [ 0 ] , b = _a [ 1 ] ; if ( 8 < a || 8 < b ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } ) ;
" use strict " function main ( arg ) { var arg = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var N = arg [ 0 ] var K = arg [ 1 ] if ( K === 1 ) { console . log ( 0 ) return } console . log ( N - K ) return } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( i => parseInt ( i ) ) const A = input [ 0 ] const B = input [ 1 ] const C = input [ 2 ] if ( A + B >= C ) { console . log ( ' Yes ' ) } else { console . log ( ' No ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const N = parseInt ( input [ 0 ] ) ; const x = N * 800 ; const y = Math . floor ( N / 15 ) * 200 ; console . log ( x - y ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) ; var nidan = input [ 1 ] . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a < b ? - 1 : 1 ) ; console . log ( nidan [ nidan . length - 1 ] - nidan [ 0 ] ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var h1 = parseInt ( inputs [ 0 ] , 10 ) ; var m1 = parseInt ( inputs [ 1 ] , 10 ) ; var h2 = parseInt ( inputs [ 2 ] , 10 ) ; var m2 = parseInt ( inputs [ 3 ] , 10 ) ; var k = parseInt ( inputs [ 4 ] , 10 ) ; var minute1 = h1 * 60 + m1 ; var minute2 = h2 * 60 + m2 ; var difference = minute2 - minute1 ; console . log ( difference - k ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { let v = input . trim ( ) . split ( ' \n ' ) . map ( ( v ) => parseInt ( v ) ) ; let amari = [ ] ; for ( let i = 0 ; i < 5 ; i ++ ) { amari . push ( { v : v [ i ] , a : ( v [ i ] + 9 ) % 10 } ) ; } amari . sort ( ( a , b ) => ( a . a - b . a ) ) ; let sum = 0 ; for ( let i = 1 ; i < 5 ; i ++ ) { if ( amari [ i ] . a % 10 === 9 ) { sum += amari [ i ] . v ; } else { sum += Math . floor ( amari [ i ] . v / 10 ) * 10 + 10 } } sum += amari [ 0 ] . v ; console . log ( sum ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; function Main ( input ) { const arg = input . split ( ' \n ' ) ; const A = parseInt ( arg [ 0 ] ) ; const B = parseInt ( arg [ 1 ] ) ; const C = parseInt ( arg [ 2 ] ) ; const X = parseInt ( arg [ 3 ] ) ; let count = 0 ; for ( let a = 0 ; a <= A ; a ++ ) { for ( let b = 0 ; b <= B ; b ++ ) { for ( let c = 0 ; c <= C ; c ++ ) { let sum = ( 500 * a ) + ( 100 * b ) + ( 50 * c ) ; if ( sum === X ) count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var x = input * 800 ; var y = Math . floor ( input / 15 ) * 200 ; console . log ( x - y ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( ( stdin ) => { let [ a , v , b , w , t ] = stdin . split ( / \s / ) ; [ a , v , b , w , t ] = [ + a , + v , + b , + w , + t ] ; let distance = a - b ; let speed = v - w ; let move = t * speed ; if ( b > a ) { if ( move + distance >= 0 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } else { if ( move - distance >= 0 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ) ;
function Main ( input ) { var min = Number . MAX_VALUE , max = Number . MIN_VALUE ; var arr = input . split ( " " ) . map ( v => parseInt ( v ) ) . forEach ( v => { min = Math . min ( min , v ) ; max = Math . max ( max , v ) ; } ) ; console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const D = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const points = arg . slice ( 1 , N + 1 ) ; let answer = 0 ; for ( let i in points ) { let temp = points [ i ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let nows = [ ] ; for ( let j in temp ) { nows . push ( temp [ j ] ) ; } for ( let j = parseInt ( i ) + 1 ; j < N ; j ++ ) { let temp = points [ j ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let targets = [ ] ; for ( let k in temp ) { targets . push ( temp [ k ] ) ; } let distance = 0 ; for ( let k in targets ) { distance += Math . abs ( Math . pow ( nows [ k ] - targets [ k ] , 2 ) ) ; } distance = Math . sqrt ( distance ) ; if ( distance % 1 === 0 ) { answer ++ } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const lines = input . split ( ' \n ' ) let n = lines [ 0 ] . trim ( ) - 0 let v = lines [ 1 ] . trim ( ) . split ( ' ' ) . map ( Number ) const s = { } const b = { } for ( let i = 0 ; i < n ; i += 2 ) { s [ v [ i ] ] = s [ v [ i ] ] ? s [ v [ i ] ] + 1 : 1 b [ v [ i + 1 ] ] = b [ v [ i + 1 ] ] ? b [ v [ i + 1 ] ] + 1 : 1 } const a1 = [ ] for ( let key in s ) { a1 . push ( [ key , s [ key ] ] ) } const a2 = [ ] for ( let key in b ) { a2 . push ( [ key , b [ key ] ] ) } a1 . sort ( ( a , b ) => b [ 1 ] - a [ 1 ] ) a2 . sort ( ( a , b ) => b [ 1 ] - a [ 1 ] ) let as = 0 if ( a1 [ 0 ] [ 0 ] !== a2 [ 0 ] [ 0 ] ) { as = a1 [ 0 ] [ 1 ] + a2 [ 0 ] [ 1 ] } else { as = Math . max ( a1 [ 0 ] [ 1 ] + ( a2 [ 1 ] ? a2 [ 1 ] [ 1 ] : 0 ) , ( a1 [ 1 ] ? a1 [ 1 ] [ 1 ] : 0 ) + a2 [ 0 ] [ 1 ] ) } console . log ( n - as )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) in put = input . map ( ( val , index ) => { let fp = Number ( val . slice ( - 1 ) ) || 10 return { index : index , val : Number ( val ) , sort : fp , time : 10 - fp + Number ( val ) } } ) . sort ( ( a , b ) => a . sort < b . sort ) . reduce ( ( prev , current , index ) => { let time = index !== input . length - 1 ? current . time : current . val return prev + time } , 0 ) console . log ( input ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; var reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( " line " , line => { let arr = [ 1 , 4 , 7 , 9 ] ; let n = line . split ( / \s / ) . map ( x => parseInt ( x ) ) . sort ( ( a , b ) => a - b ) ; let ans = true ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] != n [ i ] ) { ans = false ; break ; } } if ( ans ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { var num = parseInt ( input ) ; var answer = num * num * num ; console . log ( answer ) ; }
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const H1 = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const M1 = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const H2 = parseInt ( arg [ 0 ] . split ( " " ) [ 2 ] ) ; const M2 = parseInt ( arg [ 0 ] . split ( " " ) [ 3 ] ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 4 ] ) ; const first = 60 - M1 ; const time1 = H2 - ( H1 + 1 ) ; const rest = M2 ; let answer = first + ( 60 * time1 ) + M2 - K ; console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; if ( a < 9 && b < 9 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( ' / ' ) ; var y = parseInt ( inputs [ 0 ] , 10 ) ; var m = parseInt ( inputs [ 1 ] , 10 ) ; var d = parseInt ( inputs [ 2 ] , 10 ) ; if ( y <= 2019 && m <= 04 && d <= 30 ) { console . log ( ' Heisei ' ) ; } else { console . log ( ' TBD ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function main ( inputs ) { let numbers = inputs . split ( ' \n ' ) . map ( num => parseInt ( num , 10 ) ) ; let count = 0 ; for ( let i = 0 ; i <= numbers [ 0 ] ; i ++ ) { for ( let j = 0 ; j <= numbers [ 1 ] ; j ++ ) { for ( let k = 0 ; k <= numbers [ 2 ] ; k ++ ) { if ( i * 500 + j * 100 + k * 50 === numbers [ 3 ] ) { count ++ ; } } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' / ' ) ; var Y = parseInt ( args [ 0 ] , 10 ) ; var M = parseInt ( args [ 1 ] , 10 ) ; var D = parseInt ( args [ 2 ] , 10 ) ; if ( Y < 2019 ) { console . log ( ' Heisei ' ) } else if ( Y === 2019 && M < 4 ) { console . log ( ' Heisei ' ) } else if ( Y === 2019 && M === 4 && D <= 30 ) { console . log ( ' Heisei ' ) } else { console . log ( ' TBD ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var N = input . split ( " \n " ) [ 0 ] ; var a = input . split ( " \n " ) [ 1 ] . split ( " " ) ; var as = a . sort ( ) ; var dev = parseInt ( as [ ( N - 1 ) ] , 10 ) - parseInt ( as [ 0 ] , 10 ) ; console . log ( dev ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var r = parseInt ( input , 10 ) ; console . log ( ' %d ' , r * r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const ans = exec ( lines ) ; console . log ( ans ) ; } ) ; function exec ( lines ) { const x = parseInt ( lines [ 0 ] ) ; return ( x * x * x ) ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) [ 1 ] . split ( / \s / g ) ; var min = Math . min . apply ( null , input ) ; var max = Math . max . apply ( null , input ) ; console . log ( max - min ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
" use strict " ; var __importDefault = ( this && this . __importDefault ) || function ( mod ) { return ( mod && mod . __esModule ) ? mod : { " default " : mod } ; } ; Object . defineProperty ( exports , " __esModule " , { value : true } ) ; var readline_1 = __importDefault ( require ( " readline " ) ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var reader = readline_1 . default . createInterface ( { input : process . stdin , output : process . stdout , } ) ; var lines = [ ] ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { var r = Number ( lines [ 0 ] ) ; console . log ( Math . pow ( r , 2 ) ) ; } ) ;
function Main ( input ) { ans = input . split ( " " ) . map ( a => a <= 8 ) . reduce ( ( p , q ) => p && q ) ; console . log ( ans ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { var num = input ; console . log ( num * num * num ) ; } ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " " ) . map ( ( a ) => Number ( a ) ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var output = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { var Z = S - ( i + j ) ; if ( Z >= 0 && Z <= K ) { output ++ ; } } } myout ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
" use strict " ; const main = arg => { const inputList = arg . trim ( ) . split ( " \n " ) ; const input = inputList [ 0 ] . split ( " " ) const A = parseInt ( input [ 0 ] ) ; const B = parseInt ( input [ 1 ] ) ; const H = parseInt ( input [ 2 ] ) ; const M = parseInt ( input [ 3 ] ) ; const angleA = 0.5 * ( ( H * 60 ) + M ) ; const angleB = 6 * M if ( angleA == angleB ) { console . log ( Math . abs ( A - B ) ) ; } else { const difAngle = Math . abs ( angleA - angleB ) ; const radDifAngle = ( difAngle / 360 ) * 2 * Math . PI ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - ( 2 * A * B * Math . cos ( radDifAngle ) ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( / \s / g ) . map ( function ( num ) { return parseInt ( num ) } ) ; var result = Math . min ( Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) + Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) , Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) + Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) , Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) + Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) ) console . log ( ' %s ' , result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' ascii ' ) ; var input_stdin = " " ; var input_stdin_array = " " ; var input_currentline = 0 ; process . stdin . on ( ' data ' , function ( data ) { input_stdin += data ; } ) ; process . stdin . on ( ' end ' , function ( ) { input_stdin_array = input_stdin . split ( " \n " ) ; main ( ) ; } ) ; function readLine ( ) { return input_stdin_array [ input_currentline ++ ] ; } function main ( ) { var s = readLine ( ) ; s = s . split ( " " ) ; var N = parseInt ( s [ 0 ] ) ; var M = parseInt ( s [ 1 ] ) ; var A = [ ] ; var B = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { s = readLine ( ) . substr ( 0 , N ) ; A . push ( s ) ; } for ( var i = 0 ; i < M ; i ++ ) { s = readLine ( ) . substr ( 0 , M ) ; B . push ( s ) ; } var ans = " No " ; for ( var i = 0 ; i < N - M + 1 ; i ++ ) { for ( var j = 0 ; j < N - M + 1 ; j ++ ) { var iguales = 1 ; for ( var k = 0 ; k < M ; k ++ ) { if ( A [ i + k ] . substr ( j , M ) . localeCompare ( B [ k ] ) != 0 ) { iguales = 0 ; break ; } } if ( iguales == 1 ) { process . stdout . write ( " Yes " ) ; process . exit ( ) ; } } } process . stdout . write ( " No " ) ; process . exit ( ) ; }
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var result = ( function ( data ) { return data . filter ( function ( v ) { return parseInt ( v , 10 ) ; } ) . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) . reduce ( function ( a , b ) { return a + b ; } ) ; } ) . join ( ' \n ' ) ; } ( lines ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { var arr = [ ] ; arr = input . split ( ' ' ) ; if ( parseInt ( arr [ 0 ] ) <= 8 && parseInt ( arr [ 0 ] ) >= 1 && parseInt ( arr [ 1 ] ) <= 8 && parseInt ( arr [ 1 ] ) >= 1 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { param = input . split ( " " ) ; var hour = param [ 2 ] - param [ 0 ] ; var min = param [ 3 ] - param [ 1 ] ; if ( min < 0 ) { hour -= 1 ; min = min * ( - 1 ) ; min = 60 - min ; } const limit = ( hour * 60 ) + min var result = limit - param [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( x * x * x ) ;
function main ( input ) { console . log ( input . split ( ' ? ' ) . join ( " D " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( line ) { var x = parseInt ( line . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( let i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var testValue = i ; while ( testValue >= 2 && testValue % 2 == 0 ) { divideCount += 1 ; testValue /= 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) A = l [ 0 ] B = l [ 1 ] console . log ( A <= 8 && B <= 8 ? ' Yay! ' : ' :( ' )
function main ( input ) { var array = input . split ( ' ' ) ; var sortedArray = array . sort ( compareNumbers ) ; var counter = 0 ; for ( var i = 1 ; i < sortedArray . length ; i ++ ) { counter += sortedArray [ i ] - sortedArray [ i - 1 ] ; } console . log ( counter ) ; } function compareNumbers ( a , b ) { return a - b ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var N = parseInt ( input [ 0 ] , 10 ) ; var K = parseInt ( input [ 1 ] , 10 ) ; if ( K == 1 ) { console . log ( 0 ) ; } else { console . log ( N - K ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; a = ~ ~ input [ 0 ] b = ~ ~ input [ 1 ] console . log ( a < 9 && b < 9 ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) . map ( i => parseInt ( i , 10 ) ) ; var result = ( input [ 4 ] - input [ 0 ] > input [ 5 ] ) ? ' :( ' : ' Yay! ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) let size = input . shift ( ) . split ( ' ' ) . map ( val => Number ( val ) ) let sizeDiff = size [ 0 ] - size [ 1 ] let N = [ ] let M = [ ] let result = 0 for ( let i = 0 ; i < size [ 0 ] ; i ++ ) { N . push ( input . shift ( ) ) } for ( let i = 0 ; i < size [ 1 ] ; i ++ ) { M . push ( input . shift ( ) ) } for ( let i = 0 ; i <= sizeDiff ; i ++ ) { while ( result !== - 1 ) { result = N [ i ] . indexOf ( M [ 0 ] , result ) if ( result !== - 1 ) { let check = true for ( let j = 1 ; j < size [ 1 ] ; j ++ ) { if ( check ) { check = N [ i + j ] . indexOf ( M [ j ] , result ) === result } } if ( check ) { console . log ( ' Yes ' ) return } } if ( result !== - 1 ) result ++ } result = 0 } console . log ( ' No ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const line = input . split ( ' ' ) . map ( v => v - 0 ) const cost = Math . max ( ... line ) - Math . min ( ... line ) console . log ( cost ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; stdin = stdin . trim ( ) . split ( " \n " ) ; var stdout = [ ] ; function print ( x ) { stdout . push ( x ) } ; var menu = stdin . map ( n => parseInt ( n ) ) ; var d = [ ] ; var ans = 0 for ( i = 0 ; i < 5 ; i ++ ) { d . push ( ( menu [ i ] - 1 ) % 10 ) ans += parseInt ( ( menu [ i ] + 9 ) / 10 ) * 10 } d . sort ( ) print ( ans - 10 + d [ 0 ] + 1 ) ; stdout = stdout . join ( " \n " ) ; console . log ( stdout ) ;
( ( input ) => { const data = input . split ( ' \n ' ) ; const line1 = data [ 0 ] . split ( ' ' ) ; const N = + line1 [ 0 ] ; const D = + line1 [ 1 ] ; const coords = data . slice ( 1 , N + 1 ) . map ( ( line ) => line . replace ( / \s\s / g , ' ' ) . split ( ' ' ) . filter ( Boolean ) . map ( Number ) ) ; console . log ( coords . reduce ( ( total , coord1 , i ) => ( total + coords . slice ( i + 1 ) . reduce ( ( count , coord2 ) => ( Number . isInteger ( distance ( coord1 , coord2 , D ) ) ? count + 1 : count ) , 0 ) ) , 0 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function distance ( coords1 , coords2 , D ) { var sum = 0 ; for ( var i = 0 ; i < D ; i += 1 ) { sum += Math . pow ( coords1 [ i ] - coords2 [ i ] , 2 ) ; } return Math . sqrt ( sum ) ; }
const r = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( r * r ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] ) ; var B = parseInt ( input [ 1 ] ) ; if ( A <= 8 && B <= 8 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { const times = arg . trim ( ) . split ( " \n " ) . map ( n => parseInt ( n ) ) ; let min = 10 ; let sum = 0 ; for ( let i = 0 ; i < times . length ; i ++ ) { let digitOne = String ( times [ i ] ) . split ( " " ) ; digitOne = parseInt ( digitOne [ digitOne . length - 1 ] ) ; let digitMinus = 10 - digitOne ; sum += parseInt ( times [ i ] ) ; if ( digitMinus !== 10 ) { sum += digitMinus ; } if ( digitMinus !== 10 && digitOne < min ) { min = digitOne ; } } console . log ( parseInt ( sum - ( 10 - min ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var inputs = input [ 1 ] . split ( " " ) ; function avg ( args ) { var num = 0 ; for ( var n of args ) { num += Number ( n ) ; } return num / args . length ; } var average = Math . round ( avg ( inputs ) ) ; var useStamina = 0 ; for ( var point of inputs ) { useStamina += Math . pow ( average - point , 2 ) ; } console . log ( useStamina ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = ( input ) => { const n = Number ( input ) ; const y = Math . floor ( n / 15 ) * 200 ; const x = 800 * n ; return x - y ; } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var numbers = chunk . toString ( ) . split ( " " ) ; var alice = parseInt ( numbers [ 0 ] ) , bob = parseInt ( numbers [ 1 ] ) ; if ( alice == 1 ) alice += 13 ; if ( bob == 1 ) bob += 13 ; if ( alice > bob ) { process . stdout . write ( " Alice " ) ; } else if ( alice < bob ) { process . stdout . write ( " Bob " ) ; } else { process . stdout . write ( " Draw " ) ; } process . exit ( ) ; } ) ;
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; if ( input [ 0 ] + input [ 1 ] >= input [ 2 ] ) { console . log ( " Yes " ) } else { console . log ( " No " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; one = false ; nana = false ; nine = false ; four = false ; for ( i = 0 ; i < 4 ; i ++ ) { if ( Number ( input [ i ] ) === 1 ) one = true ; if ( parseInt ( input [ i ] ) == 7 ) nana = true ; if ( parseInt ( input [ i ] ) == 4 ) four = true ; if ( Number ( input [ i ] ) == 9 ) nine = true ; } if ( one && nana && nine && four ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' let input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; input = input . split ( ' \n ' ) . map ( x => x * 1 ) ; let oneKetaMin = Math . min ( ... input . map ( x => x % 10 ) . filter ( x => x != 0 ) ) ; let Sum = input . map ( x => Math . ceil ( x / 10 ) * 10 ) . reduce ( ( x , a ) => a += x ) ; if ( isFinite ( oneKetaMin ) ) { Sum = Sum - 10 + oneKetaMin } console . log ( Sum ) ;
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; var kumiawase = [ [ 0 , 1 , 2 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 0 , 1 ] , [ 2 , 1 , 0 ] ] ; var main = function ( ) { var i ; var cost ; var mincost ; var splitlist ; splitlist = lines [ 0 ] . split ( " " ) ; mincost = 200 ; for ( i = 0 ; i < 6 ; i ++ ) { cost = Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 0 ] ] ) ) ; cost += Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 2 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) ) ; if ( mincost > cost ) { mincost = cost ; } } console . log ( mincost ) ; } reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { main ( ) ; } ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var total = a + b + c ; if ( a > 4 && b > 4 && c > 4 && total === 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ; console . log ( Math . pow ( x , 3 ) ) ;
config = { input : ' /dev/stdin ' , newline : ' \n ' } ; n = Number ( require ( ' fs ' ) . readFileSync ( config . input , ' ascii ' ) ) ; console . log ( n * n * n ) ;
function main ( input ) { const points = input . slice ( 1 ) . map ( x => x . split ( ' ' ) . map ( Number ) ) ; var sum = 0 ; for ( var i = 0 ; i < points . length ; i ++ ) { for ( var j = i + 1 ; j < points . length ; j ++ ) { var len = length ( sub ( points [ i ] , points [ j ] ) ) ; if ( isInteger ( len ) ) { sum ++ ; } } } console . log ( sum ) ; } const sub = ( p1 , p2 ) => { return p1 . map ( ( x , i ) => x - p2 [ i ] ) ; } ; const length = ( p ) => { return Math . sqrt ( p . map ( x => x * x ) . reduce ( ( acc , x ) => acc + x , 0 ) ) ; } ; const isInteger = ( n ) => { const i = Math . floor ( n ) ; const eps = 0.0000001 ; return n - i < eps ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ) ;
function main ( input ) { const a = parseInt ( input . split ( " \n " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " \n " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " \n " ) [ 2 ] , 10 ) ; const d = parseInt ( input . split ( " \n " ) [ 3 ] , 10 ) ; const e = parseInt ( input . split ( " \n " ) [ 4 ] , 10 ) ; const k = parseInt ( input . split ( " \n " ) [ 5 ] , 10 ) ; if ( e - a > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . split ( ' \n ' ) ; var line ; while ( line = lines . shift ( ) ) { var nums = line . split ( ' ' ) . map ( function ( n ) { return + n ; } ) ; console . log ( nums [ 0 ] + nums [ 1 ] ) ; }
' use strict ' ; function Main ( input ) { input = input . split ( " \n " ) ; let tmp = input [ 0 ] . split ( " " ) ; for ( let i = 0 ; i < 5 ; i ++ ) { for ( let j = i ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > input [ 5 ] ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function Main ( input ) { let sum = 0 ; input = input . split ( " " ) . map ( e => parseInt ( e ) ) . sort ( ( a , b ) => a < b ? 1 : - 1 ) ; let topvalue = input . shift ( ) ; for ( let val of input ) { sum += topvalue - val ; topvalue = val ; } console . log ( sum ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const inputNumbers = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( / \s / ) . map ( Number ) ; const ret = Math . ceil ( ( inputNumbers [ 0 ] + inputNumbers [ 1 ] ) / 2 ) ; console . log ( ret ) ;
function Main ( input ) { var line = input . trim ( ) . split ( ' ' ) ; var A = Number ( line [ 0 ] ) ; var B = Number ( line [ 1 ] ) ; if ( A <= 8 && B <= 8 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( ( args => { const [ [ K , S ] ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; let count = 0 ; for ( let x = Math . min ( K , S ) ; x >= 0 ; x -- ) { for ( let y = Math . min ( K , S - x ) ; y >= Math . max ( 0 , S - x - K ) ; y -- ) count ++ ; } return count . toString ( ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let ans = cin [ 0 ] . split ( " " ) . map ( x => x == ' ? ' ? ' D ' : x ) ; console . log ( ans . join ( ' ' ) ) ; } main ( ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { console . log ( Math . pow ( input [ 0 ] , 3 ) ) ; }
function Main ( input ) { var a = parseInt ( input ) ; console . log ( a * a * a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; console . log ( " %d " , Math . ceil ( ( a + b ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = parseInt ( input . trim ( ) ) ; var output = 1 ; var maxCount = 0 ; for ( var i = 1 ; i <= input ; i ++ ) { var tmp = i ; var count = 0 ; while ( tmp % 2 != 1 ) { tmp = tmp / 2 ; count ++ ; } if ( maxCount < count ) { output = i ; maxCount = count ; } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const N = parseInt ( input [ 0 ] ) const p = input [ 1 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) let count = 0 let min = Infinity for ( let i = 0 ; i < N ; ++ i ) { if ( p [ i ] < min ) { min = p [ i ] count ++ } } console . log ( count ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var a = input . split ( " \n " ) ; var flag = true ; for ( var i = 0 ; i < 3 ; i ++ ) { a [ i ] = a [ i ] . split ( " " ) . map ( Number ) ; } if ( a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 2 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 2 ] && a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 2 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 2 ] [ 2 ] ) { flag = false ; } console . log ( flag ? " No " : " Yes " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
" use strict " ; function Main ( input ) { console . log ( " %d " , input * input * input ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { let ary = input . split ( " " ) ; ary . sort ( ) ; ( ary [ 0 ] == 5 && ary [ 1 ] == 5 && ary [ 2 ] == 7 ) ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( a ) { console . log ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ) ;
function Main ( input ) { input = input . replace ( / \n / g , ' ' ) ; input = input . split ( " " ) ; var A = input [ 0 ] ; var moji = A . split ( " " ) ; for ( var i = 0 ; i < moji . length ; i ++ ) { var p = moji [ i ] ; if ( p == " ? " ) { if ( i == 0 ) { if ( i + 1 != moji . length ) { if ( moji [ i + 1 ] != " P " ) { moji [ i ] = " P " ; } else { moji [ i ] = " D " ; } } else { moji [ i ] = " D " ; } } else if ( i + 1 == moji . length ) { moji [ i ] = " D " ; } else { if ( moji [ i - 1 ] == " P " ) { moji [ i ] = " D " ; } else { if ( moji [ i + 1 ] != " P " ) { moji [ i ] = " P " ; } else { moji [ i ] = " D " ; } } } } } console . log ( moji . join ( " " ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function main ( input ) { const lines = input . split ( ' \n ' ) ; const a = parseInt ( lines [ 0 ] , 10 ) ; const b = parseInt ( lines [ 1 ] , 10 ) ; const c = parseInt ( lines [ 2 ] , 10 ) ; const sum = parseInt ( lines [ 3 ] , 10 ) ; let count = 0 ; for ( let aCount = 0 ; aCount <= a ; aCount ++ ) { for ( let bCount = 0 ; bCount <= b ; bCount ++ ) { for ( let cCount = 0 ; cCount <= c ; cCount ++ ) { if ( ( 500 * aCount ) + ( 100 * bCount ) + ( 50 * cCount ) === sum ) { count ++ ; } } } } console . log ( count ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var args = input . split ( " \n " ) . filter ( f => ! ! f ) ; var times = args . map ( t => parseInt ( t ) ) ; var timeMods = times . map ( t => ( t - 1 ) % 10 ) ; var timeSep = times . map ( t => Math . ceil ( t / 10 ) * 10 ) ; var min = null ; var minDef ; var sum = 0 ; for ( var i = 0 ; i < timeMods . length ; i ++ ) { if ( min === null || timeMods [ i ] < min ) { min = timeMods [ i ] ; minDef = times [ i ] - timeSep [ i ] ; } sum += timeSep [ i ] ; } console . log ( ( sum + minDef ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var GET = ( function ( ) { function f ( s ) { return new g ( s ) ; } function g ( s ) { this . _s = s . trim ( ) . split ( " \n " ) ; } g . prototype . getValue = function ( n ) { return this . _s [ n ] ; } ; g . prototype . getArray = function ( n ) { return this . stoa ( this . _s [ n ] ) ; } ; g . prototype . slice = function ( s , limit ) { return this . _s . slice ( s , + limit + s || undefined ) . map ( v => this . stox ( v ) ) ; } ; g . prototype . sliceArray = function ( s , limit ) { return this . _s . slice ( s , + limit + s || undefined ) . map ( v => this . stoa ( v ) ) ; } ; g . prototype . stoa = function ( s ) { return s . split ( " " ) . map ( v => this . stox ( v ) ) ; } ; g . prototype . stox = function ( v ) { var i = + v ; return ( i === i ) ? i : v ; } ; return f ; } ) ( ) ; var o = GET ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; console . log ( main ( ) ) ; function main ( ) { var r = o . getValue ( 0 ) ; return r * r ; }
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) console . log ( x * x * x )
let _inputLines ; let _lineNumber = 0 ; let inputReader = _inputReader ( ) ; function _main ( ) { _inputLines = _inputData . trim ( ) . split ( ' \n ' ) . map ( ( string ) => { return string . trim ( ) ; } ) ; ; let [ a , b , c ] = inputReader . readArray ( ) ; a = parseInt ( a ) ; b = parseInt ( b ) ; c = parseInt ( c ) ; let obj = { } ; obj [ a ] = obj [ a ] + 1 || 1 ; obj [ b ] = obj [ b ] + 1 || 1 ; obj [ c ] = obj [ c ] + 1 || 1 ; if ( obj [ 5 ] === 2 && obj [ 7 ] === 1 ) console . log ( ' YES ' ) ; else console . log ( " NO " ) ; } var _inputData = ' ' ; function cacheInput ( data ) { _inputData += data ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , cacheInput ) . on ( ' end ' , _main ) ; function _inputReader ( ) { function readArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) ; } function readLine ( ) { return _inputLines [ _lineNumber ++ ] ; } function readNumberArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) . map ( val => Number ( val ) ) ; } return { readArray , readLine , readNumberArray , } }
function Main ( input ) { var input_arr = input . split ( " \n " ) ; var d = input_arr . map ( x => parseInt ( x ) ) ; var last = 0 ; var min = d [ 0 ] % 10 ; for ( var i = 0 ; i < 5 ; i ++ ) { var tmp = d [ i ] % 10 ; if ( tmp === 0 ) { continue ; } if ( tmp < min ) { min = tmp ; last = i } } var ans = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { if ( i === last ) { ans += d [ i ] ; } else { ans += Math . ceil ( d [ i ] / 10 ) * 10 ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var T = input [ 0 ] . split ( " " ) ; var A = input [ 1 ] . split ( " " ) ; var B = input [ 2 ] . split ( " " ) ; var T0 = T [ 0 ] ; var T1 = T [ 1 ] ; var A0 = A [ 0 ] ; var A1 = A [ 1 ] ; var B0 = B [ 0 ] ; var B1 = B [ 1 ] ; var Ma = T0 * ( A0 - B0 ) ; var Mb = ( T1 * A1 + Ma ) - ( T1 * B1 ) ; if ( Math . sign ( Ma ) == Math . sign ( Mb ) ) { console . log ( 0 ) ; } else if ( Mb == 0 ) { console . log ( " infinity " ) ; } else { Ma = Math . abs ( Ma ) ; Mb = Math . abs ( Mb ) ; if ( Ma % Mb == 0 ) { console . log ( ( Ma / Mb ) * 2 ) ; } else { console . log ( Math . ceil ( Ma / Mb ) * 2 - 1 ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
const a = + ( ' ' + require ( ' fs ' ) . readFileSync ( 0 ) ) console . log ( a * a * a )
( function ( input ) { var toMin = function ( str ) { var x = str . split ( ' : ' ) ; return parseInt ( x [ 0 ] ) * 60 + parseInt ( x [ 1 ] ) ; } ; var lines = input . split ( ' \n ' ) ; var line = lines . shift ( ) . split ( ' ' ) ; var n = line [ 0 ] ; var t = line [ 1 ] ; var last = 86400 ; var output = [ ] ; for ( var i = 0 ; i < n ; ++ i ) { var line = lines [ i ] . split ( ' ' ) ; var diff = toMin ( line [ 0 ] ) - last ; if ( diff >= t ) { output . push ( line [ 1 ] + ' ' + diff ) ; } last = toMin ( line [ 2 ] ) ; } console . log ( output . length ) ; for ( var i = 0 ; i < output . length ; ++ i ) { console . log ( output [ i ] ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ) ;
( function ( a ) { console . log ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? ' YES ' : ' NO ' ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ) ) ;
const readline = require ( " readline " ) ; const rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; totalMins = 0 ; let stratFrom = 0 ; rl . on ( ' line ' , function ( data ) { data = data . split ( ' ' ) ; let from = parseInt ( data [ 0 ] ) * 60 + parseInt ( data [ 1 ] ) ; let to = parseInt ( data [ 2 ] ) * 60 + parseInt ( data [ 3 ] ) ; totalMins = to - from ; stratFrom = totalMins - parseInt ( data [ 4 ] ) ; rl . close ( ) ; } ) ; rl . on ( ' close ' , function ( ) { console . log ( ` ${ stratFrom } ` ) ; } )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var a = Number ( lines [ 0 ] ) ; var b = Number ( lines [ 1 ] ) ; var c = Number ( lines [ 2 ] ) ; var d = Number ( lines [ 3 ] ) ; var e = Number ( lines [ 4 ] ) ; var ans = 0 ; var info = [ ] ; info . push ( a ) ; info . push ( b ) ; info . push ( c ) ; info . push ( d ) ; info . push ( e ) ; var amari = [ ] ; amari . push ( a % 10 ) ; amari . push ( b % 10 ) ; amari . push ( c % 10 ) ; amari . push ( d % 10 ) ; amari . push ( e % 10 ) ; var amari_t = amari . filter ( function ( value ) { return ! ( value == 0 ) ; } ) ; var min = Math . min ( ... amari_t ) ; var index = amari . indexOf ( min ) ; for ( i = 0 ; i < 5 ; i ++ ) { if ( i == index ) { continue ; console . log ( ' A ' ) ; } ans += info [ i ] if ( ans % 10 !== 0 ) { while ( ans % 10 !== 0 ) { ans ++ ; } } } ans += info [ index ] ; if ( Number . isNaN ( ans ) ) { ans = 0 ; ans = a + b + c + d + e ; } console . log ( ans ) ; } ) ;
' use strict ' const main = ( INPUT ) => { const N = Number ( INPUT . split ( ' \n ' ) [ 0 ] ) let ans = N * 800 ans -= Math . floor ( N / 15 ) * 200 console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function main ( arg ) { arg = arg . split ( " \n " ) [ 0 ] . split ( " " ) . map ( n => parseInt ( n ) ) ; console . log ( Math . ceil ( ( arg [ 0 ] + arg [ 1 ] ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const inputs = input . split ( " " ) ; a = parseInt ( inputs [ 0 ] , 10 ) ; b = parseInt ( inputs [ 1 ] , 10 ) ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var S = input . split ( ' \n ' ) console . log ( Math . pow ( S [ 0 ] , 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( is ) { const i = is . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) ; let code , lastLetter ; for ( let i = 0 ; i < s . length ; i ++ ) { code = s [ i ] . charCodeAt ( 0 ) ; if ( s . length - 1 == i ) { code += p % 26 ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } lastLetter = String . fromCharCode ( code ) ; s = s . slice ( 0 , i ) + lastLetter + s . slice ( i + 1 ) ; } else { if ( ( 27 - ( code - 97 + 1 ) ) <= p && ! ( s [ i ] == " a " ) ) { p = p - ( 27 - ( code - 97 + 1 ) ) ; s = s . slice ( 0 , i ) + " a " + s . slice ( i + 1 ) ; } } } console . log ( s ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var a , b , c , d , e , k ; a = Number ( input . split ( ' \n ' ) [ 0 ] ) ; b = Number ( input . split ( ' \n ' ) [ 1 ] ) ; c = Number ( input . split ( ' \n ' ) [ 2 ] ) ; d = Number ( input . split ( ' \n ' ) [ 3 ] ) ; e = Number ( input . split ( ' \n ' ) [ 4 ] ) ; k = Number ( input . split ( ' \n ' ) [ 5 ] ) ; if ( Math . max ( e - a , e - b , d - a , e - c , d - b , c - a , e - d , d - c , c - b , b - a ) > k ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { let five = input . toString ( ) . split ( ' 5 ' ) . length - 1 ; let seven = input . toString ( ) . split ( ' 7 ' ) . length - 1 ; ( five == 2 && seven == 1 ) ? console . log ( ' YES ' ) : console . log ( ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( function ( x ) { return x . split ( " " ) } ) ; var N = parseInt ( input [ 0 ] , 10 ) ; var ary_xy = [ ] ; var sumWay = 0 ; var xDiff , yDiff , ans ; for ( var i = 1 ; i <= N ; i ++ ) { ary_xy . push ( input [ i ] . map ( e => parseInt ( e , 10 ) ) ) ; } for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { xDiff = ary_xy [ j ] [ 0 ] - ary_xy [ i ] [ 0 ] ; yDiff = ary_xy [ j ] [ 1 ] - ary_xy [ i ] [ 1 ] ; sumWay += Math . sqrt ( Math . pow ( xDiff , 2 ) + Math . pow ( yDiff , 2 ) ) ; } } ans = sumWay * 2 / N ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { console . log ( Math . pow ( input . trim ( ) , 3 ) ) ; } ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var x = lines [ 0 ] . split ( " " ) . map ( value => Number ( value ) ) ; console . log ( Math . ceil ( ( x [ 0 ] + x [ 1 ] ) / 2 ) ) } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var str = input . trim ( ) ; var cnt = 0 ; for ( var i = 0 ; i < str . length ; i ++ ) { var a = str . slice ( 0 , i ) - 0 ; var b = str . slice ( i ) ; if ( b [ 0 ] == 0 ) continue ; b = b - 0 ; if ( a > b ) break ; if ( a % 2 == 0 && b % 2 == 0 ) cnt ++ ; if ( a % 2 == 1 && b % 2 == 1 ) cnt ++ ; } console . log ( cnt ) ;
const main = i => { const input = i . split ( / \s / ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a - b ) console . log ( input [ 2 ] - input [ 0 ] ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) ; const N = Number ( inp . shift ( ) ) in p = inp . map ( r => r . split ( ' ' ) . map ( n => Number ( n ) ) ) let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { const x = Math . pow ( inp [ i ] [ 0 ] - inp [ j ] [ 0 ] , 2 ) const y = Math . pow ( inp [ i ] [ 1 ] - inp [ j ] [ 1 ] , 2 ) sum += Math . sqrt ( x + y ) } } console . log ( sum / N ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { console . log ( input . split ( " \n " ) [ 4 ] - input . split ( " \n " ) [ 0 ] <= input . split ( " \n " ) [ 5 ] ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var input = input . replace ( / \n / g , ' ' ) . split ( / \s+ / g ) . join ( ) ; var five , seven ; if ( ( / 5 / ) . test ( input ) && ( / 7 / ) . test ( input ) ) { five = input . match ( / 5 / g ) . length ; seven = input . match ( / 7 / g ) . length ; } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const x = parseInt ( input / 15 ) ; console . log ( input * 800 - x * 200 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( lines [ 0 ] ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const c = arg . map ( n => n . split ( " " ) . map ( l => parseInt ( l ) ) ) ; for ( let a1 = 0 ; a1 <= 100 ; a1 ++ ) { const b1 = c [ 0 ] [ 0 ] - a1 ; const b2 = c [ 1 ] [ 0 ] - a1 ; const b3 = c [ 2 ] [ 0 ] - a1 ; for ( let a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) continue ; if ( a2 + b2 !== c [ 1 ] [ 1 ] ) continue ; if ( a2 + b3 !== c [ 2 ] [ 1 ] ) continue ; for ( let a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) continue ; if ( a3 + b2 !== c [ 1 ] [ 2 ] ) continue ; if ( a3 + b3 !== c [ 2 ] [ 2 ] ) continue ; console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; inputStr = input [ 0 ] . split ( " " ) ; var N = Number . parseInt ( inputStr [ 0 ] ) ; var D = Number . parseInt ( inputStr [ 1 ] ) ; var X_arr = [ ] ; var count = 0 ; for ( var i = 0 ; i < N ; i ++ ) { var tmp = input [ i + 1 ] . split ( " " ) ; X_arr . push ( tmp . map ( tmp => parseInt ( tmp ) ) ) ; } for ( var i1 = 0 ; i1 < N - 1 ; i1 ++ ) { var tmp1 = X_arr [ i1 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i2 = i1 + 1 ; i2 < N ; i2 ++ ) { var cul = 0 ; var tmp2 = X_arr [ i2 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i3 = 0 ; i3 < D ; i3 ++ ) { cul = cul + Math . pow ( tmp1 [ i3 ] - tmp2 [ i3 ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( cul ) ) ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; var sum = 0 ; for ( i = 0 ; i < xs . length ; i ++ ) { sum += xs [ i ] ; } console . log ( Math . ceil ( sum / xs . length ) ) ; } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const c = parseInt ( input [ 2 ] , 10 ) ; const x = parseInt ( input [ 3 ] , 10 ) ; let ans = 0 ; for ( var a_i = 0 ; a_i < a + 1 ; a_i ++ ) { for ( var b_i = 0 ; b_i < b + 1 ; b_i ++ ) { for ( var c_i = 0 ; c_i < c + 1 ; c_i ++ ) { if ( x === ( 500 * a_i + 100 * b_i + 50 * c_i ) ) { ans ++ ; } } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var age = input [ 0 ] ; var few = input [ 1 ] ; if ( age < 6 ) { console . log ( 0 ) ; } else if ( age > 12 ) { console . log ( few ) ; } else { console . log ( few / 2 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var numbers = chunk . toString ( ) . split ( " " ) ; var S = parseInt ( numbers . pop ( ) ) , K = parseInt ( numbers . pop ( ) ) ; var c = 0 ; for ( var X = 0 ; X <= K ; X ++ ) for ( var Y = 0 ; Y <= K ; Y ++ ) { var Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { c ++ ; } } process . stdout . write ( c . toString ( ) ) ; process . exit ( ) ; } ) ;
' use strict ' ; function Main ( input ) { const tmp = input . split ( " \n " ) [ 0 ] . split ( " " ) ; let A = parseInt ( tmp [ 0 ] , 10 ) ; let B = parseInt ( tmp [ 1 ] , 10 ) ; if ( A == 1 ) { A += 13 ; } if ( B == 1 ) { B += 13 ; } if ( A == B ) { console . log ( " Draw " ) ; } else if ( A > B ) { console . log ( " Alice " ) ; } else { console . log ( " Bob " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const N = parseInt ( input ) for ( let i = 1 ; ; i ++ ) { let num = Math . pow ( 2 , i ) if ( num > N ) { console . log ( Math . pow ( 2 , i - 1 ) ) return } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function area ( x1 , y1 , x2 , y2 , x3 , y3 ) { var ab = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) , bc = Math . sqrt ( ( x2 - x3 ) * ( x2 - x3 ) + ( y2 - y3 ) * ( y2 - y3 ) ) , ca = Math . sqrt ( ( x3 - x1 ) * ( x3 - x1 ) + ( y3 - y1 ) * ( y3 - y1 ) ) , s = 0.5 * ( ab + bc + ca ) , S = Math . sqrt ( s * ( s - ab ) * ( s - bc ) * ( s - ca ) ) ; return S ; } function inTriangle ( x1 , y1 , x2 , y2 , x3 , y3 , xp , yp ) { var abc = area ( x1 , y1 , x2 , y2 , x3 , y3 ) , abp = area ( x1 , y1 , x2 , y2 , xp , yp ) , bcp = area ( x2 , y2 , x3 , y3 , xp , yp ) , cap = area ( x3 , y3 , x1 , y1 , xp , yp ) , sub = abc - ( abp + bcp + cap ) ; return Math . abs ( sub ) <= 0.01 ; } function main ( ) { input . forEach ( function ( line ) { if ( line . trim ( ) === ' ' ) return ; console . log ( inTriangle . apply ( null , line . split ( ' ' ) . map ( parseFloat ) ) ? ' YES ' : ' NO ' ) ; } ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var a = inputs [ 0 ] ; var b = inputs [ 1 ] ; var valid = true ; if ( a > 8 || b > 8 ) { valid = false ; } console . log ( valid ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( + ( new Date ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) <= + ( new Date ( " 2019/4/30 " ) ) ? " Heisei " : " TBD " )
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( v => parseInt ( v ) ) const a = input [ 0 ] const b = input [ 1 ] const c = input [ 2 ] const d = input [ 3 ] if ( a * b >= c * d ) { console . log ( a * b ) } else { console . log ( c * d ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' function main ( s ) { const n = Number ( s ) ; const ans = ( 800 * n ) - ( Math . floor ( n / 15 ) * 200 ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . trim ( ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { for ( var i = 0 , len = input . length ; i < len ; i ++ ) { var iarr = input [ i ] . split ( ' ' ) ; j = 0 ; var v1 = new Vector2D ( iarr [ j ++ ] , iarr [ j ++ ] ) ; var v2 = new Vector2D ( iarr [ j ++ ] , iarr [ j ++ ] ) ; var v3 = new Vector2D ( iarr [ j ++ ] , iarr [ j ++ ] ) ; var vp = new Vector2D ( iarr [ j ++ ] , iarr [ j ++ ] ) ; var v12 = v2 . sub ( v1 ) ; var v2p = vp . sub ( v2 ) ; var v23 = v3 . sub ( v2 ) ; var v3p = vp . sub ( v3 ) ; var v31 = v1 . sub ( v3 ) ; var v1p = vp . sub ( v1 ) ; var c1 = v12 . cross ( v2p ) ; var c2 = v23 . cross ( v3p ) ; var c3 = v31 . cross ( v1p ) ; if ( ( c1 > 0 && c2 > 0 && c3 > 0 ) || ( c1 < 0 && c2 < 0 && c3 < 0 ) ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } } function Vector2D ( x , y ) { this . x = x - 0 , this . y = y - 0 ; this . sub = function ( v ) { return new Vector2D ( this . x - v . x , this . y - v . y ) ; } ; this . cross = function ( v ) { return this . x * v . y - this . y * v . x ; } ; }
" use strict " ; function main ( input ) { const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; const rects = [ args [ 0 ] * args [ 1 ] , args [ 2 ] * args [ 3 ] ] . sort ( ( a , b ) => { return a - b ; } ) ; console . log ( rects [ 1 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( i ) { i = i . split ( ' \n ' ) ; var a = Number ( i [ 0 ] ) , b = Number ( i [ 1 ] ) , c = Number ( i [ 2 ] ) , d = Number ( i [ 3 ] ) , e = Number ( i [ 4 ] ) , k = Number ( i [ 5 ] ) ; if ( k >= e - a ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
#!/usr/bin/env node function main(input) { console.log(input*input); } main(require('fs').readFileSync('/dev/stdin', 'utf-8'));
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var numbers = input . split ( ' ' ) ; var sum = 0 ; numbers . forEach ( function ( number ) { sum += Number ( number ) ; } ) ; console . log ( Math . ceil ( sum / numbers . length ) ) ;
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { if ( lines . length === 1 ) { var date_int = lines [ 0 ] . replace ( / \ if (date_int <= 20190430) { console.log('Heisei'); return; } } console.log('TBD'); });
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const bonus = Math . floor ( N / 15 ) * 200 ; const x = ( N * 800 ) ; console . log ( x - bonus ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const Main = ( input ) => { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; if ( xs [ 0 ] >= 13 ) { console . log ( xs [ 1 ] ) ; } else if ( xs [ 0 ] <= 12 && xs [ 0 ] >= 6 ) { console . log ( xs [ 1 ] / 2 ) ; } else { console . log ( 0 ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; function Main ( input ) { var tmp = input . split ( " \n " ) ; var N = Number ( tmp [ 0 ] ) ; var pos = 0 ; var pay = 0 ; for ( var i = 1 ; i <= N ; i ++ ) { pay += 800 ; if ( i % 15 == 0 ) pay -= 200 ; } console . log ( pay ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function setUp ( input ) { input = input . split ( " \n " ) ; a = Number ( input [ 0 ] ) ; b = Number ( input [ 1 ] ) ; c = Number ( input [ 2 ] ) ; d = Number ( input [ 3 ] ) ; e = Number ( input [ 4 ] ) ; main ( ) ; } function main ( ) { var total = ceil ( a ) + ceil ( b ) + ceil ( c ) + ceil ( d ) + ceil ( e ) ; var firstArray = [ first ( a ) , first ( b ) , first ( c ) , first ( d ) , first ( e ) ] ; var minFirst ; debugger ; firstArray . forEach ( function ( d , i ) { if ( d !== 0 && ( ! minFirst || minFirst > d ) ) { minFirst = d ; } } ) ; if ( minFirst ) { total -= ( 10 - minFirst ) ; } console . log ( total ) ; } function ceil ( num ) { return Math . ceil ( num / 10 ) * 10 ; } function first ( num ) { var str = num . toString ( ) ; return Number ( str . substring ( str . length - 1 ) ) ; } setUp ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ? " Yes " : " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var ans = 0 ; require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . match ( / \d+ / g ) . forEach ( function ( elem ) { ans += parseInt ( elem , 10 ) ; } ) ; console . log ( ans ) ;
d = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; [ a , v ] = d [ 0 ] . split ( " " ) ; [ b , w ] = d [ 1 ] . split ( " " ) ; t = d [ 2 ] ; d = Math . abs ( a - b ) ; console . log ( d <= ( v - w ) * t ? " YES " : " NO " ) ;
function main ( input ) { const haiku = [ 5 , 7 , 5 ] ; const inputArr = input . split ( ' ' ) . map ( ( data ) => { return Number ( data ) ; } ) ; let tempArr = inputArr ; for ( let i = 0 ; i < haiku . length ; i ++ ) { const indexOf = tempArr . indexOf ( haiku [ i ] ) ; if ( indexOf >= 0 ) { tempArr . splice ( indexOf , 1 ) ; } } return tempArr . length === 0 ? ' YES ' : ' NO ' ; } console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
" use strict " ; let myFunc = ( input ) => { input = input . split ( " \n " ) ; let S = input [ 1 ] . split ( " " ) ; let N = parseInt ( input [ 0 ] ) ; let P , W , G , Y ; P = W = G = Y = 0 ; for ( let i = 0 ; i < N ; i ++ ) { if ( S [ i ] === ' P ' ) P = 1 ; if ( S [ i ] === ' W ' ) W = 1 ; if ( S [ i ] === ' G ' ) G = 1 ; if ( S [ i ] === ' Y ' ) Y = 1 ; } if ( P + W + G + Y === 3 ) console . log ( " Three " ) ; if ( P + W + G + Y === 4 ) console . log ( " Four " ) ; } ; myFunc ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; if ( A > 8 || B > 8 ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const a = parseInt ( args [ 0 ] , 10 ) ; console . log ( a * a * a ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( s ) { s = s . split ( " " ) ; var a , b ; a = parseInt ( s [ 0 ] ) ; b = parseInt ( s [ 1 ] ) ; console . log ( Math . floor ( ( a + b ) / 2 + .5 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = arg => { var input = arg . trim ( ) . split ( " \n " ) ; const endIndex = input . indexOf ( " 0 " ) ; input = input . slice ( 0 , endIndex ) ; const result = [ ] ; input . forEach ( str => { const sum = str . split ( " " ) . map ( num => parseInt ( num , 10 ) ) . reduce ( ( a , b ) => a + b ) ; result . push ( sum ) ; } ) ; console . log ( result . join ( " \n " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function Main ( input ) { const arr = input . split ( ' \n ' ) . map ( x => Number ( x ) ) ; const a = arr [ 0 ] ; const b = arr [ 1 ] ; const c = arr [ 2 ] ; const x = arr [ 3 ] ; var count = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) { if ( 500 * i + 100 * j + 50 * k === x ) count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const permutateWithoutRepetitions = permutationOptions => { if ( permutationOptions . length === 1 ) { return [ permutationOptions ] ; } const permutations = [ ] ; const smallerPermutations = permutateWithoutRepetitions ( permutationOptions . slice ( 1 ) ) ; const firstOption = permutationOptions [ 0 ] ; for ( let permIndex = 0 ; permIndex < smallerPermutations . length ; permIndex += 1 ) { const smallerPermutation = smallerPermutations [ permIndex ] ; for ( let positionIndex = 0 ; positionIndex <= smallerPermutation . length ; positionIndex += 1 ) { const permutationPrefix = smallerPermutation . slice ( 0 , positionIndex ) ; const permutationSuffix = smallerPermutation . slice ( positionIndex ) ; permutations . push ( permutationPrefix . concat ( [ firstOption ] , permutationSuffix ) ) ; } } return permutations ; } const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] ) ; const xy = arg . slice ( 1 , N + 1 ) . map ( n => n . split ( " " ) . map ( l => parseInt ( l ) ) ) ; const combos = permutateWithoutRepetitions ( xy ) ; const results = [ ] ; for ( let i in combos ) { let temp = 0 ; for ( let j = 0 ; j < combos [ i ] . length - 1 ; j ++ ) { let x = Math . pow ( combos [ i ] [ ~ ~ j + 1 ] [ 0 ] - combos [ i ] [ j ] [ 0 ] , 2 ) ; let y = Math . pow ( combos [ i ] [ ~ ~ j + 1 ] [ 1 ] - combos [ i ] [ j ] [ 1 ] , 2 ) ; temp += Math . sqrt ( x + y ) ; } results . push ( temp ) } console . log ( results . reduce ( ( m , n ) => m + n ) / combos . length ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var data = input . split ( " \n " ) ; console . log ( Math . ceil ( data [ 0 ] / 10 ) * 10 + Math . ceil ( data [ 1 ] / 10 ) * 10 + Math . ceil ( data [ 2 ] / 10 ) * 10 + Math . ceil ( data [ 3 ] / 10 ) * 10 + Math . ceil ( data [ 4 ] / 10 ) * 10 + Math . min ( ( data [ 0 ] - 1 ) % 10 + 1 , ( data [ 1 ] - 1 ) % 10 + 1 , ( data [ 2 ] - 1 ) % 10 + 1 , ( data [ 3 ] - 1 ) % 10 + 1 , ( data [ 4 ] - 1 ) % 10 + 1 ) - 10 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let content = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , buf => { content += buf ; } ) ; process . stdin . on ( ' end ' , ( ) => { const lines = content . trim ( ) . split ( ' \n ' ) . slice ( 0 , - 1 ) ; const result = lines . map ( num => num . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) . reduce ( ( prev , cur ) => prev + cur ) ) ; console . log ( result . join ( ' \n ' ) ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . trim ( ) . split ( ' \n ' ) ; var ret = lines . filter ( function ( line ) { var items = line . split ( ' , ' ) ; var w = + items [ 1 ] ; var h = + items [ 2 ] ; return w / ( h * h ) >= 25 ; } ) ; ret . forEach ( function ( line ) { console . log ( line . split ( ' , ' ) [ 0 ] ) ; } ) ;
function main ( input ) { var arr = [ ] var input = input . split ( " " ) var result = 0 in put . forEach ( function ( element ) { arr . push ( parseInt ( element , 10 ) ) } ) delete input arr . sort ( function ( a , b ) { if ( a > b ) { return 1 } else { return - 1 } } ) for ( var i = 1 ; i < arr . length ; i ++ ) { result += arr [ i ] - arr [ i - 1 ] } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; var H = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var M = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; rad_H = ( ( 360 / 12 ) * H + ( ( 360 / 12 ) / 60 ) * M ) * ( Math . PI / 180 ) ; rad_M = ( 360 / 60 ) * M * ( Math . PI / 180 ) ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - 2 * A * B * Math . cos ( rad_H - rad_M ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var A = input . split ( ' ' ) ; var cost = 0 ; A = A . map ( ( s ) => parseInt ( s ) ) ; A = A . sort ( ) ; for ( var i = 0 ; i < A . length - 1 ; ++ i ) { cost += Math . abs ( A [ i ] - A [ i + 1 ] ) ; } console . log ( cost ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( Math . pow ( x , 3 ) )
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const a = parseInt ( args [ 0 ] [ 0 ] , 10 ) const e = parseInt ( args [ 4 ] [ 0 ] , 10 ) const k = parseInt ( args [ 5 ] [ 0 ] , 10 ) if ( e - a <= k ) console . log ( ' Yay! ' ) else console . log ( ' :( ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( i ) { i = i . split ( ' \n ' ) ; const a = [ ] ; f = i . map ( n => { if ( Number ( n ) % 10 === 0 ) { return [ Number ( n ) , 10 ] ; } return [ Number ( n ) , Number ( n ) % 10 ] ; } ) ; f . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; var answer = 0 ; f . forEach ( ( item , index ) => { if ( index === 0 ) { answer += item [ 0 ] ; } else { answer += Math . ceil ( item [ 0 ] / 10 ) * 10 ; } } ) ; console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function Main ( input ) { const total = input . split ( ' ' ) . map ( Number ) . reduce ( ( acc , cur ) => acc + cur , 0 ) ; const ave = Math . ceil ( total / 2 ) ; console . log ( ave ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = inputs ; var set = x * x * x ; console . log ( parseInt ( set ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) )
var main = function ( input ) { input = input . split ( ' ' ) var A = parseInt ( input [ 0 ] ) ; var B = parseInt ( input [ 1 ] ) ; if ( A < 9 ) { if ( B < 9 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } else { console . log ( ' :( ' ) ; return 0 ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' function Main ( input ) { const tmp = input . trim ( ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) ; const K = Number ( tmp [ 0 ] ) ; const S = Number ( tmp [ 1 ] ) ; let result = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { const z = S - x - y ; if ( z >= 0 && z <= K ) { result ++ ; } } } console . log ( result ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var value = parseInt ( input ) ; console . log ( ' %d ' , value * value ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( inp ) { let ans = inp . split ( ' ? ' ) . join ( ' D ' ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const factorization = ( n ) => { let primes = [ ] for ( let i = 2 ; i * i <= n ; i ++ ) { let e = 0 while ( n % i === 0 ) { e ++ n /= i } if ( e ) { primes . push ( i ) } } if ( n > 1 ) { primes . push ( n ) } return primes } const getGCD = ( a , b ) => { if ( b === 0 ) return a else if ( a === 0 ) return b return getGCD ( b , a % b ) } const main = ( arg ) => { const N = Number ( arg . split ( " \n " ) [ 0 ] ) const a = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) const MAX_A = 10 ** 6 + 1 let set = [ ... new Array ( MAX_A ) ] . fill ( 0 ) isPairCoprime = true for ( let i = 0 ; i < N ; i ++ ) { const factors = factorization ( a [ i ] ) for ( let j = 0 ; j < factors . length ; j ++ ) { if ( set [ factors [ j ] ] === 1 ) { isPairCoprime = false } set [ factors [ j ] ] = 1 } } if ( isPairCoprime ) { console . log ( " pairwise coprime " ) return } let gcd = 0 for ( let i = 0 ; i < a . length ; i ++ ) { gcd = getGCD ( gcd , a [ i ] ) } if ( gcd === 1 ) { console . log ( " setwise coprime " ) return } console . log ( " not coprime " ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const getA = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const X = parseInt ( inputs [ 0 ] , 10 ) console . log ( getA ( X ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function Main ( input ) { let lines = input * 1 ; console . log ( lines * lines ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const inputNum = parseInt ( input ) console . log ( inputNum * inputNum * inputNum )
' use strict ' const main = ( input ) => { const K = parseInt ( input . split ( ' ' ) [ 0 ] ) const S = parseInt ( input . split ( ' ' ) [ 1 ] ) let sum = 0 for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { let z = S - x - y if ( z >= 0 && z <= K ) { sum ++ } } } console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function main ( input ) { const a = input . split ( " " ) . map ( Number ) ; console . log ( ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? " YES " : " NO " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var array = input . trim ( ) . split ( " \n " ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; var waitTimeAry = [ ] ; var amount = 0 ; var ceilArray = [ ] ; for ( var i = 0 ; i < array . length ; i ++ ) { var ceil = Math . ceil ( array [ i ] / 10 ) * 10 ; waitTimeAry . push ( ceil - array [ i ] ) ; ceilArray . push ( ceil ) ; } var maxWait = Math . max ( ... waitTimeAry ) ; var index = waitTimeAry . indexOf ( maxWait ) ; ceilArray . splice ( index , 1 ) ; ceilArray . splice ( ceilArray . length , 0 , array [ index ] ) ; for ( var j = 0 ; j < ceilArray . length ; j ++ ) { amount += ceilArray [ j ] ; } console . log ( amount ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = Number ( input [ 0 ] ) ; let An = input [ 1 ] . split ( " " ) . map ( Number ) ; if ( gcd ( An ) !== 1 ) { console . log ( " not coprime " ) ; return ; } let freq = Array ( 1000001 ) . fill ( 0 ) ; for ( let A of An ) { if ( A === 1 ) continue ; freq [ A ] ++ ; } for ( let i = 2 ; i <= 1000001 ; i ++ ) { let tmp = 0 ; for ( let j = i ; j <= 1000001 ; j += i ) { tmp += freq [ j ] ; if ( tmp >= 2 ) { console . log ( " setwise coprime " ) ; return ; } } } console . log ( " pairwise coprime " ) ; } function gcd ( arg ) { let f = ( a , b ) => b ? f ( b , a % b ) : a let ans = arg [ 0 ] ; for ( let i = 1 ; i < arg . length ; i ++ ) { ans = f ( ans , arg [ i ] ) ; } return ans ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( arg ) { arg = arg . split ( " " ) . sort ( ( a , b ) => a - b ) ; console . log ( arg [ 2 ] - arg [ 0 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var Main = input => { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp1 [ 0 ] , 10 ) ; var D = parseInt ( tmp1 [ 1 ] , 10 ) ; var X = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { X [ i ] = input [ i + 1 ] . split ( " " ) ; } var count = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = 0 ; j < N ; j ++ ) { if ( i === j ) { break ; } else { var diff = [ ] ; var value = 0 ; for ( var k = 0 ; k < D ; k ++ ) { diff [ k ] = Math . pow ( X [ i ] [ k ] - X [ j ] [ k ] , 2 ) ; } value = Math . sqrt ( diff . reduce ( ( total , data ) => { return total + data } ) ) ; if ( Number . isInteger ( value ) ) { count ++ ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var oturi = [ ] ; for ( var i = 0 ; i <= 500 ; i ++ ) { var sum = i ; var cnt = 0 ; while ( sum >= 500 ) { sum -= 500 ; cnt ++ ; } while ( sum >= 100 ) { sum -= 100 ; cnt ++ ; } while ( sum >= 50 ) { sum -= 50 ; cnt ++ ; } while ( sum >= 10 ) { sum -= 10 ; cnt ++ ; } while ( sum >= 5 ) { sum -= 5 ; cnt ++ ; } while ( sum >= 1 ) { sum -= 1 ; cnt ++ ; } oturi [ i ] = cnt ; } var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; while ( true ) { var str = arr . shift ( ) ; if ( str == " 0 0 0 0 0 0 0 " ) break ; var ary = str . split ( " " ) . map ( Number ) ; var P = ary [ 0 ] ; var min = Infinity ; for ( var i = P ; i < P + 500 ; i ++ ) { ( function ( p , a , b , c , d , e , f ) { var sum = i ; var cnt = 0 ; while ( sum >= 500 && f > 0 ) { sum -= 500 ; f -- ; cnt ++ ; } while ( sum >= 100 && e > 0 ) { sum -= 100 ; e -- ; cnt ++ ; } while ( sum >= 50 && d > 0 ) { sum -= 50 ; d -- ; cnt ++ ; } while ( sum >= 10 && c > 0 ) { sum -= 10 ; c -- ; cnt ++ ; } while ( sum >= 5 && b > 0 ) { sum -= 5 ; b -- ; cnt ++ ; } while ( sum >= 1 && a > 0 ) { sum -= 1 ; a -- ; cnt ++ ; } if ( sum == 0 ) min = Math . min ( cnt + oturi [ i - P ] , min ) ; } ) . apply ( null , ary ) ; } console . log ( min ) ; }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) var [ H1 , M1 , H2 , M2 , K ] = input [ 0 ] . split ( ' ' ) . map ( Number ) var diff = ( H2 * 60 + M2 ) - ( H1 * 60 + M1 ) console . log ( diff - K )
function Main ( input ) { var jigen = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; var len = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; var output = 0 ; for ( var i = 1 ; i < len + 1 ; i ++ ) { for ( var j = i + 1 ; j < len + 1 ; j ++ ) { var tmpKyori = 0 ; var iZahyo = input . split ( " \n " ) [ i ] ; var jZahyo = input . split ( " \n " ) [ j ] ; for ( var k = 0 ; k < jigen ; k ++ ) { var iTmpZahyo = parseInt ( iZahyo . split ( " " ) [ k ] ) ; var jTmpZahyo = parseInt ( jZahyo . split ( " " ) [ k ] ) ; tmpKyori += Math . pow ( iTmpZahyo - jTmpZahyo , 2 ) ; } var kekka = Math . sqrt ( tmpKyori ) ; if ( kekka . toString ( ) . indexOf ( " . " ) == - 1 ) { output ++ ; } } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var max = Number ( input [ 0 ] ) ; var sum = Number ( input [ 1 ] ) ; var result = 0 ; var average = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= average ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( j <= k && k <= max ) { if ( i === j && i === k ) { result ++ ; } else if ( i === j || i === k || k === j ) { result = result + 3 ; } else { result = result + 6 ; } } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) A = inp . shift ( ) * 1 B = inp . shift ( ) * 1 if ( A == B ) { ans = ' Draw ' } else { if ( A == 1 ) { ans = ' Alice ' } else if ( B == 1 ) { ans = ' Bob ' } else if ( A > B ) { ans = ' Alice ' } else { ans = ' Bob ' } } console . log ( ans )
function main ( s ) { var n = parseInt ( s ) ; console . log ( n * 800 - Math . floor ( n / 15 ) * 200 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var line = input [ 0 ] . split ( ' ' ) . sort ( ) ; console . log ( line . join ( ' ' ) === ' 1479 ' ? ' YES ' : ' NO ' ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
function main ( input ) { var a = input [ 0 ] - 0 ; var b = input [ 1 ] - 0 ; var c = input [ 2 ] - 0 ; var x = input [ 3 ] - 0 ; var ans = 0 ; for ( var i = 0 ; i <= a ; i ++ ) for ( var j = 0 ; j <= b ; j ++ ) for ( var k = 0 ; k <= c ; k ++ ) { if ( 500 * i + 100 * j + 50 * k == x ) ans ++ ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
( function ( input ) { var p = input . split ( ' \n ' ) ; for ( var i = 0 ; i < p . length ; i ++ ) { var x = p [ i ] ; if ( x == 0 ) { return ; } console . log ( x . split ( ' ' ) . reduce ( function ( a , b ) { return Number ( a ) + Number ( b ) ; } ) ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ; function main ( N ) { var T = N . trim ( ) ; var a = T . charAt ( 0 ) ; var b = T . charAt ( 2 ) ; var c = T . charAt ( 4 ) ; if ( ( a == " 7 " && b == " 5 " && c == " 5 " ) || ( a == " 5 " && b == " 7 " && c == " 5 " ) || ( a == " 5 " && b == " 5 " && c == " 7 " ) ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } }
" use strict " const Main = ( input ) => { const Array = input . split ( " " ) const A = parseInt ( Array [ 0 ] , 10 ) const B = parseInt ( Array [ 1 ] , 10 ) const C = parseInt ( Array [ 2 ] , 10 ) const Answer = ( A + B ) >= C ? " Yes " : " No " console . log ( Answer ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const inp = input . split ( " " ) ; const sum = parseInt ( inp [ 0 ] , 10 ) + parseInt ( inp [ 1 ] , 10 ) + parseInt ( inp [ 2 ] , 10 ) ; var ans = sum === 17 ? " YES " : " NO " ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; for ( var i = 0 ; i < 3 ; i ++ ) { input [ i ] = parseInt ( input [ i ] , 10 ) ; if ( input [ i ] == 5 || input [ i ] == 7 ) { continue ; } else { console . log ( ' NO ' ) ; return ; } } var b = input [ 0 ] + input [ 1 ] + input [ 2 ] ; if ( b == 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( input ) => { var p = input . trim ( ) . split ( " \n " ) ; var ans = 0 ; var min = 10 ; for ( var i = 0 ; i < 5 ; i ++ ) { if ( p [ i ] % 10 > 0 ) { ans += Number ( p [ i ] ) + ( 10 - p [ i ] % 10 ) ; min = Math . min ( min , p [ i ] % 10 ) ; } else { ans += Math . floor ( p [ i ] ) ; } } console . log ( min == 10 ? ans : ans + min - 10 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
const main = ( standardInput ) => { const lengthList = standardInput . split ( ' ' ) ; const x = Number . parseInt ( lengthList [ 0 ] ) ; console . log ( x * x * x ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; input . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; console . log ( Math . abs ( input [ 0 ] - input [ 2 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var k = Number ( inputs [ 0 ] ) ; var s = Number ( inputs [ 1 ] ) ; var cnt = 0 ; for ( var x = 0 ; x <= k ; x ++ ) for ( var y = 0 ; y <= k ; y ++ ) if ( s - ( x + y ) >= 0 && s - ( x + y ) <= k ) cnt ++ ; console . log ( cnt ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; console . log ( a * a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = " " process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( " \n " ) ; var i = 0 ; while ( true ) { var x = input [ i ] ; if ( x == " 0 " ) { break ; } var sum = 0 ; for ( j = 0 ; j < x . length ; j ++ ) { sum += parseInt ( x [ j ] , 10 ) ; } console . log ( sum ) i ++ ; } } ) ;
function Main ( input ) { console . log ( input * input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( Number ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi ++ ) { for ( let yi = 0 ; yi <= k ; yi ++ ) { const diff = s - xi - yi if ( diff >= 0 && diff <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var num = input . split ( " / " ) ; for ( var n = 0 ; n < num . length ; n ++ ) { num [ n ] = parseInt ( num [ n ] ) ; } var output ; if ( num [ 0 ] < 2019 ) { output = " Heisei " } else { if ( num [ 1 ] < 5 ) { output = " Heisei " } else { output = " TBD " } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var n = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( n , 3 ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var antena = input . slice ( 0 , 5 ) . map ( i => parseInt ( i , 10 ) ) ; var K = parseInt ( input [ 5 ] , 10 ) ; var result = ' Yay! ' ; for ( var i = 1 ; i < antena . length ; i ++ ) { for ( var j = 0 ; j < i ; j ++ ) { if ( ( antena [ i ] - antena [ j ] ) > K ) { result = ' :( ' ; } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
function main ( input ) { var _input = input . split ( ' \n ' ) var a500 = parseInt ( _input [ 0 ] ) var b100 = parseInt ( _input [ 1 ] ) var c50 = parseInt ( _input [ 2 ] ) var total = parseInt ( _input [ 3 ] ) var counter = 0 var _total for ( var a = 0 ; a <= a500 ; a ++ ) { _total = 0 for ( var b = 0 ; b <= b100 ; b ++ ) { for ( var c = 0 ; c <= c50 ; c ++ ) { _total = 500 * a + 100 * b + 50 * c if ( _total === total ) { counter ++ break } else if ( _total > total ) break } if ( _total > total ) break } } console . log ( counter ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 1 ] != 1 ) console . log ( input [ 0 ] - input [ 1 ] ) ; else console . log ( 0 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const A = parseInt ( input , 10 ) ; console . log ( A * A ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var N = input [ 0 ] - 0 ; for ( var i = 0 ; Math . pow ( 2 , i ) <= N ; i ++ ) { } console . log ( Math . pow ( 2 , i - 1 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function Main ( input ) { var array = input . trim ( ) . split ( " \n " ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; var amount = 0 ; var longestWaitTime = 0 ; for ( var i = 0 ; i < array . length ; i ++ ) { var ceil = Math . ceil ( array [ i ] / 10 ) * 10 ; amount += ceil ; longestWaitTime = ceil - array [ i ] > longestWaitTime ? ceil - array [ i ] : longestWaitTime ; } console . log ( amount - longestWaitTime ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const cookT = input . split ( " \n " ) . map ( Number ) ; cookT . pop ( ) ; let hitoketa = 10 ; for ( let i = 0 ; i < 5 ; i ++ ) { let num = cookT [ i ] % 10 ; if ( num !== 0 && hitoketa > num ) { hitoketa = num ; } } let result = 0 ; for ( let i = 0 ; i < 5 ; i ++ ) { result += Math . ceil ( cookT [ i ] / 10 ) * 10 ; } result = result - 10 + hitoketa ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' const main = ( INPUT ) => { const r = INPUT . split ( ' \n ' ) [ 0 ] console . log ( r * r ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( lines ) { const input = lines . split ( ' ' ) . map ( Number ) const A = input [ 0 ] const B = input [ 1 ] const H = input [ 2 ] const C = input [ 3 ] const theta = ( 360 ) * H / 12 + 0.5 * C - ( 360 ) * C / 60 const output = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta * Math . PI / 180 ) ) console . log ( output . toFixed ( 9 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) . map ( ( n ) => { return parseInt ( n ) ; } ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var c = input [ 2 ] ; var x = input [ 3 ] ; var count = 0 ; for ( i = 0 ; i <= a ; i ++ ) { for ( j = 0 ; j <= b ; j ++ ) { for ( k = 0 ; k <= c ; k ++ ) { var t = 500 * i + 100 * j + 50 * k ; t === x ? count ++ : null ; } } } console . log ( count ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var In = input . split ( ' \n ' ) ; var count = 0 ; for ( var i = 0 ; i <= In [ 0 ] ; i ++ ) { for ( var j = 0 ; j <= In [ 1 ] ; j ++ ) { for ( var k = 0 ; k <= In [ 2 ] ; k ++ ) { var total = ( 500 * i ) + ( 100 * j ) + ( 50 * k ) ; if ( total == In [ 3 ] ) { count = count + 1 ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let A = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let B = new Array ( 5 ) ; for ( let n = 0 ; n < 5 ; n ++ ) { let r = A [ n ] % 10 ; B [ n ] = [ A [ n ] , ( r ) ? 10 - r : 0 ] ; } B . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; let ans = 0 ; for ( let n = 0 ; n < 5 ; n ++ ) { ans += B [ n ] [ 0 ] + ( ( n < 4 ) ? B [ n ] [ 1 ] : 0 ) ; } console . log ( ans ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi = ( xi + 1 ) | 0 ) { for ( let yi = 0 ; yi <= k ; yi = ( yi + 1 ) | 0 ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; function main ( input ) { var args = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) ; let cnt = 0 for ( var i = 0 ; i <= args [ 0 ] ; i ++ ) { for ( var j = 0 ; j <= args [ 1 ] ; j ++ ) { for ( var k = 0 ; k <= args [ 2 ] ; k ++ ) { const t = i * 500 + j * 100 + k * 50 if ( t === args [ 3 ] ) cnt = cnt + 1 } } } console . log ( cnt ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { if ( ( S - ( i + j ) <= K ) && ( S - ( i + j ) >= 0 ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( ) { const num = parseInt ( input [ 0 ] , 10 ) ; console . log ( num * num * num ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
function main ( input ) { const nums = input . split ( " " ) . map ( num => parseInt ( num , 10 ) ) console . log ( nums [ 0 ] >= 13 ? nums [ 1 ] : nums [ 0 ] >= 6 ? nums [ 1 ] / 2 : 0 ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const N = parseInt ( args [ 0 ] [ 0 ] , 10 ) const K = parseInt ( args [ 0 ] [ 1 ] , 10 ) console . log ( N % K ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const rl = require ( " readline " ) . createInterface ( process . stdin , process . stdout ) ; rl . once ( " line " , function ( str ) { var c = Math . pow ( str , 3 ) ; console . log ( c ) ; process . exit ( ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' \n ' ) ; var x = lines [ 0 ] ; var kaitou = x * x * x ; console . log ( kaitou ) ; } ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function main ( input ) { input = input . trim ( ) ; const N = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; console . log ( 800 * N - Math . floor ( ( N / 15 ) ) * 200 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = arg => { arg = arg . trim ( ) . split ( " \n " ) const K = ~ ~ arg [ 0 ] . split ( " " ) [ 0 ] ; const S = ~ ~ arg [ 0 ] . split ( " " ) [ 1 ] ; let answer = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { let z = S - i - j ; if ( 0 <= z && z <= K ) { answer ++ ; } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var m = input => { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var tmp = input . split ( ' \n ' ) [ 0 ] var A = parseInt ( tmp . split ( ' ' ) [ 0 ] ) ; var V = parseInt ( tmp . split ( ' ' ) [ 1 ] ) ; tmp = input . split ( ' \n ' ) [ 1 ] var B = parseInt ( tmp . split ( ' ' ) [ 0 ] ) ; var W = parseInt ( tmp . split ( ' ' ) [ 1 ] ) ; var T = parseInt ( input . split ( ' \n ' ) [ 2 ] ) ; var D = A - B ; if ( D < 0 ) { D = - D ; } if ( ( D + W * T ) <= V * T ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) ; console . log ( input [ 2 ] - input [ 0 ] ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { let args = input . split ( / \n|\s / ) ; console . log ( Math . ceil ( ( args [ 0 ] * 1 + args [ 1 ] * 1 ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function Main ( INPUT ) { const input = INPUT . split ( " \n " ) [ 0 ] . split ( " " ) . map ( n => Number ( n ) ) ; console . log ( Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp [ 0 ] , 10 ) ; var M = parseInt ( tmp [ 1 ] , 10 ) ; var inputArray = getInputArray ( input , N , M ) ; sortEachCol ( inputArray ) ; setCode2InputArray ( inputArray ) ; sortEachColIndex ( inputArray ) ; for ( var i = 0 ; i < inputArray . length ; i ++ ) { console . log ( zeroPaddingSixDigit ( inputArray [ i ] . p ) + zeroPaddingSixDigit ( inputArray [ i ] . code ) ) ; } } function setCode2InputArray ( inputArraySorted ) { var indexArray = new Array ( inputArraySorted . length ) ; inputArraySorted . forEach ( function ( element ) { var p = element . p ; indexArray [ p ] = indexArray [ p ] === undefined ? 0 : indexArray [ p ] + 1 ; element . code = indexArray [ p ] + 1 ; } ) ; } function sortEachCol ( inputArray ) { inputArray . sort ( function ( a , b ) { return a . value - b . value ; } ) ; } function sortEachColIndex ( inputArray ) { inputArray . sort ( function ( a , b ) { return a . index - b . index ; } ) ; } function getInputArray ( input , N , M ) { var inputArray = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var tmp = input [ i + 1 ] . split ( " " ) ; if ( tmp . length !== 2 ) { continue ; } var p = parseInt ( tmp [ 0 ] , 10 ) ; var value = parseInt ( tmp [ 1 ] , 10 ) ; inputArray . push ( { index : i , value : value , p : p } ) ; } return inputArray ; } function zeroPaddingSixDigit ( num ) { return ( ' 000000 ' + num ) . slice ( - 6 ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let [ a , b ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( a <= 8 && b <= 8 ? " Yay! " : " :( " ) ;
' use strict ' function main ( input ) { input = input . split ( / \n / ) const n = ~ ~ input [ 0 ] let houses = input [ 1 ] . split ( ' ' ) . map ( v => ~ ~ v ) . filter ( ( v , i , self ) => { return self . indexOf ( v ) === i } ) . sort ( ( a , b ) => a - b ) const ans = houses [ houses . length - 1 ] - houses [ 0 ] console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function Main ( input ) { input = input . split ( " \n " ) ; let nums = input [ 1 ] . split ( " " ) ; let max = Math . max . apply ( null , nums ) ; let min = Math . min . apply ( null , nums ) ; let a = parseInt ( nums [ 0 ] ) ; let result = ( a - min ) + ( max - a ) ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { input = input . split ( " \n " ) [ 0 ] . split ( ' ' ) . map ( str => parseInt ( str ) ) const A = input [ 0 ] const B = input [ 1 ] let result = 0 if ( A >= 13 ) { result = B } else if ( A >= 6 ) { result = B / 2 } console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var sum = A + B ; console . log ( sum % 2 === 0 ? sum / 2 : sum / 2 + 0.5 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var n = parseInt ( input [ 0 ] , 10 ) ; var x = input [ 1 ] . split ( " " ) ; var min = 0 ; var maxx = 0 ; for ( var i = 0 ; i < n ; i ++ ) { if ( maxx < x [ i ] ) { maxx = x [ i ] ; } } for ( var j = 1 ; j <= maxx ; j ++ ) { var s = 0 ; for ( var k = 0 ; k < n ; k ++ ) { s = s + ( ( x [ k ] - j ) * ( x [ k ] - j ) ) ; } if ( min == 0 || min > s ) { min = s ; } } console . log ( ' %d ' , min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) const a = parseInt ( args [ 0 ] , 10 ) const b = parseInt ( args [ 1 ] , 10 ) if ( a >= 13 ) console . log ( b ) else if ( a >= 6 ) console . log ( b / 2 ) else console . log ( 0 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function Main ( input ) { let num = input . trim ( ) . split ( " \n " ) [ 0 ] ; let row = input . trim ( ) . split ( " \n " ) [ 1 ] . split ( ' ' ) . map ( x => x - 0 ) ; let ans = 0 ; let min = Infinity ; for ( let i = 0 ; i < num ; i ++ ) { if ( row [ i ] < min ) { ans ++ ; min = row [ i ] ; } ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { s = s . split ( " " ) . map ( a => + a ) ; console . log ( s [ 0 ] <= 8 && s [ 1 ] <= 8 ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var readStream = require ( ' fs ' ) . ReadStream ( ' /dev/stdin ' ) ; var readlineInterface = require ( ' readline ' ) . createInterface ( { input : readStream , output : { } } ) ; readlineInterface . on ( ' line ' , function ( line ) { var n = parseFloat ( line ) ; console . log ( n * n * n ) ; } ) ;
const main = input => { const r = parseInt ( input ) ; console . log ( r * r ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; let A = xs [ 0 ] * xs [ 1 ] ; let B = xs [ 2 ] * xs [ 3 ] ; if ( A >= B ) { console . log ( A ) ; } else if ( A <= B ) { console . log ( B ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var g_input = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { g_input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { Main ( g_input . split ( / \r?\n / ) ) ; } ) ; function Main ( input ) { var ab = input [ 0 ] . split ( ' ' ) ; var a = parseInt ( ab [ 0 ] , 10 ) ; var b = parseInt ( ab [ 1 ] , 10 ) ; if ( a > 8 || b > 8 ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } return 0 ; }
function main ( input ) { let nums = input . split ( " \n " ) ; let i = 0 ; while ( nums [ i ] !== " 0 " ) { let sum = 0 ; while ( nums [ i ] . length > 0 ) { let char = nums [ i ] . slice ( - 1 ) ; nums [ i ] = nums [ i ] . slice ( 0 , - 1 ) ; sum += parseInt ( char ) ; } console . log ( sum ) ; i ++ ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var abhm = lines [ 0 ] . split ( ' ' ) ; var a = Number ( abhm [ 0 ] ) ; var b = Number ( abhm [ 1 ] ) ; var h = Number ( abhm [ 2 ] ) ; var m = Number ( abhm [ 3 ] ) ; var hkaku = h * 30 + m * 0.5 ; var mkaku = m * 6 ; var kaku = Math . abs ( hkaku - mkaku ) ; var kaku2 = 360 - Math . abs ( hkaku - mkaku ) ; kaku = Math . min ( kaku2 , kaku ) ; kaku = Math . cos ( kaku * ( Math . PI / 180 ) ) ; var ans = ( a * a ) + ( b * b ) - ( 2 * a * b * kaku ) ; console . log ( Math . sqrt ( ans ) ) ; } ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " \n " ) ; var s = input [ 0 ] ; var N = parseInt ( input [ 1 ] ) ; var sList = new Array ( s . length ) ; var conv = " abcdefghijklmnopqrstuvwxyz " . split ( " " ) ; var convList = { } ; for ( var i = 0 ; i < conv . length ; i ++ ) { convList [ conv [ i ] ] = i ; } for ( var i = 0 ; i < s . length ; i ++ ) { sList [ i ] = convList [ s . slice ( i , i + 1 ) ] ; } for ( var i = 0 ; i < s . length ; i ++ ) { if ( sList [ i ] == 0 && i != s . length - 1 ) { continue ; } if ( i == s . length - 1 ) { sList [ i ] = ( sList [ i ] + N ) % 26 ; continue ; } if ( N == 0 ) { break ; } else if ( N < ( 26 - sList [ i ] ) ) { continue ; } else { var add = 26 - sList [ i ] ; sList [ i ] = ( sList [ i ] + add ) % 26 ; N -= add ; } } var output = " " ; for ( var i = 0 ; i < s . length ; i ++ ) { output += conv [ sList [ i ] ] ; } myout ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; nm = input [ 0 ] . split ( " " ) ; n = parseInt ( nm [ 0 ] ) ; m = parseInt ( nm [ 1 ] ) ; t = [ ] ; for ( var i = 0 ; i < m ; i ++ ) { r = [ ] ; for ( var j = 0 ; j < m ; j ++ ) { r . push ( input [ i + 1 + n ] [ j ] ) ; } t . push ( r ) ; } yes = false ; loop0 : for ( var i = 0 ; i < n - m + 1 ; i ++ ) { for ( var j = 0 ; j < n - m + 1 ; j ++ ) { loop1 : for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( input [ i + 1 + k ] [ j + l ] != t [ k ] [ l ] ) { break loop1 ; } } if ( k == m - 1 ) { yes = true ; break loop0 ; } } } } if ( yes ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; var sub_fn = ( ary ) => { } reader . on ( ' close ' , ( ) => { var a = 1 * lines [ 0 ] var b = 1 * lines [ 1 ] var c = 1 * lines [ 2 ] var x = 1 * lines [ 3 ] var cnt = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) if ( ( i * 500 + j * 100 + k * 50 ) == x ) { ++ cnt } } } console . log ( cnt ) } ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' \n ' ) . map ( i => parseInt ( i ) ) const A = input [ 0 ] const B = input [ 1 ] const C = input [ 2 ] const X = input [ 3 ] let count = 0 for ( let a = 0 ; a <= A ; a ++ ) { for ( let b = 0 ; b <= B ; b ++ ) { for ( let c = 0 ; c <= C ; c ++ ) { let sum = a * 500 + b * 100 + c * 50 if ( sum === X ) count ++ } } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
const BKRT = " \n " ; const SPAC = " " ; const NOSP = " " ; function Main ( input ) { input = [ ] . concat ( ... input . split ( BKRT ) . map ( a => a . split ( SPAC ) ) ) ; const strShift = ( ) => input . shift ( ) ; const intShift = ( ) => ~ ~ input . shift ( ) ; return intShift ( ) + intShift ( ) >= intShift ( ) ? " Yes " : " No " ; } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
" use strict " function Main ( input ) { const total = input . split ( ' ' ) . map ( Number ) . reduce ( ( acc , cur ) => acc + cur , 0 ) ; const ave = Math . ceil ( total / 2 ) ; console . log ( ave ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] ) ; let p = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let k = input [ i + 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; p [ i ] = { x : k [ 0 ] , y : k [ 1 ] } ; } let distanceSum = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { distanceSum += Math . sqrt ( Math . pow ( p [ i ] . x - p [ j ] . x , 2 ) + Math . pow ( p [ i ] . y - p [ j ] . y , 2 ) ) ; } } console . log ( distanceSum / n * 2 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
' use strict ' const main = input => { const n = parseInt ( input . trim ( ) , 10 ) const x = 800 * n const y = 200 * Math . floor ( n / 15 ) console . log ( x - y ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const main = function ( input ) { var tasks = input . split ( " " ) . map ( i => parseInt ( i ) ) ; var min = 100 * 3 ; for ( var i = 0 ; i < 3 ; i ++ ) { var pat1 = Math . abs ( tasks [ i ] - tasks [ ( i - 1 ) % 3 ] ) + Math . abs ( tasks [ ( i - 1 ) % 3 ] - tasks [ ( i + 1 ) % 3 ] ) ; var pat2 = Math . abs ( tasks [ i ] - tasks [ ( i + 1 ) % 3 ] ) + Math . abs ( tasks [ ( i + 1 ) % 3 ] - tasks [ ( i - 1 ) % 3 ] ) ; var smaller = Math . min ( pat1 , pat2 ) ; if ( min > smaller ) min = smaller ; } console . log ( min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { const params = input . split ( " " ) . map ( Number ) ; const K = params [ 0 ] ; const S = params [ 1 ] ; let count = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { const z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " \n " ) ; var N = inputs [ 0 ] . split ( " " ) [ 0 ] ; var D = inputs [ 0 ] . split ( " " ) [ 1 ] ; var a = [ ] ; for ( i = 1 ; i <= N ; i ++ ) { a [ i - 1 ] = inputs [ i ] . split ( " " ) ; } var n = 0 ; for ( j = 0 ; j <= ( N - 1 ) ; j ++ ) { for ( l = 0 ; l <= ( N - 1 ) ; l ++ ) { var b = 0 ; var k = 0 ; var s ; if ( j <= l ) { continue ; } for ( m = 0 ; m <= ( D - 1 ) ; m ++ ) { b = a [ j ] [ m ] - a [ l ] [ m ] ; k += Math . pow ( b , 2 ) ; } s = Number . isInteger ( Math . pow ( k , 1 / 2 ) ) ; if ( s == true ) { n += 1 ; } } } console . log ( n ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var ab = input . split ( " " ) ; ab [ 0 ] = parseInt ( ab [ 0 ] ) ; ab [ 0 ] = parseInt ( ab [ 0 ] ) ; if ( ab [ 0 ] == 1 ) { ab [ 0 ] = 14 ; } if ( ab [ 1 ] == 1 ) { ab [ 1 ] = 14 ; } if ( ab [ 0 ] > ab [ 1 ] ) { process . stdout . write ( " Alice " ) ; } else if ( ab [ 0 ] < ab [ 1 ] ) { process . stdout . write ( " Bob " ) ; } else { process . stdout . write ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( input ) => { const s = Number ( input . trim ( ) ) for ( let x = 0 ; x <= 1000 ; x ++ ) { for ( let y = - 1000 ; y <= 999 ; y ++ ) { if ( x ** 5 - y ** 5 === s ) return console . log ( ` ${ x } ${ y } ` ) } } } process . env . MYTEST ? ( process . env . MYTEST === ' test ' ? test ( ) : main ( require ( ' fs ' ) . readFileSync ( ' dev/stdin ' , ' utf8 ' ) ) ) : main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; if ( a > 12 ) { console . log ( b ) ; } else if ( a <= 12 && a >= 6 ) { console . log ( b / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( lines ) { const phrases = na ( ) ; let cnt5 = cnt7 = 0 ; phrases . forEach ( n => { if ( n == 5 ) cnt5 ++ ; if ( n == 7 ) cnt7 ++ ; } ) const ans = cnt5 == 2 && cnt7 == 1 ? ' YES ' : ' NO ' ; return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
function main ( ) { console . log ( input [ 0 ] * input [ 0 ] * input [ 0 ] ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
" use strict " ; function I ( s , f ) { this . _s = s . split ( " \n " ) ; this . _c = 0 ; this . _l = 0 ; this . _f = f || Number } I . prototype . a = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; var t = l . trim ( ) . split ( " " ) ; var a = t [ this . _c ] ; this . _c ++ ; if ( t . length === this . _c ) { this . _c = 0 ; this . _l ++ } return this . _f ( a ) } ; I . prototype . l = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; this . _c = 0 ; this . _l ++ ; return l . split ( " " ) . map ( this . _f ) } ; function main ( input ) { const o = new I ( input ) ; var arr = [ ] ; var mod = 10 ; for ( var i = 0 ; i < 5 ; i ++ ) { var m = o . a ( ) ; var mm = m % 10 ; if ( mm < mod && mm > 0 ) { mod = mm ; } arr . push ( m ) ; } if ( mod === 10 ) { console . log ( arr . reduce ( ( acc , cur ) => acc + cur ) ) ; } else { var sum = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { if ( arr [ i ] % 10 === 0 ) { sum += arr [ i ] ; } else { sum += arr [ i ] - arr [ i ] % 10 + 10 ; } } console . log ( sum - 10 + mod ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) in put_lines . map ( i => { if ( i == 5 ) { count5 ++ } if ( i == 7 ) { count7 ++ } } ) if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( num => parseInt ( num , 10 ) ) ; A = input [ 0 ] ; B = input [ 1 ] ; C = input [ 2 ] ; ( A + B ) >= C ? console . log ( ' Yes ' ) : console . log ( ' No ' ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . split ( ' ' ) ; var k = parseInt ( input [ 0 ] ) ; var s = parseInt ( input [ 1 ] ) ; var count = 0 ; for ( var x = 0 ; x <= k ; x ++ ) { for ( var y = 0 ; y <= k ; y ++ ) { var z = ( s - parseInt ( x ) - parseInt ( y ) ) ; if ( 0 <= z && z <= k ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const abcde = input . split ( " \n " ) . map ( n => parseInt ( n ) ) ; const len = 5 ; var total_time = 0 ; var last_cal_num = 10 ; var last_cal_num_index = 0 ; for ( var i = 0 ; i < len ; i ++ ) { var j = abcde [ i ] % 10 if ( 0 < j && j < last_cal_num ) { last_cal_num = j ; last_cal_num_index = i ; } } for ( var i = 0 ; i < len ; i ++ ) { if ( i !== last_cal_num_index ) { var j = abcde [ i ] ; var k = j % 10 ; j = k ? j + ( 10 - k ) : j ; total_time += j ; } } total_time += abcde [ last_cal_num_index ] ; console . log ( String ( total_time ) . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var total = a + b + c ; if ( total === 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var n = arr . shift ( ) - 0 ; var a = arr . shift ( ) . split ( " " ) . map ( Number ) ; var q = arr . shift ( ) - 0 ; var s = " " ; for ( var i = 0 ; i < q ; i ++ ) { var [ c , b , e ] = arr [ i ] . split ( " " ) . map ( Number ) ; var m = a [ b ] ; if ( c == 0 ) { for ( var j = b ; j < e ; j ++ ) m = Math . min ( m , a [ j ] ) ; } else { for ( var j = b ; j < e ; j ++ ) m = Math . max ( m , a [ j ] ) ; } s += m + " \n " ; } console . log ( s . trim ( ) ) ;
" use strict " ; function main ( input ) { var N = splitNum ( input ) . slice ( 0 , 4 ) ; N . sort ( ) ; var res = JSON . stringify ( N ) === JSON . stringify ( [ 1 , 4 , 7 , 9 ] ) ; console . log ( res ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function splitNum ( line ) { return line . split ( / \s+ / ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; }
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] >= 13 ? a [ 1 ] : a [ 0 ] >= 6 ? a [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; const fs = require ( ' fs ' ) ; let N = 0 ; let X = [ ] ; let Y = [ ] ; function distance ( i , j ) { return Math . sqrt ( Math . pow ( X [ i ] - X [ j ] , 2 ) + Math . pow ( Y [ i ] - Y [ j ] , 2 ) ) ; } function calcTotalRouteDistance ( ) { let result = 0 ; for ( let i = 0 ; i < N - 1 ; ++ i ) { for ( let j = i + 1 ; j < N ; ++ j ) { result += distance ( i , j ) ; } } return result ; } function calcAverageDistance ( ) { return 2 * calcTotalRouteDistance ( ) / N ; } function main ( arg ) { const lines = arg . split ( ' \n ' ) ; N = parseInt ( lines [ 0 ] , 10 ) ; for ( let i = 0 ; i < N ; ++ i ) { let line = lines [ i + 1 ] . split ( / \s / ) ; X [ i ] = parseInt ( line [ 0 ] , 10 ) ; Y [ i ] = parseInt ( line [ 1 ] , 10 ) ; } console . log ( calcAverageDistance ( ) ) ; } main ( fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const ALL = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) ; var count = 0 ; for ( var a = 0 ; a <= ALL [ 0 ] ; a ++ ) { for ( var b = 0 ; b <= ALL [ 1 ] ; b ++ ) { for ( var c = 0 ; c <= ALL [ 2 ] ; c ++ ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === ALL [ 3 ] ) count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const [ A , B , C ] = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) console . log ( A + B >= C ? ' Yes ' : ' No ' ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { var inputs = input . split ( " " ) ; var sum = parseInt ( inputs [ 0 ] , 10 ) + parseInt ( inputs [ 1 ] , 10 ) ; if ( sum >= inputs [ 2 ] ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { const S = arg . split ( " \n " ) [ 1 ] . split ( " " ) ; const set = new Set ( S ) ; console . log ( set . size == 4 ? " Four " : " Three " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { const array = arg . trim ( ) . split ( " " ) ; const A = parseInt ( array [ 0 ] ) ; const B = parseInt ( array [ 1 ] ) ; const H = parseInt ( array [ 2 ] ) ; const M = parseInt ( array [ 3 ] ) ; const PI = Math . PI ; const th = ( ( H * 60 + M ) / 720 ) * 2 * PI ; const tm = ( M / 60 ) * 2 * PI ; let xh = A * Math . cos ( th ) ; let yh = A * Math . sin ( th ) ; let xm = B * Math . cos ( tm ) ; let ym = B * Math . sin ( tm ) ; let dx = xh - xm ; let dy = yh - ym ; let result = Math . sqrt ( dx * dx + dy * dy ) ; console . log ( result ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const a = Number ( input . split ( ' ' ) [ 0 ] ) ; const b = Number ( input . split ( ' ' ) [ 1 ] ) ; const output = ( ) => { if ( a > 8 || b > 8 ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } output ( ) ;
function Main ( input ) { var str = input ; var tmp = str . split ( " \n " ) ; var k = tmp [ 5 ] ; tmp . pop ( ) ; var max = Math . max . apply ( null , tmp ) ; var min = Math . min . apply ( null , tmp ) ; if ( max - min > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) if ( args [ 0 ] === ' 5 ' && args [ 1 ] === ' 5 ' && args [ 2 ] === ' 7 ' ) console . log ( ' YES ' ) else if ( args [ 0 ] === ' 7 ' && args [ 1 ] === ' 5 ' && args [ 2 ] === ' 5 ' ) console . log ( ' YES ' ) else if ( args [ 0 ] === ' 5 ' && args [ 1 ] === ' 7 ' && args [ 2 ] === ' 5 ' ) console . log ( ' YES ' ) else console . log ( ' NO ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; for ( var I = 0 ; I < Arr . length ; I ++ ) { var a = Arr [ I ] . split ( " , " ) . map ( Number ) ; var arr = [ ] ; for ( var i = 0 ; i < 13 ; i ++ ) arr [ i ] = 0 ; a . forEach ( function ( v ) { arr [ v - 1 ] ++ ; } ) ; var copy = arr . slice ( ) ; arr . sort ( function ( a , b ) { return b - a ; } ) ; var ans ; if ( arr [ 0 ] >= 4 ) ans = " four card " ; else if ( arr [ 0 ] == 3 && arr [ 1 ] == 2 ) ans = " full house " ; else if ( ( copy . join ( " " ) ) . match ( / 11111|1000000001111 / ) ) ans = " straight " ; else if ( arr [ 0 ] == 3 ) ans = " three card " ; else if ( arr [ 0 ] == 2 && arr [ 1 ] == 2 ) ans = " two pair " ; else if ( arr [ 0 ] == 2 ) ans = " one pair " ; else ans = " null " ; console . log ( ans ) ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { " use strict " const A = + lines [ 0 ] . split ( " " ) [ 0 ] ; const B = + lines [ 0 ] . split ( " " ) [ 1 ] ; if ( A >= 13 ) { console . log ( B ) } else if ( A >= 6 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } ) ;
" use strict " ; var __importDefault = ( this && this . __importDefault ) || function ( mod ) { return ( mod && mod . __esModule ) ? mod : { " default " : mod } ; } ; Object . defineProperty ( exports , " __esModule " , { value : true } ) ; const readline_1 = __importDefault ( require ( " readline " ) ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; const reader = readline_1 . default . createInterface ( { input : process . stdin , output : process . stdout , } ) ; const lines = [ ] ; reader . on ( ' line ' , line => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const r = Number ( lines [ 0 ] ) ; console . log ( Math . pow ( r , 2 ) ) ; } ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var v = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { v [ i ] = Number ( lines [ i ] ) ; } var k = Number ( lines [ 5 ] ) ; for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( k < Math . abs ( v [ i ] - v [ j ] ) ) { console . log ( " :( " ) ; return ( 0 ) ; } } } console . log ( " Yay! " ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; for ( i = 0 ; i < input . length ; i ++ ) { tmp = input [ i ] . split ( " " ) if ( input [ i ] === ' 0 ' ) { break } var sum = 0 for ( j = 0 ; j < tmp . length ; j ++ ) { var x = parseInt ( tmp [ j ] ) sum += x } console . log ( sum ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { const input = s . replace ( / \n / g , ' ' ) . split ( ' ' ) ; const two5 = input . filter ( x => x === ' 5 ' ) . length === 2 ; const one7 = input . filter ( x => x === ' 7 ' ) . length === 1 ; const result = ( two5 && one7 ) ? ' YES ' : ' NO ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let main = function ( standardInput ) { let lengthList = standardInput . split ( ' ' ) ; let varticalLength = Number . parseInt ( lengthList [ 0 ] ) ; console . log ( varticalLength * varticalLength * varticalLength ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
function Main ( S ) { var a = S . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) ; console . log ( Math . max ( ... a ) - Math . min ( ... a ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = parseInt ( input [ 0 ] ) ; A = new Array ( N ) ; B = new Array ( N ) ; C = new Array ( N ) ; tmpa = input [ 1 ] . split ( " " ) ; tmpb = input [ 2 ] . split ( " " ) ; list = new Array ( ) ; var s = 0 ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { A [ i ] = parseInt ( tmpa [ i ] ) ; B [ i ] = parseInt ( tmpb [ i ] ) ; if ( A [ i ] - B [ i ] > 0 ) { list . push ( A [ i ] - B [ i ] ) ; } else if ( A [ i ] - B [ i ] != 0 ) { s += Math . min ( 0 , A [ i ] - B [ i ] ) ; ans ++ ; } } s = - s ; list . sort ( function ( a , b ) { return ( b - a ) ; } ) ; var s2 = 0 ; if ( ans != 0 ) { for ( var i = 0 ; i < list . length ; i ++ ) { s2 += list [ i ] ; if ( s2 >= s ) { ans += i + 1 ; break ; } else if ( i == list . length - 1 ) { ans = - 1 ; } } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) let cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] const nexts = ( n ) => cin . slice ( cid , cid += n ) . map ( i => parseInt ( i ) ) const T = next ( ) const array = T . split ( ' ' ) . map ( ( item ) => { if ( item === ' ? ' ) { return ' D ' } else { return item } } ) console . log ( array . join ( ' ' ) )
function Main ( input ) { var N = parseInt ( input [ 0 ] . split ( / \s / ) [ 0 ] , 10 ) ; var D = parseInt ( input [ 0 ] . split ( / \s / ) [ 1 ] , 10 ) ; var X = input . slice ( 1 ) . map ( x => { return x . split ( / \s / ) . map ( num => parseInt ( num , 10 ) ) ; } ) ; var result = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var dist = 0 ; var distSum = 0 ; for ( var d = 0 ; d < D ; d ++ ) { distSum += Math . pow ( ( X [ j ] [ d ] - X [ i ] [ d ] ) , 2 ) ; } dist = Math . sqrt ( distSum ) ; if ( Number . isInteger ( dist ) ) { result ++ ; } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n / ) ) ;
function Main ( input ) { input = input . split ( " " ) ; for ( var cnt = 0 ; cnt < input . length ; cnt ++ ) { input [ cnt ] = parseFloat ( input [ cnt ] ) ; } var degH = ( input [ 2 ] / 12.0 + input [ 3 ] / ( 12.0 * 60.0 ) - input [ 3 ] / 60.0 ) * Math . PI * 2 ; var ans = Math . pow ( input [ 0 ] , 2 ) + Math . pow ( input [ 1 ] , 2 ) - ( 2 * input [ 0 ] * input [ 1 ] ) * Math . cos ( degH ) ; var ans = Math . sqrt ( ans ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const n = Number ( input ) let ans = 0 if ( n == 1 ) { console . log ( 1 ) return } let i = 0 while ( Math . pow ( 2 , i + 1 ) <= n ) { i ++ ans = Math . pow ( 2 , i ) } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var aMax = parseInt ( input [ 0 ] , 10 ) ; var bMax = parseInt ( input [ 1 ] , 10 ) ; var cMax = parseInt ( input [ 2 ] , 10 ) ; var total = parseInt ( input [ 3 ] , 10 ) ; var A_Amount = 500 ; var B_Amount = 100 ; var C_Amount = 50 ; var matchCount = 0 ; for ( var aCount = 0 ; aCount <= aMax ; aCount ++ ) { if ( ( A_Amount * aCount ) > total ) continue ; for ( var bCount = 0 ; bCount <= bMax ; bCount ++ ) { if ( ( ( A_Amount * aCount ) + ( B_Amount * bCount ) ) > total ) continue ; for ( var cCount = 0 ; cCount <= cMax ; cCount ++ ) { var tmpTotal = ( A_Amount * aCount ) + ( B_Amount * bCount ) + ( C_Amount * cCount ) ; if ( tmpTotal === total ) { matchCount ++ } } } } console . log ( matchCount ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const n = parseInt ( args [ 0 ] , 10 ) ; const x = args [ 1 ] . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; var ans = - 1 , mn = 1e9 ; for ( var i = 1 ; i <= 100 ; i ++ ) { var tmp = 0 ; for ( var j = 0 ; j < n ; j ++ ) tmp += Math . pow ( i - x [ j ] , 2 ) ; if ( tmp < mn ) { mn = tmp ; ans = i ; } } console . log ( mn ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function Main ( inputString ) { let input = inputString . split ( " \n " ) ; let string = input [ 0 ] ; let point = parseInt ( input [ 1 ] ) ; let which = 0 ; while ( point ) { if ( string . length - 1 == which ) { point = point % 26 ; var code = ( string [ which ] . charCodeAt ( 0 ) + point ) ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } var lastLetter = String . fromCharCode ( code ) ; point = 0 ; string = string . slice ( 0 , which ) + lastLetter + string . slice ( which + 1 ) ; } else { if ( ( 27 - ( string [ which ] . charCodeAt ( 0 ) - 97 + 1 ) ) <= point && ! ( string [ which ] == " a " ) ) { point = point - ( 27 - ( string [ which ] . charCodeAt ( 0 ) - 97 + 1 ) ) ; string = string . slice ( 0 , which ) + " a " + string . slice ( which + 1 ) ; } ++ which ; } } console . log ( string ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var kotae = input * input * input ; console . log ( kotae ) ;
function main ( input ) { var arg = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n ) ) ; const a = arg [ 0 ] ; const b = arg [ 1 ] ; const c = arg [ 2 ] ; const x = arg [ 3 ] ; var result = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) { if ( i * 500 + j * 100 + k * 50 == x ) { result ++ ; } } } } console . log ( result ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const X = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; for ( let i = - 200 ; i < 200 ; i ++ ) { for ( let j = - 200 ; j < 200 ; j ++ ) { if ( Math . pow ( i , 5 ) - Math . pow ( j , 5 ) === X ) { console . log ( i + " " + j ) ; return ; } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const P = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = P [ 0 ] let count = 1 for ( let i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) )
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; input = input . split ( " \n " ) ; var x = ( + input . shift ( ) ) ; console . log ( x * x * x ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( Math . pow ( x , 3 ) ) } )
( function ( ) { ' use strict ' ; var lines = [ ] ; require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; process . stdin . on ( ' end ' , function ( ) { main ( lines ) ; } ) ; } ) ( ) ; String . prototype . replaceAt = function ( index , character ) { return this . substr ( 0 , index ) + character + this . substr ( index + character . length ) ; } function main ( lines ) { var input = lines [ 0 ] , numOps = lines [ 1 ] ; for ( var i = 0 ; i < input . length ; i ++ ) { var distToA = ( 123 - input . charCodeAt ( i ) ) % 26 ; if ( numOps >= distToA ) { input = input . replaceAt ( i , ' a ' ) ; numOps -= distToA ; } if ( numOps === 0 ) { break ; } } numOps = numOps % 26 ; input = input . replaceAt ( input . length - 1 , String . fromCharCode ( input . charCodeAt ( input . length - 1 ) + numOps ) ) ; console . log ( input ) ; }
" use strict " ; function Main ( input ) { const args = input . split ( ' ' ) . map ( m => parseInt ( m ) ) ; const A = args . shift ( ) ; const B = args . shift ( ) ; let price = B ; if ( A <= 5 ) { price = 0 ; } else if ( A <= 12 ) { price /= 2 ; } console . log ( price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; var a = parseInt ( args [ 0 ] ) var b = parseInt ( args [ 1 ] ) var c = parseInt ( args [ 2 ] ) var d = parseInt ( args [ 3 ] ) var e = parseInt ( args [ 4 ] ) var k = parseInt ( args [ 5 ] ) var distance = ( e - a ) if ( distance <= k ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( input ) { input = input . split ( ' ' ) . map ( x => Number ( x ) ) if ( input [ 0 ] <= 8 && input [ 1 ] <= 8 ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function zeroPadding ( str ) { return ( ' 000000 ' + str ) . slice ( - 6 ) } function Main ( input ) { const data = input . trim ( ) . split ( ' \n ' ) const temp = data [ 0 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) const N = temp [ 0 ] const M = temp [ 1 ] const rest = data . slice ( 1 ) . map ( s => { return s . split ( ' ' ) . map ( x => parseInt ( x ) ) } ) var ans = { } rest . forEach ( ( d , index ) => { if ( ! ans [ d [ 0 ] ] ) ans [ d [ 0 ] ] = [ ] ans [ d [ 0 ] ] . push ( { index : index , p : d [ 0 ] , t : d [ 1 ] , s : ' ' } ) } ) for ( var i in ans ) { ans [ i ] = ans [ i ] . sort ( ( a , b ) => a . t - b . t ) } var res = Array ( M ) for ( var i in ans ) { for ( var j = 0 ; j < ans [ i ] . length ; ++ j ) { var d = ans [ i ] [ j ] var str = zeroPadding ( d . p ) + zeroPadding ( ( j + 1 ) . toString ( ) ) res [ d . index ] = str } } var output = res . reduce ( ( p , c ) => p + ' \n ' + c ) console . log ( output ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " \n " ) ; tmp = tmp . map ( Number ) ; sum = 0 ; c = 99 ; for ( i = 0 ; i < tmp . length ; i ++ ) { kurai = String ( tmp [ i ] ) . substr ( - 1 , 1 ) if ( Number ( kurai ) !== 0 ) { c = Math . min ( kurai , c ) ; } sum += Math . ceil ( tmp [ i ] / 10 ) * 10 ; } if ( c !== 99 ) { sum = sum - 10 + Number ( c ) ; } console . log ( sum ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const inputList = input . split ( / \n / ) ; const oneLineList = inputList [ 0 ] . split ( / \s / ) . map ( inp => formatNum ( inp ) ) ; const N = oneLineList [ 0 ] ; const D = oneLineList [ 1 ] ; const valueList = [ ] ; for ( var i = 1 ; i <= N ; i ++ ) { valueList . push ( inputList [ i ] . split ( / \s / ) . map ( il => formatNum ( il ) ) ) ; } var listA = [ ] ; var listB = [ ] ; var count = 0 ; for ( var j = 0 ; j < valueList . length ; j ++ ) { for ( var l = j + 1 ; l < valueList . length ; l ++ ) { if ( l !== valueList . length ) { listA = valueList [ j ] ; listB = valueList [ l ] ; var calcValue = 0 ; for ( var k = 0 ; k < D ; k ++ ) { calcValue += ( listA [ k ] - listB [ k ] ) * ( listA [ k ] - listB [ k ] ) ; } var sqrtNum = Math . sqrt ( calcValue ) ; if ( Number . isInteger ( sqrtNum ) ) { count ++ } } } } console . log ( count ) ; } ; function formatNum ( str ) { return Number ( str ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] ) ; var b = parseInt ( tmp [ 1 ] ) ; var r = " " ; if ( a <= 5 ) { r = 0 ; } if ( a >= 6 && a <= 12 ) { r = b / 2 ; } if ( a >= 13 ) { r = b ; } console . log ( r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } function debug ( ) { var input = document . getElementById ( ' input ' ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var ab = input [ 0 ] . split ( " " ) ; console . log ( ( ab [ 0 ] <= 8 && ab [ 1 ] <= 8 ) ? ' Yay! ' : ' :( ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
" use strict " ; const main = arg => { let A = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; let B = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A == 1 ) A = 14 ; if ( B == 1 ) B = 14 ; if ( A == B ) { console . log ( " Draw " ) ; } else if ( A > B ) { console . log ( " Alice " ) } else { console . log ( " Bob " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var res ; if ( a >= 13 ) { res = b ; } if ( a >= 6 && a <= 12 ) { res = b / 2 ; } if ( a <= 5 ) { res = 0 ; } console . log ( res ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var array = lines [ 0 ] ; var n1 = array . indexOf ( 1 ) ; if ( n1 !== - 1 ) { var n2 = array . indexOf ( 9 ) ; if ( n2 !== - 1 ) { var n3 = array . indexOf ( 7 ) ; if ( n3 !== - 1 ) { var n4 = array . indexOf ( 4 ) ; if ( n4 !== - 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var house_num = Number ( input [ 0 ] ) ; var houses = input [ 1 ] . split ( ' ' ) ; var smallest = houses [ 0 ] ; var largest = 0 ; for ( var i = 0 ; i < houses . length ; i ++ ) { if ( houses [ i ] > largest ) { largest = houses [ i ] ; } if ( houses [ i ] < smallest ) { smallest = houses [ i ] ; } } var answer = largest - smallest ; console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b , c ] = input . split ( ' ' ) . map ( Number ) ; console . log ( a * b * c == 175 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b ] = input . split ( " " ) . map ( Number ) ; if ( a > b ) { if ( b == 1 ) { console . log ( " Bob " ) ; } else { console . log ( " Alice " ) ; } } else if ( a < b ) { if ( a == 1 ) { console . log ( " Alice " ) ; } else { console . log ( " Bob " ) ; } } else { console . log ( " Draw " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { let v = input . trim ( ) . split ( ' \n ' ) . map ( ( v ) => parseInt ( v ) ) ; if ( v [ 4 ] - v [ 0 ] > v [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { a = input . split ( " \n " ) [ 0 ] ; b = input . split ( " \n " ) [ 1 ] ; c = input . split ( " \n " ) [ 2 ] ; x = input . split ( " \n " ) [ 3 ] ; var count = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) { if ( 500 * i + 100 * j + 50 * k == x ) { count ++ ; } } } } console . log ( count ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let X = + cin . shift ( ) ; let s = 0 ; while ( true ) { for ( let a = 0 ; a <= s ; a ++ ) { let b = s - a ; let ma = - a ; let mb = - b ; if ( a ** 5 - b ** 5 == X ) { console . log ( a , b ) ; return ; } if ( a ** 5 - mb ** 5 == X ) { console . log ( a , mb ) ; return ; } if ( ma ** 5 - b ** 5 == X ) { console . log ( ma , b ) ; return ; } if ( ma ** 5 - mb ** 5 == X ) { console . log ( ma , mb ) ; return ; } } s ++ ; } } main ( ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) m = index ; } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
function myin ( ) { return require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; } function myout ( t ) { console . log ( t ) ; } function myconv ( i , no ) { switch ( no ) { case 0 : return i ; case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 3 : return i . split ( " \n " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 5 : return i . split ( " \n " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; } } function Main ( input ) { input = myconv ( input , 1 ) ; if ( input % 2 == 0 ) { myout ( input + " " + input + " " + input / 2 ) ; return ; } else { for ( var i = 1 ; i <= 3500 ; i ++ ) { for ( var j = 1 ; j <= 3500 ; j ++ ) { var a = input * i * j / ( 4 * i * j - input * ( i + j ) ) ; if ( Number . isInteger ( a ) && a >= 1 && a != Infinity ) { myout ( a + " " + i + " " + j ) ; return ; } } } } } Main ( myin ( ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) ; const a = n * n * n ; console . log ( a ) ; } ) ;
function Main ( input ) { input = input . split ( " " ) . sort ( ) . join ( " " ) ; console . log ( input == " 1479 " ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( input ) { var inputs = input . trim ( ) . split ( ' \n ' ) ; inputs = inputs [ 0 ] . split ( ' ' ) ; var A = inputs [ 0 ] - 0 ; var B = inputs [ 1 ] - 0 ; var H = inputs [ 2 ] - 0 ; var M = inputs [ 3 ] - 0 ; var minutes = 60 * H + M ; var radA = minutes / 60 * 30 ; var radB = M * 6 ; radB = radB == 0 ? 360 : radB ; if ( radA == radB ) { console . log ( Math . max ( A , B ) ) ; } else if ( radA > radB ) { var rad = ( radA - radB ) * Math . PI / 180 ; var pA = [ A , 0 ] ; var pB = [ B * Math . cos ( rad ) , B * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } else { var rad = ( radB - radA ) * Math . PI / 180 ; var pB = [ B , 0 ] ; var pA = [ A * Math . cos ( rad ) , A * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; console . log ( cube ( input [ 0 ] ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var arr = input [ 1 ] . split ( " " ) ; var flag = false ; arr . forEach ( function ( val ) { if ( val == " Y " ) flag = true ; } ) ; console . log ( flag ? " Four " : " Three " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . replace ( / \r?\n$ / , " " ) . split ( / \r?\n / ) ) ; function main ( lines ) { lines . some ( function ( line ) { if ( line == " 0 " ) return true ; console . log ( line . split ( " " ) . reduce ( function ( a , b ) { return a + + b ; } , 0 ) ) ; } ) ; }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; for ( var i = 0 ; i < Arr . length ; i ++ ) { if ( Arr [ i ] === " 0 " ) break ; var arr = ( Arr [ i ] + " " ) . split ( " " ) . map ( Number ) ; var sum = arr . reduce ( function ( a , b ) { return a + b ; } ) ; console . log ( sum ) ; }
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) a = l [ 0 ] * 1 b = l [ 1 ] * 1 console . log ( Math . ceil ( ( a + b ) / 2 ) )
function Main ( input ) { input = parseInt ( input ) ; let x = input ; let y = Math . floor ( input / 2 ) ; let arr = { } ; for ( let i = y ; i <= x ; i ++ ) { let B = yakusu ( i ) ; arr [ i ] = B ; } var keys = [ ] ; for ( var key in arr ) keys . push ( key ) ; function Compare ( a , b ) { return arr [ a ] - arr [ b ] ; } keys . sort ( Compare ) ; console . log ( parseInt ( keys [ keys . length - 1 ] ) ) ; } function yakusu ( num ) { let result = 0 ; while ( num > 0 ) { if ( num % 2 === 0 ) { result ++ ; num = num / 2 ; } else { break ; } } return result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var ans = 0 ; var map = { } ; input [ 1 ] . split ( " " ) . forEach ( v => { if ( ! map [ v ] ) ans ++ ; map [ v ] = true ; } ) ; console . log ( ans == 3 ? " Three " : " Four " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
function Main ( arg ) { var N = arg . split ( " \n " ) [ 0 ] - 0 ; var P = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var max = N ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( max >= P [ i ] ) { ans ++ ; max = P [ i ] ; } } console . log ( ans ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const input_array = input . split ( " \n " ) ; const coins_count = input_array . slice ( 0 , 3 ) ; const a = parseInt ( input_array [ 0 ] , 10 ) ; const b = parseInt ( input_array [ 1 ] , 10 ) ; const c = parseInt ( input_array [ 2 ] , 10 ) ; const desired_sum = parseInt ( input_array [ 3 ] , 10 ) ; var answer = 0 ; for ( i = 0 ; i <= a ; ++ i ) { for ( j = 0 ; j <= b ; ++ j ) { for ( k = 0 ; k <= c ; ++ k ) { if ( 500 * i + 100 * j + 50 * k == desired_sum ) { answer += 1 ; } } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return Math . pow ( x , 3 ) ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
function main ( input ) { input = input . trim ( ) . split ( " " ) ; var r = parseInt ( input [ 0 ] , 10 ) ; console . log ( r * r ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { const rectangles = arg . split ( " \n " ) [ 0 ] . split ( " " ) ; const A = rectangles [ 0 ] * rectangles [ 1 ] ; const B = rectangles [ 2 ] * rectangles [ 3 ] ; console . log ( Math . max ( A , B ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( ) { var input = getInput ( ) ; var num = parseInt ( input ) ; console . log ( num * num * num ) ; } function getInput ( ) { if ( typeof require == " undefined " ) { return document . getElementById ( ' input ' ) . value ; } return require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' ) . toString ( ) ; } if ( typeof require != " undefined " ) { main ( ) ; }
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( Math . ceil ( ( a [ 0 ] + a [ 1 ] ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( N , D , X ) => { var count = 0 for ( var i = 0 ; i < N ; i ++ ) { for ( var k = i + 1 ; k < N ; k ++ ) { var tmp = 0 for ( var j = 0 ; j < D ; j ++ ) { tmp += Math . pow ( X [ i ] [ j ] - X [ k ] [ j ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( tmp ) ) ) { count ++ } } } return count } const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . filter ( i => i !== ' ' ) const lst = input . map ( i => i . split ( " " ) . map ( x => Number ( x ) ) ) const N = lst [ 0 ] [ 0 ] const D = lst [ 0 ] [ 1 ] const X = lst . slice ( 1 , lst . length ) console . log ( main ( N , D , X ) )
function Main ( input ) { input = input . split ( " \n " ) a = Number ( input [ 0 ] ) b = Number ( input [ 1 ] ) c = Number ( input [ 2 ] ) d = Number ( input [ 3 ] ) e = Number ( input [ 4 ] ) k = Number ( input [ 5 ] ) if ( ( ( b - a ) > k ) || ( ( c - a ) > k ) || ( ( d - a ) > k ) || ( ( e - a ) > k ) || ( ( c - b ) > k ) || ( ( d - b ) > k ) || ( ( e - b ) > k ) || ( ( d - c ) > k ) || ( ( e - c ) > k ) || ( ( e - d ) > k ) ) { console . log ( " :( " ) } else { console . log ( " Yay! " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( n ) { console . log ( ( n == " 5 5 7 " || n == " 5 7 5 " || n == " 7 5 5 " ) ? " YES " : " NO " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var ans = 0 ; if ( A >= 13 ) { ans = B ; } else if ( A >= 6 ) { ans = B / 2 ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) console . log ( Math . pow ( parseInt ( x , 10 ) , 3 ) )
function main ( input ) { var A = input . split ( ' \n ' ) [ 0 ] ; var B = input . split ( ' \n ' ) [ 1 ] ; var C = input . split ( ' \n ' ) [ 2 ] ; var X = input . split ( ' \n ' ) [ 3 ] ; var ptn = 0 ; var total ; for ( var a = 0 ; a <= A ; a ++ ) { for ( var b = 0 ; b <= B ; b ++ ) { for ( var c = 0 ; c <= C ; c ++ ) { total = 500 * a + 100 * b + 50 * c ; if ( X == total ) { ptn ++ ; } } } } console . log ( ptn ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( / \n / ) . map ( Number ) const a = input [ 0 ] const b = input [ 1 ] const c = input [ 2 ] const x = input [ 3 ] let ans = 0 for ( let ai = 0 ; ai <= a ; ai ++ ) { for ( let bi = 0 ; bi <= b ; bi ++ ) { for ( let ci = 0 ; ci <= c ; ci ++ ) { const sum = ai * 500 + bi * 100 + ci * 50 if ( sum === x ) ans ++ } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var cube = function ( x ) { return x * x * x ; } ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { var num_str = line . split ( / \n / ) [ 0 ] ; if ( num_str . match ( / \d{1,3} / ) ) { var num = parseInt ( num_str , 10 ) ; if ( num > 0 ) { if ( num < 101 ) { console . log ( cube ( num ) ) ; } } } } ) ;
var main = function main ( input ) { var args = input . split ( ' ' ) var average = ( + args [ 0 ] + + args [ 1 ] ) / 2 var point = average % 1 if ( point >= 0.5 ) { average = average + 0.5 var point2 = average % 1 average = average - point2 } else { average = average - point } console . log ( average ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function main ( input ) { input = input . trim ( ) . split ( " \n " ) ; n = parseInt ( input [ 0 ] ) ; x = input [ 1 ] . split ( " " ) . map ( p => Number ( p ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var c = Math . round ( total / n ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . pow ( Math . abs ( x [ i ] - c ) , 2 ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( function ( x ) { return x . split ( " " ) } ) ; let T1 = parseInt ( input [ 0 ] [ 0 ] , 10 ) ; let T2 = parseInt ( input [ 0 ] [ 1 ] , 10 ) ; let A1 = parseInt ( input [ 1 ] [ 0 ] , 10 ) ; let A2 = parseInt ( input [ 1 ] [ 1 ] , 10 ) ; let B1 = parseInt ( input [ 2 ] [ 0 ] , 10 ) ; let B2 = parseInt ( input [ 2 ] [ 1 ] , 10 ) ; let d1 = BigInt ( A1 - B1 ) * BigInt ( T1 ) ; let d2 = BigInt ( A2 - B2 ) * BigInt ( T2 ) + d1 ; let ans = 0n ; let tmp ; if ( d2 === 0n ) ans = ' infinity ' ; else if ( d1 * d2 < 0n ) { d2 = d2 * - 1n ; tmp = ( d1 / d2 ) ; ans = ( tmp * d2 === d1 ) ? tmp * 2n : tmp * 2n + 1n ; } else ans = 0 ; console . log ( ans . toString ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp0 = input [ 0 ] . split ( " " ) ; A = Number ( tmp0 [ 0 ] ) ; B = Number ( tmp0 [ 1 ] ) ; ans = 0 ; if ( A <= 5 ) { ans = 0 ; } else if ( 6 <= A && A <= 12 ) { ans = B / 2 } else { ans = B } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) [ 0 ] * 1 console . log ( inp * 800 - ~ ~ ( inp / 15 ) * 200 )
" use strict " function main ( input ) { let nums = input . split ( ' ' ) nums = nums . map ( x => + x ) nums . sort ( ) . reverse ( ) let num = 0 ; for ( let i = 0 ; i < nums . length ; i ++ ) { let red = ( i >= 1 ) ? nums [ i - 1 ] : 0 num += Math . abs ( nums [ i ] - red ) } num -= nums [ 0 ] console . log ( num ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( arg ) { const A = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ; const B = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ; if ( A <= 8 && B <= 8 ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const input = Number ( chunk ) ; console . log ( input * input * input ) ; } ) ;
function Main ( input ) { var N = parseInt ( input [ 0 ] , 10 ) ; var P = input [ 1 ] . split ( / \s / ) . map ( p => parseInt ( p , 10 ) ) var min = P [ 0 ] ; var result = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { result ++ ; min = P [ i ] ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n / ) ) ;
' use strict ' function main ( s ) { const n = Number ( s ) ; let i = 0 ; while ( Math . pow ( 2 , i ) <= n ) { i += 1 ; } const ans = Math . pow ( 2 , i - 1 ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const numList0 = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; const N = numList0 [ 0 ] ; const D = numList0 [ 1 ] ; const xListList = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { var xList = input [ i + 1 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; xListList . push ( xList ) ; } var count = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { var xBaseList = xListList [ i ] ; for ( var j = i + 1 ; j < N ; j ++ ) { var doubleDistance = 0 ; xTargetList = xListList [ j ] ; for ( var k = 0 ; k < D ; k ++ ) { var y = xBaseList [ k ] ; var z = xTargetList [ k ] ; doubleDistance += ( y - z ) * ( y - z ) ; } if ( Number . isInteger ( Math . sqrt ( doubleDistance ) ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var ans = Number ( input [ 0 ] . split ( ' ' ) [ 0 ] ) <= 8 && Number ( input [ 0 ] . split ( ' ' ) [ 1 ] ) <= 8 ? ' Yay! ' : ' :( ' console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) [ 1 ] . split ( " " ) ; var max = 0 , min = Infinity ; for ( val in input ) { max = Math . max ( input [ val ] , max ) ; min = Math . min ( input [ val ] , min ) ; } console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const xCubic = x => x * x * x const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const n = parseInt ( inputs [ 0 ] , 10 ) console . log ( xCubic ( n ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
let [ a , b ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ;
function main ( input ) { const x = BigInt ( input [ 0 ] ) ; let power5 = [ ] ; const width = ( ( x < 100 ) ? x : 1000 ) ; for ( let i = - width ; i < width ; i ++ ) { power5 [ i + width ] = BigInt ( i * i * i * i * i ) ; } let judge = false ; for ( let i = - width ; i < width ; i ++ ) { for ( let j = - width ; j < width ; j ++ ) { if ( ( power5 [ i + width ] - power5 [ j + width ] ) === x ) { console . log ( i + " " + j ) ; judge = true ; break ; } } if ( judge ) { break ; } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
function Main ( input ) { if ( input == " " ) { input = " 2 \n 10000 JPY \n 0.10000000 BTC " ; } input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var x = parseInt ( input [ 3 ] , 10 ) ; var ans = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) { if ( i * 500 + j * 100 + k * 50 === x ) ans ++ ; } } } console . log ( ' %d ' , ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var n = Number ( lines [ 0 ] ) ; var info = lines [ 1 ] . split ( ' ' ) ; var info = info . map ( function ( str ) { return Number ( str ) } ) ; var sum = 0 ; var ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += info [ i ] ; } var ave = Math . round ( sum / n ) ; for ( i = 0 ; i < n ; i ++ ) { var sa = ( info [ i ] - ave ) * ( info [ i ] - ave ) ; ans += sa } console . log ( ans ) ; } ) ;
function Main ( input ) { input = input . trim ( ) ; if ( input > " 2019/04/30 " ) { console . log ( " TBD " ) ; } else { console . log ( " Heisei " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( input ) { let nums = input . split ( ' ' ) nums = nums . map ( x => + x ) nums . sort ( ) let num = 0 ; for ( let i = 0 ; i < nums . length ; i ++ ) { let red = ( i >= 1 ) ? nums [ i - 1 ] : 0 num += Math . abs ( nums [ i ] - red ) } num -= nums [ 0 ] console . log ( num ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) . map ( n => parseInt ( n , 10 ) ) ; var a = inputs [ 0 ] ; var b = inputs [ 1 ] ; if ( ( a + b ) % 2 === 0 ) { console . log ( ( a + b ) / 2 ) ; } else { console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " \n " ) ; var result = 0 ; for ( var fivehundred = 0 ; fivehundred <= inputs [ 0 ] ; fivehundred ++ ) { for ( var onehundred = 0 ; onehundred <= inputs [ 1 ] ; onehundred ++ ) { for ( var fifty = 0 ; fifty <= inputs [ 2 ] ; fifty ++ ) { if ( 500 * fivehundred + 100 * onehundred + 50 * fifty == inputs [ 3 ] ) result ++ ; } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( Math . ceil ( ( a [ 0 ] + a [ 1 ] ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( lines ) { const input = s ( ) ; let ans = ' NO ' ; switch ( input ) { case ' 7 5 5 ' : case ' 5 7 5 ' : case ' 5 5 7 ' : ans = ' YES ' ; } return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
console . log ( Math . pow ( parseInt ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) , 10 ) , 2 ) )
function main ( arg ) { console . log ( Math . pow ( parseInt ( arg ) , 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { var tmp = arg . split ( " \n " ) [ 0 ] tmp = tmp . split ( " " ) tmp = tmp . map ( e => Number ( e ) ) tmp . sort ( ) tmp = tmp . join ( " " ) if ( tmp === " 1479 " ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Picker ( input ) { var lines = input . split ( ' \n ' ) ; var fields = lines . reduce ( function ( all , line ) { return all . concat ( line . split ( ' ' ) ) ; } , [ ] ) ; var p = 0 ; return { int : function ( ) { return parseInt ( fields [ p ++ ] , 10 ) ; } , float : function ( ) { return parseFloat ( fields [ p ++ ] ) ; } , str : function ( ) { return fields [ p ++ ] ; } } ; } function Main ( input ) { var pick = Picker ( input ) ; var list = [ pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) ] ; var mod = list . map ( function ( e ) { return ( e % 10 ? e % 10 : 10 ) - 10 ; } ) ; var minMod = mod . sort ( function ( a , b ) { return a - b ; } ) [ 0 ] ; var up = list . map ( function ( e ) { return e % 10 ? ( e - e % 10 ) + 10 : e ; } ) ; console . log ( up . reduce ( function ( p , c ) { return p + c ; } ) + minMod ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) console . log ( Math . max ( args [ 0 ] * args [ 1 ] , args [ 2 ] * args [ 3 ] ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const A = ~ ~ arg [ 0 ] ; const B = ~ ~ arg [ 1 ] ; const C = ~ ~ arg [ 2 ] ; const X = ~ ~ arg [ 3 ] ; let answer = 0 ; for ( let i = 0 ; i <= A ; i ++ ) { for ( let j = 0 ; j <= B ; j ++ ) { for ( let k = 0 ; k <= C ; k ++ ) { if ( 500 * i + 100 * j + 50 * k === X ) { answer ++ ; } } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
<?php fscanf ( STDIN , " %d " , $ x ) ; $ a = - 118 ; $ b = - 119 ; for ( $ i = $ a ; $ i < 119 ; $ i ++ ) { for ( $ j = $ b ; $ j < 118 ; $ j ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ x ) { echo $ i . ' ' . $ j ; exit ; } } }
<?php ( int ) $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ x = array_map ( ' intval ' , str_split ( $ n ) ) ; if ( $ n % array_sum ( $ x ) === 0 ) { echo ' Yes ' . " \n " ; } else { echo ' No ' . " \n " ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ n = ( int ) $ input ; $ args = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; ; $ result = [ ] ; if ( $ n === 1 ) { echo $ args [ 0 ] ; exit ( ) ; } elseif ( $ n === 2 ) { echo $ args [ 1 ] . ' ' . $ args [ 0 ] ; exit ( ) ; } elseif ( $ n === 3 ) { echo $ args [ 2 ] . ' ' . $ args [ 0 ] . ' ' . $ args [ 1 ] ; exit ( ) ; } if ( $ n % 2 === 0 ) { for ( $ i = $ n ; $ i > 1 ; $ i -= 2 ) { $ tmp = $ i - 1 ; $ result [ ] = $ args [ $ tmp ] ; } $ result [ ] = $ args [ 0 ] ; for ( $ i = 3 ; $ i < $ n ; $ i += 2 ) { $ tmp = $ i - 1 ; $ result [ ] = $ args [ $ tmp ] ; } } else { for ( $ i = $ n ; $ i > 2 ; $ i -= 2 ) { $ tmp = $ i - 1 ; $ result [ ] = $ args [ $ tmp ] ; } $ result [ ] = $ args [ 0 ] ; for ( $ i = 2 ; $ i < $ n ; $ i += 2 ) { $ tmp = $ i - 1 ; $ result [ ] = $ args [ $ tmp ] ; } } $ str = implode ( ' ' , $ result ) ; echo $ str ;
<?php fscanf ( STDIN , ' %d%d%d%d ' , $ A , $ B , $ C , $ D ) ; echo max ( $ A * $ B , $ C * $ D ) ; ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 2 ) ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ result = 0 ; for ( $ i1 = 0 ; $ i1 <= $ a ; $ i1 ++ ) { for ( $ i2 = 0 ; $ i2 <= $ b ; $ i2 ++ ) { for ( $ i3 = 0 ; $ i3 <= $ c ; $ i3 ++ ) { if ( ( $ i1 * 500 ) + ( $ i2 * 100 ) + ( $ i3 * 50 ) == $ x ) { $ result = $ result + 1 ; } } } } echo $ result , " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ X = [ ] ; $ Y = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { fscanf ( STDIN , " %d %d " , $ p , $ y ) ; $ X [ ] = [ $ p , $ y ] ; $ Y [ $ p ] [ ] = $ y ; } foreach ( $ Y as $ key => $ arr ) { sort ( $ arr ) ; $ Y [ $ key ] = $ arr ; } for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { $ p = $ X [ $ i ] [ 0 ] ; $ y = $ X [ $ i ] [ 1 ] ; $ ty = $ Y [ $ p ] ; $ l = 0 ; $ r = count ( $ ty ) ; while ( $ r - $ l >= 1 ) { $ mid = intdiv ( $ l + $ r , 2 ) ; if ( $ ty [ $ mid ] >= $ y ) { $ r = $ mid ; } else { $ l = $ mid + 1 ; } } echo sprintf ( " %06d%06d \n " , $ p , $ r + 1 ) ; }
<?php fscanf ( STDIN , ' %d ' , $ x ) ; echo $ x * $ x * $ x ; echo PHP_EOL ;
<?php $ line = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ h = $ line [ 2 ] - $ line [ 0 ] ; $ m = $ line [ 3 ] - $ line [ 1 ] ; $ study = $ line [ 4 ] ; $ awake = $ h * 60 + $ m ; $ start = $ awake - $ study ; echo $ start ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ num = array_sum ( str_split ( $ N ) ) ; echo $ N % $ num ? ' No ' : ' Yes ' ; ?>
<?php list ( $ n ) = ints ( ) ; echo isHarshad ( $ n ) ? ' Yes ' : ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function isHarshad ( $ n ) { return $ n % array_sum ( array_map ( ' intval ' , str_split ( ( string ) $ n ) ) ) === 0 ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ fiveH = 0 ; $ fiveH <= $ a ; $ fiveH ++ ) { for ( $ hund = 0 ; $ hund <= $ b ; $ hund ++ ) { for ( $ fifty = 0 ; $ fifty <= $ c ; $ fifty ++ ) { if ( 500 * $ fiveH + 100 * $ hund + 50 * $ fifty == $ x ) { $ result ++ ; } } } } echo ( $ result ) ;
<?php function convNum ( $ i ) { if ( $ i == 1 ) { return 14 ; } else { return $ i ; } } fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ a = convNum ( $ a ) ; $ b = convNum ( $ b ) ; if ( $ a > $ b ) { print " Alice " ; } elseif ( $ a == $ b ) { print " Draw " ; } else { print " Bob " ; } ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ;
<?php fscanf ( STDIN , " %d/%d/%d " , $ yyyy , $ mm , $ dd ) ; $ num = $ yyyy * 10000 + $ mm * 100 + $ dd ; echo $ num <= 20190430 ? " Heisei " : " TBD " ;
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ n ) ; $ ans = $ n [ 0 ] . $ n [ 3 ] . $ n [ 2 ] . $ n [ 1 ] ; echo ( $ ans == 1974 ) ? ' YES ' : ' NO ' ;
<?php $ k = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ s ) > $ k ) { $ s_new = substr ( $ s , 0 , $ k ) ; $ s_new = $ s_new . " ... " ; echo ( $ s_new ) ; } else { echo ( $ s ) ; } ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a <= 12 && $ a >= 6 ) { echo $ b / 2 ; } elseif ( $ a <= 5 ) { echo 0 ; } else { echo $ b ; } echo PHP_EOL ;
<?php $ line = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( ( $ line [ 2 ] == $ line [ 3 ] ) && ( $ line [ 4 ] == $ line [ 5 ] ) ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' / ' , $ s ) ; if ( ( int ) $ array [ 0 ] < 2019 ) { echo ' Heisei ' ; } elseif ( ( int ) $ array [ 0 ] == 2019 && ( int ) $ array [ 1 ] < 5 && ( int ) $ array [ 2 ] < 31 ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php while ( true ) { $ input = trim ( fgets ( STDIN ) ) ; $ input = explode ( " " , $ input ) ; foreach ( $ input as $ value ) { $ args [ ] = $ value ; if ( count ( $ args ) >= 3 ) { break ; } } if ( count ( $ args ) >= 3 ) { break ; } } $ t1 = $ args [ 0 ] ; $ t2 = $ args [ 1 ] ; $ t3 = $ args [ 2 ] ; $ cost12 = abs ( $ t1 - $ t2 ) ; $ cost23 = abs ( $ t2 - $ t3 ) ; $ cost31 = abs ( $ t3 - $ t1 ) ; $ cost1 = 0 + $ cost12 + $ cost23 ; $ cost2 = 0 + $ cost23 + $ cost31 ; $ cost3 = 0 + $ cost31 + $ cost12 ; if ( $ cost1 < $ cost2 ) { if ( $ cost1 < $ cost3 ) { $ result = $ cost1 ; } else { $ result = $ cost3 ; } } else { if ( $ cost2 < $ cost3 ) { $ result = $ cost2 ; } else { $ result = $ cost3 ; } } out ( $ result ) ; function out ( $ var ) { echo $ var , PHP_EOL ; }
<?php $ five_hundred = trim ( fgets ( STDIN ) ) ; $ one_hundred = trim ( fgets ( STDIN ) ) ; $ fifty = trim ( fgets ( STDIN ) ) ; $ target = trim ( fgets ( STDIN ) ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ five_hundred ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ one_hundred ; $ j ++ ) { $ k = $ target - ( $ i * 500 + $ j * 100 ) ; if ( $ k >= 0 && $ k / 50 <= $ fifty ) { $ cnt ++ ; } } } echo $ cnt ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ input = preg_split ( " / / " , trim ( fgets ( STDIN ) ) ) ; for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ x [ $ i ] [ $ j ] = $ input [ $ j ] ; } } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ score = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ score += ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) * ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) ; } if ( ctype_digit ( strval ( sqrt ( $ score ) ) ) ) { $ count ++ ; } } } echo ( $ count ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ hoge = sprintf ( " %d%d%d " , $ a , $ b , $ c ) ; if ( str_replace ( " 5 " , " " , $ hoge ) == 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ S = trim ( fgets ( STDIN ) ) ; $ array = str_split ( $ S ) ; if ( ( $ array [ 2 ] === $ array [ 3 ] ) && ( $ array [ 4 ] === $ array [ 5 ] ) ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , ' %d ' , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A <= 8 && $ B <= 8 ) { echo " Yay! " ; } else { echo " :( " ; } ?>
<?php define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %s " , $ s ) ; $ arrayMoji = array ( ' dream ' , ' dreamer ' , ' erase ' , ' eraser ' ) ; $ jobs = array ( 0 ) ; while ( $ jobs ) { $ pos = array_pop ( $ jobs ) ; $ partial = substr ( $ s , $ pos ) ; foreach ( $ arrayMoji as $ moji ) { $ len = strlen ( $ moji ) ; $ partial_partial = substr ( $ partial , 0 , $ len ) ; if ( $ partial_partial == $ moji ) { $ newLoc = $ pos + $ len ; if ( $ newLoc == strlen ( $ s ) ) { exit ( " YES \n " ) ; } array_push ( $ jobs , $ pos + $ len ) ; } } } echo " NO \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo pow ( $ n , 3 ) ; ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ s = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ s ) ; $ s = explode ( " " , $ s ) ; $ count = $ s [ 0 ] ; $ n = $ s [ 1 ] ; $ ponints = array ( ) ; for ( $ i = 0 ; $ i < $ count ; $ i ++ ) { $ s = trim ( fgets ( STDIN ) ) ; $ s = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ s ) ; $ s = explode ( " " , $ s ) ; $ ponints [ ] = $ s ; } function kyori ( $ a , $ b , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += ( $ a [ $ i ] - $ b [ $ i ] ) * ( $ a [ $ i ] - $ b [ $ i ] ) ; } return sqrt ( ( int ) $ sum ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; } $ seisuu_num = 0 ; for ( $ i = 0 ; $ i < $ count ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ count ; $ j ++ ) { $ kyori = kyori ( $ ponints [ $ i ] , $ ponints [ $ j ] , $ n ) ; if ( is_decimal ( $ kyori ) ) { $ seisuu_num ++ ; } } } echo $ seisuu_num ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ X = $ sc -> nextInt ( ) ; $ fx = array_sum ( str_split ( $ X ) ) ; if ( $ X % $ fx == 0 ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ S = trim ( fgets ( STDIN ) ) ; if ( $ S [ 2 ] == $ S [ 3 ] && $ S [ 4 ] == $ S [ 5 ] ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; echo $ N * $ N ;
<?php $ k = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ ct = strlen ( $ s ) ; if ( $ ct <= $ k ) { echo $ s ; return ; } echo substr ( $ s , 0 , $ k ) . ' ... ' ; return ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ dH = ( $ h * 30 ) + ( $ m * 0.5 ) ; $ dM = $ m * 6 ; $ d = abs ( $ dH - $ dM ) ; if ( $ d > 180 ) { $ d = 360 - $ d ; } $ c2 = ( $ a ** 2 ) + ( $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ d ) ) ) ; $ c = sqrt ( $ c2 ) ; echo " { $ c } \n " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == 1 ) $ a = 100 ; if ( $ b == 1 ) $ b = 100 ; if ( $ a > $ b ) { echo " Alice " ; } elseif ( $ a < $ b ) { echo " Bob " ; } else { echo " Draw " ; }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ x [ $ i ] = intval ( trim ( fgets ( STDIN ) ) ) ; } $ k = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( $ x [ $ j ] - $ x [ $ i ] > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php fscanf ( STDIN , " %s " , $ hinaArareNum ) ; $ HinaArares = trim ( fgets ( STDIN ) ) ; $ oneHinaArare = explode ( " " , $ HinaArares ) ; $ result = array_unique ( $ oneHinaArare ) ; if ( count ( $ result ) == 3 ) { echo ' Three ' ; } else { echo ' Four ' ; }
<?php function input ( string $ func = null ) { if ( $ func === null ) { return trim ( fgets ( STDIN ) ) ; } else { return $ func ( trim ( fgets ( STDIN ) ) ) ; } } function input_array ( string $ func = null ) { if ( $ func === null ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } else { return array_map ( function ( $ v ) use ( $ func ) { return $ func ( $ v ) ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } } $ n = input ( ' intval ' ) ; $ as = input_array ( ' intval ' ) ; $ bs = input_array ( ' intval ' ) ; $ overs = [ ] ; $ count = 0 ; $ to_be_added = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ as [ $ i ] > $ bs [ $ i ] ) { $ overs [ ] = $ as [ $ i ] - $ bs [ $ i ] ; } else if ( $ as [ $ i ] < $ bs [ $ i ] ) { $ count ++ ; $ to_be_added += $ bs [ $ i ] - $ as [ $ i ] ; } } rsort ( $ overs ) ; for ( $ i = 0 , $ c = count ( $ overs ) ; $ i < $ c ; $ i ++ ) { if ( $ to_be_added <= 0 ) { break ; } $ to_be_added -= $ overs [ $ i ] ; $ count ++ ; } if ( array_sum ( $ as ) < array_sum ( $ bs ) ) { echo " -1 \n " ; } else { echo " { $ count } \n " ; }
<?php define ( ' DEBUG_FILENAME ' , ' input.txt ' ) ; if ( file_exists ( DEBUG_FILENAME ) ) { $ inputs = explode ( " \n --- \n " , file_get_contents ( DEBUG_FILENAME ) ) ; define ( ' DEBUG ' , TRUE ) ; } else { $ inputs = array ( file_get_contents ( ' php: define( ' DEBUG ' , FALSE ) ; } foreach ( $ inputs as $ i => $ input ) { if ( DEBUG ) { echo " \n ----- { $ i } ----- \n " ; $ time_start = microtime ( true ) ; } solve ( $ input ) ; if ( DEBUG ) { $ time_end = microtime ( true ) ; $ time = $ time_end - $ time_start ; echo sprintf ( " \n [%.5fms] " , $ time * 1000 ) ; } } function solve ( $ input ) { echo ( $ input * $ input * $ input ) . PHP_EOL ; }
<?php $ K = ( int ) fgets ( STDIN ) ; $ S = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ S ) <= $ K ) { echo $ S ; return ; } echo substr ( $ S , 0 , $ K ) . ' ... ' ;
<?php fscanf ( STDIN , " %d %d %d " , $ n , $ a , $ b ) ; $ v = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; rsort ( $ v ) ; $ f = $ v [ $ a - 1 ] ; $ s = $ x = 0 ; for ( $ i = 0 ; $ i < $ a ; $ i ++ ) { $ s += $ v [ $ i ] ; if ( $ v [ $ i ] == $ f ) $ x ++ ; } echo $ s / $ a , " \n " ; $ c = array_count_values ( $ v ) ; $ ans = 0 ; for ( $ i = $ a - 1 ; $ i <= $ b - 1 ; $ i ++ ) { if ( $ v [ $ i ] != $ f ) break ; $ ans += ncr ( $ c [ $ f ] , $ i - $ a + $ x + 1 ) ; if ( $ f != $ v [ 0 ] ) break ; } echo $ ans ; function ncr ( $ n , $ r ) { if ( $ r == 0 ) { return 1 ; } return ncr ( $ n , $ r - 1 ) * ( $ n - $ r + 1 ) / $ r ; }
<?php while ( TRUE ) { $ c = fscanf ( STDIN , ' %d,%d,%d,%d,%d ' ) ; if ( feof ( STDIN ) ) { break ; } sort ( $ c ) ; $ hash = array ( ) ; $ max = 0 ; foreach ( $ c as $ v ) { if ( ! isset ( $ hash [ $ v ] ) ) { $ hash [ $ v ] = 0 ; } $ hash [ $ v ] ++ ; $ max = $ hash [ $ v ] > $ max ? $ hash [ $ v ] : $ max ; } arsort ( $ hash ) ; $ combo = ' null ' ; if ( $ max >= 2 ) { $ combo = ' one pair ' ; } if ( $ max >= 2 && count ( $ hash ) <= 3 ) { $ combo = ' two pair ' ; } if ( $ max >= 3 ) { $ combo = ' three card ' ; } if ( count ( $ hash ) === 5 && isStraight ( $ c ) ) { $ combo = ' straight ' ; } if ( $ max >= 3 && count ( $ hash ) <= 2 ) { $ combo = ' full house ' ; } if ( $ max >= 4 ) { $ combo = ' four card ' ; } echo $ combo . PHP_EOL ; } function isStraight ( $ cards ) { if ( max ( $ cards ) - min ( $ cards ) === 4 ) { return true ; } if ( $ cards [ 0 ] === 1 && $ cards [ 1 ] === 10 && $ cards [ 4 ] === 13 ) { return true ; } return false ; }
<?php $ in = fgets ( STDIN ) ; print ( $ in * $ in * $ in ) ; print ( " \n " ) ;
<?php $ data = fgets ( STDIN ) ; if ( strpos ( $ data , ' 5 ' ) === false || strpos ( $ data , ' 7 ' ) === false ) { echo " NO " ; return ; } $ data = count_chars ( $ data , 1 ) ; if ( $ data [ ' 53 ' ] == 2 && $ data [ ' 55 ' ] == 1 ) echo " YES " ; else echo " NO " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ alice = [ ' alice ' => $ a ] ; $ bob = [ ' bob ' => $ b ] ; if ( $ alice [ ' alice ' ] === $ bob [ ' bob ' ] ) { echo ' Draw ' ; } elseif ( $ bob [ ' bob ' ] == 1 ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] == 1 ) { echo ' Alice ' ; } elseif ( $ alice [ ' alice ' ] < $ bob [ ' bob ' ] ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] > $ bob [ ' bob ' ] ) { echo ' Alice ' ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo pow ( $ stdin , 3 ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ minx = $ b * sin ( $ m / 60 * 2 * pi ( ) ) ; $ miny = $ b * cos ( $ m / 60 * 2 * pi ( ) ) ; $ hourx = $ a * sin ( ( $ h + $ m / 60 ) / 12 * 2 * pi ( ) ) ; $ houry = $ a * cos ( ( $ h + $ m / 60 ) / 12 * 2 * pi ( ) ) ; echo sqrt ( pow ( $ houry - $ miny , 2 ) + pow ( $ hourx - $ minx , 2 ) ) ;
<?php $ n = fscanf ( STDIN , str_repeat ( " %d " , 3 ) ) ; $ cnt5 = 0 ; $ cnt7 = 0 ; foreach ( $ n as $ k => $ v ) { if ( $ v === 5 ) { $ cnt5 ++ ; } else { $ cnt7 ++ ; } } if ( $ cnt5 === 2 && $ cnt7 === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ k = str_split ( $ n ) ; if ( $ k [ 2 ] == $ k [ 3 ] && $ k [ 4 ] == $ k [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { $ rest = $ S - $ i ; if ( 0 <= $ rest && $ rest <= $ K + $ K ) { $ ans += min ( $ rest , $ K + $ K - $ rest ) + 1 ; } } echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , ' %s ' , $ a ) ; if ( strcmp ( $ a [ 2 ] , $ a [ 3 ] ) == 0 && strcmp ( $ a [ 4 ] , $ a [ 5 ] ) == 0 ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; } ?>
<?php fscanf ( STDIN , " %d " , $ r ) ; echo ( $ r ** 2 ) . " \n " ;
<?php $ sum = 0 ; $ min = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { list ( $ t ) = fscanf ( STDIN , ' %d ' ) ; if ( $ t % 10 === 0 ) $ sum += $ t ; else if ( substr ( $ t , - 1 ) < $ min ) { $ sum += ceil ( $ t / 10 ) * 10 ; $ min = substr ( $ t , - 1 ) ; } else $ sum += ceil ( $ t / 10 ) * 10 ; } $ sum -= ( 10 - $ min ) ; echo $ sum ;
<?php class cal { private $ integer ; public function __construct ( $ integer ) { $ this -> integer = $ integer ; } public function check ( ) { $ integer = $ this -> integer ; $ total = $ this -> _check ( $ integer , 0 ) ; return ( $ integer % $ total ) === 0 ; } private function _check ( $ integer , $ total ) { $ ceil = $ this -> _getCeil ( $ integer ) ; $ total = $ total + $ ceil ; $ quotient = $ this -> _getQuotient ( $ integer ) ; if ( $ quotient == 0 ) { return $ total ; } return $ this -> _check ( $ quotient , $ total ) ; } private function _getCeil ( $ integer ) { return $ integer % 10 ; } private function _getQuotient ( $ integer ) { return floor ( $ integer / 10 ) ; } } fscanf ( STDIN , " %d " , $ integer ) ; $ cal = new cal ( $ integer ) ; $ bool = $ cal -> check ( ) ; echo $ bool ? ' Yes ' : ' No ' ; ?>
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ X = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ min = min ( $ X ) ; $ max = max ( $ X ) ; $ ans = PHP_INT_MAX ; for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) { $ diff = array_sum ( array_map ( function ( $ t ) use ( $ i ) { return ( $ t - $ i ) * ( $ t - $ i ) ; } , $ X ) ) ; $ ans = min ( $ ans , $ diff ) ; } echo $ ans ;
<?php fscanf ( STDIN , " %d " , $ K ) ; $ S = rtrim ( fgets ( STDIN ) ) ; $ numOfSentense = strlen ( $ S ) ; if ( $ numOfSentense <= $ K ) { echo $ S ; } else { $ answer = substr ( $ S , 0 , $ K ) ; echo $ answer . " ... " ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b ; } elseif ( $ a < 6 ) { echo 0 ; } else { echo $ b / 2 ; }
<?php fscanf ( STDIN , " %d %d " , $ b , $ c ) ; if ( $ b >= 13 ) { echo $ c ; } elseif ( $ b >= 6 && $ b <= 12 ) { echo $ c / 2 ; } elseif ( $ b <= 5 ) { echo 0 ; } ?>
<?php declare ( strict_types = 1 ) ; fscanf ( STDIN , " %i %i " , $ a , $ b ) ; $ eval = function ( $ x ) { return ( $ x + 11 ) % 13 ; } ; $ a = $ eval ( $ a ) ; $ b = $ eval ( $ b ) ; if ( $ a > $ b ) { echo " Alice " . PHP_EOL ; } else if ( $ a < $ b ) { echo " Bob " . PHP_EOL ; } else { echo " Draw " . PHP_EOL ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ k >= ( $ e - $ a ) ) { echo " Yay! " ; } else { echo " :( " ; }
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ in = trim ( fgets ( STDIN ) ) ; echo str_replace ( " ? " , " D " , $ in ) ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ sum = array_sum ( $ x ) ; $ p = round ( $ sum / $ n ) ; $ ans = 0 ; foreach ( $ x as $ v ) { $ ans += ( $ v - $ p ) ** 2 ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ pref_max , $ city_max ) ; for ( $ i = 0 ; $ i < $ city_max ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ pref , $ city ) ; $ dispList [ ] = array ( " pref " => $ pref , " city " => $ city ) ; $ list [ $ pref ] [ $ i ] = $ city ; } foreach ( $ list as $ pref => $ cities ) { sort ( $ cities ) ; $ num = 1 ; foreach ( $ cities as $ city ) { $ idList [ $ pref ] [ $ city ] = $ num ; $ num ++ ; } } foreach ( $ dispList as $ disp ) { $ pref_id = sprintf ( " %06d " , $ disp [ ' pref ' ] ) ; $ city_id = sprintf ( " %06d " , $ idList [ $ disp [ ' pref ' ] ] [ $ disp [ ' city ' ] ] ) ; echo $ pref_id . $ city_id . " \n " ; }
<?php $ T = trim ( fgets ( STDIN ) ) ; $ len = strlen ( $ T ) ; $ S = " " ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ T [ $ i ] == ' ? ' ) { $ S [ $ i ] = ' D ' ; } else { $ S [ $ i ] = $ T [ $ i ] ; } } printf ( " %s \n " , $ S ) ;
<?php main ( ) ; function main ( ) { $ sumTime = 0 ; $ minFirstDigitValue = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ minFirstDigitValue = compareFirstDigit ( $ minFirstDigitValue , $ input ) ; $ sumTime += roundUpFirstDigit ( $ input ) ; } $ sumTime -= 10 - $ minFirstDigitValue ; printf ( $ sumTime ) ; } function roundUpFirstDigit ( $ value ) { return intval ( ceil ( $ value * 0.1 ) * 10 ) ; } function compareFirstDigit ( $ minFirstDigitValue , $ value ) { $ firstDigit = $ value % 10 ; if ( $ firstDigit < $ minFirstDigitValue && $ firstDigit > 0 ) { $ minFirstDigitValue = $ firstDigit ; } return $ minFirstDigitValue ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ numbers = array_sum ( str_split ( $ N ) ) ; if ( $ N % $ numbers === 0 ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ X = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ mx = max ( $ X ) ; $ mi = min ( $ X ) ; $ res = 10 ** 9 ; for ( $ i = $ mi ; $ i <= $ mx ; $ i ++ ) { $ sum = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ sum += ( $ X [ $ j ] - $ i ) ** 2 ; } $ res = min ( $ res , $ sum ) ; } printf ( " %d \n " , $ res ) ;
<?php $ s = fgets ( STDIN ) ; if ( $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ person = trim ( fgets ( STDIN ) ) ; $ arr_place = explode ( " " , fgets ( STDIN ) ) ; $ sum = 0 ; foreach ( $ arr_place as $ place ) { $ sum += intval ( $ place ) ; } $ average = round ( $ sum / $ person ) ; $ power = 0 ; foreach ( $ arr_place as $ place ) { $ power += pow ( ( $ place - $ average ) , 2 ) ; } echo $ power ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; print ( $ x * $ x * $ x . " \n " ) ;
<?php $ sc = new Scanner ( ) ; $ n = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ list = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p = $ sc -> nextInt ( ) ; $ y = $ sc -> nextInt ( ) ; $ list [ $ p ] [ $ y ] = $ i + 1 ; } $ ans_list = [ ] ; foreach ( $ list as $ k => $ v ) { ksort ( $ v ) ; $ first_id = str_pad ( $ k , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ i = 1 ; foreach ( $ v as $ a ) { $ last_id = str_pad ( $ i ++ , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ ans_list [ $ a ] = $ first_id . $ last_id ; } } ksort ( $ ans_list ) ; echo implode ( PHP_EOL , $ ans_list ) . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php $ n = intval ( fgets ( STDIN ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; echo max ( $ a ) - min ( $ a ) , " \n " ;
<?php $ r = trim ( fgets ( STDIN ) ) ; echo $ r ** 2 ;
<?php fscanf ( STDIN , " %d " , $ a ) ; $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; $ j_max = 10 ** 6 ; foreach ( $ input as $ n ) { if ( $ j_max >= $ n ) { $ j_max = $ n ; $ ans ++ ; } } echo $ ans ;
<?php $ x = fgets ( STDIN ) ; print ( $ x * $ x * $ x ) ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ max1 = 0 ; $ max2 = 0 ; $ count = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a [ $ i ] ) ; if ( $ a [ $ i ] == $ max1 ) { $ count ++ ; } elseif ( $ a [ $ i ] > $ max1 ) { $ max2 = $ max1 ; $ max1 = $ a [ $ i ] ; $ count = 1 ; } elseif ( $ a [ $ i ] > $ max2 ) { $ max2 = $ a [ $ i ] ; } } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( $ a [ $ i ] == $ max1 ) { if ( $ count == 1 ) { echo ( $ max2 . " \n " ) ; } else { echo ( $ max1 . " \n " ) ; } } else { echo ( $ max1 . " \n " ) ; } }
<?php $ baseDate = 20190430 ; $ date = fgets ( STDIN ) ; $ date = str_replace ( " / " , " " , $ date ) ; if ( $ date <= $ baseDate ) { echo " Heisei " ; } else { echo " TBD " ; }
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a >= 9 || $ b >= 9 ) { echo ' :( ' . PHP_EOL ; } else { echo ' Yay! ' . PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ list [ $ i ] = explode ( " " , $ input ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ sum += ( $ list [ $ i ] [ $ k ] - $ list [ $ j ] [ $ k ] ) ** 2 ; } if ( floor ( sqrt ( $ sum ) ) == sqrt ( $ sum ) ) $ cnt ++ ; } } echo $ cnt ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ A = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { fscanf ( STDIN , " %d " , $ a ) ; $ A [ ] = $ a ; } $ tmp = $ A ; sort ( $ tmp ) ; $ max1 = $ tmp [ $ n - 1 ] ; $ max2 = $ tmp [ $ n - 2 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { echo $ A [ $ i ] === $ max1 ? $ max2 : $ max1 , PHP_EOL ; }
<?php $ k = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ len = strlen ( $ s ) ; echo $ len <= $ k ? $ s : substr ( $ s , 0 , $ k ) . " ... " ; echo PHP_EOL ;
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== false ) { if ( $ line == 0 ) { break ; } $ bank_count = $ line ; $ year = trim ( fgets ( STDIN ) ) ; $ result_ar = [ 0 , 0 ] ; for ( $ i = 0 ; $ i < $ bank_count ; $ i ++ ) { $ line_in = trim ( fgets ( STDIN ) ) ; list ( $ b , $ r , $ t ) = explode ( ' ' , $ line_in ) ; if ( $ t == 1 ) { $ result_tmp = 10000 * ( 1 + $ year * $ r / 100 ) ; } else { $ result_tmp = 10000 * ( ( 1 + $ r / 100 ) ** $ year ) ; } if ( $ result_ar [ 1 ] < $ result_tmp ) { $ result_ar = [ $ b , $ result_tmp ] ; } } echo ( $ result_ar [ 0 ] . " \n " ) ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ A , $ B , $ H , $ M ) ; $ minutes = $ H * 60 + $ M ; $ A_degree = ( pi ( ) * $ minutes / 360 ) ; $ B_degree = ( pi ( ) * $ minutes / 30 ) ; $ c_degree = $ B_degree - $ A_degree ; $ C = sqrt ( $ A * $ A + $ B * $ B - 2 * $ A * $ B * cos ( $ c_degree ) ) ; echo $ C , " \n " ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ h , $ m ) ; $ y = $ m / 60 ; $ x = ( $ h + $ y ) / 12 ; $ rad = deg2rad ( ( $ x - $ y ) * 360 ) ; $ ans = sqrt ( $ a ** 2 + $ b ** 2 - 2 * $ a * $ b * cos ( $ rad ) ) ; echo $ ans ;
<?php $ N = fgets ( STDIN ) ; $ line = fgets ( STDIN ) ; $ X = explode ( " " , $ line ) ; $ syu = round ( array_sum ( $ X ) / $ N ) ; $ tai = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ tai += ( $ X [ $ i ] - $ syu ) * ( $ X [ $ i ] - $ syu ) ; } echo $ tai . " \n " ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ w ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d%d " , $ W [ ] , $ V [ ] ) ; } $ offset = $ W [ 0 ] ; array_unshift ( $ V , null ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ W [ $ i ] -= $ offset ; } array_unshift ( $ W , null ) ; $ dp [ 0 ] [ 0 ] = array_fill ( 0 , 301 , 0 ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ dp [ $ i ] = $ dp [ $ i - 1 ] ; $ dp [ $ i ] [ $ i ] = $ dp [ $ i ] [ $ i - 1 ] ; for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) { for ( $ k = 0 ; $ k <= 3 * $ n ; $ k ++ ) { if ( $ k - $ W [ $ i ] >= 0 ) $ dp [ $ i ] [ $ j ] [ $ k ] = max ( $ dp [ $ i ] [ $ j ] [ $ k ] , $ dp [ $ i - 1 ] [ $ j - 1 ] [ $ k - $ W [ $ i ] ] + $ V [ $ i ] ) ; } } } $ max = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { if ( $ w - $ i * $ offset >= 0 ) { $ max = max ( $ max , $ dp [ $ n ] [ $ i ] [ min ( $ w - $ i * $ offset , 3 * $ n ) ] ) ; } } echo $ max ;
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ stdin = file_get_contents ( ' php: print($stdin*$stdin*$stdin); ?>
<?php fscanf ( STDIN , ' %d %d ' , $ K , $ S ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ K + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ K + 1 ; $ j ++ ) { $ z = $ S - $ i - $ j ; if ( 0 <= $ z && $ z <= $ K ) $ count ++ ; } } echo $ count ;
<?php $ n = trim ( fgets ( STDIN ) ) * 2 ; $ h = floor ( $ n / 60 ) ; $ m = $ n % 60 ; echo $ h . " " . $ m . PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ factor = $ a * $ b ; $ factor2 = $ c * $ d ; if ( $ factor >= $ factor2 ) { print ( " $ factor \n " ) ; } else { print ( " $ factor2 \n " ) ; } ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; $ search = " %d " ; for ( $ i = 1 ; $ i < $ a ; $ i ++ ) { $ search .= " %d " ; } $ list = fscanf ( STDIN , $ search ) ; $ num = 1 ; $ limit = 0 ; foreach ( $ list as $ key => $ val ) { if ( $ key == 0 ) { $ limit = $ val ; continue ; } if ( $ limit > $ val ) { $ num += 1 ; $ limit = $ val ; } } echo $ num ;
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; if ( $ a >= 13 ) { $ result = $ b ; } else if ( $ a >= 6 || 12 <= $ a ) { $ result = $ b / 2 ; } else { $ result = 0 ; } echo $ result ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a <= 5 ) { echo 0 ; } else if ( $ a <= 12 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php $ s = explode ( ' / ' , trim ( fgets ( STDIN ) ) ) ; if ( $ s [ 0 ] <= 2018 ) { echo " Heisei " ; } else if ( $ s [ 0 ] == 2019 && $ s [ 1 ] <= 4 ) { echo " Heisei " ; } else { echo " TBD " ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo ( $ input ** 3 ) . PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ X ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k === $ X ) { $ count ++ ; } } } } echo $ count ; echo PHP_EOL ;
<?php list ( $ N , $ K ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ N == 1 ) { echo $ K . PHP_EOL ; } else { echo pow ( $ K - 1 , $ N - 1 ) * $ K . PHP_EOL ; } ?>
<?php $ sc = new Scanner ( ) ; $ coin_500 = $ sc -> nextInt ( ) ; $ coin_100 = $ sc -> nextInt ( ) ; $ coin_50 = $ sc -> nextInt ( ) ; $ total = $ sc -> nextInt ( ) ; $ case = 0 ; $ coin_total = 0 ; for ( $ i = 0 ; $ coin_500 >= $ i ; $ i ++ ) { for ( $ j = 0 ; $ coin_100 >= $ j ; $ j ++ ) { for ( $ k = 0 ; $ coin_50 >= $ k ; $ k ++ ) { $ coin_total = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ coin_total === $ total ) { $ case ++ ; } } } } out :: println ( $ case ) ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } }
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ P , $ Y ) ; $ X = sprintf ( " Z%06d%010d " , $ P , $ Y ) ; $ arr [ ] = $ X ; } asort ( $ arr ) ; $ prev = ' Z000000000000 ' ; $ cnt = 0 ; $ ans = [ ] ; foreach ( $ arr as $ k => $ v ) { $ p1 = substr ( $ v , 1 , 6 ) ; $ prev_p1 = substr ( $ prev , 1 , 6 ) ; if ( $ p1 !== $ prev_p1 ) { $ cnt = 1 ; } else { $ cnt ++ ; } $ ans [ $ k ] = sprintf ( " %06d%06d " , $ p1 , $ cnt ) ; $ prev = $ v ; } ksort ( $ ans ) ; echo implode ( PHP_EOL , $ ans ) ;
<?php function getNext ( ) { return trim ( isset ( $ GLOBALS [ ' _input ' ] ) ? array_shift ( $ GLOBALS [ ' _input ' ] ) : fgets ( STDIN ) ) ; } $ nCoinA = ( int ) getNext ( ) ; $ nCoinB = ( int ) getNext ( ) ; $ nCoinC = ( int ) getNext ( ) ; $ amount = ( ( int ) getNext ( ) ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ nCoinA ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ nCoinB ; $ b ++ ) { $ temp = $ a * 500 + $ b * 100 ; if ( $ temp <= $ amount && ( ( $ amount - $ temp ) / 50 ) <= $ nCoinC ) { ++ $ count ; } } } printf ( " %d \n " , $ count ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ checkList = array ( 7 , 5 , 5 ) ; $ numList = array ( $ a , $ b , $ c ) ; rsort ( $ numList ) ; $ result = " YES " ; foreach ( $ checkList as $ check ) { $ tmp = array_shift ( $ numList ) ; if ( $ check != $ tmp ) { $ result = " NO " ; break ; } } echo $ result ;
<?php fscanf ( STDIN , ' %d ' , $ cnt ) ; $ people = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ limit = max ( $ people ) ; $ ans = 1000000 ; for ( $ i = 1 ; $ i <= $ limit ; $ i ++ ) { $ tmp = 0 ; foreach ( $ people as $ key => $ person ) { $ tmp += ( ( $ person - $ i ) ** 2 ) ; } $ ans = min ( $ ans , $ tmp ) ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ cities = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ prefecture , $ year ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ cities [ $ prefecture ] [ $ year ] = $ i ; } $ ans = [ ] ; foreach ( $ cities as $ prefecture => $ value ) { ksort ( $ value ) ; $ city = array_values ( $ value ) ; $ id = 1 ; foreach ( $ value as $ y => $ count ) { $ ans [ $ count ] [ ' prefecture ' ] = $ prefecture ; $ ans [ $ count ] [ ' id ' ] = $ id ; $ id ++ ; } } ksort ( $ ans ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { echo str_pad ( $ ans [ $ i ] [ ' prefecture ' ] , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( $ ans [ $ i ] [ ' id ' ] , 6 , " 0 " , STR_PAD_LEFT ) . " \n " ; }
<?php list ( $ n ) = ints ( ) ; $ a = ints ( ) ; echo max ( $ a ) - min ( $ a ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php list ( $ s ) = strs ( ) ; list ( $ k ) = ints ( ) ; for ( $ i = 0 ; $ i < 26 ; ++ $ i ) $ a2n [ chr ( 97 + $ i ) ] = $ i ; $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ x = $ a2n [ $ s [ $ i ] ] ; if ( $ x === 0 ) continue ; if ( $ k >= 26 - $ x ) { $ s [ $ i ] = ' a ' ; $ k -= 26 - $ x ; } } if ( $ k > 0 ) $ s [ $ n - 1 ] = chr ( 97 + ( $ a2n [ $ s [ $ n - 1 ] ] + $ k ) % 26 ) ; echo $ s . PHP_EOL ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php $ a = fgets ( STDIN ) ; $ aaa = $ a * $ a * $ a ; echo $ aaa ; ?>
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? ' YES ' : ' NO ' , " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ floor = floor ( $ n / 15 ) ; $ y = 200 * $ floor ; $ x = 800 * $ n ; echo $ x - $ y ;
<?php $ input = array_map ( ' intval ' , explode ( ' ' , fgets ( STDIN ) ) ) ; $ a = $ input [ 0 ] ; $ b = $ input [ 1 ] ; $ c = $ input [ 2 ] ; $ d = $ input [ 3 ] ; if ( ( $ a * $ b ) >= ( $ c * $ d ) ) { print $ a * $ b ; } else { print $ c * $ d ; }
<?php $ input = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = $ input [ 0 ] ; $ b = $ input [ 1 ] ; $ h = $ input [ 2 ] ; $ m = $ input [ 3 ] ; $ long = 6 * $ m ; $ short = 30 * $ h + $ m / 2 ; $ alpha = 0 ; if ( $ long > $ short ) { $ alpha = $ long - $ short ; } else { $ alpha = $ short - $ long ; } if ( $ alpha > 180 ) { $ alpha = 360 - $ alpha ; } $ powc = pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( deg2rad ( $ alpha ) ) ; $ c = sqrt ( $ powc ) ; echo $ c ; ?>
<?php $ menu = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ input ) ; $ key = ( $ input % 10 == 0 ) ? 10 : ( $ input % 10 ) ; $ menu [ ] = [ ' key ' => $ key , ' value ' => $ input , ] ; } usort ( $ menu , function ( $ a , $ b ) { return $ a [ ' key ' ] - $ b [ ' key ' ] ; } ) ; $ t = 0 ; foreach ( array_slice ( $ menu , 1 , 4 ) as $ m ) { $ t = $ t + ( ( int ) ( ( $ m [ ' value ' ] + 9 ) / 10 ) ) * 10 ; } $ t = $ t + $ menu [ 0 ] [ ' value ' ] ; echo $ t . " \n " ;
<?php $ str_arr = str_split ( fgets ( STDIN ) ) ; if ( $ str_arr [ 2 ] == $ str_arr [ 3 ] && $ str_arr [ 4 ] == $ str_arr [ 5 ] ) print ( " Yes \n " ) ; else print ( " No \n " ) ; ?>
<?php $ array = explode ( " " , fgets ( STDIN ) ) ; $ count5 = 0 ; $ count7 = 0 ; foreach ( $ array as $ num ) { switch ( $ num ) { case 5 : $ count5 ++ ; break ; case 7 : $ count7 ++ ; break ; } } if ( $ count5 == 2 && $ count7 == 1 ) { echo ( " YES \n " ) ; } else { echo ( " NO \n " ) ; }
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ line [ ] = $ stdin ; } $ num = 0 ; for ( $ a = 0 ; $ a <= $ line [ 0 ] ; $ a ++ ) { $ tmp1 = $ a * 500 ; for ( $ b = 0 ; $ b <= $ line [ 1 ] ; $ b ++ ) { $ tmp2 = $ b * 100 ; for ( $ c = 0 ; $ c <= $ line [ 2 ] ; $ c ++ ) { $ tmp3 = $ c * 50 ; $ sum = $ tmp1 + $ tmp2 + $ tmp3 ; if ( $ sum == $ line [ 3 ] ) $ num ++ ; } } } echo $ num ; ?>
<?php $ max = 150 ; fscanf ( STDIN , " %d " , $ in_n ) ; for ( $ i = 0 ; $ i < $ max ; $ i ++ ) { $ gojo [ $ i ] = $ i * $ i * $ i * $ i * $ i ; } $ flag = false ; for ( $ i = 0 ; $ i < $ max ; $ i ++ ) { for ( $ j = 0 ; $ j < $ max ; $ j ++ ) { if ( ( $ gojo [ $ i ] - $ gojo [ $ j ] ) == $ in_n ) { print " $ i $ j " ; $ flag = true ; break ; } elseif ( ( $ gojo [ $ i ] + $ gojo [ $ j ] ) == $ in_n ) { print " $ i - $ j " ; $ flag = true ; break ; } elseif ( ( - $ gojo [ $ i ] + $ gojo [ $ j ] ) == $ in_n ) { print " - $ i - $ j " ; $ flag = true ; break ; } } if ( $ flag == true ) { break ; } }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ tmp ) ; $ array [ ] = $ tmp ; } fscanf ( STDIN , " %d " , $ K ) ; echo max ( $ array ) - min ( $ array ) > $ K ? " :( " : " Yay! " ;
<?php while ( $ line = trim ( fgets ( STDIN ) ) ) { list ( $ no , $ w , $ h ) = explode ( ' , ' , $ line ) ; if ( 25 <= ( $ w / ( $ h * $ h ) ) ) { echo $ no . " \n " ; } }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = [ ] ; $ max = - 1 ; $ second_max = - 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a_ ) ; $ a [ ] = $ a_ ; # ããã¯ã¹å¤ã¨æ¬¡ã«å¤§ããªå¤ãä¿å­ãã¦ãã if ($a_ > $max) { $second_max = $max; $max = $a_; } else if ($a_ > $second_max) { $second_max = $a_; } } # ããã¯ã¹å¤ã¨åããªãæ¬¡ã«å¤§ããªå¤ãåºå # ããã§ãªããªãããã¯ã¹å¤ for ($i=0; $i<$n; $i++) { if ($a[$i] == $max) echo $second_max . "\n"; else echo $max . "\n"; } ?>
<?php $ t = trim ( fgets ( STDIN ) ) ; print $ t * $ t * $ t . " \n " ;
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ s [ 0 ] <= 5 ) { echo 0 ; } else if ( $ s [ 0 ] >= 6 && $ s [ 0 ] <= 12 ) { echo $ s [ 1 ] / 2 ; } else { echo $ s [ 1 ] ; } ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ n = fgets ( STDIN ) ; echo pow ( $ n , 3 ) . " \n " ;
<?php fscanf ( STDIN , ' %d %d %d %d %d ' , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; echo ( $ h2 * 60 + $ m2 ) - $ k - ( $ h1 * 60 + $ m1 ) ;
<?php $ K = trim ( fgets ( STDIN ) ) ; $ S = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ S ) <= $ K ) { print ( $ S ) ; } else { $ a = substr ( $ S , 0 , $ K ) ; print ( $ a . " ... " ) ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function be_able_to_reach ( $ from , $ to ) { $ time = $ to [ 0 ] - $ from [ 0 ] ; $ distance = abs ( $ to [ 1 ] - $ from [ 1 ] ) + abs ( $ to [ 2 ] - $ from [ 2 ] ) ; #var_dump($time,$distance); if($distance > $time) return false; if($distance % 2 == 0 && $time % 2 == 0) return true; if($distance % 2 == 1 && $time % 2 == 1) return true; return false; } $scan = new Scanner(); $A = $scan->nextInt(); $B = $scan->nextInt(); $cost = 0; if($A >= 13) $cost = $B; elseif($A >= 6) $cost = $B/2; else $cost = 0; print($cost);
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ d = $ c * ( $ n - $ c ) % $ mod ; $ d *= ( 1 << $ i ) % $ mod ; $ sum += $ d % $ mod ; $ sum %= $ mod ; } echo $ sum ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + 50 * $ k == $ x ) $ ans ++ ; } } } echo $ ans , " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a1 , $ a2 , $ a3 ) ; $ max = max ( $ a1 , $ a2 , $ a3 ) ; $ min = min ( $ a1 , $ a2 , $ a3 ) ; echo $ max - $ min ;
<?php fscanf ( STDIN , ' %d %d ' , $ A , $ B ) ; if ( $ A <= 5 ) { echo 0 ; } elseif ( $ A <= 12 ) { echo $ B / 2 ; } else { echo $ B ; }
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ x = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ x_max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x_max = max ( $ x [ $ i ] , $ x_max ) ; } $ hp_min = ( 100 ** 2 ) * 100 ; for ( $ p = 1 ; $ p <= $ x_max ; $ p ++ ) { $ hp = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ hp += ( $ x [ $ i ] - $ p ) ** 2 ; } $ hp_min = min ( $ hp , $ hp_min ) ; } echo $ hp_min . PHP_EOL ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ c [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } $ A = array_sum ( $ a ) ; $ B = array_sum ( $ b ) ; $ k = 0 ; foreach ( $ c as $ value ) { if ( $ value < 0 ) { $ k = 1 ; } } if ( $ A < $ B ) { echo ' -1 ' ; exit ; } elseif ( $ k == 0 ) { echo ' 0 ' ; exit ; } sort ( $ c ) ; $ point = 0 ; $ ans = 0 ; $ j = 0 ; while ( true ) { if ( $ c [ $ j ] < 0 ) { $ ans ++ ; $ point += $ c [ $ j ] ; $ j ++ ; } else { break ; } } rsort ( $ c ) ; $ k = 0 ; while ( true ) { $ point += $ c [ $ k ] ; $ ans ++ ; if ( $ point > 0 ) { echo $ ans ; exit ; } $ k ++ ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; $ five = 0 ; $ seven = 0 ; for ( $ tmp = 0 ; $ tmp < 3 ; $ tmp ++ ) { if ( $ array [ $ tmp ] == 5 ) { $ five += 1 ; } if ( $ array [ $ tmp ] == 7 ) { $ seven += 1 ; } } if ( $ five == 2 and $ seven == 1 ) { print ( " YES \n " ) ; } else { print ( " NO \n " ) ; } ?>
<?php while ( true ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) break ; $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ x ) ; $ i ++ ) { $ sum += $ x [ $ i ] ; } echo $ sum . " \n " ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ d = new DateTime ( $ input ) ; $ boundary = new DateTime ( ' 2019/04/30 ' ) ; if ( $ d <= $ boundary ) { echo " Heisei \n " ; } else { echo " TBD \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php namespace Track ; function main ( $ lines ) { $ sum = 0 ; $ ans = [ ] ; foreach ( $ lines as $ index => $ value ) { if ( $ value == " 0 " ) { break ; } for ( $ i = 0 ; $ i < strlen ( $ value ) ; $ i ++ ) { $ sum += $ value [ $ i ] ; } $ ans [ ] = $ sum ; $ sum = 0 ; } echo implode ( PHP_EOL , $ ans ) ; } $ array = array ( ) ; while ( true ) { $ stdin = fgets ( STDIN ) ; if ( $ stdin == " " ) { break ; } $ array [ ] = rtrim ( $ stdin ) ; } main ( $ array ) ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ A ) ; fscanf ( STDIN , " %d " , $ B ) ; fscanf ( STDIN , " %d " , $ C ) ; fscanf ( STDIN , " %d " , $ D ) ; fscanf ( STDIN , " %d " , $ E ) ; $ input_arr = array ( $ A , $ B , $ C , $ D , $ E ) ; $ flag = True ; foreach ( $ input_arr as $ value ) { if ( $ value % 10 != 0 ) { $ flag = False ; } } if ( $ flag ) { echo array_sum ( $ input_arr ) ; die ( ) ; } $ minimum = 9 ; $ ans = 0 ; foreach ( $ input_arr as $ value ) { if ( $ minimum % 10 > ( $ value % 10 ) ) { if ( ( $ value % 10 ) > 0 ) { $ minimum = $ value ; } } } #echo $minimum; foreach($input_arr as $value){ $ans += ceil($value / 10) * 10; } $ans -= ceil($minimum / 10) * 10; $ans += $minimum; echo $ans;
<?php fscanf ( STDIN , " %d%d " , $ N , $ D ) ; $ row = array ( ) ; $ cnt = 0 ; for ( $ n = 1 ; $ n <= $ N ; $ n ++ ) { $ row [ $ n ] = explode ( " " , fgets ( STDIN ) ) ; if ( $ n == 1 ) continue ; for ( $ m = $ n - 1 ; 0 < $ m ; $ m -- ) { $ dst = 0 ; $ stp = $ n - $ m ; for ( $ d = 0 ; $ d < $ D ; $ d ++ ) { $ x = intval ( $ row [ $ n ] [ $ d ] ) ; $ y = intval ( $ row [ $ n - $ stp ] [ $ d ] ) ; $ dst += pow ( $ y - $ x , 2 ) ; } $ sqt = sqrt ( $ dst ) ; $ cnt += ( $ sqt - intval ( sqrt ( $ dst ) ) == 0 ) ? 1 : 0 ; } } echo $ cnt ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ na = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ na as $ v ) { if ( $ v == " Y " ) { echo " Four " ; return ; } } echo " Three " ;
<?php list ( $ n , $ m ) = Util :: input ( 1 ) ; $ cityMap = [ ] ; $ inputList = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ p , $ y ) = Util :: input ( 1 ) ; $ inputList [ ] = $ p . ' _ ' . $ y ; if ( empty ( $ cityMap [ $ p ] ) ) { $ cityMap [ $ p ] = [ ] ; } $ cityMap [ $ p ] [ $ y ] = 1 ; } foreach ( $ cityMap as $ key => $ m ) { ksort ( $ cityMap [ $ key ] ) ; $ c = 1 ; foreach ( $ cityMap [ $ key ] as $ k => $ v ) { $ cityMap [ $ key ] [ $ k ] = $ c ; $ c += 1 ; } } foreach ( $ inputList as $ input ) { list ( $ p , $ y ) = explode ( ' _ ' , $ input ) ; echo sprintf ( " %06d%06d " , $ p , $ cityMap [ $ p ] [ $ y ] ) . PHP_EOL ; } class Util { public static function input ( $ isSplitSpace = false ) { $ input = trim ( fgets ( STDIN ) ) ; if ( ! $ isSplitSpace ) { return $ input ; } return explode ( ' ' , $ input ) ; } public static function arrToStr ( $ arr ) { return implode ( " , " , $ arr ) ; } }
<?php $ input = fgets ( STDIN ) ; echo ( pow ( $ input , 3 ) ) ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a <= 8 && $ b <= 8 ) { echo " Yay! " ; } else { echo " :( " ; } ?>
<?php $ R = 6378.1 ; while ( true ) { list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ a == - 1 && $ b == - 1 && $ c == - 1 && $ d == - 1 ) { break ; } $ theta1 = ( 90 - $ a ) * 2 * pi ( ) / 360 ; $ phi1 = $ b * 2 * pi ( ) / 360 ; $ theta2 = ( 90 - $ c ) * 2 * pi ( ) / 360 ; $ phi2 = $ d * 2 * pi ( ) / 360 ; $ x1 = $ R * sin ( $ theta1 ) * cos ( $ phi1 ) ; $ y1 = $ R * sin ( $ theta1 ) * sin ( $ phi1 ) ; $ z1 = $ R * cos ( $ theta1 ) ; $ x2 = $ R * sin ( $ theta2 ) * cos ( $ phi2 ) ; $ y2 = $ R * sin ( $ theta2 ) * sin ( $ phi2 ) ; $ z2 = $ R * cos ( $ theta2 ) ; $ C = sqrt ( pow ( $ x1 - $ x2 , 2 ) + pow ( $ y1 - $ y2 , 2 ) + pow ( $ z1 - $ z2 , 2 ) ) ; $ theta = 2 * asin ( $ C / ( 2 * $ R ) ) ; $ d = round ( $ R * $ theta ) ; echo " $ d \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ ans = 0 ; for ( $ x = 0 ; $ x <= $ S ; $ x ++ ) { for ( $ y = $ x ; $ x + $ y <= $ S ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( $ x > $ K || $ y > $ K || $ z > $ K ) continue ; if ( $ z < $ y ) continue ; $ a1 = $ x === $ y ; $ a2 = $ x === $ z ; $ a3 = $ y === $ z ; $ aa = $ a1 + $ a2 + $ a3 ; switch ( $ aa ) { case 3 : $ ans += 1 ; break ; case 1 : $ ans += 3 ; break ; case 0 : $ ans += 6 ; break ; } } } echo $ ans . PHP_EOL ;
<?php $ k = ( int ) trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ s ) <= $ k ) { echo $ s ; exit ; } echo substr ( $ s , 0 , $ k ) . ' ... ' ;
<?php $ in = ( fgets ( STDIN ) ) ; echo ( $ in * $ in * $ in ) ; ?>
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( ' intval ' , explode ( " " , ( trim ( fgets ( STDIN ) ) ) ) ) ; $ angle_a = 360 / 12 * $ H + 30 / 60 * $ M ; $ angle_b = 360 / 60 * $ M ; $ diff = abs ( $ angle_b - $ angle_a ) ; if ( $ diff > 180 ) { $ diff = 360 - $ diff ; } $ C = sqrt ( $ A ** 2 + $ B ** 2 - 2 * $ A * $ B * cos ( deg2rad ( $ diff ) ) ) ; echo $ C . " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; echo $ n * $ n * $ n . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ zahyos = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ zahyos [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } function pat ( $ a , $ s = ' ' ) { $ r = array ( ) ; if ( count ( $ a ) && is_array ( $ a ) ) { foreach ( $ a as $ k => $ v ) { $ _s = $ s . $ v ; $ _a = $ a ; unset ( $ _a [ $ k ] ) ; $ _r = pat ( $ _a , $ _s ) ; $ r = array_merge ( $ r , $ _r ) ; } } else { $ r [ ] = $ s ; } return $ r ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ a [ ] = $ i ; } $ jyunretu = pat ( $ a ) ; $ sum = 0 ; foreach ( $ jyunretu as $ michi ) { for ( $ i = 0 ; $ i < strlen ( $ michi ) - 1 ; $ i ++ ) { $ city = $ michi [ $ i ] - 1 ; $ ncity = $ michi [ $ i + 1 ] - 1 ; $ sum += sqrt ( ( $ zahyos [ $ ncity ] [ 0 ] - $ zahyos [ $ city ] [ 0 ] ) ** 2 + ( $ zahyos [ $ ncity ] [ 1 ] - $ zahyos [ $ city ] [ 1 ] ) ** 2 ) ; } } echo ( $ sum / count ( $ jyunretu ) ) . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b . PHP_EOL ; } elseif ( $ a >= 6 && $ a <= 12 ) { echo ( $ b / 2 ) . PHP_EOL ; } else { echo ( 0 ) . PHP_EOL ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; echo $ k >= ( $ e - $ a ) ? " Yay! " : " :( " ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ point = $ p [ 0 ] ; $ count = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ p [ $ i ] < $ point ) { $ point = $ p [ $ i ] ; $ count ++ ; } } echo $ count . " \n " ;
<?php $ time = trim ( fgets ( STDIN ) ) ; $ discount = 200 * intval ( $ time / 15 ) ; echo 800 * $ time - $ discount ; ?>
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = $ n % 500 ; $ p = $ n - $ a ; echo $ p . PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ seki = $ b ; for ( $ i = 2 ; $ i <= $ a ; $ i ++ ) { $ seki = $ seki * ( $ b - 1 ) ; } print $ seki . " \n " ; ?>
<?php $ input = explode ( " " , fgets ( STDIN ) ) ; $ sumA = $ input [ 0 ] * $ input [ 1 ] ; $ sumB = $ input [ 2 ] * $ input [ 3 ] ; if ( $ sumA >= $ sumB ) { echo $ sumA ; } else { echo $ sumB ; } ?>
<?php fscanf ( STDIN , ' %d ' , $ len ) ; fscanf ( STDIN , ' %s ' , $ str ) ; if ( strlen ( $ str ) <= $ len ) { echo $ str ; } else { $ arr = str_split ( $ str ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { echo $ arr [ $ i ] ; } echo ' ... ' ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ a = ( $ a + 12 ) % 14 ; $ b = ( $ b + 12 ) % 14 ; if ( $ a > $ b ) { echo ' Alice ' ; } elseif ( $ a < $ b ) { echo ' Bob ' ; } else { echo ' Draw ' ; }
<?php fscanf ( STDIN , " %d %d %d " , $ A , $ B , $ C ) ; echo ( $ A + $ B >= $ C ) ? " Yes \n " : " No \n " ;
<?php list ( $ k , $ s ) = explode ( " " , fgets ( STDIN ) ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( 0 <= $ z && $ z <= $ k ) { $ cnt ++ ; } } } echo $ cnt ; ?>
<?php fscanf ( STDIN , ' %d %d %d ' , $ A , $ B , $ C ) ; if ( $ A + $ B >= $ C ) { echo ' Yes ' ; } else { echo ' No ' ; } echo PHP_EOL ;
<?php $ list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count1 = 0 ; $ count2 = 0 ; foreach ( $ list as $ val ) { if ( $ val == ' 7 ' ) { $ count1 ++ ; } elseif ( $ val == ' 5 ' ) { $ count2 ++ ; } } if ( $ count1 == 1 && $ count2 == 2 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ s = trim ( fgets ( STDIN ) ) ; printf ( " %s \n " , str_replace ( ' ? ' , ' D ' , $ s ) ) ;
<?php fscanf ( STDIN , ' %s ' , $ n ) ; $ array = explode ( " / " , $ n ) ; if ( $ array [ 0 ] < 2019 ) { echo ' Heisei ' ; } else if ( ( int ) $ array [ 1 ] < 5 ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ As = explode ( ' ' , $ input ) ; rsort ( $ As ) ; $ cost1 = abs ( $ As [ 1 ] - $ As [ 0 ] ) ; $ cost1 += abs ( $ As [ 2 ] - $ As [ 1 ] ) ; $ cost2 = abs ( $ As [ 2 ] - $ As [ 0 ] ) ; $ cost2 += abs ( $ As [ 1 ] - $ As [ 2 ] ) ; echo min ( $ cost1 , $ cost2 ) ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ factor = array_values ( array_unique ( $ s ) ) ; $ ans = count ( $ factor ) ; if ( $ ans == 4 ) { print ( " Four \n " ) ; } else { print ( " Three \n " ) ; } ?>
<?php while ( true ) { fscanf ( STDIN , ' %s ' , $ num ) ; if ( $ num == 0 ) { break ; } $ result [ ] = array_sum ( str_split ( $ num ) ) ; } echo implode ( PHP_EOL , $ result ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } else if ( $ A >= 6 && $ A <= 12 ) { echo $ B / 2 ; } else { echo " 0 " ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ s_arr = explode ( ' ' , $ s ) ; $ s_arr = array_unique ( $ s_arr ) ; echo ( count ( $ s_arr ) === 3 ) ? ' Three ' : ' Four ' ;
<?php $ inputs = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ inputs [ $ i ] ) ; } $ sum = 0 ; $ diffs = [ ] ; foreach ( $ inputs as $ item ) { $ upten = ( int ) ceil ( $ item / 10 ) * 10 ; $ diff = $ upten - $ item ; if ( $ diff > 0 ) { $ diffs [ ] = $ diff ; } $ sum += $ upten ; } if ( count ( $ diffs ) > 0 ) { $ sum -= max ( $ diffs ) ; } echo $ sum ;
<?php fscanf ( STDIN , " %d " , $ k ) ; $ string = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ string ) <= $ k ) { echo $ string ; } else { $ new_str = substr ( $ string , 0 , $ k ) ; echo $ new_str . ' ... ' ; }
<?php $ x = ( int ) fgets ( STDIN ) ; echo $ x ** 3 ; echo PHP_EOL ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ h as $ j => $ s ) { if ( $ s != $ c [ $ j ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ r = trim ( fgets ( STDIN ) ) ; echo $ r * $ r ;
<?php $ n = fgets ( STDIN ) ; $ s = 1 ; while ( true ) { if ( $ n < $ s ) { $ s = $ s / 2 ; break ; } elseif ( $ n == $ s ) { break ; } $ s = $ s * 2 ; } echo $ s ; ?>
<?PHP fscanf ( STDIN , ' %d/%d/%d ' , $ a , $ b , $ c ) ; echo $ b < 5 ? Heisei : TBD ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php fscanf ( STDIN , " %s " , $ s ) ; $ str = str_replace ( " ? " , " D " , $ s ) ; echo $ str ;
<?php $ input = fgets ( STDIN ) ; $ array = str_split ( $ input ) ; if ( $ array [ 2 ] === $ array [ 3 ] && $ array [ 4 ] === $ array [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ n = int ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ aArray [ ] = int ( ) ; } $ max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ max = max ( $ aArray [ $ i ] , $ max ) ; $ b [ $ i ] = $ max ; } $ max = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ max = max ( $ aArray [ $ i ] , $ max ) ; $ c [ $ i ] = $ max ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo max ( $ b [ $ i - 1 ] ?? 0 , $ c [ $ i + 1 ] ?? 0 ) , " \n " ; } function str ( ) { return trim ( fgets ( STDIN ) ) ; } function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; } function o ( ... $ val ) { if ( count ( $ val ) == 1 ) $ val = array_shift ( $ val ) ; $ trace = debug_backtrace ( ) ; echo $ trace [ 0 ] [ ' line ' ] . " ) " ; if ( is_array ( $ val ) ) { if ( count ( $ val ) == 0 ) { echo " empty array " ; } elseif ( ! is_array ( current ( $ val ) ) ) { echo " array: " ; echo implode ( " " , $ val ) . " \n " ; } else { echo " array:array \n " ; foreach ( $ val as $ row ) { echo implode ( " " , $ row ) . " \n " ; } } } else { echo $ val . " \n " ; } }
<?php fscanf ( STDIN , " %s " , $ str_t ) ; $ len = strlen ( $ str_t ) ; $ last_char = " " ; $ str_new = " " ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ wk_char = substr ( $ str_t , $ i , 1 ) ; if ( $ wk_char == " ? " ) { $ next_char = " " ; if ( ( $ i + 1 ) < $ len ) { $ next_char = substr ( $ str_t , ( $ i + 1 ) , 1 ) ; } $ wk_char = set_q ( $ last_char , $ next_char ) ; } $ str_new .= $ wk_char ; $ last_char = $ wk_char ; } echo $ str_new ; function set_q ( $ str_pre , $ str_sur ) { if ( $ str_pre == " P " ) { return " D " ; } else { if ( $ str_sur == " P " ) { return " D " ; } else if ( $ str_sur == " D " ) { return " P " ; } else if ( $ str_sur == " ? " ) { return " D " ; } else { return " D " ; } } }
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; echo max ( $ a , $ b ) > 8 ? ' :( ' : ' Yay! ' ;
<?php [ $ K ] = fscanf ( STDIN , " %d " ) ; echo str_repeat ( " ACL " , $ K ) ;
<?php $ args = [ ] ; while ( true ) { $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; foreach ( $ input as $ value ) { if ( ! empty ( $ value ) ) { $ args [ ] = $ value ; } if ( count ( $ args ) >= 3 ) { break ; } } if ( count ( $ args ) >= 3 ) { break ; } } sort ( $ args ) ; $ check = [ 5 , 5 , 7 ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ args [ $ i ] == $ check [ $ i ] ) { continue ; } else { echo ' NO ' ; exit ( 0 ) ; } } echo ' YES ' ;
<?php $ A = fgets ( STDIN , 4096 ) ; $ array = explode ( " " , $ A ) ; $ check1 = false ; $ check2 = false ; $ check3 = false ; foreach ( $ array as $ x ) { if ( $ x == 5 && $ check1 == false ) { $ check1 = true ; } elseif ( $ x == 7 ) { $ check2 = true ; } elseif ( $ x == 5 ) { $ check3 = true ; } } if ( $ check1 == true && $ check2 == true && $ check3 == true ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b . " \n " ; } elseif ( $ a > 5 ) { echo ( $ b / 2 ) . " \n " ; } else { echo " 0 " . " \n " ; } ?>
<?php $ str = trim ( fgets ( STDIN ) ) ; $ k = intval ( fgets ( STDIN ) ) ; $ abc = " " ; for ( $ a = " a " ; $ a != " aa " ; $ a ++ ) { $ abc .= $ a ; } for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] <> " a " ) { $ left = 26 - strpos ( $ abc , $ str [ $ i ] ) ; if ( $ left <= $ k ) { $ k -= $ left ; $ str [ $ i ] = " a " ; } } } for ( $ i = 0 ; $ i < $ k % 26 ; $ i ++ ) { $ aa = $ str [ strlen ( $ str ) - 1 ] ; $ aa ++ ; $ str [ strlen ( $ str ) - 1 ] = $ aa ; } echo $ str , " \n " ;
<?php # A - erris Wheel fscanf(STDIN, "%d %d", $A, $B); if ($A <= 5 ) { echo 0; } elseif ($A >= 13) { echo $B; } else { echo $B / 2; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( ( $ e - $ a ) > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ ret = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ sum = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ x - $ sum == 0 ) { $ ret ++ ; } } } } echo $ ret . " \n " ;
<?php $ sum = 0 ; $ amax = 0 ; for ( $ i = 1 ; $ i <= 5 ; $ i ++ ) { $ s [ $ i ] = trim ( fgets ( STDIN ) ) ; $ sum += ( int ) ( ( $ s [ $ i ] + 9 ) / 10 ) * 10 ; if ( $ s [ $ i ] % 10 != 0 ) { $ amax = max ( $ amax , 10 - ( $ s [ $ i ] % 10 ) ) ; } } echo $ sum - $ amax ;
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function arrayIn ( ) { $ buf = explode ( " " , fgets ( STDIN ) ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = $ this -> arrayIn ( ) ; $ a = $ s [ 0 ] ; $ b = $ s [ 1 ] ; if ( 8 < $ a || 8 < $ b ) { echo " :( \n " ; } else { echo " Yay! \n " ; } } } ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( substr ( $ s , 2 , 1 ) == substr ( $ s , 3 , 1 ) && substr ( $ s , 4 , 1 ) == substr ( $ s , 5 , 1 ) ) { echo ' Yes ' ; } else { echo ' No ' ; } ?>
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ hh = ( $ H % 12 ) * 30 ; $ mm = $ M * 6 ; $ hh += $ M * 0.5 ; $ k = abs ( $ hh - $ mm ) ; if ( $ k > 180 ) $ k = 360 - $ k ; echo sqrt ( $ A ** 2 + $ B ** 2 - ( 2 * $ A * $ B * cos ( deg2rad ( $ k ) ) ) ) ;
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a ; ?>
<?php $ stdin = fgets ( STDIN ) ; $ cube = ( $ stdin * $ stdin * $ stdin ) ; echo $ cube ; echo " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( " " , rtrim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , rtrim ( fgets ( STDIN ) ) ) ; $ over = 0 ; $ under = 0 ; $ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] >= $ b [ $ i ] ) $ over += $ a [ $ i ] - $ b [ $ i ] ; else { $ under += $ b [ $ i ] - $ a [ $ i ] ; $ result ++ ; } $ err [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } $ i = 0 ; rsort ( $ err ) ; while ( $ under > 0 ) { $ under -= $ err [ $ i ] ; $ result ++ ; $ i ++ ; if ( $ i == $ n ) { $ result = - 1 ; break ; } } printf ( " %d \n " , $ result ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a != $ b && $ a == 1 ) { echo " Alice \n " ; } elseif ( $ a != $ b && $ b == 1 ) { echo " Bob \n " ; } elseif ( $ a > $ b ) { echo " Alice \n " ; } elseif ( $ b > $ a ) { echo " Bob \n " ; } else { echo " Draw \n " ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; asort ( $ n ) ; $ nn = array_values ( $ n ) ; if ( $ nn [ 0 ] == 1 && $ nn [ 1 ] == 4 && $ nn [ 2 ] == 7 && $ nn [ 3 ] == 9 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ x [ $ i ] , $ y [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ distance = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ dx = ( $ x [ $ i ] - $ x [ $ j ] ) * ( $ x [ $ i ] - $ x [ $ j ] ) ; $ dy = ( $ y [ $ i ] - $ y [ $ j ] ) * ( $ y [ $ i ] - $ y [ $ j ] ) ; $ distance += sqrt ( $ dx + $ dy ) ; } } $ p = ( $ n * ( $ n - 1 ) ) / 2 ; $ ave = $ distance / $ p ; echo $ ave * ( $ n - 1 ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ x ) ; $ i = $ x [ 0 ] ; $ ans = pow ( 10 , 10 ) ; while ( $ i <= $ x [ $ n - 1 ] ) { $ sum = 0 ; $ j = 0 ; while ( $ j < $ n ) { $ sum += pow ( ( $ x [ $ j ] - $ i ) , 2 ) ; ++ $ j ; } if ( $ sum < $ ans ) { $ ans = $ sum ; } ++ $ i ; } echo $ ans ;
<?php function getCost ( $ p , $ x ) { return ( $ p - $ x ) ** 2 ; } $ n = intval ( fgets ( STDIN ) ) ; $ tmp = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = min ( $ tmp ) ; $ max = max ( $ tmp ) ; $ minCost = - 1 ; for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) { $ cost = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ cost += getCost ( $ i , $ tmp [ $ j ] ) ; } if ( $ minCost == - 1 || $ cost < $ minCost ) { $ minCost = $ cost ; } } echo $ minCost . " \n " ;
<?php $ input_array = array ( ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ num_500 = $ input_array [ 3 ] / 500 ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ num_500 ; $ i ++ ) { $ leftover1 = $ input_array [ 3 ] - 500 * $ i ; $ num_100 = $ leftover1 / 100 ; for ( $ j = 0 ; $ j <= $ num_100 ; $ j ++ ) { $ leftover2 = $ leftover1 - 100 * $ j ; $ num_50 = $ leftover2 / 50 ; if ( $ num_50 <= $ input_array [ 2 ] && $ j <= $ input_array [ 1 ] && $ i <= $ input_array [ 0 ] ) { $ ans = $ ans + 1 ; } } } echo ( $ ans ) ;
<?php fscanf ( STDIN , " %d %d " , $ in_k , $ in_s ) ; $ ans_kumi = 0 ; for ( $ x = 0 ; $ x <= $ in_k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ in_k ; $ y ++ ) { if ( ( $ in_s - $ x - $ y >= 0 ) && ( $ in_s - $ x - $ y <= $ in_k ) ) { $ ans_kumi ++ ; } } } echo " $ ans_kumi \n " ; ?>
<?php $ N = fgets ( STDIN ) ; $ N = explode ( " " , $ N ) ; $ k = $ N [ 0 ] ; $ s = $ N [ 1 ] ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b , PHP_EOL ; } elseif ( $ a >= 6 && $ a <= 12 ) { echo $ b / 2 , PHP_EOL ; } else { echo 0 , PHP_EOL ; }
<?php $ t = new temp ( ) ; $ t -> main ( ) ; unset ( $ t ) ; class temp { private function lineIn ( ) { return fgets ( STDIN ) ; } private function arrayIn ( ) { return explode ( " " , fgets ( STDIN ) ) ; } public function main ( ) { $ hinaMax = $ this -> lineIn ( ) ; $ hinaArare = $ this -> arrayIn ( ) ; $ type = " Three " ; foreach ( $ hinaArare as $ arare ) { if ( " Y " == $ arare ) { $ type = " Four " ; break ; } } unset ( $ arare ) ; echo $ type ; } } ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ k ) ; echo $ k * ( $ k - 1 ) ** ( $ n - 1 ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ li = array ( ) ; $ count = 0 ; $ max = 0 ; $ max_i = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ i_update = $ i ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { if ( $ i_update % 2 == 0 ) { $ i_update /= 2 ; $ count ++ ; } } if ( $ max < $ count ) { $ max = $ count ; $ max_i = $ i ; } $ count = 0 ; } echo $ max_i . " \n " ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; echo ( $ a * $ b >= $ c * $ d ) ? $ a * $ b : $ c * $ d , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ max , $ target ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ max ; $ j ++ ) { $ k = $ target - $ i - $ j ; if ( $ k >= 0 && $ k <= $ max ) { $ cnt ++ ; } } } echo $ cnt . " \n " ; ?>
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; while ( $ i < $ n ) { $ a [ ] = trim ( fgets ( STDIN ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ m ) { $ b [ ] = trim ( fgets ( STDIN ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i <= $ n - $ m ) { $ j = 0 ; while ( $ j <= $ n - $ m ) { if ( substr ( $ a [ $ i ] , $ j , $ m ) == $ b [ 0 ] ) { $ flag = 1 ; $ k = $ i + 1 ; while ( $ k < $ i + $ m ) { if ( substr ( $ a [ $ k ] , $ j , $ m ) != $ b [ $ k - $ i ] ) { $ flag = 0 ; break ; } ++ $ k ; } if ( $ flag ) { echo " Yes " ; exit ; } } ++ $ j ; } ++ $ i ; } echo " No " ;
<?php $ a = trim ( fgets ( STDIN ) ) ; echo $ a * $ a * $ a ; ?>
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' 0 0 ' ) { sscanf ( $ line , ' %d %d ' , $ n , $ m ) ; $ arr = array_fill ( 0 , $ n , 1 ) ; $ cnt = 0 ; $ i = $ n - 1 ; while ( $ cnt < $ n - 1 ) { for ( $ j = 0 ; $ j < $ m ; ) { $ i = $ i + 1 === $ n ? 0 : $ i + 1 ; if ( $ arr [ $ i ] ) { $ j ++ ; } } $ arr [ $ i ] = 0 ; $ cnt ++ ; } echo array_search ( 1 , $ arr ) + 1 , PHP_EOL ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a ** 3 , " \n " ;
<?php $ inVal = trim ( fgets ( STDIN ) ) ; $ ans = $ inVal ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { $ ans = $ ans * $ inVal ; } echo $ ans . PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; fscanf ( STDIN , " %s " , $ str ) ; if ( strlen ( $ str ) <= $ n ) { echo $ str ; } else { echo substr ( $ str , 0 , $ n ) . " ... " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = trim ( fgets ( STDIN ) ) ; $ x = array_map ( " intval " , explode ( " " , $ inputs ) ) ; $ sum_min = 0 ; for ( $ p = 1 ; $ p < 100 ; $ p ++ ) { $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ x ) ; $ i ++ ) { $ sum += pow ( $ x [ $ i ] - $ p , 2 ) ; } if ( $ p == 1 || $ sum_min > $ sum ) { $ sum_min = $ sum ; } } echo $ sum_min . " \n " ;
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ array ) <= 8 ? " Yay! " : " :( " ;
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) ; echo " \n " ;
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ a >= 13 ) echo $ b ; else if ( $ a >= 6 ) echo $ b / 2 ; else echo " 0 " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arr = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ arr ) ; $ min = 0 ; $ total = 0 ; for ( $ i = $ arr [ 0 ] ; $ i <= $ arr [ $ n - 1 ] ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ total += ( $ arr [ $ j ] - $ i ) * ( $ arr [ $ j ] - $ i ) ; } if ( $ i == $ arr [ 0 ] ) { $ min = $ total ; } elseif ( $ min > $ total ) { $ min = $ total ; } $ total = 0 ; } echo $ min ; ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) ; ?>
<?php $ input = fgets ( STDIN ) ; echo $ output = pow ( $ input , 3 ) ; ?>
<?php fscanf ( STDIN , " %d \n " , $ x ) ; $ x *= $ x * $ x ; print " { $ x } \n " ;
<?php $ n = int ( ) ; echo $ n * $ n ; function str ( ) { return trim ( fgets ( STDIN ) ) ; } function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; } function o ( ... $ val ) { if ( count ( $ val ) == 1 ) $ val = array_shift ( $ val ) ; $ trace = debug_backtrace ( ) ; echo $ trace [ 0 ] [ ' line ' ] . " ) " ; if ( is_array ( $ val ) ) { if ( count ( $ val ) == 0 ) { echo " empty array " ; } elseif ( ! is_array ( current ( $ val ) ) ) { echo " array: " ; echo implode ( " " , $ val ) . " \n " ; } else { echo " array:array \n " ; foreach ( $ val as $ row ) { echo implode ( " " , $ row ) . " \n " ; } } } else { echo $ val . " \n " ; } }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ arr = [ $ a , $ b , $ c , $ d , $ e ] ; for ( $ i = 0 ; $ i <= 3 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= 4 ; $ j ++ ) { if ( $ arr [ $ j ] - $ arr [ $ i ] > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php $ priority = [ ] ; for ( $ count = 1 , $ tmp = 2 ; $ tmp < 14 ; $ tmp ++ ) { $ priority [ $ tmp ] = $ count ; $ count ++ ; } $ priority [ 1 ] = 13 ; fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ priority [ $ a ] > $ priority [ $ b ] ) { print ( " Alice \n " ) ; } else if ( $ priority [ $ a ] < $ priority [ $ b ] ) { print ( " Bob \n " ) ; } else { print ( " Draw \n " ) ; } ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ target_day = " 2019/04/30 " ; if ( strtotime ( $ s ) <= strtotime ( $ target_day ) ) { echo " Heisei " ; } else { echo " TBD " ; } ?>
<?php $ n = intval ( fgets ( STDIN ) ) ; $ val = array_map ( ' intval ' , preg_split ( ' /\s/ ' , fgets ( STDIN ) ) ) ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -= 2 ) { echo $ val [ $ i ] . " " ; } for ( $ j = abs ( $ i + 1 ) ; $ j < $ n ; $ j += 2 ) { echo $ val [ $ j ] . " " ; }
<?php $ n = int ( ) ; $ a = ints ( ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ sum += ( ( ( $ c % $ mod ) * ( $ n - $ c ) ) % $ mod ) * ( ( 1 << $ i ) % $ mod ) ; $ sum %= $ mod ; } echo $ sum ; function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; }
<?php while ( $ input = trim ( fgets ( STDIN ) ) ) { echo array_sum ( str_split ( $ input ) ) . PHP_EOL ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ no1 = 0 ; $ no2 = 0 ; $ i1 = 0 ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) { $ A [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ B = $ A ; rsort ( $ A ) ; $ max = $ A [ 0 ] ; $ max2 = $ A [ 1 ] ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) { if ( $ B [ $ i ] !== $ max ) { echo " $ max " . " \n " ; } else { echo " $ max2 " . " \n " ; } }
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ i = 0 ; while ( $ i < $ n ) { list ( $ x [ ] , $ y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; ++ $ i ; } $ ans = 0 ; $ i = 0 ; while ( $ i < $ n ) { $ j = $ i + 1 ; while ( $ j < $ n ) { $ ans += 2 * ( sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ) ; ++ $ j ; } ++ $ i ; } echo sprintf ( ' %.7f ' , $ ans / $ n ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ sum = $ N * 800 - floor ( $ N / 15 ) * 200 ; echo $ sum ; ?>
<?php $ x = fgets ( STDIN ) ; $ y = $ x * $ x * $ x ; echo " $ y \n " ; return 0 ; ?>
<?php fscanf ( STDIN , " %s " , $ s ) ; echo str_replace ( ' / ' , ' ' , $ s ) <= ' 20190430 ' ? ' Heisei ' : ' TBD ' ;
<?php $ s = trim ( fgets ( STDIN ) ) ; echo str_replace ( ' ? ' , ' D ' , $ s ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( ( float ) $ a + ( float ) $ b ) / 2 ) ; ?>
<?php $ last_i = 0 ; $ last_1 = 9 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; $ d_1 = $ d [ $ i ] % 10 ; if ( $ d_1 !== 0 and $ d_1 < $ last_1 ) { $ last_i = $ i ; $ last_1 = $ d_1 ; } } $ time = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ last_i ) { $ time += $ d [ $ i ] ; } else { $ time += ceil ( $ d [ $ i ] / 10 ) * 10 ; } } echo $ time , PHP_EOL ;
<?php list ( $ n , $ m ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ inputGraph = [ ] ; for ( $ index = 1 ; $ index <= $ n ; $ index ++ ) { $ inputGraph [ $ index ] = array_fill ( 1 , $ n , PHP_INT_MAX ) ; $ inputGraph [ $ index ] [ $ index ] = 0 ; } for ( $ index = 1 ; $ index <= $ m ; $ index ++ ) { list ( $ a , $ b , $ c ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ inputGraph [ $ a ] [ $ b ] = $ c ; $ inputGraph [ $ b ] [ $ a ] = $ c ; } $ shortestGraph = $ inputGraph ; for ( $ via = 1 ; $ via <= $ n ; $ via ++ ) { for ( $ start = 1 ; $ start <= $ n ; $ start ++ ) { for ( $ end = 1 ; $ end <= $ n ; $ end ++ ) { $ shortestGraph [ $ start ] [ $ end ] = min ( $ shortestGraph [ $ start ] [ $ end ] , $ shortestGraph [ $ start ] [ $ via ] + $ shortestGraph [ $ via ] [ $ end ] ) ; } } } $ result = 0 ; for ( $ start = 1 ; $ start <= $ n ; $ start ++ ) { for ( $ end = $ start ; $ end <= $ n ; $ end ++ ) { if ( $ inputGraph [ $ start ] [ $ end ] != PHP_INT_MAX && $ shortestGraph [ $ start ] [ $ end ] != $ inputGraph [ $ start ] [ $ end ] ) { $ result ++ ; } } } echo $ result ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( ' ' , fgets ( STDIN ) ) ; while ( $ n > 0 ) { -- $ n ; if ( $ a [ $ n ] == ' Y ' ) { echo ' Four ' ; exit ; } } echo ' Three ' ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ data [ " a " ] = $ a ; $ data [ " b " ] = $ b ; $ data [ " c " ] = $ c ; $ data [ " d " ] = $ d ; $ data [ " e " ] = $ e ; $ sort [ " a " ] = $ a % 10 ; $ sort [ " b " ] = $ b % 10 ; $ sort [ " c " ] = $ c % 10 ; $ sort [ " d " ] = $ d % 10 ; $ sort [ " e " ] = $ e % 10 ; asort ( $ sort ) ; foreach ( $ sort as $ key => $ val ) { if ( $ val != 0 ) { $ min = $ data [ $ key ] ; unset ( $ data [ $ key ] ) ; break ; } } $ sum = 0 ; foreach ( $ data as $ key => $ val ) { $ add = 0 ; if ( $ sort [ $ key ] != 0 ) { $ add = 10 - $ sort [ $ key ] ; } $ sum += $ val + $ add ; } $ sum += $ min ; echo $ sum ; ?>
<?php $ n = readline ( ) ; $ sor = readline ( ) ; $ ex = explode ( " " , $ sor ) ; $ avg = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ ex [ $ i ] ; } $ avg = $ sum / $ n ; $ fel = ceil ( $ avg ) ; $ le = floor ( $ avg ) ; $ pFel = 0 ; $ pLe = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ pFel = $ pFel + ( ( $ ex [ $ i ] - $ fel ) * ( $ ex [ $ i ] - $ fel ) ) ; $ pLe = $ pLe + ( ( $ ex [ $ i ] - $ le ) * ( $ ex [ $ i ] - $ le ) ) ; } if ( $ pLe < $ pFel ) { echo $ pLe ; } else { echo $ pFel ; }
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ b [ $ i ] ] = true ; } if ( count ( $ a ) == 4 ) echo " Four " ; else echo " Three " ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ x ) ; $ x = pow ( $ x , 3 ) ; echo " $ x " ; ?>
<?php fscanf ( STDIN , ' %d%d ' , $ a [ ] , $ a [ ] ) ; echo ceil ( array_sum ( $ a ) / count ( $ a ) ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo $ n ** 3 , PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d " , $ K ) ; $ S = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ S ) <= $ K ) { echo $ S , " \n " ; } else { echo substr ( $ S , 0 , $ K ) ; echo " ... \n " ; }
<?php $ server = " php: $ local = " input . txt " ; $ handle = fopen ( $ server , " r " ) ; $ t = trim ( fgets ( $ handle ) ) ; $ x = trim ( fgets ( $ handle ) ) ; $ a = explode ( ' ' , $ x ) ; $ count = 0 ; $ j = 0 ; if ( $ t == 1 ) echo " 1 " ; else { $ count = 1 ; $ te = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ t ; $ i ++ ) { if ( $ a [ $ i ] <= $ te ) { $ te = $ a [ $ i ] ; $ count ++ ; } } echo $ count ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d " , $ a_coin , $ b_coin , $ item ) ; $ cash = ( $ a_coin + $ b_coin ) - $ item ; echo $ cash >= 0 ? ' Yes ' : ' No ' ; ?>
<?php list ( $ A , $ B ) = sscanf ( trim ( fgets ( STDIN ) ) , " %d %d " ) ; if ( $ A <= 5 ) { print ( 0 ) ; } else if ( ( $ A >= 6 ) && ( $ A <= 12 ) ) { print ( $ B / 2 ) ; } else { print ( $ B ) ; }
<?php $ nm = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = $ nm [ 0 ] ; $ m = $ nm [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ b [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } $ ans = ' No ' ; for ( $ i = 0 ; $ i <= $ n - $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n - $ m ; $ j ++ ) { $ c = 0 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) { for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ a [ $ i + $ k ] [ $ j + $ l ] == $ b [ $ k ] [ $ l ] ) { $ c ++ ; } } } if ( $ c == $ m * $ m ) $ ans = ' Yes ' ; } } echo $ ans ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; ( $ a + $ b >= $ c ) ? print ( ' Yes ' ) : print ( ' No ' ) ; ?>
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ score = 0 ; $ ans = array ( ) ; for ( $ i = 1 ; $ i < 100000 ; $ i ++ ) { $ score += $ i ; $ ans [ ] = $ i ; if ( $ score === $ N ) { echo implode ( " " , $ ans ) ; echo PHP_EOL ; exit ; } if ( $ score > $ N ) { $ diff = abs ( $ score - $ N ) ; unset ( $ ans [ $ diff - 1 ] ) ; echo implode ( " " , $ ans ) ; echo PHP_EOL ; exit ; } }
<?php fscanf ( STDIN , " %d " , $ A ) ; fscanf ( STDIN , " %d " , $ B ) ; fscanf ( STDIN , " %d " , $ C ) ; fscanf ( STDIN , " %d " , $ X ) ; $ ans = 0 ; $ c500 = min ( $ A , floor ( $ X / 500 ) ) ; for ( $ i = $ c500 ; $ i >= 0 ; $ i -- ) { $ rest1 = $ X - $ i * 500 ; $ c100 = min ( $ B , floor ( $ rest1 / 100 ) ) ; for ( $ j = $ c100 ; $ j >= 0 ; $ j -- ) { $ rest2 = $ rest1 - $ j * 100 ; $ c50 = $ rest2 / 50 ; if ( $ c50 <= $ C ) { $ ans ++ ; } } } echo $ ans . " \n " ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo implode ( " " , $ a ) == " 557 " ? " YES " : " NO " ;
<?PHP $ num = trim ( fgets ( STDIN ) ) ; echo pow ( $ num , 3 ) ; ?>
<?php list ( $ N , $ D ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ diff = 0 ; foreach ( $ x [ $ i ] as $ k => $ v ) { $ diff += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; } $ diff_int = sqrt ( $ diff ) ; if ( $ diff_int == intval ( $ diff_int ) ) { $ ans ++ ; } } } printf ( " %d \n " , $ ans ) ;
<?php $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( abs ( $ an [ $ i ] - $ an [ $ j ] ) > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; echo ( $ e - $ a <= $ k ) ? ' Yay! ' : ' :( ' ;
<?php fscanf ( STDIN , ' %s ' , $ S ) ; if ( $ S <= ' 2019/04/30 ' ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = $ i ; } $ cnt = 0 ; for ( $ s = 1 ; $ s <= $ n ; $ s ++ ) { for ( $ i = $ s ; $ i <= ( $ s + $ k - 1 ) ; $ i ++ ) { if ( $ i > $ n ) { break 2 ; } } $ cnt ++ ; } echo $ cnt ; ?>
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( $ i + $ j <= $ s && $ k >= $ s - $ i - $ j ) { $ ans ++ ; } } } echo $ ans ;
<?php $ len = trim ( fgets ( STDIN ) ) ; $ str = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ str ) > $ len ) { echo substr ( $ str , 0 , $ len ) . ' ... ' ; } else { echo $ str ; } ?>
<?php $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo ceil ( array_sum ( $ array ) / count ( $ array ) ) ?>
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a + $ b >= $ c ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; $ diff [ ] = $ b - $ a ; $ diff [ ] = $ c - $ a ; $ diff [ ] = $ d - $ a ; $ diff [ ] = $ e - $ a ; $ diff [ ] = $ c - $ b ; $ diff [ ] = $ d - $ b ; $ diff [ ] = $ e - $ b ; $ diff [ ] = $ d - $ c ; $ diff [ ] = $ e - $ c ; $ diff [ ] = $ e - $ d ; if ( max ( $ diff ) <= $ k ) { printf ( " Yay! \n " ) ; } else { printf ( " :( \n " ) ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; for ( $ a [ 0 ] = 0 ; $ a [ 0 ] <= 100 ; $ a [ 0 ] ++ ) { $ b [ 0 ] = $ c [ 0 ] [ 0 ] - $ a [ 0 ] ; $ b [ 1 ] = $ c [ 0 ] [ 1 ] - $ a [ 0 ] ; $ b [ 2 ] = $ c [ 0 ] [ 2 ] - $ a [ 0 ] ; $ a [ 1 ] = $ c [ 1 ] [ 0 ] - $ b [ 0 ] ; $ a [ 2 ] = $ c [ 2 ] [ 0 ] - $ b [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ $ i ] [ $ j ] !== $ a [ $ i ] + $ b [ $ j ] ) continue 3 ; } } exit ( ' Yes ' ) ; } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php list ( $ a , $ v ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; list ( $ b , $ w ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ t = trim ( fgets ( STDIN ) ) ; if ( $ v <= $ w ) { echo " NO \n " ; exit ; } echo ( abs ( $ a - $ b ) / ( $ v - $ w ) ) <= $ t ? " YES \n " : " NO \n " ;
<?php $ line = fgets ( STDIN ) ; echo $ line * $ line * $ line ; ?>
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ array ) - min ( $ array ) ;
<?php $ num = intval ( trim ( fgets ( STDIN ) ) ) ; $ line = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ line ) <= $ num ) { echo $ line . " \n " ; } else { echo substr ( $ line , 0 , $ num ) . " ... \n " ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ ps = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ cnt = 1 ; $ min = $ ps [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ ps [ $ i ] < $ min ) { $ min = $ ps [ $ i ] ; $ cnt ++ ; } } echo $ cnt ;
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( strtotime ( $ s ) <= strtotime ( ' 2019/04/30 ' ) ) { echo ' Heisei ' ; } else { echo ' TBD ' ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ n = fgets ( STDIN ) ; $ a = explode ( ' ' , fgets ( STDIN ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ;
<?php function getq ( $ get_word = null ) { if ( $ get_word === null ) { return str_replace ( " \n " , " " , fgets ( STDIN ) ) ; } else if ( $ get_word === 1 ) { return explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; } } $ a = getq ( 1 ) ; if ( $ a [ 0 ] + $ a [ 1 ] >= $ a [ 2 ] ) { echo " Yes \n " ; } else { echo " No \n " ; } ?>
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = lcmAll ( $ a ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function gcdAll ( $ arr ) { $ gcd = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ gcd = gcd ( $ gcd , $ arr [ $ i ] ) ; } return $ gcd ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; } function lcmAll ( $ arr ) { $ lcm = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ arr [ $ i ] ) ; } return $ lcm ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ n = intval ( $ stdin ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ r = fgets ( STDIN ) ; echo $ r * $ r ; ?>
<?php fscanf ( STDIN , " %s " , $ T ) ; $ T = str_replace ( ' ? ' , ' D ' , $ T ) ; echo $ T ; function calc ( $ S ) { $ score = 0 ; $ len = strlen ( $ S ) ; $ arr = str_split ( $ S ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ arr [ $ i ] === ' D ' ) { $ score ++ ; } if ( $ i > 0 && $ arr [ $ i - 1 ] === ' P ' ) { $ score ++ ; } } echo PHP_EOL . $ score ; }
<?php $ input = file_get_contents ( ' php: echo $input * $input * $input, PHP_EOL;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; $ b = array ( ) ; if ( $ n % 2 == 0 ) { while ( $ i < $ n ) { if ( $ i % 2 == 0 ) { $ b [ ( $ n / 2 ) + $ i ] = $ a [ $ i ] ; } else { $ b [ ( $ n / 2 ) - $ i ] = $ a [ $ i ] ; } ++ $ i ; } } else { while ( $ i < $ n ) { if ( $ i % 2 == 0 ) { $ b [ floor ( $ n / 2 ) - $ i ] = $ a [ $ i ] ; } else { $ b [ floor ( $ n / 2 ) + $ i ] = $ a [ $ i ] ; } ++ $ i ; } } ksort ( $ b ) ; echo implode ( " " , $ b ) ;
<?php list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ A == $ B ) { echo " Draw " ; } elseif ( $ A == 1 ) { echo " Alice " ; } elseif ( $ B == 1 ) { echo " Bob " ; } elseif ( $ A < $ B ) { echo " Bob " ; } else { echo " Alice " ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) , PHP_EOL ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ num = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = $ n - 1 ; $ i > 0 ; $ i -= 2 ) { $ b [ ] = $ num [ $ i ] ; } $ b [ ] = $ num [ 0 ] ; if ( $ n % 2 ) { $ restart = 1 ; } else { $ restart = 2 ; } for ( $ i = $ restart ; $ i < $ n - 1 ; $ i += 2 ) { $ b [ ] = $ num [ $ i ] ; } echo join ( ' ' , $ b ) . " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ s = max ( $ a , $ b , $ c , $ d , $ e ) - min ( $ a , $ b , $ c , $ d , $ e ) ; if ( $ s <= $ k ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php $ in = file_get_contents ( " /dev/stdin " ) ; $ in = $ in * $ in * $ in ; file_put_contents ( " /tmp/a.sh " , " echo " . $ in ) ; echo exec ( " sh /tmp/a.sh " ) . " \n " ; ?>
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ s == 0 ) { echo 1 ; } elseif ( $ s == $ k * 3 ) { echo 1 ; } else { $ ans = 0 ; $ x = max ( 0 , $ s - $ k * 2 ) ; while ( $ x <= $ k ) { $ y = max ( 0 , $ s - $ x - $ k ) ; $ ym = min ( $ k , $ s - $ x ) ; while ( $ y <= $ ym ) { $ z = $ s - $ x - $ y ; $ zm = min ( $ k , $ s - $ x - $ y ) ; if ( $ z <= $ zm ) { ++ $ ans ; } ++ $ y ; } ++ $ x ; } echo $ ans ; } ?>
<?php $ t = trim ( fgets ( STDIN ) ) ; $ len = strlen ( $ t ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ t [ $ i ] == " ? " ) $ t [ $ i ] = " D " ; } echo $ t ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; if ( $ K === 1 ) { echo 0 ; } else { echo $ N - $ K ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; for ( $ i = - 118 ; $ i <= 119 ; $ i ++ ) { for ( $ j = - 118 ; $ j <= 119 ; $ j ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ x ) { $ ans = " $ i $ j " . " \n " ; break ; } } } echo $ ans ;
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ k ) ; fscanf ( STDIN , " %s " , $ s ) ; $ num = strlen ( $ s ) ; if ( $ num <= $ k ) { echo $ s ; } else { $ arr = str_split ( $ s , $ k ) ; echo $ arr [ 0 ] . " ... " ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ array [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < ( $ n - 1 ) ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ square_sum = 0 ; foreach ( $ array [ $ i ] as $ index => $ value ) { $ square_sum += pow ( $ value - $ array [ $ j ] [ $ index ] , 2 ) ; } $ dist = pow ( $ square_sum , 0.5 ) ; if ( ceil ( $ dist ) == floor ( $ dist ) ) { $ ans ++ ; } } } echo $ ans ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 1 ; $ ans = 1 ; $ min = $ p [ 0 ] ; while ( $ i < $ n ) { if ( $ p [ $ i ] < $ min ) { ++ $ ans ; $ min = $ p [ $ i ] ; } ++ $ i ; } echo $ ans ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 3 ) { } else { list ( $ no , $ weight , $ height ) = $ values ; $ bmi = $ weight / pow ( $ height , 2 ) ; if ( $ bmi >= 25 ) { echo $ no . " \n " ; } } }
<?php $ list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ five = 0 ; $ seven = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ list [ $ i ] == 5 ) { $ five ++ ; } else if ( $ list [ $ i ] == 7 ) { $ seven ++ ; } } if ( $ five == 2 && $ seven == 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php function f ( $ x ) { if ( $ x < 10 ) return $ x ; return $ x % 10 + f ( floor ( $ x / 10 ) ) ; } $ n ; fscanf ( STDIN , " %d " , $ n ) ; $ m = f ( $ n ) ; if ( $ n % $ m == 0 ) { echo " Yes \n " ; } else { echo " No \n " ; } ?>
<?php $ flg = 0 ; while ( $ tmp = fgets ( STDIN ) ) { $ varInputData [ ] = trim ( $ tmp ) ; } $ intInputDataCounter = count ( $ varInputData ) ; $ intInputOutRange = $ varInputData [ $ intInputDataCounter - 1 ] ; unset ( $ varInputData [ $ intInputDataCounter - 1 ] ) ; for ( $ i = 0 ; $ i < $ intInputDataCounter - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ intInputDataCounter - 1 ; $ j ++ ) { if ( $ varInputData [ $ i ] >= $ varInputData [ $ j ] ) { $ intBetweenAntena [ ] = $ varInputData [ $ i ] - $ varInputData [ $ j ] ; } else { $ intBetweenAntena [ ] = $ varInputData [ $ j ] - $ varInputData [ $ i ] ; } } } foreach ( $ intBetweenAntena as $ out ) { if ( $ out > $ intInputOutRange ) { exit ( ' :( ' ) ; break ; } } echo ' Yay! ' ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = 1 ; $ current = $ p [ 0 ] ; foreach ( $ p as $ num ) { if ( $ current > $ num ) { $ count ++ ; $ current = $ num ; } } echo $ count . PHP_EOL ;
<?php $ N = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ N ) ; if ( $ N == [ 5 , 5 , 7 ] ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php $ x = fgets ( STDIN ) ; $ x = $ x * $ x * $ x ; echo $ x . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; $ integerCount = 0 ; $ points = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ points [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ point_y = $ points [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ point_z = $ points [ $ j ] ; $ distance = 0 ; foreach ( $ point_y as $ index => $ coordinate ) { $ distance += pow ( abs ( $ point_y [ $ index ] - $ point_z [ $ index ] ) , 2 ) ; } if ( intval ( sqrt ( $ distance ) ) == sqrt ( $ distance ) ) { $ integerCount ++ ; } } } echo $ integerCount ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = array ( ) ; $ y = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } $ k = 1 ; for ( $ i = $ n ; $ i > 0 ; $ i -- ) { $ k *= $ i ; } $ distance_array = array ( ) ; $ distance_total = 0 ; $ diff_pettern = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ distance_array [ $ diff_pettern ] = sqrt ( pow ( ( $ x [ $ i ] - $ x [ $ j ] ) , 2 ) + pow ( ( $ y [ $ i ] - $ y [ $ j ] ) , 2 ) ) ; $ distance_total += $ distance_array [ $ diff_pettern ] ; $ diff_pettern ++ ; } } $ cond_num = ( $ k * ( $ n - 1 ) ) / $ diff_pettern ; echo ( $ cond_num * $ distance_total / $ k ) ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a < 6 ) { echo 0 ; } elseif ( $ a < 13 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php $ a = fgets ( STDIN ) ; echo ( pow ( $ a , 3 ) ) ; ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ n * 800 - 200 * intdiv ( $ n , 15 ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -= 2 ) { $ b [ ] = $ a [ $ i ] ; } $ s = $ n % 2 ? 1 : 0 ; for ( $ i = $ s ; $ i < $ n ; $ i += 2 ) { $ b [ ] = $ a [ $ i ] ; } echo implode ( ' ' , $ b ) ;
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ c <= $ a + $ b ) { echo " Yes " ; } else { echo " No " ; }
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; if ( $ A == 1 ) { $ A = 15 ; } if ( $ B == 1 ) { $ B = 15 ; } if ( $ A < $ B ) { echo " Bob " ; } elseif ( $ A > $ B ) { echo " Alice " ; } else { echo " Draw " ; } ?>
<?php $ number = trim ( fgets ( STDIN ) ) ; $ times = $ number * $ number * $ number ; print $ times ; ?>
<?php $ grid = array ( 0 => array ( 0 , 0 , 0 ) , 1 => array ( 0 , 0 , 0 ) , 2 => array ( 0 , 0 , 0 ) , ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ cins = trim ( fgets ( STDIN ) ) ; $ cin = explode ( " " , $ cins ) ; for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { $ grid [ $ i ] [ $ j ] = $ cin [ $ j ] ; } } for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { for ( $ j = 0 ; $ j < 2 ; $ j ++ ) { if ( $ grid [ $ i + 1 ] [ $ j + 1 ] - $ grid [ 0 ] [ $ j + 1 ] != $ grid [ $ i + 1 ] [ 0 ] - $ grid [ 0 ] [ 0 ] ) { $ wrong ++ ; } } } for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { for ( $ j = 0 ; $ j < 2 ; $ j ++ ) { if ( $ grid [ $ i + 1 ] [ $ j + 1 ] - $ grid [ $ i + 1 ] [ 0 ] != $ grid [ 0 ] [ $ j + 1 ] - $ grid [ 0 ] [ 0 ] ) { $ wrong ++ ; } } } if ( $ wrong != 0 ) { echo ( " No " ) ; } else { echo ( " Yes " ) ; } ?>
<?php list ( $ H1 , $ M1 , $ H2 , $ M2 , $ K ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ h1 = $ H1 * 60 + $ M1 ; $ h2 = $ H2 * 60 + $ M2 ; printf ( " %d \n " , max ( $ h2 - $ h1 - $ K , 0 ) ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ ans = $ x * $ x * $ x ; echo $ ans ; ?>
<?php fscanf ( STDIN , " %d " , $ r ) ; echo ( $ r ** 2 ) ; ?>
<?php $ a = fgets ( STDIN ) ; $ aaa = $ a * $ a * $ a ; echo $ aaa ; ?>
<?php $ input = explode ( ' ' , trim ( fgets ( ( STDIN ) ) ) ) ; $ counted = array_count_values ( $ input ) ; print ( $ counted [ 5 ] == 2 ) && ( $ counted [ 7 ] == 1 ) ? ' YES ' : ' NO ' ;
<?php error_reporting ( 0 ) ; list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; printf ( " %d \n " , ceil ( ( $ A + $ B ) / 2 ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $A=$key->A[0]; $B=$key->A[1]; $C=$key->A[2]; $D=$key->A[3]; printf("%d\n",max($A*$B,$C*$D));
<?php list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di = new Di ( $ n ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di -> connect ( $ from , $ to , $ d ) ; } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ di -> connect ( $ i , $ i - 1 , 0 ) ; } $ distance = $ di -> solve ( 1 ) [ $ n ] ; if ( $ distance == $ di -> inf ) { echo - 1 ; } else { echo $ distance ; } class Di { public $ pq ; public $ distance ; public $ G ; public $ inf = 10 ** 18 ; function __construct ( $ n ) { $ this -> pq = new SplPriorityQueue ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ this -> distance [ $ i ] = $ this -> inf ; } } function connect ( $ from , $ to , $ cost ) { $ this -> G [ $ from ] [ ] = [ $ to , $ cost ] ; } function solve ( $ from ) { $ this -> pq -> insert ( $ from , 0 ) ; $ this -> distance [ $ from ] = 0 ; while ( $ this -> pq -> count ( ) ) { $ f = $ this -> pq -> extract ( ) ; if ( ! isset ( $ this -> G [ $ f ] ) ) continue ; foreach ( $ this -> G [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ this -> distance [ $ f ] + $ dist ; if ( $ this -> distance [ $ t ] > $ new ) { $ this -> distance [ $ t ] = $ new ; $ this -> pq -> insert ( $ t , - $ new ) ; } } } return $ this -> distance ; } }
<?php $ n = intval ( fgets ( STDIN ) ) - 1 ; $ val = explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; $ ans = array ( ) ; $ f = 0 ; $ b = 0 ; for ( $ i = $ n ; $ i >= 0 ; $ i -- ) { if ( ( $ n - $ i ) % 2 == 0 ) { $ ans [ $ f ++ ] = $ val [ $ i ] ; } else { $ ans [ $ n - $ b ++ ] = $ val [ $ i ] ; } } for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { if ( $ i == 0 ) echo $ ans [ $ i ] ; else echo ' ' . $ ans [ $ i ] ; } ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ a_i = 0 ; $ a_i <= $ a ; $ a_i ++ ) { for ( $ b_i = 0 ; $ b_i <= $ b ; $ b_i ++ ) { for ( $ c_i = 0 ; $ c_i <= $ c ; $ c_i ++ ) { if ( 500 * $ a_i + 100 * $ b_i + 50 * $ c_i == $ x ) { $ count ++ ; } } } } print $ count ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ sm = $ h1 * 60 + $ m1 ; $ em = $ h2 * 60 + $ m2 ; $ ans = $ em - $ sm - $ k ; echo $ ans . PHP_EOL ;
<?php $ input = trim ( fgets ( STDIN ) ) ; while ( 0 != $ input ) { $ list = str_split ( $ input ) ; $ sum = 0 ; foreach ( $ list as $ i ) { $ sum += ( int ) $ i ; } echo $ sum . " \n " ; $ input = trim ( fgets ( STDIN ) ) ; }
<?php fscanf ( STDIN , ' %d ' , $ r ) ; echo $ r * $ r . PHP_EOL ;
<?php $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { echo ' ACL ' ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo ( $ stdin * $ stdin * $ stdin ) ; ?>
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; if ( $ a == $ b ) { echo ' Draw ' ; } elseif ( $ a == 1 ) { echo ' Alice ' ; } elseif ( $ b == 1 ) { echo ' Bob ' ; } elseif ( $ a > $ b ) { echo ' Alice ' ; } else { echo ' Bob ' ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ p_arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ count = 0 ; $ min = $ n + 1 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ p_arr [ $ i ] <= $ min ) { ++ $ count ; } $ min = min ( $ min , $ p_arr [ $ i ] ) ; } echo $ count ;
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ n [ 0 ] * $ n [ 1 ] , $ n [ 2 ] * $ n [ 3 ] ) ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ h , $ m ) ; $ y = $ m / 60 ; $ x = ( $ h + $ y ) / 12 ; $ rad = deg2rad ( ( $ x - $ y ) * 360 ) ; $ ans = sqrt ( $ a ** 2 + $ b ** 2 - 2 * $ a * $ b * cos ( $ rad ) ) ; echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k == 1 ) { echo ' 0 ' ; } else { $ ans = $ n - $ k ; echo $ ans ; }
<?php # æ´æ°ã®å ¥å fscanf(STDIN,"%d %d %d",$a,$b,$c); $arrat = [5 => 0,7=>0]; if($a === 5 || $a === 7){ $arrat[$a] = $arrat[$a] + 1; } if($b === 5 || $b === 7){ $arrat[$b] = $arrat[$b] + 1; } if($a === 5 || $a === 7){ $arrat[$c] = $arrat[$c] + 1; } if($arrat[5] === 2 &&$arrat[7] === 1){ echo 'YES'; }else{ echo 'NO'; }
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $N = $key->A[0]; foreach($key->X[0] as $v) { if (is_array($v)) { $X[]=$v[0]; } else { $X[]=$v; } } $l = count($X); $str=""; for($i=$l;$i>0;$i=$i-2) { if ($str != "") $str .= " "; $str .= $X[$i-1]; } if ($l%2==0) $st = 0; else $st = 1; for($i=$st;$i<$l;$i=$i+2) { if ($str != "") $str .= " "; $str .= $X[$i]; } printf("%s\n",$str);
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ rsl = in_array ( " Y " , $ s ) ; if ( $ rsl === true ) { echo " Four " ; } else { echo " Three " ; }
<?php $ line = fgets ( STDIN ) ; $ data = explode ( ' ' , $ line ) ; $ a = $ data [ 0 ] ; $ b = $ data [ 1 ] ; $ result = round ( ( $ a + $ b ) / 2 ) ; print $ result ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ result = 0 ; foreach ( str_split ( strval ( $ N ) ) as $ n ) { $ result += intval ( $ n ) ; } echo ( $ N % $ result ) == 0 ? ' Yes ' : ' No ' ; ?>
<?php $ s = fgets ( STDIN ) ; function check ( $ input ) { $ s = explode ( " " , $ input ) ; sort ( $ s ) ; if ( intval ( $ s [ 0 ] ) === 5 && intval ( $ s [ 1 ] ) === 5 && intval ( $ s [ 2 ] ) === 7 ) { return true ; } else { return false ; } } if ( check ( $ s ) ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } elseif ( $ A >= 6 && $ A <= 12 ) { echo $ B / 2 ; } elseif ( $ A <= 5 ) { echo 0 ; } ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ X = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ Y = $ X ; sort ( $ Y ) ; $ n1 = $ Y [ $ N / 2 - 1 ] ; $ n2 = $ Y [ $ N / 2 ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ n2 <= $ X [ $ i ] ) { echo $ n1 ; } else { echo $ n2 ; } echo PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; echo $ a + $ b >= $ c ? ' Yes ' : ' No ' ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ k = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ len = strlen ( $ s ) ; if ( $ len <= $ k ) { echo $ s ; } else { for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { echo $ s [ $ i ] ; } echo " ... " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; echo ( $ n * $ n ) ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ result = 0 ; $ result += $ i * 500 ; $ result += $ j * 100 ; $ result += $ k * 50 ; if ( $ result == $ x ) { $ count ++ ; } } } } echo $ count ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ e - $ a > $ k ) { print ( " :( \n " ) ; } else { print ( " Yay! \n " ) ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( $ s - $ i - $ j <= $ k && $ s - $ i - $ j >= 0 ) $ result ++ ; } } printf ( " %d \n " , $ result ) ;
<?php fscanf ( STDIN , ' %d ' , $ num ) ; echo pow ( $ num , 3 ) ; ?>
<?php for ( $ i = 0 ; $ i <= 5 ; $ i ++ ) { $ a [ ] = trim ( fgets ( STDIN ) ) ; } if ( $ a [ 4 ] - $ a [ 0 ] > $ a [ 5 ] ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php $ input = ( int ) file_get_contents ( " php: $ x = $ input * 800; $ y = floor( $ input / 15) * 200; echo $ x - $ y ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; $ memo = [ ] ; foreach ( $ pref as $ key => $ list ) { foreach ( $ pref [ $ key ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; $ count = count ( $ s ) ; $ a = array ( " a " => 1 , " b " => 2 , " c " => 3 , " d " => 4 , " e " => 5 , " f " => 6 , " g " => 7 , " h " => 8 , " i " => 9 , " j " => 10 , " k " => 11 , " l " => 12 , " m " => 13 , " n " => 14 , " o " => 15 , " p " => 16 , " q " => 17 , " r " => 18 , " s " => 19 , " t " => 20 , " u " => 21 , " v " => 22 , " w " => 23 , " x " => 24 , " y " => 25 , " z " => 26 ) ; $ i = 0 ; while ( $ i < $ count ) { $ num [ $ i ] = strtr ( $ s [ $ i ] , $ a ) ; $ d [ $ i ] = 27 - $ num [ $ i ] ; ++ $ i ; } $ i = 0 ; $ K = trim ( fgets ( STDIN ) ) ; $ n = 0 ; while ( $ i < $ count ) { if ( $ d [ $ i ] != 26 && $ d [ $ i ] <= $ K - $ n ) { $ num [ $ i ] = 1 ; $ n += $ d [ $ i ] ; } ++ $ i ; } if ( $ n != $ K ) { $ num [ $ count - 1 ] += $ K - $ n ; $ num [ $ count - 1 ] %= 26 ; if ( $ num [ $ count - 1 ] == 0 ) { $ num [ $ count - 1 ] = 26 ; } } $ i = 0 ; while ( $ i < $ count ) { echo array_search ( $ num [ $ i ] , $ a ) ; ++ $ i ; } echo PHP_EOL ; ?>
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a == 1 ) $ a = 14 ; if ( $ b == 1 ) $ b = 14 ; if ( $ a > $ b ) { echo " Alice " ; } elseif ( $ a == $ b ) { echo " Draw " ; } else { echo " Bob " ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ arg_h = $ h * - 2 * M_PI / 12 + $ m * - 2 * M_PI / 12 / 60 ; $ arg_m = $ m * - 2 * M_PI / 60 ; function crd ( $ r , $ arg ) { return [ $ r * cos ( $ arg ) , $ r * sin ( $ arg ) ] ; } ; $ arr_h = crd ( $ a , $ arg_h ) ; $ arr_m = crd ( $ b , $ arg_m ) ; $ x = $ arr_h [ 0 ] - $ arr_m [ 0 ] ; $ y = $ arr_h [ 1 ] - $ arr_m [ 1 ] ; echo sqrt ( $ x ** 2 + $ y ** 2 ) ; ?>
<?php fscanf ( STDIN , " %s " , $ s ) ; echo ( $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ) ? ' Yes ' : ' No ' ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ X = explode ( " " , fgets ( STDIN ) ) ; $ X = array_map ( ' intval ' , $ X ) ; $ mean_ceil = ceil ( array_sum ( $ X ) / count ( $ X ) ) ; $ mean_floor = floor ( array_sum ( $ X ) / count ( $ X ) ) ; $ ans_1 = 0 ; $ ans_2 = 0 ; for ( $ i = 0 ; $ i < count ( $ X ) ; $ i ++ ) { $ ans_1 += pow ( $ X [ $ i ] - $ mean_ceil , 2 ) ; $ ans_2 += pow ( $ X [ $ i ] - $ mean_floor , 2 ) ; } echo min ( $ ans_1 , $ ans_2 ) ;
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ kakudo_hour = 30 * $ h + $ m * 0.5 ; $ kakudo_minute = 6 * $ m ; if ( $ kakudo_hour == 0 ) { $ kakudo_hour = 360 ; } if ( $ kakudo_minute == 0 ) { $ kakudo_minute = 360 ; } $ Theta = abs ( $ kakudo_hour - $ kakudo_minute ) ; $ distan = ( $ a ** 2 + $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ Theta ) ) ) ; $ distan = sqrt ( $ distan ) ; echo $ distan . " \n " ;
<?php list ( $ r ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ mapN [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ mapM [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ x = 0 ; $ x <= $ N - $ M ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ N - $ M ; $ y ++ ) { $ bool = true ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { if ( $ mapM [ $ i ] [ $ j ] != $ mapN [ $ x + $ i ] [ $ y + $ j ] ) { $ bool = false ; } } } if ( $ bool == true ) { echo " Yes \n " ; exit ; } } } echo " No \n " ;
<?php $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ A = fgets ( STDIN ) ; $ B = fgets ( STDIN ) ; $ C = fgets ( STDIN ) ; $ sum = fgets ( STDIN ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ A ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ B ; $ b ++ ) { for ( $ c = 0 ; $ c <= $ C ; $ c ++ ) { $ total = $ a * 500 + $ b * 100 + $ c * 50 ; if ( $ sum == $ total ) { $ count ++ ; } } } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ x ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ ans = PHP_INT_MAX ; for ( $ k = 0 ; $ k < $ N ; $ k ++ ) { for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ k === 0 ) { $ b [ 0 ] [ $ i ] = $ a [ $ i ] ; } else { $ b [ $ k ] [ $ i ] = min ( $ b [ $ k - 1 ] [ $ i ] , $ a [ ( $ i - $ k + $ N ) % $ N ] ) ; } } $ ans = min ( $ ans , array_sum ( $ b [ $ k ] ) + $ k * $ x ) ; } echo $ ans ;
<?php $ n = trim ( fgets ( STDIN ) ) ; if ( $ n >= 64 ) { echo 64 ; } elseif ( $ n >= 32 ) { echo 32 ; } elseif ( $ n >= 16 ) { echo 16 ; } elseif ( $ n >= 8 ) { echo 8 ; } elseif ( $ n >= 4 ) { echo 4 ; } elseif ( $ n >= 2 ) { echo 2 ; } else { echo 1 ; }
<?php $ s = preg_split ( ' print ($s[2] == $s[3] && $s[4] == $s[5]) ? "Yes" : "No";
<?php $ line = fgets ( STDIN ) ; if ( in_array ( $ line , [ " 5 5 7 \n " , " 5 7 5 \n " , " 7 5 5 \n " , ] , true , ) ) { echo " YES " ; } else { echo " NO " ; }
<?php $ input = fgets ( STDIN ) ; $ array = explode ( " " , $ input ) ; $ ans = " " ; foreach ( $ array as $ value ) { if ( $ value == 5 || $ value == 7 ) { $ ans += $ value ; } } echo ( $ ans == 17 ? " YES " : " NO " ) ;
<?php $ input_lines = trim ( fgets ( STDIN ) ) ; $ sLine1 = explode ( " " , $ input_lines ) ; $ a = ( int ) $ sLine1 [ 0 ] ; $ b = ( int ) $ sLine1 [ 1 ] ; echo $ b * pow ( ( $ b - 1 ) , ( $ a - 1 ) ) ; ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ aa = array_count_values ( $ a ) ; if ( $ aa [ 5 ] == 2 && $ aa [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ line = readline ( ) ; readline_add_history ( $ line ) ; $ x = intval ( $ line ) ; $ x = $ x * $ x * $ x ; print $ x ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ total = 800 * $ N ; $ discount = ( int ) ( $ N / 15 ) * 200 ; echo $ total - $ discount ; ?>
<?php $ s = fgets ( STDIN ) ; if ( $ s [ 2 ] === $ s [ 3 ] & $ s [ 4 ] === $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php error_reporting ( 0 ) ; $ N = trim ( fgets ( STDIN ) ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( in_array ( " Y " , $ S ) ) { printf ( " Four \n " ) ; } else { printf ( " Three \n " ) ; }
<?php $ N = fgets ( STDIN ) ; $ P = fgets ( STDIN ) ; $ arrayP = explode ( " " , $ P ) ; $ result = 1 ; $ min = $ arrayP [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ min >= $ arrayP [ $ i ] ) { $ min = $ arrayP [ $ i ] ; $ result ++ ; } } echo $ result ;
<?php fscanf ( STDIN , " %s " , $ S ) ; echo ( $ S [ 2 ] === $ S [ 3 ] && $ S [ 4 ] === $ S [ 5 ] ) ? ' Yes ' : ' No ' ;
<?php $ d = trim ( fgets ( STDIN ) ) ; echo $ d <= " 2019/04/30 " ? " Heisei " : " TBD " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ l = [ $ a , $ b , $ c ] ; $ s = [ 5 => 0 , 7 => 0 ] ; foreach ( $ l as $ v ) { if ( in_array ( $ v , [ 5 , 7 ] ) ) { $ s [ $ v ] ++ ; } else { echo " NO " ; exit ; } } if ( $ s [ 5 ] == 2 && $ s [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; }
<?php function mygets ( ) { return array_map ( intval , split ( ' ' , fgets ( STDIN ) ) ) ; } list ( $ n , $ x ) = mygets ( ) ; $ a = mygets ( ) ; $ b1 = $ a ; $ b2 = $ a ; $ ans = array_sum ( $ a ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ b2 [ $ j ] = min ( $ b1 [ ( $ j + $ n - 1 ) % $ n ] , $ a [ $ j ] ) ; } $ ans = min ( $ ans , $ i * $ x + array_sum ( $ b2 ) ) ; $ sw = & $ b1 ; $ b1 = & $ b2 ; $ b2 = & $ sw ; } echo $ ans , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ k ) ; fscanf ( STDIN , " %s " , $ s ) ; if ( strlen ( $ s ) <= $ k ) { echo $ s ; } else { echo substr ( $ s , 0 , $ k ) . ' ... ' ; }
<?php $ coin_500 = trim ( fgets ( STDIN ) ) ; $ coin_100 = trim ( fgets ( STDIN ) ) ; $ coin_50 = trim ( fgets ( STDIN ) ) ; $ price = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ coin_500 ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ coin_100 ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ coin_50 ; $ k ++ ) { $ sum = $ i * 500 + $ j * 100 + $ k * 50 ; if ( $ sum == $ price ) { $ count ++ ; } } } } echo $ count ;
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; $ answer = " Yes " ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ c [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ mmin = min ( $ c [ $ i ] ) ; foreach ( $ c [ $ i ] as $ k => $ v ) { $ c [ $ i ] [ $ k ] -= $ mmin ; } } for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ c [ 0 ] [ $ i ] != $ c [ 1 ] [ $ i ] || $ c [ 1 ] [ $ i ] != $ c [ 2 ] [ $ i ] ) { $ answer = " No " ; } } echo $ answer . PHP_EOL ;
<?php fscanf ( STDIN , " %s " , $ t ) ; $ c = 0 ; for ( $ i = 0 ; $ i < strlen ( $ t ) ; $ i ++ ) { if ( $ t [ $ i ] == ' ? ' ) { $ t [ $ i ] = ' D ' ; } } echo $ t ;
<?php list ( $ n , $ k ) = fscanf ( STDIN , " %d %d " ) ; echo $ k * pow ( $ k - 1 , $ n - 1 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ ballNum , $ colorNum ) ; $ oldColor = - 1 ; $ count = 0 ; $ Answer = $ colorNum ; for ( $ I = 2 ; $ I <= $ ballNum ; $ I ++ ) { $ Answer *= $ colorNum - 1 ; } echo $ Answer ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ num = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ num * $ num * $ num ; echo " \n " ; ?>
<?php $ A = explode ( ' ' , fgets ( STDIN ) ) ; $ B = explode ( ' ' , fgets ( STDIN ) ) ; $ C = explode ( ' ' , fgets ( STDIN ) ) ; $ c = 0 ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { if ( $ A [ $ i + 1 ] - $ A [ $ i ] == $ B [ $ i + 1 ] - $ B [ $ i ] && $ B [ $ i + 1 ] - $ B [ $ i ] == $ C [ $ i + 1 ] - $ C [ $ i ] ) { $ c ++ ; } } echo $ c == 2 ? " Yes " : " No " , " \n " ;
<?php $ input_num = intval ( fgets ( STDIN ) ) ; echo $ input_num * $ input_num * $ input_num . " \n " ;
<?php $ line = trim ( fgets ( STDIN ) ) ; echo intval ( $ line ) ** 3 ; ?>
<?php $ X = [ ] ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; usort ( $ X , function ( $ x , $ y ) { return ( $ x - 1 ) % 10 < ( $ y - 1 ) % 10 ; } ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ ans += ceil ( $ X [ $ i ] / 10 ) * 10 ; } $ ans += $ X [ 4 ] ; echo $ ans ;
<?php $ in = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ h1 = $ in [ 0 ] ; $ m1 = $ in [ 1 ] ; $ h2 = $ in [ 2 ] ; $ m2 = $ in [ 3 ] ; $ k = $ in [ 4 ] ; $ h = $ h2 - $ h1 ; $ m = $ m2 - $ m1 ; $ wakemin = $ h * 60 + $ m ; echo $ wakemin - $ k ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; if ( $ input [ 2 ] === $ input [ 3 ] && $ input [ 4 ] === $ input [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , " %d " , $ K ) ; $ S = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ S ) <= $ K ) { echo $ S ; } else { print substr ( $ S , 0 , $ K ) . " ... " ; } ?>
<?php fscanf ( STDIN , ' %d ' , $ x ) ; $ b = 0 ; while ( true ) { if ( preg_match ( ' /^[0-9]+$/ ' , $ a = pow ( $ x + pow ( $ b , 5 ) , 1 / 5 ) ) ) { echo $ a . ' ' . $ b . PHP_EOL ; break ; } if ( preg_match ( ' /^[0-9]+$/ ' , $ a = pow ( $ x - pow ( $ b , 5 ) , 1 / 5 ) ) ) { echo $ a . ' - ' . $ b . PHP_EOL ; break ; } ++ $ b ; } ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a * $ a ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo max ( $ a , $ b ) < 9 ? ' Yay! ' : ' :( ' ;
<?php $ input = fgets ( STDIN ) ; $ input_array = str_split ( $ input ) ; $ ans = " " ; foreach ( $ input_array as $ i => $ char ) { if ( $ char === " ? " ) { $ ans = $ ans . " D " ; } else { $ ans = $ ans . $ char ; } } echo $ ans ;
<?php $ input = explode ( " " , fgets ( STDIN ) ) ; $ K = intval ( $ input [ 0 ] ) ; $ S = intval ( $ input [ 1 ] ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - ( $ x + $ y ) ; if ( $ z <= $ K && 0 <= $ z ) { if ( $ x + $ y + $ z == $ S ) { $ count ++ ; } } } } echo $ count ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A === $ B ) { echo ' Draw ' ; } else if ( $ A === 1 || $ A > $ B && $ B !== 1 ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php $ S = trim ( fgets ( STDIN ) ) ; if ( $ S [ 2 ] == $ S [ 3 ] && $ S [ 4 ] == $ S [ 5 ] ) printf ( " Yes \n " ) ; else printf ( " No \n " ) ;
<?php fscanf ( STDIN , " %s " , $ a ) ; if ( $ a [ 2 ] == $ a [ 3 ] && $ a [ 4 ] == $ a [ 5 ] ) { echo ( " Yes " ) . PHP_EOL ; } else { echo ( " No " ) . PHP_EOL ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; pow ( 2 , $ i ) <= $ n ; $ i ++ ) { } echo pow ( 2 , $ i - 1 ) ; ?>
<?php fscanf ( STDIN , " %d " , $ s ) ; $ result = $ s * $ s ; echo $ result ; ?>
<?php fscanf ( STDIN , " %d " , $ qua ) ; for ( $ i = 1 ; $ i <= $ qua ; $ i ++ ) { fscanf ( STDIN , " %d " , $ numbers [ ] ) ; } $ large_order = $ numbers ; rsort ( $ large_order ) ; if ( $ large_order [ 0 ] === $ large_order [ 1 ] ) { for ( $ i = 0 ; $ i < $ qua ; $ i ++ ) { echo $ large_order [ 0 ] . " \n " ; } } else { for ( $ i = 0 ; $ i < $ qua ; $ i ++ ) { if ( $ numbers [ $ i ] === $ large_order [ 0 ] ) { echo $ large_order [ 1 ] ; } else { echo $ large_order [ 0 ] ; } echo " \n " ; } }
<?php fscanf ( STDIN , " %d%d%d%d " , $ A , $ B , $ H , $ M ) ; $ argH = ( $ H / 12 + $ M / 12 / 60 ) * 2 * pi ( ) ; $ argM = $ M / 60 * 2 * pi ( ) ; $ dx = $ A * cos ( $ argH ) - $ B * cos ( $ argM ) ; $ dy = $ A * sin ( $ argH ) - $ B * sin ( $ argM ) ; echo ( $ dx ** 2 + $ dy ** 2 ) ** 0.5 ;
<?php list ( $ coinA , $ coinB , $ price ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo ( ( $ coinA + $ coinB ) >= $ price ) ? ' Yes ' : ' No ' ;
<?php fscanf ( STDIN , " %d " , $ n ) ; echo 800 * $ n - 200 * floor ( $ n / 15 ) ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ b == 1 ) { echo 0 ; } elseif ( $ a < $ b ) { echo 1 ; } else { echo $ a - $ b ; }
<?php $ k_s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ k_s [ 0 ] ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k_s [ 0 ] ; $ j ++ ) { $ z = $ k_s [ 1 ] - $ i - $ j ; if ( $ z >= 0 && $ z <= $ k_s [ 0 ] ) { $ result ++ ; } } } echo $ result ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ a + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ b + 1 ; $ j ++ ) { for ( $ k = 0 ; $ k < $ c + 1 ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ ans ++ ; } } } } echo $ ans ; ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; $ a = floor ( $ N / 15 ) * 200 ; $ ans = $ N * 800 - $ a ; echo $ ans ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ aArray = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ array = [ [ ] , [ ] ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ array [ $ i % 2 ] [ ] = $ aArray [ $ i ] ; } $ resultArray = [ ] ; if ( $ N % 2 == 0 ) $ array = array_reverse ( $ array ) ; foreach ( $ array as $ i => $ arr ) { if ( $ i % 2 == 0 ) $ arr = array_reverse ( $ arr ) ; foreach ( $ arr as $ num ) { $ resultArray [ ] = $ num ; } } echo implode ( " " , $ resultArray ) ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ v ) ; fscanf ( STDIN , " %d%d " , $ b , $ w ) ; fscanf ( STDIN , " %d " , $ t ) ; if ( $ v > $ w && abs ( $ a - $ b ) <= ( $ v - $ w ) * $ t ) { echo " YES " ; } else { echo " NO " ; }
<?php $ num = trim ( fgets ( STDIN ) ) ; echo $ num ** 3 , PHP_EOL ;
<?php fscanf ( STDIN , ' %s %s %s ' , $ s [ 0 ] , $ s [ 1 ] , $ s [ 2 ] ) ; $ five_flag = 0 ; $ seven_flag = 0 ; foreach ( $ s as $ value ) { if ( $ value === " 5 " ) $ five_flag ++ ; if ( $ value === " 7 " ) $ seven_flag ++ ; } if ( $ seven_flag === 1 && $ five_flag === 2 ) echo ' YES ' ; else echo ' NO ' ; ?>
<?php list ( $ n ) = ints ( ) ; $ ans = 1 ; while ( $ ans * 2 <= $ n ) $ ans *= 2 ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php list ( $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( strlen ( $ s ) > $ k ) { $ a = substr ( $ s , 0 , $ k ) ; echo $ a . " ... " ; } else { echo $ s ; }
<?php $ x [ ] = trim ( fgets ( STDIN ) ) ; $ x [ ] = trim ( fgets ( STDIN ) ) ; $ x [ ] = trim ( fgets ( STDIN ) ) ; $ x [ ] = trim ( fgets ( STDIN ) ) ; $ x [ ] = trim ( fgets ( STDIN ) ) ; $ sum = 0 ; usort ( $ x , ' cmp ' ) ; foreach ( $ x as $ v ) { $ amari = $ sum % 10 ; if ( $ amari > 0 ) { $ sum += 10 - $ amari ; } $ sum += $ v ; } printf ( " %d \n " , $ sum ) ; function cmp ( $ a , $ b ) { $ aa = $ a % 10 ; $ bb = $ b % 10 ; if ( $ aa == 0 ) $ aa = 10 ; if ( $ bb == 0 ) $ bb = 10 ; return $ bb - $ aa ; }
<?php $ s = [ ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ s [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i <= 100 ; $ i ++ ) { $ a1 = $ i ; $ b1 = $ s [ 0 ] [ 0 ] - $ a1 ; if ( $ b1 < 0 ) continue ; $ b2 = $ s [ 0 ] [ 1 ] - $ a1 ; if ( $ b2 < 0 ) continue ; $ b3 = $ s [ 0 ] [ 2 ] - $ a1 ; if ( $ b3 < 0 ) continue ; $ a2 = $ s [ 1 ] [ 0 ] - $ b1 ; if ( $ a2 < 0 ) continue ; if ( $ a2 != $ s [ 1 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a2 != $ s [ 1 ] [ 2 ] - $ b3 ) { continue ; } $ a3 = $ s [ 2 ] [ 0 ] - $ b1 ; if ( $ a3 < 0 ) continue ; if ( $ a3 != $ s [ 2 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a3 != $ s [ 2 ] [ 2 ] - $ b3 ) { continue ; } echo " Yes " ; exit ; } echo " No " ;
<?php $ input = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ input [ 2 ] === $ input [ 3 ] && $ input [ 4 ] === $ input [ 5 ] ) { echo ' Yes ' ; return ; } echo ' No ' ; ?>
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ hs , $ ms , $ he , $ me , $ long ) ; $ dist = ( $ he * 60 + $ me ) - ( $ hs * 60 + $ ms ) ; if ( $ dist > $ long ) { echo $ dist - $ long ; } else { echo 0 ; }
<?php $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ tri = $ array [ 0 ] * $ array [ 0 ] * $ array [ 0 ] ; echo $ tri ; ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php $ antennas = [ ] ; for ( $ i = 0 ; $ i < 5 ; ++ $ i ) { $ antennas [ ] = trim ( fgets ( STDIN ) ) ; } fscanf ( STDIN , " %d " , $ k ) ; $ result = true ; for ( $ i = 0 ; $ i < 4 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < 5 ; ++ $ j ) { if ( $ antennas [ $ j ] - $ antennas [ $ i ] > $ k ) { $ result = false ; break ; } } } echo $ result ? ' Yay! ' : ' :( ' ;
<?php $ A = trim ( fgets ( STDIN ) ) ; $ B = trim ( fgets ( STDIN ) ) ; $ C = trim ( fgets ( STDIN ) ) ; $ X = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ X ) { $ count ++ ; } } } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ c = 0 ; $ min = max ( 0 , $ s - $ k * 2 ) ; for ( $ x = $ min ; $ x <= $ k ; $ x ++ ) { $ s1 = $ s - $ x ; if ( $ s1 < 0 ) break ; $ c += $ s1 - max ( 0 , $ s1 - $ k ) * 2 + 1 ; } echo $ c ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo $ a >= 13 ? $ b : ( $ a >= 6 ? $ b / 2 : 0 ) ;
<?php $ input = fgets ( STDIN ) ; echo $ input * $ input * $ input ; echo " \n " ;
<?php $ s = trim ( fgets ( STDIN ) ) ; echo $ s ** 2 ;
<?php fscanf ( STDIN , " %d %d " , $ H , $ W ) ; $ loadmap = [ ] ; for ( $ i = 0 ; $ i < $ H ; ++ $ i ) { $ loadmap [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ answer = 2000000000000000 ; for ( $ i = 0 ; $ i < $ H ; ++ $ i ) { for ( $ j = 0 ; $ j < $ W ; ++ $ j ) { $ tmp_sum = 0 ; for ( $ row = 0 ; $ row < $ H ; ++ $ row ) { for ( $ col = 0 ; $ col < $ W ; ++ $ col ) { $ tmp_sum += $ loadmap [ $ row ] [ $ col ] * min ( abs ( $ row - $ i ) , abs ( $ col - $ j ) ) ; } } $ answer = min ( $ answer , $ tmp_sum ) ; } } echo $ answer , " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a ) - min ( $ a ) ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo in_array ( " Y " , $ S ) ? " Four \n " : " Three \n " ;
<?php list ( $ N , $ W ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; While ( $ str = trim ( fgets ( STDIN ) ) ) { $ wv [ ] = explode ( " " , $ str ) ; } $ memo = [ ] ; $ max = 0 ; function dp ( $ i , $ maxW ) { global $ N , $ wv , $ memo ; if ( isset ( $ memo [ $ i ] [ $ maxW ] ) ) { return $ memo [ $ i ] [ $ maxW ] ; } if ( $ i == $ N ) { $ max = 0 ; } else if ( $ maxW < $ wv [ $ i ] [ 0 ] ) { $ max = dp ( $ i + 1 , $ maxW ) ; } else { $ max = max ( dp ( $ i + 1 , $ maxW ) , dp ( $ i + 1 , $ maxW - $ wv [ $ i ] [ 0 ] ) + $ wv [ $ i ] [ 1 ] ) ; } $ memo [ $ i ] [ $ maxW ] = $ max ; return $ max ; } echo dp ( 0 , $ W ) ;
<?php $ n = ( fgets ( STDIN ) ) ; echo pow ( $ n , 2 ) ;
<?php $ a ; fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 1 ; $ i <= 3500 ; $ i ++ ) { for ( $ j = 1 ; $ j <= 3500 ; $ j ++ ) { $ x = 4 * $ i * $ j - $ n * $ j - $ n * $ i ; $ y = $ i * $ j * $ n ; if ( $ x > 0 && $ y % $ x == 0 ) { echo " $ i $ j " , ( $ y / $ x ) , " \n " ; exit ; } } } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; echo $ k * ( $ k - 1 ) ** ( $ n - 1 ) , " \n " ;
<?php [ $ H1 , $ M1 , $ H2 , $ M2 , $ K ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; printf ( " %d " , $ H2 * 60 + $ M2 - ( $ H1 * 60 + $ M1 ) - $ K ) ;
<?php fscanf ( STDIN , " %d " , $ x ) ; echo $ x ** 3 , " \n " ;
<?php define ( ' MOD ' , 10 ** 9 + 7 ) ; fscanf ( STDIN , ' %d ' , $ n ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ ans = 0 ; for ( $ k = 0 ; $ k < 60 ; $ k ++ ) { $ cnt_1 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ a [ $ i ] >> $ k ) & 1 ) $ cnt_1 ++ ; } $ ans = modAdd ( $ ans , modMul ( modMul ( $ n - $ cnt_1 , $ cnt_1 ) , modPow ( 2 , $ k ) ) ) ; } echo $ ans . PHP_EOL ; function modAdd ( $ x , $ y ) { return ( $ x + $ y ) % MOD ; } function modSub ( $ x , $ y ) { return ( $ x + MOD - $ y ) % MOD ; } function modMul ( $ x , $ y ) { return ( $ x * $ y ) % MOD ; } function modDiv ( $ x , $ y ) { return modMul ( $ x , modPow ( $ y , MOD - 2 ) ) ; } function modPow ( $ n , $ x ) { if ( $ x === 0 ) return 1 ; $ res = ( modPow ( $ n , $ x >> 1 ) ** 2 ) % MOD ; if ( $ x % 2 === 1 ) $ res = modMul ( $ res , $ n ) ; return $ res ; }
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo $ a [ 0 ] + $ a [ 1 ] >= $ a [ 2 ] ? ' Yes ' : ' No ' ;
<?php fscanf ( STDIN , " %d " , $ k ) ; $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; foreach ( $ s as $ key => $ value ) { if ( $ key == $ k ) { echo ' ... ' ; exit ; } echo $ value ; }
<?php $ r = fgets ( STDIN ) ; echo $ r * $ r ?>
<?php fscanf ( STDIN , " %d " , $ r ) ; $ area = $ r * $ r ; $ answer = $ area / 1 ; echo ( int ) $ answer ; ?>
<?php fscanf ( STDIN , ' %s ' , $ s ) ; $ a = str_split ( $ s ) ; if ( $ a [ 2 ] == $ a [ 3 ] && $ a [ 4 ] == $ a [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; echo $ n * $ n ;
<?php $ array = [ ] ; fscanf ( STDIN , " %d %d %d %d " , $ array [ ' A ' ] , $ array [ ' B ' ] , $ array [ ' C ' ] , $ array [ ' D ' ] ) ; $ ab = $ array [ ' A ' ] * $ array [ ' B ' ] ; $ cd = $ array [ ' C ' ] * $ array [ ' D ' ] ; echo max ( $ ab , $ cd ) ; ?>
<?php $ answer = ( int ) trim ( fgets ( STDIN ) ) ; define ( ' MAX ' , 119 ) ; define ( ' MIN ' , - 118 ) ; for ( $ i = MIN ; $ i <= MAX ; $ i ++ ) { for ( $ n = MIN ; $ n <= MAX ; $ n ++ ) { $ check_answer = pow ( $ i , 5 ) - pow ( $ n , 5 ) ; if ( $ answer === $ check_answer ) { echo $ i . ' ' . $ n ; break 2 ; } } }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ args = [ ] ; $ args [ 0 ] = $ a ; $ args [ 1 ] = $ b ; $ args [ 2 ] = $ c ; $ i = NULL ; switch ( $ a ) { case 5.7 : $ a = $ args [ 0 ] ; break ; default : break ; } switch ( $ b ) { case 5.7 : $ b = $ args [ 0 ] ; break ; default : break ; } switch ( $ c ) { case 5.7 : $ c = $ args [ 0 ] ; break ; default : break ; } $ i = $ args [ 0 ] + $ args [ 1 ] + $ args [ 2 ] ; if ( $ i == 17 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ n_arr = array ( ) ; $ n_arr = explode ( " " , fgets ( STDIN ) ) ; $ ans = 0 ; $ CurMin = INF ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ CurMin = min ( $ CurMin , $ n_arr [ $ i ] ) ; if ( $ CurMin == $ n_arr [ $ i ] ) { $ ans ++ ; } } echo $ ans ; ?>
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ s [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ ans = ' Yay! ' ; $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i ; $ j < 5 ; $ j ++ ) { $ n = abs ( $ s [ $ i ] - $ s [ $ j ] ) ; if ( $ n > $ k ) { $ ans = ' :( ' ; break ; } } } echo $ ans ; ?>
<?php class MyTest { public function run ( ) { fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ ret = $ a - ( $ b - 1 ) ; echo " { $ ret } \n " ; } } MyTest :: run ( ) ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab > $ cd ) { echo $ ab ; } else { echo $ cd ; } ?>
<?php print pow ( trim ( fgets ( STDIN ) ) , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ number ) ; $ len = strlen ( $ number ) ; $ total = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ total += substr ( $ number , $ i , 1 ) ; } echo ( $ number % $ total == 0 ) ? ' Yes ' : ' No ' ;
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a === 1 ) { $ a = 14 ; } if ( $ b === 1 ) { $ b = 14 ; } if ( $ a > $ b ) { echo ' Alice ' ; } elseif ( $ a < $ b ) { echo ' Bob ' ; } else { echo ' Draw ' ; } echo PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ p1 = abs ( $ b - $ a ) + abs ( $ c - $ b ) ; $ p2 = abs ( $ c - $ a ) + abs ( $ b - $ c ) ; $ p3 = abs ( $ a - $ b ) + abs ( $ c - $ a ) ; $ p4 = abs ( $ c - $ b ) + abs ( $ a - $ c ) ; $ p5 = abs ( $ a - $ c ) + abs ( $ b - $ a ) ; $ p6 = abs ( $ b - $ c ) + abs ( $ a - $ b ) ; echo min ( $ p1 , $ p2 , $ p3 , $ p4 , $ p5 , $ p6 ) . PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = $ a [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ lcm = lcm ( $ lcm , $ a [ $ i ] ) ; if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function gcdAll ( $ arr ) { $ gcd = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ gcd = gcd ( $ gcd , $ arr [ $ i ] ) ; } return $ gcd ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; } function lcmAll ( $ arr ) { $ lcm = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ arr [ $ i ] ) ; } return $ lcm ; }
<?php $ N = fgets ( STDIN ) ; $ A = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = max ( $ A ) ; $ min = min ( $ A ) ; echo $ max - $ min ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ n = $ sc -> nextInt ( ) ; $ ref = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; arsort ( $ ref ) ; $ res = 0 ; for ( $ i = 0 ; $ i < count ( $ ref ) ; $ i ++ ) { if ( $ n >= $ ref [ $ i ] ) { $ res = $ ref [ $ i ] ; } } echo $ res ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ;
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( ! $ N ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += $ n ; echo $ s , PHP_EOL ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ input , 3 ) ; echo $ ans . PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ mean = round ( array_sum ( $ x ) / $ n ) ; $ total = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ dis = $ x [ $ i ] - $ mean ; $ total += $ dis * $ dis ; } echo $ total . " \n " ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ sum = ( $ i * 500 ) + ( $ j * 100 ) + ( $ k * 50 ) ; if ( $ x == $ sum ) { $ count ++ ; } } } } echo $ count . " \n " ;
<?php $ n = intval ( fgets ( STDIN ) ) - 1 ; $ val = explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; for ( $ i = $ n ; $ i >= 0 ; $ i -= 2 ) { echo $ val [ $ i ] . " " ; } for ( $ j = abs ( $ i + 1 ) ; $ j <= $ n ; $ j += 2 ) { echo $ val [ $ j ] . " " ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ sum = array_sum ( str_split ( $ n ) ) ; if ( $ n % $ sum == 0 ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ stdin = fgets ( STDIN ) ; $ x = ( int ) trim ( $ stdin ) ; echo pow ( $ x , 3 ) . PHP_EOL ;
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ D [ $ f ] + $ dist ; if ( $ D [ $ t ] > $ new ) { $ D [ $ t ] = $ new ; $ pq -> insert ( $ t , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php $ string = trim ( fgets ( STDIN ) ) ; if ( ( $ string [ 2 ] === $ string [ 3 ] ) and ( $ string [ 4 ] === $ string [ 5 ] ) ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ nums = explode ( ' ' , fgets ( STDIN ) ) ; echo ceil ( ( $ nums [ 0 ] + $ nums [ 1 ] ) / 2 ) ; ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; echo $ res ; ?>
<?php $ line = trim ( fgets ( STDIN ) ) ; $ line = explode ( ' ' , $ line ) ; $ a = $ line [ 0 ] ; $ b = $ line [ 1 ] ; $ hr = $ line [ 2 ] ; $ mn = $ line [ 3 ] ; $ short = $ hr ; $ long = $ mn ; $ hour = $ short <= 12 ? $ short : $ short - 12 ; $ minute = $ long ; $ rShort = ( $ hour * ( 360 / 12 ) ) + $ minute * 1 / 2 ; $ rLong = $ minute * ( 360 / 60 ) ; $ ang = abs ( $ rLong - $ rShort ) ; if ( $ ang == 360 ) { echo 0 ; exit ( ) ; } if ( $ ang > 180 ) { $ ang = 360 - $ ang ; } echo sqrt ( ( $ a * $ a ) + ( $ b * $ b ) - 2 * $ a * $ b * cos ( deg2rad ( $ ang ) ) ) ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; if ( $ a >= strlen ( $ b ) ) { echo $ b ; } else { echo substr ( $ b , 0 , $ a ) . " ... " ; }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input [ ] = trim ( fgets ( STDIN ) ) ; } $ q = trim ( fgets ( STDIN ) ) ; $ bool = false ; $ n = 1 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ n ; $ j < 5 ; $ j ++ ) { $ dis = $ input [ $ j ] - $ input [ $ i ] ; if ( $ dis > $ q ) { $ bool = true ; } } $ n ++ ; } if ( $ bool ) echo " :( " ; else echo " Yay! " ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ in = explode ( ' ' , fgets ( STDIN ) ) ; $ ans ; for ( $ i = 0 ; $ i < 100 ; $ i ++ ) { $ sum = 0 ; foreach ( $ in as $ v ) { $ sum += ( $ v - $ i ) ** 2 ; } $ ans [ ] = $ sum ; } echo min ( $ ans ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; if ( $ n === 1 ) echo 1 ; else if ( $ n < 4 ) echo 2 ; else if ( $ n < 8 ) echo 4 ; else if ( $ n < 16 ) echo 8 ; else if ( $ n < 32 ) echo 16 ; else if ( $ n < 64 ) echo 32 ; else echo 64 ;
<?php $ max = trim ( fgets ( STDIN ) ) ; $ words = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ words ) > $ max ) { $ words = substr ( $ words , 0 , $ max ) . ' ... ' ; } echo $ words . PHP_EOL ;
<?php $ five_hundred = trim ( fgets ( STDIN ) ) ; $ one_hundred = trim ( fgets ( STDIN ) ) ; $ fifty = trim ( fgets ( STDIN ) ) ; $ price = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ five_hundred ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ one_hundred ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ fifty ; $ k ++ ) { $ answer = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ answer == $ price ) { $ count = $ count + 1 ; } } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , ' %d ' , $ input ) ; echo $ input * $ input . " \n " ;
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; echo max ( $ a , $ b , $ c ) - min ( $ a , $ b , $ c ) ;
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= $ K && $ X <= $ S ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ K && $ Y <= $ S - $ X ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; if ( $ m === 0 ) { $ mc = 360 ; } else { $ mc = $ m * 360 / 60 ; } $ hc = ( $ h * 60 + $ m ) * 360 / ( 12 * 60 ) ; $ cos = abs ( $ hc - $ mc ) ; $ ans = $ a * $ a + $ b * $ b - ( 2 * $ a * $ b * cos ( deg2rad ( $ cos ) ) ) ; echo sqrt ( $ ans ) ; ?>
<?php $ C = [ ] ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { $ C [ ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } $ total_flg = false ; for ( $ x = 0 ; $ x <= 100 ; ++ $ x ) { $ a = [ ] ; $ b = [ ] ; $ a [ 0 ] = $ x ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) $ b [ $ i ] = $ C [ 0 ] [ $ i ] - $ a [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; ++ $ i ) $ a [ $ i ] = $ C [ $ i ] [ 0 ] - $ b [ 0 ] ; $ flg = true ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { for ( $ j = 0 ; $ j < 3 ; ++ $ j ) { if ( $ C [ $ i ] [ $ j ] != $ a [ $ i ] + $ b [ $ j ] ) { $ flg = false ; break 2 ; } } } $ total_flg |= $ flg ; } echo $ total_flg ? ' Yes ' : ' No ' , PHP_EOL ;
<?php $ z = fscanf ( STDIN , " %d %d " , $ n , $ k ) ; $ a = $ k * pow ( $ k - 1 , $ n - 1 ) ; print " $ a \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ q = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; foreach ( $ q as $ p ) { if ( $ n >= $ p ) exit ( " $ p " ) ; }
<?php $ K = ( int ) trim ( fgets ( STDIN ) ) ; $ S = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ S ) <= $ K ) { printf ( " %s \n " , $ S ) ; } else { printf ( " %s... \n " , substr ( $ S , 0 , $ K ) ) ; }
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ 0 ] [ $ j ] - $ c [ 0 ] [ 0 ] != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php while ( $ line = fgets ( STDIN ) ) { $ array [ ] = trim ( $ line ) ; for ( $ i = 0 ; $ i < count ( $ array ) ; $ i ++ ) { $ array [ $ i ] = ( int ) $ array [ $ i ] ; } } $ large_yen = $ array [ 0 ] ; $ middle_yen = $ array [ 1 ] ; $ small_yen = $ array [ 2 ] ; $ balance = $ array [ 3 ] ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ large_yen ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ middle_yen ; $ b ++ ) { for ( $ c = 0 ; $ c <= $ small_yen ; $ c ++ ) { $ total = $ a * 500 + $ b * 100 + $ c * 50 ; if ( $ total == $ balance ) $ count ++ ; } } } echo ( $ count ) ;
<?php while ( true ) { $ received_num = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ received_num [ 0 ] == 0 ) { break ; } echo array_sum ( $ received_num ) . PHP_EOL ; }
<?php ini_set ( ' memory_limit ' , ' 1024M ' ) ; $ sc = new Scanner ( ) ; $ N = $ sc -> nextInt ( ) ; $ P = $ sc -> nextInt ( ) ; if ( $ N == 1 ) { echo $ P . PHP_EOL ; exit ; } if ( $ P == 1 ) { echo 1 . PHP_EOL ; exit ; } $ result = get_prime_factors ( $ P ) ; $ ans = 1 ; foreach ( $ result as $ k => $ v ) { $ ans *= pow ( $ k , ( int ) ( $ v / $ N ) ) ; } echo $ ans . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function get_prime_factors ( $ N ) { $ result = [ ] ; for ( $ i = 2 ; $ i * $ i <= $ N ; $ i ++ ) { if ( $ N % $ i == 0 ) { while ( $ N % $ i == 0 ) { $ result [ $ i ] ++ ; $ N /= $ i ; } } } if ( $ N > 1 ) { $ result [ $ N ] ++ ; $ N /= $ N ; } return $ result ; }
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as $ to ) { $ new = $ D [ $ f ] + $ to [ 1 ] ; if ( $ D [ $ to [ 0 ] ] > $ new ) { $ D [ $ to [ 0 ] ] = $ new ; $ pq -> insert ( $ to [ 0 ] , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; sort ( $ array ) ; $ first = $ array [ 0 ] - $ array [ 1 ] ; $ second = $ array [ 1 ] - $ array [ 2 ] ; echo abs ( $ first ) + abs ( $ second ) ; ?>
<?php $ stdins = array ( ) ; while ( true ) { $ stdin = trim ( fgets ( STDIN ) ) ; if ( $ stdin === ' 0 ' ) { foreach ( $ return as $ value ) { echo $ value . PHP_EOL ; } return ; } else { $ n = $ stdin ; $ y = trim ( fgets ( STDIN ) ) ; $ max = 0 ; $ num = null ; for ( $ n ; 0 < $ n ; $ n -- ) { list ( $ b , $ r , $ t ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ t == 1 ) { $ money = 1 + $ y * ( $ r / 100 ) ; } else { $ money = pow ( 1 + ( $ r / 100 ) , $ y ) ; } if ( $ max < $ money ) { $ max = $ money ; $ num = $ b ; } } $ return [ ] = $ num ; } $ stdins [ ] = $ stdin ; } ?>
<?php fscanf ( STDIN , ' %d%d ' , $ N , $ K ) ; $ count = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { if ( $ i == 1 ) { $ count *= $ K ; } else { $ count *= ( $ K - 1 ) ; } } echo $ count ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ d = [ ] ; foreach ( $ a as $ k => $ v ) { $ d [ $ k ] = $ a [ $ k ] - $ b [ $ k ] ; } $ plus = [ ] ; $ minus = [ ] ; foreach ( $ d as $ i ) { if ( $ i > 0 ) { $ plus [ ] = $ i ; } elseif ( $ i < 0 ) { $ minus [ ] = $ i ; } } if ( array_sum ( $ d ) < 0 ) { echo - 1 . " \n " ; } elseif ( count ( $ minus ) == 0 ) { echo 0 . " \n " ; } else { arsort ( $ plus ) ; $ sum_minus = array_sum ( $ minus ) ; $ s = 0 ; $ cnt = 0 ; foreach ( $ plus as $ p ) { $ cnt ++ ; $ s += $ p ; if ( $ s >= - $ sum_minus ) { break ; } } echo count ( $ minus ) + $ cnt . " \n " ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ a , 3 ) ; echo $ result . " \n " ;
<?php do { $ input = preg_split ( ' if(0 == $input[0]) { break; } $cnt = count($input); $sum = 0; for($loop_cnt = 0; $loop_cnt < $cnt; $loop_cnt++) { $sum += $input[$loop_cnt]; } echo $sum . "\n"; }while(1); ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ rad = pi ( ) * ( ( $ h + $ m / 60 ) / 6 - $ m / 30 ) ; $ c2 = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( $ rad ) ; echo sqrt ( $ c2 ) ;
<?php fscanf ( STDIN , ' %d ' , $ r ) ; echo $ r ** 2 ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ e = preg_split ( ' /\s/ ' , fgets ( STDIN ) ) ; $ en = [ $ e [ 0 ] ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ en [ $ i ] = min ( $ en [ $ i - 1 ] , $ e [ $ i ] ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ ii = $ e [ $ i ] ; $ ij = $ en [ $ i ] ; if ( $ ii <= $ ij ) $ cnt ++ ; } echo $ cnt ;
<?php list ( $ n , $ m ) = ints ( ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) list ( $ a [ ] ) = strs ( ) ; $ bb = ' ' ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ b [ ] ) = strs ( ) ; $ bb .= $ b [ $ i ] ; } for ( $ i = 0 ; $ i <= $ n - $ m ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ n - $ m ; ++ $ j ) { $ aa = ' ' ; for ( $ k = 0 ; $ k < $ m ; ++ $ k ) $ aa .= substr ( $ a [ $ k + $ i ] , $ j , $ m ) ; if ( $ aa === $ bb ) exit ( ' Yes ' ) ; } } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php [ $ a , $ b , $ h , $ m ] = array_map ( function ( string $ string ) : int { return ( int ) $ string ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ Î± = 2 * M PI * a s(6 0 * $ - 1 * $ ) / 1 / 6 ; e ho s rt($ a * 2 + $ * 2 - 2 * $ * $ * c s($ Î ± ));
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = 1 ; for ( $ i = 1 ; $ a <= $ n / 2 ; $ i ++ ) { $ a = $ a * 2 ; } echo pow ( 2 , $ i - 1 ) ; ?>
<?php $ a = intval ( trim ( fgets ( STDIN ) ) ) ; preg_match_all ( " ([0-9]) " , $ a , $ m ) ; if ( $ a % array_sum ( $ m [ 0 ] ) === 0 ) { echo " Yes " . " \n " ; } else { echo " No " . " \n " ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ ans = 0 ; $ a_s = $ x / 500 ; for ( $ i = 0 ; $ i <= $ a_s ; $ i ++ ) { $ x_1 = $ x - 500 * $ i ; $ b_s = $ x_1 / 100 ; for ( $ j = 0 ; $ j <= $ b_s ; $ j ++ ) { $ x_2 = $ x_1 - 100 * $ j ; $ c_3 = $ x_2 / 50 ; if ( $ c_3 <= $ c && $ j <= $ b && $ i <= $ a ) { $ ans += 1 ; } } } echo $ ans . " \n " ; ?>
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ xs [ ] = trim ( fgets ( STDIN ) ) ; } fscanf ( STDIN , ' %d ' , $ k ) ; echo max ( $ xs ) - min ( $ xs ) > $ k ? ' :( ' : ' Yay! ' , PHP_EOL ;
<?php list ( $ n ) = ints ( ) ; for ( $ a = 1 ; $ a <= 3500 ; ++ $ a ) { for ( $ b = $ a ; $ b <= 3500 ; ++ $ b ) { $ x = $ n * $ a * $ b ; $ y = 4 * $ a * $ b - $ n * ( $ a + $ b ) ; if ( $ y > 0 && $ x % $ y === 0 ) { $ c = intdiv ( $ x , $ y ) ; break 2 ; } } } echo implode ( ' ' , [ $ a , $ b , $ c ] ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ b = $ a ; rsort ( $ b ) ; $ sai = $ b [ 0 ] ; $ sai1 = $ b [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ sai != $ a [ $ i ] ) { echo $ sai . PHP_EOL ; } else { echo $ sai1 . PHP_EOL ; } } ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A < 9 && $ B < 9 ) { echo " Yay! " . " \n " ; } else { echo " :( " . " \n " ; } ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ suff = 0 ; $ ovr = 0 ; $ S = 0 ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ suff ++ ; $ S += $ B [ $ i ] - $ A [ $ i ] ; } else { $ arr [ ] = $ A [ $ i ] - $ B [ $ i ] ; $ ovr += $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ suff === 0 ) { $ ans = 0 ; } else if ( $ ovr < $ S ) { $ ans = - 1 ; } else { sort ( $ arr ) ; $ ans = $ suff ; while ( $ S > 0 ) { $ ans ++ ; $ tmp = array_pop ( $ arr ) ; $ S -= $ tmp ; } } echo $ ans ;
<?php list ( $ a ) = ints ( ) ; list ( $ b ) = ints ( ) ; list ( $ c ) = ints ( ) ; list ( $ x ) = ints ( ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { if ( $ i * 500 + $ j * 100 > $ x ) continue ; $ rest = $ x - $ i * 500 - $ j * 100 ; if ( $ rest % 50 === 0 && $ rest / 50 <= $ c ) $ cnt ++ ; } } echo $ cnt ; ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ x [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i < $ j ) { $ tmp = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) $ tmp += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; if ( sqrt ( $ tmp ) == ( int ) sqrt ( $ tmp ) ) $ ans ++ ; } } echo $ ans ; ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ total = fgets ( STDIN ) ; $ num = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ sum = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ sum == $ total ) { $ num ++ ; } } } } echo $ num ;
<?php $ res = 0 ; $ min = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input = rtrim ( fgets ( STDIN ) ) ; $ last = intval ( substr ( $ input , - 1 ) ) ; if ( $ last === 0 ) { $ res += intval ( $ input ) / 10 ; } else { $ min = intval ( $ last ) < $ min ? $ last : $ min ; $ res += ceil ( intval ( $ input ) / 10 ) ; } } $ res = ( $ res * 10 ) + $ min - 10 ; echo $ res ; ?>
<?php $ number = trim ( fgets ( STDIN ) ) ; $ log = log ( $ number , 2 ) ; $ log = ( int ) $ log ; echo pow ( 2 , $ log ) ; echo " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; echo max ( $ A , $ B ) <= 8 ? " Yay! " : " :( " , " \n " ;
<?php $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ s ) ; $ ret = $ s [ 0 ] . $ s [ 3 ] . $ s [ 2 ] . $ s [ 1 ] ; echo ( $ ret == 1974 ) ? ' YES ' : ' NO ' ;
<?php list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ A <= 5 ) { $ B = 0 ; } else if ( $ A <= 12 ) { $ B = $ B / 2 ; } printf ( " %d \n " , $ B ) ;
<?php fscanf ( STDIN , ' %d%d%d ' , $ A1 , $ A2 , $ A3 ) ; $ min = min ( $ A1 , $ A2 , $ A3 ) ; $ max = max ( $ A1 , $ A2 , $ A3 ) ; echo $ max - $ min ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ arr_2 = [ ] ; $ result = [ ] ; $ count = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ s = $ i + 1 ; $ s < $ n ; $ s ++ ) { for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ arr_2 [ ] = ( abs ( ( $ arr [ $ i ] [ $ j ] ) - ( $ arr [ $ s ] [ $ j ] ) ) ) ** 2 ; } } } for ( $ l = 0 ; $ l < ( count ( $ arr_2 ) / $ d ) ; $ l ++ ) { $ k = $ l * $ d ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ d ; $ i ++ ) { $ sum = $ sum + $ arr_2 [ $ k + $ i ] ; $ result [ $ l ] = sqrt ( $ sum ) ; } } for ( $ i = 0 ; $ i < count ( $ result ) ; $ i ++ ) { if ( preg_match ( ' /^[0-9]+$/ ' , $ result [ $ i ] ) ) { $ count ++ ; } } echo $ count ; ?>
<?php $ r = ( int ) trim ( fgets ( STDIN ) ) ; print $ r * $ r ; ?>
<?php $ arr = explode ( ' ' , fgets ( STDIN ) ) ; $ age = ( int ) $ arr [ 0 ] ; $ price = ( int ) $ arr [ 1 ] ; if ( $ age <= 5 ) { echo 0 . PHP_EOL ; exit ; } elseif ( 6 <= $ age && $ age <= 12 ) { echo ( $ price / 2 ) . PHP_EOL ; exit ; } else { echo $ price . PHP_EOL ; exit ; }
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( substr ( $ s , 2 , 1 ) == substr ( $ s , 3 , 1 ) && substr ( $ s , 4 , 1 ) == substr ( $ s , 5 , 1 ) ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; } ?>
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { list ( $ x , $ y ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ X [ ] = $ x ; $ Y [ ] = $ y ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { if ( $ i == $ j ) continue ; $ dis [ ] = sqrt ( ( ( ( $ X [ $ i ] - $ X [ $ j ] ) ** 2 ) + ( ( $ Y [ $ i ] - $ Y [ $ j ] ) ** 2 ) ) ) ; } } echo ( $ N - 1 ) * ( array_sum ( $ dis ) / count ( $ dis ) ) . " \n " ; ?>
<?php $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ sum = 0 ; $ maxLeft = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ sum += ceil ( $ a [ $ i ] / 10 ) * 10 ; $ maxLeft = max ( ceil ( $ a [ $ i ] / 10 ) * 10 - $ a [ $ i ] , $ maxLeft ) ; } echo $ sum - $ maxLeft ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x ** 3 . PHP_EOL ;
<?php while ( true ) { $ stdin = trim ( fgets ( STDIN ) ) ; if ( $ stdin === ' ' ) { break ; } $ val = explode ( ' , ' , $ stdin ) ; $ number = $ val [ 0 ] ; $ weight = $ val [ 1 ] ; $ height = $ val [ 2 ] ; $ bmi = $ weight / ( $ height * $ height ) ; if ( $ bmi >= 25 ) { printf ( " %d \n " , $ number ) ; } }
<?php list ( $ a , $ b , $ h , $ m ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ angle = abs ( ( 30 * $ h + 1 / 2 * $ m ) - 6 * $ m ) ; if ( $ angle > 180 ) { $ angle = 360 - $ angle ; } $ ans = sqrt ( pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( $ angle * pi ( ) / 180 ) ) ; printf ( " %.20f " , $ ans ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ array = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ array [ 2 ] === $ array [ 3 ] && $ array [ 4 ] === $ array [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; print $ x * $ x * $ x . " \n " ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; if ( $ a * $ b >= $ c * $ d ) { print $ a * $ b ; } else { print $ c * $ d ; }
<?php fscanf ( STDIN , " %d " , $ k ) ; fscanf ( STDIN , " %s " , $ s ) ; if ( strlen ( $ s ) <= $ k ) { echo $ s . PHP_EOL ; } else { $ dot = substr ( $ s , 0 , $ k ) ; echo $ dot . " ... " . PHP_EOL ; }
<?php while ( true ) { $ stdin = preg_split ( ' if ($stdin[1] == 0) return; print(array_sum($stdin) . "\n"); }
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ tasks = [ $ a , $ b , $ c ] ; sort ( $ tasks ) ; echo abs ( $ tasks [ 0 ] - $ tasks [ 1 ] ) + abs ( $ tasks [ 1 ] - $ tasks [ 2 ] ) ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ x ) ; for ( $ i = - 1000 ; $ i <= 1000 ; ++ $ i ) { for ( $ j = - 1000 ; $ j <= 1000 ; ++ $ j ) { if ( $ x == pow ( $ i , 5 ) - pow ( $ j , 5 ) ) { break 2 ; } } } echo " $ i $ j " ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ ho , $ mo , $ he , $ me , $ k ) ; $ o = $ ho * 60 + $ mo ; $ e = $ he * 60 + $ me ; $ ans = $ e - $ o - $ k ; if ( $ ans > 0 ) { echo $ ans ; } else { echo 0 ; }
<?php list ( $ n , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ k == 1 ) { echo 0 ; } else { echo $ n - $ k ; }
<?php fscanf ( STDIN , " %d%d%d " , $ c1 , $ c2 , $ c3 ) ; fscanf ( STDIN , " %d%d%d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d%d%d " , $ c31 , $ c32 , $ c33 ) ; $ diff_11 = $ c1 - $ c2 ; $ diff_21 = $ c21 - $ c22 ; $ diff_31 = $ c31 - $ c32 ; $ diff_1 = $ c2 - $ c3 ; $ diff_2 = $ c22 - $ c23 ; $ diff_3 = $ c32 - $ c33 ; if ( $ diff_11 == $ diff_21 && $ diff_21 == $ diff_31 && $ diff_1 == $ diff_2 && $ diff_2 == $ diff_3 ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php $ menus = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ menus [ ] = fgets ( STDIN ) ; } $ diff_count = 0 ; $ max = 0 ; $ diff_list = array ( ) ; foreach ( $ menus as $ key => $ menu ) { for ( $ i = 0 ; $ i < 9 ; $ i ++ ) { if ( ( $ menu + $ diff_count ) % 10 == 0 ) { break ; } $ diff_count ++ ; } $ diff_list [ $ key ] = $ diff_count ; $ diff_count = 0 ; } asort ( $ diff_list ) ; foreach ( $ diff_list as $ key => $ diff ) { $ sum += $ menus [ $ key ] + $ diff ; } echo $ sum - $ diff_list [ $ key ] . " \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ ] = ( int ) trim ( fgets ( STDIN ) ) ; } $ b = $ a ; $ max = max ( $ a ) ; rsort ( $ b ) ; $ k = $ max ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ max = $ k ; if ( $ max == $ a [ $ i ] ) { $ max = $ b [ 1 ] ; } echo $ max . " \n " ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A == $ B ) { echo " Draw " ; die ( ) ; } if ( $ A == 1 ) { echo " Alice " ; die ( ) ; } if ( $ B == 1 ) { echo " Bob " ; die ( ) ; } if ( $ A > $ B ) { echo " Alice " ; die ( ) ; } else { echo " Bob " ; die ( ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a_li = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ re = ' ' ; for ( $ i = count ( $ a_li ) - 1 ; $ i >= 0 ; $ i -= 2 ) { echo $ a_li [ $ i ] . " " ; } if ( count ( $ a_li ) % 2 == 0 ) { for ( $ i = 0 ; $ i < count ( $ a_li ) ; $ i += 2 ) { echo $ a_li [ $ i ] . " " ; } } else { for ( $ i = 1 ; $ i < count ( $ a_li ) ; $ i += 2 ) { echo $ a_li [ $ i ] . " " ; } }
<?php $ a = [ ] ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < count ( $ a ) - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < count ( $ a ) ; $ j ++ ) { if ( abs ( $ a [ $ i ] - $ a [ $ j ] ) > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ;
<?php $ l = [ ] ; while ( $ r = trim ( fgets ( STDIN ) ) ) $ l [ ] = $ r ; $ l [ 1 ] = explode ( " " , $ l [ 1 ] ) ; echo max ( $ l [ 1 ] ) - min ( $ l [ 1 ] ) ;
<?php $ A = fgets ( STDIN ) ; $ B = fgets ( STDIN ) ; $ C = fgets ( STDIN ) ; $ X = fgets ( STDIN ) ; $ cnt = 0 ; $ i = 0 ; $ j = 0 ; $ k = 0 ; while ( $ i <= $ A ) { $ en = 500 * $ i ; if ( $ en == $ X ) $ cnt ++ ; if ( $ en >= $ X ) { break ; } else { while ( $ j <= $ B ) { $ en = 500 * $ i + 100 * $ j ; if ( $ en == $ X ) $ cnt ++ ; if ( $ en >= $ X ) { break ; } else { while ( $ k <= $ C ) { $ en = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ en == $ X ) $ cnt ++ ; if ( $ en >= $ X ) { break ; } $ k ++ ; } } $ k = 0 ; $ j ++ ; } $ j = 0 ; $ i ++ ; } } echo $ cnt ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ hangle = $ h == 0 ? 360 : 360 / 12 * $ h ; if ( $ m !== 0 ) { $ mangle = $ m == 0 ? 360 : 360 / 60 * $ m ; $ hangle += 360 / 12 / 60 * $ m ; } if ( $ hangle == $ mangle ) { echo " 0 " . PHP_EOL ; exit ; } else if ( $ hangle > $ mangle ) { $ angle = $ hangle - $ mangle ; } else { $ angle = $ mangle - $ hangle ; } if ( $ angle == 90 ) { echo sqrt ( ( $ a ** 2 ) + ( $ b ** 2 ) ) . PHP_EOL ; } else { echo sqrt ( ( $ a ** 2 ) + ( $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ angle ) ) ) ) ; }
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo $ s [ 0 ] <= 8 && $ s [ 1 ] <= 8 ? ' Yay! ' : ' :( ' ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; $ result = $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? " YES " : " NO " ; echo ( $ result ) ;
<?php fscanf ( STDIN , " %s " , $ n ) ; for ( $ i = 0 ; $ i < strlen ( $ n ) ; $ i ++ ) { $ sum += $ n [ $ i ] ; } if ( $ n % $ sum == 0 ) { echo " Yes " ; } else { echo " No " ; }
<?php $ X = fgets ( STDIN ) ; for ( $ i = - 200 ; $ i <= 200 ; $ i ++ ) { for ( $ j = - 200 ; $ j <= 200 ; $ j ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ X ) { break 2 ; } } } echo $ i . ' ' . $ j . PHP_EOL ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab >= $ cd ) { echo $ ab ; } else { echo $ cd ; } ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , " %d " , $ r ) ; $ d = ( int ) ( $ r * $ r ) ; echo $ d ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ time_from = strtotime ( ' 2020-05-31 ' . $ h1 . " : " . $ m1 ) ; $ time_to = strtotime ( ' 2020-05-31 ' . $ h2 . " : " . $ m2 ) ; $ diff_time = ( $ time_to - $ time_from ) / 60 ; echo ( $ diff_time - $ k ) ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ h1 = $ sc -> nextInt ( ) ; $ m1 = $ sc -> nextInt ( ) ; $ h2 = $ sc -> nextInt ( ) ; $ m2 = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; $ a = $ h1 * 60 ; $ b = $ h2 * 60 ; $ a1 = $ a + $ m1 ; $ b1 = $ b + $ m2 ; $ calc = $ b1 - $ a1 - $ k ; echo $ calc ;
<?php fscanf ( STDIN , " %s " , $ a ) ; if ( $ a <= ' 2019/04/30 ' ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; echo ( 800 * $ n - floor ( $ n / 15 ) * 200 ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a * $ a ;
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ array [ 0 ] ; $ b = ( int ) $ array [ 1 ] ; $ price = 0 ; if ( $ a >= 13 ) { $ price = $ b ; echo " { $ price } \n " ; } elseif ( $ a >= 6 && $ a <= 12 ) { $ price = $ b / 2 ; echo " { $ price } \n " ; } else { $ price = 0 ; echo " { $ price } \n " ; } ?>
<?php list ( $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo str_replace ( " ? " , " D " , $ s ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo ( $ n * $ n ) . PHP_EOL ;
<?php while ( true ) { $ x = fgets ( STDIN ) ; if ( $ x == 0 ) break ; $ x = str_split ( $ x ) ; $ sum = 0 ; foreach ( $ x as $ num ) { $ sum += $ num ; } print " $ sum \n " ; }
<?php $ a = [ ] ; for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { array_push ( $ a , intval ( trim ( fgets ( STDIN ) ) ) ) ; } if ( $ a [ 4 ] - $ a [ 0 ] <= $ a [ 5 ] ) { echo ' Yay! ' ; } else { echo ' :( ' ; } echo PHP_EOL ;
<?php $ n = ( int ) trim ( fgets ( STDIN ) ) ; $ a_map = [ ] ; $ as = [ ] ; $ max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ as [ ] = $ a ; if ( isset ( $ a_map [ $ a ] ) ) { $ a_map [ $ a ] += 1 ; } else { $ a_map [ $ a ] = 1 ; } $ max = max ( $ max , $ a ) ; } $ as_sorted = $ as ; rsort ( $ as_sorted ) ; $ result = [ ] ; foreach ( $ as as $ v ) { if ( $ v === $ max ) { if ( $ a_map [ $ v ] > 1 ) { $ result [ ] = $ max ; } else { $ result [ ] = $ as_sorted [ 1 ] ; } } else { $ result [ ] = $ max ; } } echo implode ( PHP_EOL , $ result ) ;
<?php $ eat_count = trim ( fgets ( STDIN ) ) ; $ price = $ eat_count * 800 ; if ( $ eat_count / 15 > 0 ) $ price -= intval ( $ eat_count / 15 ) * 200 ; echo $ price ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a == $ b ) { echo " Draw " ; } elseif ( $ a > $ b ) { echo " Alice " ; } else { echo " Bob " ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 1 ; $ i <= $ M ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a [ $ i ] , $ b [ $ i ] , $ c [ $ i ] ) ; } for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) { if ( $ i == $ j ) { $ dist [ $ i ] [ $ j ] = 0 ; } else { $ dist [ $ i ] [ $ j ] = INF ; } } } for ( $ i = 1 ; $ i <= $ M ; $ i ++ ) { $ dist [ $ a [ $ i ] ] [ $ b [ $ i ] ] = $ c [ $ i ] ; $ dist [ $ b [ $ i ] ] [ $ a [ $ i ] ] = $ c [ $ i ] ; } for ( $ k = 1 ; $ k <= $ N ; $ k ++ ) { for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) { if ( $ dist [ $ i ] [ $ k ] + $ dist [ $ k ] [ $ j ] < $ dist [ $ i ] [ $ j ] ) { $ dist [ $ i ] [ $ j ] = $ dist [ $ i ] [ $ k ] + $ dist [ $ k ] [ $ j ] ; $ dist [ $ j ] [ $ i ] = $ dist [ $ i ] [ $ k ] + $ dist [ $ k ] [ $ j ] ; } } } } $ ans = 0 ; for ( $ i = 1 ; $ i <= $ M ; $ i ++ ) { if ( $ dist [ $ a [ $ i ] ] [ $ b [ $ i ] ] < $ c [ $ i ] ) { $ ans ++ ; } } echo $ ans ;
<?php $ r = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ r ** 2 ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ x , $ y ) ; $ chart_points [ $ i ] = [ ' x ' => $ x , ' y ' => $ y ] ; } function dfs ( $ ranged_n , $ array = " " ) { $ result = [ ] ; if ( count ( $ ranged_n ) == 0 ) { $ result [ ] = $ array ; } else { foreach ( $ ranged_n as $ key => $ val ) { $ _array = $ array . $ val ; $ _ranged_n = $ ranged_n ; unset ( $ _ranged_n [ $ key ] ) ; $ pre_result = dfs ( $ _ranged_n , $ _array ) ; $ result = array_merge ( $ result , $ pre_result ) ; } } return $ result ; } $ ranged_n = range ( 1 , $ n ) ; $ pattern_s = dfs ( $ ranged_n ) ; $ distance = 0 ; foreach ( $ pattern_s as $ pattern ) { $ splited_pattern = str_split ( $ pattern ) ; $ i = 0 ; while ( $ i < $ n - 1 ) { $ flg = $ splited_pattern [ $ i ] ; $ flg2 = $ splited_pattern [ $ i + 1 ] ; $ distance += sqrt ( pow ( ( $ chart_points [ $ flg ] [ ' x ' ] - $ chart_points [ $ flg2 ] [ ' x ' ] ) , 2 ) + pow ( ( $ chart_points [ $ flg ] [ ' y ' ] - $ chart_points [ $ flg2 ] [ ' y ' ] ) , 2 ) ) ; $ i ++ ; } } echo $ distance / count ( $ pattern_s ) ;
<?php $ input = trim ( fgets ( STDIN ) ) ; if ( $ input [ 2 ] === $ input [ 3 ] && $ input [ 4 ] === $ input [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , ' %d %d ' , $ dot_num , $ dim_num ) ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { $ input_line = rtrim ( fgets ( STDIN ) ) ; $ dots [ ] = explode ( ' ' , $ input_line ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ dot_num ; $ j ++ ) { if ( distZ ( $ dots [ $ i ] , $ dots [ $ j ] ) ) { $ cnt ++ ; } } } echo $ cnt ; function distZ ( $ x , $ y ) { $ pdt = 0 ; foreach ( $ x as $ key => $ value ) { $ pdt += ( $ value - $ y [ $ key ] ) ** 2 ; } $ sqrt = $ pdt ** ( 1 / 2 ) ; if ( $ sqrt - ( int ) $ sqrt == 0 ) { return true ; } else { return false ; } }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ P = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = $ P [ 0 ] ; $ ans = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ P [ $ i ] < $ min ) { $ ans ++ ; $ min = $ P [ $ i ] ; } } echo $ ans ;
<?php while ( ( $ nums = trim ( fgets ( STDIN ) ) ) !== ' ' ) { if ( $ nums === ' 0 ' ) break ; $ arr = str_split ( $ nums ) ; echo array_sum ( $ arr ) . " \n " ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ num = intval ( $ stdin ) ; $ ans = $ num * $ num * $ num ; print ( " { $ ans } \n " ) ;
<?php $ num = fgets ( STDIN ) ; echo pow ( $ num , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ k ) ; fscanf ( STDIN , " %s " , $ s ) ; if ( strlen ( $ s ) <= $ k ) { echo $ s ; } else { echo substr ( $ s , 0 , $ k ) , " ... " ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a <= 5 ) { $ result = 0 ; } elseif ( $ a <= 12 ) { $ result = $ b / 2 ; } else { $ result = $ b ; } echo $ result , PHP_EOL ;
<?php $ m = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ t [ $ i ] = trim ( fgets ( STDIN ) ) ; if ( ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] > $ m ) { $ m = ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] ; $ mk = $ i ; } } $ l = $ t [ $ mk ] ; unset ( $ t [ $ mk ] ) ; $ t = array_values ( $ t ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ t ) ; $ i ++ ) { $ sum += ceil ( $ t [ $ i ] / 10 ) * 10 ; } echo $ sum + $ l ; ?>
<?php $ input = fgets ( STDIN ) ; if ( $ input [ 2 ] == $ input [ 3 ] && $ input [ 4 ] == $ input [ 5 ] ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php while ( fscanf ( STDIN , " %d %d " , $ a , $ b ) > 0 ) { echo $ a + $ b . " \n " ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k != 1 ) { echo $ n - $ k ; } else { echo 0 ; }
<?php $ hanter = fgets ( STDIN ) ; $ hanter = str_replace ( PHP_EOL , ' ' , $ hanter ) ; list ( $ hanterZ , $ hanterV ) = preg_split ( ' /\s+/ ' , $ hanter ) ; $ runner = fgets ( STDIN ) ; $ runner = str_replace ( PHP_EOL , ' ' , $ runner ) ; list ( $ runnerZ , $ runnerV ) = preg_split ( ' /\s+/ ' , $ runner ) ; $ distance = abs ( $ hanterZ - $ runnerZ ) ; $ V = $ hanterV - $ runnerV ; $ chaceTime = fgets ( STDIN ) ; if ( $ V <= 0 && $ distance > 0 ) { echo " NO " ; exit ( ) ; } $ tijimaruKyori = ( int ) $ chaceTime * ( int ) $ V ; if ( $ tijimaruKyori >= $ distance ) { echo " YES " ; exit ( ) ; } echo " NO " ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ p_list = array ( ) ; $ p_list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = $ p_list [ 0 ] ; $ count = 1 ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ max >= $ p_list [ $ i ] ) { $ count ++ ; $ max = $ p_list [ $ i ] ; } } echo $ count . " \n " ;
<?php $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { echo " ACL " ; } ?>
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; echo PHP_EOL ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 1 ; $ max = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { $ div2 = 0 ; $ x = $ i ; while ( $ x % 2 == 0 && $ x > 1 ) { $ div2 ++ ; $ x = $ x / 2 ; } if ( $ max < $ div2 ) { $ ans = $ i ; $ max = $ div2 ; } } echo $ ans ;
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ at = $ a ; rsort ( $ at ) ; $ m = $ at [ 0 ] ; $ sm = $ at [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i !== 0 ) echo " \n " ; if ( $ a [ $ i ] == $ m ) { echo $ sm ; } else { echo $ m ; } } ?>
<?php function dfs ( $ first , $ last ) { if ( count ( $ last ) === 0 ) { return [ $ first ] ; } $ res = [ ] ; foreach ( $ last as $ key => $ val ) { $ next_f = $ first ; $ next_l = $ last ; $ next_f [ ] = $ val ; array_splice ( $ next_l , $ key , 1 ) ; $ res = array_merge ( $ res , dfs ( $ next_f , $ next_l ) ) ; } return $ res ; } function next_permutation ( $ start , $ end ) { return dfs ( [ ] , range ( $ start , $ end ) ) ; } fscanf ( STDIN , " %d " , $ n ) ; $ x_arr = [ ] ; $ y_arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ x_arr [ ] = $ inputs [ 0 ] ; $ y_arr [ ] = $ inputs [ 1 ] ; } $ perms = next_permutation ( 1 , $ n ) ; $ sum = 0 ; foreach ( $ perms as $ perm ) { for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ a = $ perm [ $ i ] - 1 ; $ b = $ perm [ $ i + 1 ] - 1 ; $ sum += sqrt ( pow ( $ x_arr [ $ a ] - $ x_arr [ $ b ] , 2 ) + pow ( $ y_arr [ $ a ] - $ y_arr [ $ b ] , 2 ) ) ; } } function factorial ( $ n ) { if ( $ n === 1 ) { return 1 ; } return $ n * factorial ( $ n - 1 ) ; } echo $ sum / factorial ( $ n ) ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ K ) ; $ L = max ( $ A , $ B , $ C , $ D , $ E ) - min ( $ A , $ B , $ C , $ D , $ E ) ; if ( $ L <= $ K ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php list ( $ s ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( substr ( $ s , 2 , 1 ) !== substr ( $ s , 3 , 1 ) ) { echo ' No ' ; } elseif ( substr ( $ s , 4 , 1 ) !== substr ( $ s , 5 , 1 ) ) { echo ' No ' ; } else { echo ' Yes ' ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ B = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { printf ( " %d \n " , - 1 ) ; exit ; } $ goukaku = true ; $ amari = array ( ) ; $ husoku = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ goukaku = false ; $ husoku [ ] = $ B [ $ i ] - $ A [ $ i ] ; } if ( $ A [ $ i ] > $ B [ $ i ] ) { $ amari [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ goukaku ) { printf ( " %d \n " , 0 ) ; exit ; } rsort ( $ amari ) ; $ s = array_sum ( $ husoku ) ; $ total = count ( $ husoku ) ; foreach ( $ amari as $ v ) { $ s = $ s - $ v ; $ total ++ ; if ( $ s < 0 ) break ; } printf ( " %d \n " , $ total ) ;
<?php $ input = trim ( fgets ( STDIN ) ) ; list ( $ n , $ m ) = explode ( ' ' , $ input ) ; $ inputs = [ ] ; $ count = 0 ; while ( $ count < $ m ) { $ input = trim ( fgets ( STDIN ) ) ; list ( $ p , $ y ) = explode ( ' ' , $ input ) ; $ inputs [ $ p ] [ $ y ] = $ count ; $ count ++ ; } $ results = [ ] ; foreach ( $ inputs as $ p => $ input ) { ksort ( $ input ) ; $ cities = array_values ( $ input ) ; $ id = 1 ; foreach ( $ cities as $ i => $ count ) { $ results [ $ count ] [ ' p ' ] = $ p ; $ results [ $ count ] [ ' c ' ] = $ id ; $ id ++ ; } } ksort ( $ results ) ; foreach ( $ results as $ result ) { echo str_pad ( ( string ) $ result [ ' p ' ] , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( ( string ) $ result [ ' c ' ] , 6 , " 0 " , STR_PAD_LEFT ) . " \n " ; }
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; print ( ( $ a + $ b + 1 ) >> 1 ) ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; $ s = trim ( fgets ( STDIN ) ) ; $ arr = explode ( " " , $ s ) ; for ( $ i = $ N ; $ i <= 99999 ; $ i ++ ) { $ istr = ( string ) $ i ; $ posall = false ; for ( $ m = 0 ; $ m < $ K ; $ m ++ ) { $ pos = strpos ( $ istr , $ arr [ $ m ] ) ; if ( $ pos !== false ) { $ posall = true ; } } if ( $ posall === false ) { echo $ istr . " \n " ; break ; } }
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ kind = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ kind [ ] = $ s [ $ i ] ; } $ k = count ( array_unique ( $ kind ) ) ; if ( $ k == 3 ) { echo " Three \n " ; } else { echo " Four \n " ; }
<?php $ ans = 0 ; fscanf ( STDIN , " %d " , $ N ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ ans += sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; } } $ toori = f ( $ N ) ; $ toori_path = $ toori * ( $ N - 1 ) ; $ pattern = $ N * ( $ N - 1 ) / 2 ; $ unit = $ toori_path / $ pattern ; $ total = $ unit * $ ans ; echo $ total / $ toori ; function f ( $ N ) { $ ret = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ ret *= $ i ; } return $ ret ; }
<?php $ s = trim ( fgets ( STDIN ) ) ; $ date = strtotime ( date ( " Y/m/d " , strtotime ( $ s ) ) ) ; $ date_2 = strtotime ( " 2019/04/30 " ) ; $ ans = $ date <= $ date_2 ? ' Heisei ' : ' TBD ' ; echo $ ans . " \n " ; ?>
<?php class STD { static function input ( ) { $ line = trim ( fgets ( STDIN ) ) ; return $ line ; } static function output ( $ text ) { echo $ text . " \n " ; } } function cost ( $ str ) { return - intval ( $ str , 36 ) + 36 ; } $ s = STD :: input ( ) ; $ n = intval ( STD :: input ( ) ) ; $ len = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( cost ( $ s [ $ i ] ) <= $ n && $ s [ $ i ] != ' a ' ) { $ n -= cost ( $ s [ $ i ] ) ; $ s [ $ i ] = ' a ' ; } } if ( $ n > 0 ) { $ diff = $ n % 26 ; for ( $ g = 0 ; $ g < $ diff ; $ g ++ ) { $ str = $ s [ $ len - 1 ] ; $ s [ $ len - 1 ] = ++ $ str ; } } STD :: output ( $ s ) ; ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( max ( $ A , $ B ) <= 8 ) { echo ' Yay! ' ; } else { echo ' :( ' ; }
<?php list ( $ N , $ K ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ amari = $ N - $ K ; if ( $ K == 1 ) $ amari = 0 ; printf ( " %d \n " , $ amari ) ;
<?php $ in = [ ] ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ k ) ; $ ans = " Yay! " ; for ( $ i = 0 ; $ i < count ( $ in ) - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < count ( $ in ) ; $ j ++ ) { if ( $ in [ $ j ] - $ in [ $ i ] > $ k ) { $ ans = " :( " ; break ; } } } echo $ ans ;
<?php function createPermutation ( $ n , $ r ) { if ( ! $ r || $ n < $ r ) { return array ( ) ; } $ return = array ( ) ; $ n2 = $ n - 1 ; if ( $ r == 1 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ return [ ] = array ( $ i ) ; } return $ return ; } foreach ( createPermutation ( $ n2 , $ r ) as $ row ) { $ return [ ] = $ row ; } foreach ( createPermutation ( $ n2 , $ r - 1 ) as $ row ) { for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { $ return [ ] = array_merge ( array_slice ( $ row , 0 , $ i ) , array ( $ n2 ) , array_slice ( $ row , $ i ) ) ; } } return $ return ; } fscanf ( STDIN , " %d " , $ in_n ) ; for ( $ i = 0 ; $ i < $ in_n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ in_x [ $ i ] , $ in_y [ $ i ] ) ; } $ kyori_goukei = 0 ; $ arr_junban = createPermutation ( $ in_n , $ in_n ) ; foreach ( $ arr_junban as $ junban ) { for ( $ i = 0 ; $ i < ( $ in_n - 1 ) ; $ i ++ ) { $ kyori_goukei = $ kyori_goukei + ( sqrt ( pow ( abs ( $ in_x [ $ junban [ $ i ] ] - $ in_x [ $ junban [ $ i + 1 ] ] ) , 2 ) + pow ( abs ( $ in_y [ $ junban [ $ i ] ] - $ in_y [ $ junban [ $ i + 1 ] ] ) , 2 ) ) ) ; } } $ ans = $ kyori_goukei / ( count ( $ arr_junban ) ) ; echo " $ ans \n " ; ?>
<?php [ $ H1 , $ M1 , $ H2 , $ M2 , $ K ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; printf ( " %d " , $ H2 * 60 + $ M2 - ( $ H1 * 60 + $ M1 ) - $ K ) ;
<?php $ X = ( int ) trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 1000 ; $ i ++ ) { $ a [ ] = $ i ** 5 ; } for ( $ i = 0 ; $ i < 1000 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 1000 - 1 ; $ j ++ ) { if ( $ a [ $ j ] - $ a [ $ i ] == $ X ) { printf ( " %d %d \n " , $ j , $ i ) ; break ; } if ( ( $ a [ $ j ] * - 1 ) - $ a [ $ i ] == $ X ) { printf ( " %d %d \n " , - $ j , $ i ) ; break ; } if ( $ a [ $ j ] - $ a [ $ i ] * - 1 == $ X ) { printf ( " %d %d \n " , $ j , - $ i ) ; break ; } } }
<?php $ input = fgets ( STDIN ) ; echo $ output = $ input * $ input * $ input ; ?>
<?php fscanf ( STDIN , " %d " , $ num ) ; for ( $ i = - 6208 ; $ i < 6209 ; $ i ++ ) { $ array [ $ i ] = ( int ) pow ( $ i , 5 ) ; } foreach ( $ array as $ key => $ value ) { $ target = binarySearch ( $ value , $ num , - 6208 , 6208 ) ; if ( $ target !== false ) { echo $ key . " " . $ target ; exit ; } } function binarySearch ( $ n , $ target , $ min , $ max ) { global $ array ; $ pivot = $ min + intdiv ( $ max - $ min , 2 ) ; if ( $ n - $ array [ $ pivot ] < $ target ) { if ( $ pivot == $ min ) { return false ; } if ( $ n - $ array [ $ pivot - 1 ] > $ target ) { return false ; } elseif ( $ n - $ array [ $ pivot - 1 ] == $ target ) { return $ pivot - 1 ; } else { if ( $ pivot - 1 == $ min ) { return false ; } return ( binarySearch ( $ n , $ target , $ min , $ pivot ) ) ; } } elseif ( $ n - $ array [ $ pivot ] > $ target ) { if ( $ pivot == $ max ) { return false ; } if ( $ n - $ array [ $ pivot + 1 ] < $ target ) { return false ; } elseif ( $ n - $ array [ $ pivot + 1 ] == $ target ) { return $ pivot + 1 ; } else { if ( $ pivot + 1 == $ max ) { return false ; } return ( binarySearch ( $ n , $ target , $ pivot , $ max ) ) ; } } else { return $ pivot ; } } function array_last ( array $ array ) { return end ( $ array ) ; }
<?= fgets ( STDIN ) ** 2 ;
<?php $ cnt = 0 ; $ arr = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ arr as $ val ) { if ( $ val == 5 ) { $ cnt ++ ; } } if ( $ cnt == 2 ) echo " YES " ; else echo " NO " ; ?>
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php while ( 1 ) { $ a = trim ( fgets ( STDIN ) ) ; if ( $ a == 0 ) break ; $ num = str_split ( $ a ) ; echo array_sum ( $ num ) , PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ sum = 0 ; for ( $ i = 0 ; $ i <= $ K && $ i <= $ S ; ++ $ i ) { $ d = $ S - $ i ; if ( $ d > 2 * $ K ) { continue ; } $ sum += min ( $ K , $ d ) - max ( $ d - $ K , 0 ) + 1 ; } print " $ sum \n " ;
<?php $ a = trim ( fgets ( STDIN ) ) ; echo $ a * $ a * $ a . " \n " ;
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ b = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' ' , $ b ) ; $ unique = array_unique ( $ array ) ; echo ( count ( $ unique ) == 3 ) ? ' Three ' : ' Four ' ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . PHP_EOL ;
<?php $ input_line = trim ( fgets ( STDIN ) ) ; $ num = intval ( $ input_line ) ; $ ans = pow ( $ num , 3 ) ; echo " { $ ans } " . PHP_EOL ;
<?php $ base = 1 ; fscanf ( STDIN , " %d %d " , $ N , $ P ) ; if ( $ N == 1 ) { echo $ P ; return 0 ; } if ( $ N > 50 ) { echo ' 1 ' ; return 0 ; } while ( pow ( $ base , $ N ) <= $ P ) { if ( $ P % ( pow ( $ base , $ N ) ) == 0 ) { $ ans = $ base ; } $ base ++ ; } echo $ ans ;
<?php $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ flag = true ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { if ( $ map [ $ i ] [ 1 ] - $ map [ $ i ] [ 0 ] != $ map [ $ i + 1 ] [ 1 ] - $ map [ $ i + 1 ] [ 0 ] ) $ flag = false ; if ( $ map [ $ i ] [ 2 ] - $ map [ $ i ] [ 1 ] != $ map [ $ i + 1 ] [ 2 ] - $ map [ $ i + 1 ] [ 1 ] ) $ flag = false ; if ( $ map [ 1 ] [ $ i ] - $ map [ 0 ] [ $ i ] != $ map [ 1 ] [ $ i + 1 ] - $ map [ 0 ] [ $ i + 1 ] ) $ flag = false ; if ( $ map [ 2 ] [ $ i ] - $ map [ 1 ] [ $ i ] != $ map [ 2 ] [ $ i + 1 ] - $ map [ 1 ] [ $ i + 1 ] ) $ flag = false ; } echo $ flag ? " Yes " : " No " ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; if ( $ a >= strlen ( $ b ) ) { echo $ b ; } else { echo substr ( $ b , 0 , $ a ) . " ... " ; }
<?php fscanf ( STDIN , ' %d %d ' , $ A , $ B ) ; echo round ( ( $ A + $ B ) / 2 ) ; echo PHP_EOL ;
<?php $ inp = fgets ( STDIN ) ; $ n = ( int ) $ inp ; $ inp = fgets ( STDIN ) ; $ t = explode ( " " , $ inp ) ; $ t = array_map ( function ( $ a ) { return ( int ) $ a ; } , $ t ) ; $ ans = 1e20 ; for ( $ int = 0 ; $ int <= 100 ; $ int ++ ) { $ score = 0 ; foreach ( $ t as $ x ) { $ score += pow ( ( $ int - $ x ) , 2 ) ; } $ ans = min ( $ score , $ ans ) ; } echo ( $ ans ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sumA = 0 ; foreach ( $ a as $ val ) { $ sumA += $ val ; } $ sumB = 0 ; foreach ( $ b as $ val ) { $ sumB += $ val ; } if ( $ sumA < $ sumB ) { echo " -1 " ; exit ; } $ lessThanNum = 0 ; $ differenceMinusSum = 0 ; $ differencePlusArr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] < $ b [ $ i ] ) { $ lessThanNum ++ ; $ differenceMinusSum += ( $ b [ $ i ] - $ a [ $ i ] ) ; } else { $ differencePlusArr [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } } $ echoNum = $ lessThanNum ; if ( $ echoNum == 0 ) { echo $ echoNum ; exit ; } rsort ( $ differencePlusArr ) ; foreach ( $ differencePlusArr as $ val ) { $ echoNum ++ ; if ( $ val >= $ differenceMinusSum ) { break ; } else { $ differenceMinusSum -= $ val ; } } echo $ echoNum ; exit ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) ; ?>
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ areas [ 0 ] = $ nums [ 0 ] * $ nums [ 1 ] ; $ areas [ 1 ] = $ nums [ 2 ] * $ nums [ 3 ] ; echo $ areas [ 0 ] > $ areas [ 1 ] ? $ areas [ 0 ] : $ areas [ 1 ] ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ deg_m = 360 / 60 * $ m ; $ deg_h = ( $ h * 60 + $ m ) * 360 / ( 12 * 60 ) ; $ deg = $ deg_h - $ deg_m ; $ answer = pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( deg2rad ( $ deg ) ) ; echo sqrt ( $ answer ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_list = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ avg = array_sum ( $ x_list ) / count ( $ x_list ) ; $ ans1 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) floor ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; $ ans2 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) ceil ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; echo min ( $ ans1 , $ ans2 ) ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 5 ) { } else { $ temp = array ( ) ; foreach ( $ values as $ value ) { if ( ! isset ( $ temp [ $ value ] ) ) { $ temp [ $ value ] = 1 ; } else { $ temp [ $ value ] ++ ; } } ksort ( $ temp ) ; $ ret = ' null ' ; foreach ( $ temp as $ t ) { if ( $ t == 4 ) { $ ret = ' four card ' ; } elseif ( $ t == 3 ) { if ( $ ret == ' one pair ' ) { $ ret = ' full house ' ; } else { $ ret = ' three card ' ; } } elseif ( $ t == 2 ) { if ( $ ret == ' one pair ' ) { $ ret = ' two pair ' ; } elseif ( $ ret == ' three card ' ) { $ ret = ' full house ' ; } else { $ ret = ' one pair ' ; } } } $ temp = array_keys ( $ temp ) ; if ( count ( $ temp ) == 5 && $ temp [ 4 ] - $ temp [ 0 ] == 4 ) { $ ret = ' straight ' ; } $ temp2 = array ( ) ; foreach ( $ temp as $ t ) { if ( $ t == 1 ) { $ temp2 [ ] = 14 ; } else { $ temp2 [ ] = $ t ; } } sort ( $ temp2 ) ; if ( count ( $ temp2 ) == 5 && $ temp2 [ 4 ] - $ temp2 [ 0 ] == 4 ) { $ ret = ' straight ' ; } echo $ ret . " \n " ; } }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; } fscanf ( STDIN , " %d " , $ k ) ; if ( $ d [ 4 ] - $ d [ 0 ] > $ k ) { echo ' :( ' , PHP_EOL ; exit ; } echo ' Yay! ' , PHP_EOL ;
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php $ str = fgets ( STDIN ) ; $ arr = str_split ( $ str ) ; if ( $ arr [ 2 ] == $ arr [ 3 ] && $ arr [ 4 ] == $ arr [ 5 ] ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; printf ( $ a * $ a * $ a . " \n " ) ;
<?php $ input = fgets ( STDIN ) ; $ age_price = explode ( " " , $ input ) ; if ( $ age_price [ 0 ] >= 13 ) { echo $ age_price [ 1 ] ; } elseif ( $ age_price [ 0 ] <= 12 && $ age_price [ 0 ] >= 6 ) { echo $ age_price [ 1 ] / 2 ; } else { echo 0 ; }
<?php list ( $ n , $ k ) = explode ( " " , fgets ( STDIN ) ) ; echo $ n - $ k + 1 . " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; $ ans = $ x * $ x * $ x ; echo " $ ans \n " ;
<?php # å ¥å fscanf(STDIN, '%d', $n); $a = []; $max = 0; $max2 = 0; $max_key = []; foreach(range(0, $n - 1) as $i) { $n = intval(trim(fgets(STDIN))); $a[] = $n; if ($max < $n) { $max2 = $max; $max = $n; $max_key = [$i]; } elseif($max2 < $n) { $max2 = $n; } elseif($max === $n) { $max_key[] = $i; } } $cnt_max = count($max_key); foreach($a as $i => $v) { if ($cnt_max === 1 && in_array($i, $max_key)) { echo($max2.PHP_EOL); } else { echo($max.PHP_EOL); } } ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; if ( $ K == 1 ) { echo " 0 \n " ; return ; } echo ( $ N - $ K ) . " \n " ;
<?php $ n = ints ( ) ; sort ( $ n ) ; echo $ n === [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( ( $ z >= 0 ) && ( $ z <= $ k ) ) { $ cnt ++ ; } } } echo $ cnt ; echo " \n " ; ?>
<?php fscanf ( STDIN , " %n " , $ n ) ; While ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ s_rsort = $ stdin ; rsort ( $ s_rsort ) ; if ( $ s_rsort [ 0 ] == $ s_rsort [ 1 ] ) { foreach ( $ stdin as $ v ) { echo $ s_rsort [ 0 ] , PHP_EOL ; } } else { foreach ( $ stdin as $ v ) { if ( $ v == $ s_rsort [ 0 ] ) { echo $ s_rsort [ 1 ] , PHP_EOL ; } else { echo $ s_rsort [ 0 ] , PHP_EOL ; } } }
<?php fscanf ( STDIN , " %d%d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X [ ] = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ j = 0 ; $ j < $ N - 1 ; $ j ++ ) { for ( $ k = $ j + 1 ; $ k < $ N ; $ k ++ ) { $ ans = 0 ; for ( $ d = 0 ; $ d < $ D ; $ d ++ ) { $ dis = ( abs ( $ X [ $ j ] [ $ d ] - $ X [ $ k ] [ $ d ] ) ) ** 2 ; $ ans += $ dis ; } if ( ( sqrt ( $ ans ) ) == intval ( sqrt ( $ ans ) ) ) { $ count ++ ; } } } echo $ count ; ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) $ cnt += $ i * 500 + $ j * 100 + $ k * 50 == $ x ; echo $ cnt ;
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = $ this -> lineIn ( ) ; if ( 2018 >= ( $ s [ 0 ] . $ s [ 1 ] . $ s [ 2 ] . $ s [ 3 ] ) ) { echo " Heisei \n " ; return true ; } else if ( 2020 <= ( $ s [ 0 ] . $ s [ 1 ] . $ s [ 2 ] . $ s [ 3 ] ) ) { echo " TBD \n " ; return false ; } else { if ( 0 == $ s [ 5 ] ) { switch ( $ s [ 6 ] ) { case ( 1 ) : case ( 2 ) : case ( 3 ) : case ( 4 ) : echo " Heisei \n " ; return true ; break ; default : echo " TBD \n " ; return false ; break ; } } else { echo " TBD \n " ; return false ; } } } } ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = 0 ; $ max2 = 0 ; $ x = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ a ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x [ ] = $ a ; if ( $ a > $ max ) { $ max2 = $ max ; $ max = $ a ; } else if ( $ a > $ max2 ) { $ max2 = $ a ; } } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ x [ $ i ] == $ max ) { echo $ max2 ; } else { echo $ max ; } echo PHP_EOL ; }
<?php fscanf ( STDIN , " %d " , $ K ) ; fscanf ( STDIN , " %s " , $ S ) ; if ( strlen ( $ S ) <= $ K ) { echo $ S ; } else if ( strlen ( $ S ) > $ K ) { $ kiritori = substr ( $ S , 0 , $ K ) ; echo $ kiritori . ' ... ' ; }
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ city = [ ] ; $ p = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ p [ $ i ] , $ y [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ city [ $ y [ $ i ] ] = $ p [ $ i ] ; } ksort ( $ city ) ; $ pref = [ ] ; $ prefcnt = [ ] ; foreach ( $ city as $ key => $ val ) { if ( ! isset ( $ pref [ $ val ] ) ) { $ pref [ $ val ] = [ ] ; $ prefcnt [ $ val ] = 0 ; } $ prefcnt [ $ val ] ++ ; $ pref [ $ val ] [ $ key ] = $ prefcnt [ $ val ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { echo str_pad ( $ p [ $ i ] , 6 , " 0 " , STR_PAD_LEFT ) ; echo str_pad ( $ pref [ $ p [ $ i ] ] [ $ y [ $ i ] ] , 6 , " 0 " , STR_PAD_LEFT ) ; echo PHP_EOL ; }
<?php declare ( strict_types = 1 ) ; fscanf ( STDIN , " %i " , $ n ) ; $ xs = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ys = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { for ( $ j = $ n ; $ j > 0 ; $ j -= 2 ) { $ ys [ $ i ++ ] = $ xs [ $ j - 1 ] ; } for ( $ j = $ n % 2 ; $ j < $ n ; $ j += 2 ) { $ ys [ $ i ++ ] = $ xs [ $ j ] ; } } echo implode ( " " , $ ys ) , PHP_EOL ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ average = ( $ a + $ b ) / 2 ; echo ceil ( $ average ) ; echo " \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ exists = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) { $ exists ++ ; } } } printf ( " %d \n " , $ exists ) ; ?>
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = fscanf ( STDIN , ' %d %d %d %d %d ' ) ; $ wakemin = $ h1 * 60 + $ m1 - ( $ h2 * 60 + $ m2 ) ; echo - $ wakemin - $ k ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php $ h = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ h ) ; if ( implode ( " " , $ h ) == " 1479 " ) { printf ( " YES \n " ) ; } else { printf ( " NO \n " ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ca = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ c = 0 ; $ t = $ i ; while ( $ t > 0 ) { if ( $ t % 2 !== 0 ) { break ; } else if ( $ t % 2 == 0 ) { $ c ++ ; $ t = $ t / 2 ; } } $ ca = $ ca + array ( $ i => $ c ) ; } $ max = max ( $ ca ) ; echo array_keys ( $ ca , $ max ) [ 0 ] ; ?>
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ( max ( $ a ) - min ( $ a ) ) . PHP_EOL ;
<?php $ input = trim ( file_get_contents ( ' php: echo $input ** 3, PHP_EOL;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b . " \n " ; } elseif ( $ a <= 12 && $ a >= 6 ) { echo ( $ b / 2 ) . " \n " ; } else { echo ( 0 ) . " \n " ; } ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ cnt ++ ; } } } } echo $ cnt ;
<?php $ num = ( int ) trim ( fgets ( STDIN ) ) ; echo ( $ num * $ num * $ num ) . PHP_EOL ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a > 8 || $ b > 8 ) { echo " :( " ; } else { echo " Yay! " ; }
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ a + $ b >= $ c ? " Yes " : " No " ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ s [ 1 ] , $ s [ 2 ] , $ s [ 3 ] , $ s [ 4 ] ) ; if ( in_array ( 1 , $ s ) && in_array ( 9 , $ s ) && in_array ( 7 , $ s ) && in_array ( 4 , $ s ) ) echo " YES " ; else echo " NO " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a <= 5 ) { $ b = 0 ; } elseif ( $ a <= 12 ) { $ b /= 2 ; } echo $ b ;
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == ' 7 ' && $ b == ' 5 ' && $ c == ' 5 ' ) { echo " YES " ; } else if ( $ a == ' 5 ' && $ b == ' 7 ' && $ c == ' 5 ' ) { echo " YES " ; } else if ( $ a == ' 5 ' && $ b == ' 5 ' && $ c == ' 7 ' ) { echo " YES " ; } else { echo " NO " ; }
<?php $ n = int ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ a [ ] , $ b [ ] ) = ints ( ) ; } $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i != $ j ) { $ sum += $ l [ $ i ] [ $ j ] = sqrt ( ( $ a [ $ i ] - $ a [ $ j ] ) ** 2 + ( $ b [ $ i ] - $ b [ $ j ] ) ** 2 ) ; } } } echo $ sum / $ n ; function str ( ) { return trim ( fgets ( STDIN ) ) ; } function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; } function o ( ... $ val ) { if ( count ( $ val ) == 1 ) $ val = array_shift ( $ val ) ; $ trace = debug_backtrace ( ) ; echo $ trace [ 0 ] [ ' line ' ] . " ) " ; if ( is_array ( $ val ) ) { if ( count ( $ val ) == 0 ) { echo " empty array " ; } elseif ( ! is_array ( current ( $ val ) ) ) { echo " array: " ; echo implode ( " " , $ val ) . " \n " ; } else { echo " array:array \n " ; foreach ( $ val as $ row ) { echo implode ( " " , $ row ) . " \n " ; } } } else { echo $ val . " \n " ; } }
<?php fscanf ( STDIN , " %d %d %d %d " , $ in [ 1 ] , $ in [ 2 ] , $ in [ 3 ] , $ in [ 4 ] ) ; $ result ; $ result += ( array_search ( ' 1 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 4 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 7 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 9 ' , $ in ) != FALSE ) ? 1 : 0 ; echo ( $ result == 4 ) ? " YES " : " NO " ;
<?php fscanf ( STDIN , " %d " , $ i ) ; echo $ i * $ i * $ i . " \n " ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = ceil ( ( $ a + $ b ) / 2 ) ; echo $ ans ; ?>
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if a - b > k || b - a > k { fmt . Println ( " " ) return } if a - c > k || c - a > k { fmt . Println ( " " ) return } if a - d > k || d - a > k { fmt . Println ( " " ) return } if a - e > k || e - a > k { fmt . Println ( " " ) return } if b - c > k || c - b > k { fmt . Println ( " " ) return } if b - d > k || d - b > k { fmt . Println ( " " ) return } if b - e > k || e - b > k { fmt . Println ( " " ) return } if c - d > k || d - c > k { fmt . Println ( " " ) return } if c - e > k || e - c > k { fmt . Println ( " " ) return } if d - e > k || e - d > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var N , a int fmt . Scan ( & N ) min := 1000 max := 0 for i := 0 ; i < N ; i ++ { fmt . Scan ( & a ) if min > a { min = a } if max < a { max = a } } ans := max - min fmt . Printf ( " \n " , ans ) }
package main import ( " " " fmt " " os " " strconv " " NO " " YES " " NO "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " No " " No " " Yes "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import ( " " " " ) func round ( f float64 ) float64 { return math . Floor ( f + .5 ) } func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) sum := 0 for i , _ := range X { fmt . Scan ( & X [ i ] ) sum += X [ i ] } avg := int ( round ( float64 ( sum ) / float64 ( N ) ) ) result := 0 for _ , x := range X { result + = ( x - avg ) * ( x - avg ) } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " ) func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) switch { case a >= 13 : fmt . Println ( b ) case 6 <= a && a <= 12 : fmt . Println ( b / 2 ) default : fmt . Println ( 0 ) } }
package main import ( " " " errors " " fmt " " io " " os " " strconv " " Scan failed " " % b " " [ argument error ] : PowInt does not accept negative integers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " math " " sort " " funciton getMin ( ) requires at least one argument . " ) } min := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if min > nums [ i ] { min = nums [ i ] pos = i } } return min , pos } func getMax ( nums ... int ) ( int , int ) { if len ( nums ) == 0 { panic ( " " ) } max := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if max < nums [ i ] { max = nums [ i ] pos = i } } return max , pos } type sortType struct { a int b int } type byA [ ] sortType func ( s byA ) Len ( ) int { return len ( s ) } func ( s byA ) Swap ( i , j int ) { s [ i ] , s [ j ] = s [ j ] , s [ i ] } func ( s byA ) Less ( i , j int ) bool { return s [ i ] . a < s [ j ] . a }
package main import ( " " " os " " bufio " " strconv "
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) } else if a <= 12 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " sort " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " " " " " funciton min ( ) requires at least one argument . " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Min ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Max ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func strSearch ( a [ ] string , b string ) bool { for i := 0 ; i < len ( a ) ; i ++ { if a [ i ] == b { return true } } return false } func sortAsc ( a [ ] int ) [ ] int { sort . Ints ( a ) return a } func sortDesc ( a [ ] int ) [ ] int { sort . Sort ( sort . Reverse ( sort . IntSlice ( a ) ) ) return a } func gcd ( a , b int ) int { if b == 0 { return a } return gcd ( b , a % b ) } func lcm ( a , b int ) int { if a == 0 && b == 0 { return 0 } return a * b / gcd ( a , b ) } func cumSum ( nums [ ] int ) [ ] int { sums := [ ] int { 0 } for i := 0 ; i < len ( nums ) ; i ++ { sums = append ( sums , sums [ i ] + nums [ i ] ) } return sums }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func scanIntSlice ( N int ) [ ] int { _slice := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & _slice [ i ] ) } return _slice } func getMostCommonCountWithIgnore ( m map [ int ] int , ignore int ) ( maxKey , maxCount int ) { for key , value := range m { if value > maxCount && key != ignore { maxCount = value maxKey = key } } return } func main ( ) { n := 0 ; fmt . Scan ( & n ) v := scanIntSlice ( n ) evens := make ( map [ int ] int ) odds := make ( map [ int ] int ) for i := 0 ; i < n / 2 ; i ++ { evens [ v [ 2 * i ] ] ++ odds [ v [ 2 * i + 1 ] ] ++ } ans := n evenMostKey , evenMostCount := getMostCommonCountWithIgnore ( evens , - 1 ) _ , even2ndCount := getMostCommonCountWithIgnore ( evens , evenMostKey ) oddsMostKey , oddsMostCount := getMostCommonCountWithIgnore ( odds , - 1 ) _ , odds2ndCount := getMostCommonCountWithIgnore ( odds , oddsMostKey ) if evenMostKey != oddsMostKey { ans - = evenMostCount + oddsMostCount } else { a := evenMostCount + odds2ndCount b := even2ndCount + oddsMostCount if b > a { a = b } ans -= a } fmt . Println ( ans ) }
package main import " " func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " math " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! " ) }
package main import " " func main ( ) { var A , B int fmt . Scan ( & A , & B ) if A >= 13 { fmt . Println ( B ) } else if 6 <= A && A <= 12 { fmt . Println ( B / 2 ) } else { fmt . Println ( 0 ) } }
package main import " " func main ( ) { var str1 , str2 , str3 string fmt . Scan ( & str1 , & str2 , & str3 ) fnum := 0 snum := 0 for _ , str := range [ ] string { str1 , str2 , str3 } { if str == " " { fnum ++ } else if str == " " { snum ++ } } if fnum == 2 && snum == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main ; import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } fmt . Println ( solver ( n , s ) ) } func solver ( n int , s [ ] string ) string { var tmp int ; var ans string ; var arare map [ string ] int = map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } for i := 0 ; i < len ( s ) - 1 ; i ++ { arare [ s [ i ] ] = 1 } tmp = arare [ " " ] + arare [ " " ] + arare [ " " ] + arare [ " " ] if tmp == 3 { ans = " " } else if tmp == 4 { ans = " " } else if tmp == 1 { ans = " " } else if tmp == 2 { ans = " " } else { ans = " " } return ans }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) sl := [ ] int { 64 , 32 , 16 , 8 , 4 , 2 , 1 } for _ , s := range sl { if s <= n { fmt . Println ( s ) return } } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k || e - b > k || e - c > k || e - d > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) var N int func main ( ) { fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { slice := make ( [ ] int , 3 ) fmt . Scanf ( " " , & slice [ 0 ] , & slice [ 1 ] , & slice [ 2 ] ) count5 := 0 count7 := 0 for i := 0 ; i < 3 ; i ++ { if slice [ i ] == 5 { count5 ++ } else if slice [ i ] == 7 { count7 ++ } } if count5 == 2 && count7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " io " " os " " sort " " strconv " " YES " " NO " \n \r \t
package main import ( " " " math " " % f % f % f % f " " % .20 f \n " , math . Sqrt ( ret ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Three " " Four " " scan error " " text to int error " " scan error "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " ) func main ( ) { l := make ( [ ] int , 5 ) var k int for i := range l { fmt . Scan ( & l [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < 5 ; i ++ { if l [ i ] - l [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var t1 , t2 int64 var a1 , a2 int64 var b1 , b2 int64 fmt . Scan ( & t1 , & t2 ) fmt . Scan ( & a1 , & a2 ) fmt . Scan ( & b1 , & b2 ) p := ( a1 - b1 ) * t1 q := ( a2 - b2 ) * t2 if p > 0 { p *= - 1 q *= - 1 } if p + q == 0 { fmt . Println ( " " ) return } ans := int64 ( 0 ) if p + q < 0 { ans = 0 } else { s := ( - p ) / ( p + q ) t := ( - p ) % ( p + q ) if t != 0 { ans = s * 2 + 1 } else { ans = s * 2 } } fmt . Println ( ans ) }
package main import ( " " ) func sort ( a [ ] int ) { for i := 0 ; i < len ( a ) - 1 ; i ++ { for j := i + 1 ; j < len ( a ) ; j ++ { if a [ i ] > a [ j ] { tmp := a [ i ] a [ i ] = a [ j ] a [ j ] = tmp } } } } func main ( ) { var N int = 0 var a [ ] int var dist int = 0 fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var tmp int = 0 fmt . Scan ( & tmp ) a = append ( a , tmp ) } sort ( a ) for i := 0 ; i < len ( a ) - 1 ; i ++ { dist += a [ i + 1 ] - a [ i ] } fmt . Println ( dist ) }
package main import " " func main ( ) { var m [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & m [ i ] [ j ] ) } } var diff [ 3 ] [ 4 ] int for i := 0 ; i < 3 ; i ++ { diff [ i ] [ 0 ] = m [ i ] [ 1 ] - m [ i ] [ 0 ] diff [ i ] [ 1 ] = m [ i ] [ 2 ] - m [ i ] [ 1 ] diff [ i ] [ 2 ] = m [ 1 ] [ i ] - m [ 0 ] [ i ] diff [ i ] [ 3 ] = m [ 2 ] [ i ] - m [ 1 ] [ i ] } for i := range diff [ 0 ] { if diff [ 0 ] [ i ] != diff [ 0 ] [ i ] || diff [ 1 ] [ i ] != diff [ 2 ] [ i ] { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " ) func main ( ) { var ( n int color string ) fmt . Scan ( & n ) table := make ( map [ string ] int ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & color ) table [ color ] + = 1 } if len ( table ) = = 3 { fmt . Println ( " " ) } else { fmt . Println ( " Four " ) } }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " os " " bufio " " sort " " math " " strconv "
package main import " " func main ( ) { C := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { C [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & C [ i ] [ j ] ) } } for i := 0 ; i < 3 ; i ++ { p := C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] q := C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] if C [ i ] [ 1 ] - C [ i ] [ 0 ] != p { fmt . Println ( " " ) return } if C [ i ] [ 2 ] - C [ i ] [ 1 ] != q { fmt . Println ( " " ) return } } for i := 0 ; i < 3 ; i ++ { p := C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] q := C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 1 ] [ i ] - C [ 0 ] [ i ] != p { fmt . Println ( " " ) return } if C [ 2 ] [ i ] - C [ 1 ] [ i ] != q { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if k >= ( e - a ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N , K int fmt . Scan ( & N , & K ) if K == 1 { fmt . Println ( " " ) } else { fmt . Println ( N - K ) } }
package main import ( " " " math " " : ( " " Yay ! " " : ( "
package main import ( " " " sort " " % d % d % d " " YES " " NO "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a < 6 { fmt . Println ( 0 ) } else if a < 13 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " os " " strconv " " strings " " bufio " " "
package main import ( " " " fmt " " os " " strings " " " " 7 " { cnt7 + + } if arr [ i ] == " " { cnt5 + + } } if cnt7 == 1 && cnt5 == 2 { fmt . Println ( " YES " " NO "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) HH := H * 30.0 + M * 0.5 MM := M * 6.0 rad := ( max ( HH , MM ) - min ( HH , MM ) ) * math . Pi / 180.0 ans := math . Sqrt ( math . Pow ( A , 2 ) + math . Pow ( B , 2 ) - 2 * A * B * math . Cos ( rad ) ) fmt . Println ( ans ) } func max ( a , b float64 ) float64 { if a < b { return b } return a } func min ( a , b float64 ) float64 { if a < b { return a } return b }
package main import " " func main ( ) { var N , K int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " os " " strconv " " strings " " " " Three " " Four "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " sort " " : ( " " Yay ! " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if b - a > k { fmt . Println ( " " ) } else if c - a > k { fmt . Println ( " " ) } else if d - a > k { fmt . Println ( " " ) } else if e - a > k { fmt . Println ( " " ) } else if c - b > k { fmt . Println ( " " ) } else if d - b > k { fmt . Println ( " " ) } else if e - b > k { fmt . Println ( " " ) } else if d - c > k { fmt . Println ( " " ) } else if e - c > k { fmt . Println ( " " ) } else if e - d > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) ha := 30 * h + 0.5 * m ma := 6 * m switch { case math . Abs ( ha - ma ) == 180 : fmt . Println ( a + b ) case ha == ma : fmt . Println ( math . Abs ( a - b ) ) default : ang := math . Max ( ha - ma , ma - ha ) if ang > 180 { ang = 360 - ang } ans := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - ( 2 * a * b * ( math . Cos ( ang * math . Pi / 180 ) ) ) fmt . Println ( math . Sqrt ( ans ) ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) countMax := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x /= 2 count + + } if count > countMax { countMax = count answer = i } } fmt . Println ( answer ) }
package main import ( " " ) func main ( ) { var n int var a string mame := map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a ) mame [ a ] ++ } if mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 { fmt . Print ( " \n " ) } else { fmt . Print ( " \n " ) } }
package main import ( " " ) func main ( ) { var a int var b int fmt . Scan ( & a , & b ) if ( a >= 13 ) { fmt . Println ( b ) } else if ( a <= 12 && a >= 6 ) { fmt . Println ( b / 2 ) } else { fmt . Println ( 0 ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x = x / 2 count = count + 1 } if count > m { m = count answer = i } } fmt . Println ( answer ) }
package main import ( " " " fmt " " os " " strings " " Three " " Four " " "
package main import ( " " ) func main ( ) { cs := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { cs [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & cs [ i ] [ j ] ) } } var ng = false for i := 0 ; i < 2 ; i ++ { d1 := cs [ i + 1 ] [ 0 ] - cs [ i ] [ 0 ] d2 := cs [ i + 1 ] [ 1 ] - cs [ i ] [ 1 ] d3 := cs [ i + 1 ] [ 2 ] - cs [ i ] [ 2 ] if d1 != d2 || d2 != d3 { ng = true } d1 = cs [ 0 ] [ i + 1 ] - cs [ 0 ] [ i ] d2 = cs [ 1 ] [ i + 1 ] - cs [ 1 ] [ i ] d3 = cs [ 2 ] [ i + 1 ] - cs [ 2 ] [ i ] if d1 != d2 || d2 != d3 { ng = true } } if ng { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " strings " " 5 " ) ! = 2 || strings . Count ( a + b + c , " " ) != 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) res := make ( map [ string ] bool ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) res [ s ] = true } ans := " " if len ( res ) == 4 { ans = " " } fmt . Println ( ans ) }
package main import ( " " " sort " " YES " " NO "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a ) <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n , m int fmt . Scan ( & n , & m ) if n >= 13 { fmt . Println ( m ) } else if n >= 6 { fmt . Println ( m / 2 ) } else { fmt . Println ( 0 ) } }
package main import " " func main ( ) { var h1 , h2 , m1 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) fmt . Println ( ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ) }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for i := 1 ; 1 << uint ( i ) <= n ; i ++ { ans = 1 << uint ( i ) } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n int var tmp string fmt . Scan ( & n ) m := make ( map [ string ] int , 4 ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & tmp ) m [ tmp ] ++ } var result string switch len ( m ) { case 3 : result = " " case 4 : result = " " } fmt . Println ( result ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { var tmp int fmt . Scan ( & tmp ) xs [ i ] = tmp } const minX = 1 const maxX = 100 min := 10000000 for p := minX ; p <= maxX ; p ++ { sum := 0 for _ , x := range xs { sum + = int ( math . Pow ( float64 ( x - p ) , 2.0 ) ) } if sum < min { min = sum } } fmt . Println ( min ) }
package main import ( " " " " ) func abs ( n int ) int { if n < 0 { return - n } return n } func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Sort ( sort . Reverse ( sort . IntSlice ( a ) ) ) fmt . Println ( abs ( a [ 1 ] - a [ 0 ] ) + abs ( a [ 2 ] - a [ 1 ] ) ) }
package main import " " func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) angle := math . Abs ( 30 * h + 0.5 * m - 6 * m ) d := a * a + b * b - 2 * a * b * math . Cos ( angle * math . Pi / 180 ) d = math . Sqrt ( d ) fmt . Println ( d ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) } if o ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " bufio " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var k int var s int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var a int count5 , count7 := 0 , 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a ) if a == 5 { count5 ++ } else if a == 7 { count7 ++ } } if count5 == 2 && count7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var A , B , C , min , tmp float64 fmt . Scan ( & A , & B , & C ) min = math . Abs ( A - B ) + math . Abs ( B - C ) tmp = math . Abs ( A - C ) + math . Abs ( C - B ) if min > tmp { min = tmp } tmp = math . Abs ( B - A ) + math . Abs ( A - C ) if min > tmp { min = tmp } tmp = math . Abs ( B - C ) + math . Abs ( C - A ) if min > tmp { min = tmp } tmp = math . Abs ( C - A ) + math . Abs ( A - B ) if min > tmp { min = tmp } tmp = math . Abs ( C - B ) + math . Abs ( B - A ) if min > tmp { min = tmp } fmt . Print ( min ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a < 6 { fmt . Println ( 0 ) } else if a < 13 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import ( " " ) func main ( ) { var N , P int fmt . Scan ( & N , & P ) if N == 1 { fmt . Println ( P ) } else { m := map [ int ] int { } for i := 2 ; i * i <= P ; i ++ { for P % i == 0 { m [ i ] ++ P /= i } } ans := 1 for key , value := range m { q := value / N ans *= pow ( key , q ) } fmt . Println ( ans ) } } func pow ( a , b int ) int { if b == 0 { return 1 } else if b == 1 { return a } else { return a * pow ( a , b - 1 ) } }
package main import ( " " " fmt " " io " " os " " strconv " " strings " " " " Failed to parse string into int . "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( b - a ) <= k && ( c - a ) <= k && ( d - a ) <= k && ( e - a ) <= k && ( c - b ) <= k && ( d - b ) <= k && ( e - b ) <= k && ( d - c ) <= k && ( e - c ) <= k && ( e - d ) <= k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var ( H1 , M1 , H2 , M2 , K int ) fmt . Scan ( & H1 , & M1 , & H2 , & M2 , & K ) start := H1 * 60 + M1 end := H2 * 60 + M2 answer := end - K - start if answer < 0 { fmt . Println ( 0 ) } else { fmt . Println ( answer ) } }
package main import ( " " ) func main ( ) { var a , b , fee int fmt . Scan ( & a , & b ) if a >= 13 { fee = b } else if a >= 6 { fee = b / 2 } else { fee = 0 } fmt . Println ( fee ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv " " % d / % d "
package main import ( " " " sort " " YES " " NO "
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var A , B int fmt . Scan ( & A , & B ) var ans int if A <= 5 { ans = 0 } else if A <= 12 { ans = B / 2 } else { ans = B } fmt . Println ( ans ) }
package main import ( " " " os " " strings " " strconv " " sort " " fmt " " "
package main import ( " " " os " " text / scanner " " strconv " " Yay ! \n " ) } else { fmt . Printf ( " \n " ) } }
package main import ( " " " fmt " " os " " strconv " " strings "
package main import ( " " " fmt " " os " " strconv " " strings " \n " \n " ) ant [ i ] , _ = strconv . Atoi ( tmp ) } tmp , _ := reader . ReadString ( '\n' ) tmp = strings . Trim ( tmp , " \n " ) k , _ := strconv . Atoi ( tmp ) min := ant [ 0 ] max := ant [ 0 ] for i := 0 ; i < 5 ; i ++ { if min > ant [ i ] { min = ant [ i ] } if max < ant [ i ] { max = ant [ i ] } } if ( max - min ) > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort "
package main import ( " " ) func main ( ) { var K int var S int fmt . Scan ( & K ) fmt . Scan ( & S ) var counter int counter = 0 for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { k := S - i - j if k <= K && k >= 0 { counter ++ } } } fmt . Println ( counter ) }
package main import " " func main ( ) { var k , s , count int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " sort "
package main import ( " " ) func sort ( nums [ ] int , n int ) { for i := 1 ; i < n ; i ++ { v := nums [ i ] j := i - 1 for j >= 0 && v < nums [ j ] { nums [ j + 1 ] = nums [ j ] j - - } nums [ j + 1 ] = v } } func main ( ) { tasks := make ( [ ] int , 3 ) for i := range tasks { fmt . Scan ( & tasks [ i ] ) } sort ( tasks , 3 ) fmt . Println ( ( tasks [ 1 ] - tasks [ 0 ] ) + ( tasks [ 2 ] - tasks [ 1 ] ) ) }
package main import ( " " " bufio " " os " " strings " " sort " " strconv " " " " YES " " NO "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { if a == 5 && b == 5 { fmt . Println ( " " ) } else if b == 5 && c == 5 { fmt . Println ( " " ) } else if a == 5 && c == 5 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var stdin string fmt . Scan ( & stdin ) x , _ := strconv . Atoi ( stdin ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) arr := [ ] int { a , b , c , d , e } for i := 0 ; i < len ( arr ) - 1 ; i + + { for j := 1 ; j < len ( arr ) ; j ++ { if ( arr [ j ] - arr [ i ] ) > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Three " " Four " " "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " " " " " " " " " b " " a " " c " " d "
package main import ( " " ) func main ( ) { var i int fmt . Scanf ( " % d " " % d \n " , i * i * i ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " " ) var A , B , H , M float64 func main ( ) { fmt . Scan ( & A , & B , & H , & M ) rad := func ( ) float64 { return math . Pi * ( ( 2.0 / 720.0 * ( 60.0 * H + M ) ) - 2.0 / 60.0 * M ) } fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * math . Cos ( rad ( ) ) ) ) }
package main import " " func main ( ) { var A , B int fmt . Scan ( & A , & B ) if A <= 5 { fmt . Println ( 0 ) } else if A <= 12 { fmt . Println ( B / 2 ) } else { fmt . Println ( B ) } }
package main import " " func main ( ) { var n , min , count int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) if i == 0 { min = p [ i ] count + + } else if min >= p [ i ] { count + + min = p [ i ] } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " sort " " strconv " " NO " " YES "
package main import " " var i int func main ( ) { fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " os " " bufio " " strconv "
package main import ( " " " fmt " " io " " math " " os " " strconv " " % 0.15 f "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) for i , _ := range x { fmt . Scan ( & x [ i ] ) } sort . Ints ( x ) minSums := 1000000 for p := x [ 0 ] ; p <= x [ n - 1 ] ; p ++ { sums := 0 for i := 0 ; i < n ; i ++ { sums += square ( x [ i ] - p ) } if minSums > sums { minSums = sums } } fmt . Println ( minSums ) } func square ( x int ) int { return x * x }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " fmt " " io " " os "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " log " " os " " strconv " " Yes " " No "
package main import ( " " " strings " " Yes " " No "
package main import ( " " " " ) func square ( x float64 ) float64 { return x * x } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) var m_theta , h_theta float64 m_theta = math . Pi * float64 ( m ) / 30.0 h_theta = math . Pi * ( float64 ( h ) / 6.0 + float64 ( m ) / 360.0 ) dist := math . Sqrt ( square ( float64 ( a ) * math . Sin ( h_theta ) - float64 ( b ) * math . Sin ( m_theta ) ) + square ( float64 ( a ) * math . Cos ( h_theta ) - float64 ( b ) * math . Cos ( m_theta ) ) ) fmt . Print ( dist ) }
package main import ( " " " math " " % d " " % d "
package main import ( " " " sort " " % d % d % d " " NO " " YES "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) ans := 0 if a >= 13 { ans = b } else if a >= 6 { ans = b / 2 } else { ans = 0 } fmt . Println ( ans ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 0 for _ , n := range [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 } { if n <= N { ans = n } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : " " No more token . " ) } return scanner . Text ( ) } func MinInt ( x , y int ) int { if x < y { return x } else { return y } } func MaxInt ( x , y int ) int { if x < y { return y } else { return x } } func AbsInt ( x int ) int { if x < 0 { return - x } return x } func ModPow ( base , exponent , modulo int ) ( result int ) { result = 1 for exponent > 0 { if exponent % 2 == 1 { result *= base if modulo > 1 { result %= modulo } } base *= base if modulo > 1 { base %= modulo } exponent /= 2 } return } func Gcd ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = gcd ( result , vals [ i ] ) } return } func gcd ( x , y int ) int { x , y = AbsInt ( x ) , AbsInt ( y ) for y > 0 { x , y = y , x % y } return x } func Lcm ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = lcm ( result , vals [ i ] ) } return } func lcm ( x , y int ) int { return x * y / gcd ( x , y ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) c := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { t := s - ( x + y ) if 0 <= t && t <= k { c + + } } } fmt . Println ( c ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " log " " os " " strconv " " YES " " NO "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { if 0 <= s - i - j && s - i - j <= k { ans ++ } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " " ) func main ( ) { var N , p , r int fmt . Scan ( & N ) min := math . MaxInt64 for i := 0 ; i < N ; i ++ { fmt . Scan ( & p ) if p <= min { min = p r ++ } } fmt . Println ( r ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { var char string fmt . Scan ( & char ) if char == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " % b "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var a0 , a1 , a2 int fmt . Scan ( & a0 ) fmt . Scan ( & a1 ) fmt . Scan ( & a2 ) d := make ( [ ] int , 3 ) d [ 0 ] = abs ( a0 - a1 ) d [ 1 ] = abs ( a1 - a2 ) d [ 2 ] = abs ( a2 - a0 ) max := - 1 for _ , e := range d { if max < e { max = e } } fmt . Println ( max ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " ) var N int var S [ ] string func main ( ) { fmt . Scanf ( " " , & N ) S = make ( [ ] string , N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & S [ i ] ) } m := make ( map [ string ] bool ) for i := 0 ; i < len ( S ) ; i ++ { m [ S [ i ] ] = true } ans := 0 for _ , v := range m { if v { ans + + } } if ans == 4 { fmt . Println ( " " ) } else if ans == 3 { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var num1 , num2 , num3 , num4 int var ans string fmt . Scanf ( " % d % d % d % d \n " , & num1 , & num2 , & num3 , & num4 ) if num1 == 1 || num2 == 1 || num3 == 1 || num4 == 1 { if num1 == 9 || num2 == 9 || num3 == 9 || num4 == 9 { if num1 == 7 || num2 == 7 || num3 == 7 || num4 == 7 { if num1 == 4 || num2 == 4 || num3 == 4 || num4 == 4 { ans = " " } else { ans = " " } } else { ans = " " } } else { ans = " " } } else { ans = " " } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) sum := 0 for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) sum + = x [ i ] } avg := sum / n p := [ ] int { avg - 1 , avg , avg + 1 } res := [ ] int { 0 , 0 , 0 } for i := 0 ; i < n ; i ++ { for j := 0 ; j < len ( p ) ; j ++ { res [ j ] += ( x [ i ] - p [ j ] ) * ( x [ i ] - p [ j ] ) } } sort . Ints ( res ) fmt . Println ( res [ 0 ] ) }
package main import ( " " ) func abs ( a int ) int { if a < 0 { return - a } else { return a } } func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) max := a [ 0 ] min := a [ 2 ] for i := 0 ; i < 3 ; i ++ { if a [ i ] > max { max = a [ i ] } if a [ i ] < min { min = a [ i ] } } fmt . Println ( max - min ) }
package main import " " func main ( ) { var num1 , num2 , num3 , num4 int var ans = " " fmt . Scanf ( " \n " , & num1 , & num2 , & num3 , & num4 ) if num1 == 1 || num2 == 1 || num3 == 1 || num4 == 1 { if num1 == 9 || num2 == 9 || num3 == 9 || num4 == 9 { if num1 == 7 || num2 == 7 || num3 == 7 || num4 == 7 { if num1 == 4 || num2 == 4 || num3 == 4 || num4 == 4 { ans = " " } } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " scan error " " text to int error "
package main import ( " " " sort " " % d " " % d \n " , houses [ n - 1 ] - houses [ 0 ] ) } func scanIntSlice ( size int ) [ ] int { input := [ ] int { } for i := 0 ; i < size ; i ++ { var in int fmt . Scanf ( " " , & in ) input = append ( input , in ) } return input }
package main import ( " " " " ) func main ( ) { var n , m int fmt . Scan ( & n ) m = 4 for x := n / m + 1 ; x <= ( 3 * n ) / m ; x ++ { var p , q int p = x * n q = m * x - n for y := p / q + 1 ; y <= ( 2 * p ) / q ; y ++ { var a , b int a = y * p b = q * y - p if a % b == 0 { fmt . Println ( x , y , a / b ) os . Exit ( 0 ) } } } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a [ i ] ) } b := make ( [ ] string , m ) for i := 0 ; i < m ; i ++ { fmt . Scan ( & b [ i ] ) } for ai := 0 ; ai <= n - m ; ai ++ { for aj := 0 ; aj <= n - m ; aj ++ { ok := true for bi := 0 ; bi < m ; bi ++ { for bj := 0 ; bj < m ; bj ++ { if a [ ai + bi ] [ aj + bj ] != b [ bi ] [ bj ] { ok = false break } } if ! ok { break } } if ok { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var N int fmt . Scanf ( " % d " " % s " " Four " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) col := make ( map [ string ] struct { } ) for i := 0 ; i < n ; i ++ { var c string fmt . Scan ( & c ) col [ c ] = struct { } { } } if len ( col ) == 3 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " Scan failed "
package main import ( " " ) func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " NO " " YES "
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) ans := exec ( A , B , H , M ) fmt . Println ( ans ) } func exec ( A , B , H , M float64 ) float64 { ang := math . Abs ( H * 30 + 0.5 * M - M * 6 ) v := A * A + B * B - ( 2 * A * B * math . Cos ( ang * math . Pi / 180 ) ) return math . Sqrt ( v ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int32 , n ) for i := range ps { fmt . Scan ( & ps [ i ] ) } var cnt int32 tmpMin := ps [ 0 ] for _ , p := range ps { if tmpMin >= p { tmpMin = p cnt + + } } fmt . Print ( cnt ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) v := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & v [ i ] ) } ans := 1000000 for i := 0 ; i <= 100 ; i ++ { tmp := 0 for _ , x := range v { tmp + = ( x - i ) * ( x - i ) } if tmp < ans { ans = tmp } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import ( " " " " ) func main ( ) { var N float64 fmt . Scan ( & N ) var h , n , w float64 for h = 1 ; h <= 3500 ; h ++ { for n = 1 ; n <= 3500 ; n ++ { x := 4 / N - 1 / h - 1 / n if x > 1 || x < 0 { continue } left := - 0.1 right := 100000.0 var mid float64 for right - left > 0.1 { mid = ( left + right ) / 2.0 if 1 / mid >= x { left = mid } else { right = mid } } w = math . Trunc ( mid ) if w > 0.0 { if 4 / N == 1 / h + 1 / n + 1 / w { fmt . Println ( h , n , w ) return } } w = math . Ceil ( mid ) if w > 0.0 { if 4 / N == 1 / h + 1 / n + 1 / w { fmt . Println ( h , n , w ) return } } } } var i int for { i ++ } }
package main import ( " " " fmt " " io " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import " " func main ( ) { xm := make ( map [ int ] bool ) for i := 0 ; i < 4 ; i ++ { var n int fmt . Scan ( & n ) xm [ n ] = true } if xm [ 1 ] && xm [ 9 ] && xm [ 7 ] && xm [ 4 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " var k , s int func main ( ) { fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os "
package main import ( " " " io " " os " " 0 " ) } else if a < 13 { _ , _ = fmt . Fprintf ( writer , " " , b / 2 ) } else { _ , _ = fmt . Fprintf ( writer , " " , b ) } } func main ( ) { answer ( os . Stdin , os . Stdout ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) var flg5 , flg7 int for _ , v := range a { if v == 5 { flg5 ++ } else if v == 7 { flg7 ++ } } if flg5 == 2 && flg7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } return }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for X := 0 ; X <= k ; X ++ { for Y := 0 ; Y <= k ; Y ++ { Z := s - ( X + Y ) if 0 <= Z && Z <= k { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " log " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func intsMax : argument slice length must not be zero " " func intsMaxIdx : argument slice length must not be zero " " func intsMin : argument slice length must not be zero " " func intsMinIdx : argument slice length must not be zero " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " fmt " " io " " os " " strconv " " empty ! " " empty ! " " empty ! " " Scan failed "
package main import ( " " " fmt " " strings " " os " " " " 5 " { five + + } else if string ( v ) == " " { seven + + } } if five == 2 && seven == 1 { fmt . Println ( " YES " " NO "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) a := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ n - 1 ] - a [ 0 ] ) }
package main import ( " " ) func main ( ) { var h1 , h2 , m1 , m2 , k int fmt . Scanf ( " % d % d % d % d % d " " % d \n " , ans ) }
package main import " " func Cube ( x int ) int { return x * x * x } func main ( ) { var t int fmt . Scan ( & t ) fmt . Println ( Cube ( t ) ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K ) fmt . Scan ( & S ) var cnt int for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if 0 <= Z && Z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " math " " sort " " % d % d \n " , & n , & p ) primeLimit : = int64 ( math . Sqrt ( float64 ( p ) ) ) allPrimes := listPrimes ( primeLimit ) entries := countPrimes ( p , allPrimes ) sort . Sort ( Entries ( entries ) ) factor := int64 ( 1 ) for _ , e := range entries { if e . count >= n { v := int64 ( math . Pow ( float64 ( e . prime ) , float64 ( e . count / n ) ) ) factor *= v } } fmt . Println ( factor ) } func countPrimes ( n int64 , allPrimes [ ] int64 ) [ ] Entry { es := [ ] Entry { } for _ , p := range allPrimes { if p * p > n { break } cnt := int64 ( 0 ) for n % p == 0 { cnt + = 1 n /= p } if cnt > 0 { es = append ( es , Entry { p , cnt } ) } } if n > 1 { es = append ( es , Entry { n , 1 } ) } return es } func listPrimes ( limit int64 ) [ ] int64 { ns := make ( [ ] int64 , limit - 1 ) for i := int64 ( 2 ) ; i <= limit ; i ++ { ns [ i - 2 ] = i } divided := make ( [ ] bool , limit + 1 ) ps := make ( [ ] int64 , 0 ) for _ , n := range ns { if divided [ n ] { continue } ps = append ( ps , n ) for i := n ; i < int64 ( len ( divided ) ) ; i += n { divided [ i ] = true } } return ps }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mnt := h * 60 + m ap := mnt * math . Pi / 360 bp := mnt * math . Pi / 30 x := a * math . Cos ( ap ) - b * math . Cos ( bp ) y := a * math . Sin ( ap ) - b * math . Sin ( bp ) fmt . Println ( math . Sqrt ( x * x + y * y ) ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var x int fmt . Scanf ( " % d " " % d \n " , x * x * x ) }
package main import ( " " ) func main ( ) { var a [ 5 ] int var k int for i := 0 ; i < 5 ; i ++ { fmt . Scanf ( " " , & a [ i ] ) } fmt . Scanf ( " " , & k ) var f bool f = true for i := 0 ; i < 5 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { f = f && ( ( a [ j ] - a [ i ] ) <= k ) } } if f { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " strings "
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a >= 13 { fmt . Print ( b ) } else if a <= 12 && a >= 6 { fmt . Print ( b / 2 ) } else { fmt . Print ( 0 ) } }
package main import ( " " " math " " sort "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) S := make ( [ ] string , N ) result := " " for i := 0 ; i < N ; i ++ { fmt . Scan ( & S [ i ] ) } for i := 0 ; i < N ; i ++ { if S [ i ] == " " { result = " " } } fmt . Println ( result ) }
package main import ( " " ) func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := range c { c [ i ] = make ( [ ] int , 3 ) for j := range c [ i ] { fmt . Scan ( & c [ i ] [ j ] ) } } a := make ( [ ] int , 3 ) for i := 0 ; i <= 100 ; i ++ { a [ 0 ] = i for j := 0 ; j <= 100 ; j ++ { a [ 1 ] = j for k := 0 ; k <= 100 ; k ++ { a [ 2 ] = k b00 := c [ 0 ] [ 0 ] - a [ 0 ] b01 := c [ 0 ] [ 1 ] - a [ 0 ] b02 := c [ 0 ] [ 2 ] - a [ 0 ] b10 := c [ 1 ] [ 0 ] - a [ 1 ] b11 := c [ 1 ] [ 1 ] - a [ 1 ] b12 := c [ 1 ] [ 2 ] - a [ 1 ] b20 := c [ 2 ] [ 0 ] - a [ 2 ] b21 := c [ 2 ] [ 1 ] - a [ 2 ] b22 := c [ 2 ] [ 2 ] - a [ 2 ] if b00 == b10 && b00 == b20 && b10 == b20 { if b01 == b11 && b01 == b21 && b11 == b21 { if b02 == b12 && b02 == b22 && b12 == b22 { fmt . Println ( " " ) return } } } } } } fmt . Println ( " " ) }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " ) func main ( ) { m := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & m [ i ] ) } var k int fmt . Scan ( & k ) if m [ 4 ] - m [ 0 ] <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func solution ( a [ ] int ) string { k := a [ 5 ] for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 5 ; j ++ { if i == j { continue } if a [ i ] - a [ j ] > k { return " " } } } return " " } func main ( ) { a := make ( [ ] int , 0 , 6 ) for i := 0 ; i < 6 ; i ++ { t := 0 fmt . Scan ( & t ) a = append ( a , t ) } fmt . Println ( solution ( a ) ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r ) i nt l n writer Y S") }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var x int fmt . Scanf ( " % d " " % d \n " , x * x * x ) }
package main import " " func main ( ) { var n , k int fmt . Scanf ( " % d % d "
package main import ( " " ) func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( cube3 ( i ) ) } func cube3 ( x int ) int { return x * x * x }
package main import " " func main ( ) { var n_in int fmt . Scanf ( " % d " " % d \n " , n_out ) }
package main import ( " " " sort " " strings " " : ( " " Yay ! " " " " "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) Adeg := h * 30 + m / 60 * 30 Bdeg := m / 5 * 30 Deg := math . Abs ( Adeg - Bdeg ) if Deg > 180 { Deg = 360 - Deg } X := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( Deg / 180 * math . Pi ) fmt . Println ( math . Sqrt ( X ) ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " " ) var N , K , ans int func main ( ) { fmt . Scan ( & N , & K ) if K != 1 { fmt . Println ( N - K ) } else { fmt . Println ( 0 ) } } func combination ( x , y int ) int { return permutation ( x , y ) / permutation ( y , y ) } func permutation ( x , y int ) int { var ans int = 1 for i := x - y ; 0 < i ; i -- { ans *= i } return ans } func max ( x ... int ) int { var res int = x [ 0 ] for i := 1 ; i < len ( x ) ; i ++ { res = int ( math . Max ( float64 ( x [ i ] ) , float64 ( res ) ) ) } return res } func min ( x ... int ) int { var res int = x [ 0 ] for i := 1 ; i < len ( x ) ; i ++ { res = int ( math . Min ( float64 ( x [ i ] ) , float64 ( res ) ) ) } return res } func pow ( x , y int ) int { return int ( math . Pow ( float64 ( x ) , float64 ( y ) ) ) } func abs ( x int ) int { return int ( math . Abs ( float64 ( x ) ) ) } func floor ( x int ) int { return int ( math . Floor ( float64 ( x ) ) ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) sum := 0 for i := 0 ; i < len ( x ) ; i ++ { fmt . Scan ( & x [ i ] ) sum += x [ i ] } p := int ( ( float64 ( sum ) / ( float64 ) ( len ( x ) ) + 0.5 ) ) hp := 0 for i := 0 ; i < len ( x ) ; i ++ { hp += ( x [ i ] - p ) * ( x [ i ] - p ) } fmt . Println ( hp ) }
package main import ( " " " fmt " " os " " strconv " " strings " " Yes " " No " " "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { a := ( N * h * n ) b := ( 4 * h * n - N * n - N * h ) if b < 0 || a * b <= 0 || a % b != 0 { continue } w := a / b if w <= 3500 { fmt . Println ( h , n , w ) return } } } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( num ( n ) ) } func num ( n int ) int { var max int key := 1 for ; n > 0 ; n -- { var c int for t := n ; t % 2 == 0 ; t /= 2 { c ++ } if c > max { max = c key = n } } return key }
package main import ( " " " sort " " : ( " " Yay ! "
package main import " " func main ( ) { var H1 , M1 , H2 , M2 , K int fmt . Scan ( & H1 , & M1 , & H2 , & M2 , & K ) if M2 > M1 { H2 -- M2 += 60 } T := M2 - M1 + ( H2 - H1 ) * 60 fmt . Println ( max ( 0 , T - K ) ) } func max ( a , b int ) int { if a > b { return a } return b }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] bool , n ) var x string for i := 0 ; i < n ; i ++ { fmt . Scan ( & x ) m [ x ] = true } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 mx := 0 for i := 1 ; i <= n ; i ++ { t := i c := 0 for t % 2 == 0 { c ++ t /= 2 } if mx < c { mx = c ans = i } } fmt . Println ( ans ) }
package main import " " var ( c [ 3 ] [ 3 ] int ans string ) func dfs ( a0 int ) { b := make ( [ ] int , len ( c ) ) for j := range b { b [ j ] = c [ 0 ] [ j ] - a0 if b [ j ] < 0 { return } } flg := false for i := 1 ; i < len ( c ) ; i ++ { for j := range make ( [ ] struct { } , len ( c ) - 1 ) { if c [ i ] [ j ] - b [ j ] != c [ i ] [ j + 1 ] - b [ j + 1 ] { flg = true break } } if flg { break } } if ! flg { ans = " " return } dfs ( a0 + 1 ) } func main ( ) { for i := range c { for j := range c [ i ] { fmt . Scan ( & c [ i ] [ j ] ) } } ans = " " dfs ( 0 ) fmt . Println ( ans ) }
package main import ( " " " bufio " " os " " sort " " strings " " strconv " " YES " " NO " " " ) sort . Strings ( t ) return strings . Join ( t , " " ) } func reverseString ( s string ) string { t := [ ] rune ( s ) for i , j := 0 , len ( s ) - 1 ; i < j ; i , j = i + 1 , j - 1 { t [ i ] , t [ j ] = t [ j ] , t [ i ] } return string ( t ) } func stringRev ( s [ ] byte , l int , r int ) [ ] byte { for i := 0 ; i < ( r - l + 1 ) / 2 ; i ++ { s [ l - 1 + i ] , s [ r - 1 - i ] = s [ r - 1 - i ] , s [ l - 1 + i ] } return s } func inside ( h , w , H , W int ) bool { if h >= 0 && h < H && w >= 0 && w < W { return true } return false }
package main import ( " " " fmt " " io " " os " " strconv " " strings " " : ( " " Yay ! " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " io " " os " " sort " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " NO " ) return } var f , s int for _ , t := range [ ] int { a , b , c } { if t == 5 { f ++ } if t == 7 { s ++ } } if f == 2 && s == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func abs ( a int ) int { if a < 0 { return - a } return a } func main ( ) { var A1 , A2 , A3 int fmt . Scanf ( " % d % d % d " " % d \n " , ans ) }
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for i := 0 ; i < k + 1 ; i ++ { for j := 0 ; j < k + 1 ; j ++ { t := s - i - j if 0 <= t && t <= k { ans + + } } } if ans != 0 { fmt . Println ( ans ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " YES " " NO "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var A string fmt . Scan ( & A ) if A == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " time " " os " " bufio " " fmt " " strconv "
package main import ( " " ) func main ( ) { var n , m int fmt . Scan ( & n , & m ) board := make ( [ ] string , n ) target := make ( [ ] string , m ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & board [ i ] ) } for i := 0 ; i < m ; i ++ { fmt . Scan ( & target [ i ] ) } for i := 0 ; i < n - m + 1 ; i ++ { for j := 0 ; j < n - m + 1 ; j ++ { flag := false for dy := 0 ; dy < m ; dy ++ { for dx := 0 ; dx < m ; dx ++ { if board [ i + dy ] [ j + dx ] != target [ dy ] [ dx ] { flag = true break } } if flag { break } } if flag { continue } fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " No " " Yes " " Yes "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i , _ := range p { fmt . Scan ( & p [ i ] ) } ans := 0 min := 9999999999999 for i := 0 ; i < n ; i ++ { min = Min ( min , p [ i ] ) if p [ i ] <= min { ans + + } } fmt . Println ( ans ) } func Min ( a , b int ) int { if a > b { return b } return a }
package main import ( " " " fmt " " os " " strconv " " strings " " % d " " % d " " \n " ) } func getStdin ( ) string { return readLine ( ) } func getStdinInt ( ) int { str := getStdin ( ) rtn , _ := strconv . Atoi ( str ) return rtn } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn } func getStdinIntArr64 ( ) [ ] int64 { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int64 , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . ParseInt ( val , 10 , 64 ) } return rtn } func readLine ( ) string { buf := make ( [ ] byte , 0 , 0 ) for { l , p , e := sc . ReadLine ( ) if e != nil { panic ( e ) } buf = append ( buf , l ... ) if ! p { break } } return string ( buf ) }
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! "
package main import ( " " " " ) func main ( ) { var x float64 fmt . Scan ( & x ) fmt . Println ( int ( math . Pow ( x , 3.0 ) ) ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) ans := 0.0 switch { case n < 2 : ans = 0.0 case n < 4 : ans = 1.0 case n < 8 : ans = 2.0 case n < 16 : ans = 3.0 case n < 32 : ans = 4.0 case n < 64 : ans = 5.0 default : ans = 6.0 } fmt . Println ( int ( math . Pow ( 2.0 , ans ) ) ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f " " % .19 f " " \n " ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import " " func main ( ) { var n int var s string var four bool fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { four = true } } if four { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { n := int ( 0 ) fmt . Scan ( & n ) x := make ( [ ] int64 , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) } exec ( n , x ) } func exec ( n int , x [ ] int64 ) { min := int64 ( 0 ) minIndex := 0 sum := int64 ( 0 ) max := int64 ( 0 ) for _ , v := range x { sum + = v if max < v { max = v } } for i := 1 ; i <= int ( max ) ; i ++ { cur := int64 ( n * i * i ) - 2 * sum * int64 ( i ) if i == 1 || min > cur { min = cur minIndex = i } } result := int64 ( 0 ) p := int64 ( minIndex ) for _ , v := range x { result = result + ( v - p ) * ( v - p ) } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " strings " " " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import ( " " " bufio " " os " " strings " " strconv " " math " \n " \n " ) fields := strings . Split ( line , " " ) nums := [ ] int { } for _ , field := range fields { num , _ := strconv . Atoi ( field ) nums = append ( nums , num ) } return nums } func readLineNum64s ( bf * bufio . Reader ) [ ] int64 { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) fields := strings . Split ( line , " " ) nums := [ ] int64 { } for _ , field := range fields { num , _ := strconv . ParseInt ( field , 10 , 64 ) nums = append ( nums , num ) } return nums } func readLineFloats ( bf * bufio . Reader ) [ ] float64 { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) fields := strings . Split ( line , " " ) nums := [ ] float64 { } for _ , field := range fields { num , _ := strconv . ParseFloat ( field , 64 ) nums = append ( nums , num ) } return nums } func readLineStrs ( bf * bufio . Reader ) [ ] string { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) return strings . Split ( line , " " ) } func main ( ) { bf := bufio . NewReader ( os . Stdin ) N := readLineNums ( bf ) [ 0 ] X := readLineNums ( bf ) ans := int ( INF ) for p := 1 ; p <= N * 100 ; p ++ { c := 0 for _ , x := range X { c += ( x - p ) * ( x - p ) } ans = min ( ans , c ) } fmt . Println ( ans ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import " " func main ( ) { var x int fmt . Scanln ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " : ( " ) return } } } fmt . Println ( " Yay ! " " "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) diff := e - a if diff <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N , M int fmt . Scan ( & N , & M ) As := make ( [ ] string , N ) Bs := make ( [ ] string , M ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & As [ i ] ) } for i := 0 ; i < M ; i ++ { fmt . Scan ( & Bs [ i ] ) } for sy := 0 ; sy < N - M + 1 ; sy ++ { for sx := 0 ; sx < N - M + 1 ; sx ++ { if match ( As , Bs , sx , sy ) { fmt . Println ( " " ) return } } } fmt . Println ( " " ) } func match ( As , Bs [ ] string , sx , sy int ) bool { M := len ( Bs ) for y := 0 ; y < len ( Bs ) ; y ++ { if As [ sy + y ] [ sx : sx + M ] != Bs [ y ] { return false } } return true }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a > 12 { fmt . Println ( b ) } else if a >= 6 { fmt . Println ( b / 2 ) } else { fmt . Println ( 0 ) } }
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import " " func main ( ) { var N , M int fmt . Scanf ( " % d % d " " % s " " % s " " No " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " " ) func main ( ) { N := read ( ) X := readArray ( N ) Min , Max , Result := min ( X ... ) , max ( X ... ) , 200000000 for p := Min ; p <= Max ; p ++ { lResult := 0 for _ , r := range X { lResult + = ( r - p ) * ( r - p ) } if lResult < Result { Result = lResult } } fmt . Println ( Result ) } func read ( ) int { var v int fmt . Scan ( & v ) return v } func readArray ( length int ) [ ] int { result := make ( [ ] int , length ) for i := 0 ; i < length ; i ++ { result [ i ] = read ( ) } return result } func min ( a ... int ) int { result := float64 ( a [ 0 ] ) for _ , i := range a { result = math . Min ( float64 ( i ) , result ) } return int ( result ) } func max ( a ... int ) int { result := float64 ( a [ 0 ] ) for _ , i := range a { result = math . Max ( float64 ( i ) , result ) } return int ( result ) }
package main import ( " " " fmt " " os " " strconv " " online " " local "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 3 ] int var b [ 3 ] int a [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] } for i := 0 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) i := 1 var result int for i <= n { result = i i *= 2 } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " _ " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } var a [ 3 ] int var b [ 3 ] int a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " AGC " " GAC " " ACG " " A " " G " " C " " T " " : ( \n " ) return } } } fmt . Printf ( " \n " ) } func main ( ) { check ( ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " % .10 f \n " , math . Sqrt ( d ) ) return 0 } func main ( ) { sc := newScanner ( os . Stdin ) wr := bufio . NewWriter ( os . Stdout ) ret := solve ( sc , wr ) wr . Flush ( ) os . Exit ( ret ) } type scanner struct { sc * bufio . Scanner } func newScanner ( input io . Reader ) * scanner { sc := bufio . NewScanner ( input ) sc . Split ( bufio . ScanWords ) sc . Buffer ( make ( [ ] byte , 1024 ) , int ( 1e+9 ) ) return & scanner { sc } } func ( s * scanner ) s ( ) string { s . sc . Scan ( ) return s . sc . Text ( ) } func ( s * scanner ) i ( ) int { i , e := strconv . Atoi ( s . s ( ) ) if e != nil { panic ( e ) } return i } func ( s * scanner ) f ( ) float64 { f , e := strconv . ParseFloat ( s . s ( ) , 64 ) if e != nil { panic ( e ) } return f } func ( s * scanner ) bs ( ) [ ] byte { return [ ] byte ( s . s ( ) ) } func ( s * scanner ) is ( n int ) [ ] int { res := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . i ( ) } return res } func ( s * scanner ) fs ( n int ) [ ] float64 { res := make ( [ ] float64 , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . f ( ) } return res }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { if p [ i ] < min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " % d "
package main import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] string , n ) for i := range a { fmt . Scan ( & a [ i ] ) } b := make ( [ ] string , m ) for i := range b { fmt . Scan ( & b [ i ] ) } var ok bool for y := 0 ; y < n ; y ++ { for x := 0 ; x < n ; x ++ { ok = true var dy , dx int for dy = 0 ; dy < m && y + dy < n ; dy ++ { for dx = 0 ; dx < m && x + dx < n ; dx ++ { if a [ y + dy ] [ x + dx ] != b [ dy ] [ dx ] { ok = false break } } if ! ok { break } } if ok && dy == m && dx == m { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " log " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var s_1 , s_2 , s_3 int fmt . Scanf ( " % d % d % d " " NO " ) } else if s_2 != 5 && s_2 != 7 { fmt . Println ( " " ) } else if s_3 != 5 && s_3 != 7 { fmt . Println ( " " ) } fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) } else if a <= 12 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) A := [ ] int { } fmt . Scan ( & A ) for n := 0 ; n < N ; n ++ { var tmp int fmt . Scanf ( " % d "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 0 min := 2000000 for i := 0 ; i < n ; i ++ { if min > p [ i ] { min = p [ i ] ans + + } } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math / big " " os " " strconv " " % d % d % d \n " , h , n , w ) }
package main import " " func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d "
package main import ( " " " " ) func main ( ) { var a , b , c , d , e string fmt . Scan ( & a , & b , & c , & d , & e ) sHou , _ := strconv . Atoi ( a ) sMin , _ := strconv . Atoi ( b ) eHou , _ := strconv . Atoi ( c ) eMin , _ := strconv . Atoi ( d ) time , _ := strconv . Atoi ( e ) sta := sHou * 60 + sMin end := eHou * 60 + eMin fmt . Println ( end - sta - time ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Yes " ) } else { fmt . Println ( " No " " "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) for i := n ; i >= 1 ; i -- { if i & ( i - 1 ) == 0 { fmt . Println ( i ) return } } }
package main import ( " " " " ) func main ( ) { var n , a int s := [ ] int { } fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a ) s = append ( s , a ) } sort . Sort ( sort . IntSlice ( s ) ) nn := n - 1 an := s [ nn ] - s [ 0 ] fmt . Println ( an ) }
package main import ( " " " bufio " " os " " strconv " " "
package main import " " func prmFac ( x int ) map [ int ] int { pfm := make ( map [ int ] int ) for i := 2 ; i * i <= x ; i ++ { for x % i == 0 { x /= i pfm [ i ] + + } } if x > 1 { pfm [ x ] ++ } return pfm } func main ( ) { var n , p int fmt . Scan ( & n , & p ) ans := 1 for pn , cnt := range prmFac ( p ) { for i := 0 ; i < cnt ; i ++ { x := 1 for j := 0 ; j < n ; j ++ { x *= pn if x > p { break } else if j == n - 1 && p % x == 0 { ans *= pn p /= x } } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * n * h > N * h + N * n && N * h * n % ( 4 * n * h - N * h - N * n ) == 0 { w := N * h * n / ( 4 * n * h - N * h - N * n ) if w > 0 { fmt . Println ( h , n , w ) return } } } } }
package main import " " func main ( ) { var i int ; var num5 , num7 int ; num5 = 2 ; num7 = 1 ; for a := 0 ; a < 3 ; a ++ { fmt . Scan ( & i ) ; if ( i == 5 ) { num5 -- ; } else if ( i == 7 ) { num7 -- ; } else { continue ; } } if ( num5 == 0 && num7 == 0 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scanf ( " % d % d % d " " % d \n " , ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % d \n " , sum ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 1 for ans <= N { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " ) return } } } fmt . Println ( " No "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ret := k < e - a if ret { fmt . Println ( " : ( " ) } else { fmt . Println ( " Yay ! " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " math " " % f % f % f % f "
package main import " " func main ( ) { var n int fmt . Scanf ( " % d \n " , & n ) slice := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scanf ( " " , & slice [ i ] ) } min := 1000000 for i := 0 ; i <= 100 ; i ++ { total := 0 for j := 0 ; j < n ; j ++ { total += ( slice [ j ] - i ) * ( slice [ j ] - i ) } if min > total { min = total } } fmt . Println ( min ) }
package main import ( " " ) func main ( ) { var ha , ma , hb , mb , k int fmt . Scan ( & ha , & ma , & hb , & mb , & k ) a := 60 * ha + ma b := 60 * hb + mb ansM := ( b - k ) - a fmt . Println ( ansM ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if 0 <= Z && Z <= K && X + Y + Z == S { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var A , B int fmt . Scanf ( " % d " " % d " " % d \n " , cost ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " " ) func main ( ) { var N int fmt . Scan ( & N ) Xs := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & Xs [ i ] ) } minX , maxX := MinMax ( Xs ... ) ans := math . MaxInt32 for p := minX ; p <= maxX ; p ++ { sum := 0 for _ , x := range Xs { sum + = ( x - p ) * ( x - p ) } ans = Min ( ans , sum ) } fmt . Println ( ans ) } func Min ( xs ... int ) int { min := xs [ 0 ] for _ , x := range xs [ 1 : ] { if min > x { min = x } } return min } func MinMax ( slice ... int ) ( int , int ) { min , max := slice [ 0 ] , slice [ 0 ] for _ , v := range slice [ 1 : ] { if min > v { min = v } else if max < v { max = v } } return min , max }
package main import " " func main ( ) { var k int a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) if a [ 4 ] - a [ 0 ] > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " io " " os " " runtime / debug " " sort " " strconv " \n \r \t
package main import ( " " " os " " Y " " Four " " Three "
package main import ( " " ) func main ( ) { var age , cost int fmt . Scan ( & age , & cost ) if 5 >= age { fmt . Println ( " " ) } else if 12 >= age { fmt . Println ( cost / 2 ) } else { fmt . Println ( cost ) } }
package main import " " func main ( ) { var n_5 int var n_7 int t := make ( [ ] int , 3 ) fmt . Scan ( & t [ 0 ] , & t [ 1 ] , & t [ 2 ] ) for i := 0 ; i < 3 ; i ++ { if t [ i ] == 5 { n_5 ++ } else if t [ i ] == 7 { n_7 ++ } } if n_5 == 2 && n_7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var c [ 4 ] [ 4 ] int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 4 ] int var b [ 4 ] int a [ 1 ] = 0 for i := 1 ; i <= 3 ; i ++ { b [ i ] = c [ 1 ] [ i ] - a [ 1 ] } for i := 2 ; i <= 3 ; i ++ { a [ i ] = c [ i ] [ 1 ] - b [ 1 ] } var flag int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { if c [ i ] [ j ] != a [ i ] + b [ j ] { flag ++ } } } if flag == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func abs ( x float64 ) float64 { if x < 0 { return - x } return x } func min ( x , y float64 ) float64 { if x < y { return x } return y } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) hang := 30 * h + 30 * ( m / 60 ) mang := 360 * ( m / 60 ) ang := abs ( hang - mang ) ang = min ( ang , 360 - ang ) fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
package main import ( " " " sort " " YES " " NO "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) switch { case a <= 5 : fmt . Println ( " " ) case a <= 12 : fmt . Println ( b / 2 ) default : fmt . Println ( b ) } }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f " " % .19 f " " \n " ) } var sc = bufio . NewScanner ( os . Stdin ) func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import " " func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " strconv " " sort " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import . " " import . " " func main ( ) { var n int var s string Scan ( & n ) for i := 0 ; i < n ; i ++ { Scanf ( " " , & s ) if s == " " { Println ( " " ) Exit ( 0 ) } } Println ( " " ) }
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) hourDeg := ( h * 60 + m ) / 2 minDeg := m * 6 deg := minDeg - hourDeg if deg < 0 { deg = - deg } if deg >= 180 { deg = 360 - deg } rad := ( math . Pi / 180 ) * deg cc := ( a * a ) + ( b * b ) - 2 * a * b * math . Cos ( rad ) fmt . Println ( math . Sqrt ( cc ) ) }
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { c [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for i := 0 ; i <= 100 ; i ++ { for j := 0 ; j <= 100 ; j ++ { for k := 0 ; k <= 100 ; k ++ { if c [ 0 ] [ 0 ] - i == c [ 1 ] [ 0 ] - j && c [ 1 ] [ 0 ] - j == c [ 2 ] [ 0 ] - k && c [ 0 ] [ 1 ] - i == c [ 1 ] [ 1 ] - j && c [ 1 ] [ 1 ] - j == c [ 2 ] [ 1 ] - k && c [ 0 ] [ 2 ] - i == c [ 1 ] [ 2 ] - j && c [ 1 ] [ 2 ] - j == c [ 2 ] [ 2 ] - k { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import " " func main ( ) { var c1_1 , c1_2 , c1_3 , c2_1 , c2_2 , c2_3 , c3_1 , c3_2 , c3_3 int fmt . Scan ( & c1_1 , & c1_2 , & c1_3 , & c2_1 , & c2_2 , & c2_3 , & c3_1 , & c3_2 , & c3_3 ) d1 := c2_1 - c1_1 d2 := c2_2 - c1_2 d3 := c2_3 - c1_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c3_1 - c2_1 d2 = c3_2 - c2_2 d3 = c3_3 - c2_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c1_1 - c3_1 d2 = c1_2 - c3_2 d3 = c1_3 - c3_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " io " " os " " strconv " " % d \n " , v ) } func ( io * IO ) PutString ( s string ) { fmt . Fprintf ( io . Writer , " \n " , s ) }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " fmt " " math " " os " " strconv " " % g \n " , ans ) }
package main import " " const div = 1000000000 + 7 func abs ( i int ) int { if i < 0 { return - i } return i } func mod ( i int ) int { return i % div } func fact ( i int ) int { if i == 1 { return 1 } return mod ( i * fact ( i - 1 ) ) } func main ( ) { var n , m int fmt . Scan ( & n , & m ) if abs ( n - m ) > 1 { fmt . Println ( 0 ) return } mn := fact ( n ) mm := fact ( m ) if n == m { fmt . Println ( mod ( mn * mm * 2 ) ) return } fmt . Println ( mod ( mn * mm ) ) }
package main import ( " " " os " " strconv " " strings " " fmt " " " " Yes " " No "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " hoge " " " " Yes " " No " " YES " " NO " " yes " " no "
package main import " " func main ( ) { var a int fmt . Scanf ( " % d " " % d \n " , a * a * a ) }
package main import ( " " " os " " bufio " " strconv " " YES " " YES " " YES " " NO "
package main import " " func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) five := 0 seven := 0 for i := 0 ; i < 3 ; i ++ { if a [ i ] == 5 { five ++ } if a [ i ] == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " YES " " NO " \n \r \t " % d "
package main import ( " " ) func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { c [ i ] = make ( [ ] int , 3 ) fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } a := [ ] int { 0 , - 1 , - 1 } b := [ ] int { - 1 , - 1 , - 1 } i := 0 for j := 0 ; j < 3 ; j ++ { b [ j ] = c [ i ] [ j ] - a [ i ] } for i = 1 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { a [ i ] = c [ i ] [ j ] - b [ j ] } } for ai := 0 ; ai < 3 ; ai ++ { for bi := 0 ; bi < 3 ; bi ++ { if a [ ai ] + b [ bi ] != c [ ai ] [ bi ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " strings "
package main import ( " " " sort " " YES " " NO "
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " " os " " strconv " " strings " " fmt " " " " \n " ) ) Output ( ) }
package main import " " func main ( ) { var N , K int fmt . Scan ( & N , & K ) if K == 1 { fmt . Println ( 0 ) } else { fmt . Println ( N - K ) } }
package main import ( " " " math " " % 0.10 f \n " , ans ) }
package main import ( " " " math " " % d % d % d % d \n " , & A , & B , & H , & M ) hpi := 2 * math . Pi * float64 ( H * 60 + M ) / 12 / 60 mpi := 2 * math . Pi * float64 ( M ) / 60 theta := math . Abs ( float64 ( hpi - mpi ) ) d := float64 ( A * A ) + float64 ( B * B ) - float64 ( 2 * A * B ) * math . Cos ( theta ) fmt . Println ( math . Sqrt ( d ) ) } type IntHeap [ ] int func ( h IntHeap ) Len ( ) int { return len ( h ) } func ( h IntHeap ) Less ( i , j int ) bool { return h [ i ] < h [ j ] } func ( h IntHeap ) Swap ( i , j int ) { h [ i ] , h [ j ] = h [ j ] , h [ i ] } func ( h * IntHeap ) Push ( x interface { } ) { * h = append ( * h , x . ( int ) ) } func ( h * IntHeap ) Pop ( ) interface { } { old := * h n := len ( old ) x := old [ n - 1 ] * h = old [ 0 : n - 1 ] return x }
package main import ( " " ) func main ( ) { var ( k , s , num int ) fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { num + + } } } fmt . Println ( num ) }
package main import ( " " ) func main ( ) { var k , s int ans := 0 fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for t := 0 ; t <= k ; t ++ { z := s - i - t if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a >= 6 && a <= 12 { fmt . Println ( b / 2 ) return } if a < 6 { fmt . Println ( 0 ) return } fmt . Println ( b ) }
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " " ) func main ( ) { as := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & as [ i ] ) } sort . Ints ( as ) result := as [ 2 ] - as [ 0 ] fmt . Println ( result ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) list := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & list [ i ] ) } min := 10000 * n for i := 1 ; i <= 100 ; i ++ { total := 0 for j := 0 ; j < n ; j ++ { total += ( list [ j ] - i ) * ( list [ j ] - i ) } if total <= min { min = total } } fmt . Println ( min ) }
package main import " " func main ( ) { var n , ti , ai int fmt . Scan ( & n ) t := 1 a := 1 for i := 0 ; i < n ; i ++ { fmt . Scan ( & ti , & ai ) k := max ( 1 + ( t - 1 ) / ti , 1 + ( a - 1 ) / ai ) t = ti * k a = ai * k } fmt . Println ( t + a ) } func max ( a , b int ) int { if b > a { return b } return a }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " % d \n " , x * x * x ) } var nextReader func ( ) string func newScanner ( ) func ( ) string { r := bufio . NewScanner ( os . Stdin ) r . Buffer ( make ( [ ] byte , 1024 ) , int ( 1e+11 ) ) r . Split ( bufio . ScanWords ) return func ( ) string { r . Scan ( ) return r . Text ( ) } } func nextString ( ) string { return nextReader ( ) } func nextInt64 ( ) int64 { v , _ := strconv . ParseInt ( nextReader ( ) , 10 , 64 ) return v } func nextInt ( ) int { v , _ := strconv . Atoi ( nextReader ( ) ) return v } func nextInts ( n int ) [ ] int { r := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { r [ i ] = nextInt ( ) } return r } func nextInt64s ( n int ) [ ] int64 { r := make ( [ ] int64 , n ) for i := 0 ; i < n ; i ++ { r [ i ] = nextInt64 ( ) } return r } func nextFloat64 ( ) float64 { f , _ := strconv . ParseFloat ( nextReader ( ) , 64 ) return f } func maxInt ( a , b int ) int { if a > b { return a } else { return b } }
package main import ( " " ) var D , N int type cloth struct { A , B , C int } func abs ( a int ) int { if a > 0 { return a } return - a } func max ( a , b int ) int { if a < b { return b } return a } func main ( ) { fmt . Scan ( & D , & N ) thermals := make ( [ ] int , D + 1 ) for i := 1 ; i <= D ; i ++ { fmt . Scan ( & thermals [ i ] ) } clothes := make ( [ ] cloth , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & clothes [ i ] . A , & clothes [ i ] . B , & clothes [ i ] . C ) } dp := make ( [ ] [ ] int , D + 1 ) for i := range dp { dp [ i ] = make ( [ ] int , N ) } for i := 1 ; i < D ; i ++ { for j := 0 ; j < N ; j ++ { for k := 0 ; k < N ; k ++ { t1 := thermals [ i ] t2 := thermals [ i + 1 ] if clothes [ j ] . A <= t2 && t2 <= clothes [ j ] . B && clothes [ k ] . A <= t1 && t1 <= clothes [ k ] . B { dp [ i + 1 ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ k ] + abs ( clothes [ j ] . C - clothes [ k ] . C ) ) } } } } val := 0 for _ , v := range dp [ D ] { val = max ( val , v ) } fmt . Println ( val ) }
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) diffTime := ( h2 - h1 ) * 60 + ( m2 - m1 ) if diffTime < k { fmt . Println ( 0 ) } else { fmt . Println ( diffTime - k ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " bufio " " os " " strings " " strconv " " " " YES " " NO "
package main import " " func main ( ) { var N int _ , _ = fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string _ , _ = fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := range xs { fmt . Scan ( & xs [ i ] ) } min := math . MaxInt32 for i := 1 ; i <= 100 ; i ++ { sum := 0 for _ , x := range xs { sum + = ( x - i ) * ( x - i ) } if sum < min { min = sum } } fmt . Println ( min ) }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func max ( a , b int ) int { if a < b { return b } return a } func ceil ( a , b int ) int { if a % b == 0 { return a / b } return a / b + 1 } func main ( ) { var n int fmt . Scan ( & n ) ts := make ( [ ] int , n ) as := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ts [ i ] , & as [ i ] ) } var totalT , totalA int for i := 0 ; i < n ; i ++ { t := ts [ i ] a := as [ i ] if totalA <= a && totalT <= t { totalT = t totalA = a continue } c := max ( ceil ( totalA , a ) , ceil ( totalT , t ) ) totalT = t * c totalA = a * c } result := totalT + totalA fmt . Println ( result ) }
package main import ( " " " " ) func main ( ) { A := make ( [ ] int , 3 ) fmt . Scan ( & A [ 0 ] , & A [ 1 ] , & A [ 2 ] ) sort . Ints ( A ) ans := A [ 2 ] - A [ 0 ] fmt . Println ( ans ) }
package main import ( " " " sort " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var k int A := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & A [ i ] ) } fmt . Scan ( & k ) for i := 4 ; i > 1 ; i -- { if A [ i ] - A [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " os " " strconv " " strings " " fmt " " sort " " "
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import ( " " " fmt " " os " " sort " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import " " func main ( ) { var a , b int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var H1 , M1 , H2 , M2 , K int fmt . Scanf ( " % d % d % d % d % d "
package main import ( " " " fmt " " io " " log " " os " " strconv " " Yes " " No " " Scan failed " " Scan failed "
package main import ( " " " strconv " " os " " bufio " " : ( " " Yay ! " ) } }
package main import " " func main ( ) { var ( a , b , c int ) fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) if ( a == 5 && b == 5 && c == 7 ) | | ( a == 5 && b == 7 && c == 5 ) | | ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " YES " " NO " ) } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import " " func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " fmt " " os " " strconv " " No " " No " " Yes "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { c := [ 3 ] [ 3 ] int { } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } x := [ 3 ] int { } y := [ 3 ] int { } x [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] } for i := 0 ; i < 3 ; i ++ { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] } good := true for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if x [ i ] + y [ j ] != c [ i ] [ j ] { good = false } } } if good { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) mx := 0 for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) if mx < x [ i ] { mx = x [ i ] } } ans := int ( 1e9 ) for p := 1 ; p <= mx ; p ++ { t := 0 for j := 0 ; j < n ; j ++ { p := ( x [ j ] - p ) * ( x [ j ] - p ) t += p } if t < ans { ans = t } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var N int fmt . Scan ( & N ) arr := make ( [ ] int , N ) for i := range arr { fmt . Scan ( & arr [ i ] ) } sort . Ints ( arr ) fmt . Println ( arr [ len ( arr ) - 1 ] - arr [ 0 ] ) }
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) ans := b if a >= 6 && a < 13 { ans = b / 2 } else if a < 6 { ans = 0 } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) rec := float64 ( 30 * h + m / 2 - 6 * m ) cosC := math . Cos ( rec * math . Pi / 180 ) result := a * a + b * b - float64 ( 2 * a * b * cosC ) fmt . Println ( math . Sqrt ( result ) ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] count := 1 for i := 1 ; i < N ; i ++ { if P [ i ] <= min { min = P [ i ] count += 1 } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var N , M int fmt . Scan ( & N , & M ) A := make ( [ ] [ ] byte , N ) for i := range A { A [ i ] = make ( [ ] byte , N ) fmt . Scan ( & A [ i ] ) } B := make ( [ ] [ ] byte , M ) for i := range B { B [ i ] = make ( [ ] byte , M ) fmt . Scan ( & B [ i ] ) } for i := 0 ; i + M <= N ; i ++ { for j := 0 ; j + M <= N ; j ++ { ok := true for k := 0 ; k < M ; k ++ { for l := 0 ; l < M ; l ++ { if A [ i + k ] [ j + l ] != B [ k ] [ l ] { ok = false } } } if ok { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) min := a max := a for i := 1 ; i < 5 ; i ++ { var o int fmt . Scan ( & o ) if min > o { min = o } if max < o { max = o } } var k int fmt . Scan ( & k ) if max - min > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) res := 2 for res <= n { res *= 2 } fmt . Println ( res / 2 ) }
package main import " " func max ( a , b int ) int { if a > b { return a } return b } func main ( ) { var n int fmt . Scan ( & n ) ts := make ( [ ] int , n ) as := make ( [ ] int , n ) for i := range as { fmt . Scan ( & ts [ i ] , & as [ i ] ) } a := as [ 0 ] t := ts [ 0 ] for i := range ts { d := max ( ( t - 1 ) / ts [ i ] + 1 , ( a - 1 ) / as [ i ] + 1 ) a = d * as [ i ] t = d * ts [ i ] } fmt . Println ( a + t ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) arr := make ( [ ] int , N ) var sum int for i := 0 ; i < N ; i ++ { var n int fmt . Scanf ( " % d "
package main import ( " " " math " " % f % f % f % f "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) count := 0 pow := 1 for pow << 1 <= n { count ++ pow = pow << 1 } fmt . Println ( pow ) }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 7 && b == 5 && c == 5 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 5 && b == 5 && c == 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var k , s , z int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z = s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) } else if a <= 12 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( " " ) } else if a <= 12 { fmt . Printf ( " \n " , b / 2 ) } else { fmt . Printf ( " \n " , b ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func intsMax : zero length slice " " func intsMaxIdx : zero length slice " " func intsMin : zero length slice " " func intsMinIdx : zero length slice " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " sort " " strings " " " " "
package main import ( " " " sort " " strings " " " " "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) "
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) v := N & - N for N - v > 0 { N -= v v = N & - N } fmt . Println ( N ) }
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " math " " % d % d % d " " YES " " NO "
package main import ( " " " math " " math / cmplx "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var s string for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " " " 0 " ) } else if a < 13 { fmt . Printf ( " \n " , b / 2 ) } else { fmt . Printf ( " \n " , b ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Yay ! " ) } else { fmt . Println ( " : ( "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import " " func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " YES " ) } else { fmt . Println ( " NO "
package main import " " func main ( ) { var A , B , r int fmt . Scan ( & A , & B ) if A >= 13 { r = B } else if A >= 6 { r = B / 2 } else { r = 0 } fmt . Println ( r ) }
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 5 && b == 5 && c == 7 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans <= n { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func pow ( num int , time int ) int { res := 1 for time > 0 { if time % 2 != 0 { res = res * num } num = num * num time /= 2 } return res } func Max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for _ , val := range nums { if res < val { res = val } } return res } func solve ( n int ) int { var cnt int for ; n % 2 == 0 ; n /= 2 { cnt ++ } return cnt } func main ( ) { var n , ans int fmt . Scan ( & n ) for i := 1 ; i <= n ; i ++ { ans = Max ( ans , solve ( i ) ) } fmt . Println ( pow ( 2 , ans ) ) }
package main import " " func main ( ) { grid := make ( [ ] [ 3 ] int , 3 ) for i := 0 ; i < 3 ; i ++ { grid [ i ] = [ 3 ] int { } for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & grid [ i ] [ j ] ) } } var a1 , a2 , a3 , b1 , b2 , b3 int b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 1 ] [ 0 ] - a1 b3 = grid [ 2 ] [ 0 ] - a1 a2 = grid [ 0 ] [ 1 ] - b1 a3 = grid [ 0 ] [ 2 ] - b1 flag := true if grid [ 1 ] [ 1 ] != a2 + b2 { flag = false } if grid [ 1 ] [ 2 ] != a3 + b2 { flag = false } if grid [ 2 ] [ 1 ] != a2 + b3 { flag = false } if grid [ 2 ] [ 2 ] != a3 + b3 { flag = false } if flag == true { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import " " func main ( ) { var k int antennas := ScanNums ( 5 ) fmt . Scan ( & k ) anyUnconnectable := false for _ , length := range antennas [ 1 : ] { if length - antennas [ 0 ] > k { anyUnconnectable = true } } if anyUnconnectable { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func ScanNums ( len int ) ( nums [ ] int ) { var num int for i := 0 ; i < len ; i ++ { fmt . Scan ( & num ) nums = append ( nums , num ) } return }
package main import ( " " " fmt " " os " " strconv " " strings " " " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) m := make ( [ ] string , n ) for i := range m { fmt . Scan ( & m [ i ] ) } hinaArare := make ( map [ string ] struct { } ) for _ , v := range m { hinaArare [ v ] = struct { } { } } if len ( hinaArare ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k && d - a <= k && c - a <= k && b - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) var hh , nn , ww int for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * h * n - h * N - n * N <= 0 { continue } if ( h * n * N ) % ( 4 * h * n - h * N - n * N ) == 0 { hh = h nn = n ww = ( h * n * N ) / ( 4 * h * n - h * N - n * N ) } } } fmt . Printf ( " \n " , hh , nn , ww ) }
package main import ( " " " fmt " " os " " strconv " " strings "
package main import ( " " ) func main ( ) { ts := make ( [ ] int , 6 ) for i := 0 ; i < 6 ; i ++ { fmt . Scan ( & ts [ i ] ) } if ts [ 4 ] - ts [ 0 ] <= ts [ 5 ] { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import " " func main ( ) { var wh , wm , sh , sm , k int fmt . Scan ( & wh , & wm , & sh , & sm , & k ) ans := ( sh - wh ) * 60 - ( wm - sm ) - k fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var num int fmt . Scan ( & num ) num = num * num * num fmt . Println ( num ) }
package main import " " func main ( ) { var n , t , min int c := 1 fmt . Scan ( & n ) fmt . Scan ( & min ) for i := 1 ; i < n ; i ++ { fmt . Scan ( & t ) if t < min { c + + min = t } } fmt . Println ( c ) }
package main import ( " " ) func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " bufio " " os " " strconv " " "
package main import ( " " ) func main ( ) { var a float64 var b float64 fmt . Scan ( & a ) fmt . Scan ( & b ) n := 0 if a <= 5 { n = 0 } else if a >= 6 && a <= 12 { n = int ( b / 2 ) } else { n = int ( b ) } fmt . Println ( n ) }
package main import ( " " " fmt " " os " " strconv " " math "
package main import " " func main ( ) { var A , B int fmt . Scanf ( " % d % d "
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) num := 0 if N == 0 { fmt . Println ( " " ) } tmp := 0 min := 0 fmt . Scan ( & min ) for i := 1 ; i < N ; i ++ { fmt . Scan ( & tmp ) if tmp > min { num ++ } if min > tmp { min = tmp } } fmt . Println ( N - num ) }
package main import " " var k , s int func main ( ) { fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if z < 0 || k < z { continue } ans += 1 } } fmt . Println ( ans ) }
package main import " " func main ( ) { var h1 , h2 , m1 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) s := h1 * 60 + m1 e := h2 * 60 + m2 r := e - k - s fmt . Println ( r ) }
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import ( " " " fmt " " log " " os " " strconv " " strings " \n " \n " ) , 10 , 32 ) if err != nil { log . Fatal ( err ) } val = val * val * val fmt . Println ( val ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for a1 := 0 ; a1 <= c [ 0 ] [ 0 ] ; a1 ++ { b1 := c [ 0 ] [ 0 ] - a1 b2 := c [ 0 ] [ 1 ] - a1 b3 := c [ 0 ] [ 2 ] - a1 a2 := c [ 1 ] [ 0 ] - b1 a3 := c [ 2 ] [ 0 ] - b1 if a2 + b2 == c [ 1 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " func main ( ) { var A , B int fmt . Scan ( & A , & B ) if A >= 13 { fmt . Println ( B ) } else if A <= 5 { fmt . Println ( 0 ) } else { fmt . Println ( B / 2 ) } }
package main import ( " " " " ) func main ( ) { var A1 , A2 , A3 int _ , _ = fmt . Scan ( & A1 , & A2 , & A3 ) A := [ ] int { A1 , A2 , A3 } sort . Ints ( A ) ans := ( A [ 2 ] - A [ 1 ] ) + ( A [ 1 ] - A [ 0 ] ) fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % d " " " " " " "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) as := make ( [ ] int , n ) for i := range as { fmt . Scan ( & as [ i ] ) } sort . Ints ( as ) fmt . Println ( as [ len ( as ) - 1 ] - as [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import ( " " " fmt " " os " " math " " % v % v % v % v \n " , & a , & b , & h , & m ) x : = float64 ( 360 ) / float64 ( 12 * 60 ) * float64 ( h * 60 + m ) y := float64 ( 360 / 60 * m ) delta := math . Abs ( x - y ) degrees := delta if delta == 180 { printf ( " \n " , a + b ) return } else if delta > 180 { degrees = 360 - delta } ans := math . Sqrt ( math . Pow ( float64 ( a ) , 2 ) + math . Pow ( float64 ( b ) , 2 ) - float64 ( 2 ) * ( float64 ( a ) * float64 ( b ) * math . Cos ( degrees * math . Pi / 180 ) ) ) printf ( " \n " , ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ret := k < e - d || k < e - c || k < e - b || k < e - a || k < d - c || k < d - b || k < d - a || k < c - b || k < c - a || k < b - a if ret { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xlist := IntSlice ( n ) total := SumSlice ( xlist ) avg := total / n p1 , p2 := avg , avg + 1 dsum1 , dsum2 := 0 , 0 for i := 0 ; i < n ; i ++ { dsum1 += IntPow ( p1 - xlist [ i ] , 2 ) dsum2 + = IntPow ( p2 - xlist [ i ] , 2 ) } fmt . Println ( Min ( dsum1 , dsum2 ) ) } func IntSlice ( n int ) [ ] int { slice := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & slice [ i ] ) } return slice } func SumSlice ( slice [ ] int ) int { total := 0 for i := 0 ; i < len ( slice ) ; i ++ { total += slice [ i ] } return total } func Min ( x , y int ) int { if x > y { return y } else { return x } } func IntPow ( x , pow int ) int { return int ( math . Pow ( float64 ( x ) , float64 ( pow ) ) ) }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) time := ( 60 * h2 + m2 ) - ( 60 * h1 + m1 ) res := time - k fmt . Println ( res ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " " ) func main ( ) { var N int fmt . Scan ( & N ) a := make ( [ ] int , N ) for i := range a { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ len ( a ) - 1 ] - a [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := range xs { fmt . Scan ( & xs [ i ] ) } min := sum ( 0 , xs ) for i := 1 ; i <= 100 ; i ++ { tmp := sum ( i , xs ) if min > tmp { min = tmp } } fmt . Print ( min ) } func sum ( p int , xs [ ] int ) int { var s int for _ , x := range xs { tmp := x - p s += tmp * tmp } return s }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) var count int for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { k := S - i - j if 0 <= k && k <= K { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { n , an := 0 , 1 << 63 - 1 var x [ ] int fmt . Scanf ( " " , & n ) for i := 0 ; i < n ; i ++ { tmp := 0 fmt . Scanf ( " " , & tmp ) x = append ( x , tmp ) } for i := 1 ; i <= 100 ; i ++ { an1 := 0 for _ , j := range x { an1 += ( j - i ) * ( j - i ) } if an > an1 { an = an1 } } fmt . Println ( an ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) } if o ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n
package main import " " func min ( a int , b int ) int { if a > b { return b } else { return a } } func zet ( a int ) int { if a < 0 { return a * ( - 1 ) } else { return a } } func main ( ) { var n , m int fmt . Scan ( & n , & m ) ans := 0 for i := 0 ; i <= n ; i += 1 { for j := 0 ; j <= n ; j += 1 { x := m - i - j if x <= n && x >= 0 { ans += 1 } } } fmt . Println ( ans ) }
package main import " " var C [ ] [ ] int func main ( ) { C = make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { C [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scanf ( " " , & C [ i ] [ j ] ) } } ans := true for i := 0 ; i < 2 ; i ++ { for j := 0 ; j < 2 ; j ++ { ans = ans && ( C [ i ] [ j ] - C [ i + 1 ] [ j ] + C [ i + 1 ] [ j + 1 ] == C [ i ] [ j + 1 ] ) } } if ans { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) var fee int if a > 12 { fee = b } else if a > 5 { fee = b / 2 } else { fee = 0 } fmt . Println ( fee ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var ( d [ 5 ] int k int ) for i := 0 ; i < 5 ; i ++ { fmt . Scanln ( & d [ i ] ) } fmt . Scanln ( & k ) if d [ 4 ] - d [ 0 ] > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " math " " % .0 f \n " , math . Max ( math . Max ( a , b ) , c ) - math . Min ( math . Min ( a , b ) , c ) ) }
package main import ( " " " fmt " " os "
package main import ( " " ) func main ( ) { var age , price int fmt . Scan ( & age , & price ) if age >= 13 { fmt . Println ( price ) } else if 6 <= age { fmt . Println ( price / 2 ) } else { fmt . Println ( 0 ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) var ans int for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES \n " ) } else { fmt . Printf ( " \n " ) } }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import " " func main ( ) { var a int fmt . Scan ( & a ) i := a * a * a fmt . Println ( i ) }
package main import ( " " " " ) func round ( f float64 ) float64 { return math . Floor ( f + .5 ) } func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) sum := 0 for i , _ := range X { fmt . Scan ( & X [ i ] ) sum += X [ i ] } avg := int ( round ( float64 ( sum ) / float64 ( N ) ) ) result := 0 for _ , x := range X { result + = ( x - avg ) * ( x - avg ) } fmt . Println ( result ) }
package main import " " func main ( ) { c := make ( [ ] int , 3 ) for i , _ := range c { fmt . Scan ( & c [ i ] ) } if c [ 0 ] == 7 && c [ 1 ] == 5 && c [ 2 ] == 5 { fmt . Println ( " " ) return } if c [ 0 ] == 5 && c [ 1 ] == 7 && c [ 2 ] == 5 { fmt . Println ( " " ) return } if c [ 0 ] == 5 && c [ 1 ] == 5 && c [ 2 ] == 7 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " bufio " " os " " strings " " fmt " " math " " " " "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { v := s - x - y if 0 <= v && v <= k { ans + + } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - d > k || e - c > k || e - b > k || e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) return }
package main import ( " " " fmt " " log " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } } else if a == 5 { if b == 7 && c == 5 { fmt . Println ( " " ) } else if b == 5 && c == 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , n , time , x , y int fmt . Scan ( & a , & b , & c , & d , & n ) x = 60 * a + b y = 60 * c + d time = y - x fmt . Println ( time - n ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " % 0.15 f "
package main import ( " " " " ) func main ( ) { var n , m , ans int mod := 1000000007 fmt . Scan ( & n , & m ) ans = 1 if math . Abs ( float64 ( n - m ) ) >= 2 { ans = 0 } else { for i := 1 ; i <= n ; i ++ { ans *= i ans % = mod } for i := 1 ; i <= m ; i ++ { ans *= i ans % = mod } } if n == m { ans *= 2 ans %= mod } fmt . Println ( ans ) }
package main import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] [ ] int , n ) b := make ( [ ] [ ] int , m ) for i := 0 ; i < n ; i ++ { a [ i ] = make ( [ ] int , n ) var s string fmt . Scan ( & s ) for j := 0 ; j < n ; j ++ { a [ i ] [ j ] = int ( s [ j ] ) } } for i := 0 ; i < m ; i ++ { b [ i ] = make ( [ ] int , m ) var s string fmt . Scan ( & s ) for j := 0 ; j < m ; j ++ { b [ i ] [ j ] = int ( s [ j ] ) } } ok := false for ly := 0 ; ly < n ; ly ++ { for lx := 0 ; lx < n ; lx ++ { if ly + m > n || lx + m > n { continue } match := true for y := 0 ; y < m ; y ++ { for x := 0 ; x < m ; x ++ { if a [ ly + y ] [ lx + x ] != b [ y ] [ x ] { match = false } } } if match { ok = true } } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) type BreakCount map [ int ] int func main ( ) { var N int fmt . Scan ( & N ) result := 0 count := 0 for { if float64 ( N ) < math . Pow ( 2.0 , float64 ( count ) ) { result = int ( math . Pow ( 2.0 , float64 ( count - 1 ) ) ) break } count ++ } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r ) F pri n t n(writ r N ") } func eq u al(i, j i , , b [] tring ) b o { m : = l n ( b) for := ; k < ; k + + fo : 0 m l+ if a i+ ] [ + ] ! = b [k [ ] r e t u r n f a l e } } r e u n true }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d \n " , ans ) }
package main import " " func main ( ) { var n int fmt . Scanf ( " % d \n " , & n ) x := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scanf ( " " , & x [ i ] ) } best := int ( 1e9 ) for i := 1 ; i <= 100 ; i ++ { score := 0 for _ , e := range x { score + = ( e - i ) * ( e - i ) } if best > score { best = score } } fmt . Printf ( " \n " , best ) }
package main import ( " " " fmt " " io " " log " " math " " os " " strconv " " Scan failed " " Scan failed "
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import " " func main ( ) { var k , s int ans := 0 fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if x + y > s { break } if s - x - y <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func f ( i int ) int { n := 0 for i % 2 == 0 { n + + i / = 2 } return n } func main ( ) { var n int fmt . Scan ( & n ) ans , x := 0 , 0 for i := 1 ; i <= n ; i ++ { y := f ( i ) if x <= y { ans , x = i , y } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a int count := 0 result := 1 fmt . Scan ( & a ) for i := 1 ; i <= a ; i ++ { countInternal := 0 numberStore := i for numberStore % 2 == 0 { countInternal ++ numberStore /= 2 } if countInternal > count { count = countInternal result = i } } fmt . Println ( result ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { tmp := p [ i ] if tmp <= min { ans + + } if tmp < min { min = tmp } } fmt . Println ( ans ) }
package main import " " func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " fmt " " os " " sort " " strconv " " YES " " NO "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) radH := ( float64 ( h ) + float64 ( m ) / 60 ) * 2 * math . Pi / 12 radM := float64 ( m ) * 2 * math . Pi / 60 rad := math . Abs ( radH - radM ) ans := float64 ( a * a ) + float64 ( b * b ) - 2 * float64 ( a * b ) * math . Cos ( rad ) ans = math . Sqrt ( ans ) fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " "
package main import " " func main ( ) { var k , s int fmt . Scanf ( " % d % d \n " , & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { r := s - x - y if 0 <= r && r <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a1 , a2 , a3 float64 var sl [ ] int fmt . Scan ( & a1 , & a2 , & a3 ) sl = append ( sl , int ( math . Abs ( a1 - a2 ) + math . Abs ( a2 - a3 ) ) ) sl = append ( sl , int ( math . Abs ( a2 - a3 ) + math . Abs ( a3 - a1 ) ) ) sl = append ( sl , int ( math . Abs ( a3 - a1 ) + math . Abs ( a1 - a2 ) ) ) min := 300 for _ , v := range sl { if v < min { min = v } } fmt . Println ( min ) }
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " Scan failed " ) } return r . Text ( ) } f2 := func ( ) [ ] byte { if ! r . Scan ( ) { panic ( " " ) } return r . Bytes ( ) } return f1 , f2 } func readInt ( ) int { return int ( readInt64 ( ) ) } func readInt64 ( ) int64 { i , err := strconv . ParseInt ( readString ( ) , 10 , 64 ) if err != nil { panic ( err . Error ( ) ) } return i } func readFloat64 ( ) float64 { f , err := strconv . ParseFloat ( readString ( ) , 64 ) if err != nil { panic ( err . Error ( ) ) } return f } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a } func sum ( a [ ] int ) int { var ret int for i := range a { ret += a [ i ] } return ret } func sumFloat64 ( a [ ] float64 ) float64 { var ret float64 for i := range a { ret += a [ i ] } return ret } func gcd ( m , n int ) int { for m % n != 0 { m , n = n , m % n } return n } func lcm ( m , n int ) int { return m / gcd ( m , n ) * n }
package main import ( " " " fmt " " log " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func isMatch ( a , b [ ] string , m , x , y int ) bool { match := true for i := 0 ; i < m ; i ++ { for j := 0 ; j < m ; j ++ { if a [ x + i ] [ y + j ] != b [ i ] [ j ] { match = false } } } return match } func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] string , n ) b := make ( [ ] string , m ) for i := range a { fmt . Scan ( & a [ i ] ) } for i := range b { fmt . Scan ( & b [ i ] ) } ok := false for i := 0 ; i <= n - m ; i ++ { for j := 0 ; j <= n - m ; j ++ { ok = ok || isMatch ( a , b , m , i , j ) } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import ( " " " " ) func main ( ) { var A , B , H , M int fmt . Scan ( & A , & B , & H , & M ) s := float64 ( 60 * H + M ) / 2 l := float64 ( 6 * M ) angle := math . Abs ( l - s ) if angle > float64 ( 180 ) { angle = float64 ( 360 ) - angle } lh := A sh := B if B > A { lh = B sh = A } cos := math . Cos ( ( angle * math . Pi ) / 180 ) sin := math . Sin ( ( angle * math . Pi ) / 180 ) a := float64 ( sh ) * sin b := float64 ( lh ) - float64 ( sh ) * cos res := math . Sqrt ( a * a + b * b ) fmt . Println ( res ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) a := make ( [ ] int , n ) for i , _ := range a { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ len ( a ) - 1 ] - a [ 0 ] ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) if n == 1 { fmt . Println ( 1 ) } else if n >= 2 && n < 4 { fmt . Println ( 2 ) } else if n >= 4 && n < 8 { fmt . Println ( 4 ) } else if n >= 8 && n < 16 { fmt . Println ( 8 ) } else if n >= 16 && n < 32 { fmt . Println ( 16 ) } else if n >= 32 && n < 64 { fmt . Println ( 32 ) } else if n >= 64 && n <= 100 { fmt . Println ( 64 ) } }
package main import ( " " " " ) func sq ( i float64 ) float64 { return i * i } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mo := m * 6 ho := h * 30 + m * 0.5 result := sq ( a ) + sq ( b ) - 2 * a * b * math . Cos ( ( mo - ho ) * ( math . Pi / 180 ) ) fmt . Println ( math . Sqrt ( result ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 0 min := p [ 0 ] for i := 0 ; i < n ; i ++ { if p [ i ] <= min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) val := [ ] int { a , b , c } sort . Sort ( sort . IntSlice ( val ) ) fmt . Println ( val [ 2 ] - val [ 0 ] ) }
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for i := 0 ; i <= K ; i ++ { for j := max ( S - i - K , 0 ) ; j <= min ( K , S - i ) ; j ++ { r ++ } } fmt . Println ( r ) } func max ( a , b int ) int { if a > b { return a } return b } func min ( a , b int ) int { if a > b { return b } return a }
package main import ( " " " fmt " " math " " math / cmplx " " os " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import " " func main ( ) { var c11 , c12 , c13 , c21 , c22 , c23 , c31 , c32 , c33 int fmt . Scan ( & c11 , & c12 , & c13 ) fmt . Scan ( & c21 , & c22 , & c23 ) fmt . Scan ( & c31 , & c32 , & c33 ) if c12 - c11 != c22 - c21 || c12 - c11 != c32 - c31 || c13 - c11 != c23 - c21 || c13 - c11 != c33 - c31 || c21 - c11 != c22 - c12 || c21 - c11 != c23 - c13 || c31 - c11 != c32 - c12 || c31 - c11 != c33 - c13 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 double := 0 triple := 0 for x := 0 ; x <= k ; x ++ { for y := x ; y <= k ; y ++ { for z := y ; z <= k ; z ++ { if x + y + z == s { count ++ if x == y && y == z { triple ++ } else if x == y || y == z || z == x { double ++ } } } } } count = ( count - ( double + triple ) ) * 6 + double * 3 + triple fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % s = % + v \n " , name , value ) } func intMin ( a , b int ) int { if a < b { return a } return b } func intMax ( a , b int ) int { if a > b { return a } return b } func f ( A [ ] int ) int { N := len ( A ) S := 0 for i := 0 ; i < N - 1 ; i ++ { S += A [ i ] S %= MOD } R := A [ N - 1 ] * ( N - 1 ) - S R %= MOD for i := N - 2 ; i >= 0 ; i -- { S -= A [ i ] if S < 0 { S += MOD } R += A [ i ] * i - S R %= MOD } return R } const ( MOD = 1000000007 ) func main ( ) { io := NewIo ( ) defer io . Flush ( ) N := io . NextInt ( ) M := io . NextInt ( ) X := make ( [ ] int , N ) Y := make ( [ ] int , M ) for i := 0 ; i < N ; i ++ { X [ i ] = io . NextInt ( ) } for i := 0 ; i < M ; i ++ { Y [ i ] = io . NextInt ( ) } A := f ( X ) B := f ( Y ) io . PrintLn ( ( A * B ) % MOD ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " strconv . Atoi failed : % v \n " , err ) } return n } func stringifyArray ( arr [ ] int ) string { return strings . TrimRight ( fmt . Sprintf ( " % + v " " ] " ) } func main ( ) { scanner . Split ( bufio . ScanWords ) count := map [ int ] int { } sizeA := nextInt ( ) for i := 0 ; i < sizeA ; i ++ { count [ nextInt ( ) ] ++ } sizeB := nextInt ( ) for i := 0 ; i < sizeB ; i ++ { count [ nextInt ( ) ] ++ } keys := [ ] int { } for k := range count { keys = append ( keys , k ) } sort . Ints ( keys ) for _ , k := range keys { fmt . Println ( k ) } }
package main import ( " " " bufio " " os "
package main import " " import " " func main ( ) { var N , v , d int var list [ ] int fmt . Scanf ( " % d " , & N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & v ) list = append ( list , v ) } sort . Sort ( sort . IntSlice ( list ) ) for i := 1 ; i < N ; i ++ { d += ( list [ i ] - list [ i - 1 ] ) } fmt . Println ( d ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K ) fmt . Scan ( & S ) acc := 0 for x := 0 ; x <= 2500 ; x ++ { if K < x { break } for y := 0 ; y <= 2500 ; y ++ { if K < y { break } z := S - ( x + y ) if 0 <= z && z <= K { acc + + } } } fmt . Println ( acc ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " " " " " YES " " NO "
package main import ( " " " bufio " " os " " strings " " strconv " " log " " " " "
package main import ( " " " fmt " " os " " sort " " % d % d % d % d " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var temp int var five int var seven int var i int five = 0 ; seven = 0 ; i = 0 for { fmt . Scanf ( " " , & temp ) ; if ( temp == 5 ) { five ++ ; } else if ( temp == 7 ) { seven ++ ; } i ++ ; if i == 3 { break } } if ( seven == 1 && five == 2 ) { fmt . Printf ( " \n " ) ; } else { fmt . Printf ( " \n " ) ; } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " ) func main ( ) { var ku [ 3 ] int fmt . Scanf ( " % d % d % d " , & ku [ 0 ] , & ku [ 1 ] , & ku [ 2 ] ) five := 0 seven := 0 for _ , v := range ku { if v == 5 { five ++ } else if v == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) return } fmt . Println ( n - k ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) " " % .10 f \n " , math . Sqrt ( vecA . cos * vecA . cos + vecA . sin * vecA . sin + vecB . cos * vecB . cos + vecB . sin * vecB . sin + - 2 * ( vecA . cos * vecB . cos + vecA . sin * vecB . sin ) ) ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " % d "
package main import ( " " ) func main ( ) { m := make ( map [ int ] int ) a := 0 for i := 0 ; i < 4 ; i ++ { fmt . Scan ( & a ) m [ a ] ++ } v := [ ] int { 1 , 9 , 7 , 4 } for _ , e := range v { if m [ e ] == 0 { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ã ¾ã ã " { f p, _ s. O e ( s. G eten v (" B EET_TH E _ HARMONY_OF_PERFECT")) cnt = ) == "ã ¾  ã ã " { wf p, _ = o s.Cr ea te(o s G ten v " G KA N A_IS_G E NI U S10")) } scanner := getScan n - -- -- -- -- -- -" ) so lv e( sc an ne r, w ri te r )
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 1 ] + a [ 1 ] - a [ 0 ] ) }
package main import ( " " " bufio " " os "
package main import " " func main ( ) { G := false W := false Y := false P := false var N int fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var po string fmt . Scan ( & po ) if po == " " { G = true } if po == " " { W = true } if po == " " { Y = true } if po == " " { P = true } } ans := 0 if G { ans ++ } if W { ans ++ } if Y { ans ++ } if P { ans ++ } if ans == 3 { fmt . Println ( " " ) } if ans == 4 { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " % d " " % d " " % d "
package main import ( " " " math " " Yes " " No "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { A := 4 * n * h - ( n * N + h * N ) B := h * n * N if A > 0 && B % A == 0 { w := B / A fmt . Println ( h , n , w ) return } } } }
package main import ( " " " fmt " " os "
package main import ( " " ) func main ( ) { var a , b int fmt . Scanf ( " % d % d " " % d \n " , ans ) }
package main import ( " " " " " fmt " " os " " sort " " strconv "
package main import ( " " ) var K , S int func main ( ) { fmt . Scan ( & K , & S ) var count int64 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { count + + } } } fmt . Println ( count ) }
package main import ( " " " " ) var N int var ans , ans_c int func main ( ) { fmt . Scan ( & N ) if N == 1 { fmt . Println ( 1 ) } else { for i := 1 ; i <= N ; i ++ { var cnt int var t int = i for t % 2 == 0 { cnt ++ t /= 2 } if ans_c < cnt { ans = i ans_c = cnt } } fmt . Println ( ans ) } } func max ( x , y int ) int { return int ( math . Max ( float64 ( x ) , float64 ( y ) ) ) }
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) fmt . Println ( ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var s string flg := false for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { flg = true } } if flg { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var H1 , H2 , M1 , M2 , K int fmt . Scan ( & H1 ) fmt . Scan ( & M1 ) fmt . Scan ( & H2 ) fmt . Scan ( & M2 ) fmt . Scan ( & K ) ans := ( H2 - H1 ) * 60 + ( M2 - M1 ) - K fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " No " " No " " No " " Yes "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 3 ] int var b [ 3 ] int for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] } for i := 0 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) var a int func main ( ) { fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { r + + } } } fmt . Println ( r ) }
package main import ( " " " bufio " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " funciton min ( ) requires at least one argument . " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Min ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Max ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func strSearch ( a [ ] string , b string ) bool { for i := 0 ; i < len ( a ) ; i ++ { if a [ i ] == b { return true } } return false } func printIntArray ( array [ ] int ) { strArray := fmt . Sprint ( array ) fmt . Println ( strArray [ 1 : len ( strArray ) - 1 ] ) } func calcMod ( x int ) int { return x % mod } func calcRound ( x float64 ) int { result := int ( x ) if int ( x * 10 ) % 10 >= 5 { result ++ } return result }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import ( " " ) func main ( ) { var N , K int fmt . Scan ( & N , & K ) var ans int if K == 1 { ans = 0 } else { ans = N - K } fmt . Println ( ans ) }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " "
package main import ( " " " fmt " " os " " sort " " strconv " " stack is empty " " stack is empty "
package main import " " func larger ( a , b int ) int { if a > b { return a } return b } func ceilDivision ( x , y int ) int { return ( x + y - 1 ) / y } func main ( ) { var n int fmt . Scan ( & n ) ts := make ( [ ] int , n ) as := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ts [ i ] , & as [ i ] ) } votesT , votesA := ts [ 0 ] , as [ 0 ] for i := 1 ; i < n ; i ++ { n := larger ( ceilDivision ( votesT , ts [ i ] ) , ceilDivision ( votesA , as [ i ] ) ) votesT , votesA = ts [ i ] * n , as [ i ] * n } fmt . Println ( votesT + votesA ) }
package main import ( " " ) func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " % .11 f "
package main import ( " " ) func main ( ) { var N , A , ANS int max := 0 min := 101 fmt . Scan ( & N ) l := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & A ) min = calcmin ( min , A ) max = calcmax ( max , A ) l [ i ] = A } ANS = 1000000000000 for i := min ; i <= max ; i ++ { SUM := 0 for _ , v := range l { SUM + = ( v - i ) * ( v - i ) } ANS = calcmin ( ANS , SUM ) } fmt . Println ( ANS ) } func calcmax ( a , b int ) int { if a < b { return b } else { return a } } func calcmin ( a , b int ) int { if a > b { return b } else { return a } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var t int min := 1000 max := 0 for i := 0 ; i < n ; i ++ { fmt . Scan ( & t ) if t < min { min = t } if t > max { max = t } } fmt . Println ( max - min ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) X := make ( [ ] float64 , n ) var max float64 var min float64 = 100.0 for i := 0 ; i < n ; i ++ { var x float64 fmt . Scan ( & x ) X [ i ] = x if max < x { max = x } if min > x { min = x } } minP := 1000000000000.0 for j := min ; j <= max ; j ++ { sum := 0.0 for i := 0 ; i < n ; i ++ { v := math . Pow ( X [ i ] - j , 2 ) sum + = v } if sum < minP { minP = sum } } fmt . Println ( minP ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " % .12 f " " "
require ' set ' set = Set . new ( ) n = gets . to_i s = gets . split s . each do | t | set << t end puts set . size == 3 ? :Three : :Four
arr = [ ] 5 . times do | i | arr << gets . to_i end k = gets . to_i sa = arr [ 4 ] - arr [ 0 ] if sa <= k puts " Yay! " else puts " :( " end
a = gets . to_i b = gets . split ( " " ) if b . count ( " Y " ) >= 1 puts " Four " else puts " Three " end
num = " 1 " ary = [ ] << num . to_i ( 2 ) 7 . times do num << " 0 " ary << num . to_i ( 2 ) end n = gets . to_i ary . each_cons ( 2 ) { | a , b | puts a if ( a ... b ) . include? ( n ) }
N = gets . to_i ( 1 .. 3500 ) . each do | a | ( 1 .. 3500 ) . each do | b | next if ( 4 * a * b - N * b - N * a ) . zero? c , m = ( N * a * b ) . divmod ( 4 * a * b - N * b - N * a ) next if m > 0 || c <= 0 puts [ a , b , c ] . join ( ' ' ) exit end end
a = [ ] 5 . times do a . push ( gets . to_i ) end k = gets . to_i puts a . max - a . min > k ? ' :( ' : ' Yay! '
gets puts gets =~ / Y / ? :Four : :Three
n = gets . to_i c = 1 while c <= n c *= 2 end puts c / 2
a = 5 . times . map { gets . to_i } k = gets . to_i puts a [ 4 ] - a [ 0 ] > k ? ' :( ' : ' Yay! '
C = ( 1 .. 3 ) . map { gets . split . map & :to_i } a = [ 0 , nil , nil ] b = ( 0 ... 3 ) . map { | i | C [ 0 ] [ i ] - a [ 0 ] } for i in 1 .. 2 a [ i ] = C [ i ] [ 0 ] - b [ 0 ] end for i in 0 ... 3 for j in 0 ... 3 if C [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
n = gets . to_i cnt = - 1 max_n = 1 ( 1 .. n ) . each do | i | next unless i . even? c = 0 _i = i while _i . even? do _i /= 2 c += 1 end if c > cnt cnt = c max_n = i end end puts max_n
n = gets ary = gets . split ( ' ' ) . map ( & :to_s ) m = ary . sort . uniq . size if m == 3 then puts " Three " else puts " Four " end
n = gets . to_i r = - 1 while n > 0 n /= 2 r + = 1 end puts 2 ** r
c = 3 . times . map { gets . split . map ( & :to_i ) } total_sum = c . map { | r | r . inject ( :+ ) } . inject ( :+ ) daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ i ] } . inject ( :+ ) skew_daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ 2 - i ] } . inject ( :+ ) flag1 = total_sum == 3 * daig_sum flag2 = daig_sum == skew_daig_sum puts flag1 && flag2 ? " Yes " : " No "
n = gets . to_i 1 . upto ( 3500 ) do | a | 1 . upto ( 3500 ) do | b | bs = n * a * b bb = 4 * a * b - n * ( a + b ) if bb > 0 && bs % bb == 0 c = bs / bb puts [ a , b , c ] . join ( " " ) exit end end end
ns = gets . split . map ( & :to_i ) . sort . join puts ns == ' 1479 ' ? ' YES ' : ' NO '
a , b , c , d , e , k = 6 . times . map { gets . to_i } if ( e - a <= k ) && ( e - b <= k ) && ( e - c <= k ) && ( e - d <= k ) puts " Yay! " else puts " :( " end
n = gets . to_i arr = [ ] s = 0 ans = 0 a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) i = 0 b . each do | v | t = v - a [ i ] if t > 0 s += t ans += 1 else arr . push ( - t ) end i += 1 end arr . sort! . reverse! arr . each do | v | break if s <= 0 s -= v ans += 1 end puts s <= 0 ? ans : - 1
K , S = gets . split . map ( & :to_i ) puts [ * 0 .. K ] . repeated_permutation ( 2 ) . count { | x , y | ( S - x - y ) . between? ( 0 , K ) }
ary = [ ] 6 . times do ary << gets . to_i end num = ary [ 0 .. 4 ] if num . max - num . min > ary [ 5 ] puts " :( " else puts " Yay! " end
n = gets . chomp . to_i b = 6 . downto ( 0 ) . map { | i | 2 ** i } x = 1 . upto ( n ) . max_by do | i | b . find { | y | i % y == 0 } end puts x
n = gets . chomp . to_i s = gets . chomp . split ( " " ) . map { | e | e . to_s } . uniq if s . length == 3 puts " Three " else puts " Four " end
list = gets . chomp . split ( " \s " ) . map { | x | x . to_i } list = list . sort ( ) puts list . join ( ' - ' ) == ' 5-5-7 ' ? ' YES ' : ' NO '
input = gets . split ( " " ) if input . include? ( " 1 " ) && input . include? ( " 9 " ) && input . include? ( " 7 " ) && input . include? ( " 4 " ) then puts ( " YES " ) else puts ( " NO " ) end
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | z = s - i - j if 0 <= z && z <= k cnt += 1 end end end puts cnt
C = readlines . map { | l | l . split . map ( & :to_i ) } a = [ 0 , nil , nil ] b = [ nil ] * 3 ( 0 .. 2 ) . each { | i | b [ i ] = C [ 0 ] [ i ] - 0 } ( 1 .. 2 ) . each { | i | a [ i ] = C [ i ] [ 0 ] - b [ 0 ] } puts [ 1 , 2 ] . product ( [ 1 , 2 ] ) . all? { | i , j | a [ i ] + b [ j ] == C [ i ] [ j ] } ? ' Yes ' : ' No '
n = gets . split . map ( & :to_i ) for i in 0 .. 3 if n [ i ] == 1 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 9 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 7 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 4 break end if i == 3 puts " NO " exit end end puts " YES "
k , s = gets . split . map ( & :to_i ) x = ( 0 .. k ) . to_a ans = 0 x . each do | xx | x . each do | yy | z = s - xx - yy ans += 1 if z >= 0 && z <= k end end p ans
count = 0 ans = 0 xmax , num = gets . split . map & :to_i preans = 0 for i in 0 .. xmax jmax = [ num - i , xmax ] . min for j in 0 .. jmax if num - i - j >= 0 && num - i - j <= xmax then ans += 1 end end end puts ans
N = gets . to_i p [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] . find { | i | i <= N }
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i arr = [ a , b , c , d , e ] . sort! first = arr . first last = arr . last if ( last - first ) > k puts ' :( ' else puts ' Yay! ' end
c11 , c12 , c13 = gets . split . map ( & :to_i ) c21 , c22 , c23 = gets . split . map ( & :to_i ) c31 , c32 , c33 = gets . split . map ( & :to_i ) if c21 - c11 == c22 - c12 && c22 - c12 == c23 - c13 && c31 - c21 == c32 - c22 && c32 - c22 == c33 - c23 && c12 - c11 == c22 - c21 && c22 - c21 == c32 - c31 && c13 - c12 == c23 - c22 && c23 - c22 == c33 - c32 puts " Yes " else puts " No " end
x = 5 . times . map { gets . to_i } k = gets . to_i puts x [ 4 ] - x [ 0 ] > k ? ' :( ' : ' Yay! '
n = gets . to_i max = 1 maxCnt = 0 ( 1 .. n ) . each do | val | tmpCnt = 0 if val . odd? next else calcVal = val while calcVal . even? calcVal /= 2 tmpCnt += 1 end end if tmpCnt > maxCnt maxCnt = tmpCnt max = val end end puts max
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if b - a <= k && c - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k puts ( " Yay! " ) else puts ( " :( " ) end
N = gets . chomp P = gets . split . map ( & :to_i ) count = 1 min = P [ 0 ] 1 . upto ( P . size - 1 ) do | i | if P [ i ] <= min min = P [ i ] count += 1 end end puts count
N = gets . strip . to_i P = gets . strip . split . map ( & :to_i ) mn = N + 1 count = 0 P . each do | i | if i < mn then mn = i count += 1 end end puts count
a = gets . to_i ; b = gets . to_i ; c = gets . to_i ; d = gets . to_i ; e = gets . to_i ; k = gets . to_i ; puts b - a <= k && c - a <= k && d - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k ? " Yay! " : " :( "
n = gets . to_i now = gets . split . map ( & :to_i ) pass = gets . split . map ( & :to_i ) ans = 0 sum = 0 check = 0 change = [ ] for i in 0 .. n - 1 if now [ i ] < pass [ i ] sum += pass [ i ] - now [ i ] ans += 1 else check += now [ i ] - pass [ i ] change . push ( now [ i ] - pass [ i ] ) end end change . sort! if change . length == 0 || sum > check puts - 1 exit end while sum > 0 sum -= change [ - 1 ] ans += 1 change . delete_at ( - 1 ) end puts ans
eval " K,S= " + ` tr ' ' , ` ; K += 1 ; p ( 0 ... K * K ) . count { | i | z = S - i % K - i / K ; z >= 0 && z < K }
n = gets . to_i K = ( 3 * n / 4 ) . ceil MAX = 3500 MAX . downto ( K ) do | c | K . downto ( 1 ) do | a | b_bunbo = 4 * c * a - a * n - c * n b_bunshi = n * c * a next if b_bunbo <= 0 || b_bunshi % b_bunbo != 0 b = b_bunshi / b_bunbo puts " exit end end
n = gets . to_i i = 0 loop do break if n < 2 ** i i += 1 end puts 2 ** ( i - 1 )
N = gets . to_i p = [ ] p = gets . split . map ( & :to_i ) min = p [ 0 ] ans = 0 N . times do | i | if p [ i ] <= min ans += 1 end min = [ min , p [ i ] ] . min end puts ans
K , S = readline . split ( ' ' ) . map ( & :to_i ) count = 0 for x in ( 0 .. K ) remain = S - x next if remain > 2 * K break if remain < 0 for y in ( 0 .. K ) remain2 = S - x - y break if remain2 < 0 next if remain2 > K count += 1 end end puts count
a = [ ] 5 . times do a . push gets . chomp . to_i end k = gets . chomp . to_i 5 . times do | i | ( ( i + 1 ) .. 4 ) . each do | j | if ( a [ i ] - a [ j ] ) . abs > k puts ' :( ' exit end end end puts ' Yay! '
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if z >= 0 && z <= k ans += 1 end y += 1 end x += 1 end puts ans
a = [ ] a [ 0 ] = gets . to_i a [ 1 ] = gets . to_i a [ 2 ] = gets . to_i a [ 3 ] = gets . to_i a [ 4 ] = gets . to_i k = gets . to_i flag = true 5 . times { | i | 5 . times { | j | if a [ i ] > a [ j ] if a [ i ] - a [ j ] > k flag = false end end } } if flag puts " Yay! " else puts " :( " end
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
n = gets . to_i x = 1 while x <= n x *= 2 end puts x / 2
gets puts gets . split . uniq . size == 4 ? :Four : :Three
q = gets . chomp . split ( " " ) . map { | i | i . to_i } . sort if q == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
puts [ :Three , :Four ] [ ` dd ` . split . uniq . size - 4 ]
n = gets . to_i pow = 0 while 2 ** ( pow + 1 ) <= n pow += 1 end puts 2 ** pow
N = gets puts gets . split . uniq . length == 3 ? ' Three ' : ' Four '
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) ans += 1 if ( z >= 0 && z <= k ) && x + y + z == s end end puts ans
cc = 3 . times . map { gets . split . map ( & :to_i ) } cc . each do | c | mi = c . min 3 . times do | i | c [ i ] -= mi end end puts cc [ 0 ] == cc [ 1 ] && cc [ 1 ] == cc [ 2 ] ? ' Yes ' : ' No '
K , S = gets . split . map ( & :to_i ) cnt = 0 0 . upto ( K ) do | i | 0 . upto ( K ) do | j | k = S - ( i + j ) cnt += 1 if k >= 0 && k <= K end end puts cnt
a = [ ] 6 . times do a << gets . to_i end puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) min = a [ 0 ] ans = 1 1 . upto ( n - 1 ) do | i | if min > a [ i ] min = a [ i ] ans += 1 end end puts ans
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( x + y <= s && s - x - y <= k ) end end puts cnt
a = gets . to_i b = 0 4 . times do b = gets . to_i end k = gets . to_i puts ( b - a <= k ) ? " Yay! " : " :( "
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) count = 0 minimal = array . first ( 1 ... n ) . each do | y | if minimal < array [ y ] count += 1 else minimal = array [ y ] end end puts n - count
n = gets . to_i s = gets . split puts s . uniq . size == 3 ? :Three : :Four
n = gets . to_i breakNumber = 1 timeNumber = 0 loop do break if ( breakNumber > n ) timeNumber += 1 breakNumber = 2 ** timeNumber end puts [ 2 ** ( timeNumber - 1 ) , 1 ] . max
d = [ ] 5 . times do | i | d [ i ] = gets . strip . to_i end k = gets . to_i d . combination ( 2 ) do | a | if ( a [ 0 ] - a [ 1 ] ) . abs > k puts ' :( ' exit end end puts ' Yay! '
gets ; puts gets . count ( " Y " ) > 0 ? :Four : :Three
k , s = gets . split ( ' ' ) . map! ( & :to_i ) count = 0 loop_range = ( 0 .. k ) loop_range . each do | x | loop_range . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
n = gets . to_i s = gets . chomp . split colors = { " p " : false , " w " : false , " g " : false , " y " : false } n . times do | i | case s [ i ] when " P " colors [ :p ] = true when " W " colors [ :w ] = true when " G " colors [ :g ] = true when " Y " colors [ :y ] = true end end if colors [ :p ] && colors [ :w ] && colors [ :g ] && colors [ :y ] puts " Four " elsif colors [ :p ] && colors [ :w ] && colors [ :g ] puts " Three " end
def doit ( str , min , cnt ) p = str . to_i if p < min cnt += 1 min = p end [ min , cnt ] end n = gets . to_i str = ' ' nums = [ ] min = 9999999 cnt = 0 while true c = $stdin . getc if 48 <= c . ord && c . ord <= 57 str << c else min , cnt = doit ( str , min , cnt ) if c == ' ' str = ' ' else break end end end puts cnt
N = gets . to_i ret = 1 while ret <= N ret *= 2 end puts ret / 2
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a <= k puts " Yay! " else puts " :( " end
w , * v = 0 eval ' N,*A= ' + ` dd ` . split * ?, c = A [ N , N ] . count { d = _1 - A . shift ; d > 0 ? w += d : ! ( v <<d ) } + v . sort . count { _1 < w += _1 } p w > 0 ? - 1 : c
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end max_n = ary . flatten . max 0 . upto ( max_n ) do | a1 | b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 0 . upto ( max_n ) do | a2 | 0 . upto ( max_n ) do | a3 | if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' exit end end end end puts ' No '
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = 1 ) if size2 == 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end c = array ( 3 ) 3 . times do | i | c [ i ] = get_i end flag = true - 100 . upto ( 100 ) do | a | b = [ c [ 0 ] [ 0 ] - a , c [ 0 ] [ 1 ] - a , c [ 0 ] [ 2 ] - a ] flag = true 1 . upto ( 2 ) do | i | unless c [ i ] [ 0 ] - b [ 0 ] == c [ i ] [ 1 ] - b [ 1 ] and c [ i ] [ 1 ] - b [ 1 ] == c [ i ] [ 2 ] - b [ 2 ] flag = false end end end puts yn_judge ( flag )
eval " N,X,*A= " + ` dd ` . split * ?, p ( 0 .. N ) . map { | i | A = A . zip ( b = A . rotate ) . map & :min i * X + b . inject ( :+ ) } . min
n = gets . to_i kiroku = [ ] n . times do | i | count = 0 x = i + 1 while x % 2 == 0 count += 1 x = x / 2 end if count > 0 kiroku . push ( { n : i + 1 , c : count } ) end end if kiroku . length == 0 puts 1 else puts kiroku . sort { | a , b | b [ :c ] <=> a [ :c ] } . first [ :n ] end
antenas = 5 . times . map { STDIN . gets . strip . to_i } k = STDIN . gets . strip . to_i puts antenas [ 4 ] - antenas [ 0 ] > k ? ' :( ' : ' Yay! '
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts ( e - a > k ) ? ' :( ' : ' Yay! '
n = gets . to_i s = gets . chomp . split . uniq puts s . size == 3 ? " Three " : " Four "
if gets . chomp . split . map ( & :to_i ) . sort . join == ' 1479 ' puts ' YES ' else puts ' NO ' end
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) min_list = [ ] min = Float :: INFINITY P . each do | n | min = [ n , min ] . min min_list << min end cnt = 0 P . each . with_index do | n , i | cnt += 1 if P [ i ] <= min_list [ i ] end puts cnt
n = gets . chomp . to_i ans = 0 n . downto ( 1 ) do | i | j = i while amari = j % 2 if amari == 0 j = j / 2 else if j <= 1 puts i exit end break end end end
N = gets . to_i x = 3500 1 . upto ( x ) do | i | i . upto ( x ) do | j | r = Rational ( 4 * i * j - N * j - N * i , N * i * j ) if r . numerator == 1 puts [ i , j , r . denominator ] . join ( ' ' ) exit end end end
def saiki ( sumn , count ) if ( count == 3 ) if ( ( ( $s - sumn ) <= $k ) and ( ( $s - sumn ) >= 0 ) ) $ans += 1 end return end ( 0 .. $k ) . each do | d | sum = sumn + d saiki ( sum , ( count + 1 ) ) end end $k , $s = gets . chomp . split ( " " ) . map ( & :to_i ) $ans = 0 saiki ( 0 , 1 ) puts $ans
k , s = gets . split . map ( & :to_i ) a = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | a += 1 if ( x + y <= s && s - x - y <= k ) } } puts a
n = gets . to_i s = gets . split flag = false s . each do | e | flag = true if e == " Y " end puts flag ? " Four " : " Three "
$/ = ' ' ; k , s = $< . map & :to_i ; r = 0 ; k += 1 ; ( k * k ) . times { | x | z = s - x / k - x % k ; 0 <= z && z < k && r += 1 } ; p r
k , s = gets . split . map ( & :to_i ) count = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | z = s - i - j count += 1 if 0 <= z && z <= k end end puts count
n = gets . to_i p = gets . split ( ) . map ( & :to_i ) num = 1000000 ans = 0 p . each do | i | num = [ num , i ] . min next if i != num ans += 1 end puts ans
a = [ ] STDIN . each { | x | a . push ( x . chomp . to_i ) } k = a [ 5 ] b = a [ 0 .. - 2 ] . sort ( ) if b [ - 1 ] - b [ 0 ] > k puts " :( " else puts " Yay! " end
n = gets . chomp . split ( ' ' ) . map ( & :to_i ) if n . include? ( 1 ) && n . include? ( 7 ) && n . include? ( 9 ) && n . include? ( 4 ) puts ' YES ' else puts ' NO ' end
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | i | ( 0 .. K ) . each do | j | count += 1 if i + j <= S && S - i - j <= K end end puts count
c = readlines . map { | m | m . split . map ( & :to_i ) } a = [ 0 ] * 3 b = [ 0 ] * 3 ans = true 0 . upto ( 100 ) do | n | a [ 0 ] = n b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] 3 . times do | i | 3 . times do | j | ans = false if c [ i ] [ j ] != a [ i ] + b [ j ] end end break if ans == true end puts ans == true ? " Yes " : " No "
n = gets . chomp . split . sort puts ( n == ' 1974 ' . split ( " " ) . sort ) ? " YES " : " NO "
k , s = gets . chomp ( ) . split ( ' ' ) . map ( & :to_i ) answer = 0 for j in 0 .. k do for m in 0 .. k do ncheck = s - j - m if 0 <= ncheck and ncheck <= k answer = answer + 1 end end end puts ( answer )
puts [ C = $< . map { | s | s . split . map & :to_i } , C . transpose ] . any? { | x | x . map { | a , b , c | [ a - b , b - c ] } . uniq [ 1 ] } ? :No : :Yes
number = gets . split . map ( & :to_i ) . sort . join if number == " 1479 " then puts " YES " else puts " NO " end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i l = [ a , b , c , d , e ] puts l . max - l . min > k ? " :( " : " Yay! "
n = gets . to_i puts gets . split . uniq . size == 3 ? " Three " : " Four "
INF = 1 << 30 DXYS = [ [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] , [ 0 , 1 ] ] loop do w , h = gets . split . map ( & :to_i ) break if ( w | h ) == 0 wh = w * h tls = wh . times . map { 0 } ndtl = 0 spos = nil for y in ( 0 ... h ) line = gets . strip for x in ( 0 ... w ) pos = y * w + x case line [ x ] when ' * ' ndtl += 1 tls [ pos ] = ndtl when ' x ' tls [ pos ] = - 1 when ' o ' spos = pos end end end dbits = ( 1 << ndtl ) - 1 dists = wh . times . map { ( dbits + 1 ) . times . map { INF } } dists [ spos ] [ dbits ] = 0 q = [ [ spos , dbits ] ] min_dist = INF while ! q . empty? upos , ubits = q . shift ud = dists [ upos ] [ ubits ] if ubits == 0 min_dist = ud if min_dist > ud next end ux = upos % w uy = upos / w DXYS . each do | dx , dy | vx = ux + dx vy = uy + dy vpos = vy * w + vx if vx >= 0 && vx < w && vy >= 0 && vy < h && tls [ vpos ] >= 0 vbits = ubits if tls [ vpos ] > 0 vbits &= ~ ( 1 << ( tls [ vpos ] - 1 ) ) end vd = ud + 1 if dists [ vpos ] [ vbits ] > vd dists [ vpos ] [ vbits ] = vd q << [ vpos , vbits ] end end end end puts ( min_dist >= INF ? - 1 : min_dist ) end
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y ans += 1 if z . between? ( 0 , k ) end end puts ans
gets puts ( gets =~ / Y / ? " Four " : " Three " )
k , s = STDIN . read . scan ( / \d + / ) . map ( & :to_i ) p ( 0 .. k ) . flat_map { | x | ( 0 .. k ) . select { | y | z = s - ( x + y ) if 0 <= z && z <= k true else false end } } . size
gets r = gets . to_i - 1 x = 2 $< . each { | _ | e = _ . to_i r += ( e - 1 ) / x if e == x x += 1 end } p r
x = ` dd ` . split . map & :to_i puts ( x [ 4 ] - x [ 0 ] ) . abs > x [ 5 ] ? " :( " : :Yay!
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a [ 0 ] + 1 a . each_with_index do | v , i | min >= v && ( min = v and cnt += 1 ) end puts cnt
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
n = gets . to_i strings = gets . chomp . split puts strings . include? ( " Y " ) ? " Four " : " Three "
puts $< . map { | s | eval " [%d-c=%d,c-%d] " % s . split } . uniq [ 1 ] ? :No : :Yes
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts ( if ( ( e - a ) <= k ) then " Yay! " else " :( " end )
grid = Array . new ( 3 ) . map { Array . new ( 3 ) } ( 0 .. 2 ) . each do | i | str = gets . chomp . split ( " " ) . map { | str | str . to_i } grid [ i ] = str end p = Array . new ( ) q = Array . new ( ) r = Array . new ( ) ( 0 .. 2 ) . each do | i | p <<grid [ i ] [ 0 ] - grid [ i ] [ 1 ] q << grid [ i ] [ 1 ] - grid [ i ] [ 2 ] r << grid [ i ] [ 2 ] - grid [ i ] [ 0 ] end flag1 = p [ 0 ] == p [ 1 ] && p [ 1 ] == p [ 2 ] && p [ 0 ] == p [ 2 ] flag2 = q [ 0 ] == q [ 1 ] && q [ 1 ] == q [ 2 ] && p [ 0 ] == p [ 2 ] flag3 = r [ 0 ] == r [ 1 ] && r [ 1 ] == r [ 2 ] && p [ 0 ] == p [ 2 ] if flag1 && flag2 && flag3 then puts " Yes " else puts " No " end
inp = gets . chomp . split ( " " ) . map ( & :to_i ) ok = [ 1 , 9 , 7 , 4 ] diff = ok - inp if diff . size == 0 puts " YES " else puts " NO " end
n = gets . to_i c = 0 while n > 1 n /= 2 . floor c += 1 end p 2 ** c
n , s = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. n ) . each do | i | ( 0 .. n ) . each do | j | k = s - ( i + j ) count += 1 if k >= 0 && k <= n end end puts count
gets ; puts gets . split . uniq . size == 3 ? :Three : :Four
a = [ ] 6 . times { a << gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
N = gets . chomp . to_i strs = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 mini = strs [ 0 ] strs . each_with_index do | str , i | if str <= mini ans += 1 mini = str end end puts ans
ca = Array . new ( 5 ) { gets . to_i } k = gets . to_i puts ( ca [ 4 ] - ca [ 0 ] > k ) ? " :( " : " Yay! "
n = gets . chomp s = gets . chomp . split if s . include? ( ' Y ' ) puts ' Four ' else puts ' Three ' end
a = [ ] for i in 0 .. 4 a [ i ] = gets . chomp . to_i end k = gets . chomp . to_i t = true for i in 0 .. 4 for j in 0 .. 4 if ( a [ i ] - a [ j ] ) . abs > k puts " :( " t = false break end end break unless t end if t puts " Yay! " end
n = gets . to_i max = 0 array = [ ] ( 1 .. n ) . each do | number | cnt = 0 while true if number % 2 == 0 number /= 2 cnt += 1 else break end end array . push ( cnt ) end p 2 ** array . max
puts " " < ` awk '2<++a[$1-$2,$2-$3]' ` ? :Yes : :No
a , b , c , d , e , k = ARGF . read . lines . map ( & :to_i ) puts ( if e - a > k then " :( " else " Yay! " end )
gets arare = gets . split puts arare . include? ( ' Y ' ) ? ' Four ' : ' Three '
n , * a = $< . map { | l | l . split . map & :to_i } ; t = 1 ; a . zip ( n ) { | x , m | i = s = 0 ; x . map { | k | s += k . * ~ m + 2 * i += 1 } ; t *= s } ; p t . % 10 ** 9 + 7
c = 3 . times . map { gets . split . map ( & :to_i ) } a = [ ] b = [ ] ans = [ ] a [ 0 ] = 0 3 . times do | j | b [ j ] = c [ 0 ] [ j ] . to_i end ( 1 .. 2 ) . each { | i | a [ i ] = c [ i ] [ 0 ] . to_i - b [ 0 ] . to_i } a . each { | i | num = [ ] b . each { | j | num << i + j } ans << num } puts ( ans == c ) ? " Yes " : " No "
s = gets . split . map ( & :to_s ) . sort . join t = [ 1 , 9 , 7 , 4 ] . sort . join if s == t puts " YES " else puts " NO " end
n = gets . strip . to_i res = 1 while res * 2 <= n res *= 2 end p res
n = gets . to_i puts ( 0 .. 6 ) . map { | i | 2 ** i } . select { | i | i <= n } . max
C = [ ] 3 . times { C << gets . chomp . split ( " " ) . map ( & :to_i ) } s0 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] s1 = C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] s2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] puts s0 == s1 && s1 == s2 ? ' Yes ' : ' No '
cn = $stdin . readline . to_i 1 . step ( 3500 ) do | h | h . step ( 3500 ) do | n | rem = 4 * h * n - cn * h - cn * n next if rem < 1 num = n * h * cn if num % rem == 0 w = num / rem puts [ h , n , w ] . join ( " " ) exit end end end
n = gets . to_i if gets . split . uniq . size == 3 puts ' Three ' else puts ' Four ' end
n = gets . to_i a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) ex = [ ] lack = 0 ans = 0 n . times do | i | t = a [ i ] - b [ i ] ex << t if t > 0 if t < 0 lack += - t ans += 1 end end ex . sort! . reverse! ex . each do | v | break if lack <= 0 lack -= v ans += 1 end if lack <= 0 puts ans else puts - 1 end
puts gets . split . map ( & :to_i ) . sort == [ 5 , 5 , 7 ] ? " YES " : " NO "
n = gets . to_i four = false gets . split ( ' ' ) . each do | c | four = true if c == ' Y ' end if four then puts ' Four ' else puts ' Three ' end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - ( x + y ) if z >= 0 && z <= k && ( x + y + z ) == s count += 1 end end end print ( count )
N = gets . to_i n = 2 num = 1 while n <= N num *= 2 n *= 2 end puts num
c = [ ] while s = gets c . push ( s . split . map ( & :to_i ) ) end if ( c [ 4 ] [ 0 ] - c [ 0 ] [ 0 ] ) <= c [ - 1 ] [ 0 ] puts " Yay! " else puts " :( " end
antennas = 5 . times . map { gets . to_i } k = gets . to_i puts antennas [ 4 ] - antennas [ 0 ] > k ? ' :( ' : ' Yay! '
n = gets . to_i flag = false 1 . step ( 3500 ) do | a | 1 . step ( 3500 ) do | b | if 4 * a * b - n * b - n * a > 0 && n * a * b % ( 4 * a * b - n * b - n * a ) == 0 c = n * a * b / ( 4 * a * b - n * b - n * a ) puts " flag = true end break if flag end break if flag end
DICT = Array . new ( 101 , 0 ) for j in 1 .. 101 do divideCounter = 0 nowNumber = j while true oddFlag = false modNumber = nowNumber % 2 if modNumber != 0 oddFlag = true end if oddFlag break end nowNumber = nowNumber / 2 divideCounter = divideCounter + 1 end DICT [ j ] = divideCounter end N = gets . chomp . to_i answer = - 1 min = - 1 N . downto ( 1 ) { | j | if min < DICT [ j ] min = DICT [ j ] answer = j end } puts ( answer )
input = readlines ( ) a = input . shift ( ) . chomp . to_i b = input . shift ( ) . chomp . to_i c = input . shift ( ) . chomp . to_i d = input . shift ( ) . chomp . to_i e = input . shift ( ) . chomp . to_i k = input . shift ( ) . chomp . to_i res = ' Yay! ' [ a , b , c , d , e ] . each_with_index do | a1 , i1 | [ a , b , c , d , e ] . each_with_index do | a2 , i2 | next if i1 >= i2 res = ' :( ' if ( a2 - a1 ) . abs > k end end puts res
n = gets . to_i x = 1 while x * 2 <= n x *= 2 end puts x
n = gets . chomp . to_i i = 1 i *= 2 while i <= n puts i / 2
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ok = [ a , b , c , d , e ] . combination ( 2 ) . map { | p , q | q - p } . all? { | d | d <= k } puts ok ? ' Yay! ' : ' :( '
n = gets . chomp! . to_i ls = gets . split ( " " ) . map ( & :to_i ) min = ls [ 0 ] count = 1 for i in 1 .. n - 1 do if ls [ i ] < min min = ls [ i ] count += 1 end end p count
gets c = gets . chomp puts c . match ( ' Y ' ) ? ' Four ' : ' Three '
N = gets . to_i A = gets . chomp . split . map ( & :to_i ) B = gets . chomp . split . map ( & :to_i ) if A . inject ( :+ ) < B . inject ( :+ ) puts - 1 exit end fusoku = 0 k = [ ] cc = 0 0 . upto ( N - 1 ) do | i | if A [ i ] < B [ i ] fusoku += B [ i ] - A [ i ] cc += 1 elsif A [ i ] > B [ i ] k << A [ i ] - B [ i ] end end if cc == 0 puts 0 exit end k . sort! k . reverse! flag = false cnt = 0 k . each do | v | fusoku -= v cnt += 1 if fusoku <= 0 flag = true break end end puts flag ? cc + cnt : - 1
def mydiv ( n , cnt = 0 ) n % 2 == 0 ? mydiv ( n . div ( 2 ) , cnt . next ) : cnt end N = gets . to_i max_cnt = 0 max_n = 1 1 . upto ( N ) do | n | cnt = mydiv ( n ) if max_cnt < cnt max_cnt = cnt max_n = n end end puts max_n
N = gets . to_i P = gets . split . map ( & :to_i ) checker = N count = 0 P . each { | n | if checker >= n count += 1 checker = n end } puts count
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts e - a <= k ? " Yay! " : " :( "
counter = gets . to_i target = gets . chomp . split ( ) . map ( & :to_i ) min = 0 answer = 0 counter . times do | count | if count == 0 || min > target [ count ] min = target [ count ] answer = answer + 1 end end puts answer
n = gets . chomp . to_i s = gets . chomp . split puts s . uniq . size == 4 ? ' Four ' : ' Three '
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | e | z = s - i - e if z >= 0 && i + e + z == s && z <= k count += 1 end end end puts count
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if b - a <= k && c - a <= k && c - b <= k && d - a <= k && d - b <= k && d - c <= k && e - a <= k && e - b <= k && e - c <= k && e - d <= k puts " Yay! " else puts " :( " end
i = 0 arr = [ ] while i < 5 n = gets . chomp . to_i arr << n i += 1 end k = gets . chomp . to_i if k < ( arr [ 0 ] - arr [ - 1 ] ) . abs puts " :( " else puts " Yay! " end
n = gets . chomp . to_i ans = 1 loop do break if ans > n ans *= 2 end puts ans / 2
n = gets . to_i [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] . each { | i | if i <= n puts i break end }
c = 3 . times . map { gets . chomp . split . map ( & :to_i ) } b = [ ] flag = true 0 . upto ( c [ 0 ] [ 0 ] ) do | k | flag = true a = [ ] a . push ( k ) c [ 0 ] . each { | c | b . push ( c - k ) } a . push ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . push ( c [ 2 ] [ 0 ] - b [ 0 ] ) b . each_with_index do | b , j | a . each_with_index do | a , i | flag = false unless a + b == c [ i ] [ j ] end end break if flag == true end puts flag ? " Yes " : " No "
n = gets . to_i [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] . each do | x | if n >= x puts x exit end end
require " prime " N , P = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 1 Prime . prime_division ( P ) . each do | a , n | t = n / N ans *= a ** t if t > 0 end puts ans
cs = 3 . times . map { gets . split . map ( & :to_i ) } ans = " Yes " 3 . times do | i | diff = cs [ i ] [ 0 ] - cs [ i - 1 ] [ 0 ] 3 . times do | j | ans = " No " if diff != cs [ i ] [ j ] - cs [ i - 1 ] [ j ] end end puts ans
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY def cal ( x ) ret = 0 while x != 0 and ( x % 2 ) . zero? ret += 1 x /= 2 end return ret end N = gets . to_i ans = 1 max = 0 ( N + 1 ) . times do | i | if i . even? val = cal ( i ) if max < val ans = i max = val end end end puts ans
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY N = get_i . sort . join ( " " ) puts yn_judge ( N == " 1479 " , " YES " , " NO " )
n , m = gets . split . map & :to_i g = n - m g = g . abs a = [ 1 ] 101100 . times do | i | a << ( a [ - 1 ] * ( i + 2 ) ) % ( 10 ** 9 + 7 ) end if g == 0 p ( 2 * a [ n - 1 ] * a [ m - 1 ] ) % ( 10 ** 9 + 7 ) elsif g == 1 p ( a [ n - 1 ] * a [ m - 1 ] ) % ( 10 ** 9 + 7 ) else p 0 end
c = ( 1 .. 3 ) . map do gets . chomp . split . map ( & :to_i ) end x = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ i + 1 ] [ j ] - c [ i ] [ j ] == c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] end . all? end . all? y = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ j + 1 ] [ i ] - c [ j ] [ i ] == c [ j + 1 ] [ i + 1 ] - c [ j ] [ i + 1 ] end . all? end . all? puts x && y ? :Yes : :No
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if 0 <= z and z <= k count += 1 end end end puts count
array = 5 . times . map { gets . to_i } k = gets . to_i if array . max - array . min > k puts " :( " else puts " Yay! " end
d = [ ] for i in 1 .. 3 do b = gets d << b . split end c = " " a = [ ] d . each { | hai | a << hai . map ( & :to_i ) } for j in 0 .. 1 do for k in j ... 2 do if ! ( ( a [ j ] [ 0 ] - a [ k + 1 ] [ 0 ] == a [ j ] [ 1 ] - a [ k + 1 ] [ 1 ] ) && ( a [ j ] [ 0 ] - a [ k + 1 ] [ 0 ] == a [ j ] [ 2 ] - a [ k + 1 ] [ 2 ] ) ) then c = " No " isBreak = true break ; else c = " Yes " end end break if isBreak end print c
c = Array . new ( 3 ) { Array . new ( 3 , 0 ) } 3 . times do | i | tmp = gets . split ( " \s " ) . map { | s | s . to_i } c [ i ] [ 0 ] = tmp [ 0 ] c [ i ] [ 1 ] = tmp [ 1 ] c [ i ] [ 2 ] = tmp [ 2 ] end d00 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] d10 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] d20 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] d01 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] d11 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] d21 = c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] d02 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] d12 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] d22 = c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] if d00 == d01 && d01 == d02 && d02 == d00 && d10 == d11 && d11 == d12 && d12 == d10 && d20 == d21 && d21 == d22 && d22 == d20 then puts " Yes " else puts " No " end
n = gets . to_i count = 0 ans = 0 for i in 1 .. n do ans = 1 if n === 1 cur_element = i cur_count = 0 while cur_element % 2 == 0 cur_count += 1 cur_element /= 2 end if count < cur_count ans = i count = cur_count end end puts ans
eval " N,X,*A= " + ` dd ` . split * ?, p ( 0 .. N ) . map { | i | j = - 2 i > 0 && A = A . map { | a | [ a , A [ j += 1 ] ] . min } i * X + A . reduce ( :+ ) } . min
antennas = [ ] 5 . times do line = gets . chomp . to_i antennas . push ( line ) end k = gets . chomp . to_i flag = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 flag = false if antennas [ j ] - antennas [ i ] > k end end if flag puts " Yay! " else puts " :( " end
n = gets . to_i s = gets . split . map! { | i | i . to_i } max = n + 1 ans = 0 for i in 0 .. n - 1 if s [ i ] < max ans += 1 max = s [ i ] end end puts ans
puts gets ( p ) =~ / Y / ? " Four " : " Three "
antinas = 5 . times . map { gets . to_i } k = gets . to_i nonSendflag = false ( 0 .. 3 ) . each do | index | p = antinas [ index ] antinas [ ( index + 1 ) .. 4 ] . each do | q | if k < q - p nonSendflag = true break end end break if nonSendflag end puts nonSendflag ? " :( " : " Yay! "
K , S = gets . split . map ( & :to_i ) count = 0 ( K + 1 ) . times do | x | ( K + 1 ) . times do | y | z = S - x - y count += 1 if z >= 0 && z <= K end end puts count
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) cnt = 0 for x in 0 .. k for y in 0 .. k cnt += 1 if s - x - y <= k && s - x - y >= 0 end end puts cnt
n = gets . to_i max = 0 num = 1 ( 1 .. n ) . each do | i | j = i if i % 2 == 0 count = 0 while j % 2 == 0 j /= 2 count += 1 end if max < count max = count num = i end end end puts num
INF = 1 << 29 def contain ( names ) contained = [ ] names . permutation ( 2 ) . each do | s , t | contained << t if s . include? ( t ) end contained . each { | name | names . delete ( name ) } names end def overlap ( names , size ) overlap_size = size . times . map { [ 0 ] * size } ( 0 ... size ) . to_a . permutation ( 2 ) . each do | i , j | k = [ @len [ i ] , @len [ j ] ] . min loop do if names [ i ] [ @len [ i ] - k .. - 1 ] == names [ j ] [ 0 , k ] overlap_size [ i ] [ j ] = k break end k -= 1 end end overlap_size end while n = gets . to_i break if n == 0 s = n . times . map { gets . chomp } s = contain ( s ) m = s . size @len = s . map { | name | name . size } overlap_size = overlap ( s , m ) dp = ( 1 << m ) . times . map { [ INF ] * m } m . times { | i | dp [ 1 << i ] [ i ] = @len [ i ] } ( 1 << m ) . times do | bits | m . times do | i | if ( bits & ( 1 << i ) ) != 0 pre = dp [ bits ] [ i ] m . times do | j | bit = 1 << j if ( bits & bit ) == 0 if dp [ bits | bit ] [ j ] > pre + @len [ j ] - overlap_size [ i ] [ j ] dp [ bits | bit ] [ j ] = pre + @len [ j ] - overlap_size [ i ] [ j ] end end end end end end p dp [ ( 1 << m ) - 1 ] . min end
C = readlines . map { | l | l . split . map ( & :to_i ) } require ' matrix ' a = Array . new ( 9 ) { Array . new ( 9 , 0 ) } b = Array . new ( 9 , 0 ) C . flatten . each_with_index do | c , i | x , y = i . divmod ( 3 ) y += 3 a [ i ] [ x ] = 1 a [ i ] [ y ] = 1 b [ i ] = c end m = Matrix [ * a ] em = m . hstack ( Matrix . column_vector ( b ) ) puts m . rank == em . rank ? ' Yes ' : ' No '
N = gets . to_i unko = [ ] ( 1 .. N ) . map { | n | cnt = 0 while ( n % 2 == 0 ) cnt += 1 n /= 2 end unko << cnt } p unko . index ( unko . max ) + 1
def inp ( ) a = gets . to_s . chomp . split ( " " ) . map { | u | u . to_i } end def r_up ( a , b ) ( a + b - 1 ) / b end def r_sort ( a ) a . sort { | a , b | b <=> a } end bn = inp [ 0 ] ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | si = bn * h * n bo = ( 4 * h * n - bn * h - bn * n ) next if ( si <= 0 ) next if ( bo <= 0 ) if ( si % bo == 0 ) r = si / bo puts " exit end end end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ar = [ a , b , c , d , e ] ar . sort if ar [ 4 ] - ar [ 0 ] > k puts " :( " else puts " Yay! " end
c = 3 . times . map { gets . split . map ( & :to_i ) } heIsRight = false a = Array . new ( 3 ) b = Array . new ( 3 ) isOut = false a [ 0 ] = 0 ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] isOut = true end end a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] isOut = true end end if ! isOut puts ' Yes ' else puts ' No ' end
k , s = gets . chomp . split . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) if 0 <= z && z <= k cnt += 1 end end end puts cnt
n = STDIN . gets . split . map ( & :to_i ) . sort if n == [ 1 , 4 , 7 , 9 ] puts ' YES ' else puts ' NO ' end
antenas = [ ] 5 . times do | i | antenas << gets . chomp . to_i end k = gets . chomp . to_i puts antenas [ - 1 ] - antenas [ 0 ] <= k ? ' Yay! ' : ' :( '
n , m = gets . split . map ( & :to_i ) if n >= m n , m = m , n end @mod = 10 ** 9 + 7 def fact ( k ) ret = 1 k . times { | i | ret = ret * ( i + 1 ) % @mod } ret end if m - n >= 2 puts 0 elsif m == n + 1 puts fact ( m ) * fact ( n ) % @mod else puts 2 * fact ( m ) * fact ( n ) % @mod end
n = gets . chomp . to_i s = gets . chomp . split ( " " ) for i in 0 .. s . length if s [ i ] == " Y " print ( " Four " ) exit ( ) end end print ( " Three " )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts k >= e - a ? ' Yay! ' : ' :( '
N = eval * $< ( t = 1 .. 4e3 ) . any? { | i | t . any? { | j | n = 4 * i * j - N * i - d = N * j d *= i n > 0 && d % n < 1 && $> << [ i , j , d / n ] * ?\s } }
N = gets . to_i A = gets . split . map ( & :to_i ) B = gets . split . map ( & :to_i ) stock = A . zip ( B ) . map { | a , b | a - b } . sort diff = 0 ans = 0 N . times do | i | if A [ i ] < B [ i ] ans += 1 diff += A [ i ] - B [ i ] end while diff < 0 && ! stock . empty? diff += stock . pop ans += 1 end end if diff < 0 puts - 1 else puts ans end
n = gets . to_i for i in 0 .. 8 if 2 ** i <= n and n < 2 ** ( i + 1 ) puts 2 ** i end end
as = 5 . times . map { gets . to_i } k = gets . to_i puts as [ 4 ] - as [ 0 ] > k ? " :( " : " Yay! "
puts 1 << ( gets . to_i . to_s ( 2 ) . length - 1 )
N = gets . to_i S = gets . chomp . split puts S . include? ( " Y " ) ? " Four " : " Three "
n = gets . to_i d = gets . chomp . split . map ( & :to_i ) count = d [ 0 ] res = 0 d . each do | i | if count >= i res += 1 count = i end break if count == 1 end puts res
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a <= k puts " Yay! " else puts " :( " end
* A , K = readlines . map ( & :to_i ) puts A . permutation ( 2 ) . to_a . all? { | a , b | b - a <= K } ? " Yay! " : " :( "
antennas = Array . new ( 5 ) do gets . chomp . to_i end k = gets . chomp . to_i max_diff = antennas . combination ( 2 ) . map { | a , b | ( a - b ) . abs } . sort . max if max_diff <= k puts ' Yay! ' else puts ' :( ' end
if __FILE__ == $0 reads_i = lambda { | s , d | s . strip . split ( d ) . map ( & :to_i ) } data = reads_i [ gets , " " ] k = data [ 0 ] s = data [ 1 ] cnt = 0 for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if x + y == s || ( z <= k && z > 0 ) then cnt += 1 end end end p cnt end
N = gets . to_i S = gets . split puts S . uniq . size == 3 ? " Three " : " Four "
result = ' NO ' nums_array = gets . split ( ' ' ) if nums_array . size == 3 then nums_hash = nums_array . group_by ( & :itself ) if nums_hash [ ' 7 ' ] != nil && nums_hash [ ' 7 ' ] . size == 1 then if nums_hash [ ' 5 ' ] != nil && nums_hash [ ' 5 ' ] . size == 2 then result = ' YES ' end end end puts result
n = gets . to_i t = 0 while 2 ** ( t + 1 ) <= n do t += 1 end puts 2 ** t
c11 , c12 , c13 = gets . chomp . split . map ( & :to_i ) c21 , c22 , c23 = gets . chomp . split . map ( & :to_i ) c31 , c32 , c33 = gets . chomp . split . map ( & :to_i ) exist = true exist = false unless c11 - c12 == c21 - c22 exist = false unless c21 - c22 == c31 - c32 exist = false unless c12 - c13 == c22 - c23 exist = false unless c22 - c23 == c32 - c33 puts exist ? " Yes " : " No "
require ' set ' ; require ' prime ' INF = Float :: INFINITY n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) mini = INF ans = [ ] n . times do | i | if p [ i ] <= mini ans . push ( i + 1 ) mini = p [ i ] end end puts ans . count
n , as , bs = ARGF . read . split ( " \n " ) . map { | e | e . split } xs = as . zip ( bs ) . map { | e | a , b = e . map { | ee | ee . to_i } a - b } . sort ms = xs . select { | e | e < 0 } ps = xs . select { | e | e > 0 } if ms . length == 0 puts 0 exit end c = ms . length val = 0 ms . each { | e | m = e . abs if val <= m loop { if ps . length == 0 puts ' -1 ' exit else val += ps . pop c += 1 if val >= m val -= m break end end } else val -= m end } puts c
k , s = gets . chomp . split . map ( & :to_i ) answer = 0 arr = [ ] for a in 0 .. k break if a > s for b in 0 .. k break if a + b > s c = s - a - b answer += 1 if c <= k end end puts answer
puts ( { true => ' YES ' , false => ' NO ' } [ gets . chomp . split ( ' ' ) . sort . join == ' 1479 ' ] )
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) d = Array . new ( n , 0 ) n . times { | i | d [ i ] = a [ i ] - b [ i ] } d . sort! i = 0 j = n - 1 c = 0 while d [ i ] < 0 if d [ i ] + c >= 0 c += d [ i ] i += 1 elsif d [ j ] < 0 puts - 1 exit else c += d [ j ] j -= 1 end end puts i + n - j - 1
antennas = 5 . times . map { gets . chomp . to_i } k = gets . chomp . to_i ( 0 .. 3 ) . each do | i | ( i + 1 .. 4 ) . each do | j | if antennas [ j ] - antennas [ i ] > k puts ' :( ' exit end end end puts ' Yay! '
require ' prime ' n , x = gets . split . map ( & :to_i ) puts x < 2 ? 1 : Prime . prime_division ( x ) . map { | p , e | e >= n ? p ** ( e / n ) : 1 } . reduce ( :* )
gets ; puts gets . split . uniq . size == 3 ? " Three " : " Four "
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x next if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
n = gets . to_i P_arr = gets . split . map ( & :to_i ) counter = 0 P_max = P_arr . max n . times do | i | if P_max >= P_arr [ i ] counter += 1 P_max = P_arr [ i ] end end p counter
data = $< . map { | l | l . split . map ( & :to_i ) } a1 = b1 = 0 a2 = b2 = 1 a3 = b3 = 2 b1_b2_a = data [ a1 ] [ b1 ] - data [ a1 ] [ b2 ] b1_b2_b = data [ a2 ] [ b1 ] - data [ a2 ] [ b2 ] b1_b2_c = data [ a3 ] [ b1 ] - data [ a3 ] [ b2 ] b2_b3_a = data [ a1 ] [ b2 ] - data [ a1 ] [ b3 ] b2_b3_b = data [ a2 ] [ b2 ] - data [ a2 ] [ b3 ] b2_b3_c = data [ a3 ] [ b2 ] - data [ a3 ] [ b3 ] puts b1_b2_a == b1_b2_b && b1_b2_a == b1_b2_c && b2_b3_a == b2_b3_b && b2_b3_a == b2_b3_c ? " Yes " : " No "
pos = 5 . times . map { gets . to_i } k = gets . to_i puts pos [ 4 ] - pos [ 0 ] > k ? " :( " : " Yay! "
a = gets . chomp . split ( " " ) . map ( & :to_i ) if a . include? ( 1 ) && a . include? ( 9 ) && a . include? ( 7 ) && a . include? ( 4 ) puts " YES " else puts " NO " end
lst = [ ] 5 . times do | i | lst [ i ] = gets . chomp . to_i end k = gets . chomp . to_i for i in 0 .. 3 do for j in i + 1 .. 4 do if lst [ j ] - lst [ i ] > k puts " :( " exit 0 end end end puts " Yay! "
gets . to_i puts gets . split ( " " ) . uniq . size == 4 ? " Four " : " Three "
n = gets . to_i for num in 0 .. 6 do if n >= 2 ** num && n < 2 ** ( num + 1 ) p 2 ** num end end
puts " 557 " == gets . split . map ( & :to_i ) . sort . join ( " " ) ? " YES " : " NO "
d = [ ] 5 . times { d << gets . to_i } puts ( d . max - d . min ) <= gets . to_i ? ' Yay! ' : ' :( '
_n = gets . to_i array = gets . split ( " " ) count = array . uniq . length if count == 3 then puts " Three " elsif count == 4 then puts " Four " end
a = 6 . times . map { gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
n = gets . to_i p = [ ] n . times { | i | p [ i ] = gets . split . map ( & :to_i ) } p << p [ 0 ] q = gets . to_i q . times { x , y = gets . split . map ( & :to_i ) count = 0 on_line = false n . times { | i | a = [ p [ i ] [ 0 ] - x , p [ i ] [ 1 ] - y ] b = [ p [ i + 1 ] [ 0 ] - x , p [ i + 1 ] [ 1 ] - y ] if a [ 0 ] * b [ 1 ] - a [ 1 ] * b [ 0 ] == 0 && a [ 0 ] * b [ 0 ] + a [ 1 ] * b [ 1 ] <= 0 on_line = true break end a , b = b , a if a [ 1 ] > b [ 1 ] count += 1 if a [ 1 ] <= 0 && b [ 1 ] > 0 && a [ 0 ] * b [ 1 ] - a [ 1 ] * b [ 0 ] > 0 } if on_line == true puts " 1 " elsif count % 2 == 0 puts " 0 " else puts " 2 " end }
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) x = ( b [ 0 ] - a [ 0 ] ) * t [ 0 ] y = ( b [ 1 ] - a [ 1 ] ) * t [ 1 ] if x + y == 0 puts x == y ? 0 : " infinity " elsif x == 0 || y == 0 || ( x > 0 && x + y > 0 ) || ( x < 0 && x + y < 0 ) puts 0 elsif x + y > 0 s , t = x . abs . divmod ( x + y ) puts t != 0 ? s * 2 + 1 : s * 2 else s , t = x . divmod ( ( x + y ) . abs ) puts t != 0 ? s * 2 + 1 : s * 2 end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) minus = [ ] plus = [ ] flag = 0 sum = 0 for i in 0 .. n - 1 v = a [ i ] - b [ i ] if v < 0 flag = 1 end sum += v if v > 0 plus << v elsif v < 0 minus << v end end if flag == 0 p 0 exit elsif sum < 0 p - 1 exit end count = 0 count += minus . length plus . sort! plus = plus . reverse minus_all = minus . inject ( & :+ ) plus_all = 0 i = 0 while minus_all < 0 if i >= plus . length p - 1 exit end minus_all += plus [ i ] count += 1 i + = 1 end p count
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i array = a , b , c , d , e array . sort if k < ( array . last - array . first ) print " :( " else print " Yay! " end
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 min = Float :: INFINITY N . times do | i | if P [ i ] < min ans += 1 min = P [ i ] end end puts ans
array = [ ] array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i k = gets . chomp . to_i combinations = array . combination ( 2 ) . to_a combinations . each do | c | if c [ 0 ] > c [ 1 ] then dist = c [ 0 ] - c [ 1 ] else dist = c [ 1 ] - c [ 0 ] end if dist > k then puts " :( " exit ( ) end end puts " Yay! "
require ' prime ' n , q = gets . split . map & :to_i result = 1 q . prime_division . each do | i , j | result *= i ** ( j / n ) end puts result
a , b , c , d , e , f , g , h , i = 3 . times . flat_map { gets . split . map ( & :to_i ) } puts a - b == d - e && d - e == g - h && b - c == e - f && e - f == h - i ? ' Yes ' : ' No '
module HinaArare def solve n = gets . to_i s = gets . split ( " " ) for i in 1 .. n do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare puts HinaArare . solve
a , * _ , e , f = $< . map & :to_i puts e - a > f ? " :( " : " Yay! "
n = gets . chomp . to_i pn = gets . chomp . split ( " " ) . map ( & :to_i ) num = 0 minimum = n for i in 0 .. n - 1 do num += 1 if pn [ i ] <= minimum minimum = pn [ i ] if pn [ i ] < minimum break if minimum == 1 end print num
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i M = [ " Yay! " , " :( " ] if e - a > k puts M [ 1 ] else puts M [ 0 ] end
n = gets . chomp . to_i def count ( i ) cnt = 0 while i . even? i = i / 2 cnt += 1 end cnt end ans = 1 max_cnt = 0 ( 1 .. n ) . each do | i | if count ( i ) > max_cnt max_cnt = count ( i ) ans = i end end puts ans
C = ( 0 ... 3 ) . map { gets . split . map ( & :to_i ) } puts ( 0 ... 3 ) . all? { | a | ( 0 ... 3 ) . map { | b | C [ b ] [ ( a + 1 ) % 3 ] - C [ b ] [ a ] } . uniq . size == 1 && ( 0 ... 3 ) . map { | b | C [ ( a + 1 ) % 3 ] [ b ] - C [ a ] [ b ] } . uniq . size == 1 } ? " Yes " : " No "
a = [ ] ( 0 .. 5 ) . each do b = gets . chomp a <<b . to_i end a . combination ( 2 ) do | c | if c [ 1 ] - c [ 0 ] > a [ 5 ] puts ' :( ' exit end end puts ' Yay! '
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) da1 = t1 * a1 db1 = t1 * b1 df1 = da1 - db1 da2 = t2 * a2 db2 = t2 * b2 df2 = da2 - db2 if df1 > 0 df1 *= - 1 df2 *= - 1 end if df1 + df2 == 0 puts " infinity " elsif df1 + df2 < 0 puts 0 else s = - 1 * df1 / ( df1 + df2 ) t = ( - 1 * df1 ) % ( df1 + df2 ) if t == 0 ans = s * 2 else ans = s * 2 + 1 end end puts ans
n = gets . chomp . to_i ni = Array . new ( n + 1 , 0 ) for k in 1 .. n do count = 0 checknum = k while true oddcheck = checknum % 2 if oddcheck == 1 break else count = count + 1 checknum = checknum / 2 end end ni [ k ] = count end maxdivide = 0 answer = 0 for k in 0 .. n do if maxdivide <= ni [ k ] answer = k maxdivide = ni [ k ] end end puts ( answer )
K , S = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. K do for y in 0 .. K do if S - ( x + y ) <= K && S - ( x + y ) >= 0 count = count + 1 end end end puts count
k , s = gets . chomp . split . map ( & :to_i ) count = 0 for i in 0 .. k for j in 0 .. k l = s - ( i + j ) if l >= 0 && l <= k count += 1 end end end puts count
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
n = gets . chomp . to_i s = gets . chomp . split ( ' ' ) puts s . uniq . size == 3 ? ' Three ' : ' Four '
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size , n = 1 , init = nil ) if n == 1 return Array . new ( size ) { init } else return Array . new ( n ) . map { Array . new ( size ) { init } } end end k , s = get_i ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | if s >= x + y and s - x - y <= k ans += 1 end end end puts ans
require ' prime ' n , q = gets . split . map & :to_i ret = 1 ps = Prime . prime_division ( q ) ps . each { | a | if a [ 1 ] >= n ( a [ 1 ] / n ) . times { ret *= a [ 0 ] } end } p ret
n = gets . chomp . to_i ; a = gets . chomp . split ( " " ) . map ( & :to_i ) ; b = gets . chomp . split ( " " ) . map ( & :to_i ) ; sum_a = 0 sum_b = 0 for i in 0 .. n - 1 sum_a = sum_a + a [ i ] sum_b = sum_b + b [ i ] end if sum_a < sum_b p - 1 else count = 0 odds = 0 list = [ ] for i in 0 .. n - 1 if a [ i ] < b [ i ] count = count + 1 odds = odds + ( b [ i ] - a [ i ] ) else list . push ( a [ i ] - b [ i ] ) end end if count == 0 p 0 else list = list . sort . reverse len = list . length sum = 0 i = 0 while sum < odds && i < len sum = sum + list [ i ] count = count + 1 i = i + 1 end p count end end
temp = [ ] 6 . times do temp << gets . chomp . to_i end if ( temp [ 4 ] - temp [ 0 ] ) <= temp [ 5 ] puts " Yay! " else puts " :( " end
n = gets . chomp . to_i arr = gets . chomp . split ( " " ) . map ( & :to_i ) sum = 0 min = 114514810 n . times do | i | if min > arr [ i ] then min = arr [ i ] sum += 1 end end puts sum
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? ' Yay! ' : ' :( '
def ascan ; gets . split . map ( & :to_i ) ; end gets ; m = gets . chomp . split . sort . uniq . size puts [ " Zero " , " One " , " Two " , " Three " , " Four " ] [ m ]
n = gets . to_i s = gets . chomp . split h = Hash . new { 0 } n . times do | i | h [ s [ i ] ] += 1 end puts h . size == 3 ? " Three " : " Four "
arr = { } gets . split ( " " ) . map ( & :to_i ) . each do | i | arr [ i ] ||= 0 arr [ i ] += 1 end puts arr [ 5 ] == 2 && arr [ 7 ] == 1 ? " YES " : " NO "
require ' set ' ; require ' prime ' INF = Float :: INFINITY a = gets . chomp . split if a . sort . join ( ' ' ) == ' 1479 ' puts ' YES ' else puts ' NO ' end
n = gets . chomp . to_i ar = gets . chomp . split ( ' ' ) . map ( & :to_i ) br = gets . chomp . split ( ' ' ) . map ( & :to_i ) diffs = ar . zip ( br ) . map { | a , b | a - b } . reject { | n | n == 0 } diffs = diffs . sort if diffs . inject ( 0 ) { | sum , x | sum + x } < 0 puts ' -1 ' exit 0 end d = 0 changes = 0 while ! diffs . empty? if 0 <= d s = diffs . shift if 0 <= s puts changes exit 0 end d = s + d else s = diffs . pop if s < 0 puts ' -1 ' exit 0 end d = s + d end changes += 1 end puts changes
input = $stdin . read . split ( " \n " ) n = input . shift . to_i as = input . map ( & :to_i ) stepcount = as . shift - 1 minvalue = 2 as . each do | currency | if currency == minvalue minvalue = minvalue + 1 else currency > minvalue stepcount = stepcount + ( ( currency - 1 ) / minvalue ) end end puts stepcount
n = gets . chomp . to_i check_num , check_val = 0 , 1 ( 1 .. n ) . each do | v | next if ( v % 2 ) != 0 num , test = 0 , v while test > 1 test = test / 2 num += 1 end if check_num < num check_num = num check_val = v end end p check_val
p 2 ** Math . log2 ( gets . to_i ) . to_i
K , S = gets . split . map ( & :to_i ) count = 0 for x in 0 .. K if S - x > K * 2 next end for y in 0 .. ( [ S - x , K ] . min ) z = S - x - y if 0 <= z && z <= K count += 1 end end end puts count
x = 5 . times . map { gets . to_i } k = gets . to_i puts x . max - x . min > k ? " :( " : " Yay! "
a = $stdin . readline . to_i $stdin . readline $stdin . readline $stdin . readline e = $stdin . readline . to_i k = $stdin . readline . to_i if e - a <= k then print " Yay! " else print " :( " end
_n = gets . strip . to_i puts gets . strip . split . uniq . size . eql? ( 3 ) ? ' Three ' : ' Four '
n = gets . to_i p_n = gets . chomp . split ( " " ) . map ( & :to_i ) min = p_n [ 0 ] res = 0 n . times do | i | if p_n [ i ] <= min res += 1 end if p_n [ i ] < min min = p_n [ i ] end end puts ( res )
n = gets . to_i p = gets . split . map ( & :to_i ) min = 10 ** 6 ans = 0 p . each do | c | if c <= min ans += 1 min = c end end puts ans
N = gets . to_i A = gets . strip . split . map ( & :to_i ) B = gets . strip . split . map ( & :to_i ) a = [ ] for i in 0 .. N - 1 a [ i ] = A [ i ] - B [ i ] end a . sort! i = 0 b = 0 while a [ i ] < 0 b -= a [ i ] i += 1 end j = 0 c = 0 while b > c && j <= N - 1 c += a [ N - 1 - j ] j += 1 end if A . inject ( :+ ) < B . inject ( :+ ) puts - 1 else puts j + i end
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . chomp . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end a = get_int b = get_int c = get_int d = get_int e = get_int k = get_int if e - a > k puts ' :( ' else puts ' Yay! ' end
k , s = gets . split . map ( & :to_i ) ret = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y next unless 0 <= z && z <= k ret += 1 end end puts ret
n = gets . to_i hina = gets . split ( " " ) . uniq puts ( hina . size == 3 ) ? " Three " : " Four "
N = gets . to_i x = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] x . reverse . each do | e | if e <= N puts e exit end end
n = gets . to_i s = gets . gsub ( " " , " " ) puts s [ " Y " ] ? " Four " : " Three "
p ( ?1 + ?0 * ( ( " %b " % gets ) . size - 1 ) ) . to_i ( 2 )
n = gets . to_i as = gets . split . map ( & :to_i ) bs = gets . split . map ( & :to_i ) diff = Array . new ( n ) { | i | as [ i ] - bs [ i ] } remains = diff . select { | i | i > 0 } . sort requires = diff . select { | i | i < 0 } . sort valid = true changed = 0 charge = 0 while ! ( requires . empty? ) req = - requires . pop changed += 1 while ! ( remains . empty? ) && charge < req charge += remains . pop changed += 1 end if remains . empty? && charge < req valid = false break end charge -= req end puts ( valid ? changed : - 1 )
N = gets . to_i A = gets . split . map & :to_i B = gets . split . map & :to_i diffs = A . zip ( B ) . collect { | a , b | a - b } ans = - 1 minus = diffs . select { | n | n < 0 } S_minus = - minus . inject ( 0 , :+ ) plus = diffs . select { | n | n > 0 } . sort_by { | n | - n } if plus . inject ( 0 , :+ ) - S_minus >= 0 then ans = minus . size plus_sum = 0 i = 0 while plus_sum < S_minus do plus_sum += plus [ i ] i += 1 end ans += i end puts ans
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a > k puts ' :( ' else puts ' Yay! ' end
points = readlines . map ( & :to_i ) dist = points . pop puts points . max - points . min > dist ? ' :( ' : ' Yay! '
C = 3 . times . map { gets . split . map ( & :to_i ) } if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] && C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] && C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] && C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] puts " Yes " else puts " No " end
eval " K,S= " + gets . split * ?, ; p ( 0 .. K ) . map { | i | [ 0 , [ 2 * K - S + i , S - i ] . min + 1 ] . max } . inject ( :+ )
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
a = gets . chomp . split ( " " ) . map ( & :to_i ) ; if a . include? ( 1 ) && a . include? ( 9 ) && a . include? ( 7 ) && a . include? ( 4 ) puts " YES " else puts " NO " end
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | ans += 1 if s - ( x + y ) >= 0 && s - ( x + y ) <= k end end puts ans
n , x = gets . chomp . split ( " " ) . map ( & :to_i ) a = gets . chomp . split ( " " ) . map ( & :to_i ) b = Marshal . load ( Marshal . dump ( a ) ) ans = 10 ** 13 for i in 0 .. n - 1 for j in 0 .. n - 1 b [ j ] = [ b [ j ] , a [ ( j - i ) % n ] ] . min end ans = [ ans , b . inject ( :+ ) + x * i ] . min end puts ans
n = gets . to_i ary = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] puts ary . select { | a | a <= n } . max
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i mi , mx = [ a , b , c , d , e ] . minmax puts mx - mi > k ? ' :( ' : ' Yay! '
ret = 0 k , s = gets . split . map ( & :to_i ) for i in 0 .. k for j in 0 .. k ret += 1 if s - j - i <= k && s - j - i >= 0 end end puts ret
n = gets . to_i num = gets . strip . split . map ( & :to_s ) if num . include? ( " Y " ) puts " Four " else puts " Three " end
n = gets . chomp . to_i s = gets . chomp . split ( " " ) hash = Hash . new ( 0 ) s . each do | i | hash [ i ] += 1 end if hash . size == 3 puts " Three " else puts " Four " end
N = gets . to_i Ss = gets . chomp . split if Ss . uniq . length == 3 then puts ( " Three " ) elsif Ss . uniq . length == 4 then puts ( " Four " ) end
N = gets . to_i a = gets puts a . count ( ?Y ) > 0 ? " Four " : " Three "
n = gets . to_i max = 0 ans = 1 ( 1 .. n ) . each do | i | cnt = 0 tmp_i = i while i . even? i /= 2 cnt += 1 end if max < cnt max = cnt ans = tmp_i end end puts ans
N = gets . to_i ( 1 .. 3500 ) . each do | h | ( h .. 3500 ) . each do | n | d = 4 * h * n - n * N - h * N next if d <= 0 if h * n * N % d == 0 w = h * n * N / d puts " exit end end end
gets puts gets . split . uniq . size == 3 ? ' Three ' : ' Four '
n , x = gets . chomp . split ( " " ) . map ( & :to_i ) a = gets . chomp . split ( " " ) . map ( & :to_i ) b = Marshal . load ( Marshal . dump ( a ) ) ans = 10 ** 13 for i in 0 .. n - 1 for j in 0 .. n - 1 b [ j ] = a [ ( j - i ) % n ] if b [ j ] > a [ ( j - i ) % n ] end bsum = b . inject ( :+ ) + x * i ans = bsum if ans > bsum end puts ans
c = 3 . times . map { gets . split . map ( & :to_i ) } a = Array . new ( 3 ) b = Array . new ( 3 ) isOut = false a [ 0 ] = 0 ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | isOut = true if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] end a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | isOut = true if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] end if isOut puts ' No ' else puts ' Yes ' end
N = gets . chomp P = gets . split . map ( & :to_i ) count = 0 min = P [ 0 ] 0 . upto ( P . size - 1 ) do | i | if P [ i ] <= min min = P [ i ] count += 1 end end puts count
k , s = gets . split ( " " ) . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
n = gets . split ( " " ) . map ( & :to_i ) puts n . sort . join == ' 1479 ' ? ' YES ' : ' NO '
ae = [ ] 5 . times { | i | ae << gets . to_i } k = gets . to_i ae . each do | i | ae . each do | j | if ( i - j ) . abs > k puts ' :( ' exit 0 end end end puts ' Yay! '
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
s = gets . to_i result = 1 counts = { } ( 1 .. s ) . each . with_index ( 1 ) do | s , i | count = 0 while s . even? do s = s / 2 count += 1 end counts [ i ] = count result = i if counts [ i ] > counts [ result ] end p result
c = readlines . map { | line | line . chomp . split . map ( & :to_i ) } b = c [ 0 ] . map { | i | i - c [ 0 ] [ 0 ] } a = ( 0 .. 2 ) . map { | j | c [ j ] [ 0 ] - b [ 0 ] } d = ( 0 .. 2 ) . map { | i | ( 0 .. 2 ) . map { | j | a [ i ] + b [ j ] } } puts c == d ? :Yes : :No
a = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i d = e - a if d > k puts ' :( ' else puts ' Yay! ' end
n , w = gets . to_i , gets . split ( " " ) a = w . count ( " P " ) , w . count ( " W " ) , w . count ( " G " ) , w . count ( " Y " ) puts [ " " , " " , " Three " , " Four " ] [ 3 - a . count ( 0 ) ]
data = STDIN . read . split ( / \s + / ) . map ( & :to_i ) k , a , e = data . pop , data . shift , data . pop puts k >= ( e - a ) ? ' Yay! ' : ' :( '
N = gets . to_f ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | w = ( N * h * n ) / ( 4 * h * n - N * ( n + h ) ) if w > 0 && w % 1 == 0 puts " exit 0 end end end
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x break if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ret = 0 ( 0 .. k ) . each do | z | ( 0 .. k ) . each do | x | y = s - z - x if y >= 0 && y <= k then ret += 1 end end end puts ret
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
n = gets . to_i ps = gets . split . map ( & :to_i ) max = ps . first count = 0 ps . each do | p0 | if p0 <= max count += 1 max = p0 end end puts count
k , s = gets . split . map & :to_i ; v = 0 ; ( g = ( 0 .. k ) ) . each { | x | g . each { | y | r = s - x - y ; k >= r && r >= 0 && v += 1 } } ; p v
B = 3 . times . map { gets . split . map ( & :to_i ) } h = [ B [ 0 ] [ 0 ] - B [ 0 ] [ 1 ] , B [ 0 ] [ 1 ] - B [ 0 ] [ 2 ] ] v = [ B [ 0 ] [ 0 ] - B [ 1 ] [ 0 ] , B [ 1 ] [ 0 ] - B [ 2 ] [ 0 ] ] r = ( 1 .. 2 ) . all? do | i | [ B [ i ] [ 0 ] - B [ i ] [ 1 ] , B [ i ] [ 1 ] - B [ i ] [ 2 ] ] == h && [ B [ 0 ] [ i ] - B [ 1 ] [ i ] , B [ 1 ] [ i ] - B [ 2 ] [ i ] ] == v end puts r ? ' Yes ' : ' No '
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
puts gets ( p ) [ ?Y ] ? :Four : :Three
* r = 1 M = 1000000007 100002 . times { | i | r << ( r [ - 1 ] * ( i + 1 ) ) % M } n , m = gets . split . map ( & :to_i ) p ( n == m ? 2 * r [ n ] * r [ m ] : ( n - m ) . abs == 1 ? r [ n ] * r [ m ] : 0 ) % M
K , S = gets . split . map ( & :to_i ) sum = 0 for x in 0 .. K for y in 0 .. K z = S - x - y if 0 <= z && z <= K then sum = sum + 1 end end end puts sum
n = gets . to_i arr = gets . chomp . split ( ' ' ) if arr . uniq . size == 3 puts " Three " else puts " Four " end
n = gets . chomp . split ( " " ) . map ( & :to_i ) . uniq if n . count ( 1 ) + n . count ( 9 ) + n . count ( 7 ) + n . count ( 4 ) == 4 puts " YES " else puts " NO " end
eval " p (0..9).map{|i|2**i*%d[i]}.max " % gets
n = gets . to_i p = gets . split . map & :to_i f = 0 com = p [ 0 ] p . each_with_index do | el , i | next if i == 0 f += 1 if el > com com = [ el , com ] . min end p n - f
_ , A , B = $< . map { | s | s . split . map & :to_i } v = [ ] w = 0 c = A . zip ( B ) . count { | a , b | a < b ? w += b - a : ! ( v <<b - a ) } + v . sort . count { | d | d < w += d } p w > 0 ? - 1 : c
require ' pp ' IS_DEBUG = true def dputs str if ( IS_DEBUG ) puts str end end def dpp str if ( IS_DEBUG ) pp str end end require ' pp ' INT_MAX = 999999999999999999999999 N , M = gets . chomp . split ( ' ' ) . map { | n | n . to_i } X = gets . chomp . split ( ' ' ) . map { | n | n . to_i } . sort Y = gets . chomp . split ( ' ' ) . map { | n | n . to_i } . sort mod = 10 ** 9 + 7 xsum = 0 ysum = 0 X . each_with_index { | x , i | i = i + 1 ; xsum += - ( N - i ) * x + ( i - 1 ) * x } Y . each_with_index { | y , i | i = i + 1 ; ysum += - ( M - i ) * y + ( i - 1 ) * y } puts xsum * ysum % mod
k , s = gets . split . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do count += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts count
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end h . delete ( " " ) if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
N = gets . to_i p = gets . chomp . split . map ( & :to_i ) min = 300000 ans = 0 p . each do | i | if i < min min = i ans += 1 end end puts ans
gets ; puts gets . split . include? ( ' Y ' ) ? " Four " : " Three "
n = gets . strip . to_i array = gets . strip . split . map ( & :to_i ) res = [ ] sum = 0 min = 2000000 array . each do | ar | min = ar if min > ar if min == ar sum += 1 end end puts sum
l0 = gets . split ( " " ) . map! { | i | i . to_i } l1 = gets . split ( " " ) . map! { | i | i . to_i } l2 = gets . split ( " " ) . map! { | i | i . to_i } b1 = l0 [ 0 ] ; b2 = l1 [ 0 ] ; b3 = l2 [ 0 ] a1 = 0 ; a2 = l0 [ 1 ] - b1 ; a3 = l0 [ 2 ] - b1 if ( l0 [ 0 ] == a1 + b1 ) && ( l0 [ 1 ] == a2 + b1 ) && ( l0 [ 2 ] == a3 + b1 ) && ( l1 [ 0 ] == a1 + b2 ) && ( l1 [ 1 ] == a2 + b2 ) && ( l1 [ 2 ] == a3 + b2 ) && ( l2 [ 0 ] == a1 + b3 ) && ( l2 [ 1 ] == a2 + b3 ) && ( l2 [ 2 ] == a3 + b3 ) then puts " Yes " else puts " No " end
K , S = gets . split . map ( & :to_i ) p ( 0 .. K ) . map { | x | ( 0 .. K ) . map { | y | z = S - x - y ; 0 <= z && z <= K ? 1 : 0 } . inject ( :+ ) } . inject ( :+ )
K , S = gets . split . map ( & :to_i ) a = Array . new if K < S for i in 0 .. K if K >= S - i && 2 * K >= S - i a [ i ] = S - i + 1 elsif K < S - i && 2 * K >= S - i a [ i ] = ( S - ( 2 * K ) - i ) . abs + 1 else a [ i ] = 0 end end elsif S <= K for i in 0 .. S a [ i ] = S - i + 1 end end puts a . inject ( :+ )
require ' pp ' c = [ ] c [ 0 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) c [ 1 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) c [ 2 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) if c [ 0 ] . zip ( c [ 1 ] ) . map { | i , j | i - j } . uniq . length == 1 && c [ 1 ] . zip ( c [ 2 ] ) . map { | i , j | i - j } . uniq . length == 1 && c [ 2 ] . zip ( c [ 0 ] ) . map { | i , j | i - j } . uniq . length == 1 x = c . transpose if x [ 0 ] . zip ( x [ 1 ] ) . map { | i , j | i - j } . uniq . length == 1 && x [ 1 ] . zip ( x [ 2 ] ) . map { | i , j | i - j } . uniq . length == 1 && x [ 2 ] . zip ( x [ 0 ] ) . map { | i , j | i - j } . uniq . length == 1 puts " Yes " else puts " No " end else puts " No " end
n = gets . to_i for i in 1 .. 3500 do for j in i .. 3500 do numera = 4 * i * j - n * ( i + j ) delim = n * i * j if numera > 0 && delim % numera == 0 then puts " exit end end end
( ( N , X ) , A ) = $stdin . read . lines . map ( & :chomp ) . map { | l | l . split ( " " ) . map ( & :to_i ) } b = Array . new ( N ) { Array . new ( N ) } class Array def sum self . inject ( :+ ) end end N . times do | i | s = nil N . times do | k | s = A [ i - k ] if s . nil? || s > A [ i - k ] b [ k ] [ i ] = s end end a = nil N . times do | k | al = b [ k ] . sum + k * X a = al if a . nil? or a > al end puts a
data_set = readlines as = data_set [ 1 ] . split . map ( & :to_i ) bs = data_set [ 2 ] . split . map ( & :to_i ) ds = as . zip ( bs ) . map { | a , b | a - b } if ds . reduce ( :+ ) < 0 puts - 1 exit end lack_list = ds . select { | x | x < 0 } lack = lack_list . reduce ( :+ ) unless lack puts 0 exit end exceed_list = ds . select { | x | x > 0 } . sort . reverse c = 1 sum = 0 0 . upto ( exceed_list . size - 1 ) do | i | sum += exceed_list [ i ] break if sum + lack >= 0 c += 1 end puts c + lack_list . size
def ina gets . split ( ' ' ) . map ( & :to_i ) end t1 , t2 = ina a1 , a2 = ina b1 , b2 = ina k1 = t1 * ( a1 - b1 ) k2 = t2 * ( a2 - b2 ) stride = k1 + k2 if stride . zero? puts ' infinity ' elsif ( k1 * stride ) . positive? puts 0 else ceil = ( k1 . abs + ( stride . abs - 1 ) ) / stride . abs bent = k1 % stride == 0 res = ( ceil - 1 ) + ceil + ( bent ? 1 : 0 ) p res end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( 0 .. k ) . include? ( z ) count += 1 end end end p count
n , p = STDIN . gets . split ( ' ' ) . map ( & :to_i ) if n == 1 puts p exit 0 end start = ( p ** ( 1.0 / n ) ) . to_i + 1 gcd = 1 start . downto ( 2 ) do | i | product = p if ( i ** n ) > product next end if product % ( i ** n ) != 0 next end product /= i ** n if product < 0 next end gcd = i break end p gcd
arr = gets . chomp . split ( " " ) if ( arr . select { | v | v == " 5 " } . size == 2 && arr . select { | v | v == " 7 " } . size == 1 ) puts " YES " else puts " NO " end
i = gets . chomp . split ( " " ) . map ( & :to_i ) one , nine , seven , four = false i . each do | hoge | one = true if hoge == 1 nine = true if hoge == 9 seven = true if hoge == 7 four = true if hoge == 4 end if one and nine and seven and four then puts " YES " else puts " NO " end
n = gets . chomp . to_i ans = 1 while n >= ans if n < ans * 2 puts ans break else ans *= 2 end end
puts [ gets . to_i ] . map { | n | ( 0 .. 8 ) . map { | x | 2 ** x } . select { | x | x <= n } . max }
def can_communication ( x , y , k ) ( y - x ) . abs <= k end a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i res = can_communication ( b , a , k ) res = res && can_communication ( c , a , k ) res = res && can_communication ( d , a , k ) res = res && can_communication ( e , a , k ) res = res && can_communication ( c , b , k ) res = res && can_communication ( d , b , k ) res = res && can_communication ( e , b , k ) res = res && can_communication ( d , c , k ) res = res && can_communication ( e , c , k ) res = res && can_communication ( e , d , k ) puts res ? " Yay! " : " :( "
cs = $< . read . split . map ( & :to_i ) cs = cs . each_slice ( 3 ) . to_a i = 0 while i < 3 cs [ i ] = cs [ i ] . map { | c | c - cs [ i ] . min } i += 1 end cs = cs . transpose i = 0 while i < 3 cs [ i ] = cs [ i ] . map { | c | c - cs [ i ] . min } i += 1 end b = cs . flatten . inject ( & :+ ) == 0 puts ( b ? ' Yes ' : ' No ' )
require ' pp ' N , d = gets . chomp . split ( ' ' ) . map { | n | n . to_i } S = gets . chomp . split ( ' ' ) . map { | n | n } if ( S . any? { | s | s == " Y " } ) puts " Four " else puts " Three " end
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
n = gets . to_i exp = 0 while true if 2 ** exp > n break end exp += 1 end puts 2 ** ( exp - 1 )
arr = [ ] a = [ 0 ] b = [ ] 3 . times do arr << gets . split ( " " ) . map ( & :to_i ) end for i in 0 .. 2 do b << arr [ 0 ] [ i ] - a [ 0 ] end for i in 1 .. 2 do a << arr [ i ] [ 0 ] - b [ 0 ] end for i in 0 .. 2 do for j in 0 .. 2 do unless arr [ i ] [ j ] == a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
n = gets . chomp . to_i a = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 , 999 ] for i in 0 .. 7 do if ( n < a [ i ] ) puts a [ i - 1 ] exit end end
n = gets . to_i b = Math . log ( n , 2 ) puts 2 ** b . floor
k , s = gets . split . map & :to_i w = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y w += 1 if z . between? ( 0 , k ) end end puts w
n = gets . chomp . to_i ans = 1 loop { ans = ans * 2 if ans > n puts ans / 2 break end }
c = 3 . times . map { gets . split . map ( & :to_i ) } all = c . map { | e | e . inject ( :+ ) } . inject ( :+ ) % 3 == 0 al2 = 2 . times . all? { | i | c [ i .. i + 1 ] . map { | e | e [ i .. i + 1 ] . inject ( :+ ) } . inject ( :+ ) % 2 == 0 } puts all && al2 ? :Yes : :No
def get_nums gets . split . map ( & :to_i ) end def init_matrix ( row_num , row_length , default = nil ) Array . new ( row_num ) . map { Array . new ( row_length , default ) } end n = gets . to_i nums = get_nums current_min = 10 ** 6 res = 0 nums . each do | i | if current_min >= i res += 1 current_min = i end end puts res
* a , b = ` dd ` . split . map ( & :to_i ) puts a . max - a . min > b ? ' :( ' : ' Yay! '
i = gets . split . map ( & :to_i ) j = gets . split . map ( & :to_i ) k = gets . split . map ( & :to_i ) def checker ( i , j , k ) ( 0 .. 100 ) . each do | x | a1 = x b1 = i [ 0 ] - a1 b2 = i [ 1 ] - a1 b3 = i [ 2 ] - a1 a2 = j [ 0 ] - b1 a3 = k [ 0 ] - b1 if ( j [ 1 ] == a2 + b2 && j [ 2 ] == a2 + b3 && k [ 1 ] == a3 + b2 && k [ 2 ] == a3 + b3 ) return true end end return false end puts checker ( i , j , k ) ? " Yes " : " No "
$key = gets . to_i $count = 2 while $key >= $count do $count = $count * 2 end puts $count / 2
c = [ nil ] * 3 3 . times { | i | c [ i ] = gets . chomp . split ( ' ' ) . map ( & :to_i ) } d = [ 0 ] * 3 d [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] d [ 1 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] d [ 2 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] puts ( ( ( d [ 0 ] == d [ 1 ] ) and ( d [ 1 ] == d [ 2 ] ) ) ? ' Yes ' : ' No ' )
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
n = gets . to_i ps = gets . split . map & :to_i ps = ps . map . with_index { | x , i | [ x , i ] } . sort { | a , b | a [ 0 ] <=> b [ 0 ] } count = 0 memo = n ps . each { | p | if p [ 1 ] < memo then count += 1 memo = p [ 1 ] end } puts count
$/ = ' ' ; k , s = $< . map & :to_i ; p ( 0 ... ( k += 1 ) * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
* a , k = $< . map & :to_i ; puts a [ - 1 ] - a [ 0 ] > k ? ' :( ' : ' Yay! '
N = gets . to_i P = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 P . each do | n | if min > n min = n ans += 1 end end puts ans
ns = gets . split puts ns . sort . join == " 1479 " ? " YES " : " NO "
N = gets . to_i K = 1 while N >= K * 2 K *= 2 end puts K
gets t , * ps = gets . split . map & :to_i puts 1 + ps . count { | e | e < t ? t = e : nil }
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts e - a <= k ? " Yay! " : " :( "
a , * , e , k = $< . map & :to_i puts e - a > k ? " :( " : " Yay! "
n = gets . to_i variation = gets . split . uniq . length if variation == 3 puts ' Three ' else puts ' Four ' end
n = gets . to_i s = gets . chomp . split ( " " ) puts ( s . uniq . size == 4 ) ? " Four " : " Three "
T1 , T2 = gets . split . map & :to_i A1 , A2 = gets . split . map & :to_i B1 , B2 = gets . split . map & :to_i a1 = T1 * A1 a2 = T2 * A2 b1 = T1 * B1 b2 = T2 * B2 if a1 + a2 == b1 + b2 puts :infinity elsif ( a1 - b1 ) * ( ( a1 - b1 ) + ( a2 - b2 ) ) > 0 puts 0 else puts 2 * ( ( b1 - a1 ) / ( ( a1 - b1 ) + ( a2 - b2 ) ) ) + ( ( ( b1 - a1 ) % ( ( a1 - b1 ) + ( a2 - b2 ) ) == 0 ) ? 0 : 1 ) end
ps = Array . new ( 5 ) { gets . to_i } k = gets . to_i ok = ps . max - ps . min <= k puts ok ? ' Yay! ' : ' :( '
gets a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) if a . inject ( & :+ ) < b . inject ( & :+ ) puts - 1 exit ( 0 ) end d = a . zip ( b ) . map { | a , b | a - b } dp = d . select ( & :positive? ) . sort . reverse dn = - d . select ( & :negative? ) . inject ( 0 , & :+ ) if dn == 0 puts 0 exit ( 0 ) end ( dp . size - 1 ) . times . each do | i | dp [ i + 1 ] += dp [ i ] end puts ( dp . each_with_index . to_a . bsearch { | x , i | dn <= x } || [ 0 , - 1 ] ) [ 1 ] + d . select ( & :negative? ) . size + 1
a , b , c , d = gets . chomp . split ( ' ' ) . map ( & :to_i ) array = [ a , b , c , d ] . sort if array == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
puts $< . read . index ( " Y " ) ? :Four : :Three
grid = readlines . map { | line | line . chomp . split . map ( & :to_i ) } d1 = grid [ 0 ] [ 0 ] - grid [ 1 ] [ 0 ] d2 = grid [ 0 ] [ 1 ] - grid [ 1 ] [ 1 ] d3 = grid [ 0 ] [ 2 ] - grid [ 1 ] [ 2 ] d4 = grid [ 1 ] [ 0 ] - grid [ 2 ] [ 0 ] d5 = grid [ 1 ] [ 1 ] - grid [ 2 ] [ 1 ] d6 = grid [ 1 ] [ 2 ] - grid [ 2 ] [ 2 ] d7 = grid [ 0 ] [ 0 ] - grid [ 0 ] [ 1 ] d8 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 2 ] d9 = grid [ 1 ] [ 0 ] - grid [ 1 ] [ 1 ] d10 = grid [ 1 ] [ 1 ] - grid [ 1 ] [ 2 ] d11 = grid [ 2 ] [ 0 ] - grid [ 2 ] [ 1 ] d12 = grid [ 2 ] [ 1 ] - grid [ 2 ] [ 2 ] if d1 == d2 && d1 == d3 && d4 == d5 && d4 == d6 && d7 == d9 && d7 == d11 && d8 == d10 && d8 == d12 puts ( ' Yes ' ) else puts ( ' No ' ) end
n = gets . to_i hina = gets . split ( " " ) . uniq if hina . size == 3 puts " Three " else puts " Four " end
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | x | y_z = S - x next if y_z < 0 next if K * 2 < y_z ( 0 .. K ) . each do | y | z = y_z - y next if z < 0 next if K < z ans += 1 end end p ans
array = [ ] 6 . times do array << gets . to_i end num = array [ 4 ] - array [ 0 ] if num <= array [ 5 ] puts ' Yay! ' else puts " :( " end
n = gets . chomp . to_i i = 1 i *= 2 while i <= n puts i / 2
grid = Array . new ( 3 ) 3 . times do | i | grid [ i ] = gets . split . map ( & :to_i ) end flag = false 0 . upto ( 100 ) do | a1 | b1 , b2 , b3 = grid [ 0 ] [ 0 ] - a1 , grid [ 0 ] [ 1 ] - a1 , grid [ 0 ] [ 2 ] - a1 if [ b1 , b2 , b3 ] . any? { | b | b < 0 } then next end if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 && grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 && grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 && grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 then flag = true break end end puts flag ? ' Yes ' : ' No '
a = [ gets . to_i ] a << gets . to_i a << gets . to_i a << gets . to_i a << gets . to_i k = gets . to_i puts a . combination ( 2 ) . to_a . all? { | ( x , y ) | ( x - y ) . abs <= k } ? ' Yay! ' : ' :( '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if b - a > k then puts " :( " elsif c - a > k then puts " :( " elsif d - a > k then puts " :( " elsif e - a > k then puts " :( " elsif c - b > k then puts " :( " elsif d - b > k then puts " :( " elsif e - b > k then puts " :( " elsif d - c > k then puts " :( " elsif e - c > k then puts " :( " elsif e - d > k then puts " :( " else puts " Yay! " end
n = gets . to_i ans = 1 0 . upto ( 6 ) do | i | ans = 2 ** i if 2 ** i <= n end puts ans
array = gets . split . map ( & :to_i ) def factorization ( m ) ary = [ ] s = Math . sqrt ( m . to_f ) . to_i for i in ( 2 .. s ) r = 0 while m % i == 0 m = m / i r += 1 end unless r == 0 ary . push ( [ i , r ] ) end end if ( m > s ) ary . push ( [ m , 1 ] ) end return ary end n = array [ 0 ] p = array [ 1 ] factor_s = factorization ( p ) ans = 1 factor_s . each { | fs | while fs [ 1 ] >= n ans *= fs [ 0 ] fs [ 1 ] -= n end } p ans
c = [ ] 3 . times do c << gets . chomp . split . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in 0 .. 2 for j in 0 .. 2 if c [ i ] [ j ] != a [ i ] + b [ j ] puts ' No ' exit end end end puts ' Yes '
require ' prime ' n , q = gets . split . map ( & :to_i ) ans = 1 q . prime_division . each { | k , v | ans *= k ** ( v / n ) } p ans
ks = gets . chomp . split k = ks [ 0 ] . to_i s = ks [ 1 ] . to_i count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - ( x + y ) count += 1 if 0 <= z && z <= k end end puts count
N = gets . to_i a = case N % 4 when 0 , 2 [ N / 2 , N , N ] when 1 a = 4 r / N ( N / 4 + 1 ) . upto ( 3500 ) { | i | b = a - 1 r / i i . upto ( 3500 ) { | j | c = b - 1 r / j if c . numerator == 1 puts [ i , j , c . denominator ] * ?\s exit end } } when 3 g = N / 4 + 1 [ g , N * g + 1 , N * g * ( N * g + 1 ) ] end puts a * ?\s
puts gets . split . sort . join == " 1479 " ? " YES " : " NO "
n = gets . to_i p = gets . split . map ( & :to_i ) min = 10 ** 6 count = 0 n . times do | i | if min > p [ i ] count += 1 min = p [ i ] end end puts count
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) end end puts count
N = gets . to_i Ss = gets . split puts Ss . any? { | s | s == ' Y ' } ? ' Four ' : ' Three '
line = gets line . chomp! a = line . to_i line = gets line . chomp! b = line . to_i line = gets line . chomp! c = line . to_i line = gets line . chomp! d = line . to_i line = gets line . chomp! e = line . to_i line = gets line . chomp! k = line . to_i if ( e - a <= k ) print " Yay! " else print " :( " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
N = gets . to_i ans = 1 for i in 2 .. N do if i % ans == 0 ans = i end end puts ans
def inpf ( ) a = gets . chomp . split ( " " ) . map ( & :to_f ) end def inps ( ) a = gets . chomp . split ( " " ) end def copy ( a ) Marshal . load ( Marshal . dump ( a ) ) end def kaijo ( n , r = 10 ** 9 + 7 ) ( n < 2 ) ? 1 : ( 2 .. n ) . inject { | memo , u | memo = ( memo * u ) % r } end def na ( n , d = 0 ) Array . new ( n , d ) end def na2 ( n , m , d = 0 ) Array . new ( n ) { Array . new ( m , d ) } end def na3 ( n , m , l , d = 0 ) Array . new ( n ) { Array . new ( m ) { Array . new ( l , d ) } } end def inp ( ) a = gets . chomp . split ( " " ) . map ( & :to_i ) end def r_up ( a , b ) ( a + b - 1 ) / b end def sum ( a ) a . inject ( :+ ) end n = inp [ 0 ] s = inps h = { } ans = 0 s . each do | c | if ( h [ c ] == nil ) h [ c ] = true ans += 1 end end puts ( ans < 4 ) ? " Three " : " Four "
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] puts " Yes " else puts " No " end
io = STDIN n = io . gets . to_i def calc ( x ) cnt = 0 while ( x . even? ) x /= 2 cnt += 1 end cnt end max = 0 ar = ( 1 .. n ) . to_a . map do | x | [ x , calc ( x ) ] end . to_a . max_by { | x , c | c } puts ar [ 0 ]
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
def ascan ; gets . split . map ( & :to_i ) ; end field = ( 0 .. 2 ) . map { ascan } ok = true 2 . times do | y | 2 . times do | x | ok &= field [ y ] [ x + 1 ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y + 1 ] [ x ] end end 2 . times do | x | 2 . times do | y | ok &= field [ y + 1 ] [ x ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y ] [ x + 1 ] end end puts ok ? " Yes " : " No "
c = [ ] 3 . times { c << gets . split . map ( & :to_i ) } if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] puts " Yes " else puts " No " end
board = Array . new ( 3 ) do gets . split . map ( & :to_i ) end delta = Array . new ( 4 ) do Array . new end 3 . times do | i | 3 . times do | j | if i + 1 < 3 then delta [ i ] << board [ i + 1 ] [ j ] - board [ i ] [ j ] end if j + 1 < 3 then delta [ 2 + j ] << board [ i ] [ j + 1 ] - board [ i ] [ j ] end end end delta . each do | a | if a . uniq . length != 1 then puts " No " exit 0 end end puts " Yes "
n = gets . to_i a = [ ] n . times do | i | a << gets . to_i end min = 1 ans = 0 n . times do | i | if i == 0 ans += a [ 0 ] - 1 min = 2 else if a [ i ] < min next elsif a [ i ] == min min += 1 else if a [ i ] % min == 0 ans += a [ i ] / min - 1 else ans += a [ i ] / min end end end end puts ans
n , m = gets . chomp . split ( " " ) . map ( & :to_i ) @k = 10 ** 9 + 7 def fact ( n ) ret = 1 n . downto ( 1 ) do | i | ret *= i % @k ret %= @k end return ret end if n == m then puts 2 * fact ( n ) ** 2 % @k elsif n + 1 == m || n == m + 1 then puts fact ( n ) * fact ( m ) % @k else puts 0 end
N = gets . to_i P = gets . split . map ( & :to_i ) min = Float :: INFINITY count = 0 N . times do | i | unless P [ i ] > min count += 1 min = P [ i ] end end puts count
arr = [ ] 5 . times do | i | arr << gets . to_i end k = gets . to_i sa = arr [ - 1 ] - arr [ 0 ] puts sa <= k ? " Yay! " : " :( "
k , s = gets . split . map ( & :to_i ) sum = 0 0 . upto ( k ) do | i | 0 . upto ( [ k , s - i ] . min ) do | j | sum += 1 if s - i - j <= k end end p sum
n = gets . to_i pontas = gets . split . map ( & :to_i ) answer = 0 minimum = pontas [ 0 ] pontas . each do | ponta | answer += 1 if ponta <= minimum minimum = ponta if minimum > ponta end puts answer
a = 3 . times . map { gets . split . map ( & :to_i ) } . sort . transpose . sort . transpose yes = 2 . times . all? do a = a . transpose 2 . times . all? do | i | a [ i ] [ 1 ] - a [ i ] [ 0 ] == a [ i + 1 ] [ 1 ] - a [ i + 1 ] [ 0 ] && a [ i ] [ 2 ] - a [ i ] [ 1 ] == a [ i + 1 ] [ 2 ] - a [ i + 1 ] [ 1 ] end end puts yes ? " Yes " : " No "
n = gets . to_i pp = gets . split . map ( & :to_i ) ans = 0 min = n + 1 n . times do | i | if min > pp [ i ] ans += 1 min = pp [ i ] end end puts ans
antena = [ ] for i in 0 .. 4 do antena [ i ] = gets . chomp . to_i end k = gets . chomp . to_i if antena [ 4 ] - antena [ 0 ] > k print ( " :( \n " ) else print ( " Yay! \n " ) end
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | t = s - i - j if 0 <= t && t <= k cnt += 1 end end end puts cnt
c = 3 . times . map { gets . split . map ( & :to_i ) } if ( c [ 0 ] . map { | ci | ci - c [ 0 ] [ 0 ] } == c [ 1 ] . map { | ci | ci - c [ 1 ] [ 0 ] } ) && ( c [ 0 ] . map { | ci | ci - c [ 0 ] [ 0 ] } == c [ 2 ] . map { | ci | ci - c [ 2 ] [ 0 ] } ) && ( c . transpose [ 0 ] . map { | ci | ci - c . transpose [ 0 ] [ 0 ] } == c . transpose [ 1 ] . map { | ci | ci - c . transpose [ 1 ] [ 0 ] } ) && ( c . transpose [ 0 ] . map { | ci | ci - c . transpose [ 0 ] [ 0 ] } == c . transpose [ 2 ] . map { | ci | ci - c . transpose [ 2 ] [ 0 ] } ) puts ' Yes ' else puts ' No ' end
A = 5 . times . map { gets . to_i } K = gets . to_i puts A [ 4 ] - A [ 0 ] <= K ? " Yay! " : " :( "
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a . max + 1 a . each do | v | min >= v && ( min = v and cnt += 1 ) end puts cnt
n = gets . to_i a = 1 if n == 1 puts 1 else while true if a * 2 > n puts a break end a *= 2 end end
antennas = [ ] 5 . times do antennas << gets . chomp . to_i end k = gets . chomp . to_i min = antennas . min def determine ( antennas , min , k ) return ' Yay! ' if antennas . empty? max = antennas . delete ( antennas . max ) return ' :( ' if max - min > k determine ( antennas , min , k ) end puts determine ( antennas , min , k )
gets r = gets . to_i - 1 x = 2 $< . each { | _ | e = _ . to_i if e == x x += 1 end r += ( e - 1 ) / x } p r
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? " :( " : " Yay! "
input = readlines input . each { | num | num = num . chomp! } i = input . length stat = " 0 " if input [ i - 1 ] . to_i < ( input [ i - 2 ] . to_i - input [ 0 ] . to_i ) print " :( " else print " Yay! " end
k , s = gets . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | cnt += 1 if s - x - y <= k && s - x - y >= 0 end end puts cnt
io = STDIN n = io . gets . to_i P = io . gets . split . map ( & :to_i ) cnt = 0 rm = [ ] min = P [ 0 ] n . times do | i | min = [ min , P [ i ] ] . min rm [ i ] = min end n . times do | i | cnt += 1 if P [ i ] <= rm [ i ] end p cnt
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) if ( t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] == t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] ) puts " infinity " exit end if ( a [ 0 ] > b [ 0 ] ) a , b = b , a end u = t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] v = t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] if ( v > u ) puts 0 exit end ok = 0 ng = 2 ** 62 while ( ng - ok > 1 ) mid = ( ok + ng ) / 2 ; if ( mid * u + t [ 0 ] * a [ 0 ] < mid * v + t [ 0 ] * b [ 0 ] ) ok = mid else ng = mid end end ans = ok * 2 + 1 if ng * u + t [ 0 ] * a [ 0 ] == ng * v + t [ 0 ] * b [ 0 ] ans += 1 end puts ans
a = gets . to_i for i in 1 .. 3 ; gets ; end e = gets . to_i k = gets . to_i puts e - a <= k ? ' Yay! ' : ' :( '
word = gets . split seven_count = 0 five_count = 0 word . each do | w | seven_count += 1 if w == " 7 " five_count += 1 if w == " 5 " end if seven_count == 1 and five_count == 2 puts " YES " else puts " NO " end
N = gets . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 min = P [ 0 ] P . each_with_index do | x , i | if i == 0 count += 1 elsif min >= x min = x count += 1 end end puts "
def main ( argv ) ns = gets . chomp . split ( ' ' ) . map ( & :to_i ) . sort puts ( ns == [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ) end if self . to_s == ' main ' then main ( ARGV ) end
n , num = gets . chomp . split ( " " ) . map ( & :to_i ) if num == 1 puts 1 exit elsif n == 1 puts num exit end require ' prime ' ary = Prime . prime_division ( num ) c = 1 ary . each do | a | if a [ 1 ] >= n ii = a [ 1 ] / n c = c * a [ 0 ] ** ii end end puts c
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) ; min = 10 ** 6 + 1 count = 0 ps . each do | p | if min > p min = p count += 1 end end puts count
g = Array . new ( 3 ) do t = gets . strip . split ( " " ) . map ( & :to_i ) [ t [ 0 ] - t [ 1 ] , t [ 0 ] - t [ 2 ] ] end if g [ 0 ] == g [ 1 ] && g [ 1 ] == g [ 2 ] puts " Yes " else puts " No " end
n = gets . to_i nums = gets . split . map ( & :to_i ) min = 300_000 ans = [ ] nums . each_with_index do | num , i | if num <= min min = num ans << i end end puts ans . size
n = gets . chomp . to_i m = n . downto ( 1 ) . to_a . map { | i | c = 0 j = i loop { k = j / 2 if j != 2 * k break end j = k c += 1 } [ c , i ] } . max_by { | t | t [ 0 ] } puts m [ 1 ]
c0 = gets . chomp . split ( " " ) . map ( & :to_i ) c1 = gets . chomp . split ( " " ) . map ( & :to_i ) c2 = gets . chomp . split ( " " ) . map ( & :to_i ) a01 = c0 [ 0 ] - c0 [ 1 ] a02 = c0 [ 0 ] - c0 [ 2 ] a12 = c0 [ 1 ] - c0 [ 2 ] if c1 [ 0 ] - c1 [ 1 ] != a01 then puts " No " exit end if c1 [ 0 ] - c1 [ 2 ] != a02 then puts " No " exit end if c1 [ 1 ] - c1 [ 2 ] != a12 then puts " No " exit end if c2 [ 0 ] - c2 [ 1 ] != a01 then puts " No " exit end if c2 [ 0 ] - c2 [ 2 ] != a02 then puts " No " exit end if c2 [ 1 ] - c2 [ 2 ] != a12 then puts " No " exit end b01 = c0 [ 0 ] - c1 [ 0 ] b02 = c0 [ 0 ] - c2 [ 0 ] b12 = c1 [ 0 ] - c2 [ 0 ] if c0 [ 1 ] - c1 [ 1 ] != b01 then puts " No " exit end if c0 [ 1 ] - c2 [ 1 ] != b02 then puts " No " exit end if c1 [ 1 ] - c2 [ 1 ] != b12 then puts " No " exit end if c0 [ 2 ] - c1 [ 2 ] != b01 then puts " No " exit end if c0 [ 2 ] - c2 [ 2 ] != b02 then puts " No " exit end if c1 [ 2 ] - c2 [ 2 ] != b12 then puts " No " exit end puts " Yes "
MOD = 10 ** 9 + 7 n , m = gets . split ( / / ) . collect { | x | x . to_i } xs = gets . split ( / / ) . collect { | x | x . to_i } ys = gets . split ( / / ) . collect { | x | x . to_i } len_x = 0 ( n - 1 ) . times { | i | len_x = ( len_x + ( xs [ i + 1 ] - xs [ i ] ) * ( i + 1 ) * ( n - i - 1 ) ) % MOD } len_y = 0 ( m - 1 ) . times { | i | len_y = ( len_y + ( ys [ i + 1 ] - ys [ i ] ) * ( i + 1 ) * ( m - i - 1 ) ) % MOD } puts ( len_x * len_y ) % MOD
N = gets . to_i P = gets . split . map ( & :to_i ) min = P [ 0 ] cnt = 0 N . times do | i | if P [ i ] <= min cnt += 1 min = P [ i ] end end puts cnt
N = gets . to_i P = gets . split . map ( & :to_i ) min = 1 << 60 ans = 0 P . each do | n | if n <= min ans += 1 end min = n if n < min end puts ans
n = gets . to_i a = gets . split . map ( & :to_i ) min = a [ 0 ] + 1 sum = 0 a . each do | i | if i <= min sum += 1 min = i end end p sum
def solve ( c ) 2 . times do | i | d = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] 1 . upto ( 2 ) do | j | if c [ i + 1 ] [ j ] - c [ i ] [ j ] != d return false end end end 2 . times do | j | d = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] 1 . upto ( 2 ) do | i | if c [ i ] [ j + 1 ] - c [ i ] [ j ] != d return false end end end return true end c = Array . new ( 3 ) 3 . times do | i | c [ i ] = gets . split . map ( & :to_i ) end puts solve ( c ) ? " Yes " : " No "
require ' pp ' n = gets . chomp! . to_i s_n = gets . chomp! . split ( " " ) puts s_n . group_by { | s | s } . length == 4 ? ' Four ' : ' Three '
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) i = 0 c = 0 while i <= k j = 0 while j <= k l = s - i - j c += 1 if l >= 0 && l <= k j += 1 end i += 1 end p c
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts ' Yay! ' else puts ' :( ' end
c = [ ] 3 . times do | i | c [ i ] = $stdin . gets . chomp . split ( ' ' ) . map ( & :to_i ) end 2 . times do | i | unless ( 0 .. 2 ) . map { | j | c [ j ] [ 2 ] - c [ j ] [ i ] } . uniq . length == 1 print ' No ' exit end unless ( 0 .. 2 ) . map { | j | c [ 2 ] [ j ] - c [ i ] [ j ] } . uniq . length == 1 print ' No ' exit end end print ' Yes '
N , M = gets . strip . split ( / / ) . collect { | n | n . to_i } X = 10 ** 9 + 7 def p ( n ) ret = 1 ( 1 .. n ) . each { | i | ret = ( ret * i ) % X } ret end if N == M puts ( p ( N ) * p ( M ) * 2 ) % X elsif N + 1 == M || N == M + 1 puts ( p ( N ) * p ( M ) ) % X else puts " 0 " end
k , s = gets . split . map & :to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if x + y <= s && s - x - y <= k end end puts cnt
a = 6 . times . map { gets . to_i } if a [ 4 ] - a [ 0 ] > a [ 5 ] puts " :( " else puts " Yay! " end
a = [ ] 5 . times do | i | a [ i ] = gets . to_i end k = gets . to_i dis = [ ] 5 . times do | i | 5 . times do | j | dis . push ( ( a [ i ] - a [ j ] ) . abs ) end end success = true dis . each do | d | if d > k then puts " :( " success = false break end end puts ' Yay! ' if success
N = gets . to_i ans = 1 while 2 ** ans <= N ans += 1 end puts 2 ** ( ans - 1 )
N = gets . to_i a = ( 0 .. 6 ) . map { | i | 2 ** i } p a . select { | i | i <= N } . last
inputs = [ ] 5 . times do inputs << gets . chomp . to_i end k = gets . chomp . to_i puts inputs [ - 1 ] - inputs [ 0 ] > k ? " :( " : " Yay! "
n , p = gets . chomp . split . map ( & :to_i ) if n == 1 p p exit end if p == 1 p 1 exit end i = 0 while true if ( i + 1 ) ** n > p break end i += 1 end i . downto ( 1 ) do | u | if p % ( u ** n ) == 0 p u exit end end
a , b , c , d , e , k = readlines . map ( & :to_i ) ps = [ a , b , c , d , e ] if ps . max - ps . min <= k puts ' Yay! ' else puts ' :( ' end
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if z . between? ( 0 , k ) end end puts cnt
group = [ ] multi = 0 i = 0 cnt = 0 while multi < 100 do multi = 2 ** i group [ i ] = multi i += 1 end num = gets . to_i group . each do | value | if num < value p ( group [ cnt - 1 ] ) break else cnt += 1 end end
n = gets . chomp . to_i a = gets . chomp . split . map ( & :to_i ) b = gets . chomp . split . map ( & :to_i ) if b . sum > a . sum then puts - 1 exit end plus = [ ] minus = [ ] n . times do | i | tmp = a [ i ] - b [ i ] if tmp > 0 then plus << tmp elsif tmp < 0 then minus << tmp end end if minus . empty? then puts 0 exit end plus . sort! minus . sort! ans = 0 tmp = 0 until minus . empty? && tmp >= 0 if tmp == 0 then tmp = minus . shift + plus . pop ans += 2 elsif tmp > 0 then tmp += minus . shift ans += 1 else tmp += plus . pop ans += 1 end end puts ans
ae = [ ] 5 . times { ae << gets . to_i } k = gets . to_i puts ae [ 4 ] - ae [ 0 ] > k ? ' :( ' : ' Yay! '
ns = 5 . times . map { gets . to_i } . sort k = gets . to_i puts ns [ 4 ] - ns [ 0 ] > k ? " :( " : " Yay! "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
k , s = STDIN . readline . strip . split ( ' ' ) . map ( & :to_i ) sum = 0 ( 0 .. k ) . each do | a | rest_a = s - a ( 0 .. k ) . each do | b | rest_b = rest_a - b next if rest_b < 0 or rest_b > k c = rest_b sum += 1 end end puts sum
n = gets . to_i ar = gets . chomp . split if ar . uniq . count == 3 puts " Three " else puts " Four " end
grids = 3 . times . map { gets . split ( ' ' ) . map ( & :to_i ) } flag = false ( 0 .. grids . max . max ) . each do | i | a1 = i b1 = grids [ 0 ] [ 0 ] - a1 a2 = grids [ 1 ] [ 0 ] - b1 a3 = grids [ 2 ] [ 0 ] - b1 b2 = grids [ 0 ] [ 1 ] - a1 b3 = grids [ 0 ] [ 2 ] - a1 if a1 >= 0 && a2 >= 0 && a3 >= 0 && b1 >= 0 && b2 >= 0 && b3 >= 0 && grids [ 1 ] [ 1 ] == a2 + b2 && grids [ 1 ] [ 2 ] == a2 + b3 && grids [ 2 ] [ 1 ] == a3 + b2 && grids [ 2 ] [ 2 ] == a3 + b3 flag = true puts " Yes " break end end puts " No " unless flag
a , b , c , d , e , k = gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i result = [ ] result << ( a - b ) . abs result << ( a - c ) . abs result << ( a - d ) . abs result << ( a - e ) . abs result << ( b - c ) . abs result << ( b - d ) . abs result << ( b - e ) . abs result << ( c - d ) . abs result << ( c - e ) . abs result << ( d - e ) . abs i = 0 while result . size != i if result [ i ] <= k else puts " :( " exit end i += 1 end puts " Yay! " exit
antainers = ( 1 .. 5 ) . map { gets . to_i } k = gets . to_i if antainers [ - 1 ] - antainers [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
n = gets . chomp . split . sort . join puts n == " 1479 " ? " YES " : " NO "
c = [ ] while s = gets c . push ( s . split . map ( & :to_i ) ) end if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) puts " No " exit elsif ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) || ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) puts " No " exit elsif ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) puts " No " exit elsif ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ) || ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) puts " No " exit end puts " Yes "
c = Array . new ( 3 ) { Array . new ( 3 ) } 3 . times do | i | c [ i ] = gets . chomp . split ( " " ) . map ( & :to_i ) end a = [ ] b = [ ] a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] equal_c = true 3 . times do | i | 3 . times do | j | equal_c = false if a [ i ] + b [ j ] != c [ i ] [ j ] end end if equal_c puts " Yes " else puts " No " end
gets puts gets . index ( ' Y ' ) ? " Four " : " Three "
arr = Array . new ( 5 ) 5 . times do | i | arr [ i ] = gets . chomp . to_i end k = gets . chomp . to_i puts arr . max - arr . min > k ? " :( " : " Yay! "
n = gets . to_i pn = gets . strip . split . map ( & :to_i ) min = n + 1 count = 0 pn . each do | p | min = [ min , p ] . min count += 1 if p > min end puts n - count
n = gets . to_i l = 6 . downto ( 0 ) . map { | i | 2 ** i } puts l . detect { | i | n >= i }
N , P = gets . split . map & :to_i require ' prime ' c = 1 Prime . prime_division ( P ) . each { | x | if x [ 1 ] >= N then c *= x [ 0 ] ** ( x [ 1 ] / N ) end } p c
puts ` awk '$0=++a[$1-$2,$2-$3]' ` [ ?3 ] ? :Yes : :No
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans , mn = 0 , 10 ** 6 Ps . each do | p | next if p > mn ans += 1 mn = p end puts ans
n = gets . to_i a = 1 while a * 2 <= n do a *= 2 end print a
str = gets . split T1 , T2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split a1 , a2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split b1 , b2 = str [ 0 ] . to_i , str [ 1 ] . to_i if T1 * a1 + T2 * a2 == T1 * b1 + T2 * b2 puts " infinity " exit end if ( a1 - b1 ) * ( a2 - b2 ) > 0 puts 0 exit end if a1 < b1 swap = a1 a1 = b1 b1 = swap swap = a2 a2 = b2 b2 = swap end if a1 * T1 + a2 * T2 > T1 * b1 + T2 * b2 puts 0 exit end dif1 = T1 * a1 - b1 * T1 dif2 = T1 * b1 + T2 * b2 - a1 * T1 - a2 * T2 answer = ( dif1 / dif2 ) * 2 + 1 if dif1 % dif2 == 0 answer -= 1 end puts answer
arr = [ ] 6 . times do arr . push ( gets . to_i ) end puts arr [ 4 ] - arr [ 0 ] > arr [ 5 ] ? " :( " : " Yay! "
d = readlines . map ( & :to_i ) puts d [ 4 ] - d [ 0 ] <= d [ 5 ] ? " Yay! " : " :( "
N = gets . to_i max_num = 0 res = 1 [ * 1 .. N ] . each do | n | num = 0 x = n loop do break if x % 2 != 0 num += 1 x /= 2 end if max_num < num then max_num = num res = n end end puts res
k , s = gets . chomp . split . map ( & :to_i ) res = 0 ( 0 .. [ k , s ] . min ) . each do | x | ( 0 .. [ k , s - x ] . min ) . each do | y | res += 1 if s - x - y <= k end end puts res
def solution k , s = gets . split ( ' ' ) . map ( & :to_i ) answer = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y answer += 1 if ( 0 .. k ) . include? ( z ) end end answer end puts solution
N = gets . to_i nums = gets . split . map ( & :to_i ) min = Float :: INFINITY cnt = 0 nums . each do | pi | if pi < min min = pi cnt += 1 end end p cnt
n = gets . to_i m = 2 ans = gets . to_i - 1 ( n - 1 ) . times do a = gets . to_i if a > m ans += ( a - 1 ) / m elsif a == m m += 1 end end puts ans
A = gets . to_i gets . to_i gets . to_i gets . to_i E = gets . to_i puts ( E - A ) <= gets . to_i ? ' Yay! ' : ' :( '
n = gets . to_i result = nil 3500 . times do | i | h = i + 1 3500 . times do | j | w = j + 1 p = w * h s = w + h bunshi = n * p bunbo = 4 * p - n * s if bunshi >= bunbo && bunbo > 0 && bunshi % bunbo == 0 result = [ h , w , bunshi / bunbo ] end break unless result . nil? end break unless result . nil? end puts result . join ( " " )
k , s = gets . split ( ' ' ) . map ( & :to_i ) ans = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y ans += 1 if z >= 0 && z <= k end end p ans
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) min_num = n + 1 count = 0 n . times do | i | if array [ i ] < min_num count += 1 min_num = array [ i ] end end puts count
N = gets . to_i S = gets . split puts S . include? ( " Y " ) ? " Four " : " Three "
a = gets . to_i b = gets . split . uniq puts b . size == 3 ? " Three " : " Four "
n = gets . to_i P_arr = gets . chomp . split . map ( & :to_i ) counter = 0 P_max = P_arr . max n . times do | i | if P_max >= P_arr [ i ] counter += 1 P_max = P_arr [ i ] end end p counter
numbers = [ ] 3 . times { numbers << gets . split . map ( & :to_i ) } def deduct_minimum ( ary ) ary . each_with_index do | row , index | min = row . min row . each_with_index do | num , index2 | ary [ index ] [ index2 ] -= min end end ary end numbers = deduct_minimum ( numbers ) numbers = deduct_minimum ( numbers . transpose ) puts numbers . flatten . inject ( :+ ) == 0 ? " Yes " : " No "
N = gets . to_f ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | w = ( N * h * n ) / ( 4 * h * n - N * ( n + h ) ) if w > 0 && w % 1 == 0 puts " exit 0 end end end
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] && c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] puts " Yes " else puts " No " end
n = gets . chomp . to_i pp = gets . chomp . split ( ) . map ( & :to_i ) i = 0 count = 0 min = [ ] while true if i == 0 min . push ( pp [ i ] ) else if min [ ( i - 1 ) ] > pp [ i ] min . push ( pp [ i ] ) else min . push ( min [ i - 1 ] ) end end i += 1 if i == n break end end j = 0 while true q = pp [ j ] if min [ j ] >= q count += 1 end j += 1 if j == n break end end print count
def f k , s ; s <= k ? ( s + 1 ) * ( s + 2 ) / 2 : s >= 2 * k ? ( 3 * k - s + 1 ) * ( 3 * k - s + 2 ) / 2 : ( 3 * ( k + 1 ) * ( k + 1 ) + 1 - ( k * 3 - s * 2 ) ** 2 ) / 4 end eval " p f " + ` tr ' ' , `
module HinaArare def solve ( s ) for i in 1 .. s . size do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare gets s = gets . split ( " " ) puts solve ( s )
class InputLine def self . to_s gets . chomp end def self . to_i InputLine . to_s . to_i end def self . to_f InputLine . to_s . to_f end def self . to_sa InputLine . to_s . split ( ' ' ) end def self . to_ia InputLine . to_sa . map ( & :to_i ) end def self . to_fa InputLine . to_sa . map ( & :to_f ) end end def main ( argv ) n = InputLine . to_i x = InputLine . to_ia a = [ 1e+8 . to_i ] * ( n + 1 ) n . times do | i | a [ i + 1 ] = [ x [ i ] , a [ i ] ] . min end c = 0 n . times do | i | c += 1 if a [ i ] > x [ i ] end puts c . to_s end if self . to_s == ' main ' then main ( ARGV ) end
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
gets puts gets . include? ( ?Y ) ? :Four : :Three
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
a , b , c , d , e , k = 6 . times . map { gets . to_i } numbers = [ a , b , c , d , e ] if numbers . max - numbers . min <= k puts " Yay! " else puts " :( " end
a = gets puts gets . split . uniq . size == 3 ? " Three " : " Four " ;
require ' prime ' ; n , x = gets . split . map & :to_i ; p x . prime_division . map { | m , k | m ** ( k / n ) } . reduce 1 , :*
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( x + y <= s && s - x - y <= k ) end end puts cnt
T1 , T2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) A1 , A2 , B1 , B2 = a1 > b1 ? [ a1 , a2 , b1 , b2 ] : [ b1 , b2 , a1 , a2 ] XA = A1 * T1 + A2 * T2 XB = B1 * T1 + B2 * T2 if XA > XB ans = " 0 " elsif XA == XB ans = " infinity " else XM = ( A1 - B1 ) * T1 ans = ( XM / ( XB - XA ) * 2 + ( XM %( XB-XA ) == 0 ? 0 : 1 ) ) . to_s end puts ans
_ = gets . to_i arare = gets . chomp . split case arare . uniq . size when 3 then puts " Three " when 4 then puts " Four " end
n = gets . chomp . to_i divide_counts = [ ] 1 . upto ( n ) do | i | count = 0 while i . even? count += 1 i / = 2 end divide_counts . push ( count ) end puts divide_counts . index ( divide_counts . max ) + 1
t = 1 ; gets . split . zip ( $< ) { | m , x | s , m = 0 , ~ m . to_i ; x . split . map { | k | s += k . to_i * m += 2 } ; t *= s } ; p t . % 10 ** 9 + 7
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
h , w = gets . chomp . split . map ( & :to_i ) a = [ ] h . times { a << gets . chomp . split . map ( & :to_i ) } min = nil for y in 0 ... h for x in 0 ... w dist = 0 for y2 in 0 ... h for x2 in 0 ... w dist += [ ( y2 - y ) . abs , ( x2 - x ) . abs ] . min * a [ y2 ] [ x2 ] end end min = dist if min . nil? || min > dist end end puts min
n = gets . to_i puts gets . chomp . split ( " " ) . count ( " Y " ) > 0 ? :Four : :Three
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ; cnt = 0 for a in 0 .. k do break if a > s for b in 0 .. k do break if ( a + b ) > s z = s - ( a + b ) cnt += 1 if ( 0 <= z && z <= k ) && a + b + z = s end end puts cnt
n = gets . to_i s = gets . chomp . split ( " " ) a = s . count { | color | color == " Y " } if a != 0 puts " Four " else puts " Three " end
K , S = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. K for y in 0 .. K z = S - ( x + y ) if 0 <= z && z <= K count += 1 end end end print ( count )
K , S = gets . split . map ( & :to_i ) cnt = 0 min_x = [ 0 , S - 2 * K ] . max max_x = [ K , S ] . min min_x . upto ( max_x ) do | i | rest = S - i if rest <= K cnt += rest + 1 else cnt += K - ( rest - K ) + 1 end end puts cnt
arr = [ ] 5 . times do | i | a = gets . chomp . to_i arr << a end k = gets . chomp . to_i kkk = [ ] arr . each do | f | arr . each do | k | kkk << ( f - k ) . abs end end until kkk == [ ] aaa = kkk . pop if aaa > k puts " :( " exit end end puts " Yay! "
a = [ ] 6 . times { a << gets . to_i } k = a . last if a [ 4 ] - a [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
c = [ ] 3 . times do c << gets . split . map ( & :to_i ) end if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] puts " Yes " else puts " No " end
K , S = gets . chomp . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | if 0 <= S - x - y && S - x - y <= K cnt += 1 end end end puts cnt
gets puts gets . count ( ' Y ' ) != 0 ? ' Four ' : ' Three '
a = 3 . times . map { gets . split . map ( & :to_i ) } yes = 2 . times . all? do a = a . transpose 2 . times . all? do | i | a [ i ] [ 1 ] - a [ i ] [ 0 ] == a [ i + 1 ] [ 1 ] - a [ i + 1 ] [ 0 ] && a [ i ] [ 2 ] - a [ i ] [ 1 ] == a [ i + 1 ] [ 2 ] - a [ i + 1 ] [ 1 ] end end puts yes ? " Yes " : " No "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
as = gets . split . map ( & :to_i ) . sort ; puts ( as == [ 5 , 5 , 7 ] ) ? ' YES ' : ' NO '
arg = gets . chomp arg = arg . split ( " " ) k = arg [ 0 ] . to_i s = arg [ 1 ] . to_i numPettern = 0 if k * 3 == s puts 1 exit end ( 0 .. k ) . each do | x | if x + k + k < s next end if x == s numPettern += 1 next end ( 0 .. k ) . each do | y | if x + y + k < s next end if x + y > s break end if x + y == s numPettern += 1 break end z = s - x - y if z <= s numPettern += 1 end end end puts numPettern
n = gets . to_i array = gets . chop . split . map ( & :to_i ) count = 0 tmp = array [ 0 ] array . each do | num | if tmp > num tmp = num end if tmp >= num count += 1 end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) ans += 1 if z >= 0 && z <= k end end puts ans
N , M = gets . split . map ( & :to_i ) mod = 10 ** 9 + 7 def fact ( n ) mod = 10 ** 9 + 7 ( 1 .. n ) . inject ( 1 ) { | res , i | res * i % mod } end if ( N - M ) . abs > 1 puts 0 elsif N == M puts 2 * fact ( N ) * fact ( M ) % mod else puts fact ( N ) * fact ( M ) % mod end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
C = 3 . times . map { gets . chomp . split . map ( & :to_i ) } 3 . times do | i | m = C [ i ] . min 3 . times do | j | C [ i ] [ j ] -= m end end 3 . times do | i | if C [ 0 ] [ i ] != C [ 1 ] [ i ] || C [ 1 ] [ i ] != C [ 2 ] [ i ] puts ' No ' exit end end puts ' Yes '
k , s = gets . split . map ( & :to_i ) p ( [ 0 , s - k * 2 ] . max .. [ s , k ] . min ) . reduce ( 0 ) { | t , x | yz = s - x ; t + 1 + ( yz < k ? yz : k * 2 - yz ) }
n = gets . to_i s = 1 while s * 2 <= n s *= 2 end puts s
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
require ' prime ' N , P = gets . split . map ( & :to_i ) kou = Prime . prime_division ( P ) result = 1 kou . each do | p , f | result = p ** f . fdiv ( N ) . floor * result end puts result
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z <= k && z >= 0 ans += 1 end end end puts ans
grid = 3 . times . map { gets . split . map ( & :to_i ) } 0 . upto ( grid [ 0 ] [ 0 ] ) do | b1 | a1 = grid [ 0 ] [ 0 ] - b1 0 . upto ( grid [ 1 ] [ 1 ] ) do | b2 | a2 = grid [ 1 ] [ 1 ] - b2 next if a1 + b2 != grid [ 0 ] [ 1 ] next if a2 + b1 != grid [ 1 ] [ 0 ] 0 . upto ( grid [ 2 ] [ 2 ] ) do | b3 | a3 = grid [ 2 ] [ 2 ] - b3 next if a1 + b3 != grid [ 0 ] [ 2 ] next if a2 + b3 != grid [ 1 ] [ 2 ] next if a3 + b1 != grid [ 2 ] [ 0 ] next if a3 + b2 != grid [ 2 ] [ 1 ] puts ' Yes ' exit end end end puts ' No '
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if ( e - a ) <= k puts " Yay! " else puts " :( " end
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) counter = 0 b = a . max n . times do | i | if b >= a [ i ] counter += 1 b = a [ i ] end end p counter
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 xStart = ( s - 2 * k < 0 ) ? 0 : ( s - 2 * k ) xEnd = ( s < k ) ? s : k for x in xStart .. xEnd do yStart = ( s - x - k < 0 ) ? 0 : ( s - x - k ) yEnd = ( s < x + k ) ? ( s - x ) : k for y in yStart .. yEnd do z = s - x - y count += 1 if 0 <= z && z <= k end end puts count
N = gets . to_i S = gets . split if S . uniq . size == 3 puts " Three " else puts " Four " end
N = gets . to_i x = 3500 if 4 <= N n = N / 4 else n = 1 end n . upto ( x ) do | i | i . upto ( x ) do | j | r = Rational ( 4 * i * j - N * j - N * i , N * i * j ) if r . numerator == 1 puts [ i , j , r . denominator ] . join ( ' ' ) exit end end end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) dif = a . zip ( b ) . map { | aa , bb | aa - bb } . sort . reverse ans = 0 if i = dif . index { | x | x < 0 } minus = dif [ i .. - 1 ] . reduce ( :+ ) ans = - 1 ( 0 ... i ) . each do | j | minus += dif [ j ] if minus >= 0 ans = n - i + 1 + j break end end end puts ans
d , n = gets . split ( " " ) . map ( & :to_i ) t = Array . new ( d ) for i in 0 ... d t [ i ] = gets . to_i end a = Array . new ( n ) b = Array . new ( n ) c = Array . new ( n ) for i in 0 ... n a [ i ] , b [ i ] , c [ i ] = gets . split ( " " ) . map ( & :to_i ) end dp = Array . new ( n ) for i in 0 ... n if a [ i ] <= t [ 0 ] && t [ 0 ] <= b [ i ] dp [ i ] = 0 else dp [ i ] = - 1 end end for i in 1 ... d dpw = Array . new ( n , 0 ) for j in 0 ... n if a [ j ] <= t [ i ] && t [ i ] <= b [ j ] dpw [ j ] = 0 for k in 0 ... n if dp [ k ] >= 0 dpw [ j ] = [ dpw [ j ] , dp [ k ] + ( c [ k ] - c [ j ] ) . abs ] . max end end else dpw [ j ] = - 1 end end for j in 0 ... n dp [ j ] = dpw [ j ] end end all = 0 for i in 0 ... n all = [ all , dp [ i ] ] . max end print ( all , " \n " )
a = gets . split . map ( & :to_i ) . sort if a . sum == 17 if a [ 0 ] == 5 && a [ 1 ] == 5 puts ' YES ' else puts ' NO ' end else puts ' NO ' end
a = 5 . times . map { gets . to_i } k = gets . to_i puts a . combination ( 2 ) . all? { | x , y | ( x - y ) . abs <= k } ? ' Yay! ' : ' :( '
k , s = gets . split ( ' ' ) . map ( & :to_i ) puts ( k + 1 ) . times . map { | x | ( k + 1 ) . times . map { | y | s - x - y } . select { | z | 0 <= z && z <= k } . size } . inject ( & :+ )
a = [ 0 , 0 , 0 , 0 , 0 , 0 ] a . map! { STDIN . gets . to_i } if a [ 4 ] - a [ 0 ] > a [ 5 ] puts " :( " else puts " Yay! " end
N = gets . chomp . to_i a = Array . new ( N ) str = gets . split for i in 0 ... N do a [ i ] = str [ i ] . to_i end answer = 1 min = a [ 0 ] for i in 1 ... N do if a [ i ] < min min = a [ i ] answer += 1 end end puts answer
k , s = gets . split . map ( & :to_i ) cnt = 0 for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if z >= 0 && z <= k && s == x + y + z cnt += 1 end end end puts cnt
_ = $stdin . gets PX = $stdin . gets . chomp . split ( " " ) . map ( & :to_i ) . sort PY = $stdin . gets . chomp . split ( " " ) . map ( & :to_i ) . sort M = 1000000007 def msum ( xs ) i = 0 r = 0 while i < xs . size - 1 - i j = xs . size - 1 - i r = ( r + ( xs [ j ] - xs [ i ] ) * ( j - i ) ) % M i += 1 end r end puts ( ( msum ( PX ) % M ) * ( msum ( PY ) % M ) ) % M
d = [ ] 5 . times do d << gets . to_i end k = gets . to_i d . combination ( 2 ) do | c | if ( c [ 0 ] - c [ 1 ] ) . abs > k puts ' :( ' exit end end puts ' Yay! '
def array_sub ( left , right ) res = [ ] left . each_with_index do | num , i | res << num - right [ i ] end res end def contains_one ( array ) array . all? { | num | num == array [ 0 ] } end c1 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c2 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c3 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c_1 = [ c1 [ 0 ] , c2 [ 0 ] , c3 [ 0 ] ] c_2 = [ c1 [ 1 ] , c2 [ 1 ] , c3 [ 1 ] ] c_3 = [ c1 [ 2 ] , c2 [ 2 ] , c3 [ 2 ] ] subs = [ ] subs << array_sub ( c1 , c2 ) subs << array_sub ( c2 , c3 ) subs << array_sub ( c_1 , c_2 ) subs << array_sub ( c_2 , c_3 ) if subs . all? { | array | contains_one ( array ) } puts ' Yes ' else puts ' No ' end
n = gets . to_i max = 0 array = [ ] ( 1 .. n ) . each do | number | cnt = 0 while true if number % 2 == 0 number /= 2 cnt += 1 else break end end array . push ( cnt ) end p 2 ** array . max
a = gets . chomp! . to_i b = gets . chomp! . to_i c = gets . chomp! . to_i d = gets . chomp! . to_i e = gets . chomp! . to_i k = gets . chomp! . to_i if e - a > k then puts " :( " else puts " Yay! " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
N , M = gets . split . map & :to_i Mod = 10 ** 9 + 7 Xs = gets . split . map ( & :to_i ) Ys = gets . split . map ( & :to_i ) xx = ( 0 ... N - 1 ) . map { | i | Xs [ i + 1 ] - Xs [ i ] } yy = ( 0 ... M - 1 ) . map { | i | Ys [ i + 1 ] - Ys [ i ] } x = ( 0 ... xx . size ) . reduce ( 0 ) { | a , i | b = ( i + 1 ) * ( xx . size - i ) % Mod * xx [ i ] % Mod ( a + b ) % Mod } y = ( 0 ... yy . size ) . reduce ( 0 ) { | a , i | b = ( i + 1 ) * ( yy . size - i ) % Mod * yy [ i ] % Mod ( a + b ) % Mod } p x * y % Mod
N = gets . to_i A = gets . split puts A . include? ( " Y " ) ? " Four " : " Three "
k , s = gets . split . map ( & :to_i ) num = 0 ( 0 .. k ) . each do | i | a = s - i break if a < 0 ( 0 .. k ) . each do | j | b = a - j num += 1 if b >= 0 && b <= k end end puts num
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = 0 Ps . each_with_index do | n , i | min = n if ( min == 0 || n <= min ) ans += 1 if min >= n end puts ans
N = gets . to_i max_n = 1 max_cnt = 0 ( 1 .. N ) . each do | n | cnt = 0 tmp = n while tmp % 2 == 0 do tmp /= 2 cnt += 1 end if cnt > max_cnt max_n = n max_cnt = cnt end end p max_n
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i isok = ( ( [ a , b , c , d , e ] . max ( ) - [ a , b , c , d , e ] . min ( ) ) <= k ) if isok puts " Yay! " else puts " :( " end
def cin ; gets . split . map ( & :to_i ) end def cout ( * x ) ; puts x . join ( " " ) end a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k then puts ' Yay! ' exit end puts ' :( '
grid = [ ] 3 . times { grid << gets . split . map ( & :to_i ) } a1 = 0 b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 a2 = grid [ 1 ] [ 0 ] - b1 a3 = grid [ 2 ] [ 0 ] - b1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] res = ' Yes ' 3 . times do | i | 3 . times do | j | break res = ' No ' if grid [ i ] [ j ] != a [ i ] + b [ j ] end end puts res
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for i in 0 .. k for j in 0 .. k if s - i - j <= k && s - i - j >= 0 count += 1 end end end puts count
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts cnt
N = gets . split . map & :to_i ; if ( N . sort ) == [ 1 , 4 , 7 , 9 ] then puts " YES " else puts " NO " end
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) ex = [ ] lack = 0 ans = 0 n . times do | i | t = a [ i ] - b [ i ] ex << t if t > 0 if t < 0 lack += - t ans += 1 end end ex . sort! . reverse! ex . each do | v | if lack > 0 lack -= v ans += 1 end end p lack <= 0 ? ans : - 1
a = [ ] b = [ ] c = [ ] c [ 0 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } c [ 1 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } c [ 2 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } a [ 0 ] = 0 for j in 0 .. 2 b [ j ] = c [ 0 ] [ j ] end for i in 0 .. 2 a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end f = true for i in 0 .. 2 for j in 0 .. 2 f = false unless c [ i ] [ j ] == a [ i ] + b [ j ] end end if f puts " Yes " else puts " No " end
class Node attr_accessor :order , :parent , :child , :edges , :lowest , :visited , :isArticulation def initialize @order = nil @parent = - 1 @child = [ ] @edges = [ ] @lowest = nil @visited = false @isArticulation = false end end def dfs ( root , g ) t = 1 stack = [ ] g [ root ] . order = g [ root ] . lowest = t g [ root ] . visited = true stack << root while stack . size > 0 u = stack [ - 1 ] flag = true g [ u ] . edges . each { | x | if g [ x ] . visited == false t += 1 g [ x ] . order = g [ x ] . lowest = t g [ x ] . visited = true g [ x ] . parent = u g [ u ] . child << x flag = false g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . lowest ] . min stack << x break elsif x != g [ u ] . parent g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . order ] . min end } if flag stack . pop g [ u ] . child . each { | v | g [ u ] . lowest = [ g [ u ] . lowest , g [ v ] . lowest ] . min g [ u ] . isArticulation = true if ( u != root && g [ u ] . order <= g [ v ] . lowest ) if g [ u ] . order < g [ v ] . lowest if u < v $bridge << [ u , v ] else $bridge << [ v , u ] end end } end end g [ root ] . isArticulation = true if g [ root ] . child . size > 1 end $bridge = [ ] $t = 1 v , e = gets . split . map ( & :to_i ) graph = Array . new ( v ) { Node . new } e . times { s , t = gets . split . map ( & :to_i ) graph [ s ] . edges << t graph [ t ] . edges << s } dfs ( 0 , graph ) $bridge . sort . each { | a , b | puts " }
n , m , a , b , * d = $< . read . split . map ( & :to_i ) d = d . take_while { | e | e >= a } . reverse d = d . drop_while { | e | e <= b } if n - d . size < m p d . size
n = gets . to_i _p = gets . split . map ( & :to_i ) ans = 1 min = _p [ 0 ] if n != 1 for i in 1 .. n - 1 if min >= _p [ i ] ans += 1 min = _p [ i ] end end end puts ans
a = [ ] 5 . times do | i | a [ i ] = gets . to_i end k = gets . to_i check = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 if k < ( a [ i ] - a [ j ] ) . abs then check = false end end end if check then puts " Yay! " else puts " :( " end
$/ = ' ' ; k , s = $< . map & :to_i ; k += 1 ; p ( 0 ... k * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
io = STDIN n = io . gets . to_i s = io . gets . chomp . split ( " " ) if s . uniq . size == 4 puts ' Four ' else puts ' Three ' end
MOD = 1000000007 n , m = gets . split . map ( & :to_i ) . sort if m - n >= 2 p 0 elsif m - n == 1 ans = 1 1 . upto ( n ) do | x | ans = ans * x % MOD end ans = ans * ans * m % MOD p ans else ans = 1 1 . upto ( n ) do | x | ans = ans * x % MOD end ans = ans * ans * 2 % MOD p ans end
c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) c3 = gets . split . map ( & :to_i ) b1 = 1000 b2 = 1000 b3 = 1000 ans = 0 ( 0 .. 100 ) . each do | a1 | a2 = a1 - ( c1 [ 0 ] - c2 [ 0 ] ) a3 = a1 + ( c3 [ 0 ] - c1 [ 0 ] ) if a2 < 0 || a3 < 0 || a2 > 100 || a3 > 100 next else b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if b1 < 0 || b2 < 0 || b3 < 0 || b1 > 100 || b2 > 100 || b3 > 100 next else score = [ [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ] c22 = c2 [ 1 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 1 ] c32 = c3 [ 1 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 1 ] c23 = c2 [ 2 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 2 ] c33 = c3 [ 2 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 2 ] if c22 && c32 && c23 && c33 ans += 1 end end end end if ans > 0 then puts ' Yes ' else puts ' No ' end
require ' pp ' n = gets . chomp! . to_i p_n = gets . chomp! . split . map ( & :to_i ) count = 0 min = p_n [ 0 ] p_n . each do | a | if a <= min count += 1 min = a end end puts count
n = gets . chomp . split ( " " ) . map { | a | a . to_i } answer = " NO " if n . include? ( 1 ) if n . include? ( 7 ) if n . include? ( 9 ) if n . include? ( 4 ) answer = " YES " end end end end puts answer
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | i | ( 0 .. K ) . each do | j | break if i + j > S ans += 1 if S - i - j <= K end end puts ans
n = gets . to_i p = gets . chomp . split ( " " , n ) . map ( & :to_i ) ans = 0 min = p [ 0 ] p . each . with_index do | pp , i | if min >= pp ans += 1 end if min > pp min = pp end end p ans
result = ' NO ' nums_array = gets . split ( ' ' ) if nums_array . size == 3 then nums_hash = nums_array . group_by ( & :itself ) if nums_hash [ ' 7 ' ] != nil && nums_hash [ ' 7 ' ] . size == 1 then if nums_hash [ ' 5 ' ] != nil && nums_hash [ ' 5 ' ] . size == 2 then result = ' YES ' end end end puts result
p 1 << gets . to_i . to_s ( 2 ) . size - 1
p 1 << ~ - gets . to_i . bit_length
N = gets . to_i ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | x = h * n * N y = 4 * h * n - N * ( h + n ) if y > 0 && x % y == 0 puts " %d %d %d " % [ h , n , x / y ] exit end end end
N = gets . to_i 10 . times do | i | if N < 2 ** ( i + 1 ) puts 2 ** i exit end end
arr = [ ] arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i k = gets . to_i check = 0 ( arr . size - 1 ) . times do | i | ( 1 ... 5 ) . each do | j | co = arr [ j ] - arr [ i ] check = 1 if co > k end end puts check . zero? ? :Yay! : ' :( '
a = [ ] for i in 0 .. 4 a [ i ] = gets . to_i end k = gets . to_i a . sort! if a [ 4 ] - a [ 0 ] > k puts " :( " else puts " Yay! " end
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && z <= k then count += 1 end end end puts count
require ' set ' def s ( ) gets ( ) end def i ( ) gets . to_i end def li ( ) gets . split . map ( & :to_i ) end def ili ( ) n = gets . to_i as = gets . split . map ( & :to_i ) [ n , as ] end cs = [ ] 3 . times { cs << li ( ) } cs_t = cs . transpose res = true 2 . times { | i | res &&= Set . new ( cs [ 0 ] . zip ( cs [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 res &&= Set . new ( cs_t [ 0 ] . zip ( cs_t [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 } if res puts " Yes " else puts " No " end
require ' prime ' N , P = gets . split . map & :to_i primes = Prime . prime_division ( P ) ans = 1 for pr , n in primes do if n >= N then ans *= pr ** ( n / N ) end end p ans
n = [ ] for i in 1 .. 5 do n << gets . to_i end k = gets . to_i puts n . max - n . min > k ? ' :( ' : ' Yay! '
_n , * hinaarare = $stdin . read . split ans = hinaarare . uniq . size == 4 ? " Four " : " Three " puts ans
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
x = Array . new ( 3 , 0 ) y = Array . new ( 3 , 0 ) ary = 3 . times . map { gets . split . map ( & :to_i ) } 3 . times { | i | y [ i ] = ary [ 0 ] [ i ] - x [ 0 ] } 3 . times { | i | x [ i ] = ary [ i ] [ 0 ] - y [ 0 ] } flg = true 3 . times do | i | 3 . times do | j | flg = false if x [ i ] + y [ j ] != ary [ i ] [ j ] end end puts flg ? ' Yes ' : ' No '
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if ( 0 .. k ) . include? ( z ) end end puts cnt
h , r = gets . split ( ' ' ) . map ( & :to_i ) if h + r < 0 puts - 1 elsif h + r == 0 puts 0 else puts 1 end
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
a = [ ] a << gets . chomp . to_i a << gets . chomp . to_i a << gets . chomp . to_i a << gets . chomp . to_i a << gets . chomp . to_i k = gets . chomp . to_i flag = 0 j = 1 5 . times do | i | for jj in j .. 4 do if ( ( a [ jj ] - a [ i ] ) . abs > k ) then flag = 1 break end end j += 1 if flag == 1 then break end end if flag == 1 then puts " :( " else puts " Yay! " end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a > k puts " :( " else puts " Yay! " end
char = gets arr = char . split ( ' ' ) arr . sort! if arr [ 0 ] . to_i == 1 && arr [ 1 ] . to_i == 4 && arr [ 2 ] . to_i == 7 && arr [ 3 ] . to_i == 9 puts ' YES ' else puts ' NO ' end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) cnt = 0 sum = 0 c = [ ] n . times do | i | e = a [ i ] - b [ i ] if e . negative? cnt += 1 sum += e e = 0 end c << e end c . sort . reverse . each do | x | break if sum >= 0 sum += x cnt += 1 end puts cnt > n ? " -1 " : cnt
n = gets . to_i ; p 2 ** ( 0 .. 9 ) . select { | i | n [ i ] > 0 } . max
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
d , n = gets . strip . split ( ' ' ) . map { | s | s . to_i } ts = d . times . map { gets . strip . to_i } wears = n . times . map { gets . strip . split ( ' ' ) . map { | s | s . to_i } } max_dc = [ ] for i in ( 0 ... n ) if wears [ i ] [ 0 ] <= ts [ 0 ] && ts [ 0 ] <= wears [ i ] [ 1 ] max_dc << [ wears [ i ] [ 2 ] , 0 ] end end for j in ( 1 ... d ) p_max_dc = max_dc max_dc = [ ] for i in ( 0 ... n ) if wears [ i ] [ 0 ] <= ts [ j ] && ts [ j ] <= wears [ i ] [ 1 ] ci = wears [ i ] [ 2 ] sdc = 0 for pmdc in p_max_dc pci , psdc = pmdc dc = ( ci - pci ) . abs + psdc sdc = dc if sdc < dc end max_dc << [ ci , sdc ] end end end puts max_dc . map { | mdc | mdc [ 1 ] } . max
N = gets . to_i answer = 1 while N >= answer do answer = answer * 2 end puts answer / 2
n = gets puts gets . split . uniq . size == 3 ? " Three " : " Four "
N = gets . to_i P = gets . split . map ( & :to_i ) ans = 0 min = P [ 0 ] P . each do | pi | if pi <= min ans += 1 min = pi end end puts ans
cs = [ ] 3 . times do cs << gets . split . map ( & :to_i ) end w_div = [ ] h_div = [ ] for i in 0 .. 2 do w_div << [ cs [ i ] [ 0 ] - cs [ i ] [ 1 ] , cs [ i ] [ 1 ] - cs [ i ] [ 2 ] ] h_div << [ cs [ 0 ] [ i ] - cs [ 1 ] [ i ] , cs [ 1 ] [ i ] - cs [ 2 ] [ i ] ] end ans = ' Yes ' for i in 0 .. 1 do if w_div [ i ] != w_div [ i + 1 ] || h_div [ i ] != h_div [ i + 1 ] ans = ' No ' end end puts ans
s = gets . split puts s . include? ( ' 1 ' ) && s . include? ( ' 9 ' ) && s . include? ( ' 7 ' ) && s . include? ( ' 4 ' ) ? " YES " : " NO "
N = gets . chomp . to_i S = gets . chomp puts S . include? ( ' Y ' ) ? " Four " : " Three "
n = gets . to_i p = gets . split ( ' ' ) . map ( & :to_i ) mini = p [ 0 ] count = 1 for i in 1 .. n - 1 if p [ i ] < mini count += 1 mini = p [ i ] end end puts count
puts gets . split . sort == %w( 1 4 7 9 ) ? :YES : :NO
k , s = gets . strip . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } puts ans
n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) min = p [ 0 ] ans = 1 1 . upto ( n - 1 ) do | i | if min >= p [ i ] ans += 1 end min = [ min , p [ i ] ] . min end p ans
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a <= k puts " Yay! " else puts " :( " end
T1 , T2 , A1 , A2 , B1 , B2 = 3 . times . collect { gets . chomp . split ( / / ) . collect ( & :to_i ) } . flatten delta1 = T1 * ( B1 - A1 ) delta2 = T2 * ( B2 - A2 ) if delta1 * delta2 > 0 puts ( 0 ) else if delta1 . abs > delta2 . abs puts ( 0 ) elsif delta1 . abs == delta2 . abs puts ( ' infinity ' ) else delta3 = Rational ( - delta1 , delta1 + delta2 ) puts ( 2 * delta3 . floor + ( delta3 . ceil - delta3 . floor ) ) end end
k , s = gets . strip . split . map ( & :to_i ) result = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | result += 1 if s - ( x + y ) <= k && s - ( x + y ) >= 0 end end puts result
ca = Array . new ( 5 ) { gets . to_i } k = gets . to_i puts ( ca [ 4 ] - ca [ 0 ] > k ) ? " :( " : " Yay! "
a = readlines . map { | e | e . chomp . to_i } k = a [ 5 ] x = 1 ( 0 .. 4 ) . each do | i | ( 1 .. 4 ) . each do | j | x *= a [ j ] - a [ i ] <= k ? 1 : 0 end end print x == 1 ? ' Yay! ' : ' :( '
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i array = [ a , b , c , d , e ] array . each_with_index do | v , x | x = x + 1 x . upto ( 4 ) do | i | if array [ i ] - v > k puts " :( " exit end end end puts " Yay! "
require ' set ' while 1 n , m = gets . split . map ( & :to_i ) break if n == 0 && m == 0 g = { } ( 1 .. n ) . each { | i | g [ i ] = [ ] } m . times do i , j = gets . split . map ( & :to_i ) g [ i ] << j g [ j ] << i end color = { 1 => 0 } queue = [ 1 ] until queue . empty? i = queue . shift c = color [ i ] g [ i ] . each do | j | if color [ j ] && color [ j ] != 1 - c queue = [ ] color = nil break elsif ! color [ j ] color [ j ] = 1 - c queue << j end end end ans = Set . new if color k = color . values . count ( 0 ) if k . even? ans << k / 2 end if ( n - k ) . even? ans << ( n - k ) / 2 end end p ans . size puts ans . sort end
n = gets . to_i ans = 0 for i in 1 .. n cur = 0 while i % 2 == 0 i / = 2 cur += 1 end ans = cur if ans < cur end puts 2 ** ans
c = Array . new ( 3 ) c [ 0 ] = gets . split . map ( & :to_i ) c [ 1 ] = gets . split . map ( & :to_i ) c [ 2 ] = gets . split . map ( & :to_i ) if 0 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] - c [ 0 ] [ 1 ] - c [ 1 ] [ 2 ] - c [ 2 ] [ 0 ] && 0 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] - c [ 1 ] [ 0 ] - c [ 2 ] [ 1 ] then print " Yes \n " else print " No \n " end
gets a = gets . split ( ' ' ) . map ( & :to_i ) min = a [ 0 ] n = 0 a . each do | pi , i | next if min < pi n += 1 min = pi end puts n
ks = gets . strip k , s = ks . split ( ' ' ) . map ( & :to_i ) count = 0 Array ( 0 .. k ) . repeated_permutation ( 2 ) { | x , y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) } puts count
a , b , c , d , e , k = 6 . times . map { gets . to_i } puts e - a <= k ? " Yay! " : " :( "
k , s = gets . split . map { | i | i . to_i } res = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if 0 <= z && z <= k then res += 1 end end end puts res
ns = gets . split . map ( & :to_i ) if ns . include? ( 1 ) && ns . include? ( 9 ) && ns . include? ( 7 ) && ns . include? ( 4 ) puts ' YES ' else puts ' NO ' end
n = gets . to_i k = 0 loop do n >>= 1 break if n . zero? k += 1 end puts 1 << k
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
N = gets . chomp . to_i num = 1 max = 0 for i in 1 .. N if i % 2 == 0 flag = true count = 0 div = i while flag div = div / 2 count += 1 if div % 2 != 0 if max < count num = i max = count end flag = false end end end end print ( num )
lines = [ ] 5 . times { lines . push ( gets . to_i ) } k = gets . to_i puts lines [ 4 ] - lines [ 0 ] > k ? ' :( ' : ' Yay! '
k , s = gets . split . map & :to_i count = 0 for x in 0 .. k do for y in 0 .. k do z = s - ( x + y ) if z >= 0 && z <= k && x + y + z == s count += 1 end end end puts count
N = gets . to_i max_i = 1 max_n = 0 1 . upto ( N ) do | i | next if i . odd? v = i c = 0 while v . even? v = v / 2 c += 1 end if c > max_n max_n = c max_i = i end end p max_i
s = gets . chomp . split ( " " ) if s . include? ( " 1 " ) && s . include? ( " 9 " ) && s . include? ( " 7 " ) && s . include? ( " 4 " ) puts ( " YES " ) else puts ( " NO " ) end
input = gets . to_s arrayOfInput = [ ] arrayOfInput << input . split ( " " ) [ 0 ] . to_i arrayOfInput << input . split ( " " ) [ 1 ] . to_i arrayOfInput << input . split ( " " ) [ 2 ] . to_i arrayOfInput << input . split ( " " ) [ 3 ] . to_i if arrayOfInput . include? ( 1 ) && arrayOfInput . include? ( 7 ) && arrayOfInput . include? ( 9 ) && arrayOfInput . include? ( 4 ) then puts " YES " else puts " NO " end
antenas = 5 . times . map { gets . to_i } k = gets . to_i if antenas . max - antenas . min <= k puts " Yay! " else puts " :( " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
input = Array . new ( 5 ) { gets . to_i } k = gets . to_i ans = " Yay! " input . combination ( 2 ) do | i , j | if ( i - j ) . abs > k ans = " :( " break end end puts ans
N = gets . to_i P = gets . split . map & :to_i min = N cnt = 0 P . each do | e | if e <= min cnt += 1 min = e end end puts cnt
$> << [ :Three , :Four ] [ ` dd ` . split . uniq . size % 2 ]
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
line = readlines . map ( & :to_i ) if line [ 4 ] - line [ 0 ] > line [ 5 ] then puts " :( " else puts " Yay! " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if ( a - e ) . abs > k puts ' :( ' else puts ' Yay! ' end
ns = 5 . times . map { gets . to_i } . sort k = gets . to_i puts ns [ 4 ] - ns [ 0 ] > k ? " :( " : " Yay! "
antennas = [ ] 5 . times do | i | antennas . push ( gets . to_i ) end K = gets . to_i if antennas [ 4 ] - antennas [ 0 ] > K puts " :( " else puts " Yay! " end
input = gets . split ( " " ) . map ( & :to_i ) . sort if input == [ 5 , 5 , 7 ] puts " YES " else puts " NO " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) c = Array . new ( n ) { | i | a [ i ] - b [ i ] } . sort m = 0 ans = 0 for i in 0 .. n - 1 break if c [ i ] >= 0 m -= c [ i ] ans += 1 end ( n - 1 ) . downto ( 0 ) do | i | break if m <= 0 m -= c [ i ] ans += 1 end if c . inject ( :+ ) >= 0 puts ans else puts " -1 " end
number = gets . split ( ' ' ) count = 0 k = number [ 0 ] . to_i s = number [ 1 ] . to_i for x in 0 .. k do for y in 0 .. k do z = s - x - y if z <= k and z >= 0 then count = count + 1 end end end puts count
K , S = gets . chomp . split . map ( & :to_i ) count = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y if 0 <= z && z <= K count += 1 end end end print count
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
n , p = gets . chomp . split ( " " ) . map ( & :to_i ) number = 2 if ( n == 1 ) puts p else divisionNumber = 1 loop do temp_number_n = number ** n divisionNumber = number if ( p % temp_number_n == 0 ) if ( ( p % temp_number_n == 0 || ( p % temp_number_n != 0 && p > temp_number_n ) ) ) number += 1 else break end end puts divisionNumber end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ary = [ b , c , d , e ] cnt = 0 ary . each do | x | cnt += 1 if x > ( a + k ) end if cnt == 0 puts " Yay! " else puts " :( " end
n = gets . to_i if n == 1 puts 1 elsif n < 4 puts 2 elsif n < 8 puts 4 elsif n < 16 puts 8 elsif n < 32 puts 16 elsif n < 64 puts 32 else puts 64 end
require ' prime ' DBG = ! true n , p = gets . split . map { | z | z . to_i } f = p . prime_division prod = 1 for x in f pr = x [ 0 ] ex = x [ 1 ] prod *= pr ** ( ex / n ) end print prod
N , P = gets . split . map & :to_i ; require ' prime ' ; p Prime . prime_division ( P ) . inject ( 1 ) { | s , x | ( x [ 1 ] < N ) ? s : s * x [ 0 ] ** ( x [ 1 ] / N ) }
ARG_N = gets . to_i ARG_P = gets . split . map ( & :to_i ) smallest = 2 * ( 10 ** 5 ) + 1 result = 0 ARG_P . each do | x | if x <= smallest smallest = x result += 1 end end puts result
n = gets . to_i ans = Hash . new ( 0 ) ( 1 .. n ) . each do | m | pre = m count = 0 if pre % 2 == 0 until pre % 2 != 0 pre /= 2 count += 1 end end ans [ m ] = count end puts ans . sort { | ( k1 , v1 ) , ( k2 , v2 ) | v2 <=> v1 } [ 0 ] [ 0 ]
N , M = gets . split . map ( & :to_i ) Mod = 10 ** 9 + 7 def fact ( n ) ( 1 .. n ) . inject ( 1 ) { | res , i | res * i % Mod } end t = [ 2 , 1 , 0 ] a = ( N - M ) . abs a = 2 if a >= 2 puts t [ a ] * fact ( N ) * fact ( M ) % Mod
c = [ ] flag = true 3 . times { | i | c [ i ] = gets . split ( ' ' ) . map ( & :to_i ) } 2 . times { | j | bef = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] 2 . times { | i | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] != bef } } 2 . times { | i | bef = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] 2 . times { | j | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] != bef } } puts flag ? ' Yes ' : ' No '
N = gets . chomp . to_i S = gets . chomp . split print "
n = gets . to_i s = [ ] s = gets . split ( " " ) ycnt = 0 n . times do | i | if s [ i ] == " Y " ycnt += 1 end end if ycnt != 0 print ( " Four \n " ) else print ( " Three \n " ) end
bef = gets . split . map ( & :to_i ) 1 . upto ( 2 ) do aft = gets . split . map ( & :to_i ) d = aft [ 0 ] - bef [ 0 ] 1 . upto ( 2 ) do | j | if aft [ j ] - bef [ j ] != d puts " No " exit end end bef = aft end puts " Yes "
ks = gets . strip k , s = ks . split ( ' ' ) . map ( & :to_i ) count = 0 combs = Array ( 0 .. k ) . repeated_permutation ( 2 ) combs . each do | x , y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) end puts count
k , s = gets . split . map & :to_i cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
ns = gets . split . map ( & :to_i ) . sort if ns == [ 1 , 4 , 7 , 9 ] puts ( ' YES ' ) else puts ( ' NO ' ) end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i arr = [ a , b , c , d , e ] arr . sort! if ( arr [ 4 ] - arr [ 0 ] ) > k print " :( \n " else print " Yay! \n " end
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
n = gets . to_i x = 1 loop { x = x * 2 if x > n break end } puts x / 2
k , s = gets . split . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y count += 1 if 0 <= z && z <= k end end puts count
n = gets . to_i s = gets . chomp arr = [ 0 , 0 ] s . each_char { | c | if c < " a " if c < " N " arr [ 0 ] += 1 else arr [ 0 ] -= 1 end else if c < " n " arr [ 1 ] += 1 else arr [ 1 ] -= 1 end end } puts arr . map { | x | x . abs } . inject ( :+ ) crypt = " " if arr [ 0 ] >= 0 crypt += ( " A " * arr [ 0 ] ) else crypt += ( " N " * ( - arr [ 0 ] ) ) end if arr [ 1 ] >= 0 crypt += ( " a " * arr [ 1 ] ) else crypt += ( " n " * ( - arr [ 1 ] ) ) end puts crypt
n = gets . chomp . to_i inputs = gets . split . map ( & :to_i ) reject = 0 temp = 200000 ( 0 ... n ) . each do | i | _temp_1 = inputs [ i ] if temp < _temp_1 reject += 1 else temp = _temp_1 end end puts n - reject
n , m = gets . split . map ( & :to_i ) x = gets . split . map ( & :to_i ) y = gets . split . map ( & :to_i ) p ( 1 ... n ) . map { | i | i * ( n - i ) * ( x [ i ] - x [ i - 1 ] ) } . reduce ( 0 , :+ ) * ( 1 ... m ) . map { | i | i * ( m - i ) * ( y [ i ] - y [ i - 1 ] ) } . reduce ( 0 , :+ ) % ( 10 ** 9 + 7 )
arr = [ ] 3 . times do arr << gets . split . map ( & :to_i ) end pre = Array . new ( 3 ) 3 . times do | i | 3 . times do | j | if pre [ j ] && pre [ j ] != arr [ ( j + 1 ) % 3 ] [ i ] - arr [ j ] [ i ] puts " No " exit end pre [ j ] = arr [ ( j + 1 ) % 3 ] [ i ] - arr [ j ] [ i ] end end pre2 = Array . new ( 3 ) 3 . times do | i | 3 . times do | j | if pre2 [ j ] && pre2 [ j ] != arr [ i ] [ ( j + 1 ) % 3 ] - arr [ i ] [ j ] puts " No " exit end pre2 [ j ] = arr [ i ] [ ( j + 1 ) % 3 ] - arr [ i ] [ j ] end end puts " Yes "
d = [ ] 5 . times do d << gets . to_i end k = gets . to_i flag = true 5 . times do | i | 5 . times do | j | if ( d [ i ] - d [ j ] ) . abs > k flag = false end end end if flag puts ' Yay! ' else puts ' :( ' end
n = gets . to_i 1 . upto ( 3500 ) do | h | 1 . upto ( h ) do | w | next if ( m = 4 * h * w - w * n - n * h ) <= 0 x , y = ( n * h * w ) . divmod ( m ) next if y != 0 puts " exit end end
H , R = gets . split . map & :to_i p 0 if H + R == 0 p 1 if H + R > 0 p - 1 if H + R < 0
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( a - b ) . abs <= k && ( a - c ) . abs <= k && ( a - d ) . abs <= k && ( a - e ) . abs <= k && ( b - c ) . abs <= k && ( b - d ) . abs <= k && ( b - e ) . abs <= k && ( c - d ) . abs <= k && ( c - e ) . abs <= k && ( d - e ) . abs <= k ? ' Yay! ' : ' :( '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? " :( " : " Yay! "
N = gets . to_i puts [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] . find { | v | v <= N }
arr = ( 0 ... 5 ) . map { gets . to_i } k = gets . to_i ( 0 ... 5 ) . each do | i | ( i ... 5 ) . each do | j | if ( arr [ i ] - arr [ j ] ) . abs > k puts " :( " exit ( 0 ) end end end puts " Yay! "
$debugFlag = ( ARGV [ 0 ] != nil ) p " ==== DEBUG MODE ==== " if $debugFlag def pd ( str ) p str if $debugFlag end inputs = [ ] lc = 0 while l = $stdin . gets do if false inputs << l . chomp . split ( " " ) . map ( & :to_s ) else inputs << l . chomp . split ( " " ) . map ( & :to_i ) end lc += 1 end if $debugFlag p " --- INPUT (begin) --- " inputs . each do | l_i | p l_i end p " --- INPUT (end) --- " print " \n " end aa = inputs [ 0 ] [ 0 ] ll = inputs [ - 2 ] [ 0 ] kk = inputs [ - 1 ] [ 0 ] if $debugFlag p aa p ll p kk end if ll - aa > kk puts " :( " else puts " Yay! " end
c = 3 . times . map { gets . split . map ( & :to_i ) } ans = true 3 . times do | i | c [ i ] [ 1 ] -= c [ i ] [ 0 ] c [ i ] [ 2 ] -= c [ i ] [ 0 ] end for i in 1 .. 2 ans = false if c [ 0 ] [ i ] != c [ 1 ] [ i ] || c [ 0 ] [ i ] != c [ 2 ] [ i ] end puts ans ? " Yes " : " No "
module Memoizable def memoize ( name ) original = " __original_ ([Class, Module].include?(self.class) ? self : self.class).class_eval { alias_method(original, name) private(original) cache = {} define_method(name){|*args| cache[args] ||= send(original, *args) } } end end def addition(s1, s2) match_len = s2.size-1 match_len -= 1 until match_len == 0 || s1 =~ / s2.size - match_len end include Memoizable memoize :addition loop { n = gets.to_i break if n == 0 names = (1..n).map{gets.chomp} trivial = [] names.combination(2){|a, b| trivial << b if a =~ / trivial << a if b =~ / } trivial.uniq! n -= trivial.size names -= trivial names << " " a = { } ( 0 .. n ) . to_a . permutation ( 2 ) { | i , j | a [ [ i , j ] ] = addition ( names [ i ] , names [ j ] ) } table = [ { n => 0 } ] ( 1 .. ( 1 << n ) - 1 ) . each { | x | table [ x ] = Hash . new ( Float :: INFINITY ) t = table [ x ] is = ( 0 .. n - 1 ) . select { | i | x [ i ] == 1 } is . each { | i | y = x - ( 1 << i ) last_name = names [ i ] table [ y ] . each { | k , len | l = len + a [ [ k , i ] ] t [ i ] = l if l < t [ i ] } } } p table [ ( 1 << n ) - 1 ] . values . min }
_ = gets print gets . split . uniq . size == 3 ? " Three " : " Four "
n , m = gets . chomp . split ( " " ) . map ( & :to_i ) require ' prime ' pr = [ 1 ] if n == 1 puts m exit end Prime . each ( 10 ** 7 ) do | prime | pr . push ( prime ) end pr2 = Array . new ( pr . length , 0 ) for i in 1 .. pr . length - 1 while m % pr [ i ] == 0 m /= pr [ i ] pr2 [ i ] += 1 end if m == 1 break end end if m != 1 pr2 . push ( 1 ) end ans = 1 for i in 1 .. pr2 . length - 1 if pr2 [ i ] >= n ans *= ( pr [ i ] ** ( pr2 [ i ] / n ) ) end end puts ans
N = gets . to_i 6 . downto ( 0 ) do | i | if 2 ** i <= N puts 2 ** i break end end
m = gets . to_i n = gets . chomp . split . map ( & :to_i ) ans = 0 min = 10 ** 10 for i in 0 .. m - 1 if n [ i ] <= min ans += 1 min = n [ i ] end end puts ans
n , * a = $< . map { | l | l . split . map & :to_i } ; t = 1 ; a . zip ( n ) { | x , m | s = 0 ; x . map { | k | s += k * ~ ( m -= 2 ) } ; t *= s } ; p t . % 10 ** 9 + 7
a = 5 . times . map { gets . to_i } k = gets . to_i if a [ 4 ] - a [ 0 ] <= k then puts " Yay! " else puts " :( " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k then puts " Yay! " else puts " :( " end
N = gets . to_i ans = 1 0 . upto 6 do | i | break if 2 ** i > N ans = 2 ** i end puts ans
n = gets . to_i n_arr = [ ] arr = [ ] ( 1 .. n ) . each do | v | if v . even? n_arr << v end end n_arr . each do | v | cnt = 0 while v % 2 == 0 v /= 2 cnt += 1 end arr << cnt end if n == 1 puts 1 else puts n_arr [ arr . index ( arr . max ) ] end
a = 5 . times . map { gets . to_i } k = gets . to_i puts a . max - a . min > k ? ' :( ' : ' Yay! '
N = gets . to_i P = gets . split . map & :to_i min = 1.0 / 0 p ( 1 .. P . size ) . select { | _i | i = _i - 1 min = [ min , P [ i ] ] . min P [ i ] <= min } . size
A = 5 . times . map { gets . to_i } k = gets . to_i puts A [ 4 ] - A [ 0 ] > k ? ' :( ' : ' Yay! '
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) a = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] if a [ 1 ] + b [ 1 ] != c [ 1 ] [ 1 ] || a [ 1 ] + b [ 2 ] != c [ 1 ] [ 2 ] || a [ 2 ] + b [ 1 ] != c [ 2 ] [ 1 ] || a [ 2 ] + b [ 2 ] != c [ 2 ] [ 2 ] puts " No " else puts " Yes " end
p ( " 1 " + ?0 * ( gets . to_i . to_s ( 2 ) . size - 1 ) ) . to_i ( 2 )
n = gets . to_i ans = [ ] if n >= 2 ( 1 .. 8 ) . each do | i | if n == 2 ans << 2 elsif 2 ** i > n ans << 2 ** ( i - 1 ) end end puts ans . min elsif n == 1 puts 1 else puts 0 end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if ( b - a <= k ) && ( c - a <= k ) && ( d - a <= k ) && ( e - a <= k ) && ( c - b <= k ) && ( d - b <= k ) && ( e - b <= k ) && ( d - c <= k ) && ( e - c <= k ) && ( e - d <= k ) puts " Yay! " else puts " :( " end
