from sys import stdin from itertools import combinations from math import factorial import numpy as np li = [ list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = li [ 0 ] [ 0 ] - a1 b2 = li [ 0 ] [ 1 ] - a1 b3 = li [ 0 ] [ 2 ] - a1 a2 = li [ 1 ] [ 0 ] - b1 a3 = li [ 2 ] [ 0 ] - b1 lin = [ [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if li [ i ] [ j ] != lin [ 0 ] [ i ] + lin [ 1 ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
f = [ ] for i in range ( 3 ) : f . append ( list ( map ( int , input ( ) . split ( ) ) ) ) s1 = f [ 0 ] [ 0 ] + f [ 1 ] [ 1 ] + f [ 2 ] [ 2 ] s2 = f [ 0 ] [ 1 ] + f [ 1 ] [ 2 ] + f [ 2 ] [ 0 ] s3 = f [ 0 ] [ 2 ] + f [ 1 ] [ 0 ] + f [ 2 ] [ 1 ] if s1 == s2 == s3 : print ( " Yes " ) else : print ( " No " )
F = [ None ] * 3 for i in range ( 3 ) : F [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( F [ 0 ] [ 0 ] + 1 ) : b1 = F [ 0 ] [ 0 ] - a1 b2 = F [ 0 ] [ 1 ] - a1 b3 = F [ 0 ] [ 2 ] - a1 a2 = F [ 1 ] [ 0 ] - b1 a3 = F [ 2 ] [ 0 ] - b1 for i , a in enumerate ( [ a1 , a2 , a3 ] ) : for j , b in enumerate ( [ b1 , b2 , b3 ] ) : if F [ i ] [ j ] != a + b : break else : continue break else : print ( ' Yes ' ) break else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a_1 = i b_1 = C [ 0 ] [ 0 ] - i b_2 = C [ 0 ] [ 1 ] - i b_3 = C [ 0 ] [ 2 ] - i a_2 = C [ 1 ] [ 0 ] - b_1 a_3 = C [ 2 ] [ 0 ] - b_1 if ( a_2 + b_2 ) == C [ 1 ] [ 1 ] and ( a_2 + b_3 ) == C [ 1 ] [ 2 ] and ( a_3 + b_2 ) == C [ 2 ] [ 1 ] and ( a_3 + b_3 ) == C [ 2 ] [ 2 ] : flag = True break if flag : print ( " Yes " ) else : print ( " No " )
if __name__ == " __main__ " : c = list ( ) for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) tmp = list ( ) for i in range ( 3 ) : tmp . append ( [ c [ i ] [ 0 ] - c [ 0 ] [ 0 ] , c [ i ] [ 1 ] - c [ 0 ] [ 1 ] , c [ i ] [ 2 ] - c [ 0 ] [ 2 ] ] ) for i in range ( 3 ) : if tmp [ i ] [ 0 ] == tmp [ i ] [ 1 ] == tmp [ i ] [ 2 ] : continue else : print ( ' No ' ) exit ( ) tmp = list ( ) for i in range ( 3 ) : tmp . append ( [ c [ 0 ] [ i ] - c [ 0 ] [ 0 ] , c [ 1 ] [ i ] - c [ 1 ] [ 0 ] , c [ 2 ] [ i ] - c [ 2 ] [ 0 ] ] ) for i in range ( 3 ) : if tmp [ i ] [ 0 ] == tmp [ i ] [ 1 ] == tmp [ i ] [ 2 ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = 1 for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] != C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] or C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] != C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : flag = 0 if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] != C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] or C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] != C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : flag = 0 if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ; c [ 0 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; c [ 1 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; c [ 2 ] = [ int ( x ) for x in input ( ) . split ( ) ] ; ans = ' true ' ; for i in range ( 1 , 3 ) : hdiff = c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] ; for j in range ( 1 , 3 ) : if c [ j ] [ i ] - c [ j ] [ i - 1 ] != hdiff : ans = ' false ' ; break ; for i in range ( 1 , 3 ) : vdiff = c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] ; for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != vdiff : ans = ' false ' ; break ; if ( ans == ' true ' ) : print ( ' Yes ' ) ; else : print ( ' No ' ) ;
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] and a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : pass else : print ( ' No ' ) exit ( 0 ) for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : pass else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ i ] [ 0 ] - 0 for i in range ( 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
C11 , C12 , C13 = map ( int , input ( ) . split ( ) ) ; C21 , C22 , C23 = map ( int , input ( ) . split ( ) ) ; C31 , C32 , C33 = map ( int , input ( ) . split ( ) ) ; b1 = C11 ; b2 = C12 ; b3 = C13 ; a2 = C21 - b1 ; a3 = C31 - b1 ; if ( C22 == a2 + b2 and C23 == a2 + b3 and C32 == a3 + b2 and C33 == a3 + b3 ) : print ( " Yes " ) ; else : print ( " No " ) ;
c = [ [ int ( cn ) for cn in input ( ) . split ( ) ] for _ in range ( 3 ) ] max_val = max ( c [ 0 ] ) ans = ' No ' for a1 in range ( max_val + 1 ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] correct = True for i in range ( 2 ) : ai_cand = [ ] for j in range ( 3 ) : cand = c [ i + 1 ] [ j ] - b [ j ] correct = cand >= 0 if correct : ai_cand . append ( cand ) else : break correct = correct and ( ai_cand [ 0 ] == ai_cand [ 1 ] and ai_cand [ 1 ] == ai_cand [ 2 ] ) if not correct : break if correct : ans = ' Yes ' break print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) res = " No " for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : if c [ 0 ] [ 0 ] - i == c [ 1 ] [ 0 ] - j == c [ 2 ] [ 0 ] - k : if c [ 0 ] [ 1 ] - i == c [ 1 ] [ 1 ] - j == c [ 2 ] [ 1 ] - k : if c [ 0 ] [ 2 ] - i == c [ 1 ] [ 2 ] - j == c [ 2 ] [ 2 ] - k : res = " Yes " print ( res )
a = [ ] for i in range ( 3 ) : a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( ( a [ 1 ] [ 0 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 0 ] [ 2 ] ) and ( a [ 2 ] [ 0 ] - a [ 0 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 0 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 0 ] [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] ans = ' No ' for x in range ( 101 ) : for y in range ( 101 ) : for z in range ( 101 ) : d = [ ] d . append ( [ c [ 0 ] [ j ] - x for j in range ( 3 ) ] ) d . append ( [ c [ 1 ] [ j ] - y for j in range ( 3 ) ] ) d . append ( [ c [ 2 ] [ j ] - z for j in range ( 3 ) ] ) if sum ( len ( set ( d [ i ] [ j ] for i in range ( 3 ) ) ) for j in range ( 3 ) ) == 3 : ans = ' Yes ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ 0 ] * 3 N = max ( max ( c ) ) + 1 for a1 in range ( N ) : for a2 in range ( N ) : for a3 in range ( N ) : b [ 0 ] = c [ 0 ] [ 0 ] - a1 b [ 1 ] = c [ 0 ] [ 1 ] - a1 b [ 2 ] = c [ 0 ] [ 2 ] - a1 flag = True nb = [ 0 ] * 3 for i in range ( 3 ) : nb [ i ] = c [ 1 ] [ i ] - a2 if nb [ i ] != b [ i ] : flag = False break for i in range ( 3 ) : nb [ i ] = c [ 2 ] [ i ] - a3 if nb [ i ] != b [ i ] : flag = False break if flag : import sys print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
y1_list = list ( map ( int , input ( ) . split ( ) ) ) y2_list = list ( map ( int , input ( ) . split ( ) ) ) y3_list = list ( map ( int , input ( ) . split ( ) ) ) L = [ y1_list , y2_list , y3_list ] a1 = list ( ) a2 = list ( ) b1 = list ( ) b2 = list ( ) for i in range ( 3 ) : a1 . append ( y1_list [ i ] - y2_list [ i ] ) a2 . append ( y2_list [ i ] - y3_list [ i ] ) if ( a1 [ 0 ] == a1 [ 1 ] and a1 [ 2 ] == a1 [ 0 ] ) : if ( a2 [ 0 ] == a2 [ 1 ] and a2 [ 2 ] == a2 [ 0 ] ) : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) c . append ( x ) c . append ( y ) c . append ( z ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = c [ 0 ] - a1 b2 = c [ 1 ] - a1 b3 = c [ 2 ] - a1 if c [ 3 ] == a2 + b1 and c [ 4 ] == a2 + b2 and c [ 5 ] == a2 + b3 and c [ 6 ] == a3 + b1 and c [ 7 ] == a3 + b2 and c [ 8 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys read = sys . stdin . read readlines = sys . stdin . readlines def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( tuple ( map ( int , input ( ) . split ( ) ) ) ) for i1 in range ( 101 ) : for i2 in range ( 101 ) : if i1 - c [ 0 ] [ 0 ] == i2 - c [ 0 ] [ 1 ] : i3 = c [ 0 ] [ 2 ] - ( c [ 0 ] [ 0 ] - i1 ) if i1 - c [ 1 ] [ 0 ] == i2 - c [ 1 ] [ 1 ] == i3 - c [ 1 ] [ 2 ] : if i1 - c [ 2 ] [ 0 ] == i2 - c [ 2 ] [ 1 ] == i3 - c [ 2 ] [ 2 ] : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ i + 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ i + 1 ] [ 2 ] - C [ 0 ] [ 2 ] : continue else : print ( ' No ' ) exit ( ) for j in range ( 2 ) : if C [ 0 ] [ j + 1 ] - C [ 0 ] [ j ] == C [ 1 ] [ j + 1 ] - C [ 1 ] [ j ] == C [ 2 ] [ j + 1 ] - C [ 2 ] [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] S = 0 for i in range ( 3 ) : S += sum ( c [ i ] ) ans = " No " if S % 3 == 0 : tmp = S // 3 tmp1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] tmp2 = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] tmp3 = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] tmp4 = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] tmp5 = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] tmp6 = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] if tmp == tmp1 and tmp == tmp2 and tmp == tmp3 and tmp == tmp4 and tmp == tmp5 and tmp == tmp6 : ans = " Yes " print ( ans )
import numpy as np import sys sys . setrecursionlimit ( 10 ** 5 + 10 ) def resolve ( ) : G = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) G [ 1 ] -= G [ 0 ] G [ 2 ] -= G [ 0 ] if len ( set ( G [ 1 ] ) ) == 1 and len ( set ( G [ 2 ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) resolve ( )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] + b [ 1 ] == a [ 1 ] + b [ 0 ] and a [ 2 ] + c [ 0 ] == a [ 0 ] + c [ 2 ] and b [ 2 ] + c [ 1 ] == b [ 1 ] + c [ 2 ] : print ( " Yes " ) else : print ( " No " )
l = lambda : list ( map ( int , input ( ) . split ( ) ) ) a , b , c = l ( ) d , e , f = l ( ) g , h , i = l ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - d == h - e == i - f ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ 0 ] [ 0 ] == c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == c [ i ] [ 2 ] - c [ 0 ] [ 2 ] ) : flag = False if not ( c [ 0 ] [ i ] - c [ 0 ] [ 0 ] == c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == c [ 2 ] [ i ] - c [ 2 ] [ 0 ] ) : flag = False if flag : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all_sum = 0 right_up = 0 right_down = 0 for c in C : all_sum += sum ( c ) right_up += ( C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] ) right_down += ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] ) if all_sum % 3 == 0 and right_up == all_sum // 3 and right_down == all_sum // 3 : print ( " Yes " ) else : print ( " No " )
c = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ ] for _ in range ( 3 ) : c += [ list ( map ( int , input ( ) . split ( ) ) ) ] a = [ 0 , - 1 , - 1 ] b = c [ 0 ] for l , m in enumerate ( c [ 1 : ] ) : for j , k in enumerate ( m ) : if j == 0 : a [ l + 1 ] = k - b [ j ] else : if k != a [ l + 1 ] + b [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
grid = [ ] for i in range ( 3 ) : grid . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) for _ in range ( 100 ) : a1 = i b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 and grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import math import calendar import fractions import itertools c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) : c [ i ] [ j ] = a [ j ] x = min ( c [ 0 ] ) y = min ( c [ 1 ] ) z = min ( c [ 2 ] ) ans = 0 for a1 in range ( x + 1 ) : for a2 in range ( y + 1 ) : for a3 in range ( z + 1 ) : if a1 - c [ 0 ] [ 0 ] == a2 - c [ 1 ] [ 0 ] == a3 - c [ 2 ] [ 0 ] and a1 - c [ 0 ] [ 1 ] == a2 - c [ 1 ] [ 1 ] == a3 - c [ 2 ] [ 1 ] and a1 - c [ 0 ] [ 2 ] == a2 - c [ 1 ] [ 2 ] == a3 - c [ 2 ] [ 2 ] : ans = 1 break if ans == 1 : break if ans == 1 : break if ans == 1 : print ( " Yes " ) else : print ( " No " )
import numpy as np C = np . array ( [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ) ans = ' Yes ' for i in range ( 2 ) : if not ( C [ 0 , i + 1 ] - C [ 0 , i ] == C [ 1 , i + 1 ] - C [ 1 , i ] == C [ 2 , i + 1 ] - C [ 2 , i ] ) : ans = ' No ' if not ( C [ i + 1 , 0 ] - C [ i , 0 ] == C [ i + 1 , 1 ] - C [ i , 1 ] == C [ i + 1 , 2 ] - C [ i , 2 ] ) : ans = ' No ' print ( ans )
with open ( 0 ) as f : C = [ list ( map ( int , line . split ( ) ) ) for line in f . readlines ( ) ] b = [ ( C [ i ] [ 1 ] - C [ i ] [ 0 ] , C [ i ] [ 2 ] - C [ i ] [ 1 ] ) for i in range ( 3 ) ] a = [ ( C [ 1 ] [ j ] - C [ 0 ] [ j ] , C [ 2 ] [ j ] - C [ 1 ] [ j ] ) for j in range ( 3 ) ] print ( ' Yes ' if a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] else ' No ' )
import sys def input ( ) : return sys . stdin . readline ( ) . strip ( ) def input_int ( ) : return int ( input ( ) ) def input_int_list ( ) : return [ int ( i ) for i in input ( ) . split ( ) ] def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( input_int_list ( ) ) if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) and ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) and ( c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) and ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) and ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " ) return if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : temp = C [ i ] [ 0 ] C [ i ] = [ j - temp for j in C [ i ] ] if C [ 0 ] == C [ 1 ] and C [ 1 ] == C [ 2 ] : print ( " Yes " ) else : print ( " No " )
lst = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] lst1 = [ lst [ 1 ] [ i ] - lst [ 0 ] [ i ] for i in range ( 3 ) ] lst2 = [ lst [ 2 ] [ i ] - lst [ 0 ] [ i ] for i in range ( 3 ) ] if len ( set ( lst1 ) ) == 1 and len ( set ( lst2 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
ii = 3 s = [ ] icase = 0 if icase == 0 : for i in range ( ii ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) elif icase == 1 : s . append ( [ 1 , 0 , 1 ] ) s . append ( [ 2 , 1 , 2 ] ) s . append ( [ 1 , 0 , 1 ] ) yn = 1 for i in range ( ii - 1 ) : if ( s [ i ] [ 1 ] - s [ i ] [ 0 ] ) != ( s [ i + 1 ] [ 1 ] - s [ i + 1 ] [ 0 ] ) : yn = 0 for i in range ( ii - 1 ) : if ( s [ i ] [ 2 ] - s [ i ] [ 0 ] ) != ( s [ i + 1 ] [ 2 ] - s [ i + 1 ] [ 0 ] ) : yn = 0 for j in range ( ii - 1 ) : if ( s [ 1 ] [ j ] - s [ 0 ] [ j ] ) != ( s [ 1 ] [ j + 1 ] - s [ 0 ] [ j + 1 ] ) : yn = 0 for j in range ( ii - 1 ) : if ( s [ 2 ] [ j ] - s [ 0 ] [ j ] ) != ( s [ 2 ] [ j + 1 ] - s [ 0 ] [ j + 1 ] ) : yn = 0 if yn == 1 : print ( " Yes " ) else : print ( " No " )
d = [ None ] * 3 for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) d [ i ] = [ c [ i ] - c [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( d [ i ] == d [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 for i in l : ans += sum ( i ) print ( " Yes " if ans / 3 == ( l [ 0 ] [ 0 ] + l [ 1 ] [ 1 ] + l [ 2 ] [ 2 ] ) else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] res = 0 ans = 0 for i in range ( 3 ) : res += sum ( c [ i ] ) ans += c [ i ] [ i ] * 3 if res == ans : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c_lst = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] c2 = c_lst [ 1 ] [ 0 ] + c_lst [ 2 ] [ 1 ] + c_lst [ 0 ] [ 2 ] c3 = c_lst [ 2 ] [ 0 ] + c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 2 ] if c1 == c2 and c2 == c3 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] b = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] string = " Yes " for i in range ( 3 ) : x = c [ 1 ] [ i ] - c [ 0 ] [ i ] if x != a : string = " No " y = c [ 2 ] [ i ] - c [ 0 ] [ i ] if y != b : string = " No " print ( string )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] r1 = sum ( c [ 0 ] [ j ] for j in range ( 3 ) ) r2 = sum ( c [ 1 ] [ j ] for j in range ( 3 ) ) r3 = sum ( c [ 2 ] [ j ] for j in range ( 3 ) ) c1 = sum ( c [ i ] [ 0 ] for i in range ( 3 ) ) c2 = sum ( c [ i ] [ 1 ] for i in range ( 3 ) ) c3 = sum ( c [ i ] [ 2 ] for i in range ( 3 ) ) if r1 % 3 == r2 % 3 == r3 % 3 and c1 % 3 == c2 % 3 == c3 % 3 : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b2_1 = A [ 0 ] [ 1 ] - A [ 0 ] [ 0 ] b3_1 = A [ 0 ] [ 2 ] - A [ 0 ] [ 0 ] if any ( [ b2_1 != A [ x ] [ 1 ] - A [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) or any ( [ b3_1 != A [ x ] [ 2 ] - A [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) : print ( " No " ) else : print ( " Yes " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c4 - c1 == c5 - c2 == c6 - c3 and c7 - c1 == c8 - c2 == c9 - c3 : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] x = 0 for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : x += 1 for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] == c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : x += 1 if x == 4 : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( cn ) for cn in input ( ) . split ( ) ] for _ in range ( 3 ) ] max_val = max ( c [ 0 ] ) ans = ' No ' for a1 in range ( max_val + 1 ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] correct = True for i in range ( 2 ) : ai_cand = [ ] for j in range ( 3 ) : cand = c [ i + 1 ] [ j ] - b [ j ] correct = cand >= 0 if correct : ai_cand . append ( cand ) else : break if correct : correct = ai_cand [ 0 ] == ai_cand [ 1 ] and ai_cand [ 1 ] == ai_cand [ 2 ] if not correct : break else : break if correct : ans = ' Yes ' break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 1 , 3 , 1 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] for i in range ( 3 ) : p = min ( C [ i ] ) for j in range ( 3 ) : C [ i ] [ j ] -= p ans = True for i in range ( 3 ) : if ( C [ i ] [ 0 ] == C [ i ] [ 1 ] == C [ i ] [ 2 ] ) : continue else : ans = False if ( not ans ) : ans = True for i in range ( 3 ) : if ( C [ 0 ] [ i ] == C [ 1 ] [ i ] == C [ 2 ] [ i ] ) : continue else : ans = False print ( " Yes " ) if ans else print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 and c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) print ( " Yes " ) if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] and c1 [ 1 ] - c1 [ 2 ] == c2 [ 1 ] - c2 [ 2 ] == c3 [ 1 ] - c3 [ 2 ] else print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] OK = False for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : a = [ a1 , a2 , a3 ] ok = True for j in range ( 3 ) : v = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 2 ) : if c [ i + 1 ] [ j ] - a [ i + 1 ] != v : ok = False if ok : OK = True if OK : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] if ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) % 3 != 0 : print ( ' No ' ) exit ( ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) d = c12 - c11 e = c13 - c12 f = c21 - c11 g = c31 - c21 c12 -= c11 c13 -= c11 c21 -= c11 c22 -= c11 c23 -= c11 c31 -= c11 c32 -= c11 c33 -= c11 c11 -= c11 ok = 1 ok &= ( c11 == 0 ) ok &= ( c12 == d ) ok &= ( c13 == d + e ) ok &= ( c21 == f ) ok &= ( c22 == f + d ) ok &= ( c23 == f + d + e ) ok &= ( c31 == f + g ) ok &= ( c32 == f + g + d ) ok &= ( c33 == f + g + d + e ) if ok : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s = 0 for i in range ( 3 ) : for j in range ( 3 ) : s += c [ i ] [ j ] if 3 * ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) == s : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) import numpy as np c_np = np . array ( c ) flag = True for a1 in range ( max ( c_np [ 0 ] ) + 1 ) : b = [ x - a1 for x in c_np [ 0 ] ] a_tmp = c_np [ : , 0 ] - b [ 0 ] for i in range ( 2 ) : a = c_np [ : , i + 1 ] - b [ i + 1 ] if np . allclose ( a_tmp , a ) : a_tmp = a else : print ( " No " ) flag = False break else : continue break if flag : print ( " Yes " )
a , b , c = map ( int , input ( ) . split ( ) ) aa , bb , cc = map ( int , input ( ) . split ( ) ) aaa , bbb , ccc = map ( int , input ( ) . split ( ) ) ans = " No " if a - aa == b - bb and b - bb == c - cc : if aa - aaa == bb - bbb and bb - bbb == cc - ccc : if a - b == aa - bb and aa - bb == aaa - bbb : if b - c == bb - cc and bb - cc == bbb - ccc : ans = " Yes " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff0 = [ x - y for x , y in zip ( c [ 0 ] , c [ 1 ] ) ] diff1 = [ x - y for x , y in zip ( c [ 0 ] , c [ 2 ] ) ] if diff0 [ 0 ] == diff0 [ 1 ] and diff0 [ 0 ] == diff0 [ 2 ] and diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 0 ] == diff1 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * 3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] S = 0 for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) S += sum ( c [ i ] ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : a [ i ] = sum ( c [ i ] [ 0 : 3 ] ) b [ i ] = sum ( c [ 0 : 3 ] [ i ] ) if S % 3 != 0 : ans = " No " if ( a [ 0 ] - a [ 1 ] ) % 3 != 0 or ( a [ 1 ] - a [ 2 ] ) % 3 != 0 or ( a [ 2 ] - a [ 0 ] ) % 3 != 0 : ans = " No " elif ( b [ 0 ] - b [ 1 ] ) % 3 != 0 or ( b [ 1 ] - b [ 2 ] ) % 3 != 0 or ( b [ 2 ] - b [ 0 ] ) % 3 != 0 : ans = " No " elif c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != S // 3 : ans = " No " else : ans = " Yes " print ( ans )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] def diff ( arr ) : return tuple ( [ pre_x - x for pre_x , x in zip ( arr [ : - 1 ] , arr [ 1 : ] ) ] ) diffs = [ diff ( row ) for row in c ] if diffs [ 0 ] == diffs [ 1 ] == diffs [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = [ ] for i in range ( 3 ) : d . append ( [ ] ) for j , k in zip ( [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] ) : d [ i ] . append ( c [ i ] [ j ] - c [ i ] [ k ] ) if d [ 0 ] == d [ 1 ] == d [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] \ and C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] count = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : count += 1 if count == 9 : print ( ' Yes ' ) else : print ( ' No ' )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ax = x [ 0 ] [ 1 ] - x [ 0 ] [ 0 ] bx = x [ 0 ] [ 2 ] - x [ 0 ] [ 1 ] for i in range ( 3 ) : if ax != x [ i ] [ 1 ] - x [ i ] [ 0 ] or bx != x [ i ] [ 2 ] - x [ i ] [ 1 ] : print ( " No " ) break else : ay = x [ 1 ] [ 0 ] - x [ 0 ] [ 0 ] by = x [ 2 ] [ 0 ] - x [ 1 ] [ 0 ] for i in range ( 3 ) : if ay != x [ 1 ] [ i ] - x [ 0 ] [ i ] or by != x [ 2 ] [ i ] - x [ 1 ] [ i ] : print ( " No " ) break else : print ( " Yes " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] s = True if L [ 1 ] [ 1 ] != L [ 1 ] [ 0 ] - L [ 0 ] [ 0 ] + L [ 0 ] [ 1 ] : s = False if L [ 1 ] [ 2 ] != L [ 1 ] [ 0 ] - L [ 0 ] [ 0 ] + L [ 0 ] [ 2 ] : s = False if L [ 2 ] [ 1 ] != L [ 2 ] [ 0 ] - L [ 0 ] [ 0 ] + L [ 0 ] [ 1 ] : s = False if L [ 2 ] [ 2 ] != L [ 2 ] [ 0 ] - L [ 0 ] [ 0 ] + L [ 0 ] [ 2 ] : s = False if s : print ( ' Yes ' ) else : print ( ' No ' )
import sys def I ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) c = [ ] for _ in range ( 3 ) : c . append ( LI ( ) ) a1_range = min ( c [ 0 ] ) for a1 in range ( a1_range + 1 ) : a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = a1 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False break if not flag : break if flag : print ( " Yes " ) sys . exit ( ) print ( " No " )
input_map = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = input_map [ 0 ] [ 0 ] - input_map [ 0 ] [ 1 ] a2 = input_map [ 0 ] [ 0 ] - input_map [ 0 ] [ 2 ] a3 = input_map [ 0 ] [ 1 ] - input_map [ 0 ] [ 2 ] b1 = input_map [ 0 ] [ 0 ] - input_map [ 1 ] [ 0 ] b2 = input_map [ 0 ] [ 0 ] - input_map [ 2 ] [ 0 ] b3 = input_map [ 1 ] [ 0 ] - input_map [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if a1 != ( input_map [ i ] [ 0 ] - input_map [ i ] [ 1 ] ) : print ( ' No ' ) ; exit ( ) if a2 != ( input_map [ i ] [ 0 ] - input_map [ i ] [ 2 ] ) : print ( ' No ' ) ; exit ( ) if a3 != ( input_map [ i ] [ 1 ] - input_map [ i ] [ 2 ] ) : print ( ' No ' ) ; exit ( ) for i in range ( 1 , 3 ) : if b1 != ( input_map [ 0 ] [ i ] - input_map [ 1 ] [ i ] ) : print ( ' No ' ) ; exit ( ) if b2 != ( input_map [ 0 ] [ i ] - input_map [ 2 ] [ i ] ) : print ( ' No ' ) ; exit ( ) if b3 != ( input_map [ 1 ] [ i ] - input_map [ 2 ] [ i ] ) : print ( ' No ' ) ; exit ( ) print ( ' Yes ' )
import sys input = sys . stdin . readline import numpy as np c = [ ] for _ in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) c = np . array ( c ) c_t = c . T a = c [ 1 ] - c [ 0 ] b = c [ 2 ] - c [ 1 ] d = c [ 2 ] - c [ 0 ] e = c_t [ 1 ] - c_t [ 0 ] f = c_t [ 2 ] - c_t [ 1 ] g = c_t [ 2 ] - c_t [ 0 ] x = [ ] x . append ( a ) x . append ( b ) x . append ( d ) x . append ( e ) x . append ( f ) x . append ( g ) x = np . array ( x ) for i in x : if i [ 0 ] != i [ 1 ] or i [ 1 ] != i [ 2 ] or i [ 2 ] != i [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : print ( " No " ) break if not ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : print ( " No " ) break else : print ( " Yes " )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 101 ) : b1 = [ l1 [ 0 ] - a1 , l1 [ 1 ] - a1 , l1 [ 2 ] - a1 ] for a2 in range ( 101 ) : b2 = [ l2 [ 0 ] - a2 , l2 [ 1 ] - a2 , l2 [ 2 ] - a2 ] for a3 in range ( 101 ) : b3 = [ l3 [ 0 ] - a3 , l3 [ 1 ] - a3 , l3 [ 2 ] - a3 ] if b1 == b2 == b3 : print ( " Yes " ) exit ( ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ None for _ in range ( 3 ) ] b = [ None for _ in range ( 3 ) ] b [ 0 ] , a [ 0 ] = 0 , c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for j in range ( 1 , 3 ) : b [ j ] = c [ j ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : ans = " No " break print ( ans )
from itertools import combinations c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] row = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : row [ i ] [ j ] = c [ i + 1 ] [ j ] - c [ i ] [ j ] ans = " Yes " for i in row : if any ( x != y for x , y in combinations ( i , 2 ) ) : ans = " No " print ( ans )
import sys import timeit def input ( ) : return sys . stdin . readline ( ) . strip ( ) def I ( ) : return int ( input ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def IR ( n ) : return [ I ( ) for i in range ( n ) ] def LIR ( n ) : return [ LI ( ) for i in range ( n ) ] def SR ( n ) : return [ S ( ) for i in range ( n ) ] def S ( ) : return input ( ) def LS ( ) : return input ( ) . split ( ) def main ( ) : c = LIR ( 3 ) a = [ 0 ] * 3 b = [ 0 ] * 3 ans = ' No ' for i in range ( 101 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] for j in range ( 101 ) : a [ 1 ] = j b [ 1 ] = c [ 1 ] [ 1 ] - a [ 1 ] for k in range ( 101 ) : a [ 2 ] = k b [ 2 ] = c [ 2 ] [ 2 ] - a [ 2 ] current = [ [ a [ i ] + b [ j ] for j in range ( 3 ) ] for i in range ( 3 ) ] if c == current : ans = ' Yes ' break print ( ans ) main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ ] for _ in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) b = min ( a ) for i in range ( 3 ) : a [ i ] -= b C . append ( a ) if C [ 0 ] == C [ 1 ] == C [ 2 ] : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] == c1 [ 1 ] + c2 [ 2 ] + c3 [ 0 ] == c1 [ 2 ] + c2 [ 0 ] + c3 [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
C = [ ] for i in range ( 0 , 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ' ' ) ] ) def sol ( ) : if ( sum ( C [ 0 ] ) - sum ( C [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 1 ] ) - sum ( C [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 2 ] ) - sum ( C [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] - ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] - ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] - ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) else : return ( ' Yes ' ) print ( sol ( ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a = [ c [ 0 ] [ i ] for i in range ( 3 ) ] b = [ c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if A [ 0 ] [ 0 ] + A [ 1 ] [ 1 ] == A [ 0 ] [ 1 ] + A [ 1 ] [ 0 ] and A [ 1 ] [ 1 ] + A [ 2 ] [ 2 ] == A [ 1 ] [ 2 ] + A [ 2 ] [ 1 ] and A [ 0 ] [ 0 ] + A [ 2 ] [ 2 ] == A [ 0 ] [ 2 ] + A [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
def is_valid ( m , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if ( m [ i ] [ j ] != a [ i ] + b [ j ] ) : return 0 return 1 m = [ ] for a0 in range ( 3 ) : m . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a0 in range ( 101 ) : b0 = m [ 0 ] [ 0 ] - a0 b1 = m [ 0 ] [ 1 ] - a0 b2 = m [ 0 ] [ 2 ] - a0 a1 = m [ 1 ] [ 0 ] - b0 a2 = m [ 2 ] [ 0 ] - b0 if ( is_valid ( m , [ a0 , a1 , a2 ] , [ b0 , b1 , b2 ] ) ) : print ( " Yes " ) exit ( ) print ( " No " )
b1 , b2 , b3 = 0 , 0 , 0 check = 0 for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if i == 0 : b1 , b2 , b3 = c1 , c2 , c3 if i == 1 : if not ( ( c1 - b1 ) == ( c2 - b2 ) == ( c3 - b3 ) ) : check = 1 if i == 2 : if not ( ( c1 - b1 ) == ( c2 - b2 ) == ( c3 - b3 ) ) : check = 1 print ( " Yes " if check == 0 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = c [ 0 ] a = [ 0 ] for i in range ( 1 , 3 ) : a . append ( c [ i ] [ i ] - b [ i ] ) for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : minint = min ( C [ i ] ) for j in range ( 3 ) : C [ i ] [ j ] -= minint ans = True for j in range ( 3 ) : t = C [ 0 ] [ j ] for i in range ( 3 ) : if t != C [ i ] [ j ] : ans = False break if ans : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline sys . setrecursionlimit ( 10 ** 7 ) from collections import Counter , deque from collections import defaultdict from itertools import combinations , permutations , accumulate , groupby , product from bisect import bisect_left , bisect_right from heapq import heapify , heappop , heappush from math import floor , ceil , pi from operator import itemgetter def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def LI2 ( ) : return [ int ( input ( ) ) for i in range ( n ) ] def MXI ( ) : return [ [ LI ( ) ] for i in range ( n ) ] def SI ( ) : return input ( ) . rstrip ( ) def printns ( x ) : print ( ' \n ' . join ( x ) ) def printni ( x ) : print ( ' \n ' . join ( list ( map ( str , x ) ) ) ) inf = 10 ** 17 mod = 10 ** 9 + 7 l1 = LI ( ) l2 = LI ( ) l3 = LI ( ) c1 = l1 [ 0 ] c2 = l1 [ 1 ] c3 = l1 [ 2 ] c4 = l2 [ 0 ] c5 = l2 [ 1 ] c6 = l2 [ 2 ] c7 = l3 [ 0 ] c8 = l3 [ 1 ] c9 = l3 [ 2 ] a1 = 0 b1 = c1 a2 = c4 - c1 a3 = c7 - c1 b2 = c2 b3 = c3 count = 0 if c5 == a2 + b2 : count + = 1 if c6 == a2 + b3 : count + = 1 if c8 == a3 + b2 : count + = 1 if c9 == a3 + b3 : count + = 1 if count == 4 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( " " ) ) ) ) f = " No " for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( c [ 0 ] [ 0 ] - a1 == c [ 0 ] [ 1 ] - a2 == c [ 0 ] [ 2 ] - a3 and c [ 1 ] [ 0 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 1 ] [ 2 ] - a3 and c [ 2 ] [ 0 ] - a1 == c [ 2 ] [ 1 ] - a2 == c [ 2 ] [ 2 ] - a3 ) : f = " Yes " print ( f )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] import sys for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 and c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 and c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' b1 = 0 a1 = grid [ 0 ] [ 0 ] a2 = grid [ 1 ] [ 0 ] a3 = grid [ 2 ] [ 0 ] b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if b2 + a2 != grid [ 1 ] [ 1 ] : ans = ' No ' if b2 + a3 != grid [ 2 ] [ 1 ] : ans = ' No ' if b3 + a2 != grid [ 1 ] [ 2 ] : ans = ' No ' if b3 + a3 != grid [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
def solve ( ) : C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] diffr1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] diffr2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] diffc1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] diffc2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] == diffr1 : if C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] == diffr2 : if C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] == diffc1 : if C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] == diffc2 : return " Yes " return " No " if __name__ == " __main__ " : print ( solve ( ) )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a = [ c [ 0 ] [ i ] for i in range ( 3 ) ] b = [ c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c_li = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] res = 0 for i in range ( c_li [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c_li [ 0 ] [ 0 ] - a1 b2 = c_li [ 0 ] [ 1 ] - a1 b3 = c_li [ 0 ] [ 2 ] - a1 a2 = c_li [ 1 ] [ 0 ] - b1 a3 = c_li [ 2 ] [ 0 ] - b1 if c_li [ 1 ] [ 1 ] != a2 + b2 : continue if c_li [ 1 ] [ 2 ] != a2 + b3 : continue if c_li [ 2 ] [ 1 ] != a3 + b2 : continue if c_li [ 2 ] [ 2 ] != a3 + b3 : continue res = 1 if res == 0 : print ( " No " ) else : print ( " Yes " )
* c , = map ( int , open ( 0 ) . read ( ) . split ( ) ) for i in range ( 2 ) : if ( ( c [ 1 + i ] - c [ 0 + i ] ) != ( c [ 4 + i ] - c [ 3 + i ] ) or ( c [ 1 + i ] - c [ 0 + i ] ) != ( c [ 7 + i ] - c [ 6 + i ] ) or ( c [ 3 + i * 3 ] - c [ i * 3 ] ) != ( c [ 4 + i * 3 ] - c [ 1 + i * 3 ] ) or ( c [ 3 + i * 3 ] - c [ i * 3 ] ) != ( c [ 5 + i * 3 ] - c [ 2 + i * 3 ] ) ) : print ( " No " ) break else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = [ c [ i ] [ i ] for i in range ( 3 ) ] c2 = [ sum ( i ) for i in c ] print ( ' Yes ' if sum ( c1 ) * 3 == sum ( c2 ) else ' No ' )
import sys X = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( min ( X [ 0 ] ) + 1 ) : t1 = [ x - i for x in X [ 0 ] ] for j in range ( min ( X [ 1 ] ) + 1 ) : t2 = [ x - j for x in X [ 1 ] ] for k in range ( min ( X [ 2 ] ) + 1 ) : t3 = [ x - k for x in X [ 2 ] ] if t1 == t2 == t3 : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
r1 = list ( map ( int , input ( ) . split ( ) ) ) r2 = list ( map ( int , input ( ) . split ( ) ) ) r3 = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i for j in range ( 3 ) : b [ j ] = r1 [ j ] - a [ 0 ] a [ 1 ] = r2 [ 0 ] - b [ 0 ] a [ 2 ] = r3 [ 0 ] - b [ 0 ] flag = False for j in range ( 3 ) : if r1 [ j ] == a [ 0 ] + b [ j ] and r2 [ j ] == a [ 1 ] + b [ j ] and r3 [ j ] == a [ 2 ] + b [ j ] : flag = True else : flag = False break if flag : break print ( " Yes " ) if flag else print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c1 , c2 , c3 = C [ 0 ] c1 , c2 , c3 = c1 - c2 , c2 - c3 , c3 - c2 ans = ' Yes ' for c in C [ 1 : ] : cc1 , cc2 , cc3 = c cc1 , cc2 , cc3 = cc1 - cc2 , cc2 - cc3 , cc3 - cc2 if c1 == cc1 and c2 == cc2 and c3 == cc3 : pass else : ans = ' No ' break c1 , c2 , c3 = C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] c1 , c2 , c3 = c1 - c2 , c2 - c3 , c3 - c2 for i in range ( 1 , 3 ) : cc1 , cc2 , cc3 = C [ 0 ] [ i ] , C [ 1 ] [ i ] , C [ 2 ] [ i ] cc1 , cc2 , cc3 = cc1 - cc2 , cc2 - cc3 , cc3 - cc2 if c1 == cc1 and c2 == cc2 and c3 == cc3 : pass else : ans = ' No ' break print ( ans )
def mod3 ( num ) : if num % 3 == 0 : return True else : return False cList = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] row = [ sum ( cList [ 0 ] ) , sum ( cList [ 1 ] ) , sum ( cList [ 2 ] ) ] col = [ cList [ 0 ] [ i ] + cList [ 1 ] [ i ] + cList [ 2 ] [ i ] for i in range ( 3 ) ] differenceRow = [ row [ i - 1 ] - row [ i ] for i in range ( 3 ) ] differenceCol = [ col [ i - 1 ] - col [ i ] for i in range ( 3 ) ] difference = [ sum ( row ) ] + differenceRow + differenceCol if list ( filter ( mod3 , difference ) ) != difference : print ( " No " ) else : print ( " Yes " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = [ ] for i in range ( 3 ) : x . append ( [ c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 1 ] ] ) if x [ 0 ] != x [ 1 ] or x [ 1 ] != x [ 2 ] : print ( " No " ) sys . exit ( ) y = [ ] for j in range ( 3 ) : y . append ( [ c [ 1 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 1 ] [ i ] ] ) if y [ 0 ] != y [ 1 ] or y [ 1 ] != y [ 2 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
import sys input = sys . stdin . readline from collections import * c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] : flag = False for i in range ( 3 ) : if c [ i ] [ 2 ] - c [ i ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] : flag = False for i in range ( 3 ) : if c [ 1 ] [ i ] - c [ 0 ] [ i ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : flag = False for i in range ( 3 ) : if c [ 2 ] [ i ] - c [ 1 ] [ i ] != c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
def II ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LMI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def LIIN ( n ) : return list ( int ( input ( ) ) for _ in range ( n ) ) def LMIN ( n ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] def IS ( ) : return input ( ) def MS ( ) : return map ( str , input ( ) . split ( ) ) def LMS ( ) : return list ( map ( str , input ( ) . split ( ) ) ) def LISN ( n ) : return list ( input ( ) for _ in range ( n ) ) def LMSN ( n ) : return [ input ( ) . split ( ) for _ in range ( n ) ] MOD = 10 ** 9 + 7 INF = 10 ** 18 def main ( ) : x = [ 0 ] * 3 y = [ 0 ] * 3 a = LMIN ( 3 ) x [ 0 ] = 0 for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != a [ i ] [ j ] : print ( ' No ' ) return 0 print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) c . append ( ci ) if all ( [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] flag = False for i in range ( c [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : flag = True break else : continue if flag : print ( ' Yes ' ) else : print ( ' No ' )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for x in range ( 3 ) ] total1 = 0 total2 = 0 for i in range ( 3 ) : total1 += sum ( l [ i ] ) total2 += l [ i ] [ i ] if total1 == total2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 a2 = 0 a3 = 0 b1 = 0 b2 = 0 b3 = 0 m = min ( c [ 0 ] ) for i in range ( m + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a2 b3 = c [ 0 ] [ 2 ] - a3 if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 : a2 = c [ 1 ] [ 0 ] - b1 else : continue if c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys input = lambda : sys . stdin . readline ( ) . rstrip ( ) def resolve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] absum = [ ] def dfs ( depth , perm , s ) : if depth == 3 : absum . append ( s ) else : for i in range ( 3 ) : if not i in perm : dfs ( depth + 1 , perm + [ i ] , s + c [ depth ] [ i ] ) dfs ( 0 , [ ] , 0 ) if len ( set ( absum ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : resolve ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a1 = 0 b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 != a2 + b2 : print ( " No " ) elif c23 != a2 + b3 : print ( " No " ) elif c32 != a3 + b2 : print ( " No " ) elif c33 != a3 + b3 : print ( " No " ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dif_1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] dif_2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] dif_3 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] dif_4 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] if c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] != dif_1 or c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] != dif_1 : print ( " No " ) exit ( ) elif c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] != dif_2 or c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] != dif_2 : print ( " No " ) exit ( ) elif c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] != dif_3 or c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] != dif_3 : print ( ' No ' ) exit ( ) elif c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] != dif_4 or c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] != dif_4 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 101 ) : flag1 = False flag2 = False b0 = c [ 0 ] [ 0 ] - i b1 = c [ 0 ] [ 1 ] - i b2 = c [ 0 ] [ 2 ] - i a10 = c [ 1 ] [ 0 ] - b0 a11 = c [ 1 ] [ 1 ] - b1 a12 = c [ 1 ] [ 2 ] - b2 if a10 == a11 == a12 : flag1 = True else : continue a20 = c [ 2 ] [ 0 ] - b0 a21 = c [ 2 ] [ 1 ] - b1 a22 = c [ 2 ] [ 2 ] - b2 if a20 == a21 == a22 : flag2 = True break if flag1 and flag2 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) a = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] b = C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] c = C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] if a == b == c : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 0 , 101 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2 = C [ 1 ] [ 0 ] - b1 if a2 < 0 or C [ 1 ] [ 1 ] - b2 != C [ 1 ] [ 2 ] - b3 or C [ 1 ] [ 1 ] - b2 != a2 : continue a3 = C [ 2 ] [ 0 ] - b1 if a3 < 0 or a3 != C [ 2 ] [ 1 ] - b2 or a3 != C [ 2 ] [ 2 ] - b3 : continue print ( " Yes " ) exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] and C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] \ and C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] and C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = " No " if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : if c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : result = " Yes " print ( result )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] == c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ ] for i in range ( 3 ) : box = list ( map ( int , input ( ) . split ( ) ) ) c . append ( box ) for i in range ( 101 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 : if c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] d = [ [ - 1 , - 1 , - 1 ] for _ in range ( 3 ) ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 d [ 0 ] [ 0 ] = a1 + b1 d [ 0 ] [ 1 ] = a1 + b2 d [ 0 ] [ 2 ] = a1 + b3 d [ 1 ] [ 0 ] = a2 + b1 d [ 1 ] [ 1 ] = a2 + b2 d [ 1 ] [ 2 ] = a2 + b3 d [ 2 ] [ 0 ] = a3 + b1 d [ 2 ] [ 1 ] = a3 + b2 d [ 2 ] [ 2 ] = a3 + b3 if c == d : print ( ' Yes ' ) exit ( 0 ) else : continue print ( ' No ' )
from itertools import permutations l = list ( range ( 3 ) ) l = list ( permutations ( l , 2 ) ) C = [ [ 0 ] * 3 for i in range ( 3 ) ] r = ' Yes ' for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in l : if not C [ 0 ] [ i [ 0 ] ] - C [ 0 ] [ i [ 1 ] ] == C [ 1 ] [ i [ 0 ] ] - C [ 1 ] [ i [ 1 ] ] == C [ 2 ] [ i [ 0 ] ] - C [ 2 ] [ i [ 1 ] ] : r = ' No ' break print ( r )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c7 - c4 == c8 - c5 == c9 - c6 and c4 - c1 == c5 - c2 == c6 - c3 and c3 - c2 == c6 - c5 == c9 - c8 and c2 - c1 == c5 - c4 == c8 - c7 : print ( " Yes " ) else : print ( " No " )
ans = ' Yes ' c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) adiff = [ ] bdiff = [ ] for i in range ( 2 ) : adiff . append ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) bdiff . append ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ) for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if adiff [ i - 1 ] != c [ i ] [ j ] - c [ i - 1 ] [ j ] or bdiff [ j - 1 ] != c [ i ] [ j ] - c [ i ] [ j - 1 ] : ans = ' No ' break print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] row = [ ] p1 = p2 = p3 = 0 for i in c : row . append ( sum ( i ) ) p1 += i [ 0 ] p2 += i [ 1 ] p3 += i [ 2 ] col = [ p1 , p2 , p3 ] con1 , con2 , con3 = row [ 0 ] - row [ 1 ] , row [ 0 ] - row [ 2 ] , row [ 1 ] - row [ 2 ] con4 , con5 , con6 = col [ 0 ] - col [ 1 ] , col [ 0 ] - col [ 2 ] , col [ 1 ] - col [ 2 ] con = [ con1 , con2 , con3 , con4 , con5 , con6 ] for j in con : if j % 3 != 0 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ ] for i in range ( 3 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ i ] [ j % 3 ] - c [ i ] [ ( j + 1 ) % 3 ] ) a . append ( tmp ) for i in range ( 2 ) : for j in range ( 3 ) : if a [ i ] [ j ] != a [ i + 1 ] [ j ] : print ( ' No ' ) break else : continue break else : print ( ' Yes ' )
import sys sys . stdin . readline def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) mod = 10 ** 9 + 7 def main ( ) : c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = LI ( ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] flag = 1 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = 0 if flag == 1 : print ( " Yes " ) else : print ( " No " ) main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] s = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if c [ 0 ] [ j ] - c [ 0 ] [ i ] == c [ 1 ] [ j ] - c [ 1 ] [ i ] == c [ 2 ] [ j ] - c [ 2 ] [ i ] : continue else : s = False break for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if c [ j ] [ 0 ] - c [ i ] [ 0 ] == c [ j ] [ 1 ] - c [ i ] [ 1 ] == c [ j ] [ 2 ] - c [ i ] [ 2 ] : continue else : s = False break print ( " Yes " ) if s else print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] ; x2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] ; y1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] ; y2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] ; C2 = [ [ C [ 0 ] [ 0 ] , C [ 0 ] [ 0 ] + x1 , C [ 0 ] [ 0 ] + x1 + x2 ] , [ C [ 0 ] [ 0 ] + y1 , C [ 0 ] [ 0 ] + x1 + y1 , C [ 0 ] [ 0 ] + x1 + x2 + y1 ] , [ C [ 0 ] [ 0 ] + y1 + y2 , C [ 0 ] [ 0 ] + x1 + y1 + y2 , C [ 0 ] [ 0 ] + x1 + x2 + y1 + y2 ] ] print ( " Yes " if C == C2 else " No " )
from pprint import pprint c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ' ' ) ) ) ) diff_v = [ [ 0 ] * 3 for i in range ( 3 ) ] diff_h = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : if i > 0 : diff_v [ i ] [ j ] = c [ i ] [ j ] - c [ i - 1 ] [ j ] for j in range ( 0 , 3 ) : for i in range ( 0 , 3 ) : if j > 0 : diff_h [ j ] [ i ] = c [ i ] [ j ] - c [ i ] [ j - 1 ] def map_all ( es ) : return all ( [ e == es [ 0 ] for e in es [ 1 : ] ] ) if es else False eq_v = all ( [ map_all ( d ) for d in diff_v ] ) eq_h = all ( [ map_all ( d ) for d in diff_h ] ) if eq_v and eq_h : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] Bs = [ C [ 0 ] [ i ] for i in range ( 3 ) ] As = [ 0 , C [ 1 ] [ 0 ] - Bs [ 0 ] , C [ 2 ] [ 0 ] - Bs [ 0 ] ] if all ( As [ i ] + Bs [ j ] == C [ i ] [ j ] for i in range ( 3 ) for j in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if ( c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] and c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] and c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] and c2 [ 1 ] - c2 [ 0 ] == c1 [ 1 ] - c1 [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] for i in range ( 2 ) : if not c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) for i in range ( 2 ) : if not c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 ans = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == ans [ i ] [ j ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys from fractions import gcd import math from math import ceil , floor import collections from collections import Counter import itertools C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c1 = [ int ( n ) for n in input ( ) . split ( ) ] c2 = [ int ( n ) for n in input ( ) . split ( ) ] c3 = [ int ( n ) for n in input ( ) . split ( ) ] if ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c2 [ 0 ] - c2 [ 1 ] ) ) and ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) and ( ( c2 [ 0 ] - c2 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c2 [ 1 ] - c2 [ 2 ] ) ) and ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) and ( ( c2 [ 1 ] - c2 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c2 [ 0 ] - c2 [ 2 ] ) ) and ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) and ( ( c2 [ 0 ] - c2 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) print ( " Yes " )
import sys lis = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d1 = lis [ 0 ] [ 0 ] - lis [ 0 ] [ 1 ] d2 = lis [ 0 ] [ 1 ] - lis [ 0 ] [ 2 ] flag = ' No ' for l in lis : if l [ 0 ] - l [ 1 ] != d1 or l [ 1 ] - l [ 2 ] != d2 : print ( ' No ' ) sys . exit ( ) else : flag = ' Yes ' print ( flag )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] - ( c [ 0 ] [ 2 ] ) * 2 == c [ 1 ] [ 0 ] + c [ 1 ] [ 1 ] - ( c [ 1 ] [ 2 ] ) * 2 ) and ( c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] - ( c [ 0 ] [ 2 ] ) * 2 == c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] - ( c [ 2 ] [ 2 ] ) * 2 ) : if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] - ( c [ 2 ] [ 0 ] ) * 2 == c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] - ( c [ 2 ] [ 1 ] ) * 2 ) and ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] - ( c [ 2 ] [ 0 ] ) * 2 == c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] - ( c [ 2 ] [ 2 ] ) * 2 ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) * 2 == c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] xd = [ [ c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 1 ] ] for i in range ( 3 ) ] yd = [ [ c [ 1 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 1 ] [ i ] ] for i in range ( 3 ) ] if ( xd [ 0 ] == xd [ 1 ] == xd [ 2 ] and yd [ 0 ] == yd [ 1 ] == yd [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ab = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = " Yes " for i in range ( 3 ) : if ans == " Yes " : for j in range ( 3 ) : if c [ i ] [ j ] != ab [ i ] + ab [ 3 + j ] : ans = " No " break print ( ans )
import sys try : from typing import List except ImportError : pass YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : print ( YES if all ( c [ i ] [ j ] == c [ 0 ] [ j ] + c [ i ] [ 0 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) for j in range ( 1 , 3 ) ) else NO ) def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = " No " if l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 1 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 2 ] [ 0 ] : if l [ 0 ] [ 2 ] - l [ 0 ] [ 1 ] == l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 2 ] [ 1 ] : flag = " Yes " print ( flag )
def check ( a , b ) : for i in range ( 3 ) : diffc [ i ] = c [ i ] [ a ] - c [ i ] [ b ] diffr [ i ] = c [ a ] [ i ] - c [ b ] [ i ] if diffc [ 0 ] != diffc [ 1 ] or diffc [ 1 ] != diffc [ 2 ] or diffr [ 0 ] != diffr [ 1 ] or diffr [ 1 ] != diffr [ 2 ] : print ( " No " ) exit ( ) c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] diffr = [ 0 ] * 3 diffc = [ 0 ] * 3 check ( 0 , 1 ) check ( 1 , 2 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a , b = [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for j in range ( 1 , 3 ) : a [ j ] = c [ j ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if c [ j ] [ i ] == a [ j ] + b [ i ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ c [ 0 ] [ i ] - 0 for i in range ( 3 ) ] b = [ c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) ] d = [ [ a [ i ] + b [ j ] for i in range ( 3 ) ] for j in range ( 3 ) ] print ( ' Yes ' if c == d else ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] and c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : flg = 0 else : flg = 1 if flg == 0 : print ( " Yes " ) else : print ( " No " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
import numpy as np a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = np . array ( a ) for i in range ( 3 ) : a [ i ] -= min ( a [ i ] ) print ( ' Yes ' if all ( a [ 0 ] == a [ 1 ] ) and all ( a [ 1 ] == a [ 2 ] ) else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
src = [ ] src . append ( list ( map ( int , input ( ) . split ( ) ) ) ) src . append ( list ( map ( int , input ( ) . split ( ) ) ) ) src . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for n1 , n2 in zip ( [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] ) : if not len ( set ( s [ n1 ] - s [ n2 ] for s in src ) ) == 1 or \ not len ( set ( s1 - s2 for s1 , s2 in zip ( src [ n1 ] , src [ n2 ] ) ) ) == 1 : dst = " No " break else : dst = " Yes " print ( dst )
def main ( ) : num_list = [ ] for _ in range ( 3 ) : num_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a1 = 0 b1 = num_list [ 0 ] [ 0 ] - a1 b2 = num_list [ 0 ] [ 1 ] - a1 b3 = num_list [ 0 ] [ 2 ] - a1 a2 = num_list [ 1 ] [ 0 ] - b1 a3 = num_list [ 2 ] [ 0 ] - b1 isGood = True if a1 + b1 != num_list [ 0 ] [ 0 ] : isGood = False if a1 + b2 != num_list [ 0 ] [ 1 ] : isGood = False if a1 + b3 != num_list [ 0 ] [ 2 ] : isGood = False if a2 + b1 != num_list [ 1 ] [ 0 ] : isGood = False if a2 + b2 != num_list [ 1 ] [ 1 ] : isGood = False if a2 + b3 != num_list [ 1 ] [ 2 ] : isGood = False if a3 + b1 != num_list [ 2 ] [ 0 ] : isGood = False if a3 + b2 != num_list [ 2 ] [ 1 ] : isGood = False if a3 + b3 != num_list [ 2 ] [ 2 ] : isGood = False print ( ' Yes ' if isGood else ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) d = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : d [ i ] [ j ] = C [ i + 1 ] [ j ] - C [ i ] [ j ] for i in range ( 2 ) : for j in range ( 2 ) : if d [ i ] [ j ] != d [ i ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = [ c1 , c2 , c3 ] f = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if a1 + b1 == C [ 0 ] [ 0 ] and a1 + b2 == C [ 0 ] [ 1 ] and a1 + b3 == C [ 0 ] [ 2 ] and a2 + b1 == C [ 1 ] [ 0 ] and a2 + b2 == C [ 1 ] [ 1 ] and a2 + b3 == C [ 1 ] [ 2 ] and a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] and a3 + b3 == C [ 2 ] [ 2 ] : f = True break if f == True : print ( ' Yes ' ) else : print ( ' No ' )
c1 = [ int ( elem ) for elem in input ( ) . split ( ) ] c2 = [ int ( elem ) for elem in input ( ) . split ( ) ] c3 = [ int ( elem ) for elem in input ( ) . split ( ) ] x1 = c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] x2 = c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] x3 = c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] x4 = c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] x5 = c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] x6 = c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] if x1 and x2 and x3 and x4 and x5 and x6 : print ( " Yes " ) else : print ( " No " )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) diff0 = [ x - y for x , y in zip ( c [ 0 ] , c [ 1 ] ) ] diff1 = [ x - y for x , y in zip ( c [ 0 ] , c [ 2 ] ) ] if diff0 [ 0 ] == diff0 [ 1 ] and diff0 [ 0 ] == diff0 [ 2 ] and diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 0 ] == diff1 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
M = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = { i : - 1 for i in range ( 3 ) } B = { i : - 1 for i in range ( 3 ) } checker = False for a1 in range ( 100 ) : A [ 0 ] = a1 B [ 0 ] = M [ 0 ] [ 0 ] - a1 B [ 1 ] = M [ 0 ] [ 1 ] - a1 B [ 2 ] = M [ 0 ] [ 2 ] - a1 A [ 1 ] = M [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = M [ 2 ] [ 0 ] - B [ 0 ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if M [ i ] [ j ] == A [ i ] + B [ j ] : cnt += 1 if cnt == 9 : checker = True break if checker : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 0 , 0 , 0 ] y = [ 0 , 0 , 0 ] for i in range ( 3 ) : y [ i ] = C [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = C [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != C [ i ] [ j ] : flag = False print ( ' Yes ' if flag else ' No ' )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) c00 = c [ 0 ] [ 0 ] c11 = c [ 1 ] [ 1 ] c22 = c [ 2 ] [ 2 ] for a0 in range ( c00 + 1 ) : for a1 in range ( c11 + 1 ) : for a2 in range ( c22 + 1 ) : A = [ a0 , a1 , a2 ] B = [ c00 - a0 , c11 - a1 , c22 - a2 ] tmp = [ ] for a in A : row = [ ] for b in B : row . append ( a + b ) tmp . append ( row ) if tmp == c : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys IS = lambda : sys . stdin . readline ( ) . rstrip ( ) II = lambda : int ( IS ( ) ) MII = lambda : list ( map ( int , IS ( ) . split ( ) ) ) MIIZ = lambda : list ( map ( lambda x : x - 1 , MII ( ) ) ) def main ( ) : cc = [ MII ( ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if cc [ i ] [ 0 ] - cc [ i + 1 ] [ 0 ] != cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] : flag = False if cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] != cc [ i ] [ 2 ] - cc [ i + 1 ] [ 2 ] : flag = False if cc [ 0 ] [ i ] - cc [ 0 ] [ i + 1 ] != cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] : flag = False if cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] != cc [ 2 ] [ i ] - cc [ 2 ] [ i + 1 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
listA = [ ] list_number = [ ] for i in range ( 3 ) : list_number . append ( list ( map ( int , input ( ) . split ( ) ) ) ) listA . append ( [ min ( list_number [ 0 ] ) , min ( list_number [ 1 ] ) , min ( list_number [ 2 ] ) ] ) b1 = min ( list_number [ 0 ] [ 0 ] , list_number [ 1 ] [ 0 ] , list_number [ 2 ] [ 0 ] ) b2 = min ( list_number [ 0 ] [ 1 ] , list_number [ 1 ] [ 1 ] , list_number [ 2 ] [ 1 ] ) b3 = min ( list_number [ 0 ] [ 2 ] , list_number [ 1 ] [ 2 ] , list_number [ 2 ] [ 2 ] ) listA . append ( [ b1 , b2 , b3 ] ) for i in range ( 3 ) : list_number [ i ] = list ( map ( lambda x : x - listA [ 0 ] [ i ] , list_number [ i ] ) ) for j in range ( 3 ) : B = set ( [ list_number [ 0 ] [ j ] , list_number [ 1 ] [ j ] , list_number [ 2 ] [ j ] ] ) if len ( B ) == 1 : pass else : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] A = [ [ a1 , a1 , a1 ] , [ a2 , a2 , a2 ] , [ a3 , a3 , a3 ] ] B = [ [ b1 , b2 , b3 ] , [ b1 , b2 , b3 ] , [ b1 , b2 , b3 ] ] C = c ans = " Yes " for x in range ( 3 ) : for y in range ( 3 ) : if A [ x ] [ y ] + B [ x ] [ y ] != C [ x ] [ y ] : ans = " No " break print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : if c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) print ( " No " )
c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) diff = [ ] for i in range ( 2 ) : diff . append ( c_1 [ i ] - c_1 [ i + 1 ] ) if c_2 [ 0 ] - c_2 [ 1 ] != diff [ 0 ] or c_2 [ 1 ] - c_2 [ 2 ] != diff [ 1 ] : print ( " No " ) exit ( ) if c_3 [ 0 ] - c_3 [ 1 ] != diff [ 0 ] or c_3 [ 1 ] - c_3 [ 2 ] != diff [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
def solve ( CC ) : R = [ sum ( CC [ i ] ) for i in range ( 3 ) ] C = [ sum ( CC [ j ] [ i ] for j in range ( 3 ) ) for i in range ( 3 ) ] checked = all ( ( R [ i ] - R [ i - 1 ] ) % 3 == 0 for i in range ( 3 ) ) checked &= all ( ( C [ i ] - C [ i - 1 ] ) % 3 == 0 for i in range ( 3 ) ) return ' Yes ' if checked else ' No ' _CC = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( solve ( _CC ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - \ c [ 2 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b = C [ 0 ] a = [ C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : print ( ' No ' ) elif c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] m = 0 for i in range ( 3 ) : m += sum ( x [ i ] ) if m % 3 == 0 and ( x [ 0 ] [ 0 ] + x [ 1 ] [ 1 ] + x [ 2 ] [ 2 ] ) * 3 == m : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = False for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : ok = True b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 1 ] [ 0 ] != a2 + b1 or \ c [ 1 ] [ 1 ] != a2 + b2 or \ c [ 1 ] [ 2 ] != a2 + b3 or \ c [ 2 ] [ 0 ] != a3 + b1 or \ c [ 2 ] [ 1 ] != a3 + b2 or \ c [ 2 ] [ 2 ] != a3 + b3 : ok = False if ok : ans = True if ans : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 ok = True b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np C = [ ] for i in range ( 3 ) : c_horizontal = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c_horizontal ) A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) Ab = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , C [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , C [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , C [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , C [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , C [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , C [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , C [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , C [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , C [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankAb = np . linalg . matrix_rank ( Ab ) if rankA == rankAb : print ( ' Yes ' ) else : print ( ' No ' )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) l = [ l1 , l2 , l3 ] c = l [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : l [ i ] [ j ] -= c if ( l [ 1 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 2 ] [ 0 ] ) and ( l [ 1 ] [ 2 ] == l [ 0 ] [ 2 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( " No " )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_ans = [ 0 for i in range ( 3 ) ] b_ans = [ 0 for i in range ( 3 ) ] a_ans [ 0 ] = ( ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) + ( c_list [ 0 ] [ 1 ] - c_list [ 1 ] [ 1 ] ) ) // 2 a_ans [ 1 ] = a_ans [ 0 ] - ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) a_ans [ 2 ] = c_list [ 2 ] [ 0 ] - c_list [ 0 ] [ 0 ] + a_ans [ 0 ] b_ans [ 0 ] = c_list [ 0 ] [ 0 ] - a_ans [ 0 ] b_ans [ 1 ] = c_list [ 0 ] [ 1 ] - a_ans [ 0 ] b_ans [ 2 ] = c_list [ 0 ] [ 2 ] - a_ans [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c_list [ i ] [ j ] != a_ans [ i ] + b_ans [ j ] : ans = " No " break print ( ans )
C = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( " YNeos " [ not all ( C [ i ] [ j ] + C [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] == C [ ( i + 1 ) % 3 ] [ j ] + C [ i ] [ ( j + 1 ) % 3 ] for i in range ( 3 ) for j in range ( 3 ) ) : : 2 ] )
l = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) l . append ( [ c1 , c2 , c3 ] ) b1 = l [ 0 ] [ 0 ] b2 = l [ 1 ] [ 0 ] b3 = l [ 2 ] [ 0 ] flag = 0 for i in range ( 3 ) : if not ( l [ 0 ] [ 1 ] - b1 == l [ 1 ] [ 1 ] - b2 == l [ 2 ] [ 1 ] - b3 ) : flag = 1 if not ( l [ 0 ] [ 2 ] - b1 == l [ 1 ] [ 2 ] - b2 == l [ 2 ] [ 2 ] - b3 ) : flag = 1 if flag == 1 : print ( ' No ' , flush = True ) else : print ( ' Yes ' , flush = True )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : res1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] res2 = c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] res3 = c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] if res1 == res2 == res3 : continue else : print ( ' No ' ) exit ( ) for j in range ( 2 ) : res1 = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] res2 = c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] res3 = c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] if res1 == res2 == res3 : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from __future__ import print_function import sys sys . setrecursionlimit ( 500000 ) import re import array import copy import functools import operator import math import string import fractions from fractions import Fraction import collections import itertools import bisect import random import time import heapq from heapq import heappush from heapq import heappop from heapq import heappushpop from heapq import heapify from heapq import heapreplace from queue import PriorityQueue as pq from queue import Queue from itertools import accumulate from collections import deque from collections import Counter from operator import mul from functools import reduce input = sys . stdin . readline def eprint ( * args , ** kwargs ) : print ( * args , file = sys . stderr , ** kwargs ) return def combinations_count ( n , r ) : r = min ( r , n - r ) numer = reduce ( mul , range ( n , n - r , - 1 ) , 1 ) denom = reduce ( mul , range ( 1 , r + 1 ) , 1 ) return numer // denom def main ( ) : c = [ [ ] for _ in range ( 4 ) ] for i in range ( 1 , 4 ) : c [ i ] = [ 0 ] + list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) def diff ( i , j , k ) : return c [ k ] [ i ] - c [ k ] [ j ] if diff ( 3 , 2 , 1 ) == diff ( 3 , 2 , 2 ) == diff ( 3 , 2 , 3 ) and diff ( 2 , 1 , 1 ) == diff ( 2 , 1 , 2 ) == diff ( 2 , 1 , 3 ) : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
import sys input = sys . stdin . readline def main ( ) : while True : N , M = map ( int , input ( ) . split ( ) ) if N == 0 : break path = [ [ False ] * N for i in range ( N ) ] for i in range ( M ) : u , v = map ( int , input ( ) . split ( ) ) u -= 1 ; v - = 1 ; path [ u ] [ v ] = True path [ v ] [ u ] = True d = [ - 1 ] * N d [ 0 ] = 0 q = [ 0 ] while len ( q ) > 0 : now = q . pop ( 0 ) for i in range ( N ) : if path [ now ] [ i ] and d [ i ] == - 1 : q . append ( i ) d [ i ] = d [ now ] + 1 ok = True for i in range ( 1 , N ) : for j in range ( i + 1 , N ) : if path [ i ] [ j ] and d [ i ] == d [ j ] : ok = False break if not ok : break if not ok : print ( 0 ) else : num = 0 for i in range ( N ) : if d [ i ] & 1 : num + = 1 if N & 1 : print ( 1 ) if num & 1 : print ( ( N - num ) // 2 ) else : print ( num // 2 ) else : if num & 1 : print ( 0 ) else : if N // 2 == num : print ( 1 ) print ( num // 2 ) else : print ( 2 ) tmp = min ( num , N - num ) print ( tmp // 2 ) print ( ( N - tmp ) // 2 ) if __name__ == " __main__ " : main ( )
mat = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( a ) ans = False if mat [ 1 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 0 ] [ 2 ] : if mat [ 2 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] and mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 2 ] [ 2 ] - mat [ 0 ] [ 2 ] : ans = True if ans : print ( " Yes " ) else : print ( " No " )
import numpy as np def main ( ) -> None : c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] , dtype = int ) a = np . empty ( 3 , dtype = int ) b = np . empty ( 3 , dtype = int ) a [ 0 ] = 0 range_3 = range ( 3 ) for j in range_3 : b [ j ] = c_1 [ j ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i , a_i in enumerate ( a ) : for j , b_j in enumerate ( b ) : if a_i + b_j != c [ i ] [ j ] : good = False if good : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 a2 = c2 [ 0 ] - c1 [ 0 ] a3 = c3 [ 0 ] - c1 [ 0 ] b1 = c1 [ 0 ] b2 = c1 [ 1 ] b3 = c1 [ 2 ] if c1 [ 0 ] == a1 + b1 and c1 [ 1 ] == a1 + b2 and c1 [ 2 ] == a1 + b3 and c2 [ 0 ] == a2 + b1 and c2 [ 1 ] == a2 + b2 and c2 [ 2 ] == a2 + b3 and c3 [ 0 ] == a3 + b1 and c3 [ 1 ] == a3 + b2 and c3 [ 2 ] == a3 + b3 : print ( ' Yes ' ) else : print ( ' No ' )
L = [ ] for i in range ( 3 ) : S = list ( map ( int , input ( ) . split ( ) ) ) L . append ( S ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - i ] [ 2 - j ] - L [ 1 - i ] [ 2 - j ] != L [ 2 - i ] [ 1 - j ] - L [ 1 - i ] [ 1 - j ] : print ( " No " ) exit ( ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - j ] [ 2 - i ] - L [ 1 - j ] [ 2 - i ] != L [ 2 - j ] [ 1 - i ] - L [ 1 - j ] [ 1 - i ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] s = sum ( [ sum ( l ) for l in c ] ) print ( ' Yes ' if s / 3 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = [ 0 ] y = [ ] for i in range ( 3 ) : y . append ( c [ 0 ] [ i ] - x [ 0 ] ) for i in range ( 1 , 3 ) : x . append ( c [ i ] [ 0 ] - y [ 0 ] ) ans = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np Num = np . zeros ( ( 3 , 3 ) , dtype = int ) Flag = False for T in range ( 0 , 3 ) : Num [ T , : ] = np . array ( [ int ( X ) for X in input ( ) . split ( ) ] ) for T in range ( 0 , 3 ) : Num [ : , T ] -= Num [ 0 , T ] for A2 in range ( min ( Num [ 1 , : ] ) , max ( Num [ 1 , : ] ) + 1 ) : AB2 = np . array ( [ A2 + Num [ 0 , 0 ] , A2 + Num [ 0 , 1 ] , A2 + Num [ 0 , 2 ] ] ) if np . all ( AB2 == Num [ 1 , : ] ) : for A3 in range ( min ( Num [ 2 , : ] ) , max ( Num [ 2 , : ] ) + 1 ) : AB3 = np . array ( [ A3 + Num [ 0 , 0 ] , A3 + Num [ 0 , 1 ] , A3 + Num [ 0 , 2 ] ] ) if np . all ( AB3 == Num [ 2 , : ] ) : Flag = True break if Flag : break if Flag : print ( ' Yes ' ) else : print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c3 - c2 == c6 - c5 and c6 - c5 == c9 - c8 and c2 - c1 == c5 - c4 and c5 - c4 == c8 - c7 and c4 - c1 == c5 - c2 and c5 - c2 == c6 - c3 and c7 - c4 == c8 - c5 and c8 - c5 == c9 - c6 : print ( " Yes " ) else : print ( " No " )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : from itertools import product for a1 , b1 in product ( range ( 101 ) , repeat = 2 ) : a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if a2 < 0 or a3 < 0 or b2 < 0 or b3 < 0 : continue a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] if all ( ( a [ i ] + b [ j ] ) == c [ i ] [ j ] for i , j in product ( range ( 3 ) , repeat = 2 ) ) : return YES return NO def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] print ( solve ( c ) ) def test ( ) : import doctest doctest . testmod ( ) if __name__ == ' __main__ ' : main ( )
C = [ None for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ok = True diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ i ] [ 1 ] - C [ i ] [ 0 ] if len ( set ( diff ) ) > 1 : ok = False diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ i ] [ 2 ] - C [ i ] [ 1 ] if len ( set ( diff ) ) > 1 : ok = False diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ 1 ] [ i ] - C [ 0 ] [ i ] if len ( set ( diff ) ) > 1 : ok = False diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ 2 ] [ i ] - C [ 1 ] [ i ] if len ( set ( diff ) ) > 1 : ok = False print ( ( " No " , " Yes " ) [ ok ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = all ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] and c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] for i in range ( 2 ) ) print ( [ " No " , " Yes " ] [ flg ] )
import numpy as np array = np . zeros ( ( 3 , 3 ) , dtype = " int8 " ) for i in range ( 3 ) : inputs = [ int ( x ) for x in input ( ) . split ( ) ] for j in range ( 3 ) : array [ i , j ] = inputs [ j ] b_1 = array [ 0 , 0 ] b_2 = array [ 0 , 1 ] b_3 = array [ 0 , 2 ] a_2 = array [ 1 , 0 ] - b_1 a_3 = array [ 2 , 0 ] - b_1 if ( array [ 1 , 1 ] == ( a_2 + b_2 ) ) & ( array [ 2 , 2 ] == ( a_3 + b_3 ) ) & ( array [ 1 , 2 ] == ( a_2 + b_3 ) ) & ( array [ 2 , 1 ] == ( a_3 + b_2 ) ) : flag = 1 else : flag = 0 if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ ] b = [ ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : a . append ( c [ i ] [ j ] - c [ 0 ] [ j ] ) b . append ( c [ j ] [ i ] - c [ j ] [ 0 ] ) ans = ' No ' if a [ 0 ] == a [ 1 ] and a [ 0 ] == a [ 2 ] and a [ 3 ] == a [ 4 ] and a [ 3 ] == a [ 5 ] : if b [ 0 ] == b [ 1 ] and b [ 0 ] == b [ 2 ] and b [ 3 ] == b [ 4 ] and b [ 3 ] == b [ 5 ] : ans = ' Yes ' print ( ans )
S = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] C1 = S [ 0 ] [ 0 ] C2 = S [ 0 ] [ 1 ] C3 = S [ 0 ] [ 2 ] C4 = S [ 1 ] [ 0 ] C5 = S [ 1 ] [ 1 ] C6 = S [ 1 ] [ 2 ] C7 = S [ 2 ] [ 0 ] C8 = S [ 2 ] [ 1 ] C9 = S [ 2 ] [ 2 ] if C4 - C1 == C6 - C3 and C6 - C3 == C5 - C2 and C7 - C1 == C8 - C2 and C8 - C2 == C9 - C3 : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) diff1 = c21 - c11 diff2 = c31 - c21 if diff1 == ( c22 - c12 ) and diff2 == ( c32 - c22 ) and diff1 == ( c23 - c13 ) and diff2 == ( c33 - c23 ) : print ( " Yes " ) else : print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] and a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
def checker ( ded , da ) : for i in range ( 3 ) : for j in range ( 2 ) : if da [ i ] [ j ] - ded [ j ] != da [ i ] [ 2 ] - ded [ 2 ] : return False return True def ma ( da ) : for i in range ( - 100 , 101 ) : for j in range ( - 100 , 101 ) : for k in range ( - 100 , 101 ) : if checker ( [ i , j , k ] , da ) : return False return True da = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ma ( da ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline def read ( ) : C = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . strip ( ) . split ( ) ) C . append ( ( c1 , c2 , c3 ) ) return C , def solve ( C ) : for b0 in range ( 101 ) : for b1 in range ( 101 ) : for b2 in range ( 101 ) : x = C [ 0 ] [ 0 ] - b0 y = C [ 0 ] [ 1 ] - b1 z = C [ 0 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 1 ] [ 0 ] - b0 y = C [ 1 ] [ 1 ] - b1 z = C [ 1 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 2 ] [ 0 ] - b0 y = C [ 2 ] [ 1 ] - b1 z = C [ 2 ] [ 2 ] - b2 if x != y or y != z : continue return " Yes " return " No " if __name__ == ' __main__ ' : inputs = read ( ) print ( solve ( * inputs ) )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( min ( c [ 0 ] ) + 1 ) : b = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] if c [ 1 ] [ 0 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] == c [ 1 ] [ 2 ] - b [ 2 ] : if c [ 2 ] [ 0 ] - b [ 0 ] == c [ 2 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
a1 = 0 c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - b1 == c22 - b2 == c23 - b3 and c31 - b1 == c32 - b2 == c33 - b3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if not c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : ans = ' No ' if not c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : ans = ' No ' print ( ans )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) flag = 0 a = [ 0 ] * 6 b = [ 0 ] * 6 for i in range ( 3 ) : for j in range ( 2 ) : a [ i * 2 + j ] = c [ i ] [ j + 1 ] - c [ i ] [ j ] b [ i * 2 + j ] = c [ j + 1 ] [ i ] - c [ j ] [ i ] if a [ 0 ] == a [ 2 ] == a [ 4 ] : flag + = 1 if a [ 1 ] == a [ 3 ] == a [ 5 ] : flag + = 1 if b [ 0 ] == b [ 2 ] == b [ 4 ] : flag + = 1 if b [ 1 ] == b [ 3 ] == b [ 5 ] : flag + = 1 if flag == 4 : print ( " Yes " ) else : print ( " No " )
import numpy as np import math import sys from collections import defaultdict input = sys . stdin . readline A = np . array ( ( list ( map ( int , input ( ) . split ( ) ) ) ) ) B = np . array ( ( list ( map ( int , input ( ) . split ( ) ) ) ) ) C = np . array ( ( list ( map ( int , input ( ) . split ( ) ) ) ) ) def kc ( i , a , b , c ) : if a [ i ] - a [ i - 1 ] == b [ i ] - b [ i - 1 ] == c [ i ] - c [ i - 1 ] : return True else : return False def kcc ( a , b , c ) : if ( a - b ) [ 0 ] == ( a - b ) [ 1 ] == ( a - b ) [ 2 ] and ( b - c ) [ 0 ] == ( b - c ) [ 1 ] == ( b - c ) [ 2 ] and ( c - a ) [ 0 ] == ( c - a ) [ 1 ] == ( c - a ) [ 2 ] : return True else : return False if kcc ( A , B , C ) and kc ( 0 , A , B , C ) and kc ( 1 , A , B , C ) and kc ( 2 , A , B , C ) : print ( ' Yes ' ) else : print ( ' No ' )
C = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) cnt = 0 if C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] : cnt + = 1 if C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : cnt + = 1 if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] : cnt + = 1 if cnt == 6 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = [ int ( x ) for x in input ( ) . split ( ) ] ans = False if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and \ c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : ans = True if ans == True : print ( ' Yes ' ) else : print ( ' No ' )
m = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : m [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a1 = a2 = a3 = 0 b1 , b2 , b3 = m [ 0 ] a2 = m [ 1 ] [ 0 ] - b1 a3 = m [ 2 ] [ 0 ] - b1 if ( ( m [ 1 ] [ 1 ] != a2 + b2 ) or ( m [ 1 ] [ 2 ] != a2 + b3 ) or ( m [ 2 ] [ 1 ] != a3 + b2 ) or ( m [ 2 ] [ 2 ] != a3 + b3 ) ) : print ( ' No ' ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : cnt += 1 print ( ' Yes ' if cnt == 9 else ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) k = c2 - c1 failflag = 0 if ( c5 - c4 ) != k or ( c8 - c7 ) != k : failflag = 1 k = c3 - c2 if ( c6 - c5 ) != k or ( c9 - c8 ) != k : failflag = 1 k = c4 - c1 if ( c5 - c2 ) != k or ( c6 - c3 ) != k : failflag = 1 k = c7 - c4 if ( c8 - c5 ) != k or ( c9 - c6 ) != k : failflag = 1 if failflag == 0 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ians = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ] jans = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] ok = True for i in range ( 1 , 3 ) : for j in range ( 3 ) : if ians [ j ] != c [ i ] [ j ] - c [ i ] [ 0 ] : ok = False for i in range ( 1 , 3 ) : for j in range ( 3 ) : if jans [ j ] != c [ j ] [ i ] - c [ 0 ] [ i ] : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] and b [ 0 ] - a [ 0 ] == b [ 1 ] - a [ 1 ] == b [ 2 ] - a [ 2 ] and a [ 2 ] - a [ 1 ] == b [ 2 ] - b [ 1 ] == c [ 2 ] - c [ 1 ] and a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
x = [ ] y = [ ] z = [ ] for j in range ( 3 ) : x1 , y1 , z1 = [ int ( i ) for i in input ( ) . split ( ) ] x . append ( x1 ) y . append ( y1 ) z . append ( z1 ) for p in range ( 2 ) : if x [ p ] - x [ p + 1 ] != y [ p ] - y [ p + 1 ] or y [ p ] - y [ p + 1 ] != z [ p ] - z [ p + 1 ] : print ( " No " ) break if x [ 0 ] - y [ 0 ] != x [ 1 ] - y [ 1 ] or x [ 1 ] - y [ 1 ] != x [ 2 ] - y [ 2 ] : print ( " No " ) break if z [ 0 ] - y [ 0 ] != z [ 1 ] - y [ 1 ] or z [ 1 ] - y [ 1 ] != z [ 2 ] - y [ 2 ] : print ( " No " ) break if p == 1 : print ( " Yes " )
def resolve ( ) : g = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = max ( map ( max , g ) ) for a in range ( m + 1 ) : for b in range ( m + 1 ) : for c in range ( m + 1 ) : y = [ a , b , c ] x = [ g [ i ] [ i ] - y [ i ] for i in range ( 3 ) ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : v = y [ i ] + x [ j ] if g [ i ] [ j ] != v : ans = False if ans : print ( ' Yes ' ) return print ( ' No ' ) resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = [ ] for j in range ( 2 ) : d . append ( c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] ) for i in range ( 1 , 3 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i ] [ j + 1 ] != d [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 flag = c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 print ( ' Yes ' if flag else ' No ' )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) if ( sum ( A ) + sum ( B ) + sum ( C ) ) / 3 == A [ 0 ] + B [ 1 ] + C [ 2 ] == A [ 2 ] + B [ 1 ] + C [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] yes = " Yes " no = " No " def solver ( c_grid ) : result = no a_list = [ 0 , c_grid [ 1 ] [ 0 ] - c_grid [ 0 ] [ 0 ] , c_grid [ 2 ] [ 0 ] - c_grid [ 0 ] [ 0 ] ] b_list = [ c_grid [ 0 ] [ 0 ] , c_grid [ 0 ] [ 1 ] , c_grid [ 0 ] [ 2 ] ] if ( c_grid [ 1 ] [ 1 ] == a_list [ 1 ] + b_list [ 1 ] ) and \ ( c_grid [ 1 ] [ 2 ] == a_list [ 1 ] + b_list [ 2 ] ) and \ ( c_grid [ 2 ] [ 1 ] == a_list [ 2 ] + b_list [ 1 ] ) and \ ( c_grid [ 2 ] [ 2 ] == a_list [ 2 ] + b_list [ 2 ] ) : result = yes return result if __name__ == " __main__ " : c_grid = list ( ) for _ in range ( 3 ) : c_grid . append ( LI ( ) ) print ( " {} " . format ( solver ( c_grid ) ) )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] and a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , ( input ( ) . split ( ) ) ) ) a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] b1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] if c [ 1 ] [ 1 ] - c [ 0 ] [ 0 ] == a1 + b1 and c [ 2 ] [ 1 ] - c [ 0 ] [ 0 ] == a2 + b1 and c [ 1 ] [ 2 ] - c [ 0 ] [ 0 ] == a1 + b2 and c [ 2 ] [ 2 ] - c [ 0 ] [ 0 ] == a2 + b2 : print ( " Yes " ) else : print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False print ( " Yes " if flag else " No " )
import sys input = sys . stdin . readline def main ( ) : mC = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] mD = [ [ mC [ i ] [ j ] - mC [ i ] [ j + 1 ] for j in range ( 2 ) ] for i in range ( 3 ) ] mE = [ [ mC [ i ] [ j ] - mC [ i + 1 ] [ j ] for i in range ( 2 ) ] for j in range ( 3 ) ] res = " Yes " if any ( vd != mD [ 0 ] for vd in mD [ 1 : ] ) \ or any ( ve != mE [ 0 ] for ve in mE [ 1 : ] ) : res = " No " print ( res ) main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] and C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : pass else : flag = False for i in range ( 2 ) : if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] and C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
y1_list = list ( map ( int , input ( ) . split ( ) ) ) y2_list = list ( map ( int , input ( ) . split ( ) ) ) y3_list = list ( map ( int , input ( ) . split ( ) ) ) L = [ y1_list , y2_list , y3_list ] a1 = list ( ) a2 = list ( ) b1 = list ( ) b2 = list ( ) for i in range ( 3 ) : a1 . append ( y1_list [ i ] - y2_list [ i ] ) a2 . append ( y2_list [ i ] - y3_list [ i ] ) b1 . append ( L [ i ] [ 0 ] - L [ i ] [ 1 ] ) b2 . append ( L [ i ] [ 1 ] - L [ i ] [ 2 ] ) if ( a1 [ 0 ] == a1 [ 1 ] and a1 [ 2 ] == a1 [ 0 ] ) and ( b1 [ 0 ] == b1 [ 1 ] and b1 [ 2 ] == b1 [ 0 ] ) : if ( a2 [ 0 ] == a2 [ 1 ] and a2 [ 2 ] == a2 [ 0 ] ) and ( b2 [ 0 ] == b2 [ 1 ] and b2 [ 2 ] == b2 [ 0 ] ) : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A , B , C , D , E , F , G , H , I = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] , c [ 1 ] [ 0 ] , c [ 1 ] [ 1 ] , c [ 1 ] [ 2 ] , c [ 2 ] [ 0 ] , c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] if max ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) == min ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) : print ( " Yes " ) else : print ( " No " )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) a = 0 if C2 [ 0 ] - C1 [ 0 ] == C2 [ 1 ] - C1 [ 1 ] == C2 [ 2 ] - C1 [ 2 ] : a2 = C2 [ 0 ] - C1 [ 0 ] a += 1 if C3 [ 0 ] - C2 [ 0 ] == C3 [ 1 ] - C2 [ 1 ] == C3 [ 2 ] - C2 [ 2 ] : a3 = C3 [ 0 ] - C2 [ 0 ] a += 1 if a == 2 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = ' No ' for a1 in range ( 100 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : ans = ' Yes ' break print ( ans )
c = [ [ int ( j ) for j in input ( ) . split ( ) ] for i in range ( 3 ) ] flag = True diffb21 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] diffb32 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != diffb21 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != diffb32 : flag = False tc = list ( zip ( * c ) ) diffa21 = tc [ 0 ] [ 1 ] - tc [ 0 ] [ 0 ] diffa32 = tc [ 0 ] [ 2 ] - tc [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if tc [ i ] [ 1 ] - tc [ i ] [ 0 ] != diffa21 or tc [ i ] [ 2 ] - tc [ i ] [ 1 ] != diffa32 : flag = False print ( ' Yes ' if flag else ' No ' )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = li [ 0 ] for i in li : for j in range ( - 100 , 102 ) : if j == 101 : print ( " No " ) exit ( ) if [ i + j for i in ans ] == i : break print ( " Yes " )
import sys read = sys . stdin . buffer . read input = sys . stdin . buffer . readline inputs = sys . stdin . buffer . readlines def main ( ) : data = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( - 1 , 2 , 1 ) : s = set ( ) for j in range ( 3 ) : s . add ( data [ i ] [ j ] - data [ i + 1 ] [ j ] ) if len ( s ) != 1 : ans = " No " for i in range ( - 1 , 2 , 1 ) : s = set ( ) for j in range ( 3 ) : s . add ( data [ j ] [ i ] - data [ j ] [ i + 1 ] ) if len ( s ) != 1 : ans = " No " print ( ans ) if __name__ == " __main__ " : main ( )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] h1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] h2 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] w1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] w2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] if h1 and h2 and w1 and w2 : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = ' No ' for i in range ( c11 + 1 ) : a1 = i b1 = c11 - a1 a2 = c21 - b1 b2 = c12 - a1 a3 = c31 - b1 b3 = c13 - a1 if ( a2 + b2 == c22 ) and ( a2 + b3 == c23 ) and ( a3 + b2 == c32 ) and ( a3 + b3 == c33 ) : ans = ' Yes ' break print ( ans )
import sys from io import StringIO import unittest class TestClass ( unittest . TestCase ) : def assertIO ( self , input , output ) : stdout , stdin = sys . stdout , sys . stdin sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) resolve ( ) sys . stdout . seek ( 0 ) out = sys . stdout . read ( ) [ : - 1 ] sys . stdout , sys . stdin = stdout , stdin self . assertEqual ( out , output ) def test_入力例_1(self) : inp u t = out u = sel . sser t IO(input , outp u ) def t st_ 力例_2(self): inpu t = o u t ut = e f.asse t O(in p ut, outp u t) de f test_入 力 _3( elf): input = ou t put = elf.a s rtIO(i p t, o u tput) de f test _ 力例_4(s e f): input = output = self . a sertI ( nput, u put) def reso l ve(): = [] f r _ in rang e ( 3 : c a p end l st map(i n t , n p ut().s p lit( ) ))) a1 = 0 b1 = c [0][0 ] - a b [0 [ ] - a 1 3 = [0 [ ] - a 1 2 = [1 [ ] - b 1 3 = [2 [ ] - b 1 f a2 b2 = c [ 1 ] [ 1 nd a2 b3 == c[ ] [ 2 ] a n a3 b2 == c[ ] [ 1 ] a n a3 b3 == c[ ] [ 2 ] : p int "Y e s" e s e : p r i n ("No" ) if _ _ ame_ _ == "_ _ m ai n _ ": resolve(
N = [ ( list ( map ( int , input ( ) . split ( ' ' ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( N [ 0 ] [ 0 ] - a1 == N [ 1 ] [ 0 ] - a2 == N [ 2 ] [ 0 ] - a3 and N [ 0 ] [ 1 ] - a1 == N [ 1 ] [ 1 ] - a2 == N [ 2 ] [ 1 ] - a3 and N [ 0 ] [ 2 ] - a1 == N [ 1 ] [ 2 ] - a2 == N [ 2 ] [ 2 ] - a3 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = ' Yes ' for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : pass else : flag = ' No ' for j in range ( 2 ) : if c [ j + 1 ] [ 0 ] - c [ j ] [ 0 ] == c [ j + 1 ] [ 1 ] - c [ j ] [ 1 ] == c [ j + 1 ] [ 2 ] - c [ j ] [ 2 ] : pass else : flag = ' No ' print ( flag )
from collections import defaultdict import sys sys . setrecursionlimit ( 1000000 ) def dfs ( graph , visited , x , c ) : visited [ x ] = c for nx in graph [ x ] : if visited [ nx ] == c : return False if visited [ nx ] == 0 and not dfs ( graph , visited , nx , - c ) : return False return True while True : n , m = list ( map ( int , input ( ) . split ( ) ) ) if n == 0 : break graph = defaultdict ( list ) visited = [ 0 for i in range ( n + 1 ) ] for i in range ( m ) : u , v = list ( map ( int , input ( ) . split ( ) ) ) graph [ u ] . append ( v ) graph [ v ] . append ( u ) f = dfs ( graph , visited , 1 , 1 ) if f == False : print ( 0 ) else : ans1 , ans2 = 0 , 0 for i in range ( 1 , n + 1 ) : if visited [ i ] > 0 : ans1 + = 1 elif visited [ i ] < 0 : ans2 + = 1 ans = set ( ) if ans1 % 2 == 0 : ans . add ( ans1 // 2 ) if ans2 % 2 == 0 : ans . add ( ans2 // 2 ) print ( len ( ans ) ) for e in sorted ( ans ) : print ( e )
c = [ input ( ) . split ( ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : c [ i ] [ j ] = int ( c [ i ] [ j ] ) for i in range ( 100 ) : for j in range ( 100 ) : if i + j == c [ 0 ] [ 0 ] : a0 , b0 = i , j a1 , b1 = c [ 1 ] [ 0 ] - b0 , c [ 0 ] [ 1 ] - a0 a2 , b2 = c [ 2 ] [ 0 ] - b0 , c [ 0 ] [ 2 ] - a0 if ( a1 + b1 == c [ 1 ] [ 1 ] ) and ( a1 + b2 == c [ 1 ] [ 2 ] ) and ( a2 + b1 == c [ 2 ] [ 1 ] ) and ( a2 + b2 == c [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
C = [ ] for _ in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) tmp = [ c1 , c2 , c3 ] C . append ( tmp ) if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = c11 , c12 , c13 a2 = c21 - b1 a3 = c31 - b1 ans = " Yes " if ( a2 + b2 != c22 ) or ( a2 + b3 != c23 ) or ( a3 + b2 != c32 ) or ( a3 + b3 != c33 ) : ans = " No " print ( ans ) if __name__ == " __main__ " : main ( )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] : ans = " No " if c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] : ans = " No " for j in range ( 2 ) : if c [ 1 ] [ i + 1 ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : ans = " No " if c [ 2 ] [ i + 1 ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] : ans = " No " print ( ans )
c = { } for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) tfc = 0 for i in range ( 101 ) : if tfc == 3 : break else : tfc = 0 cx = [ ] for j in c . values ( ) : for k in j : cx . append ( k ) if i > max ( cx ) : break b = [ ] for j in range ( 3 ) : b . append ( c . get ( 0 ) [ j ] - i ) for j in range ( 3 ) : p = [ ] for k in range ( 3 ) : p . append ( c . get ( j ) [ k ] - b [ k ] ) if min ( p ) == max ( p ) : tfc + = 1 if tfc == 3 : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
s = [ ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) b [ 0 ] = s [ 0 ] [ 0 ] b [ 1 ] = s [ 0 ] [ 1 ] b [ 2 ] = s [ 0 ] [ 2 ] a [ 1 ] = s [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = s [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if s [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 != c22 - c12 or c21 - c11 != c23 - c13 or c31 - c11 != c32 - c12 or c31 - c11 != c33 - c13 : print ( " No " ) else : print ( " Yes " )
c11 , c12 , c13 = [ int ( i ) for i in input ( ) . split ( ) ] c21 , c22 , c23 = [ int ( i ) for i in input ( ) . split ( ) ] c31 , c32 , c33 = [ int ( i ) for i in input ( ) . split ( ) ] ans = 0 for a1 in range ( c11 + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( " Yes " ) ans = 1 break if ans == 0 : print ( " No " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] t = True for i in range ( 3 ) : if not l [ i ] [ 0 ] - l [ i - 1 ] [ 0 ] == l [ i ] [ 1 ] - l [ i - 1 ] [ 1 ] == l [ i ] [ 2 ] - l [ i - 1 ] [ 2 ] or not l [ 0 ] [ i ] - l [ 0 ] [ i - 1 ] == l [ 1 ] [ i ] - l [ 1 ] [ i - 1 ] == l [ 2 ] [ i ] - l [ 2 ] [ i - 1 ] : t = False if t == True : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 for i in range ( 101 ) : b1 = A [ 0 ] [ 0 ] - i b2 = A [ 0 ] [ 1 ] - i b3 = A [ 0 ] [ 2 ] - i a2_1 = A [ 1 ] [ 0 ] - b1 a2_2 = A [ 1 ] [ 1 ] - b2 a2_3 = A [ 1 ] [ 2 ] - b3 a3_1 = A [ 2 ] [ 0 ] - b1 a3_2 = A [ 2 ] [ 1 ] - b2 a3_3 = A [ 2 ] [ 2 ] - b3 if ( a2_1 == a2_2 ) and ( a2_2 == a2_3 ) and ( a2_3 == a2_1 ) and ( a3_1 == a3_2 ) and ( a3_2 == a3_3 ) and ( a3_3 == a3_1 ) : ans += 0 else : ans + = 1 if ans != 0 : print ( ' No ' ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
def examC ( ) : C = [ LI ( ) for _ in range ( 3 ) ] ans = " Yes " cur = [ 0 ] * 3 for i in range ( 2 ) : cur [ 0 ] = C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] cur [ 1 ] = C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] cur [ 2 ] = C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] if not cur [ 0 ] == cur [ 1 ] == cur [ 2 ] : ans = " No " for i in range ( 2 ) : cur [ 0 ] = C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] cur [ 1 ] = C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] cur [ 2 ] = C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] if not cur [ 0 ] == cur [ 1 ] == cur [ 2 ] : ans = " No " print ( ans ) import sys , copy , bisect , itertools , heapq , math from heapq import heappop , heappush , heapify from collections import Counter , defaultdict , deque def I ( ) : return int ( sys . stdin . readline ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LSI ( ) : return list ( map ( str , sys . stdin . readline ( ) . split ( ) ) ) def LS ( ) : return sys . stdin . readline ( ) . split ( ) def S ( ) : return sys . stdin . readline ( ) . strip ( ) mod = 10 ** 9 + 7 inf = float ( ' inf ' ) examC ( )
vals = [ ] for line in range ( 3 ) : s = input ( ) . split ( ) val = [ ] for v in s : val . append ( int ( v ) ) vals . append ( val ) info = True a = [ 0 , ] b = vals [ 0 ] a . append ( vals [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( vals [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if vals [ i ] [ j ] != a [ i ] + b [ j ] : info = False print ( ' Yes ' if info else ' No ' )
import sys c_ls = [ ] for i in range ( 3 ) : c = [ int ( i ) for i in sys . stdin . readline ( ) . split ( ) ] c_ls . append ( c ) yoko = [ c_ls [ 0 ] [ i + 1 ] - c_ls [ 0 ] [ i ] for i in range ( 2 ) ] flg = True for i in range ( 3 ) : flg &= yoko == [ c_ls [ i ] [ j + 1 ] - c_ls [ i ] [ j ] for j in range ( 2 ) ] print ( " Yes " if flg else " No " )
C = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) a = [ 0 , C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] , C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] ] b = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] ans = [ [ a [ 0 ] + b [ 0 ] , a [ 0 ] + b [ 1 ] , a [ 0 ] + b [ 2 ] ] , [ a [ 1 ] + b [ 0 ] , a [ 1 ] + b [ 1 ] , a [ 1 ] + b [ 2 ] ] , [ a [ 2 ] + b [ 0 ] , a [ 2 ] + b [ 1 ] , a [ 2 ] + b [ 2 ] ] ] if ans == C : print ( " Yes " ) else : print ( " No " )
import sys stdin = sys . stdin def ns ( ) : return stdin . readline ( ) . rstrip ( ) def ni ( ) : return int ( ns ( ) ) def na ( ) : return list ( map ( int , stdin . readline ( ) . split ( ) ) ) def main ( ) : c = na ( ) dif1 , dif2 = c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] for i in range ( 2 ) : cn = na ( ) if cn [ 1 ] - cn [ 0 ] != dif1 or cn [ 2 ] - cn [ 1 ] != dif2 : print ( " No " ) quit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i ] [ j + 1 ] == c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
A = [ ] for i in range ( 3 ) : temp = list ( map ( int , input ( ) . split ( ) ) ) A . append ( temp ) if A [ 0 ] [ 0 ] + A [ 1 ] [ 1 ] == A [ 0 ] [ 1 ] + A [ 1 ] [ 0 ] and \ A [ 0 ] [ 1 ] + A [ 1 ] [ 2 ] == A [ 0 ] [ 2 ] + A [ 1 ] [ 1 ] and \ A [ 1 ] [ 0 ] + A [ 2 ] [ 1 ] == A [ 1 ] [ 1 ] + A [ 2 ] [ 0 ] and \ A [ 1 ] [ 1 ] + A [ 2 ] [ 2 ] == A [ 1 ] [ 2 ] + A [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c0 = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ] c1 = [ c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ] c2 = [ c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] , c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] if c0 == c1 == c2 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] f = 0 for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : f += 1 if f == 9 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 1 , 3 ) : d = c [ i ] [ 0 ] - c [ 0 ] [ 0 ] e = c [ 0 ] [ i ] - c [ 0 ] [ 0 ] for j in range ( 1 , 3 ) : if d != c [ i ] [ j ] - c [ 0 ] [ j ] : print ( " No " ) exit ( ) if e != c [ j ] [ i ] - c [ j ] [ 0 ] : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np import sys def validation ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : return False print ( ' Yes ' ) sys . exit ( ) return True c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] ) for i in range ( 101 ) : a = [ ] b = [ ] a . append ( i ) b . append ( c [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) validation ( c , a , b ) print ( ' No ' )
import copy def check ( l ) : return l [ 0 ] == l [ 1 ] == l [ 2 ] lst = [ ] for _ in range ( 3 ) : lst . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) for i in range ( 3 ) : l = copy . deepcopy ( lst ) l [ 0 ] [ 0 ] -= i l [ 0 ] [ 1 ] -= i l [ 0 ] [ 2 ] -= i if l [ 0 ] [ 0 ] < 0 or l [ 0 ] [ 1 ] < 0 or l [ 0 ] [ 2 ] < 0 : continue b1 = l [ 0 ] [ 0 ] b2 = l [ 0 ] [ 1 ] b3 = l [ 0 ] [ 2 ] l [ 1 ] [ 0 ] - = b1 l [ 1 ] [ 1 ] - = b2 l [ 1 ] [ 2 ] - = b3 l [ 2 ] [ 0 ] - = b1 l [ 2 ] [ 1 ] - = b2 l [ 2 ] [ 2 ] - = b3 if check ( l [ 1 ] ) and check ( l [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] == ( a [ i ] + b [ j ] ) : pass else : ans = " No " break print ( ans )
cmatrix = [ ] for i in range ( 3 ) : cmatrix . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( cmatrix [ 0 ] [ 0 ] + cmatrix [ 1 ] [ 1 ] == cmatrix [ 0 ] [ 1 ] + cmatrix [ 1 ] [ 0 ] and \ cmatrix [ 0 ] [ 1 ] + cmatrix [ 1 ] [ 2 ] == cmatrix [ 0 ] [ 2 ] + cmatrix [ 1 ] [ 1 ] and \ cmatrix [ 1 ] [ 0 ] + cmatrix [ 2 ] [ 1 ] == cmatrix [ 1 ] [ 1 ] + cmatrix [ 2 ] [ 0 ] and \ cmatrix [ 1 ] [ 1 ] + cmatrix [ 2 ] [ 2 ] == cmatrix [ 1 ] [ 2 ] + cmatrix [ 2 ] [ 1 ] ) : print ( " Yes " ) else : print ( " No " )
t = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = t [ 1 ] [ 0 ] - t [ 0 ] [ 0 ] b = t [ 2 ] [ 0 ] - t [ 1 ] [ 0 ] c = t [ 0 ] [ 1 ] - t [ 0 ] [ 0 ] d = t [ 0 ] [ 2 ] - t [ 0 ] [ 1 ] flag = 0 if t [ 1 ] [ 1 ] - t [ 0 ] [ 1 ] != a or t [ 1 ] [ 2 ] - t [ 0 ] [ 2 ] != a : flag = 1 elif t [ 2 ] [ 1 ] - t [ 1 ] [ 1 ] != b or t [ 2 ] [ 2 ] - t [ 1 ] [ 2 ] != b : flag = 1 elif t [ 1 ] [ 1 ] - t [ 1 ] [ 0 ] != c or t [ 2 ] [ 1 ] - t [ 2 ] [ 0 ] != c : flag = 1 elif t [ 1 ] [ 2 ] - t [ 1 ] [ 1 ] != d or t [ 2 ] [ 2 ] - t [ 2 ] [ 1 ] != d : flag = 1 if flag == 0 : print ( " Yes " ) else : print ( " No " )
import numpy as np M = np . array ( list ( map ( int , open ( 0 ) . read ( ) . split ( ) ) ) ) . reshape ( 3 , 3 ) hSum = M . sum ( axis = 0 ) vSum = M . sum ( axis = 1 ) f = True for i in range ( 3 ) : if ( hSum [ i ] - hSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False for i in range ( 3 ) : if ( vSum [ i ] - vSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False print ( " Yes " if f else " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if ( c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] ) and \ ( c2 [ 2 ] - c2 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] ) and \ ( c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] ) and \ ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys def input ( ) : return sys . stdin . readline ( ) . strip ( ) def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] rumor = True for i in range ( 1 , 3 ) : diff1 = C [ i ] [ 0 ] - C [ 0 ] [ 0 ] diff2 = C [ i ] [ 1 ] - C [ 0 ] [ 1 ] diff3 = C [ i ] [ 2 ] - C [ 0 ] [ 2 ] if diff1 != diff2 or diff2 != diff3 or diff1 != diff3 : rumor = False break if rumor : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
n = 3 e = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( n ) ] a = [ ] b = [ ] a . append ( 0 ) b . append ( e [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( e [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( e [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != e [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True if not C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : flag = False if not C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : flag = False print ( " Yes " if flag is True else " No " )
def main ( ) : l = list ( ) for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , l [ 0 ] [ 0 ] + 1 ) : b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a2 = l [ 1 ] [ 0 ] - b1 a3 = l [ 2 ] [ 0 ] - b1 if b1 < 0 : continue if b2 < 0 : continue if b3 < 0 : continue if a2 < 0 : continue if a3 < 0 : continue if ( l [ 1 ] [ 1 ] == b2 + a2 and l [ 1 ] [ 2 ] == b3 + a2 and l [ 2 ] [ 1 ] == b2 + a3 and l [ 2 ] [ 2 ] == b3 + a3 ) : print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A1 = [ C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] , C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] , C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ] A1 . sort ( ) A2 = [ C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] , C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] , C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ] A2 . sort ( ) B1 = [ C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] , C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] , C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ] B1 . sort ( ) B2 = [ C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] , C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] , C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ] B2 . sort ( ) if A1 [ 0 ] == A1 [ 2 ] and A2 [ 0 ] == A2 [ 2 ] and B1 [ 0 ] == B1 [ 2 ] and B2 [ 0 ] == B2 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( i + 1 , 3 ) : t = c [ i ] [ 0 ] - c [ j ] [ 0 ] for k in [ 1 , 2 ] : if t != c [ i ] [ k ] - c [ j ] [ k ] : print ( " No " ) exit ( 0 ) t = c [ 0 ] [ i ] - c [ 0 ] [ j ] for k in [ 1 , 2 ] : if t != c [ k ] [ i ] - c [ k ] [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
C = [ [ 0 ] * 3 for i in range ( 3 ) ] for ii in range ( 3 ) : C [ ii ] = list ( map ( int , input ( ) . split ( ) ) ) Flag = 1 for ii in range ( 1 , 3 ) : for jj in range ( 1 , 3 ) : if C [ ii - 1 ] [ jj - 1 ] - C [ ii ] [ jj - 1 ] != C [ ii - 1 ] [ jj ] - C [ ii ] [ jj ] : Flag = 0 break if Flag == 0 : break if Flag == 1 : print ( ' Yes ' ) else : print ( ' No ' )
c_0 = [ int ( _ ) for _ in input ( ) . split ( ) ] c_1 = [ int ( _ ) for _ in input ( ) . split ( ) ] c_2 = [ int ( _ ) for _ in input ( ) . split ( ) ] d = [ 0 ] * 3 e = [ 0 ] * 3 for i in range ( 3 ) : d [ i ] = c_0 [ i % 3 ] + c_1 [ ( i + 1 ) % 3 ] + c_2 [ ( i + 2 ) % 3 ] e [ i ] = c_0 [ ( i + 2 ) % 3 ] + c_1 [ ( i + 1 ) % 3 ] + c_2 [ i % 3 ] flag = True for i in range ( 2 ) : if d [ 0 ] != d [ i ] or d [ 0 ] != e [ i ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
xy = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = sum ( map ( sum , xy ) ) if result % 3 != 0 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 0 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 2 ] ) * 3 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 2 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 0 ] ) * 3 : print ( " No " ) exit ( ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] : print ( ' No ' ) elif c [ 1 ] [ 2 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) elif c [ 2 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] : print ( ' No ' ) elif c [ 2 ] [ 2 ] != c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
s = [ ] judge = True for i in range ( 3 ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( 3 ) : for l in range ( 3 ) : if i != k and k != l : a = s [ i ] [ j ] + s [ k ] [ l ] b = s [ i ] [ l ] + s [ k ] [ j ] if a != b : judge = False break if judge == True : print ( " Yes " ) else : print ( " No " )
import numpy as np nums = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) out = ' Yes ' a_1 = nums [ 1 , : ] - nums [ 0 , : ] if a_1 [ 0 ] != a_1 [ 1 ] or a_1 [ 0 ] != a_1 [ 2 ] : out = ' No ' a_2 = nums [ 2 , : ] - nums [ 1 , : ] if a_2 [ 0 ] != a_2 [ 1 ] or a_2 [ 0 ] != a_2 [ 2 ] : out = ' No ' b_1 = nums [ : , 1 ] - nums [ : , 0 ] if b_1 [ 0 ] != b_1 [ 1 ] or b_1 [ 0 ] != b_1 [ 2 ] : out = ' No ' b_2 = nums [ : , 2 ] - nums [ : , 1 ] if b_2 [ 0 ] != b_2 [ 1 ] or b_2 [ 0 ] != b_2 [ 2 ] : out = ' No ' print ( out )
mat = [ map ( int , raw_input ( ) . split ( ) ) for _ in range ( 3 ) ] def f ( m ) : return ( m [ 1 ] - m [ 0 ] , m [ 2 ] - m [ 1 ] ) b = True s = set ( [ ] ) for l in mat : s . add ( f ( l ) ) if len ( s ) > 1 : b = False s = set ( [ ] ) for j in range ( 3 ) : c = [ mat [ i ] [ j ] for i in range ( 3 ) ] s . add ( f ( c ) ) if len ( s ) > 1 : b = False print ' Yes ' if b else ' No '
import sys sys . setrecursionlimit ( 10 ** 7 ) f_inf = float ( ' inf ' ) mod = 10 ** 9 + 7 def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ f_inf ] * 3 b = [ f_inf ] * 3 a [ 0 ] = 0 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " ) if __name__ == ' __main__ ' : resolve ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import sys min_a1 = min ( C [ 0 ] ) min_a2 = min ( C [ 1 ] ) min_a3 = min ( C [ 2 ] ) for a1 in range ( min_a1 + 1 ) : b1_a1 = C [ 0 ] [ 0 ] - a1 b2_a1 = C [ 0 ] [ 1 ] - a1 b3_a1 = C [ 0 ] [ 2 ] - a1 for a2 in range ( min_a2 + 1 ) : b1_a2 = C [ 1 ] [ 0 ] - a2 b2_a2 = C [ 1 ] [ 1 ] - a2 b3_a2 = C [ 1 ] [ 2 ] - a2 for a3 in range ( min_a3 + 1 ) : b1_a3 = C [ 2 ] [ 0 ] - a3 b2_a3 = C [ 2 ] [ 1 ] - a3 b3_a3 = C [ 2 ] [ 2 ] - a3 if b1_a1 == b1_a2 == b1_a3 and b2_a1 == b2_a2 == b2_a3 and b3_a1 == b3_a2 == b3_a3 : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
N = 3 C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] f = True for i in range ( N - 1 ) : a = C [ i ] [ 0 ] - C [ i + 1 ] [ 0 ] b = C [ i ] [ 1 ] - C [ i + 1 ] [ 1 ] c = C [ i ] [ 2 ] - C [ i + 1 ] [ 2 ] if a == b == c : continue else : f = False for j in range ( N - 1 ) : a = C [ 0 ] [ j ] - C [ 0 ] [ j + 1 ] b = C [ 1 ] [ j ] - C [ 1 ] [ j + 1 ] c = C [ 2 ] [ j ] - C [ 2 ] [ j + 1 ] if a == b == c : continue else : f = False if f : print ( ' Yes ' ) else : print ( ' No ' )
import sys def solve ( ) : input = sys . stdin . readline C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] possible = True for i in range ( 3 ) : if abs ( C [ i ] [ 0 ] - C [ ( i + 1 ) % 3 ] [ 0 ] ) == abs ( C [ i ] [ 1 ] - C [ ( i + 1 ) % 3 ] [ 1 ] ) == abs ( C [ i ] [ 2 ] - C [ ( i + 1 ) % 3 ] [ 2 ] ) : continue else : print ( " No " ) break else : for j in range ( 3 ) : if abs ( C [ 0 ] [ j ] - C [ 0 ] [ ( j + 1 ) % 3 ] ) == abs ( C [ 1 ] [ j ] - C [ 1 ] [ ( j + 1 ) % 3 ] ) == abs ( C [ 2 ] [ j ] - C [ 2 ] [ ( j + 1 ) % 3 ] ) : continue else : print ( " No " ) break else : print ( " Yes " ) return 0 if __name__ == " __main__ " : solve ( )
* l , = map ( int , open ( 0 ) . read ( ) . split ( ) ) print ( " YNeos " [ 4 != sum ( sum ( l [ j ] - l [ 0 ] + l [ i ] == l [ i + j ] for i in [ 1 , 2 ] ) for j in [ 3 , 6 ] ) : : 2 ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) diff1 = c21 - c11 diff2 = c31 - c21 if diff1 == ( c22 - c12 ) and diff2 == ( c32 - c22 ) and diff1 == ( c23 - c13 ) and diff2 == ( c33 - c23 ) : print ( " Yes " ) else : print ( " No " )
d , e , f = [ int ( i ) for i in input ( ) . split ( ) ] x , y , z = [ int ( i ) for i in input ( ) . split ( ) ] s , t , u = [ int ( i ) for i in input ( ) . split ( ) ] b = x - d c = s - d if b + e == y and b + f == z and c + e == t and c + f == u : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != c [ i + 1 ] [ j ] - c [ i + 1 ] [ j - 1 ] : print ( ' No ' ) quit ( ) for i in range ( 1 , 3 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i - 1 ] [ j + 1 ] : print ( ' No ' ) quit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != c [ i ] [ ( j + 1 ) % 3 ] + c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Flg = True if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : Flg = False if not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) : Flg = False print ( " Yes " if Flg else " No " )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ) d = [ 0 , 1 , 2 , 0 , 1 ] x = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ok = True for i in range ( 3 ) : a = c [ d [ i ] ] [ 0 ] + c [ d [ i + 1 ] ] [ 1 ] + c [ d [ i + 2 ] ] [ 2 ] b = c [ d [ i ] ] [ 2 ] + c [ d [ i + 1 ] ] [ 1 ] + c [ d [ i + 2 ] ] [ 0 ] if x != a or x != b : ok = False print ( ' Yes ' if ok else ' No ' )
L = [ [ 0 for j in range ( 3 ) ] for i in range ( 3 ) ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) L [ i ] = c if L [ 0 ] [ 0 ] - L [ 1 ] [ 0 ] == L [ 0 ] [ 1 ] - L [ 1 ] [ 1 ] == L [ 0 ] [ 2 ] - L [ 1 ] [ 2 ] and L [ 0 ] [ 0 ] - L [ 2 ] [ 0 ] == L [ 0 ] [ 1 ] - L [ 2 ] [ 1 ] == L [ 0 ] [ 2 ] - L [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
F = [ None ] * 3 a = list ( map ( int , input ( ) . split ( ) ) ) b = [ a [ i ] - a [ i + 1 ] for i in range ( 2 ) ] for i in range ( 2 ) : c = list ( map ( int , input ( ) . split ( ) ) ) d = [ c [ i ] - c [ i + 1 ] for i in range ( 2 ) ] if b != d : print ( ' No ' ) break else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] def check ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : return False return True for i in range ( 101 ) : b [ 0 ] = i a [ 0 ] = c [ 0 ] [ 0 ] - b [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] if check ( c , a , b ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == c [ i - 1 ] [ j ] + c [ i ] [ j - 1 ] - c [ i - 1 ] [ j - 1 ] : continue ans = " No " print ( ans )
a = [ ] for i in range ( 3 ) : a += [ list ( map ( int , input ( ) . split ( ) ) ) ] for i in range ( 3 ) : x = a [ i ] [ 0 ] - a [ ( i + 1 ) % 3 ] [ 0 ] y = a [ 0 ] [ i ] - a [ 0 ] [ ( i + 1 ) % 3 ] if x != a [ i ] [ 1 ] - a [ ( i + 1 ) % 3 ] [ 1 ] or x != a [ i ] [ 2 ] - a [ ( i + 1 ) % 3 ] [ 2 ] : print ( ' No ' ) exit ( ) if y != a [ 1 ] [ i ] - a [ 1 ] [ ( i + 1 ) % 3 ] or y != a [ 2 ] [ i ] - a [ 2 ] [ ( i + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 def dfs ( a , b , i ) : if i > 2 : for j in range ( 3 ) : for k in range ( 3 ) : if j != k : if a [ j ] + b [ k ] != l [ j ] [ k ] : return print ( " Yes " ) sys . exit ( ) for a [ i ] in range ( l [ i ] [ i ] + 1 ) : b [ i ] = l [ i ] [ i ] - a [ i ] dfs ( a , b , i + 1 ) dfs ( a , b , 0 ) print ( " No " )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : for b1 in range ( 0 , 101 ) : for b2 in range ( 0 , 101 ) : for b3 in range ( 0 , 101 ) : for i in range ( 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : break else : print ( YES ) return print ( NO ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] b2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] b3 = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] d = 0 for i in range ( 2 ) : if c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 0 ] == b2 : d += 1 if c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 0 ] == b3 : d + = 1 for j in range ( 2 ) : if c [ 1 ] [ i + 1 ] - c [ 0 ] [ i + 1 ] == a2 : d + = 1 if c [ 2 ] [ i + 1 ] - c [ 0 ] [ i + 1 ] == a3 : d + = 1 if d == 8 : print ( " Yes " ) else : print ( " No " )
A1 = 0 B1 , B2 , B3 = map ( int , input ( ) . split ( ) ) C1 , C2 , C3 = map ( int , input ( ) . split ( ) ) D1 , D2 , D3 = map ( int , input ( ) . split ( ) ) flag = 0 if not ( C2 - B2 == C1 - B1 and C3 - B3 == C1 - B1 and C2 - B2 == C3 - B3 ) : flag = 1 if not ( D2 - B2 == D1 - B1 and D3 - B3 == D1 - B1 and D2 - B2 == D3 - B3 ) : flag = 1 print ( " Yes " if flag == 0 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * 3 ] x1 , x2 , y1 , y2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] , c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != x1 or c [ i ] [ 1 ] - c [ i ] [ 2 ] != x2 : print ( ' No ' ) exit ( ) if c [ 0 ] [ i ] - c [ 1 ] [ i ] != y1 or c [ 1 ] [ i ] - c [ 2 ] [ i ] != y2 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c12 == c21 - c22 and c11 - c12 == c31 - c32 and c12 - c13 == c22 - c23 and c12 - c13 == c32 - c33 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = False for a0 in range ( 0 , min ( C [ 0 ] ) + 1 ) : b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a0 for i in range ( 1 , 3 ) : tmp1 = C [ i ] [ 0 ] - b [ 0 ] for j in range ( 1 , 3 ) : tmp2 = C [ i ] [ j ] - b [ j ] if tmp1 != tmp2 : flag = True else : tmp1 = tmp2 if flag : print ( " No " ) else : print ( " Yes " )
g = [ ] for i in range ( 3 ) : g . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : offset = g [ i ] [ 0 ] - g [ 0 ] [ 0 ] if not ( ( g [ i ] [ 1 ] - g [ 0 ] [ 1 ] == offset ) and ( g [ i ] [ 2 ] - g [ 0 ] [ 2 ] == offset ) ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 state = True for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != x [ i ] + y [ j ] : print ( ' No ' ) state = False break if state == False : break if state == True : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( c11 + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans )
A = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for x , y in zip ( A , A [ 1 : ] ) : if not ( y [ 0 ] - x [ 0 ] == y [ 1 ] - x [ 1 ] == y [ 2 ] - x [ 2 ] ) : print ( " No " ) exit ( ) for x in range ( 2 ) : if not ( A [ 0 ] [ x + 1 ] - A [ 0 ] [ x ] == A [ 1 ] [ x + 1 ] - A [ 1 ] [ x ] == A [ 2 ] [ x + 1 ] - A [ 2 ] [ x ] ) : print ( " No " ) exit ( ) if A [ 0 ] [ 0 ] + A [ 2 ] [ 2 ] != A [ 0 ] [ 2 ] + A [ 2 ] [ 0 ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ 0 ] * 3 ; A = [ 0 ] * 3 d1 = 0 ; d2 = 0 ; e1 = 0 ; e2 = 0 ; z = 0 ; p = 0 for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) C [ i ] = [ c1 , c2 , c3 ] A [ i ] = [ 0 , 0 , 0 ] d1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] ; d2 = C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] e1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] ; e2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] z = C [ 0 ] [ 0 ] A [ 0 ] [ 0 ] = z ; A [ 0 ] [ 1 ] = z + e1 ; A [ 0 ] [ 2 ] = z + e2 A [ 1 ] [ 0 ] = z + d1 ; A [ 1 ] [ 1 ] = z + e1 + d1 ; A [ 1 ] [ 2 ] = z + d1 + e2 A [ 2 ] [ 0 ] = z + d2 ; A [ 2 ] [ 1 ] = z + d2 + e1 ; A [ 2 ] [ 2 ] = z + d2 + e2 for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] == A [ i ] [ j ] : p = p + 1 print ( " Yes " if p == 9 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for k in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] or c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] != c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] or c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] : print ( " No " ) else : print ( " Yes " )
S = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : if ( S [ 0 ] [ 0 ] - i == S [ 1 ] [ 0 ] - j and S [ 0 ] [ 1 ] - i == S [ 1 ] [ 1 ] - j ) and S [ 0 ] [ 2 ] - i == S [ 1 ] [ 2 ] - j : if ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 1 ] - S [ 0 ] [ 1 ] ) and ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 2 ] - S [ 0 ] [ 2 ] ) : check = True print ( ' Yes ' ) exit ( ) if check == False : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 == c22 - c12 == c23 - c13 and c31 - c21 == c32 - c22 == c33 - c23 and c12 - c11 == c22 - c21 == c32 - c31 and c13 - c12 == c23 - c22 == c33 - c32 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1b2 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] b1b3 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] b2b3 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if b1b2 and b1b3 and b2b3 : print ( " Yes " ) else : print ( " No " )
def solve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 if a1 != c [ 1 ] [ 1 ] - b1 or a1 != c [ 1 ] [ 2 ] - b2 : continue a2 = c [ 2 ] [ 0 ] - b0 if a2 != c [ 2 ] [ 1 ] - b1 or a2 != c [ 2 ] [ 2 ] - b2 : continue print ( " Yes " ) exit ( ) print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) flag = True for a1 in range ( c . max ( ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 or c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 2 ] - b3 ) : flag = False if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 or c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 2 ] - b3 ) : flag = False print ( " Yes " if flag else " No " )
numbers = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] answer = " No " for a1 in range ( 101 ) : b1 = numbers [ 0 ] [ 0 ] - a1 b2 = numbers [ 1 ] [ 0 ] - a1 b3 = numbers [ 2 ] [ 0 ] - a1 a2 = numbers [ 0 ] [ 1 ] - b1 a3 = numbers [ 0 ] [ 2 ] - b1 if a2 + b2 == numbers [ 1 ] [ 1 ] and a3 + b2 == numbers [ 1 ] [ 2 ] and a2 + b3 == numbers [ 2 ] [ 1 ] and a3 + b3 == numbers [ 2 ] [ 2 ] and a1 >= 0 and a2 >= 0 and a3 >= 0 and b1 >= 0 and b2 >= 0 and b3 >= 0 : answer = " Yes " print ( answer )
import sys read = sys . stdin . read readline = sys . stdin . readline readlines = sys . stdin . readlines sys . setrecursionlimit ( 10 ** 9 ) INF = 1 << 60 MOD = 1000000007 def main ( ) : C = [ list ( map ( int , readline ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : if ( not C [ ( i + 1 ) % 3 ] [ 0 ] - C [ i ] [ 0 ] == C [ ( i + 1 ) % 3 ] [ 1 ] - C [ i ] [ 1 ] == C [ ( i + 1 ) % 3 ] [ 2 ] - C [ i ] [ 2 ] ) : print ( ' No ' ) return if ( not C [ 0 ] [ ( i + 1 ) % 3 ] - C [ 0 ] [ i ] == C [ 1 ] [ ( i + 1 ) % 3 ] - C [ 1 ] [ i ] == C [ 2 ] [ ( i + 1 ) % 3 ] - C [ 2 ] [ i ] ) : print ( ' No ' ) return print ( ' Yes ' ) return if __name__ == ' __main__ ' : main ( )
from sys import exit C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
mat = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] checks = [ [ 0 , 1 ] , [ 0 , 2 ] , [ 1 , 2 ] ] for i , j in checks : if mat [ i ] [ i ] + mat [ j ] [ j ] != mat [ i ] [ j ] + mat [ j ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] b_patterns = [ ] for i in range ( grid [ 0 ] [ 0 ] + 1 ) : b_pattern = [ grid [ 0 ] [ j ] - i for j in range ( 3 ) ] b_patterns . append ( b_pattern ) def patternCecker ( grid , b_patterns ) : for pattern in b_patterns : a1 = grid [ 0 ] [ 0 ] - pattern [ 0 ] a2 = grid [ 1 ] [ 0 ] - pattern [ 0 ] a3 = grid [ 2 ] [ 0 ] - pattern [ 0 ] a1_row = [ a1 + pattern [ l ] for l in range ( 3 ) ] a2_row = [ a2 + pattern [ l ] for l in range ( 3 ) ] a3_row = [ a3 + pattern [ l ] for l in range ( 3 ) ] if a1_row == grid [ 0 ] and a2_row == grid [ 1 ] and a3_row == grid [ 2 ] : return True return False if patternCecker ( grid , b_patterns ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c1_2 = [ ] for i in range ( 3 ) : c1_1 = [ ] for j in range ( 2 ) : c1_1 . append ( c [ i ] [ j ] - c [ i ] [ j + 1 ] ) c1_2 . append ( c1_1 ) c1_1 = [ ] for i in range ( 3 ) : for j in range ( 1 ) : c1_1 . append ( c1_2 [ i ] [ j ] - c1_2 [ i ] [ j + 1 ] ) if ( len ( set ( c1_1 ) ) == 1 ) : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 101 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a2 = c2 [ 0 ] - b1 a3 = c3 [ 0 ] - b1 if c2 [ 1 ] == a2 + b2 and c2 [ 2 ] == a2 + b3 and c3 [ 1 ] == a3 + b2 and c3 [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys n = 3 c = [ [ - 1 , - 1 , - 1 ] for _ in range ( n ) ] for i in range ( n ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) Flag = True if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " No " ) sys . exit ( ) if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] != c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] or c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] != c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " No " ) sys . exit ( ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] or c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] : print ( " No " ) sys . exit ( ) if c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] or c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l = [ ] for i in c : l += i if l [ 0 ] + l [ 4 ] == l [ 1 ] + l [ 3 ] and l [ 1 ] + l [ 5 ] == l [ 2 ] + l [ 4 ] and l [ 3 ] + l [ 7 ] == l [ 4 ] + l [ 6 ] and l [ 4 ] + l [ 8 ] == l [ 5 ] + l [ 7 ] : print ( ' Yes ' ) else : print ( " No " )
a = list ( map ( int , open ( 0 ) . read ( ) . split ( ) ) ) print ( ' Yes ' if a [ 0 ] - a [ 1 ] == a [ 3 ] - a [ 4 ] == a [ 6 ] - a [ 7 ] and a [ 1 ] - a [ 2 ] == a [ 4 ] - a [ 5 ] == a [ 7 ] - a [ 8 ] and a [ 0 ] - a [ 3 ] == a [ 1 ] - a [ 4 ] == a [ 2 ] - a [ 5 ] and a [ 3 ] - a [ 6 ] == a [ 4 ] - a [ 7 ] == a [ 5 ] - a [ 8 ] else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] import sys a1 = max ( C [ 0 ] ) a2 = max ( C [ 1 ] ) a3 = max ( C [ 2 ] ) for i in range ( a1 + 1 ) : for j in range ( a2 + 1 ) : for k in range ( a3 + 1 ) : if C [ 0 ] [ 0 ] - i == C [ 1 ] [ 0 ] - j and C [ 1 ] [ 0 ] - j == C [ 2 ] [ 0 ] - k : if C [ 0 ] [ 1 ] - i == C [ 1 ] [ 1 ] - j and C [ 1 ] [ 1 ] - j == C [ 2 ] [ 1 ] - k : if C [ 0 ] [ 2 ] - i == C [ 1 ] [ 2 ] - j and C [ 1 ] [ 2 ] - j == C [ 2 ] [ 2 ] - k : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
import sys c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 max_val = 100 a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : left = a [ i ] + b [ j ] right = c [ i ] [ j ] if ( left != right ) : ans = False print ( " No " ) sys . exit ( ) print ( " Yes " )
C = [ ] for _ in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) b = min ( a ) for i in range ( 3 ) : a [ i ] -= b C . append ( a ) if C [ 0 ] == C [ 1 ] and C [ 1 ] == C [ 2 ] and C [ 0 ] == C [ 2 ] : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) def correct ( ) : if a1 + b2 != c12 : return False if a1 + b3 != c13 : return False if a2 + b1 != c21 : return False if a2 + b3 != c23 : return False if a3 + b1 != c31 : return False if a3 + b2 != c32 : return False return True for i in range ( c11 + 1 ) : for j in range ( c22 + 1 ) : for k in range ( c33 + 1 ) : a1 = i b1 = c11 - i a2 = j b2 = c22 - j a3 = k b3 = c33 - k if correct ( ) : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in [ 1 , 2 ] : d1 = c [ 0 ] [ 0 ] - c [ i ] [ 0 ] d2 = c [ 0 ] [ 1 ] - c [ i ] [ 1 ] d3 = c [ 0 ] [ 2 ] - c [ i ] [ 2 ] d4 = c [ 0 ] [ 0 ] - c [ 0 ] [ i ] d5 = c [ 1 ] [ 0 ] - c [ 1 ] [ i ] d6 = c [ 2 ] [ 0 ] - c [ 2 ] [ i ] if d1 != d2 or d1 != d3 or d4 != d5 or d4 != d6 : print ( " No " ) exit ( ) print ( " Yes " )
from fractions import gcd from itertools import combinations , permutations , accumulate , product from collections import deque , defaultdict , Counter import decimal import re import math import bisect import sys sys . setrecursionlimit ( 10000000 ) mod = 10 ** 9 + 7 from sys import stdin readline = stdin . readline def readInts ( ) : return list ( map ( int , readline ( ) . split ( ) ) ) def readTuples ( ) : return tuple ( map ( int , readline ( ) . split ( ) ) ) def I ( ) : return int ( readline ( ) ) C = [ readInts ( ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 A [ 0 ] = 0 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] for j in range ( 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] == C [ i ] [ j ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = [ ] c = np . array ( c ) ch = np . diff ( c ) if np . all ( ch [ 0 ] == ch [ 1 ] ) & np . all ( ch [ 1 ] == ch [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) cw = np . diff ( c . T ) if np . all ( cw [ 0 ] == cw [ 1 ] ) & np . all ( cw [ 1 ] == cw [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) ans = " Yes " if all ( ans ) else " No " print ( ans )
import sys import numpy as np grid = np . array ( sys . stdin . read ( ) . split ( ) , dtype = np . int8 ) . reshape ( 3 , 3 ) def main ( ) : grid [ : , : ] -= grid [ 0 ] grid [ : , : ] -= grid [ : , 0 ] [ : , None ] print ( ' No ' if np . any ( grid ) else ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = ' No ' print ( ans )
c = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) c . append ( a ) flag = True b = [ [ 0 ] * 3 ] * 3 B = dict ( ) for i in range ( 3 ) : for j in range ( 3 ) : if i == j : continue l = [ ] for k in range ( 3 ) : x = c [ k ] [ i ] - c [ k ] [ j ] if len ( l ) < 1 : l . append ( x ) else : for m in range ( len ( l ) ) : if x != l [ m ] : flag = False l . append ( x ) if flag : print ( " Yes " ) else : print ( " No " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
import sys input = lambda : sys . stdin . readline ( ) . rstrip ( " \r \n " ) c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = 1 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 and c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 : if c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 and c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 : if c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 and c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 : flag = 0 if flag : print ( ' No ' ) else : print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a = 0 if c13 - c12 == c23 - c22 == c33 - c32 : if c12 - c11 == c22 - c21 == c32 - c31 : if c33 - c23 == c32 - c22 == c31 - c21 : if c23 - c13 == c22 - c12 == c21 - c11 : print ( " Yes " ) a = 1 if a == 0 : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = [ 0 , 0 , 0 ] y = [ 0 , 0 , 0 ] for i in range ( 3 ) : y [ i ] = C [ 0 ] [ i ] for i in range ( 3 ) : x [ i ] = C [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != x [ i ] + y [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2_1 = c [ 1 ] [ 0 ] - b1 a2_2 = c [ 1 ] [ 1 ] - b2 a2_3 = c [ 1 ] [ 2 ] - b3 a3_1 = c [ 2 ] [ 0 ] - b1 a3_2 = c [ 2 ] [ 1 ] - b2 a3_3 = c [ 2 ] [ 2 ] - b3 if a2_1 == a2_2 == a2_3 and a3_1 == a3_2 == a3_3 : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ] == [ c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ] == [ c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] : if [ c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ] == [ c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ] == [ c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) for b1 in range ( 101 ) : a = [ ] b = [ ] a1 = c [ 0 ] [ 0 ] - b1 if a1 < 0 : break a . append ( a1 ) b . append ( b1 ) for b2 in range ( 101 ) : a2 = c [ 1 ] [ 1 ] - b2 if a2 < 0 : break a . append ( a2 ) b . append ( b2 ) for b3 in range ( 101 ) : a3 = c [ 2 ] [ 2 ] - b3 if a3 < 0 : break a . append ( a3 ) b . append ( b3 ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : break if i == 2 and j == 2 : print ( " Yes " ) exit ( ) if a [ j ] + b [ i ] != c [ i ] [ j ] : break b . pop ( ) a . pop ( ) a . pop ( ) b . pop ( ) print ( " No " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] + [ 100 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] + [ 100 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] + [ 100 ] ) + 1 ) : x1 = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] x2 = [ c [ 1 ] [ 0 ] - a2 , c [ 1 ] [ 1 ] - a2 , c [ 1 ] [ 2 ] - a2 ] x3 = [ c [ 2 ] [ 0 ] - a3 , c [ 2 ] [ 1 ] - a3 , c [ 2 ] [ 2 ] - a3 ] if x1 == x2 == x3 : print ( " Yes " ) sys . exit ( ) print ( " No " )
import sys read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines sys . setrecursionlimit ( 10 ** 7 ) c_1 = list ( map ( int , readline ( ) . split ( ) ) ) c_2 = list ( map ( int , readline ( ) . split ( ) ) ) c_3 = list ( map ( int , readline ( ) . split ( ) ) ) c = [ c_1 , c_2 , c_3 ] a = [ min ( c_1 ) , min ( c_2 ) , min ( c_3 ) ] b = [ c_1 [ 0 ] - a [ 0 ] , c_2 [ 1 ] - a [ 1 ] , c_3 [ 2 ] - a [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import math , string , itertools , fractions , heapq , collections , re , array , bisect , sys , random , time , copy , functools from collections import deque sys . setrecursionlimit ( 10 ** 7 ) inf = 10 ** 20 mod = 10 ** 9 + 7 DR = [ 1 , - 1 , 0 , 0 ] DC = [ 0 , 0 , 1 , - 1 ] def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ] def LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LS ( ) : return sys . stdin . readline ( ) . split ( ) def I ( ) : return int ( sys . stdin . readline ( ) ) def F ( ) : return float ( sys . stdin . readline ( ) ) def S ( ) : return input ( ) def main ( ) : c = [ ] csum = 0 for _ in range ( 3 ) : _c = LI ( ) csum += sum ( _c ) c . append ( _c ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == csum / 3 : print ( ' Yes ' ) else : print ( ' No ' ) main ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a1 = 0 a2 = ( c12 - c11 , c22 - c21 , c32 - c31 ) a3 = ( c13 - c11 , c23 - c21 , c33 - c31 ) if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( " Yes " ) else : print ( " No " )
def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) for a1 in range ( - 200 , 200 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == " __main__ " : main ( )
c = [ ] for _ in range ( 3 ) : c += [ list ( map ( int , input ( ) . split ( ) ) ) ] a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] c1 = [ c [ 0 ] [ i ] + a1 for i in range ( 3 ) ] c2 = [ c [ 0 ] [ i ] + a2 for i in range ( 3 ) ] if c [ 1 ] == c1 and c [ 2 ] == c2 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : li = list ( map ( int , input ( ) . split ( ) ) ) c . append ( li ) a = [ 0 , ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) , ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == ( a [ i ] + b [ j ] ) : pass else : ans = " No " break if ans == " No " : break print ( ans )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] al = [ l [ i ] [ 0 ] for i in range ( 3 ) ] bl = [ l [ 0 ] [ i ] - al [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if al [ i ] + bl [ j ] != l [ i ] [ j ] : print ( " No " ) ; exit ( ) print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = [ C [ i ] [ 0 ] - min ( C [ i ] ) , C [ i ] [ 1 ] - min ( C [ i ] ) , C [ i ] [ 2 ] - min ( C [ i ] ) ] for j in range ( 3 ) : tmp = min ( C [ 0 ] [ j ] , C [ 1 ] [ j ] , C [ 2 ] [ j ] ) C [ 0 ] [ j ] = C [ 0 ] [ j ] - tmp C [ 1 ] [ j ] = C [ 1 ] [ j ] - tmp C [ 2 ] [ j ] = C [ 2 ] [ j ] - tmp if C == [ [ 0 ] * 3 for i in range ( 3 ) ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] \ and C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] and C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c1 = list ( map ( int , input ( ) . split ( ) ) ) A = np . array ( c1 ) c1 = list ( map ( int , input ( ) . split ( ) ) ) B = np . array ( c1 ) c1 = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( c1 ) D = A - B D1 = list ( D ) D1 = set ( D1 ) if len ( D1 ) == 1 : pass else : print ( ' No ' ) exit ( ) E = B - C E1 = list ( E ) E1 = set ( E1 ) if len ( E1 ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ ] for i in range ( 3 ) : b . append ( c [ 0 ] [ i ] - a [ 0 ] ) for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
def readlines ( ) : for _ in range ( 3 ) : yield list ( map ( int , input ( ) . split ( ) ) ) c = list ( readlines ( ) ) a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 ok = ( c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 ) print ( " Yes " if ok else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = 0 for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] != c [ i + 1 ] [ j ] + c [ i ] [ j + 1 ] : flag = 1 if flag == 1 : print ( " No " ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ok = True lis = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] d = [ [ c [ l [ 0 ] ] [ i ] - c [ l [ 1 ] ] [ i ] for i in range ( 3 ) ] for l in lis ] e = [ [ c [ i ] [ l [ 0 ] ] - c [ i ] [ l [ 1 ] ] for i in range ( 3 ) ] for l in lis ] for i in range ( 3 ) : if d [ i ] . count ( d [ i ] [ 0 ] ) != 3 : ok = False if e [ i ] . count ( e [ i ] [ 0 ] ) != 3 : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( c ) a1 = 0 b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 a21 = grid [ 1 ] [ 0 ] - b1 a22 = grid [ 1 ] [ 1 ] - b2 a23 = grid [ 1 ] [ 2 ] - b3 a31 = grid [ 2 ] [ 0 ] - b1 a32 = grid [ 2 ] [ 1 ] - b2 a33 = grid [ 2 ] [ 2 ] - b3 if a21 == a22 == a23 : if a31 == a32 == a33 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def check ( a , C ) : vertical = False horizonal = False d1 = C [ a [ 0 ] ] [ 0 ] - C [ a [ 1 ] ] [ 0 ] d2 = C [ a [ 0 ] ] [ 1 ] - C [ a [ 1 ] ] [ 1 ] d3 = C [ a [ 0 ] ] [ 2 ] - C [ a [ 1 ] ] [ 2 ] if d1 == d2 == d3 : vertical = True d4 = C [ 0 ] [ a [ 0 ] ] - C [ 0 ] [ a [ 1 ] ] d5 = C [ 1 ] [ a [ 0 ] ] - C [ 1 ] [ a [ 1 ] ] d6 = C [ 2 ] [ a [ 0 ] ] - C [ 2 ] [ a [ 1 ] ] if d4 == d5 == d6 : horizonal = True return vertical and horizonal def main ( ) : ans = True C = [ list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) for e in x : if check ( e , C ) == False : ans = False break return " Yes " if ans else " No " if __name__ == " __main__ " : print ( main ( ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = set ( ) e = set ( ) f = set ( ) g = set ( ) for i in range ( 3 ) : d . add ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) e . add ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) f . add ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) g . add ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) if len ( d ) == len ( e ) == len ( f ) == len ( g ) == 1 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( C ) : D = [ [ c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] ] for c in C ] if D [ 0 ] == D [ 1 ] == D [ 2 ] : return 0 else : print ( ' No ' ) exit ( ) check ( C ) C = [ list ( c ) for c in zip ( * C ) ] check ( C ) print ( ' Yes ' )
C = [ [ int ( hoge ) for hoge in input ( ) . split ( ) ] for i in range ( 3 ) ] B = C [ 0 ] A = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] if C [ 1 ] == [ A [ 1 ] + B [ 0 ] , A [ 1 ] + B [ 1 ] , A [ 1 ] + B [ 2 ] ] and C [ 2 ] == [ A [ 2 ] + B [ 0 ] , A [ 2 ] + B [ 1 ] , A [ 2 ] + B [ 2 ] ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] N = 0 for i in range ( 3 ) : N = max ( N , max ( C [ i ] ) ) + 1 for i in range ( N ) : for j in range ( N ) : for k in range ( N ) : check = 0 for l in range ( 3 ) : if C [ l ] [ 0 ] - i == C [ l ] [ 1 ] - j == C [ l ] [ 2 ] - k : check += 1 if check == 3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
[ C11 , C12 , C13 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C21 , C22 , C23 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C31 , C32 , C33 ] = [ int ( i ) for i in input ( ) . split ( ) ] b1 = C11 b2 = C12 b3 = C13 flag_a2 = False if ( C21 - b1 ) == ( C22 - b2 ) and ( C21 - b1 ) == ( C23 - b3 ) : flag_a2 = True flag_a3 = False if ( C31 - b1 ) == ( C32 - b2 ) and ( C31 - b1 ) == ( C33 - b3 ) : flag_a3 = True if flag_a2 is True and flag_a3 is True : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] \ and c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] \ and c [ 0 ] [ 1 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] \ and c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
def LIHW ( h ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] masu = LIHW ( 3 ) ans = " Yes " for i in range ( 2 ) : if masu [ i + 1 ] [ 1 ] - masu [ i + 1 ] [ 0 ] != masu [ 0 ] [ 1 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ i + 1 ] [ 2 ] - masu [ i + 1 ] [ 1 ] != masu [ 0 ] [ 2 ] - masu [ 0 ] [ 1 ] : ans = " No " for i in range ( 2 ) : if masu [ 1 ] [ i + 1 ] - masu [ 0 ] [ i + 1 ] != masu [ 1 ] [ 0 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ 2 ] [ i + 1 ] - masu [ 1 ] [ i + 1 ] != masu [ 2 ] [ 0 ] - masu [ 1 ] [ 0 ] : ans = " No " print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if C [ i + 1 ] [ j ] - C [ i ] [ j ] != C [ i + 1 ] [ j + 1 ] - C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) ans = ' Yes ' for i in range ( 3 ) : minv = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] = c [ i ] [ j ] - minv for k in range ( 3 ) : if c [ 0 ] [ k ] == c [ 1 ] [ k ] and c [ 0 ] [ k ] == c [ 2 ] [ k ] : pass else : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 x = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] y = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] z = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] != x ) : count + = 1 if ( c [ i ] [ 2 ] - c [ i ] [ 1 ] != y ) : count + = 1 if ( c [ i ] [ 0 ] - c [ i ] [ 2 ] != z ) : count + = 1 X = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] Y = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] Z = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] for j in range ( 1 , 3 ) : if ( c [ 0 ] [ i ] - c [ 1 ] [ i ] != X ) : count + = 1 if ( c [ 1 ] [ i ] - c [ 2 ] [ i ] != Y ) : count + = 1 if ( c [ 2 ] [ i ] - c [ 0 ] [ i ] != Z ) : count + = 1 if ( count == 0 ) : print ( " Yes " ) else : print ( " No " )
A = [ 0 ] B = [ ] C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) B . append ( C [ 0 ] [ 0 ] ) B . append ( C [ 0 ] [ 1 ] ) B . append ( C [ 0 ] [ 2 ] ) A . append ( C [ 1 ] [ 0 ] - B [ 0 ] ) A . append ( C [ 2 ] [ 0 ] - B [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if ( C [ i ] [ j ] != A [ i ] + B [ j ] and C [ i ] [ j ] != B [ i ] + A [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 1 ] - b2 a3 = C [ 2 ] [ 2 ] - b3 As = [ a1 , a2 , a3 ] Bs = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != As [ i ] + Bs [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 1 , 101 ) : a [ 0 ] = i a [ 1 ] = - 1 a [ 2 ] = - 1 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] for j in range ( 1 , 3 ) : if c [ j ] [ 0 ] - b [ 0 ] != c [ j ] [ 1 ] - b [ 1 ] or c [ j ] [ 1 ] - b [ 1 ] != c [ j ] [ 2 ] - b [ 2 ] : break a [ j ] = c [ j ] [ 0 ] - b [ 0 ] if j == 2 : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D = [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : D [ i ] [ j ] = C [ i ] [ j ] - C [ i ] [ j - 1 ] if D [ 0 ] == D [ 1 ] == D [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' for i in range ( 2 ) : if C [ i ] [ 0 ] - C [ i + 1 ] [ 0 ] != C [ i ] [ 1 ] - C [ i + 1 ] [ 1 ] or \ C [ i ] [ 0 ] - C [ i + 1 ] [ 0 ] != C [ i ] [ 2 ] - C [ i + 1 ] [ 2 ] : ans = ' No ' for j in range ( 2 ) : if C [ 0 ] [ j ] - C [ 0 ] [ j + 1 ] != C [ 1 ] [ j ] - C [ 1 ] [ j + 1 ] or \ C [ 0 ] [ j ] - C [ 0 ] [ j + 1 ] != C [ 2 ] [ j ] - C [ 2 ] [ j + 1 ] : ans = ' No ' print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) f = 0 if not c11 - c12 == c21 - c22 == c31 - c32 : f = 1 if not c11 - c13 == c21 - c23 == c31 - c33 : f = 1 if not c12 - c13 == c22 - c23 == c32 - c33 : f = 1 if not c11 - c21 == c12 - c22 == c13 - c23 : f = 1 if not c11 - c31 == c12 - c32 == c13 - c33 : f = 1 if not c21 - c31 == c22 - c32 == c23 - c33 : f = 1 print ( " Yes " if f == 0 else " No " )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c0 = c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] c1 = c [ 1 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 1 ] [ 2 ] c2 = c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 2 ] [ 2 ] for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 for a1 in range ( 101 ) : a2 = ( c2 - c0 + 3 * a0 ) / 3 if ( c [ 1 ] [ 0 ] - a1 == b0 and c [ 1 ] [ 1 ] - a1 == b1 and c [ 1 ] [ 2 ] - a1 == b2 and c [ 2 ] [ 0 ] - a2 == b0 and c [ 2 ] [ 1 ] - a2 == b1 and c [ 2 ] [ 2 ] - a2 == b2 ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False print ( " Yes " if flag else " No " )
import sys def solve ( ) : input = sys . stdin . readline C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] possible = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : a11 = C [ 0 ] [ 0 ] - i a12 = C [ 0 ] [ 1 ] - j a13 = C [ 0 ] [ 2 ] - k a21 = C [ 1 ] [ 0 ] - i a22 = C [ 1 ] [ 1 ] - j a23 = C [ 1 ] [ 2 ] - k a31 = C [ 2 ] [ 0 ] - i a32 = C [ 2 ] [ 1 ] - j a33 = C [ 2 ] [ 2 ] - k if a11 == a12 == a13 and a21 == a22 == a23 and a31 == a32 == a33 : possible = True break if possible : break if possible : break print ( " Yes " if possible else " No " ) return 0 if __name__ == " __main__ " : solve ( )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if grid [ 0 ] [ 0 ] == ( grid [ 0 ] [ 2 ] + grid [ 2 ] [ 0 ] ) - grid [ 2 ] [ 2 ] and grid [ 1 ] [ 1 ] == ( grid [ 0 ] [ 1 ] + grid [ 1 ] [ 0 ] ) - grid [ 0 ] [ 0 ] and grid [ 2 ] [ 2 ] == ( grid [ 1 ] [ 2 ] + grid [ 2 ] [ 1 ] ) - grid [ 1 ] [ 1 ] : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
C = [ [ ] for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] . extend ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : if ( C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] ) and ( C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] == C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] ) : continue else : flag = False break for i in range ( 2 ) : if not flag : break if ( C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] ) and ( C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] == C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] ) : continue else : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] ans = " No " for i in range ( 101 ) : if i > c [ 0 ] [ 0 ] : break a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] flag = 1 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = 0 if flag : ans = " Yes " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != ( a [ i ] + b [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = False print ( ' Yes ' if ans else ' No ' )
def main ( ) : A = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : A [ i ] [ j ] -= A [ 0 ] [ j ] if ( A [ 1 ] [ 0 ] == A [ 1 ] [ 1 ] == A [ 1 ] [ 2 ] ) and ( A [ 2 ] [ 0 ] == A [ 2 ] [ 1 ] == A [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
a1 , a2 , a3 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if not ( a1 - a2 == b1 - b2 == c1 - c2 ) or not ( a2 - a3 == b2 - b3 == c2 - c3 ) : print ( ' No ' ) elif not ( a1 - b1 == a2 - b2 == a3 - b3 ) or not ( b1 - c1 == b2 - c2 == b3 - c3 ) : print ( ' No ' ) else : print ( ' Yes ' )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 if ( ( ( c [ 1 ] [ 0 ] - b0 ) == ( c [ 1 ] [ 1 ] - b1 ) == ( c [ 1 ] [ 2 ] - b2 ) ) and ( ( c [ 2 ] [ 0 ] - b0 ) == ( c [ 2 ] [ 1 ] - b1 ) == ( c [ 2 ] [ 2 ] - b2 ) ) ) : print ( " Yes " ) break else : print ( " No " )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] f = 1 for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : f = 0 if f == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( 3 ) ] B = C [ 0 ] A = ( 0 , C [ 1 ] [ 1 ] - B [ 1 ] , C [ 2 ] [ 2 ] - B [ 2 ] ) for i in range ( 3 ) : for j in range ( 3 ) : v = A [ i ] + B [ j ] if not v == C [ i ] [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
c_1_1 , c_1_2 , c_1_3 = map ( int , input ( ) . split ( ) ) c_2_1 , c_2_2 , c_2_3 = map ( int , input ( ) . split ( ) ) c_3_1 , c_3_2 , c_3_3 = map ( int , input ( ) . split ( ) ) ans = " No " for a_1 in range ( 101 ) : b_1 = c_1_1 - a_1 b_2 = c_1_2 - a_1 b_3 = c_1_3 - a_1 for a_2 in range ( 101 ) : if c_2_1 != a_2 + b_1 : continue if c_2_2 != a_2 + b_2 : continue if c_2_3 != a_2 + b_3 : continue for a_3 in range ( 101 ) : if c_3_1 != a_3 + b_1 : continue if c_3_2 != a_3 + b_2 : continue if c_3_3 != a_3 + b_3 : continue ans = " Yes " break if ans == " Yes " : break if ans == " Yes " : break print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) def correct ( a1 , a2 , a3 , b1 , b2 , b3 ) : if a1 + b1 != c11 : return False if a2 + b2 != c22 : return False if a3 + b3 != c33 : return False if a1 + b2 != c12 : return False if a1 + b3 != c13 : return False if a2 + b1 != c21 : return False if a2 + b3 != c23 : return False if a3 + b1 != c31 : return False if a3 + b2 != c32 : return False return True for i in range ( c11 + 1 ) : a1 = i b1 = c11 - i a2 = a1 - c11 + c21 a3 = a1 - c11 + c31 b2 = b1 - c11 + c12 b3 = b1 - c11 + c13 if correct ( a1 , a2 , a3 , b1 , b2 , b3 ) : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
import sys sys . setrecursionlimit ( 2147483647 ) INF = float ( " inf " ) MOD = 10 ** 9 + 7 input = lambda : sys . stdin . readline ( ) . rstrip ( ) def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( not ( C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] ) ) : print ( " No " ) return if ( not ( C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] ) ) : print ( " No " ) return if ( not ( C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] ) ) : print ( " No " ) return if ( not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] ) ) : print ( " No " ) return if ( not ( C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] ) ) : print ( " No " ) return if ( not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] ) ) : print ( " No " ) return print ( " Yes " ) resolve ( )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) check = 0 for i in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - i b2 = c [ 0 ] [ 1 ] - i b3 = c [ 0 ] [ 2 ] - i if ( c [ 0 ] [ 0 ] - b1 == c [ 0 ] [ 1 ] - b2 == c [ 0 ] [ 2 ] - b3 and c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 and c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) : check = 1 break if check == 1 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) def is_check ( a , b , c ) : for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != ( a [ j ] + b [ k ] ) : return False return True for i in range ( c [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if not ( b1 >= 0 and b1 <= 100 and b2 >= 0 and b2 <= 100 and b3 >= 0 and b3 <= 100 and a2 >= 0 and a2 <= 100 and a3 >= 0 and a3 <= 100 ) : continue a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] is_ok = is_check ( a , b , c ) if is_ok : print ( ' Yes ' ) break else : print ( ' No ' )
matrix = [ ] for _ in range ( 3 ) : row = [ int ( i ) for i in input ( ) . split ( ) ] matrix . append ( row ) a1 = matrix [ 1 ] [ 0 ] - matrix [ 0 ] [ 0 ] a2 = matrix [ 2 ] [ 0 ] - matrix [ 0 ] [ 0 ] b1 = matrix [ 0 ] [ 1 ] - matrix [ 0 ] [ 0 ] b2 = matrix [ 0 ] [ 2 ] - matrix [ 0 ] [ 0 ] if a1 + b1 == matrix [ 1 ] [ 1 ] - matrix [ 0 ] [ 0 ] and a2 + b2 == matrix [ 2 ] [ 2 ] - matrix [ 0 ] [ 0 ] and a1 + b2 == matrix [ 1 ] [ 2 ] - matrix [ 0 ] [ 0 ] and a2 + b1 == matrix [ 2 ] [ 1 ] - matrix [ 0 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
R = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) R . append ( [ c1 - c2 , c1 - c3 ] ) print ( ' Yes ' if R [ 0 ] == R [ 1 ] == R [ 2 ] else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = all ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] for i in range ( 2 ) ) print ( [ " No " , " Yes " ] [ flg ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " print ( ans )
M = [ ] for _ in range ( 3 ) : m = list ( map ( int , input ( ) . split ( ) ) ) M . append ( m ) for a1 in range ( 100 ) : b1 = M [ 0 ] [ 0 ] - a1 b2 = M [ 0 ] [ 1 ] - a1 b3 = M [ 0 ] [ 2 ] - a1 a2 = M [ 1 ] [ 0 ] - b1 a3 = M [ 2 ] [ 0 ] - b1 if ( a2 + b2 ) == M [ 1 ] [ 1 ] and ( a2 + b3 ) == M [ 1 ] [ 2 ] and ( a3 + b2 ) == M [ 2 ] [ 1 ] and ( a3 + b3 ) == M [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] for j in range ( 1 , 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] ans = ' Yes ' for k in range ( 3 ) : for l in range ( 3 ) : if C [ k ] [ l ] != A [ k ] + B [ l ] : ans = ' No ' print ( ans ) exit ( ) print ( ans )
import sys sys . setrecursionlimit ( 10 ** 8 ) ini = lambda : int ( sys . stdin . readline ( ) ) inm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) inl = lambda : list ( inm ( ) ) ins = lambda : sys . stdin . readline ( ) . rstrip ( ) debug = lambda * a , ** kw : print ( " \033 " , * a , " \033 " , ** dict ( file = sys . stderr , ** kw ) ) C = [ inl ( ) for _ in range ( 3 ) ] def solve ( ) : a10 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] if C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] != a10 or C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] != a10 : return False a21 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] != a21 or C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] != a21 : return False b10 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] if C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] != b10 or C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] != b10 : return False b21 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] if C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] != b21 or C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] != b21 : return False return True print ( " Yes " if solve ( ) else " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c1_m = c1 [ 0 ] c2_m = c2 [ 1 ] c3_m = c3 [ 2 ] for a_1 in range ( c1_m + 1 ) : b_1 = c1_m - a_1 for a_2 in range ( c2_m + 1 ) : b_2 = c2_m - a_2 for a_3 in range ( c3_m + 1 ) : b_3 = c3_m - a_3 flg = 0 if c1 [ 0 ] != ( a_1 + b_1 ) : flg + = 1 if c1 [ 1 ] != ( a_1 + b_2 ) : flg + = 1 if c1 [ 2 ] != ( a_1 + b_3 ) : flg + = 1 if c2 [ 0 ] != ( a_2 + b_1 ) : flg + = 1 if c2 [ 1 ] != ( a_2 + b_2 ) : flg + = 1 if c2 [ 2 ] != ( a_2 + b_3 ) : flg + = 1 if c3 [ 0 ] != ( a_3 + b_1 ) : flg + = 1 if c3 [ 1 ] != ( a_3 + b_2 ) : flg + = 1 if c3 [ 2 ] != ( a_3 + b_3 ) : flg + = 1 if flg == 0 : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( 3 ) : for l in range ( 3 ) : if c [ i ] [ j ] + c [ k ] [ l ] != c [ i ] [ l ] + c [ k ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ [ ] , [ ] , [ ] ] C [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) C [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) C [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) cond0_0 = C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] cond0_1 = C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] cond0_2 = C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] cond0 = cond0_0 and cond0_1 and cond0_2 cond1_0 = C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] cond1_1 = C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] cond1_2 = C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] cond1 = cond1_0 and cond1_1 and cond1_2 if cond0 and cond1 : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) n = ' No ' if c21 - c11 == c22 - c12 == c23 - c13 : if c31 - c11 == c32 - c12 == c33 - c13 : if c12 - c11 == c22 - c21 == c32 - c31 : if c13 - c11 == c23 - c21 == c33 - c31 : print ( ' Yes ' ) else : print ( n ) else : print ( n ) else : print ( n ) else : print ( n )
l = [ [ ] for _ in range ( 3 ) ] for i in range ( 0 , 3 ) : l [ i ] = [ int ( _ ) for _ in input ( ) . split ( ) ] t = [ 0 , 0 , 0 ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : t [ i ] += l [ j ] [ i ] p = ( t [ 0 ] - t [ 1 ] ) / 3 q = ( t [ 0 ] - t [ 2 ] ) / 3 if l [ 0 ] [ 0 ] - p == l [ 0 ] [ 1 ] and l [ 0 ] [ 0 ] - q == l [ 0 ] [ 2 ] and l [ 1 ] [ 0 ] - p == l [ 1 ] [ 1 ] and l [ 1 ] [ 0 ] - q == l [ 1 ] [ 2 ] and l [ 2 ] [ 0 ] - p == l [ 2 ] [ 1 ] and l [ 2 ] [ 0 ] - q == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import itertools import math import string import collections from collections import Counter from collections import deque from operator import itemgetter import sys sys . setrecursionlimit ( 2 * 10 ** 5 ) INF = 2 ** 60 def readints ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def nCr ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def has_duplicates2 ( seq ) : seen = [ ] for item in seq : if not ( item in seen ) : seen . append ( item ) return len ( seq ) != len ( seen ) def divisor ( n ) : divisor = [ ] for i in range ( 1 , n + 1 ) : if n % i == 0 : divisor . append ( i ) return divisor dx = [ - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 ] dy = [ - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 ] c = [ None ] * 3 for i in range ( 3 ) : c [ i ] = [ None ] * 3 for i in range ( 3 ) : c [ i ] = readints ( ) def func ( a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : continue return False break return True a = [ None ] * 3 b = [ None ] * 3 for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : for l in range ( 3 ) : a [ 0 ] = i a [ 1 ] = j a [ 2 ] = k b [ 0 ] = c [ l ] [ 0 ] - a [ l ] b [ 1 ] = c [ l ] [ 1 ] - a [ l ] b [ 2 ] = c [ l ] [ 2 ] - a [ l ] if func ( a , b ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c_lst = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] if c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] == c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 0 ] and c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 1 ] [ 2 ] + c_lst [ 2 ] [ 1 ] and c_lst [ 0 ] [ 0 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 0 ] [ 2 ] + c_lst [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
m = [ ] for i in range ( 3 ) : m . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True l = [ ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : l = [ ] for k in range ( 3 ) : l . append ( m [ i ] [ k ] - m [ j ] [ k ] ) if len ( set ( l ) ) != 1 : flag = False for i in range ( 2 ) : for j in range ( 1 , 3 ) : l = [ ] for k in range ( 3 ) : l . append ( m [ k ] [ i ] - m [ k ] [ j ] ) if len ( set ( l ) ) != 1 : flag = False print ( " Yes " if flag else " No " )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] C = np . array ( c ) check = np . zeros ( ( 3 , 3 ) ) for i in range ( min ( c [ 0 ] ) + 1 ) : check [ 0 ] = C [ 0 ] - i for j in range ( min ( c [ 1 ] ) + 1 ) : check [ 1 ] = C [ 1 ] - j for k in range ( min ( c [ 2 ] ) + 1 ) : check [ 2 ] = C [ 2 ] - k if list ( check [ 0 ] ) == list ( check [ 1 ] ) and list ( check [ 0 ] ) == list ( check [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
import copy def solve ( ) : c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) for a1 in range ( 0 , 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 if a2 != c [ 1 ] [ 1 ] - b2 or a2 != c [ 1 ] [ 2 ] - b3 : continue a3 = c [ 2 ] [ 0 ] - b1 if a3 != c [ 2 ] [ 1 ] - b2 or a3 != c [ 2 ] [ 2 ] - b3 : continue print ( ' Yes ' ) break else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
data = [ ] for i in range ( 3 ) : data . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if data [ 0 ] [ 0 ] - data [ 1 ] [ 0 ] == data [ 0 ] [ 1 ] - data [ 1 ] [ 1 ] == data [ 0 ] [ 2 ] - data [ 1 ] [ 2 ] : if data [ 1 ] [ 0 ] - data [ 2 ] [ 0 ] == data [ 1 ] [ 1 ] - data [ 2 ] [ 1 ] == data [ 1 ] [ 2 ] - data [ 2 ] [ 2 ] : if data [ 0 ] [ 0 ] - data [ 0 ] [ 1 ] == data [ 1 ] [ 0 ] - data [ 1 ] [ 1 ] == data [ 2 ] [ 0 ] - data [ 2 ] [ 1 ] : if data [ 0 ] [ 1 ] - data [ 0 ] [ 2 ] == data [ 1 ] [ 1 ] - data [ 1 ] [ 2 ] == data [ 2 ] [ 1 ] - data [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " ) else : print ( " No " ) else : print ( " No " )
def main ( ) : import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] f = [ [ x [ 0 ] - x [ 1 ] , x [ 1 ] - x [ 2 ] , x [ 2 ] - x [ 0 ] ] for x in c ] g = f [ 0 ] == f [ 1 ] == f [ 2 ] print ( ' Yes ' if g else ' No ' ) if __name__ == ' __main__ ' : main ( )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 0 , 101 ) : a [ 0 ] = i a [ 1 ] = - 1 a [ 2 ] = - 1 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] for j in range ( 1 , 3 ) : if c [ j ] [ 0 ] - b [ 0 ] != c [ j ] [ 1 ] - b [ 1 ] or c [ j ] [ 1 ] - b [ 1 ] != c [ j ] [ 2 ] - b [ 2 ] : break a [ j ] = c [ j ] [ 0 ] - b [ 0 ] if j == 2 and check ( a , b ) : print ( ' Yes ' ) return print ( ' No ' ) def check ( a , b ) : for i in range ( 0 , 3 ) : if a [ i ] >= 0 and b [ i ] >= 0 : continue else : return False return True if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 101 ) : info = True a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if min ( a1 , a2 , a3 , b1 , b2 , b3 ) < 0 : info = False if c [ 1 ] [ 1 ] != a2 + b2 : info = False if c [ 2 ] [ 1 ] != a3 + b2 : info = False if c [ 1 ] [ 2 ] != a2 + b3 : info = False if c [ 2 ] [ 2 ] != a3 + b3 : info = False if info : print ( " Yes " ) break else : print ( " No " )
cl = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) cl . append ( c ) rcl , trcl , acl , bcl = [ ] , [ ] , [ ] , [ ] tcl = [ x for x in zip ( * cl ) ] for i in range ( 3 ) : rcb = [ ] trca = [ ] for j in range ( 3 ) : if j < 2 : rc = cl [ i ] [ j ] - cl [ i ] [ j + 1 ] trc = tcl [ i ] [ j ] - tcl [ i ] [ j + 1 ] else : rc = cl [ i ] [ j ] - cl [ i ] [ j - 2 ] trc = tcl [ i ] [ j ] - tcl [ i ] [ j - 2 ] rcb . append ( rc ) trca . append ( trc ) rcl . append ( rcb ) trcl . append ( trca ) for i in range ( 3 ) : if i < 2 : bc = [ x - y for ( x , y ) in zip ( rcl [ i ] , rcl [ i + 1 ] ) ] ac = [ x - y for ( x , y ) in zip ( trcl [ i ] , trcl [ i + 1 ] ) ] else : bc = [ x - y for ( x , y ) in zip ( rcl [ i ] , rcl [ i - 2 ] ) ] ac = [ x - y for ( x , y ) in zip ( trcl [ i ] , trcl [ i - 2 ] ) ] bcl . append ( bc ) acl . append ( ac ) f = lambda x : True if x == 0 else False aclb = [ all ( [ f ( n ) for n in acl [ m ] ] ) for m in range ( 3 ) ] bclb = [ all ( [ f ( n ) for n in bcl [ m ] ] ) for m in range ( 3 ) ] if all ( aclb ) & all ( bclb ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = [ c [ i ] [ i ] for i in range ( 3 ) ] c2 = [ sum ( i ) for i in c ] print ( ' Yes ' if sum ( c1 ) * 3 == sum ( c2 ) else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - i b2 = c [ 0 ] [ 1 ] - i b3 = c [ 0 ] [ 2 ] - i if c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 : if c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 : print ( " Yes " ) break else : continue else : continue else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if 2 * c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] == 2 * c [ 0 ] [ 0 ] : if 2 * c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 1 ] == 2 * c [ 1 ] [ 1 ] : if 2 * c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] == 2 * c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for j in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] or c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] != c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = [ ] B = [ ] for i in range ( 3 ) : A . append ( sum ( C [ i ] ) ) B . append ( C [ 0 ] [ i ] + C [ 1 ] [ i ] + C [ 2 ] [ i ] ) if ( A [ 0 ] - A [ 1 ] ) % 3 == 0 and ( A [ 1 ] - A [ 2 ] ) % 3 == 0 and ( A [ 2 ] - A [ 0 ] ) % 3 == 0 : if ( B [ 0 ] - B [ 1 ] ) % 3 == 0 and ( B [ 1 ] - B [ 2 ] ) % 3 == 0 and ( B [ 2 ] - B [ 0 ] ) % 3 == 0 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) sum_mat = ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) / 3 print ( ' Yes ' if sum_mat == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] else ' No ' )
c = list ( map ( int , open ( 0 ) . read ( ) . split ( ) ) ) a = all ( [ c [ i ] - c [ i + 1 ] == c [ i + 3 ] - c [ i + 4 ] for i in [ 0 , 1 , 3 , 4 ] ] ) b = all ( [ c [ i ] - c [ i + 3 ] == c [ i + 1 ] - c [ i + 4 ] for i in [ 0 , 1 , 3 , 4 ] ] ) if a and b : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 0 , 3 ) : for j in range ( i , 3 ) : if a [ i ] + b [ j ] != a [ j ] + b [ i ] or a [ i ] + c [ j ] != a [ j ] + c [ i ] or b [ i ] + c [ j ] != b [ j ] + c [ i ] : print ( " No " ) quit ( 0 ) print ( " Yes " )
C_grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 , a2 , a3 = C_grid [ 0 ] [ 1 ] - C_grid [ 0 ] [ 0 ] , C_grid [ 0 ] [ 2 ] - C_grid [ 0 ] [ 1 ] , C_grid [ 0 ] [ 0 ] - C_grid [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : gyo = C_grid [ i ] k1 , k2 , k3 = gyo [ 1 ] - gyo [ 0 ] , gyo [ 2 ] - gyo [ 1 ] , gyo [ 0 ] - gyo [ 2 ] if a1 == k1 and a2 == k2 and a3 == k3 : continue else : print ( ' No ' ) exit ( 0 ) a1 , a2 , a3 = C_grid [ 1 ] [ 0 ] - C_grid [ 0 ] [ 0 ] , C_grid [ 2 ] [ 0 ] - C_grid [ 1 ] [ 0 ] , C_grid [ 0 ] [ 0 ] - C_grid [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : k1 , k2 , k3 = C_grid [ 1 ] [ i ] - C_grid [ 0 ] [ i ] , C_grid [ 2 ] [ i ] - C_grid [ 1 ] [ i ] , C_grid [ 0 ] [ i ] - C_grid [ 2 ] [ i ] if a1 == k1 and a2 == k2 and a3 == k3 : continue else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
import sys from collections import Counter from collections import deque def input ( ) : return sys . stdin . readline ( ) . strip ( ) def mp ( ) : return map ( int , input ( ) . split ( ) ) def lmp ( ) : return list ( map ( int , input ( ) . split ( ) ) ) l = [ lmp ( ) for i in range ( 3 ) ] n1 = l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] n2 = l [ 0 ] [ 0 ] - l [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if n1 != l [ i ] [ 0 ] - l [ i ] [ 1 ] or n2 != l [ i ] [ 0 ] - l [ i ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True s = sum ( c [ 0 ] ) % 3 t = sum ( c [ i ] [ 0 ] for i in range ( 3 ) ) % 3 for i in range ( 1 , 3 ) : if sum ( c [ i ] ) % 3 != s : flg = False if sum ( c [ j ] [ i ] for j in range ( 3 ) ) % 3 != t : flg = False if flg : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) A1 = - 1 A2 = - 1 A3 = - 1 B1 = - 1 B2 = - 2 B3 = - 1 flag = 0 for j in range ( a + 1 ) : A1 = j B1 = a - A1 B2 = b - A1 B3 = c - A1 if B1 < 0 or B2 < 0 or B3 < 0 : continue A2 = d - B1 A3 = g - B1 if A2 < 0 or A3 < 0 : continue if d - B1 == e - B2 and e - B2 == f - B3 and g - B1 == h - B2 and h - B2 == i - B3 : flag = 1 break print ( ' Yes ' if flag else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if ( a2 + b2 ) == c [ 1 ] [ 1 ] and ( a2 + b3 ) == c [ 1 ] [ 2 ] and ( a3 + b2 ) == c [ 2 ] [ 1 ] and ( a3 + b3 ) == c [ 2 ] [ 2 ] : print ( " Yes " ) break else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : if ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) == ( c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ) == ( c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : continue else : print ( ' No ' ) exit ( 0 ) for j in range ( 2 ) : if ( c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ) == ( c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ) == ( c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ) : continue else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
a = input ( ) . split ( ) b = input ( ) . split ( ) c = input ( ) . split ( ) lista = [ int ( d ) for d in a ] listb = [ int ( e ) for e in b ] listc = [ int ( f ) for f in c ] b1 = lista [ 0 ] b2 = lista [ 1 ] b3 = lista [ 2 ] a2 = listb [ 0 ] - b1 a3 = listc [ 0 ] - b1 if a2 + b2 == listb [ 1 ] and a2 + b3 == listb [ 2 ] and a3 + b2 == listc [ 1 ] and a3 + b3 == listc [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False print ( " Yes " if flag else " No " )
k = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( k [ 0 ] [ 0 ] - a1 ) == ( k [ 0 ] [ 1 ] - a2 ) == ( k [ 0 ] [ 2 ] - a3 ) : if ( k [ 1 ] [ 0 ] - a1 ) == ( k [ 1 ] [ 1 ] - a2 ) == ( k [ 1 ] [ 2 ] - a3 ) : if ( k [ 2 ] [ 0 ] - a1 ) == ( k [ 2 ] [ 1 ] - a2 ) == ( k [ 2 ] [ 2 ] - a3 ) : if k [ 0 ] [ 0 ] - a1 >= 0 and k [ 0 ] [ 1 ] - a2 >= 0 and k [ 0 ] [ 2 ] - a3 >= 0 : if ( k [ 1 ] [ 0 ] - a1 ) >= 0 and ( k [ 1 ] [ 1 ] - a2 ) >= 0 and ( k [ 1 ] [ 2 ] - a3 ) >= 0 : if ( k [ 2 ] [ 0 ] - a1 ) >= 0 and ( k [ 2 ] [ 1 ] - a2 ) >= 0 and ( k [ 2 ] [ 2 ] - a3 ) >= 0 : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = [ ] a2 = [ ] b1 = [ ] b2 = [ ] for i in range ( 3 ) : a1 . append ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) a2 . append ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) b1 . append ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) b2 . append ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) def l ( x ) : return len ( list ( set ( x ) ) ) if ( l ( a1 ) == 1 ) and ( l ( a2 ) == 1 ) and ( l ( b1 ) == 1 ) and ( l ( b2 ) == 1 ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a_a = set ( ) a_b = set ( ) a_c = set ( ) for i in range ( 3 ) : a_a . add ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) a_b . add ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) a_c . add ( c [ i ] [ 2 ] - c [ i ] [ 0 ] ) if len ( a_a ) == 1 and len ( a_b ) == 1 and len ( a_c ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) flg = True for i in range ( 2 ) : if not c [ 0 , i ] - c [ 0 , i + 1 ] == c [ 1 , i ] - c [ 1 , i + 1 ] == c [ 2 , i ] - c [ 2 , i + 1 ] : flg = False break if not c [ i , 0 ] - c [ i + 1 , 0 ] == c [ i , 1 ] - c [ i + 1 , 1 ] == c [ i , 2 ] - c [ i + 1 , 2 ] : flg = False break print ( ' Yes ' ) if flg else print ( ' No ' )
grid = list ( ) for i in range ( 3 ) : grid . append ( [ int ( k ) for k in input ( ) . split ( " " ) ] ) def check_vert ( ) : for i in range ( 2 ) : diffs = [ grid [ k ] [ i ] - grid [ k ] [ i + 1 ] for k in range ( 3 ) ] if not len ( set ( diffs ) ) == 1 : return False else : return True def check_hor ( ) : for i in range ( 2 ) : diffs = [ grid [ i ] [ k ] - grid [ i + 1 ] [ k ] for k in range ( 3 ) ] if not len ( set ( diffs ) ) == 1 : return False else : return True if check_hor ( ) and check_vert ( ) : print ( " Yes " ) else : print ( " No " )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] total1 = 0 total2 = 0 for i in range ( 3 ) : total1 += sum ( l [ i ] ) total2 += l [ i ] [ i ] if total1 == total2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = True break if flag : print ( ' No ' ) else : print ( ' Yes ' )
L1 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : l = list ( map ( int , input ( ) . split ( ) ) ) sabun = None for j in range ( 3 ) : if sabun == None : sabun = L1 [ j ] - l [ j ] elif L1 [ j ] - l [ j ] != sabun : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) ans = True a1 = 0 b = [ ] for i in range ( 3 ) : b . append ( c1 [ i ] - a1 ) a2 = c2 [ 0 ] - b [ 0 ] a3 = c3 [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : if a2 + b [ i ] != c2 [ i ] or a3 + b [ i ] != c3 [ i ] : ans = False break if ans == True : print ( " Yes " ) else : print ( " No " )
c = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( - 500 , 500 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] and c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] and c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] and ( c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) : print ( " Yes " ) break if c [ 1 ] [ 1 ] != a [ 1 ] + b [ 1 ] or c [ 1 ] [ 2 ] != a [ 1 ] + b [ 2 ] or c [ 2 ] [ 1 ] != a [ 2 ] + b [ 1 ] or ( c [ 2 ] [ 2 ] != a [ 2 ] + b [ 2 ] ) : if i == 499 : print ( " No " )
def resolve ( ) : A = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] B = [ ] for i in range ( 3 ) : C = [ ] for j in range ( 3 ) : C . append ( A [ i ] [ j ] - min ( A [ i ] ) ) B . append ( C ) flag = True for i in range ( 3 ) : if B [ 0 ] [ i ] != B [ 1 ] [ i ] or B [ 0 ] [ i ] != B [ 2 ] [ i ] : flag = False if flag == True : print ( " Yes " ) else : print ( " No " ) resolve ( )
def solve ( ) : import sys s = list ( map ( int , sys . stdin . read ( ) . split ( ) ) ) x , y , z = s [ 0 ] + s [ 4 ] + s [ 8 ] , s [ 1 ] + s [ 5 ] + s [ 6 ] , s [ 2 ] + s [ 3 ] + s [ 7 ] if x == y == z : print ( " Yes " ) else : print ( " No " ) solve ( )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] f = True for j in range ( 2 ) : x = c [ j ] [ 0 ] - c [ j + 1 ] [ 0 ] y = c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] for i in range ( 3 ) : if c [ j ] [ i ] - c [ j + 1 ] [ i ] != x : f = False if c [ i ] [ j ] - c [ i ] [ j + 1 ] != y : f = False print ( [ ' No ' , ' Yes ' ] [ int ( f ) ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] e = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] f = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] if any ( e != c [ x ] [ 1 ] - c [ x ] [ 0 ] for x in [ 1 , 2 ] ) or any ( f != c [ x ] [ 2 ] - c [ x ] [ 1 ] for x in [ 1 , 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
from itertools import product c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] if ( a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : m [ i ] [ j ] = l [ i ] [ j ] - l [ 0 ] [ j ] for i in range ( 3 ) : f = True for j in range ( 3 ) : if m [ i ] [ j ] != m [ i ] [ 0 ] : f = False break if not f : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) count = 0 if c21 - c11 == c22 - c12 == c23 - c13 : count + = 1 if c31 - c21 == c32 - c22 == c33 - c23 : count + = 1 if c12 - c11 == c22 - c21 == c32 - c31 : count + = 1 if c13 - c12 == c23 - c22 == c33 - c32 : count + = 1 if count == 4 : print ( " Yes " ) else : print ( " No " )
k = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( k [ 0 ] [ 0 ] - a1 ) == ( k [ 0 ] [ 1 ] - a2 ) == ( k [ 0 ] [ 2 ] - a3 ) : if ( k [ 1 ] [ 0 ] - a1 ) == ( k [ 1 ] [ 1 ] - a2 ) == ( k [ 1 ] [ 2 ] - a3 ) : if ( k [ 2 ] [ 0 ] - a1 ) == ( k [ 2 ] [ 1 ] - a2 ) == ( k [ 2 ] [ 2 ] - a3 ) : if k [ 0 ] [ 0 ] - a1 >= 0 and k [ 0 ] [ 1 ] - a2 >= 0 and k [ 0 ] [ 2 ] - a3 >= 0 : if ( k [ 1 ] [ 0 ] - a1 ) >= 0 and ( k [ 1 ] [ 1 ] - a2 ) >= 0 and ( k [ 1 ] [ 2 ] - a3 ) >= 0 : if ( k [ 2 ] [ 0 ] - a1 ) >= 0 and ( k [ 2 ] [ 1 ] - a2 ) >= 0 and ( k [ 2 ] [ 2 ] - a3 ) >= 0 : print ( " Yes " ) exit ( ) print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) flag = True for a1 in range ( c . max ( ) + 1 ) : b1 , b2 , b3 = c [ 0 , : ] - a1 if ( c [ 1 , 0 ] - b1 != c [ 1 , 1 ] - b2 ) or ( c [ 1 , 2 ] - b3 != c [ 1 , 0 ] - b1 ) : flag = False break if ( c [ 2 , 0 ] - b1 != c [ 2 , 1 ] - b2 ) or ( c [ 2 , 2 ] - b3 != c [ 2 , 0 ] - b1 ) : flag = False break print ( " Yes " if flag else " No " )
import sys input = sys . stdin . readline sys . setrecursionlimit ( 1000000 ) from collections import deque def getN ( ) : return int ( input ( ) ) def getList ( ) : return list ( map ( int , input ( ) . split ( ) ) ) import math import bisect from logging import getLogger , StreamHandler , DEBUG , WARNING logger = getLogger ( __name__ ) handler = StreamHandler ( ) handler . setLevel ( DEBUG ) logger . setLevel ( DEBUG ) logger . addHandler ( handler ) def judge ( a1 , a2 , a3 , nums ) : b1 = nums [ 0 ] [ 0 ] - a1 b2 = nums [ 0 ] [ 1 ] - a1 b3 = nums [ 0 ] [ 2 ] - a1 if a2 + b1 == nums [ 1 ] [ 0 ] and a2 + b2 == nums [ 1 ] [ 1 ] and a2 + b3 == nums [ 1 ] [ 2 ] : if a3 + b1 == nums [ 2 ] [ 0 ] and a3 + b2 == nums [ 2 ] [ 1 ] and a3 + b3 == nums [ 2 ] [ 2 ] : return True return False def main ( ) : nums = [ getList ( ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if judge ( a1 , a2 , a3 , nums ) : print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ ] for _ in range ( 3 ) : tmp = [ int ( x ) for x in input ( ) . split ( ) ] c . append ( tmp ) ans = True for i in range ( 2 ) : if ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] ) == ( c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) == ( c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) : pass else : ans = False break for i in range ( 2 ) : if ( c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] ) == ( c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] ) == ( c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] ) : pass else : ans = False break if ans : print ( " Yes " ) else : print ( " No " )
def solve ( c1_list , c2_list , c3_list ) : a1 = 0 ans = " No " while a1 <= 100 : b_list = [ c - a1 for c in c1_list ] a2 = len ( set ( [ c - b for c , b in zip ( c2_list , b_list ) ] ) ) a3 = len ( set ( [ c - b for c , b in zip ( c3_list , b_list ) ] ) ) if a2 == 1 and a3 == 1 : ans = " Yes " break else : a1 + = 1 return ans if __name__ == " __main__ " : c1_list = [ int ( i ) for i in input ( ) . split ( ) ] c2_list = [ int ( i ) for i in input ( ) . split ( ) ] c3_list = [ int ( i ) for i in input ( ) . split ( ) ] print ( solve ( c1_list , c2_list , c3_list ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ ] B = [ ] for i in range ( 3 ) : A . append ( [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] ) for i in range ( 3 ) : B . append ( [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] ) ans = ' Yes ' if A [ 0 ] != A [ 1 ] : ans = ' No ' elif A [ 1 ] != A [ 2 ] : ans = ' No ' elif B [ 0 ] != B [ 1 ] : ans = ' No ' elif B [ 1 ] != B [ 2 ] : ans = ' No ' print ( ans )
import sys def solve ( inp ) : A = [ list ( map ( int , inp . readline ( ) . split ( ' ' ) ) ) for i in range ( 3 ) ] m = list ( map ( min , A ) ) for a1 in range ( m [ 0 ] + 1 ) : c1 = [ A [ 0 ] [ 0 ] - a1 , A [ 0 ] [ 1 ] - a1 , A [ 0 ] [ 2 ] - a1 ] for a2 in range ( m [ 1 ] + 1 ) : c2 = [ A [ 1 ] [ 0 ] - a2 , A [ 1 ] [ 1 ] - a2 , A [ 1 ] [ 2 ] - a2 ] for a3 in range ( m [ 2 ] + 1 ) : c3 = [ A [ 2 ] [ 0 ] - a3 , A [ 2 ] [ 1 ] - a3 , A [ 2 ] [ 2 ] - a3 ] if c1 == c2 == c3 : return " Yes " return " No " def main ( ) : result = solve ( sys . stdin ) if result : print ( result ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for x in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
grid = [ [ - 1 ] * 4 for i in range ( 4 ) ] for i in range ( 1 , 4 ) : grid [ i ] [ 1 ] , grid [ i ] [ 2 ] , grid [ i ] [ 3 ] = map ( int , input ( ) . split ( ) ) grid [ i ] [ 0 ] = min ( grid [ i ] [ 1 ] , grid [ i ] [ 2 ] , grid [ i ] [ 3 ] ) isOK = False for i in range ( grid [ 1 ] [ 0 ] + 1 ) : grid [ 0 ] [ 0 ] = i grid [ 0 ] [ 1 ] = grid [ 1 ] [ 1 ] - i grid [ 0 ] [ 2 ] = grid [ 1 ] [ 2 ] - i grid [ 0 ] [ 3 ] = grid [ 1 ] [ 3 ] - i if grid [ 2 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 2 ] [ 2 ] - grid [ 0 ] [ 2 ] and grid [ 2 ] [ 2 ] - grid [ 0 ] [ 2 ] == grid [ 2 ] [ 3 ] - grid [ 0 ] [ 3 ] : if grid [ 3 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 3 ] [ 2 ] - grid [ 0 ] [ 2 ] and grid [ 3 ] [ 2 ] - grid [ 0 ] [ 2 ] == grid [ 3 ] [ 3 ] - grid [ 0 ] [ 3 ] : isOK = True break if isOK : print ( ' Yes ' ) else : print ( ' No ' )
c = [ input ( ) . split ( ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = int ( c [ 0 ] [ 0 ] ) - a1 if b1 < 0 : continue b2 = int ( c [ 0 ] [ 1 ] ) - a1 if b2 < 0 : continue b3 = int ( c [ 0 ] [ 2 ] ) - a1 if b3 < 0 : continue a2 = int ( c [ 1 ] [ 0 ] ) - b1 if a2 < 0 : continue a3 = int ( c [ 2 ] [ 0 ] ) - b1 if a3 < 0 : continue if int ( c [ 1 ] [ 1 ] ) != ( a2 + b2 ) : continue if int ( c [ 1 ] [ 2 ] ) != ( a2 + b3 ) : continue if int ( c [ 2 ] [ 1 ] ) != ( a3 + b2 ) : continue if int ( c [ 2 ] [ 2 ] ) != ( a3 + b3 ) : continue print ( " Yes " ) break else : print ( " No " )
import numpy as np IN = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c = np . array ( IN ) column = np . sum ( c , axis = 0 ) row = np . sum ( c , axis = 1 ) S = np . sum ( c ) if S % 3 == 0 : S_ = S // 3 for i in range ( S_ + 1 ) : x = i y = S_ - x row_ = row - y column_ = column - x if all ( col % 3 == 0 for col in column_ ) and all ( ro % 3 == 0 for ro in row_ ) : print ( " Yes " ) break else : print ( " No " ) else : print ( " No " )
C = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) ans = ' Yes ' for i in range ( 2 ) : d = C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] for j in range ( 2 ) : if C [ j ] [ i + 1 ] - C [ j ] [ i ] != d : ans = ' No ' print ( ans )
x = list ( map ( int , input ( ) . split ( ) ) ) y = list ( map ( int , input ( ) . split ( ) ) ) z = list ( map ( int , input ( ) . split ( ) ) ) a = ( sum ( x ) + sum ( y ) + sum ( z ) ) / 3 b = x [ 0 ] + y [ 1 ] + z [ 2 ] c = x [ 1 ] + y [ 2 ] + z [ 0 ] d = x [ 2 ] + y [ 0 ] + z [ 1 ] if a == b == c == d : print ( ' Yes ' ) else : print ( ' No ' )
import sys sys . setrecursionlimit ( 10 ** 7 ) input = sys . stdin . readline f_inf = float ( ' inf ' ) mod = 10 ** 9 + 7 def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] for j in range ( 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] != C [ i ] [ j ] : print ( " No " ) break else : continue break else : print ( " Yes " ) if __name__ == ' __main__ ' : resolve ( )
G = [ ] for i in range ( 3 ) : g = list ( map ( int , input ( ) . split ( ) ) ) G . append ( g ) ok = True if G [ 1 ] [ 1 ] != G [ 1 ] [ 0 ] - G [ 0 ] [ 0 ] + G [ 0 ] [ 1 ] : ok = False if G [ 1 ] [ 2 ] != G [ 1 ] [ 0 ] - G [ 0 ] [ 0 ] + G [ 0 ] [ 2 ] : ok = False if G [ 2 ] [ 1 ] != G [ 2 ] [ 0 ] - G [ 0 ] [ 0 ] + G [ 0 ] [ 1 ] : ok = False if G [ 2 ] [ 2 ] != G [ 2 ] [ 0 ] - G [ 0 ] [ 0 ] + G [ 0 ] [ 2 ] : ok = False if ok : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] j = True for i in range ( 2 ) : if abs ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) == abs ( c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ) == abs ( c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : pass else : j = False for i in range ( 2 ) : if abs ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ) == abs ( c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] ) == abs ( c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : pass else : j = False if j : print ( " Yes " ) else : print ( " No " )
arr = [ ] for _ in range ( 3 ) : arr += list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = arr [ 0 ] b [ 1 ] = arr [ 1 ] b [ 2 ] = arr [ 2 ] a [ 1 ] = arr [ 4 ] - b [ 1 ] a [ 2 ] = arr [ 8 ] - b [ 2 ] tmp = [ a [ i ] + b [ j ] for i in range ( 3 ) for j in range ( 3 ) ] print ( ' Yes ' if arr == tmp else ' No ' )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) flag = False if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : flag = True if flag : print ( ' Yes ' ) else : print ( ' No ' )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 1 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 2 ] [ 0 ] : if l [ 0 ] [ 2 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 2 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 2 ] - l [ 2 ] [ 0 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] d1 = [ ] d2 = [ ] for i in range ( 3 ) : d1 . append ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d2 . append ( c [ 2 ] [ i ] - c [ 0 ] [ i ] ) print ( ' Yes ' if ( d1 [ 0 ] == d1 [ 1 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] == d2 [ 2 ] ) else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 ) and ( c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 ) and ( c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) exit ( ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e == g - h and b - c == e - f == h - i and a - d == b - e == c - f and d - g == e - h == f - i : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] answer = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != x [ i ] + y [ j ] : answer = ' No ' print ( answer )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) mis = 0 if a [ 0 ] + b [ 1 ] != a [ 1 ] + b [ 0 ] : print ( " No " ) quit ( 0 ) elif a [ 1 ] + b [ 2 ] != a [ 2 ] + b [ 1 ] : print ( " No " ) quit ( 0 ) elif a [ 0 ] + b [ 2 ] != a [ 2 ] + b [ 0 ] : print ( " No " ) quit ( 0 ) elif a [ 0 ] + c [ 1 ] != c [ 1 ] + a [ 0 ] : print ( " No " ) quit ( 0 ) elif a [ 1 ] + c [ 2 ] != a [ 2 ] + c [ 1 ] : print ( " No " ) quit ( 0 ) elif a [ 0 ] + c [ 2 ] != a [ 2 ] + c [ 0 ] : print ( " No " ) quit ( 0 ) elif b [ 0 ] + c [ 1 ] != c [ 1 ] + b [ 0 ] : print ( " No " ) quit ( 0 ) elif b [ 1 ] + c [ 2 ] != b [ 2 ] + c [ 1 ] : print ( " No " ) quit ( 0 ) elif b [ 0 ] + c [ 2 ] != b [ 2 ] + c [ 0 ] : print ( " No " ) quit ( 0 ) print ( " Yes " )
lst = [ ] for i in range ( 3 ) : l = list ( map ( int , input ( ) . split ( ) ) ) lst . append ( l ) for i in range ( 1 , 3 ) : diff = lst [ i ] [ 0 ] - lst [ 0 ] [ 0 ] for j in range ( 3 ) : lst [ i ] [ j ] -= diff if lst [ i ] != lst [ 0 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] , [ int ( x ) for x in input ( ) . split ( ) ] , [ int ( x ) for x in input ( ) . split ( ) ] ] a1max = min ( C [ 0 ] ) for a1 in range ( a1max + 1 ) : b1 , b2 , b3 = C [ 0 ] [ 0 ] - a1 , C [ 0 ] [ 1 ] - a1 , C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and \ C [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) a1 , a2 , a3 = [ 0 , c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] , c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ] b1 , b2 , b3 = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] if ans == c : print ( " Yes " ) else : print ( " No " )
c = [ ] for h in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for n in range ( 1 , 3 ) : for h in range ( 1 , 3 ) : if c [ h ] [ n ] != a [ h ] + b [ n ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys read = sys . stdin . read readline = sys . stdin . readline readlines = sys . stdin . readlines sys . setrecursionlimit ( 10 ** 9 ) INF = 1 << 60 MOD = 1000000007 def main ( ) : C = [ list ( map ( int , readline ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] for i in range ( 1 , 3 ) : A [ i ] = C [ i ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : print ( ' No ' ) return print ( ' Yes ' ) return if __name__ == ' __main__ ' : main ( )
t = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if t [ 0 ] [ 0 ] + t [ 1 ] [ 1 ] + t [ 2 ] [ 2 ] == t [ 0 ] [ 1 ] + t [ 1 ] [ 2 ] + t [ 2 ] [ 0 ] == t [ 0 ] [ 2 ] + t [ 1 ] [ 0 ] + t [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
if __name__ == " __main__ " : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 , 0 , 0 ] b = [ c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] ] a [ 1 ] = c2 [ 1 ] - b [ 1 ] a [ 2 ] = c3 [ 1 ] - b [ 1 ] flg = True for i in range ( 3 ) : for j in range ( 3 ) : flg = flg & ( a [ i ] + b [ j ] == c [ i ] [ j ] ) if flg : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 for i in range ( 3 ) ] B_cand = [ [ 0 for i in range ( 3 ) ] for i in range ( 3 ) ] A [ 0 ] = min ( C [ 0 ] ) A [ 1 ] = min ( C [ 1 ] ) A [ 2 ] = min ( C [ 2 ] ) for i in range ( 3 ) : for j in range ( 3 ) : B_cand [ i ] [ j ] = C [ i ] [ j ] - A [ i ] if ( B_cand [ 0 ] == B_cand [ 1 ] == B_cand [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( ( System . in ) ) ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; int [ ] z = new int [ 3 ] ; String ans = " No " ; for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { z [ i ] = sc . nextInt ( ) ; } if ( x [ 0 ] - x [ 1 ] == y [ 0 ] - y [ 1 ] && z [ 0 ] - z [ 1 ] == y [ 0 ] - y [ 1 ] && x [ 0 ] - x [ 1 ] == z [ 0 ] - z [ 1 ] ) { if ( x [ 1 ] - x [ 2 ] == y [ 1 ] - y [ 2 ] && z [ 1 ] - z [ 2 ] == y [ 1 ] - y [ 2 ] && x [ 1 ] - x [ 2 ] == z [ 1 ] - z [ 2 ] ) { if ( x [ 2 ] - x [ 0 ] == y [ 2 ] - y [ 0 ] && z [ 2 ] - z [ 0 ] == y [ 2 ] - y [ 0 ] && x [ 2 ] - x [ 0 ] == z [ 2 ] - z [ 0 ] ) { ans = " Yes " ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int min = 210000 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= min ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { int n ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = sc . nextInt ( ) ; } long max_now = arr [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( arr [ i ] <= max_now ) { ans ++ ; } max_now = Math . min ( max_now , arr [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] array = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { array [ i ] [ j ] = sc . nextInt ( ) ; } } int old = 5000 ; int a = array [ 0 ] [ 0 ] ; int b = array [ 0 ] [ 1 ] ; int c = array [ 0 ] [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { int d = array [ i + 1 ] [ 0 ] - a ; int e = array [ i + 1 ] [ 1 ] - b ; int f = array [ i + 1 ] [ 2 ] - c ; if ( d == e && e == f ) { if ( i == 1 ) { System . out . println ( " Yes " ) ; return ; } } else { System . out . println ( " No " ) ; return ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sca = new Scanner ( System . in ) ; int n = sca . nextInt ( ) ; int [ ] pi = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pi [ i ] = sca . nextInt ( ) ; } int ans = 0 ; int min = 300000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > pi [ i ] ) { min = pi [ i ] ; ans ++ ; } else { } } System . out . println ( ans ) ; sca . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Integer n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] <= min ) { ans ++ ; min = array [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = 3 ; int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 , a2 , a3 , b1 , b2 , b3 ; String ans = " No " ; for ( int i = 0 ; i < n ; i ++ ) { a1 = i ; b1 = c [ 0 ] [ 0 ] - a1 ; b2 = c [ 0 ] [ 1 ] - a1 ; b3 = c [ 0 ] [ 2 ] - a1 ; a2 = c [ 1 ] [ 0 ] - b1 ; a3 = c [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( ( z >= 0 ) && ( z <= k ) ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String msg = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { int a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] != a ) { msg = " No " ; break ; } a = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; if ( c [ i ] [ 2 ] - c [ i ] [ 1 ] != a ) { msg = " No " ; break ; } a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; if ( c [ 1 ] [ i ] - c [ 0 ] [ i ] != a ) { msg = " No " ; break ; } a = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; if ( c [ 2 ] [ i ] - c [ 1 ] [ i ] != a ) { msg = " No " ; break ; } } System . out . println ( msg ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = N ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( final String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int n = scanner . nextInt ( ) ; int min = 200001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { final int p = scanner . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { int z = s ; z = z - i - j ; if ( z >= 0 && z <= n ) counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int num ; int count = 1 ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; } num = p [ 0 ] ; for ( int i = 1 ; i < p . length ; ++ i ) { if ( p [ i ] < num ) { count += 1 ; num = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int l ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { l = s - i - j ; if ( ! ( l < 0 || k < l ) && i + j + l == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long Count = 0l ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int ch = sc . nextInt ( ) ; if ( ch <= min ) { Count ++ ; min = ch ; } } System . out . println ( Count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int min = Integer . parseInt ( sc . next ( ) ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = Integer . parseInt ( sc . next ( ) ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = in . nextInt ( ) ; for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = arr [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = arr [ 0 ] [ j ] - a [ 0 ] ; for ( int k = 0 ; k < 3 ; k ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ k ] [ j ] != a [ k ] + b [ j ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } a = null ; b = null ; } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int k = scn . nextInt ( ) ; int s = scn . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; ++ x ) { for ( int y = 0 ; y <= k ; ++ y ) { if ( s >= x + y && s - ( x + y ) <= k ) { count = count + 1 ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && 0 <= s - x - y ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . ArrayList ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int max = Integer . MAX_VALUE ; int c = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] < max ) { max = a [ j ] ; c ++ ; } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . io . * ; import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int lo = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = input . nextInt ( ) ; if ( x < lo ) { cnt ++ ; lo = x ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int N ; int [ ] Pi = null ; try ( Scanner sc = new Scanner ( System . in ) ) { N = sc . nextInt ( ) ; Pi = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { Pi [ i ] = sc . nextInt ( ) ; } } int result = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < Pi . length ; i ++ ) { if ( Pi [ i ] < min ) { result ++ ; min = Pi [ i ] ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { @ SuppressWarnings ( " resource " ) public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] d = new int [ 3 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { d [ i ] [ j ] = c [ i ] [ j + 1 ] - c [ i ] [ j ] ; } } if ( d [ 0 ] [ 0 ] == d [ 1 ] [ 0 ] && d [ 1 ] [ 0 ] == d [ 2 ] [ 0 ] && d [ 0 ] [ 1 ] == d [ 1 ] [ 1 ] && d [ 1 ] [ 1 ] == d [ 2 ] [ 1 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; double dMax = Double . MIN_VALUE ; double dMin = Double . MAX_VALUE ; Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int a = s - i - j ; if ( a <= k && a >= 0 ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public Main ( ) { Scanner sc = new Scanner ( System . in ) ; int n = 3 ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; int [ ] b1 = dif ( a [ 0 ] ) ; int [ ] b2 = dif ( a [ 1 ] ) ; int [ ] b3 = dif ( a [ 2 ] ) ; if ( b1 [ 0 ] == b2 [ 0 ] && b1 [ 1 ] == b2 [ 1 ] && b2 [ 0 ] == b3 [ 0 ] && b2 [ 1 ] == b3 [ 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private int [ ] dif ( int a [ ] ) { return new int [ ] { a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 1 ] } ; } public static void main ( String [ ] args ) { new Main ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner Input = new Scanner ( System . in ) ; int K = Input . nextInt ( ) ; int S = Input . nextInt ( ) ; int Counter = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( 0 <= S - ( X + Y ) && S - ( X + Y ) <= K ) { Counter ++ ; } } } System . out . println ( Counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int n = Integer . parseInt ( scanner . next ( ) ) ; int p = Integer . MAX_VALUE ; int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pp = Integer . parseInt ( scanner . next ( ) ) ; if ( pp <= p ) r ++ ; p = Integer . min ( p , pp ) ; } System . out . println ( r ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int count = 0 ; int x = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { x = Math . min ( x , a [ i ] ) ; if ( x == a [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long p [ ] = new long [ N ] ; long min = sc . nextLong ( ) ; long max = min ; long ans = 1 ; for ( int i = 1 ; i < p . length ; i ++ ) { p [ i ] = sc . nextLong ( ) ; if ( min > p [ i ] ) { ans ++ ; min = p [ i ] ; } if ( max < p [ i ] ) { max = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= min ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { static BufferedReader in ; public static void solve ( ) throws IOException { int n = nextInt ( ) ; Integer [ ] arr = nextArray ( n ) ; PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; int res = 0 ; for ( int num : arr ) { if ( pq . isEmpty ( ) || pq . peek ( ) >= num ) res ++ ; pq . add ( num ) ; } System . out . println ( res ) ; } public static void main ( String [ ] args ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solve ( ) ; } static int nextInt ( ) throws IOException { return Integer . parseInt ( in . readLine ( ) . trim ( ) ) ; } static long nextLong ( ) throws IOException { return Long . parseLong ( in . readLine ( ) . trim ( ) ) ; } static Integer [ ] nextArray ( int n ) throws IOException { StringTokenizer st = new StringTokenizer ( in . readLine ( ) ) ; Integer [ ] tmp = new Integer [ n ] ; for ( int i = 0 ; i < tmp . length ; i ++ ) { tmp [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } return tmp ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( sc . next ( ) ) ; } sc . close ( ) ; int min = Integer . MAX_VALUE , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , a [ i ] ) ; if ( a [ i ] <= min ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( z <= k ) && ( z >= 0 ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j <= k && s - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . File ; import java . io . IOException ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { init ( ) ; int min = Integer . MAX_VALUE ; int n = nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int b = nextInt ( ) ; if ( b < min ) ans ++ ; min = Math . min ( b , min ) ; } System . out . println ( ans ) ; } private static BufferedReader reader ; private static StringTokenizer tokenizer ; private static void init ( ) { reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; tokenizer = new StringTokenizer ( " " ) ; } private static String next ( ) throws IOException { String read ; while ( ! tokenizer . hasMoreTokens ( ) ) { read = reader . readLine ( ) ; if ( read == null || read . equals ( " " ) ) return " -1 " ; tokenizer = new StringTokenizer ( read ) ; } return tokenizer . nextToken ( ) ; } private static int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } private static long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } }
import java . util . Scanner ; class Point { int x ; int y ; int z ; Point ( int a , int b , int c ) { this . x = a ; this . y = b ; this . z = c ; } } public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] [ ] V = new int [ 3 ] [ 3 ] ; V [ 0 ] [ 0 ] = 0 ; V [ 1 ] [ 0 ] = 0 ; V [ 2 ] [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( j > 0 ) { V [ i ] [ j ] = C [ i ] [ j ] - C [ i ] [ j - 1 ] ; } } } if ( V [ 0 ] [ 0 ] == V [ 1 ] [ 0 ] && V [ 1 ] [ 0 ] == V [ 2 ] [ 0 ] ) { if ( V [ 0 ] [ 1 ] == V [ 1 ] [ 1 ] && V [ 1 ] [ 1 ] == V [ 2 ] [ 1 ] ) { if ( V [ 0 ] [ 2 ] == V [ 1 ] [ 2 ] && V [ 1 ] [ 2 ] == V [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 < 201 ; a1 ++ ) { int b1 = c11 - a1 ; int b2 = c12 - a1 ; int b3 = c13 - a1 ; int a2 = c23 - b3 ; int a3 = c33 - b3 ; if ( a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - ( x + y ) && S - ( x + y ) <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { int x = 0 ; int y = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { int bX = grid [ j ] [ i ] - grid [ j ] [ ( ( i + 1 ) % 3 ) ] ; int bY = grid [ i ] [ j ] - grid [ ( ( i + 1 ) % 3 ) ] [ j ] ; if ( j == 0 ) { x = bX ; y = bY ; } else { b &= x == bX ; b &= y == bY ; } if ( ! b ) break ; } if ( ! b ) break ; } System . out . println ( b ? " Yes " : " No " ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final int N = 3 ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] c = new int [ N ] [ N ] ; IntStream . range ( 0 , N ) . forEach ( i -> IntStream . range ( 0 , N ) . forEach ( j -> c [ i ] [ j ] = scanner . nextInt ( ) ) ) ; boolean result = true ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int diff2 = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) != diff1 ) { result = false ; break ; } if ( ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) != diff2 ) { result = false ; break ; } } } System . out . println ( result ? " Yes " : " No " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int i = 0 ; while ( i < N ) { P [ i ] = sc . nextInt ( ) ; i ++ ; } int counter = 1 ; int min = P [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k <= K && 0 <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { static final long MOD = 1_000_000_007 ; static final int MAX = 2_147_483_646 ; static final int INF = 1_000_000_000 ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int min = MAX ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { min = tmp ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int x = 0 ; int y = 0 ; int z = 0 ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int min = 0 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( i > 0 ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } else { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( min >= x ) { count ++ ; min = x ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { static int MOD = 1000000007 ; public static void main ( String [ ] args ) { int ans = 1 ; Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; int [ ] min = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( p [ i ] < min [ i - 1 ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scanner . nextInt ( ) ) ; } scanner . close ( ) ; int count = 0 ; int min = list . get ( 0 ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) . compareTo ( min ) == 1 ) { continue ; } count += 1 ; min = list . get ( i ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int ans = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( num >= 0 && num <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int row = 1 ; row <= 3 ; row ++ ) { for ( int col = 1 ; col <= 3 ; col ++ ) { c [ row ] [ col ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int col = 2 ; col <= 3 ; col ++ ) { int cur = c [ 1 ] [ 1 ] - c [ 1 ] [ col ] ; int d1 = c [ 2 ] [ 1 ] - c [ 2 ] [ col ] ; int d2 = c [ 3 ] [ 1 ] - c [ 3 ] [ col ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; for ( int row = 2 ; row <= 3 ; row ++ ) { int cur = c [ 1 ] [ 1 ] - c [ row ] [ 1 ] ; int d1 = c [ 1 ] [ 2 ] - c [ row ] [ 2 ] ; int d2 = c [ 1 ] [ 3 ] - c [ row ] [ 3 ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; System . out . println ( ans ) ; } }
import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . Stack ; public class Main { public static class FastReader { BufferedReader br ; StringTokenizer root ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( root == null || ! root . hasMoreTokens ( ) ) { try { root = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } } return root . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } return str ; } } public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static int mod = ( int ) ( 1e9 + 7 ) ; static long cf = 998244353 ; static final long MAX = ( long ) 1e18 ; public static List < Integer > [ ] edges ; public static int [ ] [ ] parent ; public static int col = 32 ; public static int [ ] Bit ; public static long [ ] dp ; public static long [ ] fac , inv ; public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 ; int min = n ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; min = Math . min ( min , p [ i ] ) ; if ( p [ i ] <= min ) ++ ans ; } out . print ( ans ) ; out . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] l = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) l [ i ] [ j ] = sc . nextInt ( ) ; if ( l [ 0 ] [ 0 ] + l [ 1 ] [ 1 ] == l [ 1 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 1 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 1 ] [ 0 ] + l [ 0 ] [ 2 ] == l [ 0 ] [ 0 ] + l [ 1 ] [ 2 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && 0 <= s - x - y ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= N ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . io . * ; import java . util . * ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Iterator < String > sc ) { int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int sum = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { int remaining = S - x ; sum += Math . max ( Math . min ( remaining , K ) - Math . max ( remaining - K , 0 ) + 1 , 0 ) ; } System . out . println ( sum ) ; } } class Main { public static void main ( String ... args ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Iterator < String > tokens = reader . lines ( ) . map ( s -> s . split ( " " ) ) . flatMap ( Arrays :: stream ) . iterator ( ) ; Solver . INSTANCE . solve ( tokens ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int min = Integer . MAX_VALUE ; int answer = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) answer ++ ; if ( P [ i ] < min ) min = P [ i ] ; } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdIn . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } long ans = A [ 0 ] - 1 ; int max = 2 ; for ( int i = 1 ; i < N ; i ++ ) { if ( A [ i ] == max ) max ++ ; else if ( A [ i ] > max ) { ans += ( A [ i ] - 1 ) / max ; } } System . out . println ( ans ) ; } }
import java . util . * ; import static java . lang . Math . * ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int result = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int now = sc . nextInt ( ) ; if ( min > now ) { result ++ ; min = now ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int b [ ] = { c [ 0 ] [ 0 ] - 0 , c [ 0 ] [ 1 ] - 0 , c [ 0 ] [ 2 ] - 0 } ; int a [ ] = { 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] } ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; int _1 = a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] ; int _2 = a [ 1 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] ; int _3 = a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] ; if ( _1 + _2 == 2 * _3 ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { c [ y ] [ x ] = sc . nextInt ( ) ; if ( y == 0 ) b [ x ] = c [ y ] [ x ] ; else a [ y ] = c [ y ] [ x ] - b [ x ] ; } } boolean isAns = true ; for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { if ( c [ y ] [ x ] != a [ y ] + b [ x ] ) { isAns = false ; break ; } } } System . out . println ( isAns ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { if ( ( s - i - j ) >= 0 && ( s - i - j ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] min = new int [ n + 1 ] ; min [ 0 ] = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i > 0 ) min [ i ] = Math . min ( min [ i - 1 ] , p [ i - 1 ] ) ; } int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min [ i ] > p [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int array [ ] [ ] = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { array [ i ] [ j ] = scan . nextInt ( ) ; } } a [ 0 ] = 0 ; b [ 0 ] = array [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = array [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = array [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = array [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = array [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( array [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) list [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= list [ i ] ) { count ++ ; min = list [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int temp = s - x - y ; if ( temp >= 0 && temp <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; import java . util . Random ; import java . util . Arrays ; import java . util . Comparator ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . HashMap ; import java . time . format . DateTimeFormatter ; import java . time . temporal . ChronoUnit ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] s = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { s [ i ] = sc . nextInt ( ) ; } if ( s [ 0 ] + s [ 4 ] + s [ 8 ] == s [ 1 ] + s [ 5 ] + s [ 6 ] && s [ 1 ] + s [ 5 ] + s [ 6 ] == s [ 2 ] + s [ 3 ] + s [ 7 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { InputStream in = System . in ; Scanner sc = new Scanner ( in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int num = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { num ++ ; } } } System . out . println ( num ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdIn . nextInt ( ) ; } } int s1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ; int s2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; int s3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; int s4 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ; int s5 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; int s6 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; int s7 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int s8 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int s9 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; int s10 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int s11 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int s12 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; if ( s1 == s2 && s2 == s3 && s4 == s5 && s5 == s6 && s7 == s8 && s8 == s9 && s10 == s11 && s11 == s12 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; P [ 0 ] = sc . nextInt ( ) ; int min = P [ 0 ] ; int R = 1 ; for ( int i = 1 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) { min = P [ i ] ; R ++ ; } } System . out . println ( R ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( calc ( c , 0 , 0 , 0 , 1 ) && calc ( c , 0 , 1 , 0 , 2 ) && calc ( c , 1 , 0 , 1 , 1 ) && calc ( c , 1 , 1 , 1 , 2 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } static boolean calc ( int [ ] [ ] c , int i , int j , int k , int l ) { if ( ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ k ] [ l ] + c [ k + 1 ] [ l - 1 ] ) ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner c = new java . util . Scanner ( System . in ) ; int k = c . nextInt ( ) , s = c . nextInt ( ) ; System . out . println ( java . util . stream . IntStream . range ( 0 , k + 1 ) . map ( x -> s - x + 1 - Math . min ( s - x + 1 , Math . max ( 0 , ( s - x - k ) * 2 ) ) ) . sum ( ) ) ; } }
import java . util . Scanner ; public class Main { static long x ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int k = gi ( ) ; int s = gi ( ) ; int c = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { c ++ ; } } } System . out . println ( c ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( min >= x ) { count ++ ; min = x ; } } sc . close ( ) ; System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ 2 - j ] -= c [ i ] [ 0 ] ; } } if ( c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] == c [ 2 ] [ 1 ] && c [ 0 ] [ 2 ] == c [ 1 ] [ 2 ] && c [ 0 ] [ 2 ] == c [ 2 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k && x + y + z == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class Solver { public void solve ( Scanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int count = 0 ; int PjMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = in . nextInt ( ) ; if ( Pi <= PjMin ) { count ++ ; } if ( PjMin >= Pi ) { PjMin = Pi ; } } out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = Integer . parseInt ( scanner . next ( ) ) ; int s = Integer . parseInt ( scanner . next ( ) ) ; int res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { private static void solve ( ) { int N = ni ( ) ; int [ ] P = na ( N ) ; int min = P [ 0 ] ; int result = 1 ; for ( int i = 1 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) result ++ ; } System . out . println ( result ) ; } private static BufferedReader br ; public static void main ( String [ ] args ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String debugDataPath = System . getenv ( " DD_PATH " ) ; if ( debugDataPath != null ) { try { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( new File ( debugDataPath ) ) ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } solve ( ) ; } private static StringTokenizer tokenizer = null ; public static String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } private static int ni ( ) { return Integer . parseInt ( next ( ) ) ; } private static long nl ( ) { return Long . parseLong ( next ( ) ) ; } private static double nd ( ) { return Double . parseDouble ( next ( ) ) ; } private static int [ ] na ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = ni ( ) ; return a ; } private static char [ ] ns ( ) { return next ( ) . toCharArray ( ) ; } private static long [ ] nal ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nl ( ) ; return a ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int min = 200001 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int a = scan . nextInt ( ) ; if ( a < min ) { min = a ; ans ++ ; } } System . out . println ( ans ) ; } }
public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { int max1 = 100 , max2 = 100 , max3 = 100 , a [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { max1 = Math . min ( max1 , a [ i * 3 ] = scanner . nextInt ( ) ) ; max2 = Math . min ( max2 , a [ i * 3 + 1 ] = scanner . nextInt ( ) ) ; max3 = Math . min ( max3 , a [ i * 3 + 2 ] = scanner . nextInt ( ) ) ; } System . out . println ( ( a [ 0 ] - max1 == a [ 1 ] - max2 && a [ 1 ] - max2 == a [ 2 ] - max3 ) && ( a [ 3 ] - max1 == a [ 4 ] - max2 && a [ 4 ] - max2 == a [ 5 ] - max3 ) && ( a [ 6 ] - max1 == a [ 7 ] - max2 && a [ 7 ] - max2 == a [ 8 ] - max3 ) ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int [ ] in = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { in [ i ] = sc . nextInt ( ) ; } int b = 0 ; int c = in [ 0 ] ; for ( int i = 0 ; i < a ; i ++ ) { c = Math . min ( c , in [ i ] ) ; if ( c >= in [ i ] ) { b ++ ; } } System . out . println ( b ) ; } }
import java . util . Scanner ; public class Main { static int [ ] [ ] grid ; static int [ ] left ; static int [ ] top ; static int size = 3 ; public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; grid = new int [ size ] [ size ] ; left = new int [ size ] ; top = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) grid [ i ] [ j ] = x . nextInt ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { left [ i ] = grid [ i ] [ 0 ] ; top [ i ] = grid [ 0 ] [ i ] ; } boolean good = true ; int curdiff , nowdiff ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ i ] [ 0 ] - top [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ i ] [ j ] - top [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ 0 ] [ i ] - left [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ j ] [ i ] - left [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } if ( good ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = sc . nextInt ( ) ; int answer = 1 ; int before = sc . nextInt ( ) ; for ( int i = 1 ; i < count ; i ++ ) { int after = sc . nextInt ( ) ; if ( before >= after ) { answer ++ ; before = after ; } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) ; int result = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z <= k && 0 <= z ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int max = 0 ; int min = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i == 0 ) { max = min = p [ i ] ; } if ( min >= p [ i ] ) { ++ cnt ; min = p [ i ] ; } else { max = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] min_p = new int [ n ] ; int counter = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } min_p [ 0 ] = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i >= 1 ) { if ( min_p [ i - 1 ] > p [ i ] ) { min_p [ i ] = p [ i ] ; } else { min_p [ i ] = min_p [ i - 1 ] ; } } if ( p [ i ] == min_p [ i ] ) { counter ++ ; } } System . out . println ( counter ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int k = stdIn . nextInt ( ) ; int s = stdIn . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { public static void exec ( InputStream in , PrintStream out ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int result = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int c = sc . nextInt ( ) ; if ( min > c ) { min = c ; result ++ ; } } out . println ( result ) ; } public static void main ( String [ ] args ) { exec ( System . in , System . out ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; ArrayList < Integer > numList = new ArrayList < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { numList . add ( sc . nextInt ( ) ) ; } int min = numList . get ( 0 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList . get ( i ) < min ) { min = numList . get ( i ) ; } if ( numList . get ( i ) <= min ) { ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int a ; int b ; int cnt = 0 ; for ( a = 0 ; a <= K ; a ++ ) { int qw = K ; if ( S - a < qw ) { qw = S - a ; } for ( b = 0 ; b <= qw ; b ++ ) { if ( S - a - b <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int answer = 0 ; if ( S > K * 3 ) { System . out . println ( 0 ) ; return ; } for ( int i = K ; i >= 0 ; i -- ) { int tmp1 = S - i ; if ( tmp1 > K + K ) { break ; } for ( int j = K ; j >= 0 ; j -- ) { int tmp2 = tmp1 - j ; if ( tmp2 < 0 ) { continue ; } else if ( tmp2 > K ) { break ; } answer ++ ; } } System . out . println ( answer ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > all = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { all . add ( sc . nextInt ( ) ) ; } boolean takahashi = true ; Integer diff1 = all . get ( 3 ) - all . get ( 0 ) ; Integer diff2 = all . get ( 4 ) - all . get ( 1 ) ; Integer diff3 = all . get ( 5 ) - all . get ( 2 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } if ( takahashi ) { diff1 = all . get ( 6 ) - all . get ( 3 ) ; diff2 = all . get ( 7 ) - all . get ( 4 ) ; diff3 = all . get ( 8 ) - all . get ( 5 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { diff1 = all . get ( 1 ) - all . get ( 0 ) ; diff2 = all . get ( 4 ) - all . get ( 3 ) ; diff3 = all . get ( 7 ) - all . get ( 6 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { diff1 = all . get ( 2 ) - all . get ( 1 ) ; diff2 = all . get ( 5 ) - all . get ( 4 ) ; diff3 = all . get ( 8 ) - all . get ( 7 ) ; if ( diff1 != diff2 ) { takahashi = false ; } else if ( diff1 != diff3 ) { takahashi = false ; } } if ( takahashi ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 200000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = sc . nextInt ( ) ; if ( min >= current ) { count ++ ; min = current ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; boolean b2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] && c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ; boolean b3 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; boolean b4 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ; if ( b1 && b2 && b3 && b4 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int sub = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { sub = s - ( x + y ) ; if ( 0 <= sub && sub <= k ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ; int K = cin . nextInt ( ) ; int S = cin . nextInt ( ) ; int c = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static void exec ( Scanner in , PrintStream out ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i += 1 ) { for ( int j = 0 ; j < 3 ; j += 1 ) { c [ i ] [ j ] = in . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i += 1 ) { int a1 = i ; int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; if ( a2 + b2 != c [ 1 ] [ 1 ] || a2 + b3 != c [ 1 ] [ 2 ] ) { continue ; } int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a3 + b2 != c [ 2 ] [ 1 ] || a3 + b3 != c [ 2 ] [ 2 ] ) { continue ; } out . println ( " Yes " ) ; return ; } out . println ( " No " ) ; } public static void main ( String [ ] args ) { exec ( new Scanner ( System . in ) , System . out ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int k = 1 ; k <= 3 ; k ++ ) { c [ i ] [ k ] = sc . nextInt ( ) ; } } boolean ans = true ; if ( c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] || c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 3 ] [ 1 ] - c [ 3 ] [ 2 ] || c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] != c [ 2 ] [ 2 ] - c [ 2 ] [ 3 ] || c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] != c [ 3 ] [ 2 ] - c [ 3 ] [ 3 ] ) { ans = false ; } if ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] || c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 3 ] - c [ 2 ] [ 3 ] || c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] != c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] || c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] != c [ 2 ] [ 3 ] - c [ 3 ] [ 3 ] ) { ans = false ; } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { int a = i + j + k ; if ( a == S ) { if ( i == j && j == k ) { count ++ ; } else if ( i != j && j != k && k != i ) { count += 6 ; } else { count += 3 ; } } } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k , s , ans = 0 ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; sc . close ( ) ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int tmp = s - i - j ; if ( tmp >= 0 && tmp <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( min >= a ) { ans ++ ; min = a ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int P = scanner . nextInt ( ) ; if ( P <= min ) { count ++ ; min = P ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] strlist = str . split ( " " ) ; int k = Integer . parseInt ( strlist [ 0 ] ) ; int s = Integer . parseInt ( strlist [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count = count + 1 ; continue ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 1000000 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = Integer . parseInt ( sc . next ( ) ) ; if ( p < min ) ans ++ ; min = Math . min ( min , p ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; int count = 1 ; long min = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long num = sc . nextLong ( ) ; if ( min >= num ) { min = num ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] m = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; m [ i ] = ( i == 0 ) ? p [ i ] : Math . min ( p [ i ] , m [ i - 1 ] ) ; if ( p [ i ] == m [ i ] ) ++ ans ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int total = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int last = S - i - j ; if ( last >= 0 && last <= K ) total ++ ; } } System . out . println ( total ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; int x = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { x = 1 ; } } } System . out . println ( x == 0 ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static char [ ] cs = { '.' , '#' } ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = Integer . parseInt ( sc . next ( ) ) ; } long ans = A [ 0 ] - 1 ; int min = 2 ; for ( int i = 1 ; i < N ; ++ i ) { if ( A [ i ] == min ) { ++ min ; continue ; } ans += ( A [ i ] - 1 ) / min ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int min = 0 ; int answer = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } min = P [ 0 ] ; answer = answer + 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { answer = answer + 1 ; min = P [ i ] ; } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int in_num = Integer . parseInt ( sc . next ( ) ) ; int [ ] l = new int [ in_num ] ; for ( int i = 0 ; i < in_num ; i ++ ) { l [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int count = 0 ; int mi = Integer . MAX_VALUE ; for ( int i = 0 ; i < in_num ; i ++ ) { if ( l [ i ] <= mi ) { count ++ ; mi = l [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] Pz = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { Pz [ i ] = sc . nextInt ( ) ; } int minVal = 1000000000 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( Pz [ i ] < minVal ) { minVal = Pz [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) { break ; } if ( S - ( x + y ) <= K ) { count ++ ; } } } out . println ( count ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && S - i - j >= 0 ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static int c [ ] [ ] ; public static boolean judge ( int tmpa , int tmpb ) { int b [ ] = new int [ 3 ] ; int a [ ] = new int [ 3 ] ; a [ 0 ] = tmpa ; b [ 0 ] = tmpb ; for ( int i = 1 ; i < 3 ; ++ i ) b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { int tmp = a [ i ] + b [ j ] ; if ( c [ i ] [ j ] != tmp ) return false ; } } return true ; } public static boolean solve ( ) { for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; ++ i ) { if ( judge ( i , c [ 0 ] [ 0 ] - i ) ) return true ; } return false ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) c [ i ] [ j ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 1 ; String ans [ ] = { " Yes " , " No " } ; if ( solve ( ) ) a = 0 ; System . out . println ( ans [ a ] ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] map = new int [ 3 ] [ 3 ] ; int [ ] [ ] subMap = new int [ 3 ] [ 3 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { map [ i ] [ 0 ] = in . nextInt ( ) ; map [ i ] [ 1 ] = in . nextInt ( ) ; map [ i ] [ 2 ] = in . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { subMap [ i ] [ 0 ] = map [ i ] [ 0 ] - map [ 0 ] [ 0 ] ; subMap [ i ] [ 1 ] = map [ i ] [ 1 ] - map [ 0 ] [ 1 ] ; subMap [ i ] [ 2 ] = map [ i ] [ 2 ] - map [ 0 ] [ 2 ] ; if ( subMap [ i ] [ 0 ] == subMap [ i ] [ 1 ] && subMap [ i ] [ 0 ] == subMap [ i ] [ 2 ] ) { } else { ans = " No " ; } } out . print ( ans ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , s - 2 * k ) ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { ans ++ ; } } out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { min = p ; count ++ ; } } print ( count ) ; sc . close ( ) ; } public static void print ( Object obj ) { System . out . println ( obj ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; long S = sc . nextLong ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && 0 <= S - i - j ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] arg ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int total = 0 ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < K + 1 ; i ++ ) { list . add ( i ) ; } for ( int x = 0 ; x < K + 1 ; x ++ ) { for ( int y = 0 ; y < K + 1 ; y ++ ) { if ( S - ( list . get ( x ) + list . get ( y ) ) <= K && ( S - ( list . get ( x ) + list . get ( y ) ) >= 0 ) ) { total += 1 ; } } } System . out . println ( total ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 9999999 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int length = sc . nextInt ( ) ; int [ ] data = new int [ length ] ; for ( int a = 0 ; a < length ; a ++ ) { data [ a ] = sc . nextInt ( ) ; } int count = 0 ; int i = 0 ; int min = data [ 0 ] ; for ( int b = 0 ; b < length ; b ++ ) { i = data [ b ] ; if ( min >= i ) { count ++ ; min = i ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveB ( ) ; } private void solveA ( ) { Scanner scanner = null ; String wk = " " ; try { scanner = new Scanner ( System . in ) ; wk = scanner . next ( ) ; System . out . println ( wk . replaceAll ( " , " , " " ) ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numK = 0 ; int s = 0 ; try { scanner = new Scanner ( System . in ) ; numK = scanner . nextInt ( ) ; s = scanner . nextInt ( ) ; int startK = 0 ; if ( numK <= s / 3 ) { startK = numK ; } int res = 0 ; for ( int i = 0 ; i <= numK ; i ++ ) { for ( int j = 0 ; j <= numK ; j ++ ) { if ( s - i - j < 0 ) { break ; } startK = s - i - j ; for ( int k = startK ; k <= numK ; k ++ ) { if ( i + j + k == s ) { res ++ ; break ; } } } } System . out . println ( res ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] nums = new int [ k + 1 ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { nums [ i ] = i ; } int count = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) { int x = nums [ i ] ; for ( int j = 0 ; j < nums . length ; j ++ ) { int y = nums [ j ] ; int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k && x <= s ; x ++ ) { for ( int y = 0 ; y <= k && y <= s ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( " " ) ; int k = Integer . parseInt ( line [ 0 ] ) ; int s = Integer . parseInt ( line [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int a = 0 ; a <= K ; a ++ ) { for ( int b = 0 ; b <= K ; b ++ ) { if ( S - ( a + b ) <= K && S - ( a + b ) >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] sa = br . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sa [ i ] ) ; } br . close ( ) ; int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { final int size = 3 ; final int [ ] [ ] grid = new int [ size ] [ size ] ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < size ; i ++ ) for ( int j = 0 ; j < size ; j ++ ) grid [ i ] [ j ] = sc . nextInt ( ) ; sc . close ( ) ; int aAry [ ] = new int [ size ] ; int bAry [ ] = new int [ size ] ; for ( int i = 0 ; i <= grid [ 0 ] [ 0 ] ; i ++ ) { aAry [ 0 ] = i ; bAry [ 0 ] = grid [ 0 ] [ 0 ] - aAry [ 0 ] ; bAry [ 1 ] = grid [ 0 ] [ 1 ] - aAry [ 0 ] ; bAry [ 2 ] = grid [ 0 ] [ 2 ] - aAry [ 0 ] ; aAry [ 1 ] = grid [ 1 ] [ 0 ] - bAry [ 0 ] ; aAry [ 2 ] = grid [ 2 ] [ 0 ] - bAry [ 0 ] ; if ( judge ( aAry , bAry ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } boolean judge ( int aAry [ ] , int bAry [ ] ) { boolean res = true ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { if ( grid [ i ] [ j ] != aAry [ i ] + bAry [ j ] ) return false ; } } return res ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] values = new int [ 3 ] [ 3 ] ; for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { values [ y ] [ x ] = sc . nextInt ( ) ; } } int [ ] a_values = new int [ 3 ] ; int [ ] b_values = new int [ 3 ] ; a_values [ 0 ] = 0 ; for ( int x = 0 ; x < 3 ; x ++ ) { b_values [ x ] = values [ 0 ] [ x ] ; } for ( int y = 1 ; y < 3 ; y ++ ) { a_values [ y ] = values [ y ] [ 0 ] - b_values [ 0 ] ; } for ( int y = 0 ; y < 3 ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { if ( values [ y ] [ x ] != a_values [ y ] + b_values [ x ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) c [ i ] = scan . nextInt ( ) ; for ( int i = 0 ; i < 2 ; ++ i ) { int d = c [ i * 3 ] - c [ ( i + 1 ) * 3 ] ; for ( int j = 0 ; j < 3 ; ++ j ) { if ( c [ i * 3 + j ] - c [ ( i + 1 ) * 3 + j ] != d ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int q = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( q > p ) { count ++ ; q = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int length = sc . nextInt ( ) ; int [ ] data = new int [ length ] ; for ( int a = 0 ; a < length ; a ++ ) { data [ a ] = sc . nextInt ( ) ; } int count = 0 ; int i = 0 ; int min = data [ 0 ] ; for ( int b = 0 ; b < length ; b ++ ) { i = data [ b ] ; if ( min >= i ) { count ++ ; min = i ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static PrintWriter out ; static CF_Reader in ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; in = new CF_Reader ( ) ; int n = in . intNext ( ) ; int [ ] nums = in . nextIntArray ( n ) ; int res = 0 ; int minVal = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( nums [ i ] <= minVal ) { minVal = nums [ i ] ; res += 1 ; } } out . println ( res ) ; out . close ( ) ; } static class CF_Reader { BufferedReader br ; StringTokenizer st ; public CF_Reader ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } long longNext ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } int intNext ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } double doubleNext ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } char charNext ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } public int [ ] nextIntArray ( final int n ) throws IOException { final int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = intNext ( ) ; return a ; } public long [ ] nextLongArray ( final int n ) throws IOException { final long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = longNext ( ) ; return a ; } String line ( ) throws IOException { return br . readLine ( ) . trim ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int k = 0 ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { k = S - i - j ; if ( ( k <= K ) && ( k >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int x [ ] = new int [ 3 ] ; int y [ ] = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != c [ i ] [ j ] ) flag = false ; } } System . out . println ( flag ? " Yes " : " No " ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; System . out . println ( solve ( K , S ) ) ; sc . close ( ) ; } static int solve ( int K , int S ) { return IntStream . rangeClosed ( 0 , K ) . map ( x -> ( int ) IntStream . rangeClosed ( 0 , K ) . filter ( y -> S - x - y >= 0 && S - x - y <= K ) . count ( ) ) . sum ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k && x <= s ; x ++ ) { for ( int y = 0 ; y <= k && x + y <= s ; y ++ ) { if ( s - x - y <= k ) cnt ++ ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public void main ( Scanner sc ) { int n [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } if ( ! check ( n [ 0 ] - n [ 1 ] , n [ 3 ] - n [ 4 ] , n [ 6 ] - n [ 7 ] ) || ! check ( n [ 1 ] - n [ 2 ] , n [ 4 ] - n [ 5 ] , n [ 7 ] - n [ 8 ] ) || ! check ( n [ 0 ] - n [ 3 ] , n [ 1 ] - n [ 4 ] , n [ 2 ] - n [ 5 ] ) || ! check ( n [ 3 ] - n [ 6 ] , n [ 4 ] - n [ 7 ] , n [ 5 ] - n [ 8 ] ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } private boolean check ( int sa1 , int sa2 , int sa3 ) { return ( sa1 == sa2 ) && ( sa2 == sa3 ) && ( sa3 == sa1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }
import java . util . * ; public final class Main { private static int solution ( int [ ] array ) { int current = 1 ; int score = 1 ; int minimum = array [ 0 ] ; while ( current < array . length ) { if ( array [ current ] < minimum ) { minimum = array [ current ] ; score ++ ; } current ++ ; } return score ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } System . out . println ( solution ( array ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int n = sc . nextInt ( ) ; if ( n <= min ) { min = n ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { final String s = reader . readLine ( ) ; final String [ ] sl = s . split ( " " ) ; int K = Integer . parseInt ( sl [ 0 ] ) ; int S = Integer . parseInt ( sl [ 1 ] ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y <= S ) { int z = S - x - y ; if ( z <= K ) cnt ++ ; } } } System . out . println ( cnt ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; MyScanner sc = new MyScanner ( ) ; int n = sc . nextInt ( ) ; String [ ] input = new String [ n ] ; input = sc . nextLine ( ) . split ( " " ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( input [ i ] ) ; } int sum = 1 , low = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < low ) { sum ++ ; low = arr [ i ] ; } } out . println ( sum ) ; out . close ( ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k , s ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= Math . min ( k , s ) ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { if ( s - i - j >= 0 && s - i - j <= k ) sum ++ ; } } System . out . println ( sum ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } sc . close ( ) ; sc = null ; int a1 , a2 , a3 , b1 , b2 , b3 ; String ans = " No " ; LABEL : for ( a1 = 0 ; a1 <= 100 ; a1 ++ ) { for ( a2 = 0 ; a2 <= 100 ; a2 ++ ) { for ( a3 = 0 ; a3 <= 100 ; a3 ++ ) { b1 = c [ 0 ] [ 0 ] - a1 ; b2 = c [ 0 ] [ 1 ] - a1 ; b3 = c [ 0 ] [ 2 ] - a1 ; if ( a2 + b1 == c [ 1 ] [ 0 ] && a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b1 == c [ 2 ] [ 0 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { ans = " Yes " ; break LABEL ; } } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( ( S - ( i + j ) ) <= K ) && ( S - ( i + j ) >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String line1 = sc . nextLine ( ) ; String line2 = sc . nextLine ( ) ; String [ ] array = line2 . split ( " " ) ; int n = Integer . parseInt ( line1 ) ; int min = Integer . parseInt ( array [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int buf = Integer . parseInt ( array [ i ] ) ; if ( buf < min ) { min = buf ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) ) >= 0 && ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { cnt ++ ; min = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int temp = Integer . parseInt ( sc . next ( ) ) ; if ( a >= temp ) { a = temp ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n + 1 ] ; p [ 0 ] = Integer . MAX_VALUE ; int min [ ] = new int [ n + 1 ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( min [ i - 1 ] >= p [ i ] ) { cnt ++ ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) for ( int y = 0 ; y <= k ; y ++ ) if ( s - x - y <= k && 0 <= s - x - y ) count ++ ; System . out . print ( count ) ; sc . close ( ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) cnt ++ ; } } out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] min = new int [ n ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Collections ; import java . util . ArrayList ; import java . util . List ; import java . util . HashSet ; import java . io . PrintWriter ; import java . io . OutputStream ; import java . util . Comparator ; public class Main { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static int [ ] inputval ( ) throws Exception { String [ ] strarray = br . readLine ( ) . trim ( ) . split ( " " ) ; int [ ] intarray = new int [ strarray . length ] ; for ( int i = 0 ; i < intarray . length ; i ++ ) { intarray [ i ] = Integer . parseInt ( strarray [ i ] ) ; } return intarray ; } static List < Integer > inputIntList ( ) throws Exception { List < String > strList = Arrays . asList ( br . readLine ( ) . trim ( ) . split ( " " ) ) ; List < Integer > intList = new ArrayList < Integer > ( ) ; for ( String elem : strList ) { intList . add ( Integer . parseInt ( elem ) ) ; } return intList ; } static Integer [ ] inputvalInteger ( ) throws Exception { String [ ] strarray = br . readLine ( ) . trim ( ) . split ( " " ) ; Integer [ ] intarray = new Integer [ strarray . length ] ; for ( int i = 0 ; i < intarray . length ; i ++ ) { intarray [ i ] = Integer . parseInt ( strarray [ i ] ) ; } return intarray ; } public static void main ( String [ ] args ) throws Exception { int [ ] inputval = inputval ( ) ; int k = inputval [ 0 ] ; int s = inputval [ 1 ] ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String args [ ] ) throws IOException { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { int N = Integer . parseInt ( br . readLine ( ) ) ; String [ ] permutation = br . readLine ( ) . split ( " " ) ; int min = 0 ; int result = 0 ; int tmp = 0 ; for ( int i = 0 ; i < N ; i ++ ) { tmp = Integer . parseInt ( permutation [ i ] ) ; if ( i == 0 ) { min = tmp ; result ++ ; } else { if ( min >= tmp ) { result ++ ; min = tmp ; } else { continue ; } } } System . out . println ( result ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min ) { count ++ ; min = a [ i ] ; } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { PrintWriter pw = new PrintWriter ( System . out ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long min = ( long ) 1e10 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long x = sc . nextLong ( ) ; if ( x <= min ) { ans ++ ; min = x ; } } System . out . println ( ans ) ; } public static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public double nextDouble ( ) throws IOException { String x = next ( ) ; StringBuilder sb = new StringBuilder ( " 0 " ) ; double res = 0 , f = 1 ; boolean dec = false , neg = false ; int start = 0 ; if ( x . charAt ( 0 ) == '-' ) { neg = true ; start ++ ; } for ( int i = start ; i < x . length ( ) ; i ++ ) if ( x . charAt ( i ) == '.' ) { res = Long . parseLong ( sb . toString ( ) ) ; sb = new StringBuilder ( " 0 " ) ; dec = true ; } else { sb . append ( x . charAt ( i ) ) ; if ( dec ) f *= 10 ; } res += Long . parseLong ( sb . toString ( ) ) / f ; return res * ( neg ? - 1 : 1 ) ; } public boolean ready ( ) throws IOException , IOException { return br . ready ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] math = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) { math [ i ] = sc . nextInt ( ) ; } int a = math [ 1 ] - math [ 0 ] ; int b = math [ 4 ] - math [ 3 ] ; int c = math [ 7 ] - math [ 6 ] ; int d = math [ 2 ] - math [ 0 ] ; int e = math [ 5 ] - math [ 3 ] ; int f = math [ 8 ] - math [ 6 ] ; int g = math [ 3 ] - math [ 0 ] ; int h = math [ 4 ] - math [ 1 ] ; int i = math [ 5 ] - math [ 2 ] ; int j = math [ 6 ] - math [ 0 ] ; int k = math [ 7 ] - math [ 1 ] ; int l = math [ 8 ] - math [ 2 ] ; if ( ( a == b && b == c && c == a ) && ( d == e && e == f && f == d ) && ( g == h && h == i && i == g ) && ( j == k && k == l && l == j ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > p [ i ] ) { min = p [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { answer ++ ; } } } System . out . println ( answer ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int grid [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " No " ; for ( int i = 0 ; i <= grid [ 0 ] [ 0 ] ; i ++ ) { int a0 = i ; int b0 = grid [ 0 ] [ 0 ] - a0 ; int a1 = grid [ 1 ] [ 0 ] - b0 ; int a2 = grid [ 2 ] [ 0 ] - b0 ; boolean isOK = true ; for ( int y = 1 ; y < 3 ; y ++ ) { int by1 = grid [ 0 ] [ y ] - a0 ; int by2 = grid [ 1 ] [ y ] - a1 ; int by3 = grid [ 2 ] [ y ] - a2 ; if ( by1 < 0 || by2 < 0 || by3 < 0 ) { isOK = false ; break ; } if ( by1 != by2 || by2 != by3 ) { isOK = false ; break ; } } if ( isOK ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int curMax = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { cnt ++ ; curMax = sc . nextInt ( ) ; continue ; } int num = sc . nextInt ( ) ; if ( curMax >= num ) { cnt ++ ; curMax = num ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 ; int a2 ; int a3 ; int HUNDRED = 100 ; boolean flag = false ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( a1 = 0 ; a1 <= HUNDRED && ! flag ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; for ( a2 = 0 ; a2 <= HUNDRED && ! flag ; a2 ++ ) { if ( c [ 1 ] [ 0 ] == a2 + b1 && c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) { for ( a3 = 0 ; a3 <= HUNDRED && ! flag ; a3 ++ ) { if ( c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 2 ] [ 2 ] == a3 + b3 ) { flag = true ; } } } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; boolean judge = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 1 ; i < 3 ; i ++ ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != ( a [ i ] + b [ j ] ) ) { judge = false ; } } } if ( judge ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int p = 0 ; p <= K ; p ++ ) { for ( int q = 0 ; q <= K ; q ++ ) { if ( S - p - q <= K && 0 <= S - p - q ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Scanner sc ) { int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = grid [ 0 ] [ ( i + 2 ) % 3 ] - grid [ 0 ] [ ( i + 1 ) % 3 ] ; b [ i ] = grid [ ( i + 2 ) % 3 ] [ 0 ] - grid [ ( i + 1 ) % 3 ] [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] != grid [ j ] [ ( i + 2 ) % 3 ] - grid [ j ] [ ( i + 1 ) % 3 ] || b [ i ] != grid [ ( i + 2 ) % 3 ] [ j ] - grid [ ( i + 1 ) % 3 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } class Main { public static void main ( String ... args ) { Scanner in = new Scanner ( System . in ) ; Solver . INSTANCE . solve ( in ) ; in . close ( ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > cList = new ArrayList < > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { cList . add ( sc . nextInt ( ) ) ; } if ( ! verticalCheck ( cList , 0 ) || ! verticalCheck ( cList , 3 ) ) { System . out . println ( " No " ) ; return ; } if ( ! horizonCheck ( cList , 0 ) || ! horizonCheck ( cList , 1 ) ) { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } private static boolean verticalCheck ( ArrayList < Integer > cList , Integer start ) { Integer v1 = cList . get ( start + 3 ) - cList . get ( start ) ; Integer v2 = cList . get ( start + 4 ) - cList . get ( start + 1 ) ; Integer v3 = cList . get ( start + 5 ) - cList . get ( start + 2 ) ; return v1 == v2 && v2 == v3 ; } private static boolean horizonCheck ( ArrayList < Integer > cList , Integer start ) { Integer v1 = cList . get ( start + 1 ) - cList . get ( start ) ; Integer v2 = cList . get ( start + 4 ) - cList . get ( start + 3 ) ; Integer v3 = cList . get ( start + 7 ) - cList . get ( start + 6 ) ; return v1 == v2 && v2 == v3 ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( cal ( n , a ) ) ; } private static long cal ( final int n , final int [ ] a ) { long res = 0L ; int maxP = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( maxP == 0 ) { res += a [ i ] - 1 ; maxP = 1 ; } else { int num = a [ i ] / ( maxP + 1 ) ; if ( a [ i ] == maxP + 1 ) { maxP ++ ; } else if ( a [ i ] % ( maxP + 1 ) == 0 ) { res += num - 1 ; } else { res += num ; } } } return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z >= 0 && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static int c [ ] [ ] = new int [ 3 ] [ 3 ] ; @ SuppressWarnings ( " resource " ) public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { if ( judge ( i ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } private static boolean judge ( int i ) { int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; boolean jua2 = false ; boolean jua3 = false ; for ( int j = 0 ; j <= 100 ; j ++ ) { if ( c [ 1 ] [ 0 ] - b1 == j && c [ 1 ] [ 1 ] - b2 == j && c [ 1 ] [ 2 ] - b3 == j ) jua2 = true ; } for ( int j = 0 ; j <= 100 ; j ++ ) { if ( c [ 2 ] [ 0 ] - b1 == j && c [ 2 ] [ 1 ] - b2 == j && c [ 2 ] [ 2 ] - b3 == j ) jua3 = true ; } if ( 0 <= b1 && b1 <= 100 && 0 <= b2 && b2 <= 100 && 0 <= b3 && b3 <= 100 && jua2 && jua3 ) return true ; else return false ; } }
import java . math . BigInteger ; import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int n , i , j , m , k , p , q , o , l , s , tt = 1 ; Double x , y , z ; int ar [ ] , br [ ] ; char ch ; BigInteger an , su , u , v ; String a , b = " " , c = " " , d ; Scanner sc = new Scanner ( System . in ) ; Scanner scc = new Scanner ( System . in ) ; ar = new int [ 200001 ] ; br = new int [ 200001 ] ; n = sc . nextInt ( ) ; k = 50000000 ; for ( i = 0 ; i < n ; i ++ ) { o = sc . nextInt ( ) ; if ( k > o ) { k = o ; } ar [ i ] = o ; br [ i ] = k ; } k = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( ar [ i ] <= br [ i ] ) { k ++ ; } } System . out . println ( k + 1 ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { sum = s - i - j ; if ( 0 <= sum && sum <= k ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Integer . parseInt ; public class Main { static int [ ] nums ; static boolean [ ] used ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String line ; String [ ] words ; words = br . readLine ( ) . split ( " " ) ; nums = new int [ 9 ] ; used = new boolean [ 10 ] ; for ( int i = 0 ; i < words . length ; i ++ ) { nums [ i ] = parseInt ( words [ i ] ) ; if ( nums [ i ] != - 1 ) used [ nums [ i ] ] = true ; } System . out . println ( solve ( 0 ) ) ; } static int solve ( int idx ) { if ( idx == nums . length ) { if ( check ( ) ) return 1 ; else return 0 ; } int ret = 0 ; if ( nums [ idx ] == - 1 ) { for ( int k = 1 ; k <= 9 ; k ++ ) { if ( ! used [ k ] ) { nums [ idx ] = k ; used [ k ] = true ; ret += solve ( idx + 1 ) ; nums [ idx ] = - 1 ; used [ k ] = false ; } } } else { ret = solve ( idx + 1 ) ; } return ret ; } static boolean check ( ) { return nums [ 0 ] + nums [ 1 ] * 10 + nums [ 2 ] + nums [ 3 ] * 100 + nums [ 4 ] * 10 + nums [ 5 ] == nums [ 6 ] * 100 + nums [ 7 ] * 10 + nums [ 8 ] ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; boolean ans = false ; for ( int n = 0 ; n <= c [ 0 ] [ 0 ] ; n ++ ) { a [ 0 ] = n ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; loop : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] == a [ i ] + b [ j ] ) { ans = true ; } else { ans = false ; break loop ; } } } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int g [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { g [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { int a1 = i ; int b1 = g [ 0 ] [ 0 ] - a1 ; int b2 = g [ 0 ] [ 1 ] - a1 ; int b3 = g [ 0 ] [ 2 ] - a1 ; int a2 = g [ 1 ] [ 0 ] - b1 ; int a3 = g [ 2 ] [ 0 ] - b1 ; if ( g [ 0 ] [ 0 ] == a1 + b1 && g [ 0 ] [ 1 ] == a1 + b2 && g [ 0 ] [ 2 ] == a1 + b3 && g [ 1 ] [ 0 ] == a2 + b1 && g [ 1 ] [ 1 ] == a2 + b2 && g [ 1 ] [ 2 ] == a2 + b3 && g [ 2 ] [ 0 ] == a3 + b1 && g [ 2 ] [ 1 ] == a3 + b2 && g [ 2 ] [ 2 ] == a3 + b3 ) { ok = true ; break ; } } if ( ok ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . * ; import java . util . function . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { if ( i > S ) break ; for ( int j = 0 ; j < K + 1 ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; if ( P <= min ) { res ++ ; min = P ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void testArr ( int [ ] [ ] a ) { int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( int i = 0 ; i <= a [ 0 ] [ 0 ] ; i ++ ) { for ( int j = 0 ; j <= a [ 1 ] [ 1 ] ; j ++ ) { for ( int k = 0 ; k <= a [ 2 ] [ 2 ] ; k ++ ) { a1 = i ; b1 = a [ 0 ] [ 0 ] - i ; a2 = j ; b2 = a [ 1 ] [ 1 ] - j ; a3 = k ; b3 = a [ 2 ] [ 2 ] - k ; if ( a1 + b1 == a [ 0 ] [ 0 ] && a1 + b2 == a [ 0 ] [ 1 ] && a1 + b3 == a [ 0 ] [ 2 ] && a2 + b1 == a [ 1 ] [ 0 ] && a2 + b2 == a [ 1 ] [ 1 ] && a2 + b3 == a [ 1 ] [ 2 ] && a3 + b1 == a [ 2 ] [ 0 ] && a3 + b2 == a [ 2 ] [ 1 ] && a3 + b3 == a [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; return ; } public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = s . nextInt ( ) ; } } testArr ( a ) ; s . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = 0 ; int min = sc . nextInt ( ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { m = sc . nextInt ( ) ; if ( m < min ) { min = m ; count ++ ; } if ( m == 1 ) { break ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; } if ( num [ 0 ] - num [ 3 ] == num [ 1 ] - num [ 4 ] && num [ 2 ] - num [ 5 ] == num [ 1 ] - num [ 4 ] && num [ 0 ] - num [ 3 ] == num [ 2 ] - num [ 5 ] ) { if ( num [ 0 ] - num [ 6 ] == num [ 1 ] - num [ 7 ] && num [ 2 ] - num [ 8 ] == num [ 1 ] - num [ 7 ] && num [ 0 ] - num [ 6 ] == num [ 2 ] - num [ 8 ] ) { if ( num [ 3 ] - num [ 6 ] == num [ 4 ] - num [ 7 ] && num [ 5 ] - num [ 8 ] == num [ 4 ] - num [ 7 ] && num [ 3 ] - num [ 6 ] == num [ 5 ] - num [ 8 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < N ; i ++ ) { int now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z < 0 ) break ; if ( z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scan . nextInt ( ) ; } } boolean found = true ; int b1 = map [ 0 ] [ 0 ] ; int b2 = map [ 0 ] [ 1 ] ; int b3 = map [ 0 ] [ 2 ] ; int a1 = 0 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] != a2 + b2 || map [ 1 ] [ 2 ] != a2 + b3 || map [ 2 ] [ 1 ] != a3 + b2 || map [ 2 ] [ 2 ] != a3 + b3 ) { found = false ; } System . out . println ( found ? " Yes " : " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; ++ i ) { int x = in . nextInt ( ) ; if ( x < min ) { ++ ans ; } min = Math . min ( min , x ) ; } out . println ( ans ) ; } public static void main ( String [ ] args ) throws Exception { InputReader in = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; Main solver = new Main ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class InputReader { BufferedReader in ; StringTokenizer st ; public InputReader ( InputStream is ) { in = new BufferedReader ( new InputStreamReader ( is ) ) ; } public String next ( ) { try { while ( st == null || ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( in . readLine ( ) ) ; } return st . nextToken ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int t = 0 ; t <= k ; t ++ ) { int z = s - i - t ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] data = br . readLine ( ) . split ( " " ) ; long k = Long . parseLong ( data [ 0 ] ) ; long s = Long . parseLong ( data [ 1 ] ) ; long result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { result += getNumAllocation ( s - i , k ) ; } System . out . println ( result ) ; } public static long getNumAllocation ( long sum , long max ) { if ( sum < 0 ) { return 0 ; } else if ( sum <= max ) { return sum + 1 ; } else if ( sum <= max * 2 ) { return 2 * max - sum + 1 ; } else { return 0 ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y <= K && S - X - Y >= 0 ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = s . nextInt ( ) ; } } boolean can = true ; can &= c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; can &= c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; can &= c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; can &= c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; System . out . println ( can ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int counter = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { counter ++ ; } } } System . out . print ( counter ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { for ( int j = 0 ; j < K + 1 ; j ++ ) { if ( S - ( i + j ) <= K && 0 <= S - ( i + j ) ) { c += 1 ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int temp_max = p [ 0 ] ; int cnt = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( temp_max > p [ i ] ) { temp_max = p [ i ] ; cnt ++ ; } } System . out . print ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new java . util . Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; int a = 1 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int min = p [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( p [ i + 1 ] <= min && p [ i ] > p [ i + 1 ] ) { min = p [ i + 1 ] ; a ++ ; } } System . out . println ( a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = solve ( c ) ; System . out . println ( ans ) ; } private static String solve ( int [ ] [ ] c ) { for ( int d = 0 ; d < 2 ; d ++ ) { if ( ! equals ( c [ 0 ] [ d + 1 ] - c [ 0 ] [ d ] , c [ 1 ] [ d + 1 ] - c [ 1 ] [ d ] , c [ 2 ] [ d + 1 ] - c [ 2 ] [ d ] ) ) { return " No " ; } } for ( int d = 0 ; d < 2 ; d ++ ) { if ( ! equals ( c [ d + 1 ] [ 0 ] - c [ d ] [ 0 ] , c [ d + 1 ] [ 1 ] - c [ d ] [ 1 ] , c [ d + 1 ] [ 2 ] - c [ d ] [ 2 ] ) ) { return " No " ; } } return " Yes " ; } private static boolean equals ( int d1 , int d2 , int d3 ) { if ( d1 == d2 && d2 == d3 ) return true ; return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int N = scn . nextInt ( ) ; int min = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int a = scn . nextInt ( ) ; if ( min >= a ) { min = a ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int con = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int item = sc . nextInt ( ) ; if ( min > item ) { min = item ; } if ( min >= item ) { con ++ ; } } System . out . println ( con ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { for ( int y = 0 ; y <= K && x + y <= S ; y ++ ) { if ( S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . show ( m . solve ( ) ) ; sc . close ( ) ; } Scanner sc ; int K ; int S ; Main ( Scanner sc ) { this . sc = sc ; K = sc . nextInt ( ) ; S = sc . nextInt ( ) ; } private int solve ( ) { int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K && x + y + z == S ) { count ++ ; } } } return count ; } public void show ( int answer ) { System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= Math . min ( grid [ 0 ] [ 0 ] , Math . min ( grid [ 0 ] [ 1 ] , grid [ 0 ] [ 2 ] ) ) ; a1 ++ ) { for ( int a2 = 0 ; a2 <= Math . min ( grid [ 1 ] [ 0 ] , Math . min ( grid [ 1 ] [ 1 ] , grid [ 1 ] [ 2 ] ) ) ; a2 ++ ) { for ( int a3 = 0 ; a3 <= Math . min ( grid [ 2 ] [ 0 ] , Math . min ( grid [ 2 ] [ 1 ] , grid [ 2 ] [ 2 ] ) ) ; a3 ++ ) { if ( ( grid [ 0 ] [ 0 ] - a1 != grid [ 1 ] [ 0 ] - a2 ) || ( grid [ 1 ] [ 0 ] - a2 != grid [ 2 ] [ 0 ] - a3 ) ) { continue ; } if ( ( grid [ 0 ] [ 1 ] - a1 != grid [ 1 ] [ 1 ] - a2 ) || ( grid [ 1 ] [ 1 ] - a2 != grid [ 2 ] [ 1 ] - a3 ) ) { continue ; } if ( ( grid [ 0 ] [ 2 ] - a1 != grid [ 1 ] [ 2 ] - a2 ) || ( grid [ 1 ] [ 2 ] - a2 != grid [ 2 ] [ 2 ] - a3 ) ) { continue ; } System . out . println ( " Yes " ) ; return ; } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; scan . close ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { sum = s - ( i + j ) ; if ( sum >= 0 && sum <= k ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . lang . reflect . Array ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ret = 0 ; for ( int i = 0 ; i <= k ; i ++ ) for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) ret += 1 ; } System . out . println ( ret ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int i = 0 ; int min = N + 1 ; int count = 0 ; int P [ ] = new int [ N ] ; for ( i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] < min ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int min = Integer . parseInt ( sc . next ( ) ) ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int pi = Integer . parseInt ( sc . next ( ) ) ; if ( pi <= min ) { min = pi ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws InterruptedException { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int wa = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= x ; j ++ ) { if ( 0 <= wa - i - j && wa - i - j <= x ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } public static void saiki ( int a , String b ) { if ( a == 0 ) { System . out . println ( b ) ; } else { for ( char ch = 'a' ; ch <= 'c' ; ch ++ ) { saiki ( a - 1 , b + ch ) ; } } } public static int gcd ( int a , int b ) { if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } int r = - 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } }
import java . io . * ; class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int output = 0 ; try { String [ ] keyboardInput = br . readLine ( ) . split ( " " ) ; int K = Integer . parseInt ( keyboardInput [ 0 ] ) ; int S = Integer . parseInt ( keyboardInput [ 1 ] ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y >= 0 && S - x - y <= K ) { output ++ ; } } } System . out . println ( output ) ; } catch ( IOException e ) { System . out . println ( e . getMessage ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Integer . parseInt ; public class Main { static int [ ] nums ; static boolean [ ] used ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String line ; String [ ] words ; words = br . readLine ( ) . split ( " " ) ; nums = new int [ 9 ] ; used = new boolean [ 10 ] ; for ( int i = 0 ; i < words . length ; i ++ ) { nums [ i ] = parseInt ( words [ i ] ) ; if ( nums [ i ] != - 1 ) used [ nums [ i ] ] = true ; } System . out . println ( solve ( 0 ) ) ; } static int solve ( int idx ) { if ( idx == nums . length ) { int a = nums [ 3 ] * 100 + ( nums [ 1 ] + nums [ 4 ] ) * 10 + nums [ 0 ] + nums [ 2 ] + nums [ 5 ] ; int b = nums [ 6 ] * 100 + nums [ 7 ] * 10 + nums [ 8 ] ; if ( a == b ) return 1 ; else return 0 ; } int ret = 0 ; if ( nums [ idx ] == - 1 ) { for ( int k = 1 ; k <= 9 ; k ++ ) { if ( ! used [ k ] ) { nums [ idx ] = k ; used [ k ] = true ; ret += solve ( idx + 1 ) ; nums [ idx ] = - 1 ; used [ k ] = false ; } } } else { ret = solve ( idx + 1 ) ; } return ret ; } }
import java . util . * ; public class Main { public static void run ( int C [ ] [ ] ) { int r [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int d = C [ i ] [ j ] - C [ i ] [ j == 2 ? 0 : j + 1 ] ; if ( i == 0 ) { r [ j ] = d ; } else if ( d != r [ j ] ) { System . out . println ( " No " ) ; return ; } } } for ( int j = 0 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) { int d = C [ i ] [ j ] - C [ i == 2 ? 0 : i + 1 ] [ j ] ; if ( j == 0 ) { r [ i ] = d ; } else if ( d != r [ i ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } public static void runInput ( ) { Scanner scanner = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scanner . nextInt ( ) ; } } run ( C ) ; } public static void main ( String args [ ] ) { runInput ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; int max = 0 ; int min = 100000000 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int M = Integer . parseInt ( sc . next ( ) ) ; if ( M > max ) { max = M ; } if ( M <= min ) { min = M ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Stack < Integer > st = new Stack < > ( ) ; int min = 200001 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { min = p ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; sum = sum + C [ i ] [ j ] ; } } boolean result = false ; if ( sum % 3 == 0 ) { int D = sum / 3 ; if ( D == C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 0 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 1 ] ) { result = true ; } } System . out . println ( result ? " Yes " : " No " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( args ) ; } public void solve ( String [ ] args ) { MyScanner scanner = new MyScanner ( ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { break ; } for ( int y = 0 ; y <= k ; y ++ ) { if ( ( x + y ) > s ) { break ; } if ( ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = " " ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { try { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( " " ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; } public int nextInt ( ) { try { return Integer . parseInt ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public double nextDouble ( ) { try { return Double . parseDouble ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public long nextLong ( ) { try { return Long . parseLong ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int total = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { total += Math . max ( Math . min ( K , S - X ) - Math . max ( S - K - X , 0 ) + 1 , 0 ) ; } System . out . println ( total ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - i - j ; if ( tmp <= k && tmp >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { ans ++ ; } min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = Integer . parseInt ( scan . next ( ) ) ; int S = Integer . parseInt ( scan . next ( ) ) ; int cou = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { if ( i + j + ( S - i - j ) == S ) { cou ++ ; } } } } System . out . println ( cou ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int curMin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( i == 0 ) { curMin = p ; cnt ++ ; continue ; } if ( p < curMin ) { curMin = p ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = 0 , m = 0 ; if ( scan . hasNext ( ) ) n = scan . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( scan . hasNext ( ) ) arr [ i ] = scan . nextInt ( ) ; } int min = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= min ) { count ++ ; } min = Math . min ( arr [ i ] , min ) ; } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int board [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int y = 0 ; y < 3 ; ++ y ) { for ( int x = 0 ; x < 3 ; ++ x ) { board [ x ] [ y ] = sc . nextInt ( ) ; } } if ( search ( board ) ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; } public static boolean search ( int board [ ] [ ] ) { int k = 0 ; for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ 0 ] [ j ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ i ] [ j ] - board [ i ] [ 0 ] ) { return false ; } } } } for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ j ] [ 0 ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ j ] [ i ] - board [ 0 ] [ i ] ) { return false ; } } } } return true ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i > S ) { break ; } for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j > S ) { break ; } if ( S - i - j >= 0 && S - i - j <= K ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 1 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 3 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 3 ] [ 3 ] - c [ 3 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int max = Integer . parseInt ( s [ 0 ] ) ; int ans = Integer . parseInt ( s [ 1 ] ) ; int result = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int k = ans - ( i + j ) ; if ( 0 <= k && k <= max ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int count = 0 ; sc . nextLine ( ) ; String line = sc . nextLine ( ) ; String [ ] array = line . split ( " " ) ; int pi ; int min = a + 1 ; for ( int i = 0 ; i < a ; i ++ ) { pi = Integer . parseInt ( array [ i ] ) ; if ( min > pi ) { count ++ ; min = pi ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - i - j ; if ( 0 <= tmp && tmp <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= K ; ++ j ) { if ( S - i - j >= 0 && S - i - j <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { answer = " No " ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } int [ ] t = new int [ 6 ] ; t [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; t [ 1 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; t [ 2 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; t [ 3 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; t [ 4 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; t [ 5 ] = c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] ; String ans = " Yes " ; for ( int i = 1 ; i < 6 ; i ++ ) { if ( t [ i ] != t [ 0 ] ) { ans = " No " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner keyboard = new Scanner ( System . in ) ; int K = keyboard . nextInt ( ) ; int S = keyboard . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; keyboard . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } int min = 0 ; int count = 0 ; min = array [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= array [ i ] ) { min = array [ i ] ; } else { count ++ ; } } System . out . println ( n - count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] [ ] b = new int [ 3 ] [ 3 ] ; for ( int x = 0 ; x < 3 ; x ++ ) { String [ ] foo = br . readLine ( ) . split ( " " ) ; for ( int y = 0 ; y < 3 ; y ++ ) { b [ x ] [ y ] = Integer . parseInt ( foo [ y ] ) ; } } int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( int a1 = 0 ; a1 < 100 ; a1 ++ ) { b1 = b [ 0 ] [ 0 ] - a1 ; b2 = b [ 0 ] [ 1 ] - a1 ; b3 = b [ 0 ] [ 2 ] - a1 ; int [ ] bls = { b1 , b2 , b3 } ; for ( int x = 0 ; x < 3 ; x ++ ) { if ( x == 0 ) { a2 = b [ 1 ] [ x ] - bls [ x ] ; a3 = b [ 2 ] [ x ] - bls [ x ] ; } else { if ( a2 != b [ 1 ] [ x ] - bls [ x ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } if ( a3 != b [ 2 ] [ x ] - bls [ x ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } a2 = b [ 1 ] [ x ] - bls [ x ] ; a3 = b [ 2 ] [ x ] - bls [ x ] ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int temp = 0 ; for ( int i = 0 ; i < ( t - 1 ) ; i ++ ) { int k = sc . nextInt ( ) ; if ( k < min ) { min = k ; temp ++ ; } } System . out . println ( temp + 1 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; boolean ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( a + x == d && b + x == e && c + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; return ; } ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( g + x == d && h + x == e && i + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int counter = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int num = sc . nextInt ( ) ; if ( num < min ) { counter ++ ; min = num ; } } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long next = 2 ; for ( int i = 0 ; i < x ; i ++ ) { next = ( next + 1 ) * 2 ; } System . out . println ( next ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int minium = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= minium ) { minium = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int size = in . nextInt ( ) ; ArrayList < Long > list = new ArrayList < Long > ( ) ; for ( int x = 0 ; x < size ; x ++ ) { list . add ( in . nextLong ( ) ) ; } long minimum = 2 ; long counter = list . get ( 0 ) - 1 ; for ( int x = 1 ; x < size ; x ++ ) { long num = list . get ( x ) ; if ( num % minimum == 0 ) { counter += ( num / minimum ) - 1 ; list . set ( x , minimum ) ; } else { counter += ( num / minimum ) ; list . set ( x , list . get ( x ) % minimum ) ; } if ( list . get ( x ) - minimum == 0 && num == minimum ) { minimum ++ ; } } System . out . println ( counter ) ; in . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int [ ] c = new int [ 6 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { int a = scn . nextInt ( ) ; if ( i < 3 ) { c [ 2 * i ] += a ; c [ 2 * i + 1 ] += a ; } else { if ( i == 3 ) { c [ 2 ] += a ; c [ 4 ] += a ; } if ( i == 4 ) { c [ 0 ] += a ; c [ 5 ] += a ; } if ( i == 5 ) { c [ 1 ] += a ; c [ 3 ] += a ; } if ( i == 6 ) { c [ 3 ] += a ; c [ 5 ] += a ; } if ( i == 7 ) { c [ 1 ] += a ; c [ 4 ] += a ; } if ( i == 8 ) { c [ 0 ] += a ; c [ 2 ] += a ; } } } boolean ans = true ; for ( int i = 0 ; i < 6 ; i ++ ) { ans &= ( c [ i ] == c [ 0 ] ) ; } System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= Math . min ( s , k ) ; i ++ ) { ans += Math . max ( 0 , Math . min ( s - i + 1 , k + 1 ) - Math . max ( 0 , s - i - k ) ) ; } System . out . println ( ans ) ; } }
import java . math . * ; import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws FileNotFoundException { new Main ( ) . run ( ) ; } class SegTree { int n = 1 ; int [ ] v ; public SegTree ( int n ) { while ( this . n < n ) this . n *= 2 ; v = new int [ 2 * this . n - 1 ] ; } void set ( int k ) { v [ k ] = 1 ; while ( k > 0 ) { k = ( k - 1 ) / 2 ; v [ k ] = v [ 2 * k + 1 ] + v [ 2 * k + 2 ] ; } } int query ( int a , int b ) { return query ( 0 , n , a , b , 0 ) ; } int query ( int l , int r , int a , int b , int k ) { if ( r <= a || b <= l ) return 0 ; else if ( a <= l && r <= b ) return v [ k ] ; else { int vl = query ( l , ( l + r ) / 2 , a , b , 2 * k + 1 ) ; int vr = query ( ( l + r ) / 2 , r , a , b , 2 * k + 2 ) ; return vl + vr ; } } } void run ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE / 3 ; int ans = 0 ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; -- P [ i ] ; if ( min >= P [ i ] ) ++ ans ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = 0 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } ans += a [ 0 ] - 1 ; int k = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == k ) { k ++ ; continue ; } ans += ( a [ i ] - 1 ) / k ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 != 0 || sum / 3 != c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > p = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { p . add ( scanner . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( p ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( p . get ( i ) <= min ) { min = p . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { System . out . println ( solve ( ) ) ; } public static int solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; Queue < Integer > q = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { q . add ( arr [ i ] ) ; if ( arr [ i ] <= q . peek ( ) ) { sum ++ ; } } return sum ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int count = 0 ; if ( c12 - c11 == c22 - c21 && c22 - c21 == c32 - c31 ) { if ( c13 - c12 == c23 - c22 && c23 - c22 == c33 - c32 ) { if ( c11 - c13 == c21 - c23 && c21 - c23 == c31 - c33 ) { if ( c21 - c11 == c22 - c12 && c22 - c12 == c23 - c13 ) { if ( c31 - c21 == c32 - c22 && c32 - c22 == c33 - c23 ) { if ( c11 - c31 == c12 - c32 && c12 - c32 == c13 - c33 ) { } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } if ( count != 0 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } sc . close ( ) ; } public static int gcd ( int a , int b ) { if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } int r = - 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int E = sc . nextInt ( ) ; int F = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int I = sc . nextInt ( ) ; int sum = A + E + I ; Main main = new Main ( ) ; if ( main . checkSum ( sum , A , H , F ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , D , B , I ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , D , H , C ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , G , E , C ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , G , B , F ) == false ) { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } public boolean checkSum ( int sum , int A , int B , int C ) { if ( A + B + C == sum ) return true ; return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } int c012 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int c021 = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ; int c102 = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; int c120 = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; int c210 = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; int c201 = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( c012 == c021 && c021 == c102 && c102 == c120 && c120 == c210 && c210 == c201 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; int z = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { z = s - ( i + j ) ; if ( 0 <= z && z <= k ) cnt ++ ; } } out . println ( cnt ) ; } }
import java . util . * ; import java . io . * ; class Main { void solve ( ) { int n = inint ( ) ; int [ ] a = inintar ( n ) ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , a [ i ] ) ; if ( min >= a [ i ] ) count ++ ; } out . println ( count ) ; } public static Scanner in = new Scanner ( System . in ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; out . flush ( ) ; } public int inint ( ) { return in . nextInt ( ) ; } public long inlong ( ) { return in . nextLong ( ) ; } public double indouble ( ) { return in . nextDouble ( ) ; } public String instr ( ) { return in . next ( ) ; } public char inchar ( ) { return in . next ( ) . charAt ( 0 ) ; } public int [ ] inintar ( int num ) { int [ ] a = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { a [ i ] = in . nextInt ( ) ; } return a ; } public char [ ] incharar ( ) { return in . next ( ) . toCharArray ( ) ; } public char [ ] [ ] incharmap ( int h , int w ) { char [ ] [ ] a = new char [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { String temp = in . next ( ) ; for ( int j = 0 ; j < w ; j ++ ) { a [ i ] [ j ] = temp . charAt ( j ) ; } } return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) c [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i <= Math . max ( c [ 0 ] , Math . max ( c [ 1 ] , c [ 2 ] ) ) ; i ++ ) { int a1 = i , b1 = c [ 0 ] - a1 , b2 = c [ 1 ] - a1 , b3 = c [ 2 ] - a1 , a2 = c [ 3 ] - b1 , a3 = c [ 6 ] - b1 ; if ( a1 + b1 == c [ 0 ] && a1 + b2 == c [ 1 ] && a1 + b3 == c [ 2 ] && a2 + b1 == c [ 3 ] && a2 + b2 == c [ 4 ] && a2 + b3 == c [ 5 ] && a3 + b1 == c [ 6 ] && a3 + b2 == c [ 7 ] && a3 + b3 == c [ 8 ] ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; TreeSet < Integer > ts = new TreeSet < Integer > ( ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; ++ i ) { int pi = sc . nextInt ( ) ; if ( ! ts . isEmpty ( ) ) { int min = ts . first ( ) ; if ( min >= pi ) { ++ cnt ; } } else { ++ cnt ; } ts . add ( pi ) ; } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] ks = scanner . nextLine ( ) . split ( " " , 2 ) ; int k = Integer . parseInt ( ks [ 0 ] ) ; int s = Integer . parseInt ( ks [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int num = s - i - j ; if ( num >= 0 && num <= k ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , Scanner sc , PrintWriter pw ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) c ++ ; min = Math . min ( min , arr [ i ] ) ; } pw . println ( c ) ; } } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( FileReader r ) { br = new BufferedReader ( r ) ; } public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min ) { min = a [ i ] ; count ++ ; } } pw . print ( count ) ; pw . flush ( ) ; pw . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = N + 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int min = P [ 0 ] ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { cnt ++ ; min = P [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( final String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int [ ] [ ] table = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { table [ i ] [ j ] = scanner . nextInt ( ) ; } } int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( a1 = 0 ; a1 <= table [ 0 ] [ 0 ] ; a1 ++ ) { b1 = table [ 0 ] [ 0 ] - a1 ; a2 = table [ 1 ] [ 0 ] - b1 ; if ( a2 < 0 ) continue ; a3 = table [ 2 ] [ 0 ] - b1 ; if ( a3 < 0 ) continue ; b2 = table [ 0 ] [ 1 ] - a1 ; if ( b2 < 0 ) continue ; b3 = table [ 0 ] [ 2 ] - a1 ; if ( b3 < 0 ) continue ; if ( a2 + b2 != table [ 1 ] [ 1 ] ) continue ; if ( a2 + b3 != table [ 1 ] [ 2 ] ) continue ; if ( a3 + b2 != table [ 2 ] [ 1 ] ) continue ; if ( a3 + b3 != table [ 2 ] [ 2 ] ) continue ; System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( list ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( list . get ( i ) <= min ) { min = list . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedInputStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( new BufferedInputStream ( System . in ) ) ; int a = sc . nextInt ( ) ; int m [ ] = new int [ a ] ; int min = a ; int count = 0 ; for ( int i = 0 ; i < a ; i ++ ) { m [ i ] = sc . nextInt ( ) ; if ( m [ i ] < min ) min = m [ i ] ; if ( m [ i ] <= min ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } int temp1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int temp2 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int temp3 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; int temp4 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int temp5 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int temp6 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; boolean ans = true ; if ( temp1 != temp2 ) { ans = false ; } if ( temp1 != temp3 ) { ans = false ; } if ( temp4 != temp5 ) { ans = false ; } if ( temp4 != temp6 ) { ans = false ; } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } boolean ok = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) ok = false ; } } if ( ok ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int ans = 1 ; int min = P [ 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] cc = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int k = 1 ; k <= 3 ; k ++ ) { cc [ i ] [ k ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { int a = cc [ 1 ] [ 1 ] - i ; int b = cc [ 1 ] [ 2 ] - i ; int c = cc [ 1 ] [ 3 ] - i ; int d = cc [ 2 ] [ 1 ] - j ; int e = cc [ 2 ] [ 2 ] - j ; int f = cc [ 2 ] [ 3 ] - j ; int g = cc [ 3 ] [ 1 ] - k ; int h = cc [ 3 ] [ 2 ] - k ; int l = cc [ 3 ] [ 3 ] - k ; if ( a == d && d == g && b == e && e == h && c == f && f == l ) { System . out . println ( " Yes " ) ; break loop ; } } } if ( i == 100 ) { System . out . println ( " No " ) ; break ; } } } }
import java . io . * ; import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int a [ ] = new int [ n ] ; int min [ ] = new int [ n ] ; int c = 0 , minval = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( s [ i ] ) ; min [ 0 ] = a [ 0 ] ; minval = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < minval ) { minval = a [ i ] ; min [ i ] = minval ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min [ i ] ) c ++ ; } out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { c [ i ] [ j ] -= c [ i ] [ 0 ] ; } } System . out . println ( c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] && c [ 1 ] [ 1 ] == c [ 2 ] [ 1 ] && c [ 0 ] [ 2 ] == c [ 1 ] [ 2 ] && c [ 1 ] [ 2 ] == c [ 2 ] [ 2 ] ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int sum = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int min = P [ 0 ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( min >= P [ i + 1 ] ) { sum ++ ; min = P [ i + 1 ] ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { list [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( list [ i ] , min ) ; if ( min < list [ i ] ) { continue ; } ans ++ ; } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String line = scanner . nextLine ( ) ; String [ ] split = line . split ( " " ) ; List < Integer > intList = new ArrayList < Integer > ( ) ; for ( String s : split ) { intList . add ( Integer . parseInt ( s ) ) ; } int cnt = 1 ; int min = intList . get ( 0 ) ; for ( int i = 1 ; i < intList . size ( ) ; i ++ ) { int target = intList . get ( i ) ; if ( target <= min ) { cnt ++ ; min = target ; } } int result = cnt ; System . out . println ( result ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long toori = 0 ; if ( K <= 200 ) { for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { for ( int k = 0 ; k <= K ; k ++ ) { if ( i + j + k == S ) { toori ++ ; } } } } System . out . println ( toori ) ; } else { if ( S <= K ) { System . out . println ( ( S + 2 ) * ( S + 1 ) / 2 ) ; } else if ( S > K && S <= 2 * K ) { System . out . println ( ( S + 2 ) * ( S + 1 ) / 2 - 3 * ( S - K + 1 ) * ( S - K ) / 2 ) ; } else if ( S > 2 * K ) { int tmp = 3 * K - S ; System . out . println ( ( tmp + 2 ) * ( tmp + 1 ) / 2 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int b = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; int d = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( a == b && b == d ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner sc = new java . util . Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int sum = 1 ; p [ 0 ] = sc . nextInt ( ) ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( p [ i ] < min ) { min = p [ i ] ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { a [ 0 ] = i ; a [ 1 ] = j ; a [ 2 ] = k ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; if ( check ( a , b , c ) ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } static boolean check ( int a [ ] , int b [ ] , int c [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { return false ; } } } return true ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; boolean ans = false ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { int ok = 0 ; int [ ] b = { map [ 0 ] [ 0 ] - i , map [ 1 ] [ 1 ] - j , map [ 2 ] [ 2 ] - k } ; if ( i + b [ 1 ] == map [ 0 ] [ 1 ] ) ok ++ ; if ( i + b [ 2 ] == map [ 0 ] [ 2 ] ) ok ++ ; if ( j + b [ 0 ] == map [ 1 ] [ 0 ] ) ok ++ ; if ( j + b [ 2 ] == map [ 1 ] [ 2 ] ) ok ++ ; if ( k + b [ 0 ] == map [ 2 ] [ 0 ] ) ok ++ ; if ( k + b [ 1 ] == map [ 2 ] [ 1 ] ) ok ++ ; if ( ok == 6 ) ans = true ; } } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int total = x + y ; if ( ! ( total > S ) && ( total + K ) >= S ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { static int [ ] data ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - ( b + a ) ; if ( c <= k && c >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } static void num ( int n ) { int num = n ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { data [ i ] ++ ; n /= i ; i = 1 ; } } return ; } } class Pair implements Comparable { Character from ; int end ; @ Override public int compareTo ( Object other ) { Pair otherpair = ( Pair ) other ; return end - otherpair . end ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= x ; y ++ ) { for ( int z = 0 ; z <= y ; z ++ ) { if ( x + y + z == s ) { if ( x == y && y == z ) ans ++ ; else if ( x == y || y == z || x == z ) ans += 3 ; else ans += 6 ; } } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = stdIn . nextInt ( ) ; } stdIn . close ( ) ; int count = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long A [ ] = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextLong ( ) ; } long min = A [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] <= min ) { count ++ ; min = A [ i ] ; } } System . out . println ( count ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int i = 0 , j = 0 ; int temp ; boolean flag = true ; for ( i = 0 ; i < 3 ; i ++ ) for ( j = 0 ; j < 3 ; j ++ ) { temp = stdin . nextInt ( ) ; c [ i ] [ j ] = temp ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { if ( ( c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] ) != ( c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] ) ) flag = false ; } } if ( flag ) System . out . println ( " Yes " ) ; else if ( ! flag ) System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) , S = scan . nextInt ( ) ; int x , y , cnt = 0 ; for ( x = 0 ; x <= K ; x ++ ) { int ylim = K ; if ( S - x < ylim ) ylim = S - x ; for ( y = 0 ; y <= ylim ; y ++ ) { if ( S - x - y <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && x + y + k >= s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; ArrayList < Integer > numbers = new ArrayList < > ( ) ; int temp = 0 ; for ( int i = 0 ; i < a ; i ++ ) { numbers . add ( sc . nextInt ( ) ) ; } int low = numbers . get ( 0 ) ; for ( int i = 0 ; i < a ; i ++ ) { if ( numbers . get ( i ) < low ) { low = numbers . get ( i ) ; } if ( numbers . get ( i ) <= low ) { temp ++ ; } } System . out . println ( temp ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k >= 0 && k <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; String ans = " No " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) { if ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) { if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) { ans = " Yes " ; } } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int ans = 0 ; int [ ] [ ] nums = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { nums [ i / 3 ] [ i % 3 ] = sc . nextInt ( ) ; } System . out . println ( nums [ 1 ] [ 0 ] - nums [ 0 ] [ 0 ] == nums [ 1 ] [ 1 ] - nums [ 0 ] [ 1 ] && nums [ 1 ] [ 1 ] - nums [ 0 ] [ 1 ] == nums [ 1 ] [ 2 ] - nums [ 0 ] [ 2 ] && nums [ 2 ] [ 0 ] - nums [ 1 ] [ 0 ] == nums [ 2 ] [ 1 ] - nums [ 1 ] [ 1 ] && nums [ 2 ] [ 1 ] - nums [ 1 ] [ 1 ] == nums [ 2 ] [ 2 ] - nums [ 1 ] [ 2 ] ? " Yes " : " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { static InputStreamReader r ; public static void main ( String [ ] args ) throws Exception { r = new InputStreamReader ( System . in ) ; int N = nextInt ( ) ; int min = 200005 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = nextInt ( ) ; if ( Pi < min ) { min = Pi ; ans ++ ; } } System . out . println ( ans ) ; } public static String nextString ( ) throws Exception { String res = " " ; while ( true ) { int c = r . read ( ) ; if ( c == 32 || c == 10 || c == - 1 ) { break ; } res += ( char ) c ; } return res ; } public static int nextInt ( ) throws Exception { return Integer . parseInt ( nextString ( ) ) ; } public static long nextLong ( ) throws Exception { return Long . parseLong ( nextString ( ) ) ; } public static double nextDouble ( ) throws Exception { return Double . parseDouble ( nextString ( ) ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { private void doit ( ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int n = 3 ; int [ ] [ ] data = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { data [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flg = false ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { for ( int k = 0 ; k < 101 ; k ++ ) { if ( data [ 0 ] [ 0 ] - i == data [ 0 ] [ 1 ] - j && data [ 0 ] [ 0 ] - i == data [ 0 ] [ 2 ] - k && data [ 0 ] [ 1 ] - j == data [ 0 ] [ 2 ] - k ) { if ( data [ 1 ] [ 0 ] - i == data [ 1 ] [ 1 ] - j && data [ 1 ] [ 0 ] - i == data [ 1 ] [ 2 ] - k && data [ 1 ] [ 1 ] - j == data [ 1 ] [ 2 ] - k ) { if ( data [ 2 ] [ 0 ] - i == data [ 2 ] [ 1 ] - j && data [ 2 ] [ 0 ] - i == data [ 2 ] [ 2 ] - k && data [ 2 ] [ 1 ] - j == data [ 2 ] [ 2 ] - k ) { flg = true ; break ; } } } } if ( flg ) break ; } if ( flg ) break ; } System . out . println ( flg ? " Yes " : " No " ) ; } } private void debug ( Object ... o ) { System . out . println ( " debug = " + Arrays . deepToString ( o ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . doit ( ) ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , s = sc . nextInt ( ) , t = 0 ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { m . put ( i + j , m . get ( i + j ) == null ? 1 : m . get ( i + j ) + 1 ) ; } } for ( int k = 0 ; k <= K ; k ++ ) if ( m . containsKey ( s - k ) ) t += m . get ( s - k ) ; System . out . println ( t ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int [ ] n = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { n [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int cnt = 1 , min = n [ 0 ] ; for ( int i = 1 ; i < a ; i ++ ) { if ( min > n [ i ] ) { cnt ++ ; min = n [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int k = 1 ; int now = 0 ; for ( int i = 1 ; i < n ; i ++ ) { now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; k ++ ; } } System . out . println ( k ) ; } }
import java . util . * ; public class Main { private static boolean verify ( int [ ] [ ] c ) { return ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] && c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] && c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } System . out . println ( verify ( c ) ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) answer += ( s - x + 1 ) - Math . min ( s - x + 1 , Math . max ( 0 , ( ( s - x - k ) * 2 ) ) ) ; System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] temp = scanner . nextLine ( ) . split ( " " ) ; int tmp = 0 ; int count = 0 ; int min = Integer . parseInt ( temp [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { tmp = Integer . parseInt ( temp [ i ] ) ; if ( tmp == Math . min ( min , tmp ) ) { count ++ ; min = tmp ; } } System . out . println ( count + 1 ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = Integer . parseInt ( in . next ( ) ) ; int s = Integer . parseInt ( in . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - j - i ; if ( 0 <= z && z <= k ) { ans ++ ; } } } out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; try { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { if ( a == s ) { ans ++ ; break ; } int bc = ( int ) Math . ceil ( ( double ) ( s - a ) / 2 ) ; if ( bc <= k ) { for ( int b = 0 ; b <= k ; b ++ ) { if ( s - a - b >= 0 && s - a - b <= k ) { ans ++ ; } } } } System . out . println ( ans ) ; } finally { sc . close ( ) ; } } }
import java . io . * ; import java . util . * ; public class Main { void submit ( ) { int N = nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = nextInt ( ) ; } int count = 1 ; if ( N == 1 ) { out . println ( count ) ; return ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } out . println ( count ) ; } void preCalc ( ) { } void stress ( ) { } void test ( ) { } Main ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; preCalc ( ) ; submit ( ) ; out . close ( ) ; } static final Random rng = new Random ( ) ; static int rand ( int l , int r ) { return l + rng . nextInt ( r - l + 1 ) ; } public static void main ( String [ ] args ) throws IOException { new Main ( ) ; } BufferedReader br ; PrintWriter out ; StringTokenizer st ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } String nextString ( ) { try { return br . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } br . close ( ) ; long ans = 0 ; int x = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == x ) { x ++ ; } ans += ( a [ i ] - 1 ) / x ; if ( x == 1 ) { x ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] input = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { input [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int res = 0 ; for ( int i = 0 ; i < input . length ; i ++ ) { if ( input [ i ] < min ) { min = input [ i ] ; res ++ ; } } System . out . print ( res ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static BufferedReader in ; static PrintWriter out ; static StringTokenizer tok ; void solve ( ) throws IOException { int x = ni ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans ++ ; ans *= 2 ; } out . println ( ans ) ; } String ns ( ) throws IOException { while ( ! tok . hasMoreTokens ( ) ) { tok = new StringTokenizer ( in . readLine ( ) , " " ) ; } return tok . nextToken ( ) ; } int ni ( ) throws IOException { return Integer . parseInt ( ns ( ) ) ; } long nl ( ) throws IOException { return Long . parseLong ( ns ( ) ) ; } double nd ( ) throws IOException { return Double . parseDouble ( ns ( ) ) ; } String [ ] nsa ( int n ) throws IOException { String [ ] res = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = ns ( ) ; } return res ; } int [ ] nia ( int n ) throws IOException { int [ ] res = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = ni ( ) ; } return res ; } long [ ] nla ( int n ) throws IOException { long [ ] res = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = nl ( ) ; } return res ; } public static void main ( String [ ] args ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; tok = new StringTokenizer ( " " ) ; Main main = new Main ( ) ; main . solve ( ) ; out . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int [ ] ary = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { ary [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 2000000 ; int max = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( ary [ i ] < min ) { ans ++ ; min = ary [ i ] ; } else if ( true ) { } } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; static void p ( String ans ) { System . out . println ( ans ) ; } ; static void p ( int ans ) { System . out . println ( ans ) ; } ; static void p ( long ans ) { System . out . println ( ans ) ; } ; static void p ( double ans ) { System . out . println ( ans ) ; } ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int p [ ] = new int [ N ] ; int min = 0 ; int ctn = 0 ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i == 0 ) { min = p [ i ] ; } if ( min >= p [ i ] ) { min = p [ i ] ; ctn ++ ; } } p ( ctn ) ; } static boolean te ( ) { return true ; } }
import java . io . * ; import java . util . * ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Iterator < String > sc ) { int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int sum = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { int remaining = S - x ; sum += Math . max ( Math . min ( remaining , K ) - Math . max ( remaining - K , 0 ) + 1 , 0 ) ; } System . out . println ( sum ) ; } } class Main { public static void main ( String ... args ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver . INSTANCE . solve ( new Iterator < String > ( ) { private StringTokenizer tokenizer ; public boolean hasNext ( ) { return true ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } } ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int a , b , c ; int count = 0 ; for ( a = 0 ; a <= k ; a ++ ) { for ( b = 0 ; b <= k ; b ++ ) { c = s - a - b ; if ( c >= 0 && c <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int limit = scanner . nextInt ( ) ; int target = scanner . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= limit ; i ++ ) { for ( int j = 0 ; j <= limit ; j ++ ) { z = target - i - j  ; if ( z >= 0 && z <= limit ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int cnt = 1 ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > arr [ i ] ) cnt ++ ; min = Math . min ( min , arr [ i ] ) ; } System . out . println ( cnt ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int matrix [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { matrix [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int j = 0 ; j < 2 ; j ++ ) { for ( int i = 1 ; i < 3 ; i ++ ) { if ( matrix [ i - 1 ] [ j ] - matrix [ i - 1 ] [ j + 1 ] != matrix [ i ] [ j ] - matrix [ i ] [ j + 1 ] ) { System . out . println ( " No " ) ; return ; } } } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( matrix [ i + 1 ] [ j - 1 ] - matrix [ i ] [ j - 1 ] != matrix [ i + 1 ] [ j ] - matrix [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int s = 0 ; int lo = p [ 0 ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( lo >= p [ i ] ) { lo = p [ i ] ; s ++ ; } } System . out . println ( s ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } String ans ; if ( c [ 0 ] - c [ 1 ] == c [ 3 ] - c [ 4 ] && c [ 0 ] - c [ 1 ] == c [ 6 ] - c [ 7 ] && c [ 2 ] - c [ 1 ] == c [ 5 ] - c [ 4 ] && c [ 2 ] - c [ 1 ] == c [ 8 ] - c [ 7 ] && c [ 0 ] - c [ 3 ] == c [ 1 ] - c [ 4 ] && c [ 0 ] - c [ 3 ] == c [ 2 ] - c [ 5 ] && c [ 4 ] - c [ 7 ] == c [ 3 ] - c [ 6 ] && c [ 5 ] - c [ 8 ] == c [ 3 ] - c [ 6 ] ) { ans = " Yes " ; } else { ans = " No " ; } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { String line = " " ; try { line = readLine ( ) ; StringTokenizer st = new StringTokenizer ( line , " " ) ; String tempK = st . nextToken ( ) ; String tempS = st . nextToken ( ) ; int k = Integer . parseInt ( tempK ) ; int s = Integer . parseInt ( tempS ) ; int cnt = 0 ; for ( int i = 0 ; i < s + 1 ; i ++ ) { if ( i > k ) { continue ; } for ( int j = 0 ; j < s + 1 ; j ++ ) { if ( j > k ) { continue ; } else if ( s - i - j > k ) { continue ; } if ( i + j <= s ) { cnt ++ ; } } } System . out . println ( cnt ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private static String readLine ( ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; return br . readLine ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int kari = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; if ( kari == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && kari == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) { kari = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; if ( kari == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] && kari == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { if ( a [ 0 ] [ 0 ] - i == a [ 1 ] [ 0 ] - j && a [ 1 ] [ 0 ] - j == a [ 2 ] [ 0 ] - k && a [ 2 ] [ 0 ] - k == a [ 0 ] [ 0 ] - i ) { if ( a [ 0 ] [ 1 ] - i == a [ 1 ] [ 1 ] - j && a [ 1 ] [ 1 ] - j == a [ 2 ] [ 1 ] - k && a [ 2 ] [ 1 ] - k == a [ 0 ] [ 1 ] - i ) { if ( a [ 0 ] [ 2 ] - i == a [ 1 ] [ 2 ] - j && a [ 1 ] [ 2 ] - j == a [ 2 ] [ 2 ] - k && a [ 2 ] [ 2 ] - k == a [ 0 ] [ 2 ] - i ) { System . out . println ( " Yes " ) ; return ; } } } } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] youso = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { youso [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] tmp = new int [ 3 ] ; tmp [ 0 ] = youso [ 1 ] [ 0 ] - youso [ 0 ] [ 0 ] ; tmp [ 1 ] = youso [ 2 ] [ 0 ] - youso [ 1 ] [ 0 ] ; tmp [ 2 ] = youso [ 2 ] [ 0 ] - youso [ 0 ] [ 0 ] ; int aa [ ] [ ] = { { 1 , 0 } , { 2 , 1 } , { 2 , 0 } } ; boolean [ ] vali = new boolean [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { vali [ i ] = true ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( youso [ aa [ i ] [ 0 ] ] [ j ] - youso [ aa [ i ] [ 1 ] ] [ j ] != tmp [ i ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int res = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= a [ i ] ) { res ++ ; min = a [ i ] ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] ci = new int [ 3 ] [ 3 ] ; for ( int c = 0 ; c < 3 ; c ++ ) { ci [ c ] [ 0 ] = sc . nextInt ( ) ; ci [ c ] [ 1 ] = sc . nextInt ( ) ; ci [ c ] [ 2 ] = sc . nextInt ( ) ; } int count = 0 ; for ( int b = 0 ; b < 2 ; b ++ ) { if ( ( ci [ b + 1 ] [ 0 ] - ci [ b ] [ 0 ] ) != ( ci [ b + 1 ] [ 1 ] - ci [ b ] [ 1 ] ) || ( ci [ b + 1 ] [ 1 ] - ci [ b ] [ 1 ] ) != ( ci [ b + 1 ] [ 2 ] - ci [ b ] [ 2 ] ) ) { count = 1 ; } } for ( int b = 0 ; b < 2 ; b ++ ) { if ( ( ci [ 0 ] [ b + 1 ] - ci [ 0 ] [ b ] ) != ( ci [ 1 ] [ b + 1 ] - ci [ 1 ] [ b ] ) || ( ci [ 1 ] [ b + 1 ] - ci [ 1 ] [ b ] ) != ( ci [ 2 ] [ b + 1 ] - ci [ 2 ] [ b ] ) ) { count = 1 ; } } if ( count == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { private static final int MOD = 1_000_000_007 ; private static final String YES = " Yes " ; private static final String NO = " No " ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( N , P ) ) ; } private static int solve ( int N , int [ ] P ) { int count = 0 ; int min = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int adis1 = 0 ; int adis2 = 0 ; int bdis1 = 0 ; int bdis2 = 0 ; int [ ] [ ] nums = new int [ 3 ] [ 3 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { nums [ i ] [ j ] = scan . nextInt ( ) ; } } adis1 = nums [ 1 ] [ 0 ] - nums [ 0 ] [ 0 ] ; adis2 = nums [ 2 ] [ 0 ] - nums [ 1 ] [ 0 ] ; for ( int j = 1 ; j < 3 ; j ++ ) { if ( nums [ 1 ] [ j ] - nums [ 0 ] [ j ] != adis1 ) { answer = " No " ; } if ( nums [ 2 ] [ j ] - nums [ 1 ] [ j ] != adis2 ) { answer = " No " ; } } bdis1 = nums [ 0 ] [ 1 ] - nums [ 0 ] [ 0 ] ; bdis2 = nums [ 0 ] [ 2 ] - nums [ 0 ] [ 1 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( nums [ i ] [ 1 ] - nums [ i ] [ 0 ] != bdis1 ) { answer = " No " ; } if ( nums [ i ] [ 2 ] - nums [ i ] [ 1 ] != bdis2 ) { answer = " No " ; } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int diff21 = c21 - c11 ; int diff31 = c31 - c11 ; if ( c22 - c12 == diff21 && c23 - c13 == diff21 && c32 - c12 == diff31 && c33 - c13 == diff31 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) >= 0 && ( S - i - j ) <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a < min ) { min = a ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int l = S - i - j ; if ( l >= 0 && l <= K && i + j + l == S ) { count ++ ; } } } System . out . println ( count ) ; } public static int sample ( int n ) { return n ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = new int [ 9 ] ; int ans = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b11 = a [ 0 ] - a [ 1 ] ; int b12 = a [ 3 ] - a [ 4 ] ; int b13 = a [ 6 ] - a [ 7 ] ; int b21 = a [ 1 ] - a [ 2 ] ; int b22 = a [ 4 ] - a [ 5 ] ; int b23 = a [ 7 ] - a [ 8 ] ; int b31 = a [ 2 ] - a [ 0 ] ; int b32 = a [ 5 ] - a [ 3 ] ; int b33 = a [ 8 ] - a [ 6 ] ; if ( b11 == b12 ) { if ( b12 == b13 ) { if ( b21 == b22 ) { if ( b22 == b23 ) { if ( b31 == b32 ) { if ( b32 == b33 ) { ans ++ ; } } } } } } if ( ans == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 , z ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( k >= z && z >= 0 ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 2000001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( min > tmp ) { min = tmp ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . ArrayList ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; boolean flag = true ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( a [ 0 ] [ i ] - a [ 0 ] [ i + 1 ] != a [ 1 ] [ i ] - a [ 1 ] [ i + 1 ] || a [ 1 ] [ i ] - a [ 1 ] [ i + 1 ] != a [ 2 ] [ i ] - a [ 2 ] [ i + 1 ] ) ) flag = false ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( a [ i ] [ 0 ] - a [ i + 1 ] [ 0 ] != a [ i ] [ 1 ] - a [ i + 1 ] [ 1 ] || a [ i ] [ 1 ] - a [ i + 1 ] [ 1 ] != a [ i ] [ 2 ] - a [ i + 1 ] [ 2 ] ) ) flag = false ; } if ( flag ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { private static PrintWriter out ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) -> out . close ( ) ) ) ; try { main . run ( args ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private void run ( String [ ] arguments ) throws Exception { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int rest = S - x - y ; if ( rest >= 0 && rest <= K ) { count ++ ; } } } out . println ( count ) ; out . close ( ) ; } private class MyScanner { BufferedReader br ; StringTokenizer st ; MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int max = 999999999 ; long sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int now = sc . nextInt ( ) ; if ( now < max ) { max = now ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int com = s - ( i + j ) ; if ( com >= 0 && k >= com ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { static final int SIZE = 3 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ SIZE ] [ SIZE ] ; for ( int i = 0 ; i < SIZE ; ++ i ) { for ( int j = 0 ; j < SIZE ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( solve ( c ) ? " Yes " : " No " ) ; sc . close ( ) ; } static boolean solve ( int [ ] [ ] c ) { return IntStream . range ( 0 , SIZE ) . map ( i -> c [ i ] [ 1 ] - c [ i ] [ 0 ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( i -> c [ i ] [ 2 ] - c [ i ] [ 1 ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( j -> c [ 1 ] [ j ] - c [ 0 ] [ j ] ) . distinct ( ) . count ( ) == 1 && IntStream . range ( 0 , SIZE ) . map ( j -> c [ 2 ] [ j ] - c [ 1 ] [ j ] ) . distinct ( ) . count ( ) == 1 ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean isYes = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { isYes = false ; } } } System . out . println ( isYes ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 , a2 , a3 , b1 , b2 , b3 ; boolean fans = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { boolean ans = true ; a1 = i ; b1 = c [ 0 ] [ 0 ] - i ; b2 = c [ 1 ] [ 0 ] - a1 ; b3 = c [ 2 ] [ 0 ] - a1 ; a2 = c [ 0 ] [ 1 ] - b1 ; a3 = c [ 0 ] [ 2 ] - b1 ; if ( a1 < 0 || b1 < 0 || a2 < 0 || a3 < 0 || b2 < 0 || b3 < 0 ) ans = false ; if ( b2 + a2 != c [ 1 ] [ 1 ] ) ans = false ; if ( b2 + a3 != c [ 1 ] [ 2 ] ) ans = false ; if ( b3 + a2 != c [ 2 ] [ 1 ] ) ans = false ; if ( b3 + a3 != c [ 2 ] [ 2 ] ) ans = false ; if ( ans ) fans = true ; } if ( fans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && s - x - y >= 0 ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int l = s - ( i + j ) ; if ( l >= 0 && l <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < list . length ; i ++ ) { list [ i ] = sc . nextInt ( ) ; } int cnt = 1 ; int min = list [ 0 ] ; for ( int i = 1 ; i < list . length ; i ++ ) { if ( min >= list [ i ] ) { cnt ++ ; min = list [ i ] ; } } System . out . println ( cnt ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { TakashiInfo solver = new TakashiInfo ( ) ; solver . readInput ( ) ; solver . solve ( ) ; solver . writeOutput ( ) ; } static class TakashiInfo { private int map [ ] [ ] = new int [ 3 ] [ 3 ] ; private Scanner scanner ; private String output ; public TakashiInfo ( ) { scanner = new Scanner ( System . in ) ; } public void readInput ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = Integer . parseInt ( scanner . next ( ) ) ; } } } public void solve ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { map [ i ] [ j ] -= map [ i ] [ 0 ] ; } } output = ( map [ 0 ] [ 1 ] == map [ 1 ] [ 1 ] && map [ 1 ] [ 1 ] == map [ 2 ] [ 1 ] && map [ 0 ] [ 2 ] == map [ 1 ] [ 2 ] && map [ 1 ] [ 2 ] == map [ 2 ] [ 2 ] ) ? " Yes " : " No " ; } public void writeOutput ( ) { System . out . println ( output ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int max = 999999 ; int tmp ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tmp = sc . nextInt ( ) ; if ( tmp < max ) { max = tmp ; c ++ ; } } System . out . println ( c ) ; return ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int w = 0 ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( w = 0 ; w <= 100 ; w ++ ) { a [ 0 ] = w ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( b [ i ] < 0 ) { System . out . println ( " No " ) ; return ; } } int aa [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { aa [ i ] [ j ] = c [ i ] [ j ] - b [ j ] ; } } if ( aa [ 1 ] [ 0 ] != aa [ 1 ] [ 1 ] || aa [ 1 ] [ 0 ] != aa [ 1 ] [ 2 ] || aa [ 2 ] [ 0 ] != aa [ 2 ] [ 1 ] || aa [ 2 ] [ 0 ] != aa [ 2 ] [ 2 ] ) { continue ; } System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { ArrayList < Integer > [ ] graph ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long ans = a [ 0 ] - 1 ; int max = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max + 1 ) max = Math . max ( max , a [ i ] ) ; else { ans += ( a [ i ] - 1 ) / ( max + 1 ) ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int min = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int t = sc . nextInt ( ) ; a [ i ] = t ; if ( t <= min ) { min = t ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int mini = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { mini = p [ i ] ; } else { mini = Math . min ( mini , p [ i ] ) ; } if ( mini < p [ i ] ) { count ++ ; } } System . out . println ( n - count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { try ( Scanner in = new Scanner ( System . in ) ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( ! ( Z >= 0 && Z <= K ) ) { continue ; } count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M [ ] = new int [ N ] ; int s = 0 ; for ( int i = 0 ; i < N ; i ++ ) { M [ i ] = sc . nextInt ( ) ; s = s + 1 ; if ( M [ i ] == 1 ) { break ; } } int x = 0 ; int L = M [ 0 ] ; for ( int j = 0 ; j < s ; j ++ ) { L = Math . min ( M [ j ] , L ) ; if ( L == M [ j ] ) { x = x + 1 ; } else { x = x ; } } System . out . println ( x ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int k = s . nextInt ( ) ; int l = s . nextInt ( ) ; int i = 0 ; int j = 0 ; int m = 15 ; int count = 0 ; int ans = 0 ; int q = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { q = i + j ; m = l - q ; if ( m >= 0 && 0 <= i && i <= k && j <= k && m <= k ) { count ++ ; } else { } } j = 0 ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) , temp = t , counter = 0 ; for ( int count = 0 ; count < t ; count ++ ) { int x = scan . nextInt ( ) ; if ( x <= temp ) { temp = x ; counter ++ ; } } System . out . println ( counter ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; String check = " Yes " ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = a [ 3 ] - a [ 0 ] ; int x2 = a [ 6 ] - a [ 3 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = " No " ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = " No " ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = " No " ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = " No " ; } System . out . println ( check ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i < s + 1 ; i ++ ) { int x = i ; for ( int j = 0 ; j < s + 1 - i ; j ++ ) { int y = j ; int z = s - x - y ; if ( x > k || y > k || z > k ) { continue ; } result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int sum2 = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] ; int sum3 = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] ; if ( sum1 == sum2 && sum2 == sum3 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long count = 1 ; long l = 0 , x = 0 ; long [ ] array = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } x = array [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( array [ i ] <= x ) { count ++ ; x = array [ i ] ; } } if ( count == 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean F = false ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 && ! F ; a1 ++ ) { for ( int a2 = 0 ; a2 <= 100 && ! F ; a2 ++ ) { for ( int a3 = 0 ; a3 <= 100 && ! F ; a3 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 , b2 = c [ 0 ] [ 1 ] - a1 , b3 = c [ 0 ] [ 2 ] - a1 ; boolean L2 , L3 ; L2 = ( c [ 1 ] [ 0 ] == a2 + b1 && c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) ; L3 = ( c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 2 ] [ 2 ] == a3 + b3 ) ; F = L2 && L3 ; } } } System . out . println ( F ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) b [ i ] = arr [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) a [ i ] = arr [ i ] [ 0 ] - b [ 0 ] ; boolean isGood = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ i ] [ j ] != a [ i ] + b [ j ] ) { isGood = false ; } } } System . out . println ( isGood ? " Yes " : " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ret = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ret ++ ; } } } System . out . println ( ret ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; long count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { break ; } for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y > s ) { break ; } else { if ( x + y + k >= s ) { answer ++ ; } } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int b = sc . nextInt ( ) ; int [ ] hairetu = new int [ b ] ; for ( int i = 0 ; i < hairetu . length ; i ++ ) { int c = sc . nextInt ( ) ; hairetu [ i ] = c ; } int count = 0 ; int champ = hairetu [ 0 ] ; for ( int k = 0 ; k < hairetu . length ; k ++ ) { if ( champ >= hairetu [ k ] ) { champ = hairetu [ k ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveB ( ) ; } private void solveA ( ) { Scanner scanner = null ; String wk = " " ; try { scanner = new Scanner ( System . in ) ; wk = scanner . next ( ) ; System . out . println ( wk . replaceAll ( " , " , " " ) ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numK = 0 ; int s = 0 ; try { scanner = new Scanner ( System . in ) ; numK = scanner . nextInt ( ) ; s = scanner . nextInt ( ) ; int startK = 0 ; if ( numK <= s / 3 ) { startK = numK ; } int res = 0 ; for ( int i = 0 ; i <= numK ; i ++ ) { for ( int j = 0 ; j <= numK ; j ++ ) { if ( s - i - j < 0 ) { break ; } else if ( s - i - j <= numK ) { res ++ ; } } } System . out . println ( res ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( " " ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( in . readLine ( ) ) ; String [ ] str = in . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; int min = 100000 * 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( str [ i ] ) ; min = Math . min ( p [ i ] , min ) ; if ( p [ i ] > min ) count ++ ; } System . out . println ( n - count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; c [ 0 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 0 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 0 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] ; a [ 2 ] = c [ 2 ] [ 1 ] - b [ 1 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { try ( Scanner sc = new Scanner ( System . in ) ) { int X = sc . nextInt ( ) ; long ans = 2 ; for ( int i = X ; i > 0 ; i -- ) { ans = ans * 2 + 2 ; } System . out . println ( ans ) ; } } }
import java . util . Scanner ; import java . io . File ; import java . io . FileNotFoundException ; public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner . nextInt ( ) ; } int min = ( 1 << 30 ) , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; ans += 1 ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int min = 200005 ; for ( int i = 0 ; i < n ; i ++ ) { int val = sc . nextInt ( ) ; if ( val < min ) { ++ count ; min = val ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 = 0 ; int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int nums [ ] = CPUtils . readIntArray ( N , in ) ; int min = nums [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= nums [ i ] ) count ++ ; min = Math . min ( min , nums [ i ] ) ; } out . print ( count ) ; } } static class CPUtils { public static int [ ] readIntArray ( int size , Scanner in ) { int [ ] array = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { array [ i ] = in . nextInt ( ) ; } return array ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int row = 0 ; row < 3 ; row ++ ) { for ( int col = 0 ; col < 3 ; col ++ ) { grid [ row ] [ col ] = sc . nextInt ( ) ; } } int aDiff1 = grid [ 0 ] [ 0 ] - grid [ 0 ] [ 1 ] ; int aDiff2 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 2 ] ; int bDiff1 = grid [ 0 ] [ 0 ] - grid [ 1 ] [ 0 ] ; int bDiff2 = grid [ 1 ] [ 0 ] - grid [ 2 ] [ 0 ] ; if ( ( grid [ 1 ] [ 0 ] - aDiff1 != grid [ 1 ] [ 1 ] ) || ( grid [ 1 ] [ 1 ] - aDiff2 != grid [ 1 ] [ 2 ] ) || ( grid [ 2 ] [ 0 ] - aDiff1 != grid [ 2 ] [ 1 ] ) || ( grid [ 2 ] [ 1 ] - aDiff2 != grid [ 2 ] [ 2 ] ) || ( grid [ 0 ] [ 1 ] - bDiff1 != grid [ 1 ] [ 1 ] ) || ( grid [ 1 ] [ 1 ] - bDiff2 != grid [ 2 ] [ 1 ] ) || ( grid [ 0 ] [ 2 ] - bDiff1 != grid [ 1 ] [ 2 ] ) || ( grid [ 1 ] [ 2 ] - bDiff2 != grid [ 2 ] [ 2 ] ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) sum ++ ; } } System . out . println ( sum ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - ( x + y ) >= 0 && s - ( x + y ) <= k ) { if ( x + y + ( s - ( x + y ) ) == s ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { b [ 0 ] = i ; a [ 0 ] = c [ 0 ] [ 0 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - i ; a [ 2 ] = c [ 2 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] + i ; b [ 2 ] = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] + i ; int d = 0 ; for ( int j = 1 ; j <= 2 ; j ++ ) { for ( int k = 1 ; k <= 2 ; k ++ ) { if ( a [ j ] + b [ k ] != c [ j ] [ k ] ) d ++ ; } } if ( d == 0 ) { out . println ( " Yes " ) ; break ; } else if ( i == 100 ) out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; if ( min > P [ i ] ) { count ++ ; min = P [ i ] ; } } scan . close ( ) ; System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; double dMax = Double . MIN_VALUE ; double dMin = Double . MAX_VALUE ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) list . add ( sc . nextInt ( ) ) ; for ( int i = 0 ; i < n ; ++ i ) { int pi = list . get ( i ) ; if ( i == 0 ) { ++ count ; } else if ( pi <= min ) { ++ count ; } if ( min > pi ) min = pi ; } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { map [ i / 3 ] [ i % 3 ] = sc . nextInt ( ) ; } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = map [ 0 ] [ 0 ] - a1 ; int b2 = map [ 0 ] [ 1 ] - a1 ; int b3 = map [ 0 ] [ 2 ] - a1 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] == a2 + b2 && map [ 1 ] [ 2 ] == a2 + b3 && map [ 2 ] [ 1 ] == a3 + b2 && map [ 2 ] [ 2 ] == a3 + b3 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { ans ++ ; min = a [ i ] ; } } System . out . println ( ans + 1 ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k && i <= t ; i ++ ) { for ( int j = 0 ; j <= k && i + j <= t ; j ++ ) { if ( t - ( i + j ) <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c1 = new int [ 3 ] [ 3 ] ; int [ ] [ ] c2 = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c1 [ i ] [ j ] = in . nextInt ( ) ; c2 [ i ] [ j ] = c1 [ i ] [ j ] ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c1 [ i ] [ 2 ] -= c1 [ i ] [ 0 ] ; c1 [ i ] [ 1 ] -= c1 [ i ] [ 0 ] ; c1 [ i ] [ 0 ] -= c1 [ i ] [ 0 ] ; } for ( int j = 0 ; j < 3 ; j ++ ) { if ( ! ( c1 [ 0 ] [ j ] == c1 [ 1 ] [ j ] && c1 [ 1 ] [ j ] == c1 [ 2 ] [ j ] ) ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c2 [ 2 ] [ i ] -= c2 [ 0 ] [ i ] ; c2 [ 1 ] [ i ] -= c2 [ 0 ] [ i ] ; c2 [ 0 ] [ i ] -= c2 [ 0 ] [ i ] ; } for ( int j = 0 ; j < 3 ; j ++ ) { if ( ! ( c2 [ j ] [ 0 ] == c2 [ j ] [ 1 ] && c2 [ j ] [ 1 ] == c2 [ j ] [ 2 ] ) ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int index = 0 ; int x , y , z ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { index ++ ; } } } System . out . print ( index ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int na = scan . nextInt ( ) ; int [ ] nb = new int [ na ] ; int i = 0 ; for ( i = 0 ; i < na ; i ++ ) { nb [ i ] = scan . nextInt ( ) ; } int sum = 0 ; int rul = 0 ; for ( i = 0 ; i < na ; i ++ ) { if ( i == 0 ) { sum = sum + 1 ; rul = nb [ i ] ; } else if ( rul > nb [ i ] ) { sum = sum + 1 ; rul = nb [ i ] ; } } System . out . println ( sum ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; int b = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; int x = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; int y = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; boolean correct = true ; if ( c [ 1 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a ) correct = false ; if ( c [ 1 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a ) correct = false ; if ( c [ 2 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a + b ) correct = false ; if ( c [ 2 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a + b ) correct = false ; if ( correct ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } scan . close ( ) ; int check = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } System . out . println ( ( check == 0 ) ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; long [ ] map = new long [ 100002 ] ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner kb = new Scanner ( System . in ) ; int n = kb . nextInt ( ) ; int min = kb . nextInt ( ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j = kb . nextInt ( ) ; int b = j ; if ( b > min ) { } else { count += 1 ; min = b ; } } System . out . println ( count ) ; kb . close ( ) ; } }
import java . util . * ; import java . util . stream . Collectors ; import java . io . * ; import java . nio . charset . StandardCharsets ; public class Main { int N ; int [ ] P ; List < Integer > results = new ArrayList < > ( ) ; public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; Main ins = new Main ( in ) ; ins . calc ( ) ; ins . showResult ( ) ; } Main ( BufferedReader in ) throws IOException { N = Integer . parseInt ( in . readLine ( ) ) ; String [ ] tokens = in . readLine ( ) . split ( " " ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = Integer . parseInt ( tokens [ i ] ) ; } } void calc ( ) { results . add ( P [ 0 ] ) ; int prevMin = P [ 0 ] ; for ( int i = 1 ; i < N ; ++ i ) { if ( prevMin >= P [ i ] ) { results . add ( P [ i ] ) ; prevMin = P [ i ] ; } } } void showResult ( ) { System . out . println ( results . size ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int b0b1_1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int b1b2_1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int b0b1_2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int b1b2_2 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int b0b1_3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; int b1b2_3 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; int a0a1_1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ; int a1a2_1 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ; int a0a1_2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; int a1a2_2 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; int a0a1_3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; int a1a2_3 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; String result = " No " ; if ( b0b1_1 == b0b1_2 && b0b1_2 == b0b1_3 ) { if ( b1b2_1 == b1b2_2 && b1b2_2 == b1b2_3 ) { if ( a0a1_1 == a0a1_2 && a0a1_2 == a0a1_3 ) { if ( a1a2_1 == a1a2_2 && a1a2_2 == a1a2_3 ) { result = " Yes " ; } } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int box = sc . nextInt ( ) ; int [ ] list = new int [ box ] ; for ( int i = 0 ; i < list . length ; ++ i ) { list [ i ] = sc . nextInt ( ) ; } int intMin = list [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < list . length ; ++ i ) { if ( intMin > list [ i ] ) { intMin = list [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int min = in . nextInt ( ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = in . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] $ ) { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = s . nextInt ( ) ; } int min = N + 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; for ( int x = 0 ; x <= 100 ; x ++ ) { int a1 = c [ 0 ] [ 0 ] - x ; int a2 = c [ 0 ] [ 1 ] - x ; int a3 = c [ 0 ] [ 2 ] - x ; int b1 = x ; int b2 = c [ 1 ] [ 0 ] - a1 ; int b3 = c [ 2 ] [ 0 ] - a1 ; if ( c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a3 + b2 && c [ 2 ] [ 1 ] == a2 + b3 && c [ 2 ] [ 2 ] == a3 + b3 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int max = Integer . parseInt ( sc . next ( ) ) ; int target = Integer . parseInt ( sc . next ( ) ) ; int cnt = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int total = i + j ; if ( target - total <= max && target - total >= 0 ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= k && i <= s ; i ++ ) { for ( int j = 0 ; j <= k && j <= s - i ; j ++ ) { z = s - i - j ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { int left = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int center = c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ; int right = c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ; if ( left != center || center != right || right != left ) { ans = false ; } } for ( int j = 0 ; j < 2 ; j ++ ) { int up = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ; int center = c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ; int down = c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ; if ( up != down || up != center || down != center ) { ans = false ; } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { atcode ( ) ; } public static void atcode ( ) { String [ ] info = new Scanner ( System . in ) . nextLine ( ) . split ( " " ) ; Integer max = Integer . valueOf ( info [ 0 ] ) ; Integer sum = Integer . valueOf ( info [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= max ; x ++ ) { for ( int y = 0 ; y <= max ; y ++ ) { int z = sum - x - y ; if ( z >= 0 && z <= max ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y >= 0 && S - X - Y <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . List ; import java . util . StringTokenizer ; import java . util . stream . Collectors ; import java . util . stream . IntStream ; public class Main { public static void main ( final String [ ] args ) { final FastScanner scanner = new FastScanner ( System . in ) ; final int n = scanner . nextInt ( ) ; final List < Integer > list = IntStream . range ( 0 , n ) . mapToObj ( i -> scanner . nextInt ( ) ) . collect ( Collectors . toList ( ) ) ; long sum = list . get ( 0 ) - 1 ; long min = 2 ; for ( int i = 1 ; i < n ; i ++ ) { final int value = list . get ( i ) ; if ( value < min ) { continue ; } else if ( value == min ) { min ++ ; continue ; } sum += ( value - 1 ) / min ; } System . out . println ( sum ) ; } private static class FastScanner { private final BufferedReader reader ; private StringTokenizer tokenizer ; FastScanner ( final InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( final IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && k >= s - i - j ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextInt ( ) ; long S = sc . nextInt ( ) ; long res = 0 ; for ( long i = Math . min ( K , S ) ; i >= 0 ; i -- ) { long v = S - i ; if ( v < K ) res += ( v + 1 ) ; else if ( v == K ) res += ( K + 1 ) ; else if ( v <= 2 * K ) { long a = v - K ; res += K - a + 1 ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; for ( int j = 0 ; j < 2 ; j ++ ) { b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; if ( infomation ( a , b , c ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } public static boolean infomation ( int [ ] a , int [ ] b , int [ ] [ ] c ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { return false ; } } } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int P = 0 ; int Q = 0 ; for ( int X = 0 ; X < K + 1 ; X ++ ) { for ( int Y = 0 ; Y < K + 1 ; Y ++ ) { P = S - X - Y ; if ( 0 <= P && P <= K ) { Q ++ ; } } } System . out . println ( Q ) ; } }
/ * package whatever import java . io . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } public static void main ( String [ ] args ) { FastReader ob = new FastReader ( ) ; int n = ob . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ob . nextInt ( ) ; } int count = 1 ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= arr [ i ] ) { count ++ ; min = arr [ i ] ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; final int n = scanner . nextInt ( ) ; int min = 200001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = scanner . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int point = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) { point ++ ; } } } System . out . println ( point ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 9 ; i ++ ) c [ i / 3 ] [ i % 3 ] = sc . nextInt ( ) ; System . out . println ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] && c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] && c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] == c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int lastOne = s - i - j ; if ( lastOne >= 0 && lastOne <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 = Integer . parseInt ( sc . next ( ) ) ; int a2 = Integer . parseInt ( sc . next ( ) ) ; int a3 = Integer . parseInt ( sc . next ( ) ) ; int b1 = Integer . parseInt ( sc . next ( ) ) ; int b2 = Integer . parseInt ( sc . next ( ) ) ; int b3 = Integer . parseInt ( sc . next ( ) ) ; int c1 = Integer . parseInt ( sc . next ( ) ) ; int c2 = Integer . parseInt ( sc . next ( ) ) ; int c3 = Integer . parseInt ( sc . next ( ) ) ; boolean flg = true ; if ( a1 - a2 != b1 - b2 || a1 - a3 != b1 - b3 || a1 - a2 != c1 - c2 || a1 - a3 != c1 - c3 || a1 - b1 != a2 - b2 || a1 - b1 != a3 - b3 || a1 - c1 != a2 - c2 || a1 - c1 != a3 - c3 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b1 = a [ 0 ] ; int b2 = a [ 1 ] ; int b3 = a [ 2 ] ; int a1 = 0 ; int a2 = a [ 3 ] - b1 ; int a3 = a [ 6 ] - b1 ; int check = 0 ; if ( a [ 4 ] != a2 + b2 || a [ 5 ] != a2 + b3 || a [ 7 ] != a3 + b2 || a [ 8 ] != a3 + b3 ) { check ++ ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j == S ) { count ++ ; } else { int s = S - i - j ; if ( s >= 0 && s <= K ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; class Main { public static void main ( final String [ ] args ) throws Exception { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; ) { List < String > inputString = Arrays . asList ( br . readLine ( ) . split ( " " ) ) ; List < Integer > numbers = new ArrayList < > ( ) ; for ( String str : inputString ) { numbers . add ( Integer . parseInt ( str ) ) ; } int ans = 0 ; for ( int i = 0 ; i <= numbers . get ( 0 ) ; i ++ ) { for ( int j = 0 ; j <= numbers . get ( 0 ) ; j ++ ) { int k = numbers . get ( 1 ) - i - j ; if ( 0 <= k && k <= numbers . get ( 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } catch ( IOException | NumberFormatException e ) { e . printStackTrace ( ) ; System . exit ( 0 ) ; } catch ( final Exception e ) { e . printStackTrace ( ) ; System . exit ( 0 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int min = 999999999 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { cnt ++ ; min = P [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int [ ] sMinusZ = new int [ K + 1 ] ; for ( int i = 0 ; i <= K ; i ++ ) { sMinusZ [ i ] = S - i ; } Arrays . sort ( sMinusZ ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( Arrays . binarySearch ( sMinusZ , i + j ) >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int count = 0 ; for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { a [ 0 ] = i ; b [ 0 ] = j ; if ( a [ 0 ] + b [ 0 ] != c [ 0 ] [ 0 ] ) continue ; else { a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; for ( int k = 1 ; k < 3 ; k ++ ) { for ( int l = 1 ; l < 3 ; l ++ ) { if ( c [ k ] [ l ] == a [ k ] + b [ l ] ) { count ++ ; } else { count = 0 ; } } } if ( count == 4 ) { System . out . println ( " Yes " ) ; return ; } count = 0 ; } } } System . out . println ( " No " ) ; sc . close ( ) ; } void debug ( Object ... o ) { System . out . println ( Arrays . deepToString ( o ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < c . length ; i ++ ) { for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < b . length ; i ++ ) { b [ i ] = c [ 0 ] [ i ] ; } for ( int i = 1 ; i < a . length ; i ++ ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } boolean jdg = true ; outer : for ( int i = 0 ; i < c . length ; i ++ ) { for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { if ( ! ( jdg = ( a [ i ] + b [ j ] == c [ i ] [ j ] ) ) ) break outer ; } } System . out . println ( jdg ? " Yes " : " No " ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; int array [ ] = new int [ num ] ; int array_min [ ] = new int [ num ] ; int min = num + 1 ; for ( int i = 0 ; i < num ; i ++ ) { array [ i ] = sc . nextInt ( ) ; if ( min > array [ i ] ) { min = array [ i ] ; } array_min [ i ] = min ; } int count = 0 ; for ( int i = 0 ; i < num ; i ++ ) { if ( array_min [ i ] >= array [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) { if ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) { if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } }
import java . math . BigInteger ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ps = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ps [ i ] = sc . nextInt ( ) ; } int ans = 1 ; int min = ps [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= ps [ i ] ) { ans ++ ; min = ps [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; String [ ] S = sc . nextLine ( ) . split ( " " ) ; int min = 100000000 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int M = Integer . parseInt ( S [ i ] ) ; if ( M <= min ) { min = M ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int num = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) num ++ ; } } System . out . println ( num ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] suuji = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { suuji [ i ] = sc . nextInt ( ) ; } int min = suuji [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > suuji [ i ] ) { min = suuji [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ns [ ] = new int [ n ] ; int min ; int nc = 1 ; boolean edge ; boolean edge2 = true ; for ( int i = 0 ; i < n ; i ++ ) ns [ i ] = sc . nextInt ( ) ; min = ns [ 0 ] ; if ( min != 1 ) { for ( int i = 0 ; i < n && edge2 ; i ++ ) { edge = true ; if ( ns [ i ] == 1 ) { nc ++ ; edge2 = false ; } else if ( min > ns [ i ] ) { nc ++ ; min = ns [ i ] ; } } } System . out . println ( nc ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } boolean F = false ; int A = 0 ; int B = 0 ; int C = 0 ; A = c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] ; B = c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] ; C = c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ( A - i ) % 3 == 0 && ( B - i ) % 3 == 0 && ( C - i ) % 3 == 0 ) { F = true ; } } if ( F ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; int [ ] p = new int [ N ] ; p [ 0 ] = min ; for ( int i = 1 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( min >= p [ i ] ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int array [ ] = new int [ s . length ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = Integer . parseInt ( s [ i ] ) ; } int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] < min ) { count ++ ; min = array [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } int [ ] total = new int [ 6 ] ; total [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; total [ 1 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ; total [ 2 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; total [ 3 ] = c [ 0 ] [ 1 ] + c [ 2 ] [ 0 ] + c [ 1 ] [ 2 ] ; total [ 4 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; total [ 5 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( total [ 0 ] == total [ 1 ] && total [ 1 ] == total [ 2 ] && total [ 2 ] == total [ 3 ] && total [ 3 ] == total [ 4 ] && total [ 4 ] == total [ 5 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; System . out . println ( ( Main . calc ( s . nextInt ( ) , s . nextInt ( ) ) ) ) ; } public static int calc ( int k , int s ) { int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int l = s - i - j ; if ( l >= 0 && l <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] i1 = new int [ 3 ] ; int [ ] i2 = new int [ 3 ] ; int [ ] i3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { i1 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i2 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i3 [ i ] = sc . nextInt ( ) ; } int diff21 = i2 [ 0 ] - i1 [ 0 ] ; int diff31 = i3 [ 0 ] - i1 [ 0 ] ; if ( i2 [ 1 ] - i1 [ 1 ] == diff21 && i2 [ 2 ] - i1 [ 2 ] == diff21 && i3 [ 1 ] - i1 [ 1 ] == diff31 && i3 [ 2 ] - i1 [ 2 ] == diff31 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { if ( s - a - b <= k && s - a - b >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; String [ ] nums = sc . nextLine ( ) . split ( " " ) ; int cont = 1 ; int bump = Integer . parseInt ( nums [ 0 ] ) ; for ( int i = 1 ; i < nums . length ; i ++ ) { if ( Integer . parseInt ( nums [ i ] ) < bump ) { bump = Integer . parseInt ( nums [ i ] ) ; cont ++ ; } } System . out . println ( cont ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { static int [ ] parent ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans = ( ans + 1 ) * 2 ; } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; final int N = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; int pre = N + 1 ; int [ ] ar = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { ar [ i ] = N - i ; } for ( int i = 0 ; i < N ; i ++ ) { int p = Integer . parseInt ( sc . next ( ) ) ; if ( p == 1 ) { ++ ans ; break ; } else if ( p <= ar [ i ] && p < pre ) { ++ ans ; pre = p ; } } out . println ( ans ) ; out . flush ( ) ; } }
import java . math . BigDecimal ; import java . util . * ; import java . util . stream . Collectors ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int a = s - y - x ; if ( a >= 0 && a <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int o = 0 ; int n = sc . nextInt ( ) ; int mini = 2000000 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= mini ) { o ++ ; mini = p ; } } System . out . println ( o ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = Integer . parseInt ( scanner . next ( ) ) ; int S = Integer . parseInt ( scanner . next ( ) ) ; scanner . close ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int nextNum = 0 ; int minNum = Integer . parseInt ( sc . next ( ) ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { nextNum = Integer . parseInt ( sc . next ( ) ) ; if ( nextNum < minNum ) { minNum = nextNum ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ret = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= ( s - i - j ) && ( s - i - j ) <= k ) { ret ++ ; } } } System . out . println ( ret ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { for ( int j = 0 ; j <= a ; j ++ ) { if ( b - i - j <= a && b - i - j >= 0 ) sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr1 = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; arr1 [ i ] = min ; } else { arr1 [ i ] = min ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= arr1 [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int last = s - i - j ; if ( last >= 0 && last <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int pos = c [ i ] [ j ] = s . nextInt ( ) ; max = Math . max ( max , pos ) ; } } System . out . println ( Main . calc ( c , max ) ? " Yes " : " No " ) ; } public static boolean calc ( Integer c [ ] [ ] , int max ) { for ( int a1 = 0 ; a1 <= max && a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; if ( 0 > b1 || b1 > 100 ) { continue ; } for ( int a2 = 0 ; a2 <= max && a2 <= 100 ; a2 ++ ) { int b2 = c [ 1 ] [ 1 ] - a2 ; if ( 0 > b2 || b2 > 100 ) { continue ; } for ( int a3 = 0 ; a3 <= max && a3 <= 100 ; a3 ++ ) { int b3 = c [ 2 ] [ 2 ] - a3 ; if ( 0 > b3 || b3 > 100 ) { continue ; } if ( c [ 0 ] [ 1 ] == a1 + b2 && c [ 0 ] [ 2 ] == a1 + b3 && c [ 1 ] [ 0 ] == a2 + b1 && c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) { return true ; } } } } return false ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] A = new int [ 3 ] ; int [ ] diffe = new int [ 2 ] ; int [ ] diffe_tmp = new int [ 2 ] ; int flag = 0 ; String ans = " null " ; for ( int i = 0 ; i < 3 ; i ++ ) A [ i ] = sc . nextInt ( ) ; diffe [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe [ 1 ] = A [ 1 ] - A [ 2 ] ; for ( int i = 0 ; i <= 1 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) A [ j ] = sc . nextInt ( ) ; diffe_tmp [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe_tmp [ 1 ] = A [ 1 ] - A [ 2 ] ; if ( diffe [ 0 ] != diffe_tmp [ 0 ] || diffe_tmp [ 1 ] != diffe [ 1 ] ) flag = 1 ; } if ( flag == 0 ) ans = " Yes " ; else ans = " No " ; System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final int N = 3 ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] c = new int [ N ] [ N ] ; IntStream . range ( 0 , N ) . forEach ( i -> IntStream . range ( 0 , N ) . forEach ( j -> c [ i ] [ j ] = scanner . nextInt ( ) ) ) ; boolean result = true ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int diff2 = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) != diff1 ) { result = false ; break ; } if ( ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) != diff2 ) { result = false ; break ; } } } System . out . println ( result ? " Yes " : " No " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; long ok = Long . MAX_VALUE / 3 ; long ng = 0 ; while ( ok - ng > 1 ) { long m = ( ok + ng ) / 2 ; if ( f ( m ) > X ) { ok = m ; } else { ng = m ; } } System . out . println ( ok - 1 ) ; } static int f ( long n ) { if ( n <= 2 ) return 0 ; return 1 + f ( ( n - 1 ) / 2 ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] s = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( s [ 0 ] ) ; int S = Integer . parseInt ( s [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k <= K && k >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int l = Math . min ( s , k ) ; int total = 0 ; for ( int i = l ; i >= 0 ; i -- ) { int m = Math . min ( s - i , k ) ; if ( s - i < k ) { total += m + 1 ; } else { total += Math . max ( k - ( s - i - m ) + 1 , 0 ) ; } } System . out . println ( total ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int z = 0 , y = 0 , fin = 0 , a1 = 0 , a2 = 0 ; while ( z < 3 ) { while ( y < 3 ) { c [ z ] [ y ] = stdIn . nextInt ( ) ; y ++ ; } y = 0 ; z ++ ; } z = 1 ; a1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; a2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; while ( z < 3 ) { if ( c [ z ] [ 0 ] - c [ z ] [ 1 ] != a1 ) { fin = 1 ; break ; } if ( c [ z ] [ 1 ] - c [ z ] [ 2 ] != a2 ) { fin = 1 ; break ; } z ++ ; } if ( fin == 1 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; class Main { Scanner sc ; int N ; int [ ] P ; private void calc ( ) { sc = new Scanner ( new BufferedInputStream ( System . in ) ) ; int N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int c = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) c ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( c ) ; } public static void main ( String [ ] args ) { new Main ( ) . calc ( ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextInt ( ) ; long S = sc . nextInt ( ) ; long res = 0 ; for ( long i = Math . min ( K , S ) ; i >= 0 ; i -- ) { long v = S - i ; if ( v < K ) res += ( v + 1 ) ; else if ( v == K ) res += ( K + 1 ) ; else if ( v <= 2 * K ) { long a = v - K ; res += K - a + 1 ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { private static int N ; private static int [ ] P ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int tempMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= tempMin ) { ans ++ ; } tempMin = Math . min ( P [ i ] , tempMin ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { c [ i ] [ k ] = Integer . parseInt ( scan . next ( ) ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { if ( c [ i ] [ k ] != x [ i ] + y [ k ] ) { System . out . println ( " No " ) ; return ; } } } System . out . print ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - ( i + j ) >= 0 ) && ( S - ( i + j ) <= K ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= a [ i ] ) { min = a [ i ] ; count ++ ; } else { } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . * ; import java . io . * ; class Main { void solve ( ) { int k = inint ( ) , s = inint ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( 0 <= z && z <= k ) && x + y + z == s ) count ++ ; } } out . println ( count ) ; } public static Scanner in = new Scanner ( System . in ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; out . flush ( ) ; } public int inint ( ) { return in . nextInt ( ) ; } public long inlong ( ) { return in . nextLong ( ) ; } public String instr ( ) { return in . next ( ) ; } public char inchar ( ) { return in . next ( ) . charAt ( 0 ) ; } public int [ ] inintar ( int num ) { int [ ] a = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { a [ i ] = in . nextInt ( ) ; } return a ; } public char [ ] incharar ( ) { return in . next ( ) . toCharArray ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int P [ ] = new int [ N ] ; int min = N * 2 , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = stdIn . nextInt ( ) ; if ( P [ i ] <= min ) { min = P [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = sc . nextLong ( ) - 1 ; long p = 2 ; for ( int i = 1 ; i < n ; i ++ ) { long a = sc . nextLong ( ) ; if ( a == p ) { p ++ ; } else { long r = ( a % p ) ; if ( r == 0 ) { if ( a > p ) { ans ++ ; a -= ( p + 1 ) ; r = ( a % p ) ; ans += ( ( a - r ) / p ) ; } } else { ans += ( ( a - r ) / p ) ; } } } System . out . println ( ans ) ; } }
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { const inp = input . split ( " " ) ; const sum = parseInt ( inp [ 0 ] , 10 ) + parseInt ( inp [ 1 ] , 10 ) + parseInt ( inp [ 2 ] , 10 ) ; var ans = sum === 17 ? " YES " : " NO " ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const N = input ; var ans = 1 ; var cnt = 0 ; var maxCnt = 0 ; for ( var i = 1 ; i <= N ; i ++ ) { cnt = 0 ; var tmp = i ; while ( true ) { if ( tmp % 2 === 0 ) { cnt = cnt + 1 ; tmp = tmp / 2 ; } else { break ; } } if ( maxCnt < cnt ) { maxCnt = cnt ; ans = i ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function main ( input ) { const inputs = input . split ( ' ' ) . map ( ( x ) => x | 0 ) ; const sum = inputs . reduce ( ( a , b ) => a + b ) ; if ( sum != 17 ) { console . log ( ' NO ' ) ; return ; } let i = inputs . shift ( ) ; while ( i ) { if ( i != 5 && i != 7 ) { console . log ( ' NO ' ) ; return ; } i = inputs . shift ( ) ; } console . log ( ' YES ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) ; let N = inp [ 0 ] * 1 ; let nums = inp [ 1 ] . split ( ' ' ) . map ( x => x * 1 ) ; let ava = Math . round ( nums . reduce ( ( x , a ) => a += x ) / N ) ; let ans = 0 ; for ( let i = 0 ; i < N ; i ++ ) { ans += ( nums [ i ] - ava ) * ( nums [ i ] - ava ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
if ( ! String . prototype . padStart ) { String . prototype . padStart = function padStart ( targetLength , padString ) { targetLength = targetLength >> 0 ; padString = String ( ( typeof padString !== ' undefined ' ? padString : ' ' ) ) ; if ( this . length > targetLength ) { return String ( this ) ; } else { targetLength = targetLength - this . length ; if ( targetLength > padString . length ) { padString += padString . repeat ( targetLength / padString . length ) ; } return padString . slice ( 0 , targetLength ) + String ( this ) ; } } ; } function Main ( input ) { const data = input . split ( " \n " ) const a = data . shift ( ) . split ( " " ) const N = a [ 0 ] const M = a [ 1 ] const pref = [ ] data . forEach ( ( d , i ) => { if ( d . length === 0 ) { return ; } const x = d . split ( " " ) const I = x [ 0 ] const Y = x [ 1 ] var P = pref [ I ] if ( P === undefined ) { pref [ I ] = [ [ i , Y ] ] } else { P . push ( [ i , Y ] ) } } ) const r = [ ] ; pref . forEach ( ( p , pi ) => { if ( ! Array . isArray ( p ) ) { return ; } p . sort ( ( a , b ) => { const a1 = parseInt ( a [ 1 ] ) , b1 = parseInt ( b [ 1 ] ) return a1 > b1 ? 1 : a1 === b1 ? 0 : - 1 } ) p . forEach ( ( m , mi ) => { r [ m [ 0 ] ] = ( " " + pi ) . padStart ( 6 , " 0 " ) + ( " " + ( mi + 1 ) ) . padStart ( 6 , " 0 " ) } ) } ) ; console . log ( r . join ( " \n " ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( a ) { return Math . pow ( a , 3 ) ; } ( parseInt ( inputs [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . setEncoding ( " utf8 " ) ; process . stdin . on ( " data " , input => { const inputArr = input . split ( " " ) ; const A = inputArr [ 0 ] ; const B = inputArr [ 1 ] ; const H = inputArr [ 2 ] ; const M = inputArr [ 3 ] ; const result = getResult ( A , B , H , M ) ; console . log ( result ) ; } ) ; const getResult = ( A , B , H , M ) => { const minuteDegree = ( Math . PI * 2.0 * M ) / 60 ; const hourDegree = Math . PI * 2 * ( H / 12 + M / 60 / 12 ) ; const theta = minuteDegree - hourDegree ; return calcCosinTheorem ( A , B , theta ) ; } ; const calcCosinTheorem = ( A , B , theta ) => { return Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta ) ) ; } ;
' use strict ' function main ( input ) { const n = input . trim ( ) . split ( / \s / ) . map ( str => ~ ~ str ) const deg = Math . abs ( ( 360 * n [ 2 ] / 12 ) + 30 * n [ 3 ] / 60 - ( 360 * n [ 3 ] / 60 ) ) % 360 console . log ( Math . sqrt ( n [ 0 ] ** 2 + n [ 1 ] ** 2 - 2 * n [ 0 ] * n [ 1 ] * Math . cos ( deg * Math . PI / 180 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var a = ~ ~ input [ 0 ] ; var b = ~ ~ input [ 1 ] ; var c = ~ ~ input [ 2 ] ; var d = ~ ~ input [ 3 ] ; var e = ~ ~ input [ 4 ] ; var k = ~ ~ input [ 5 ] ; var AtCoder = function ( a , b , c , d , e , k ) { this . antena = [ a , b , c , d , e ] ; this . distance = k ; } ; AtCoder . prototype = { procedure : function ( ) { for ( var antena1 of this . antena ) { for ( var antena2 of this . antena ) { if ( Math . abs ( antena1 - antena2 ) > this . distance ) return false ; } } return true ; } } var atcoder = new AtCoder ( a , b , c , d , e , k ) ; if ( atcoder . procedure ( ) == true ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var num = parseInt ( chunk ) ; console . log ( num * num * num ) ; } ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) let size = input . shift ( ) . split ( ' ' ) . map ( val => Number ( val ) ) let sizeDiff = size [ 0 ] - size [ 1 ] let N = [ ] let M = [ ] let result = 0 for ( let i = 0 ; i < size [ 0 ] ; i ++ ) { N . push ( input . shift ( ) ) } for ( let i = 0 ; i < size [ 1 ] ; i ++ ) { M . push ( input . shift ( ) ) } for ( let i = 0 ; i <= sizeDiff ; i ++ ) { while ( result !== - 1 ) { result = N [ i ] . indexOf ( M [ 0 ] , result ) if ( result !== - 1 ) { let check = true for ( let j = 1 ; j < size [ 1 ] ; j ++ ) { if ( check ) { check = N [ i + j ] . indexOf ( M [ j ] , result ) === result } } if ( check ) { console . log ( ' Yes ' ) return } } if ( result !== - 1 ) result ++ } result = 0 } console . log ( ' No ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var line1 = input [ 0 ] . split ( ' ' ) ; var n = parseInt ( line1 [ 0 ] ) ; var p = parseInt ( line1 [ 1 ] ) ; var ans = 1 ; var arr = primeFactorization ( p ) ; for ( var i = 0 ; i < arr . length ; i ++ ) { var r = arr [ i ] . r ; while ( n <= r ) { ans *= arr [ i ] . num ; r = r - n ; } } console . log ( ans ) ; } function parse ( line ) { var ret = [ ] ; var arr = line . split ( ' ' ) ; for ( var i = 0 ; i < arr . length ; i ++ ) { ret . push ( parseInt ( arr [ i ] ) ) ; } return ret ; } function primeFactorization ( n ) { var s = Math . floor ( Math . sqrt ( n ) ) ; var r = 0 ; var result = [ ] ; for ( var i = 2 ; i <= s ; i ++ ) { if ( ( n % i ) == 0 ) { r = 0 ; do { r ++ ; n = n / i ; } while ( ( n % i ) == 0 ) ; result . push ( { num : i , r : r } ) ; } } if ( n > s ) { result . push ( { num : n , r : 1 } ) ; } return result ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
' use strict ' function Main ( input ) { const tmp = input . trim ( ) . split ( ' \n ' ) ; const NM = tmp [ 0 ] . split ( ' ' ) ; const N = Number ( NM [ 0 ] ) const M = Number ( NM [ 1 ] ) const AB = tmp . splice ( 1 ) ; const A = AB . slice ( 0 , N ) ; const B = AB . slice ( - M ) ; const joinB = B . join ( ' ' ) ; for ( let y = 0 ; y < ( N - M + 1 ) ; y ++ ) { for ( let x = 0 ; x < ( N - M + 1 ) ; x ++ ) { if ( A [ y ] [ x ] === joinB [ 0 ] ) { let joinA = ' ' ; for ( let i = 0 ; i < M ; i ++ ) { joinA += A [ y + i ] . slice ( x , x + M ) } if ( joinA === joinB ) { console . log ( ' Yes ' ) ; return ; } } } } console . log ( ' No ' ) ; return ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; var n = 0 ; var obj = { } ; var abc = [ ] ; for ( var i = 0 ; i < Arr . length ; i ++ ) { if ( n == 0 ) { if ( i != 0 ) { abc . sort ( function ( a , b ) { return a - b ; } ) ; for ( var k in obj ) { if ( obj [ k ] == abc [ 0 ] ) { console . log ( k ) ; break ; } } } if ( Arr [ i ] == 0 ) break ; n = Arr [ i ] ; abc = [ ] ; obj = { } ; } else { n -- ; var arr = Arr [ i ] . split ( " " ) . map ( Number ) ; var h = arr [ 1 ] / 100 ; var bmi = Math . abs ( 22 - arr [ 2 ] / ( h * h ) ) ; abc . push ( bmi ) ; obj [ arr [ 0 ] ] = bmi ; } }
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const tasks = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) . sort ( ( a , b ) => a - b ) console . log ( Math . abs ( tasks [ 0 ] - tasks [ 1 ] ) + Math . abs ( tasks [ 1 ] - tasks [ 2 ] ) ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout , terminal : false } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const [ A , B , H , M ] = lines [ 0 ] . split ( " " ) . map ( e => parseFloat ( e ) ) ; const degB = M * 6.0 ; const degA = H * 30.0 + 30.0 * M / 60 ; const deg1 = Math . abs ( degA - degB ) ; const deg = deg1 > 180 ? 360 - deg1 : deg1 ; const rad = deg * Math . PI / 180 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( rad ) ) ; console . log ( ans ) ; } ) ;
var lines = [ ] ; var result = " " ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var s = lines [ 0 ] . split ( " " ) ; var K = Number ( lines [ 1 ] ) ; var len = s . length ; var s_code = Array ( len ) . fill ( 0 ) for ( var i = 0 ; i < len ; i ++ ) { s_code [ i ] = s [ i ] . charCodeAt ( 0 ) ; } for ( var i = 0 ; i < len ; i ++ ) { if ( i === len - 1 ) { K = K % 26 ; s_code [ i ] + K > " z " . charCodeAt ( 0 ) ? s_code [ i ] = 97 + s_code [ i ] + K - " z " . charCodeAt ( 0 ) - 1 : s_code [ i ] += K ; } else { if ( " z " . charCodeAt ( 0 ) - s_code [ i ] + 1 <= K && s_code [ i ] !== " a " . charCodeAt ( 0 ) ) { K -= " z " . charCodeAt ( 0 ) - s_code [ i ] + 1 ; s_code [ i ] = " a " . charCodeAt ( 0 ) ; } } if ( K <= 0 ) { break } ; } for ( var i = 0 ; i < len ; i ++ ) { result += String . fromCharCode ( s_code [ i ] ) ; } console . log ( result ) ; } ) ;
' use strict ' function main ( s ) { const nums = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const ans = Math . max ( ... nums ) - Math . min ( ... nums ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const input_lines = input . split ( ' \n ' ) ; input_lines . forEach ( line => { if ( line . length > 0 ) { const inputs = line . split ( ' ' ) ; if ( ' 5,5,7 ' === inputs . sort ( ) . toString ( ) ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = input . trim ( ) - 0 ; var time = 12 * 60 / 360 * x ; var h = ( time - time % 60 ) / 60 ; var m = time % 60 ; console . log ( h + " " + m ) ;
function main ( i ) { i = i . split ( ' \n ' ) ; var a = Number ( i [ 0 ] ) , b = Number ( i [ 1 ] ) , c = Number ( i [ 2 ] ) , d = Number ( i [ 3 ] ) , e = Number ( i [ 4 ] ) , k = Number ( i [ 5 ] ) ; if ( k >= e - a ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = [ ] ; for ( var f = 0 ; f <= 5 ; f ++ ) { var r = parseInt ( input [ f ] , 10 ) ; a [ f ] = r ; } var ans = a [ 4 ] - a [ 0 ] ; if ( ans > a [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . toString ( ) . split ( ' \n ' ) ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
a = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ` \n ` ; console . log ( Math . pow ( + a [ 0 ] , 3 ) ) ;
" use strict " ; const main = arg => { const N = arg . split ( " \n " ) [ 0 ] ; let list = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; console . log ( Math . max ( ... list . filter ( n => n <= N ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( 6 <= A && A <= 12 ) { console . log ( B / 2 ) ; } else { console . log ( ' 0 ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
" use strict " const Main = ( nyuuryoku ) => { const Array = nyuuryoku . split ( " \n " ) const N = Array [ 0 ] - 0 const colorArray = Array [ 1 ] . split ( " " ) const isyellow = colorArray . some ( ( ele => { return ele == " Y " } ) ) console . log ( isyellow ? " Four " : " Three " ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const inputNum = parseInt ( input ) console . log ( inputNum * inputNum * inputNum )
function Main ( input ) { input = input . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => b > a ) ; console . log ( input [ 0 ] == 7 && input [ 1 ] == 5 && input [ 2 ] == 5 ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { a = input . split ( ' ' ) [ 0 ] * 1 b = input . split ( ' ' ) [ 1 ] * 1 ans = 0 if ( a >= 13 ) { ans = b } else if ( a >= 6 ) { ans = b / 2 } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( s ) { const n = Number ( s ) ; let i = 0 ; while ( Math . pow ( 2 , i ) <= n ) { i += 1 ; } const ans = Math . pow ( 2 , i - 1 ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var fs = require ( ' fs ' ) var contents = fs . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ; var cubic = function ( s ) { var x = parseInt ( s ) ; return x * x * x ; } console . log ( cubic ( contents ) )
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const N = parseInt ( args [ 0 ] [ 0 ] , 10 ) const K = parseInt ( args [ 0 ] [ 1 ] , 10 ) console . log ( N % K ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code , result = " " ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; result += String . fromCharCode ( code ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; result += " a " ; } else { result += s [ j ] ; } } } console . log ( result ) ;
" use strict " function Main ( input ) { let sum = 0 ; input = input . split ( " " ) . map ( e => parseInt ( e ) ) . sort ( ( a , b ) => a < b ? 1 : - 1 ) ; let topvalue = input . shift ( ) ; for ( let val of input ) { sum += topvalue - val ; topvalue = val ; } console . log ( sum ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " \n " ) ; var a = parseInt ( tmp [ 0 ] ) ; var b = parseInt ( tmp [ 1 ] ) ; var c = parseInt ( tmp [ 2 ] ) ; var d = parseInt ( tmp [ 3 ] ) ; var e = parseInt ( tmp [ 4 ] ) ; var k = parseInt ( tmp [ 5 ] ) ; var err = 0 ; if ( b - a > k ) { err ++ ; } if ( c - a > k ) { err ++ ; } if ( d - a > k ) { err ++ ; } if ( e - a > k ) { err ++ ; } if ( c - b > k ) { err ++ ; } if ( d - b > k ) { err ++ ; } if ( e - b > k ) { err ++ ; } if ( d - c > k ) { err ++ ; } if ( e - c > k ) { err ++ ; } if ( e - d > k ) { err ++ ; } if ( err >= 1 ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var output = " Yay! " for ( var i = 0 ; i < input . length - 1 ; i ++ ) { for ( var j = 0 ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > input [ 5 ] ) { output = " :( " ; } } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; console . log ( input [ 0 ] >= 13 ? input [ 1 ] : input [ 0 ] >= 6 ? input [ 1 ] / 2 : 0 ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const n = Number ( input ) ; console . log ( n * n * n ) ;
function Main ( input ) { abcde = input . split ( ' \n ' ) ; a = parseInt ( abcde [ 0 ] . trim ( ) ) ; e = parseInt ( abcde [ 4 ] . trim ( ) ) ; k = parseInt ( abcde [ 5 ] . trim ( ) ) ; console . log ( ( e - a ) > k ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
function Main ( input ) { var N , X ; var ans1 = [ ] ; input = input . split ( " \n " ) ; N = parseInt ( input [ 0 ] , 10 ) ; X = input [ 1 ] . split ( " " ) . map ( inp => parseInt ( inp , 10 ) ) ; for ( var i = Math . min ( ... X ) ; i <= Math . max ( ... X ) ; i ++ ) { var ret = 0 ; for ( var j of X ) { ret += Math . pow ( i - j , 2 ) ; } ans1 . push ( ret ) ; } console . log ( Math . min ( ... ans1 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var age = input [ 0 ] ; var few = input [ 1 ] ; if ( age < 6 ) { console . log ( 0 ) ; } else if ( age > 12 ) { console . log ( few ) ; } else { console . log ( few / 2 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var c = lines . map ( i => i . split ( " " ) . map ( i => Number ( i ) ) ) ; for ( var a1 = 0 ; a1 <= 100 ; a1 ++ ) { var b1 = c [ 0 ] [ 0 ] - a1 var b2 = c [ 1 ] [ 0 ] - a1 var b3 = c [ 2 ] [ 0 ] - a1 for ( var a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) { continue } if ( a2 + b2 !== c [ 1 ] [ 1 ] ) { continue } if ( a2 + b3 !== c [ 2 ] [ 1 ] ) { continue } for ( var a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) { continue } if ( a3 + b2 !== c [ 1 ] [ 2 ] ) { continue } if ( a3 + b3 !== c [ 2 ] [ 2 ] ) { continue } console . log ( " Yes " ) ; return ( 0 ) } } } console . log ( " No " ) } ) ;
function main ( arg ) { arg = arg . split ( " \n " ) . map ( Number ) var k = arg [ 5 ] var data = [ arg [ 0 ] , arg [ 1 ] , arg [ 2 ] , arg [ 3 ] , arg [ 4 ] ] var flag = true for ( var i = 0 ; i < data . length ; i ++ ) { for ( var j = i + 1 ; j < data . length ; j ++ ) { var ans = Math . abs ( data [ j ] - data [ i ] ) if ( ans > k ) { flag = false } } } if ( flag ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) N = l . shift ( ) * 1 M = l . shift ( ) * 1 a = [ ] b = [ ] for ( i = 0 ; i < N ; i ++ ) { a [ i ] = inp [ i ] . split ( ' ' ) } for ( i = 0 ; i < M ; i ++ ) { b [ i ] = inp [ i + N ] . split ( ' ' ) } f = 0 for ( i = 0 ; i <= N - M ; i ++ ) { for ( j = 0 ; j <= N - M ; j ++ ) { g = 1 for ( k = 0 ; k < M ; k ++ ) { for ( l = 0 ; l < M ; l ++ ) { if ( a [ i + k ] [ j + l ] != b [ k ] [ l ] ) { g = 0 break ; } } if ( ! g ) { break ; } } if ( g ) { f = 1 break ; } } if ( g ) { f = 1 break ; } } console . log ( f ? ' Yes ' : ' No ' )
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( ( input ) => Number ( input ) ) ; var k = input [ 5 ] ; for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( input [ j ] - input [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { lines = input . split ( ' \n ' ) N = lines [ 0 ] . split ( ' ' ) [ 0 ] * 1 D = lines [ 0 ] . split ( ' ' ) [ 1 ] * 1 lines . shift ( ) ans = 0 lines = lines . map ( ( l ) => { return l . split ( ' ' ) } ) for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { t = 0 for ( k = 0 ; k < D ; k ++ ) { t += ( lines [ i ] [ k ] - lines [ j ] [ k ] ) * ( lines [ i ] [ k ] - lines [ j ] [ k ] ) } r = Math . sqrt ( t ) if ( r == parseInt ( r ) ) { ans ++ } } } console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] ; var A = a . split ( " " ) ; var min = A [ 0 ] ; var max = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { min = Math . min ( min , A [ i ] ) ; } for ( i = 0 ; i < N ; i ++ ) { max = Math . max ( max , A [ i ] ) ; } var ans = max - min ; console . log ( ans ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' ' ) ; var x = 0 ; x = lines [ 0 ] ; console . log ( x * x * x ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var arr = [ ] ; var rows = input . split ( " " ) ; rows = rows . sort ( ) ; if ( rows [ 0 ] == 5 && rows [ 1 ] == 5 && rows [ 2 ] == 7 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const A = parseInt ( args [ 0 ] , 10 ) ; const B = parseInt ( args [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function main ( arg ) { var data = arg . trim ( ) . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) var N = data . length data = data . sort ( ( a , b ) => b - a ) var sum = 0 for ( var i = 0 ; i < data . length ; i ++ ) { sum += data [ i ] } var tmp = Math . floor ( sum / N ) console . log ( Math . min ( calc ( data , tmp ) , calc ( data , tmp + 1 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function calc ( data , p ) { var sum = 0 for ( var i = 0 ; i < data . length ; i ++ ) { sum += Math . pow ( ( data [ i ] - p ) , 2 ) } return sum }
function main ( a ) { console . log ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ) ;
function main ( lines ) { const phrases = na ( ) ; let cnt5 = cnt7 = 0 ; phrases . forEach ( n => { if ( n == 5 ) cnt5 ++ ; if ( n == 7 ) cnt7 ++ ; } ) const ans = cnt5 == 2 && cnt7 == 1 ? ' YES ' : ' NO ' ; return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' ; function Main ( is ) { const i = is . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) ; let code , lastLetter ; for ( let i = 0 ; i < s . length ; i ++ ) { code = s [ i ] . charCodeAt ( 0 ) ; if ( s . length - 1 == i ) { code += p % 26 ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } lastLetter = String . fromCharCode ( code ) ; s = s . slice ( 0 , i ) + lastLetter + s . slice ( i + 1 ) ; } else { if ( ( 27 - ( code - 97 + 1 ) ) <= p && ! ( s [ i ] == " a " ) ) { p = p - ( 27 - ( code - 97 + 1 ) ) ; s = s . slice ( 0 , i ) + " a " + s . slice ( i + 1 ) ; } } } console . log ( s ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function main ( input ) { var res = 0 ; input = input . split ( ' ' ) ; const max = parseInt ( input [ 0 ] ) ; const total = parseInt ( input [ 1 ] ) ; for ( var X = 0 ; X <= max ; X ++ ) { for ( var Y = 0 ; Y <= max ; Y ++ ) { var Z = ( total - parseInt ( X ) - parseInt ( Y ) ) ; if ( 0 <= Z && Z <= max ) { res ++ ; } } } console . log ( res ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( / \s / g ) . map ( function ( num ) { return parseInt ( num ) } ) ; var result = Math . min ( Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) + Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) , Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) + Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) , Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) + Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) ) console . log ( ' %s ' , result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var arr = input [ 1 ] . split ( " " ) ; var flag = false ; arr . forEach ( function ( val ) { if ( val == " Y " ) flag = true ; } ) ; console . log ( flag ? " Four " : " Three " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) . map ( i => parseInt ( i , 10 ) ) ; var result = ( input [ 4 ] - input [ 0 ] > input [ 5 ] ) ? ' :( ' : ' Yay! ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi ++ ) { for ( let yi = 0 ; yi <= k ; yi ++ ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( let i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var testValue = i ; while ( testValue >= 2 && testValue % 2 == 0 ) { divideCount += 1 ; testValue /= 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let lines = input . split ( " \n " ) ; let nm = lines . shift ( ) . split ( / \s / ) . map ( ( v ) => v - 0 ) ; let N = nm [ 0 ] , M = nm [ 1 ] ; const MAX_N = 1e5 + 1 ; let V = new Array ( MAX_N ) . fill ( 0 ) . map ( ( ) => [ ] ) ; for ( let m = 0 ; m < M ; m ++ ) { let py = lines . shift ( ) . split ( / \s / ) . map ( ( v ) => v - 0 ) ; V [ py [ 0 ] ] . push ( [ py [ 1 ] , m ] ) ; } const d6 = ( n ) => ( ' 000000 ' + n . toString ( ) ) . slice ( - 6 ) ; const d12 = ( p , y ) => d6 ( p ) + d6 ( y ) ; let ans = new Array ( M ) ; for ( let m = 0 ; m < MAX_N ; m ++ ) { V [ m ] . sort ( ( a , b ) => a [ 0 ] - b [ 0 ] ) ; let v = V [ m ] ; for ( let n = 0 ; n < v . length ; n ++ ) { ans [ v [ n ] [ 1 ] ] = d12 ( m , n + 1 ) ; } } for ( let m = 0 ; m < M ; m ++ ) { console . log ( ans [ m ] ) ; } } if ( typeof window == " undefined " ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var five = ( input . match ( / 5 / g ) || [ ] ) . length ; var seven = ( input . match ( / 7 / g ) || [ ] ) . length ; ( five == 2 && seven == 1 ) ? console . log ( " YES " ) : console . log ( " NO " ) ; } var character = " " ; process . stdin . on ( ' data ' , function ( char ) { character += char } ) ; process . stdin . on ( ' end ' , function ( ) { Main ( character ) ; } ) ; process . on ( ' SIGINT ' , function ( ) { Main ( character ) ; process . exit ( 0 ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var inputs = input [ 1 ] . split ( " " ) ; function avg ( args ) { var num = 0 ; for ( var n of args ) { num += Number ( n ) ; } return num / args . length ; } var average = Math . round ( avg ( inputs ) ) ; var useStamina = 0 ; for ( var point of inputs ) { useStamina += Math . pow ( average - point , 2 ) ; } console . log ( useStamina ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const N = input . split ( ' \n ' ) [ 0 ] ; var a = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( function ( e ) { return Number ( e ) ; } ) . sort ( function ( a , b ) { return a - b ; } ) ; ans = a [ N - 1 ] - a [ 0 ] ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( x * x * x ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; function main ( input ) { var N = splitNum ( input ) . slice ( 0 , 4 ) ; N . sort ( ) ; var res = JSON . stringify ( N ) === JSON . stringify ( [ 1 , 4 , 7 , 9 ] ) ; console . log ( res ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function splitNum ( line ) { return line . split ( / \s+ / ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var s = input . trim ( ) ; for ( var i = 0 ; i < s . length - 7 ; i ++ ) { var arr = [ s [ i ] , s [ i + 1 ] , s [ i + 2 ] , s [ i + 3 ] , s [ i + 4 ] , s [ i + 5 ] , s [ i + 6 ] , s [ i + 7 ] ] ; if ( arr . join ( " " ) == " AIZUNYAN " ) { i += 7 ; continue ; } var str = arr . sort ( ) . join ( " " ) ; if ( str == " AADINNUY " ) { s = s . slice ( 0 , i ) + " AIZUNYAN " + s . slice ( i + 8 , s . length ) ; i += 7 ; } } console . log ( s ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( x * x * x ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; let tmp = input [ 0 ] . split ( ' ' ) const [ a , b , h , m ] = tmp let hangle = ( 30 * Number ( h ) + 30 * ( ( m / 60 ) . toFixed ( 15 ) ) ) * Math . PI / 180 let mangle = 6 * Number ( m ) * Math . PI / 180 let ax = Number ( a ) * Math . sin ( hangle ) . toFixed ( 20 ) let ay = Number ( a ) * Math . cos ( hangle ) . toFixed ( 20 ) let bx = Number ( b ) * Math . sin ( mangle ) . toFixed ( 20 ) let by = Number ( b ) * Math . cos ( mangle ) . toFixed ( 20 ) let cx = bx - ax let cy = by - ay let ans = cx * cx + cy * cy console . log ( Math . sqrt ( ans ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function main ( input ) { let arr = input . trim ( ) . split ( ' ' ) . sort ( ) ; if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { const inputList = arg . trim ( ) . split ( " \n " ) ; const input = inputList [ 0 ] . split ( " " ) const A = parseInt ( input [ 0 ] ) ; const B = parseInt ( input [ 1 ] ) ; const H = parseInt ( input [ 2 ] ) ; const M = parseInt ( input [ 3 ] ) ; const angleA = 0.5 * ( ( H * 60 ) + M ) ; const angleB = 6 * M if ( angleA == angleB ) { console . log ( Math . abs ( A - B ) ) ; } else { const difAngle = Math . abs ( angleA - angleB ) ; const radDifAngle = ( difAngle / 360 ) * 2 * Math . PI ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - ( 2 * A * B * Math . cos ( radDifAngle ) ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function rotatePoint2D ( nRadians , nX , nY ) { var nSin = Math . sin ( nRadians ) ; var nCos = Math . cos ( nRadians ) ; var x = nCos * nX - nSin * nY ; var y = nSin * nX + nCos * nY ; return { x : x , y : y } ; } function Main ( input ) { const inputLines = input . split ( " \n " ) ; const line0 = inputLines [ 0 ] ; const line0vars = line0 . split ( " " ) ; const a = parseInt ( line0vars [ 0 ] , 10 ) ; const b = parseInt ( line0vars [ 1 ] , 10 ) ; const h = parseInt ( line0vars [ 2 ] , 10 ) ; const m = parseInt ( line0vars [ 3 ] , 10 ) ; var output ; var aRad = ( h * 30 + m * 0.5 ) * ( Math . PI / 180 ) ; var bRad = m * 6 * ( Math . PI / 180 ) ; var x1 , y1 , x2 , y2 ; resultA = rotatePoint2D ( aRad , 0 , a ) ; resultB = rotatePoint2D ( bRad , 0 , b ) ; x1 = resultA . x ; y1 = resultA . y ; x2 = resultB . x ; y2 = resultB . y ; output = Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) ) ; console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( x * x * x ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { var tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var payed_price = 0 ; if ( a >= 13 ) { payed_price = b ; } else if ( a >= 6 ) { payed_price = b / 2 ; } else { payed_price = 0 ; } console . log ( payed_price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const haiku = [ 5 , 7 , 5 ] ; const inputArr = input . split ( ' ' ) . map ( ( data ) => { return Number ( data ) ; } ) ; let tempArr = inputArr ; for ( let i = 0 ; i < haiku . length ; i ++ ) { const indexOf = tempArr . indexOf ( haiku [ i ] ) ; if ( indexOf >= 0 ) { tempArr . splice ( indexOf , 1 ) ; } } return tempArr . length === 0 ? ' YES ' : ' NO ' ; } console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const A = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const B = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const H = parseInt ( arg [ 0 ] . split ( " " ) [ 2 ] ) ; const M = parseInt ( arg [ 0 ] . split ( " " ) [ 3 ] ) ; let angleA = ( 360 / 12 ) * ( H % 12 ) ; const angleB = ( 360 / 60 ) * M ; angleA += 30 * ( M / 60 ) ; const absAB = Math . abs ( angleA - angleB ) ; const angle = Math . min ( absAB , 360 - absAB ) ; let answer ; answer = ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) ) - ( 2 * A * B ) * ( Math . cos ( angle * ( Math . PI / 180 ) ) ) ; console . log ( Math . sqrt ( answer ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const P = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = P [ 0 ] let count = 1 for ( let i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) )
function Main ( s ) { s = s . split ( " " ) . map ( a => + a ) ; console . log ( Math . max ( ... s ) - Math . min ( ... s ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nmab = arr [ 0 ] . split ( " " ) . map ( Number ) ; var d = arr [ 1 ] . split ( " " ) . map ( Number ) ; var m = nmab [ 1 ] ; var a = nmab [ 2 ] ; var b = nmab [ 3 ] ; var haiki = [ ] ; for ( var i = 0 ; i < d . length ; i ++ ) { if ( d [ i ] >= a ) haiki . push ( d [ i ] ) ; else break ; } if ( d . length - haiki . length < m ) { haiki . reverse ( ) ; var cnt = 0 ; for ( var i = 0 ; i < haiki . length ; i ++ ) { if ( haiki [ i ] <= b ) cnt ++ ; else break ; } console . log ( haiki . length - cnt ) ; } else { console . log ( haiki . length ) ; }
const main = input => { const [ a , b , c , d ] = input . trim ( ) . split ( " " ) . map ( e => Number . parseInt ( e ) ) const h = ( 360 / 12 / 60 ) * ( Math . PI / 180 ) ; const m = ( 360 / 60 ) * ( Math . PI / 180 ) ; const x1 = b * Math . cos ( m * d ) const x2 = a * Math . cos ( h * ( c * 60 + d ) ) const y1 = b * Math . sin ( m * d ) const y2 = a * Math . sin ( h * ( c * 60 + d ) ) return Math . sqrt ( ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 ) } console . log ( main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) )
function main ( input ) { const points = input . slice ( 1 ) . map ( x => x . split ( ' ' ) . map ( Number ) ) ; var sum = 0 ; for ( var i = 0 ; i < points . length ; i ++ ) { for ( var j = i + 1 ; j < points . length ; j ++ ) { var len = length ( sub ( points [ i ] , points [ j ] ) ) ; if ( isInteger ( len ) ) { sum ++ ; } } } console . log ( sum ) ; } const sub = ( p1 , p2 ) => { return p1 . map ( ( x , i ) => x - p2 [ i ] ) ; } ; const length = ( p ) => { return Math . sqrt ( p . map ( x => x * x ) . reduce ( ( acc , x ) => acc + x , 0 ) ) ; } ; const isInteger = ( n ) => { const i = Math . floor ( n ) ; const eps = 0.0000001 ; return n - i < eps ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const n = Number ( input ) ; console . log ( n * n * n ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function setUp ( input ) { input = input . split ( " \n " ) ; a = Number ( input [ 0 ] ) ; b = Number ( input [ 1 ] ) ; c = Number ( input [ 2 ] ) ; d = Number ( input [ 3 ] ) ; e = Number ( input [ 4 ] ) ; k = Number ( input [ 5 ] ) ; list = [ a , b , c , d , e ] ; main ( ) ; } function main ( ) { var falseFlag = false ; for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( Math . abs ( list [ i ] - list [ j ] ) > k ) { falseFlag = true ; } } } console . log ( falseFlag ? ' :( ' : ' Yay! ' ) ; } setUp ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var line = chunk . toString ( ) . split ( ' ' ) ; var x = Number ( line [ 0 ] ) ; var y = Math . pow ( x , 3 ) ; console . log ( y ) ; } ) ;
const zeroPadding = ( num , length ) => { return ( ' 0000000000 ' + num ) . slice ( - length ) ; } ; const Main = ( input ) => { input = input . split ( ' \n ' ) ; input . shift ( ) ; const cities = input . map ( ( line , index ) => { if ( line . length === 0 ) return null ; const lineArray = line . split ( ' ' ) ; const ken = lineArray [ 0 ] ; const year = lineArray [ 1 ] ; return { index : index , ken : ken , year : year , } ; } ) . filter ( ( data ) => { return data ; } ) ; const kenArray = [ ] ; cities . concat ( ) . sort ( ( a , b ) => { return a . year - b . year ; } ) . forEach ( ( city ) => { if ( ! kenArray [ city . ken ] ) kenArray [ city . ken ] = [ ] ; kenArray [ city . ken ] . push ( city ) ; cities [ city . index ] . cityId = zeroPadding ( city . ken , 6 ) + zeroPadding ( kenArray [ city . ken ] . length , 6 ) ; } ) ; cities . forEach ( ( city ) => { console . log ( city . cityId ) ; } ) ; } ; Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
function Main ( input ) { var antena = input . slice ( 0 , 5 ) . map ( i => parseInt ( i , 10 ) ) ; var K = parseInt ( input [ 5 ] , 10 ) ; var result = ' Yay! ' ; for ( var i = 1 ; i < antena . length ; i ++ ) { for ( var j = 0 ; j < i ; j ++ ) { if ( ( antena [ i ] - antena [ j ] ) > K ) { result = ' :( ' ; } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
' use strict ' const Main = ( input ) => { let tmp = input . split ( ' \n ' ) ; let Age = tmp [ 0 ] . split ( ' ' ) . map ( Number ) [ 0 ] ; let Cost = tmp [ 0 ] . split ( ' ' ) . map ( Number ) [ 1 ] ; if ( 6 <= Age && Age <= 12 ) { Cost = Cost / 2 ; } else if ( Age <= 5 ) { Cost = 0 ; } console . log ( Cost ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . forEach ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( lines ) { const input = lines . split ( ' ' ) . map ( Number ) const A = input [ 0 ] const B = input [ 1 ] const H = input [ 2 ] const C = input [ 3 ] const theta = ( 360 ) * H / 12 + 0.5 * C - ( 360 ) * C / 60 const output = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta * Math . PI / 180 ) ) console . log ( output . toFixed ( 9 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; var H = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var M = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; rad_H = ( ( 360 / 12 ) * H + ( ( 360 / 12 ) / 60 ) * M ) * ( Math . PI / 180 ) ; rad_M = ( 360 / 60 ) * M * ( Math . PI / 180 ) ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - 2 * A * B * Math . cos ( rad_H - rad_M ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; let input_string = ' ' ; process . stdin . on ( ' data ' , ( chunk ) => { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , ( ) => { let lines = input_string . split ( ' \n ' ) ; const n = parseInt ( lines [ 0 ] ) ; console . log ( Math . pow ( n , 3 ) ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( lines [ 0 ] ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var tmp = input [ 1 ] . split ( " " ) ; var n = parseInt ( input [ 0 ] , 10 ) ; var ns = new Array ( n ) ; var min = 100000000 ; for ( var k = 0 ; k <= 100 ; k ++ ) { var sum = 0 ; for ( var i = 0 ; i < n ; i ++ ) { ns [ i ] = parseInt ( tmp [ i ] , 10 ) ; sum += Math . pow ( ns [ i ] - k , 2 ) ; } if ( min > sum ) { min = sum ; } } console . log ( min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { let [ H1 , M1 , H2 , M2 , K ] = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) let H1x = H1 * 60 + M1 let H2x = H2 * 60 + M2 console . log ( H2x - H1x - K ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) console . log ( Math . pow ( parseInt ( x , 10 ) , 3 ) )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const lines = input . split ( ' \n ' ) let n = lines [ 0 ] . trim ( ) - 0 let v = lines [ 1 ] . trim ( ) . split ( ' ' ) . map ( Number ) const s = { } const b = { } for ( let i = 0 ; i < n ; i += 2 ) { s [ v [ i ] ] = s [ v [ i ] ] ? s [ v [ i ] ] + 1 : 1 b [ v [ i + 1 ] ] = b [ v [ i + 1 ] ] ? b [ v [ i + 1 ] ] + 1 : 1 } const a1 = [ ] for ( let key in s ) { a1 . push ( [ key , s [ key ] ] ) } const a2 = [ ] for ( let key in b ) { a2 . push ( [ key , b [ key ] ] ) } a1 . sort ( ( a , b ) => b [ 1 ] - a [ 1 ] ) a2 . sort ( ( a , b ) => b [ 1 ] - a [ 1 ] ) let as = 0 if ( a1 [ 0 ] [ 0 ] !== a2 [ 0 ] [ 0 ] ) { as = a1 [ 0 ] [ 1 ] + a2 [ 0 ] [ 1 ] } else { as = Math . max ( a1 [ 0 ] [ 1 ] + ( a2 [ 1 ] ? a2 [ 1 ] [ 1 ] : 0 ) , ( a1 [ 1 ] ? a1 [ 1 ] [ 1 ] : 0 ) + a2 [ 0 ] [ 1 ] ) } console . log ( n - as )
function Main ( input ) { input = input . split ( " " ) ; var K = parseInt ( input [ 0 ] , 10 ) ; var S = parseInt ( input [ 1 ] , 10 ) ; var x ; var y ; var z ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { x = i ; for ( var j = 0 ; j <= K ; j ++ ) { y = j ; z = S - ( x + y ) ; if ( ( z >= 0 ) && ( z <= K ) ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) lines . shift ( ) lines . pop ( ) l = lines . map ( ( x , i ) => { a = x . split ( ' ' ) . map ( x => x * 1 ) a . i = i return a } ) . sort ( ( a , b ) => { return a [ 0 ] == b [ 0 ] ? a [ 1 ] - b [ 1 ] : a [ 0 ] - b [ 0 ] } ) arr = [ ] y = ' ' for ( i = 0 ; i < l . length ; i ++ ) { if ( y != l [ i ] [ 0 ] ) { j = 1 y = l [ i ] [ 0 ] } arr [ l [ i ] . i ] = ( ' 000000 ' + l [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + j ) . slice ( - 6 ) j ++ } console . log ( arr . join ( ' \n ' ) )
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( X ) { return Math . pow ( X , 3 ) ; } ( parseInt ( inputs [ 0 ] ) , 10 ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; for ( const a of arr ) { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , len = X . length , result = 0 , avg = function ( data ) { var sum = 0 ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < len ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var list = input . split ( " \n " ) ; var a = parseInt ( list [ 0 ] , 10 ) ; var e = parseInt ( list [ 4 ] , 10 ) ; var k = parseInt ( list [ 5 ] , 10 ) ; if ( e - a > k ) console . log ( " :( " ) ; else console . log ( " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const numList = input . map ( x => parseInt ( x , 10 ) ) ; const biggestNum = numList [ 4 ] ; const smallestNum = numList [ 0 ] ; const k = numList [ 5 ] ; if ( smallestNum + k < biggestNum ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function main ( stdin ) { const input = stdin . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; let ans ; if ( A < 6 ) { ans = 0 ; } else if ( A <= 12 ) { ans = B / 2 ; } else { ans = B ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( args ) => { const input = args . trim ( ) . split ( ' ' ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; const H = input [ 2 ] ; const M = input [ 3 ] ; const c = ( H / 12.0 + M / ( 12.0 * 60.0 ) - M / 60.0 ) * Math . PI * 2 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - ( 2 * A * B ) * Math . cos ( c ) ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
( function ( stdin ) { var lines = stdin . trim ( ) . split ( ' \n ' ) ; lines . forEach ( function ( line ) { var numbers = line . trim ( ) . split ( ' ' ) . map ( Number ) ; console . log ( numbers [ 0 ] + numbers [ 1 ] ) ; } ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( ) { ' use strict ' ; var lines = [ ] ; require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; process . stdin . on ( ' end ' , function ( ) { main ( lines ) ; } ) ; } ) ( ) ; String . prototype . replaceAt = function ( index , character ) { return this . substr ( 0 , index ) + character + this . substr ( index + character . length ) ; } function main ( lines ) { var input = lines [ 0 ] , numOps = lines [ 1 ] ; for ( var i = 0 ; i < input . length ; i ++ ) { var distToA = ( 123 - input . charCodeAt ( i ) ) % 26 ; if ( numOps >= distToA ) { input = input . replaceAt ( i , ' a ' ) ; numOps -= distToA ; } if ( numOps === 0 ) { break ; } } numOps = numOps % 26 ; input = input . replaceAt ( input . length - 1 , String . fromCharCode ( input . charCodeAt ( input . length - 1 ) + numOps ) ) ; console . log ( input ) ; }
" use strict " ; function main ( input ) { const RANK = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 1 ] ; const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; if ( args [ 0 ] === args [ 1 ] ) console . log ( " Draw " ) ; else console . log ( RANK . indexOf ( args [ 0 ] ) < RANK . indexOf ( args [ 1 ] ) ? " Bob " : " Alice " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' \n ' ) let temp = input [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const N = temp [ 0 ] const M = temp [ 1 ] temp = input . slice ( 1 , M + 1 ) let arr = [ ] let aMap = new Map temp . forEach ( ( v ) => { let tmp = v . split ( ' ' ) . map ( i => parseInt ( i ) ) aMap . set ( tmp [ 1 ] , 0 ) if ( arr [ tmp [ 0 ] ] === undefined ) { arr [ tmp [ 0 ] ] = [ ] } arr [ tmp [ 0 ] ] . push ( tmp [ 1 ] ) } ) arr . forEach ( ( v , i ) => { v . sort ( ( a , b ) => a - b ) v . forEach ( ( num , j ) => { let def = ( ' 000000 ' + i . toString ( 10 ) ) . slice ( - 6 ) + ( ' 000000 ' + ( j + 1 ) . toString ( 10 ) ) . slice ( - 6 ) aMap . set ( num , def ) } ) } ) aMap . forEach ( val => console . log ( val ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function listsGetSortCompare ( type , direction ) { var compareFuncs = { " NUMERIC " : function ( a , b ) { return parseFloat ( a ) - parseFloat ( b ) ; } , " TEXT " : function ( a , b ) { return a . toString ( ) > b . toString ( ) ? 1 : - 1 ; } , " IGNORE_CASE " : function ( a , b ) { return a . toString ( ) . toLowerCase ( ) > b . toString ( ) . toLowerCase ( ) ? 1 : - 1 ; } , } ; var compare = compareFuncs [ type ] ; return function ( a , b ) { return compare ( a , b ) * direction ; } } function main ( input ) { var args = input . split ( ' ' ) ; sorted = args . slice ( ) . sort ( listsGetSortCompare ( " NUMERIC " , - 1 ) ) ; result = 0 ; var i_end = sorted . length - 1 ; var i_inc = 1 ; if ( 1 > i_end ) { i_inc = - i_inc ; } for ( i = 1 ; i_inc >= 0 ? i <= i_end : i >= i_end ; i += i_inc ) { cur = sorted [ ( i - 1 ) ] ; next = sorted [ ( ( i + 1 ) - 1 ) ] ; result = result + Math . abs ( cur - next ) ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function add ( v ) { return v [ 0 ] + v [ 1 ] ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( args ) { var input = args . split ( " " ) ; var K = parseInt ( input [ 0 ] , 10 ) ; var S = parseInt ( input [ 1 ] , 10 ) ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { count ++ ; } } } console . log ( count ) ; }
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var count = 0 ; for ( var x = 0 ; x <= max ; x ++ ) { for ( var y = 0 ; y <= max ; y ++ ) { var z = sum - ( x + y ) ; if ( z >= 0 && z <= max ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( arg ) { arg = arg . trim ( ) . split ( " \n " ) . map ( Number ) var k = arg . pop ( ) var data = arg for ( var i = 0 ; i < data . length ; i ++ ) { for ( var j = i + 1 ; j < data . length ; j ++ ) { var ans = Math . abs ( data [ i ] - data [ j ] ) if ( ans > k ) { console . log ( ' :( ' ) return } } } console . log ( ' Yay! ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] == a [ 1 ] ? " Draw " : ( a [ 0 ] == 1 || ( a [ 1 ] != 1 && a [ 0 ] > a [ 1 ] ) ) ? " Alice " : " Bob " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var main = function main ( input ) { var N = + input for ( var x = 2 ; x < 100 ; x = x * 2 ) { if ( x > N ) break ; } console . log ( x / 2 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' ; function Main ( input ) { let five = input . toString ( ) . split ( ' 5 ' ) . length - 1 ; let seven = input . toString ( ) . split ( ' 7 ' ) . length - 1 ; ( five == 2 && seven == 1 ) ? console . log ( ' YES ' ) : console . log ( ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = ( input ) => { const spi = input . split ( ' \n ' ) ; const [ a , b , h , m ] = spi [ 0 ] . split ( ' ' ) . map ( e => parseInt ( e ) ) ; const sho = h * 30 + m * 0.5 ; const lon = 6 * m ; const kakudo = sho - lon ; const ans = a * a + b * b - 2 * a * b * Math . cos ( Math . PI / 180 * kakudo ) ; console . log ( Math . sqrt ( ans ) ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { const x = Number ( input ) console . log ( x * x * x ) } ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var C = parseInt ( input [ 2 ] , 10 ) ; var five = 2 ; if ( A + B + C != 17 ) { console . log ( " NO " ) ; } else { if ( A == 5 ) { five -- ; } if ( B == 5 ) { five -- ; } if ( C == 5 ) { five -- ; } if ( five == 0 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 == 2 && count7 == 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) process . stdin . setEncoding ( ' utf8 ' ) process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) } )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( n ) { console . log ( ( n == " 5 5 7 " || n == " 5 7 5 " || n == " 7 5 5 " ) ? " YES " : " NO " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( input ) { const NK = input . split ( ' ' ) . map ( x => parseInt ( x ) ) if ( NK [ 1 ] == 1 ) { console . log ( 0 ) ; } else { console . log ( NK [ 0 ] - NK [ 1 ] ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( ( input ) => { const data = input . split ( ' \n ' ) ; const line1 = data [ 0 ] . split ( ' ' ) ; const N = + line1 [ 0 ] ; const D = + line1 [ 1 ] ; const coords = data . slice ( 1 , N + 1 ) . map ( ( line ) => line . replace ( / \s\s / g , ' ' ) . split ( ' ' ) . filter ( Boolean ) . map ( Number ) ) ; console . log ( coords . reduce ( ( total , coord1 , i ) => ( total + coords . slice ( i + 1 ) . reduce ( ( count , coord2 ) => { const d = distance ( coord1 , coord2 , D ) ; const diff = Math . abs ( Math . round ( d ) - d ) ; return diff < 0.0001 ? count + 1 : count } , 0 ) ) , 0 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function distance ( coords1 , coords2 , D ) { const diffs = Array ( D ) . fill ( null ) . map ( ( _ , i ) => ( coords1 [ i ] - coords2 [ i ] ) ) ; var max = Math . max . apply ( null , diffs ) ; if ( max === 0 ) max = 1 ; var sum = 0 ; for ( var i = 0 ; i < D ; i += 1 ) { sum += Math . pow ( diffs [ i ] / max , 2 ) ; } return Math . sqrt ( sum ) * max ; }
function main ( input ) { var inputs = input . trim ( ) . split ( ' \n ' ) ; inputs = inputs [ 0 ] . split ( ' ' ) ; var A = inputs [ 0 ] - 0 ; var B = inputs [ 1 ] - 0 ; var H = inputs [ 2 ] - 0 ; var M = inputs [ 3 ] - 0 ; var minutes = 60 * H + M ; var radA = minutes / 60 * 30 ; var radB = M * 6 ; radB = radB == 0 ? 360 : radB ; if ( radA == radB ) { console . log ( Math . max ( A , B ) ) ; } else if ( radA > radB ) { var rad = ( radA - radB ) * Math . PI / 180 ; var pA = [ A , 0 ] ; var pB = [ B * Math . cos ( rad ) , B * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } else { var rad = ( radB - radA ) * Math . PI / 180 ; var pB = [ B , 0 ] ; var pA = [ A * Math . cos ( rad ) , A * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; C = new Array ( M ) ; P = new Array ( 0 ) ; for ( i = 0 ; i < M ; i ++ ) { tmp = input [ i + 1 ] . split ( " " ) ; Csub = [ parseInt ( tmp [ 0 ] ) , parseInt ( tmp [ 1 ] ) , i ] ; C [ i ] = Csub ; } C . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] || a [ 1 ] - b [ 1 ] ) ) ; for ( i = 0 ; i < M ; i ++ ) { var y = " " ; c = ` ${ C [ i ] [ 0 ] } ` . slice ( - 6 ) ; if ( i == 0 ) { var cnt = 1 ; } else if ( C [ i ] [ 0 ] != C [ i - 1 ] [ 0 ] ) { cnt = 1 ; } else { cnt ++ ; } y = ` ${ cnt } ` . slice ( - 6 ) ; P . push ( [ ` ${ c } ${ y } ` , C [ i ] [ 2 ] ] ) ; } P . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; var ans = " " ; for ( i = 0 ; i < M ; i ++ ) { if ( i != M - 1 ) { ans = ans + P [ i ] [ 0 ] + " \n " ; } else { ans = ans + P [ i ] [ 0 ] ; } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var arr = [ ] var input = input . split ( " " ) var result = 0 in put . forEach ( function ( element ) { arr . push ( parseInt ( element , 10 ) ) } ) delete input arr . sort ( function ( a , b ) { if ( a > b ) { return 1 } else { return - 1 } } ) for ( var i = 1 ; i < arr . length ; i ++ ) { result += arr [ i ] - arr [ i - 1 ] } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function Main ( is ) { const i = is . split ( " \n " ) ; let s = i [ 0 ] ; let p = parseInt ( i [ 1 ] ) ; for ( let i = 0 ; i < s . length ; i ++ ) { let code = s [ i ] . charCodeAt ( 0 ) ; if ( s . length - 1 == i ) { code += p % 26 ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } let lastLetter = String . fromCharCode ( code ) ; s = s . slice ( 0 , i ) + lastLetter + s . slice ( i + 1 ) ; } else { if ( ( 27 - ( code - 97 + 1 ) ) <= p && ! ( s [ i ] == " a " ) ) { p = p - ( 27 - ( code - 97 + 1 ) ) ; s = s . slice ( 0 , i ) + " a " + s . slice ( i + 1 ) ; } } } console . log ( s ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; const A = args [ 0 ] ; const B = args [ 1 ] ; const cards = { 1 : 2 , 2 : 3 , 3 : 4 , 4 : 5 , 5 : 6 , 6 : 7 , 7 : 8 , 8 : 9 , 9 : 10 , 10 : 11 , 11 : 12 , 12 : 13 , 13 : 14 , 1 : 15 } if ( cards [ A ] > cards [ B ] ) { console . log ( ' Alice ' ) ; } else if ( cards [ A ] === cards [ B ] ) { console . log ( ' Draw ' ) ; } else { console . log ( ' Bob ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function main ( input ) { var P = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) ; var min = 2 * Math . pow ( 10 , 5 ) + 1 ; var cnt = 0 ; for ( var p of P ) { p = parseInt ( p ) ; if ( p < min ) { ++ cnt ; min = p ; } } console . log ( cnt ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const tmp = input . trim ( ) . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) if ( tmp [ 4 ] - tmp [ 0 ] <= tmp [ 5 ] ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var n = input ; var ans = 1 ; for ( i = 1 ; i <= n ; i = i * 2 ) { ans = i ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) for ( let i = 0 ; i < input_lines . length ; i ++ ) { if ( input_lines [ i ] == 5 ) { count5 ++ } if ( input_lines [ i ] == 7 ) { count7 ++ } } if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
function cube ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) cube ( input )
const factorization = ( n ) => { let primes = [ ] for ( let i = 2 ; i * i <= n ; i ++ ) { let e = 0 while ( n % i === 0 ) { e ++ n /= i } if ( e ) { primes . push ( i ) } } if ( n > 1 ) { primes . push ( n ) } return primes } const getGCD = ( a , b ) => { if ( b === 0 ) return a else if ( a === 0 ) return b return getGCD ( b , a % b ) } const main = ( arg ) => { const N = Number ( arg . split ( " \n " ) [ 0 ] ) const a = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) const MAX_A = 10 ** 6 + 1 let set = [ ... new Array ( MAX_A ) ] . fill ( 0 ) isPairCoprime = true for ( let i = 0 ; i < N ; i ++ ) { const factors = factorization ( a [ i ] ) for ( let j = 0 ; j < factors . length ; j ++ ) { if ( set [ factors [ j ] ] === 1 ) { isPairCoprime = false } set [ factors [ j ] ] = 1 } } if ( isPairCoprime ) { console . log ( " pairwise coprime " ) return } let gcd = 0 for ( let i = 0 ; i < a . length ; i ++ ) { gcd = getGCD ( gcd , a [ i ] ) } if ( gcd === 1 ) { console . log ( " setwise coprime " ) return } console . log ( " not coprime " ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var y = x . split ( " " , 1 ) ; console . log ( y * y * y ) ;
' use strict ' ; let lines = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) ; const N = + lines [ 0 ] ; if ( N == 1 ) { console . log ( 0 ) ; process . exit ( ) ; } const as = lines [ 1 ] . split ( ' ' ) . sort ( ) ; console . log ( as . pop ( ) - as . shift ( ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = Number ( input [ 0 ] ) ; let An = input [ 1 ] . split ( " " ) . map ( Number ) ; if ( gcd ( An ) !== 1 ) { console . log ( " not coprime " ) ; return ; } let freq = Array ( 1000001 ) . fill ( 0 ) ; for ( let A of An ) { if ( A === 1 ) continue ; freq [ A ] ++ ; if ( freq [ A ] > 1 ) { console . log ( " setwise coprime " ) ; return ; } } for ( let i = 2 ; i <= 1000001 ; i ++ ) { let tmp = 0 ; for ( let j = i ; j <= 1000001 ; j += i ) { tmp += freq [ j ] ; if ( tmp >= 2 ) { console . log ( " setwise coprime " ) ; return ; } } } console . log ( " pairwise coprime " ) ; } function gcd ( arg ) { let f = ( a , b ) => b ? f ( b , a % b ) : a let ans = arg [ 0 ] ; for ( let i = 1 ; i < arg . length ; i ++ ) { ans = f ( ans , arg [ i ] ) ; } return ans ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const BKRT = " \n " ; const SPAC = " " ; const NOSP = " " ; function Main ( input ) { input = [ ] . concat ( ... input . split ( BKRT ) . map ( a => a . split ( SPAC ) ) ) ; const strShift = ( ) => input . shift ( ) ; const intShift = ( ) => ~ ~ input . shift ( ) ; var o = [ intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) ] ; o = o . sort ( ( a , b ) => a - b ) ; return o [ 4 ] - o [ 0 ] <= intShift ( ) ? " Yay! " : " :( " } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const N = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const arrS = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( ( n ) => ( n ) ) ; var ans = 0 ; if ( arrS . indexOf ( " P " ) != - 1 ) { ans ++ } if ( arrS . indexOf ( " W " ) != - 1 ) { ans ++ } if ( arrS . indexOf ( " G " ) != - 1 ) { ans ++ } if ( arrS . indexOf ( " Y " ) != - 1 ) { ans ++ } if ( ans == 3 ) { console . log ( " Three " ) ; } else { console . log ( " Four " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { var tmp = arg . split ( " \n " ) [ 0 ] tmp = tmp . split ( " " ) tmp = tmp . map ( e => Number ( e ) ) tmp . sort ( ) tmp = tmp . join ( " " ) if ( tmp === " 1479 " ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { if ( ( S - ( i + j ) <= K ) && ( S - ( i + j ) >= 0 ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var n = arr . shift ( ) - 0 ; var a = arr . shift ( ) . split ( " " ) . map ( Number ) ; var q = arr . shift ( ) - 0 ; var s = " " ; for ( var i = 0 ; i < q ; i ++ ) { var [ c , b , e ] = arr [ i ] . split ( " " ) . map ( Number ) ; var m = a [ b ] ; if ( c == 0 ) { for ( var j = b ; j < e ; j ++ ) m = Math . min ( m , a [ j ] ) ; } else { for ( var j = b ; j < e ; j ++ ) m = Math . max ( m , a [ j ] ) ; } s += m + " \n " ; } console . log ( s . trim ( ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; if ( A == 1 && B == 1 ) { console . log ( " Draw " ) ; } else if ( A == 1 && B != 1 ) { console . log ( " Alice " ) ; } else if ( A != 1 && B == 1 ) { console . log ( " Bob " ) ; } else if ( A > B ) { console . log ( " Alice " ) ; } else if ( A < B ) { console . log ( " Bob " ) ; } else { console . log ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var k = Number ( inputs [ 0 ] ) ; var s = Number ( inputs [ 1 ] ) ; var cnt = 0 ; for ( var x = 0 ; x <= k ; x ++ ) for ( var y = 0 ; y <= k ; y ++ ) if ( s - ( x + y ) >= 0 && s - ( x + y ) <= k ) cnt ++ ; console . log ( cnt ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] ) ; const p = input [ 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; const mins = [ ] ; mins [ 0 ] = p [ 0 ] ; let ans = 1 ; for ( let i = 1 ; i < n ; i ++ ) { mins [ i ] = mins [ i - 1 ] > p [ i ] ? p [ i ] : mins [ i - 1 ] ; if ( mins [ i ] == p [ i ] ) ans ++ ; } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function Main ( input ) { input = input . replace ( / \n / g , ' ' ) ; input = input . split ( " " ) ; var A = Number ( input [ 0 ] ) ; var B = Number ( input [ 1 ] ) ; var C = Number ( input [ 2 ] ) ; var D = Number ( input [ 3 ] ) ; var E = Number ( input [ 4 ] ) ; if ( A > C ) { C += 24 ; } var a = A * 60 + B ; var b = C * 60 + D ; console . log ( b - a - E ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; const d = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; console . log ( Math . max . apply ( null , [ a * b , c * d ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
" use strict " ; const main = arg => { var lines = arg . split ( ' \n ' ) ; var firstLine = lines . shift ( ) . split ( ' ' ) . map ( function ( n ) { return + n ; } ) ; var H1 = firstLine [ 0 ] * 60 ; var first = H1 + firstLine [ 1 ] ; var H2 = firstLine [ 2 ] * 60 ; var Second = H2 + firstLine [ 3 ] ; var K = firstLine [ 4 ] ; if ( first < Second ) { console . log ( Second - first - K ) ; } else { var today = 3600 - first ; console . log ( Second + today - K ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var ans = 0 ; var maxover3 = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= maxover3 ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( k >= j && k <= max ) { if ( i === j && i === k ) { ans ++ ; } else if ( i === j || i === k || k === j ) { ans += 3 ; } else { ans += 6 ; } } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const s = input . trim ( ) . split ( ' \n ' ) [ 1 ] . split ( ' ' ) let cnt = 0 for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] === ' Y ' ) cnt ++ } if ( cnt > 0 ) console . log ( ' Four ' ) else console . log ( ' Three ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; function Main ( input ) { let ary = input . split ( " " ) ; ary . sort ( ) ; ( ary [ 0 ] == 5 && ary [ 1 ] == 5 && ary [ 2 ] == 7 ) ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) . sort ( ) . join ( " " ) ; console . log ( input == " 1479 " ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
" use strict " process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { var x = Number ( data ) ; console . log ( x * x * x ) ; } ) ;
' use strict ' ; function main ( arg ) { arg = arg . split ( " " ) . sort ( ( a , b ) => a - b ) ; let ans = 0 ; for ( let i = 0 ; i < arg . length - 1 ; i ++ ) { ans = ans + ( arg [ i + 1 ] - arg [ i ] ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( s ) { const input = s . replace ( / \n / g , ' ' ) . split ( ' ' ) ; const two5 = input . filter ( x => x === ' 5 ' ) . length === 2 ; const one7 = input . filter ( x => x === ' 7 ' ) . length === 1 ; const result = ( two5 && one7 ) ? ' YES ' : ' NO ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let lines = input . split ( " \n " ) ; let nm = lines . shift ( ) . split ( / \s / ) . map ( ( v ) => v - 0 ) ; let N = nm [ 0 ] , M = nm [ 1 ] ; const MAX_N = 1e5 + 1 ; let V = new Array ( MAX_N ) . fill ( 0 ) . map ( ( ) => [ ] ) ; for ( let m = 0 ; m < M ; m ++ ) { let py = lines . shift ( ) . split ( / \s / ) . map ( ( v ) => v - 0 ) ; V [ py [ 0 ] ] . push ( { year : py [ 1 ] , index : m } ) ; } const d6 = ( n ) => ( ' 000000 ' + n . toString ( ) ) . slice ( - 6 ) ; const d12 = ( p , y ) => d6 ( p ) + d6 ( y ) ; let ans = new Array ( M ) ; for ( let m = 0 ; m < MAX_N ; m ++ ) { V [ m ] . sort ( ( a , b ) => a . year - b . year ) ; let v = V [ m ] ; for ( let n = 0 ; n < v . length ; n ++ ) { ans [ v [ n ] . index ] = d12 ( m , n + 1 ) ; } } for ( let m = 0 ; m < M ; m ++ ) { console . log ( ans [ m ] ) ; } } if ( typeof window == " undefined " ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; let go = 0 ; let nana = 0 ; for ( let i = 0 ; i < args . length ; i ++ ) { if ( args [ i ] === 5 ) { go ++ ; } ; if ( args [ i ] === 7 ) { nana ++ ; } ; } if ( go === 2 && nana === 1 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) . createInterface ( process . stdin , process . stdout ) ; var parseInt10 = function ( elem ) { return parseInt ( elem , 10 ) ; } var toInt = function ( line ) { var intArray = line . split ( ' ' ) . map ( parseInt10 ) ; if ( intArray . length === 1 ) { return intArray [ 0 ] ; } else { return intArray ; } } ; var settings = { } ; var defineRule = function ( index , data , vars ) { settings [ index ] = { } ; for ( var i = 0 ; i < vars . length ; i += 1 ) { settings [ index ] [ vars [ i ] ] = data [ i ] ; } } ; var calculate = function ( data ) { var v = Math . pow ( data , 3 ) ; console . log ( v ) ; } ; readline . on ( ' line ' , function ( line ) { line = toInt ( line ) ; lines . push ( line ) ; calculate ( line ) ; } ) ;
" use strict " function Main ( input ) { const inputArray = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; inputArray . forEach ( value => { if ( value == 5 ) count5 ++ ; else if ( value == 7 ) count7 ++ ; } ) ; if ( count5 === 2 && count7 === 1 ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var arg = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var N = arg [ 0 ] var K = arg [ 1 ] if ( K === 1 ) { console . log ( 0 ) return } console . log ( N - K ) return } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " \n " ) . map ( Number ) ; console . log ( a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var n = parseInt ( tmp [ 0 ] , 10 ) ; var m = parseInt ( tmp [ 1 ] , 10 ) ; var id = { } for ( var i = 1 ; i <= m ; i ++ ) { py = input [ i ] . split ( " " ) ; var p = py [ 0 ] ; var y = py [ 1 ] ; if ( ! ( p in id ) ) { id [ p ] = { } ; } id [ p ] [ y ] = 0 ; } Object . keys ( id ) . forEach ( function ( key ) { var i = 1 ; Object . keys ( id [ key ] ) . sort ( function ( a , b ) { return a - b ; } ) . forEach ( function ( key2 ) { id [ key ] [ key2 ] = i ; i ++ ; } ) ; } ) ; for ( var i = 1 ; i <= m ; i ++ ) { py = input [ i ] . split ( " " ) ; var p = py [ 0 ] ; var y = py [ 1 ] ; console . log ( ( ' 000000 ' + p ) . slice ( - 6 ) + ( ' 000000 ' + id [ p ] [ y ] ) . slice ( - 6 ) ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
function main ( input ) { var args = input . split ( " \n " ) ; var a = parseInt ( args [ 0 ] , 10 ) ; var b = parseInt ( args [ 1 ] , 10 ) ; var c = parseInt ( args [ 2 ] , 10 ) ; var d = parseInt ( args [ 3 ] , 10 ) ; var e = parseInt ( args [ 4 ] , 10 ) ; var k = parseInt ( args [ 5 ] , 10 ) ; if ( e - a <= k ) { if ( e - b <= k ) { if ( e - c <= k ) { if ( e - d <= k ) { if ( d - a <= k ) { if ( d - b <= k ) { if ( d - c <= k ) { if ( c - a <= k ) { if ( c - b <= k ) { if ( b - a <= k ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } else { console . log ( " :( " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; tmp2 = input [ 1 ] . split ( " " ) ; var n = parseInt ( tmp1 [ 0 ] , 10 ) ; var i = 0 ; var a = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { var r = parseInt ( tmp2 [ i ] , 10 ) ; a [ i ] = r ; } var t = 0 ; cnt = 0 ; t = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( t >= a [ i ] ) { cnt ++ ; t = a [ i ] ; } } console . log ( cnt ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var data = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) var min_i = 0 var min_v = data [ 0 ] var count = 1 for ( var i = 1 ; i < data . length ; i ++ ) { if ( min_v >= data [ i ] ) { count ++ min_v = data [ i ] } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } function debug ( ) { var input = document . getElementById ( ' input ' ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( " \n " ) ; const [ A , B , H , M ] = args [ 0 ] . split ( " " ) . map ( ( n ) => parseInt ( n , 10 ) ) ; const min = H * 60 + M ; console . log ( Math . sqrt ( A * A + B * B - ( 2 * A * B * Math . cos ( 11 * Math . PI * min / 360 ) ) ) ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const inputData = input . replace ( / \s*$ / g , ' ' ) . split ( / \s+ / ) . map ( v => parseInt ( v ) ) ; const [ a , b , h , m ] = inputData ; const hRad = ( h + m / 60 ) * Math . PI / 6 ; const mRad = m * Math . PI / 30 ; const hDeg = h * 30 ; const mDeg = m * 6 ; const vecA = { x : a * Math . sin ( hRad ) , y : a * Math . cos ( hRad ) } ; const vecB = { x : b * Math . sin ( mRad ) , y : b * Math . cos ( mRad ) } ; const res = Math . sqrt ( ( vecA . x - vecB . x ) ** 2 + ( vecA . y - vecB . y ) ** 2 ) ; console . log ( res ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( a ) { a = stn ( a . split ( " " ) ) ; var ss = [ ] ; ss . push ( a [ 0 ] * a [ 1 ] ) ; ss . push ( a [ 2 ] * a [ 3 ] ) ; ss . sort ( function ( a , b ) { return a - b ; } ) ; console . log ( ss [ 1 ] ) ; } function stn ( a ) { return a . map ( function ( x ) { return parseInt ( x , 10 ) ; } ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = arg => { const n = parseInt ( arg . split ( ' \n ' ) [ 0 ] , 10 ) const xn = arg . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( e => parseInt ( e , 10 ) ) const avg = Math . round ( xn . reduce ( ( val , e ) => val + e , 0 ) / n ) const w = xn . reduce ( ( v , e ) => v + ( e - avg ) * ( e - avg ) , 0 ) console . log ( w ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var data = ' ' ; var readable = process . stdin ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { data += chunk ; } ) readable . resume ( ) ; readable . on ( ' end ' , function ( ) { var x = parseInt ( data ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
function Main ( input ) { var a = input [ 0 ] . split ( " " ) . sort ( ( a , b ) => a - b ) . join ( " " ) ; console . log ( a == " 557 " ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ) ;
const Main = ( input ) => { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; if ( xs [ 0 ] >= 13 ) { console . log ( xs [ 1 ] ) ; } else if ( xs [ 0 ] <= 12 && xs [ 0 ] >= 6 ) { console . log ( xs [ 1 ] / 2 ) ; } else { console . log ( 0 ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . split ( / \n / ) const n = ~ ~ input [ 0 ] let houses = input [ 1 ] . split ( ' ' ) . map ( v => ~ ~ v ) . filter ( ( v , i , self ) => { return self . indexOf ( v ) === i } ) const ans = Math . max ( ... houses ) - Math . min ( ... houses ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const a = parseInt ( args [ 0 ] [ 0 ] , 10 ) const e = parseInt ( args [ 4 ] [ 0 ] , 10 ) const k = parseInt ( args [ 5 ] [ 0 ] , 10 ) if ( e - a <= k ) console . log ( ' Yay! ' ) else console . log ( ' :( ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
var data = ' ' ; var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { data += chunk ; } ) readable . on ( ' end ' , function ( ) { var x = parseInt ( data ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
function Main ( input ) { " use strict " ; const lines = input . split ( " \n " ) ; let nums = lines . map ( s => parseInt ( s , 10 ) ) ; nums . pop ( ) const k = nums . pop ( ) ; let n ; while ( true ) { n = nums . shift ( ) if ( n === undefined ) break ; if ( ! nums . every ( x => Math . abs ( n - x ) <= k ) ) { break ; } } console . log ( n === undefined ? " Yay! " : " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
var n = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( n , 3 ) ) ;
function * main ( ) { const N = + ( yield ) ; const A = ( yield ) . split ( " " ) . map ( s => + s ) ; const avg = A . reduce ( ( a , b ) => a + b ) / N ; const P = Math . round ( avg ) ; const sum = A . reduce ( ( t , x ) => t + ( x - P ) ** 2 , 0 ) ; console . log ( sum ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin } ) . on ( " line " , s => iter . next ( s ) ) ;
function Main ( input ) { var s , K , ref ; ref = input . split ( " \n " ) , s = ref [ 0 ] , K = parseInt ( ref [ 1 ] ) ; console . log ( Array . from ( s ) . map ( ( v , i , arr ) => { var code = v . charCodeAt ( ) ; if ( i === arr . length - 1 ) { code += K % 26 ; code -= code > 122 ? 26 : 0 ; return String . fromCharCode ( code ) ; } else { if ( v === " a " ) return v ; return 123 - code <= K ? ( ( K -= 123 - code ) , " a " ) : v ; } } ) . join ( " " ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const rl = require ( " readline " ) . createInterface ( process . stdin , process . stdout ) ; rl . once ( " line " , function ( str ) { var c = Math . pow ( str , 3 ) ; console . log ( c ) ; process . exit ( ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; var input_string = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { var lines = input_string . split ( ' \n ' ) ; main ( lines . slice ( 0 , lines . length - 1 ) ) ; } ) ; var main = function ( lines ) { lines . forEach ( function ( x ) { console . log ( Math . pow ( parseInt ( x ) , 3 ) ) ; } ) ; } ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' ; ( function ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; if ( input [ 1 ] === 1 ) { console . log ( 0 ) ; return ; } else { console . log ( input [ 0 ] - input [ 1 ] ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
log = console . log ; var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ; var lines = stdin . split ( " \n " ) ; var N = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var M = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; lines = lines . splice ( 1 ) . filter ( v => v !== " " ) ; cities = lines . map ( ( v , i ) => { P = Number ( v . split ( " " ) [ 0 ] ) ; Y = Number ( v . split ( " " ) [ 1 ] ) ; return { cityIndex : i , prefecture : P , year : Y } ; } ) ; cities . sort ( ( a , b ) => { return a . year - b . year ; } ) ; count = [ ] ; cities = cities . map ( c => { count [ c . prefecture ] === undefined ? ( count [ c . prefecture ] = 1 ) : ( count [ c . prefecture ] += 1 ) ; P = " 000000 " + c . prefecture . toString ( ) ; P = P . substr ( P . length - 6 , 6 ) ; id = " 000000 " + count [ c . prefecture ] . toString ( ) ; id = id . substr ( id . length - 6 , 6 ) ; return { cityIndex : c . cityIndex , prefecture : P , year : Y , id : id } ; } ) ; cities . sort ( ( a , b ) => { return a . cityIndex - b . cityIndex ; } ) ; cities . forEach ( c => console . log ( c . prefecture . toString ( ) + c . id . toString ( ) ) ) ;
function main ( input ) { var a = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; var b = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; var c = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 2 ] ) ; var d = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 3 ] ) ; if ( a * b >= c * d ) { console . log ( a * b ) ; } else { console . log ( c * d ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { console . log ( Math . pow ( input . trim ( ) , 3 ) ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " " ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ;
function main ( s ) { s = s . split ( " " ) ; var c = [ 0 , 0 ] ; for ( var i = 0 ; i < 3 ; i ++ ) { s [ i ] = parseInt ( s [ i ] ) ; if ( s [ i ] == 5 ) c [ 0 ] ++ ; if ( s [ i ] == 7 ) c [ 1 ] ++ ; } console . log ( ( c [ 0 ] == 2 && c [ 1 ] == 1 ) ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var tmp = input . split ( " " ) ; var A = parseInt ( tmp [ 0 ] ) ; var B = parseInt ( tmp [ 1 ] ) ; var H = parseInt ( tmp [ 2 ] ) ; var M = parseInt ( tmp [ 3 ] ) ; var deg = ( 5.5 * ( H * 60 + M ) ) % 360 ; var cosdeg = Math . cos ( deg * ( Math . PI / 180 ) ) ; var result = Math . sqrt ( A * A + B * B - 2 * A * B * cosdeg ) ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( a ) { return a ? cin [ cid ++ ] : + cin [ cid ++ ] ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var n = next ( ) ; var x = nexts ( n ) ; var ans = 1e9 ; for ( var i = 1 ; i <= 100 ; i ++ ) { var sum = 0 ; for ( var j = 0 ; j < n ; j ++ ) { var t = i - x [ j ] ; sum += t * t ; } if ( sum < ans ) ans = sum ; } return ans ; }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nxm = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nxm [ 0 ] ; var x = nxm [ 1 ] ; var m = nxm [ 2 ] ; arr = arr . map ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; return [ v [ 0 ] - 1 , v [ 1 ] - 1 , v [ 2 ] ] ; } ) ; var all = [ ] ; var loop = function ( ary ) { if ( ary . length == n ) all . push ( ary ) ; else { for ( var i = 0 ; i <= x ; i ++ ) loop ( ary . concat ( i ) ) } } ; loop ( [ ] ) ; var ans = [ - 1 ] ; var max = - 1 ; all . forEach ( function ( v ) { for ( var i = 0 ; i < m ; i ++ ) { var sum = 0 ; for ( var j = arr [ i ] [ 0 ] ; j <= arr [ i ] [ 1 ] ; j ++ ) sum += v [ j ] ; if ( sum != arr [ i ] [ 2 ] ) return ; } sum = v . reduce ( function ( a , b ) { return a + b ; } ) ; if ( sum > max ) { ans = v ; max = sum ; } } ) ; console . log ( ans . join ( " " ) ) ;
function Main ( input ) { var x = input ; if ( x == 2 ) { x = 2 ; } else if ( x >= 2 && x < 4 ) { x = 2 } else if ( x >= 4 && x < 8 ) { x = 4 } else if ( x >= 8 && x < 16 ) { x = 8 } else if ( x >= 16 && x < 32 ) { x = 16 } else if ( x >= 32 && x < 64 ) { x = 32 } else if ( x >= 64 && x < 128 ) { x = 64 } console . log ( x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var array = lines [ 0 ] ; var n1 = array . indexOf ( 1 ) ; if ( n1 !== - 1 ) { var n2 = array . indexOf ( 9 ) ; if ( n2 !== - 1 ) { var n3 = array . indexOf ( 7 ) ; if ( n3 !== - 1 ) { var n4 = array . indexOf ( 4 ) ; if ( n4 !== - 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } else { console . log ( " NO " ) ; } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var K = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; if ( K == 1 ) { var ans = 0 ; } else { var ans = N - K ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputList = input . split ( " " ) ; var x = 0 ; var y = 0 ; for ( i = 0 ; i < inputList . length ; i ++ ) { inputList [ i ] = parseInt ( inputList [ i ] , 10 ) ; } for ( i = 0 ; i < inputList . length ; i ++ ) { if ( inputList [ i ] === 5 ) { x = x + 1 ; } else if ( inputList [ i ] === 7 ) { y = y + 1 ; } } if ( x === 2 && y === 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = ( input ) => { const [ a , b ] = input . trim ( ) . split ( " " ) . map ( Number ) ; if ( a === b ) { return " Draw " ; } else if ( b === 1 ) { return " Bob " ; } else if ( a === 1 ) { return " Alice " ; } else if ( a < b ) { return " Bob " ; } else { return " Alice " ; } } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; function Main ( input ) { var tmp = input . split ( " \n " ) ; var line0 = tmp [ 0 ] . split ( " " ) ; var input1 = Number ( line0 [ 0 ] ) ; var input2 = Number ( line0 [ 1 ] ) ; var input3 = Number ( line0 [ 2 ] ) ; var a = input1 ; var b = input2 ; var c = input3 ; var ans = 0 ; var min = Math . min . apply ( null , line0 ) ; var max = Math . max . apply ( null , line0 ) ; console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = ( input ) => { const [ a , b , c , d ] = input . trim ( ) . split ( " " ) ; const first = a * b ; const second = c * d ; if ( first === second ) { return first ; } else if ( first < second ) { return second ; } else { return first ; } } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; argv = input [ 0 ] . split ( " " ) ; var A = parseInt ( argv [ 0 ] ) ; var B = parseInt ( argv [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( i => parseInt ( i ) ) let c5 = 0 let c7 = 0 in put . forEach ( i => { if ( i === 5 ) { c5 ++ } else { c7 ++ } } ) if ( c5 === 2 && c7 === 1 ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var c = lines . map ( i => i . split ( " " ) . map ( i => Number ( i ) ) ) ; for ( var a1 = 0 ; a1 <= 100 ; a1 ++ ) { var b1 = c [ 0 ] [ 0 ] - a1 var b2 = c [ 1 ] [ 0 ] - a1 var b3 = c [ 2 ] [ 0 ] - a1 for ( var a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) { continue } if ( a2 + b2 !== c [ 1 ] [ 1 ] ) { continue } if ( a2 + b3 !== c [ 2 ] [ 1 ] ) { continue } for ( var a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) { continue } if ( a3 + b2 !== c [ 1 ] [ 2 ] ) { continue } if ( a3 + b3 !== c [ 2 ] [ 2 ] ) { continue } console . log ( " Yes " ) ; return ( 0 ) } } } console . log ( " No " ) } ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const lines = input . split ( ' \n ' ) const map = [ ] for ( let i = 0 ; i < 3 ; i ++ ) { map [ i ] = lines [ i ] . split ( ' ' ) . map ( Number ) } let diff1 = 0 let diff2 = 0 diff1 = map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] diff2 = map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] for ( var i = 1 ; i < 3 ; i ++ ) { if ( diff1 !== map [ i ] [ 0 ] - map [ i ] [ 1 ] ) break if ( diff2 !== map [ i ] [ 1 ] - map [ i ] [ 2 ] ) break } console . log ( i === 3 ? ' Yes ' : ' No ' ) } ) ( input )
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const a = args . slice ( 0 , 5 ) . map ( arg => parseInt ( arg [ 0 ] , 10 ) ) const k = parseInt ( args [ 5 ] [ 0 ] , 10 ) let flg = true for ( let i = 0 ; i < ( 5 - 1 ) ; i ++ ) { for ( let j = ( i + 1 ) ; j < 5 ; j ++ ) { if ( a [ j ] - a [ i ] > k ) flg = false } } if ( flg ) console . log ( ' Yay! ' ) else console . log ( ' :( ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const D = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const points = arg . slice ( 1 , N + 1 ) ; let answer = 0 ; for ( let i in points ) { let temp = points [ i ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let nows = [ ] ; for ( let j in temp ) { nows . push ( temp [ j ] ) ; } for ( let j = parseInt ( i ) + 1 ; j < N ; j ++ ) { let temp = points [ j ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let targets = [ ] ; for ( let k in temp ) { targets . push ( temp [ k ] ) ; } let distance = 0 ; for ( let k in targets ) { distance += Math . abs ( Math . pow ( nows [ k ] - targets [ k ] , 2 ) ) ; } distance = Math . sqrt ( distance ) ; if ( distance % 1 === 0 ) { answer ++ } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " " ) . map ( Number ) ; var [ a , b , c , d ] = arr . sort ( ( a , b ) => b - a ) ; console . log ( Math . abs ( ( a + d ) - ( b + c ) ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const n = parseInt ( args [ 0 ] , 10 ) ; const x = args [ 1 ] . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; var ans = - 1 , mn = 1e9 ; for ( var i = 1 ; i <= 100 ; i ++ ) { var tmp = 0 ; for ( var j = 0 ; j < n ; j ++ ) tmp += Math . pow ( i - x [ j ] , 2 ) ; if ( tmp < mn ) { mn = tmp ; ans = i ; } } console . log ( mn ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var a = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( a , 3 ) ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const c = arg . map ( n => n . split ( " " ) . map ( l => parseInt ( l ) ) ) ; for ( let a1 = 0 ; a1 <= 100 ; a1 ++ ) { const b1 = c [ 0 ] [ 0 ] - a1 ; const b2 = c [ 1 ] [ 0 ] - a1 ; const b3 = c [ 2 ] [ 0 ] - a1 ; for ( let a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) continue ; if ( a2 + b2 !== c [ 1 ] [ 1 ] ) continue ; if ( a2 + b3 !== c [ 2 ] [ 1 ] ) continue ; for ( let a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) continue ; if ( a3 + b2 !== c [ 1 ] [ 2 ] ) continue ; if ( a3 + b3 !== c [ 2 ] [ 2 ] ) continue ; console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const a = parseInt ( args [ 0 ] , 10 ) ; console . log ( a * a * a ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; let n = Number ( input [ 0 ] ) ; let place_array = input [ 1 ] . split ( " " ) . map ( Number ) ; let min = 0 ; for ( let cp = 0 ; cp < 100 ; cp ++ ) { let tmp_total = 0 ; for ( let i = 0 ; i < n ; i ++ ) { tmp_total += Math . pow ( ( cp - place_array [ i ] ) , 2 ) ; } if ( cp === 0 ) min = tmp_total ; min = min < tmp_total ? min : tmp_total ; } console . log ( min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( a ) { console . log ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? ' YES ' : ' NO ' ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . split ( ' \n ' ) ; var line ; while ( line = lines . shift ( ) ) { var nums = line . split ( ' ' ) . map ( function ( n ) { return + n ; } ) ; console . log ( nums [ 0 ] + nums [ 1 ] ) ; }
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return ( this . index < this . max ) ; } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " NoSuchElementException:次に要素は無いよ";} var returnOb j = thi .list[thi . ndex ] ; th i s.in d ex++; r turn retur nO b ; } } ain(); fu n t o nex t ( ) return o j.ne x t ( );} fu cti o n ne x t I n (){retur myconv ( n e xt(),1 ;} fun c tion n e x t S t Array(){ eturn myconv ( n e xt(),2 ;} fun c tion n e x t I n Array(){ eturn myconv ( n e xt(),4 ;} fun c tion n e x t C h rArray() return myconv ( n e xt(),6 ;} fun c tion h a s N e x (){retur obj.ha s N e xt();} fun c tion my o u t ( ){consol .log( t ) ; } functi o n m y e r r ( ){consol .erro r ( t ) ;} func t ion m y c o n v i,no){tr {switc h ( n o) { c ase 1:retu r n p a rseI t ( i);cas 2:retur n i . spli ( " ");ca e 4:ret u r n i . spli ( " ").ma ( ( a)=>N u m b e r ( a)) ; c a s e 6:retu r n i . spli ( " ");cas 7 :retu r n i . spli ( " ").map ( a )=>Nu m b e r ( a)) ; c a s e 8:retu r n i . join " ");cas 9 :ret u r n i . join " \ n");ca e 0:re t u rn i . join " " );defa l t :ret u r n i ;}}catc h (e){re u r n i;}} f u n c tion M i n ( ) var one = ne x t I tAr ay( ; var N = one[ 0 ] ; var K = one [ 1 ] ; if( = 1){ m y o t( 0 ) r t u r ; } v a r m n = (K ); ar a = N - m n; you ( a 1) ; }
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var arr = [ a , b , c ] arr . sort ( ) if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { let arr = input . split ( ' ' ) . map ( Number ) ; let min1 = arr [ 0 ] * 60 + arr [ 1 ] ; let min2 = arr [ 2 ] * 60 + arr [ 3 ] ; console . log ( min2 - min1 - arr [ 4 ] ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const N = parseInt ( input ) for ( let i = 1 ; ; i ++ ) { let num = Math . pow ( 2 , i ) if ( num > N ) { console . log ( Math . pow ( 2 , i - 1 ) ) return } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' function main ( n ) { let a0 = n . split ( " \n " ) [ 0 ] . split ( " " ) ; let a1 = n . split ( " \n " ) [ 1 ] . split ( " " ) ; let a2 = n . split ( " \n " ) [ 2 ] . split ( " " ) ; let a0SumCheck = ( a0 . reduce ( ( n , m ) => { return n * 1 + m * 1 } ) ) % 3 ; let a1SumCheck = ( a1 . reduce ( ( n , m ) => { return n * 1 + m * 1 } ) ) % 3 ; let a2SumCheck = ( a2 . reduce ( ( n , m ) => { return n * 1 + m * 1 } ) ) % 3 ; let b0SumCheck = ( a0 [ 0 ] * 1 + a1 [ 0 ] * 1 + a2 [ 0 ] * 1 ) % 3 ; let b1SumCheck = ( a0 [ 1 ] * 1 + a1 [ 1 ] * 1 + a2 [ 1 ] * 1 ) % 3 ; let b2SumCheck = ( a0 [ 2 ] * 1 + a1 [ 2 ] * 1 + a2 [ 2 ] * 1 ) % 3 ; let aCheck = ( ( a0SumCheck == a1SumCheck ) && ( a1SumCheck == a2SumCheck ) ) ; let bCheck = ( ( b0SumCheck == b1SumCheck ) && ( b1SumCheck == b2SumCheck ) ) ; if ( aCheck && bCheck ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " \n " ) ; var N = inputs [ 0 ] . split ( " " ) [ 0 ] ; var D = inputs [ 0 ] . split ( " " ) [ 1 ] ; var a = [ ] ; for ( i = 1 ; i <= N ; i ++ ) { a [ i - 1 ] = inputs [ i ] . split ( " " ) ; } var n = 0 ; for ( j = 0 ; j <= ( N - 1 ) ; j ++ ) { for ( l = 0 ; l <= ( N - 1 ) ; l ++ ) { var b = 0 ; var k = 0 ; var s ; if ( j <= l ) { continue ; } for ( m = 0 ; m <= ( D - 1 ) ; m ++ ) { b = a [ j ] [ m ] - a [ l ] [ m ] ; k += Math . pow ( b , 2 ) ; } s = Number . isInteger ( Math . pow ( k , 1 / 2 ) ) ; if ( s == true ) { n += 1 ; } } } console . log ( n ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( arg ) => { const lines = arg . trim ( ) . split ( ' \n ' ) ; const A = lines [ 0 ] . split ( ' ' ) . map ( ( x ) => Number . parseInt ( x ) ) ; A . sort ( ( a , b ) => b - a ) ; console . log ( A [ 0 ] - A [ 2 ] ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { let at = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let k = at [ 5 ] ; for ( let n = 0 ; n < 4 ; n ++ ) { for ( let m = n + 1 ; m < 5 ; m ++ ) { let d = at [ m ] - at [ n ] ; if ( d > k ) { console . log ( ' :( ' ) ; return ; } } } console . log ( ' Yay! ' ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const input1 = input [ 0 ] . split ( " " ) ; const N = parseInt ( input1 [ 0 ] ) ; const D = parseInt ( input1 [ 1 ] ) ; const points = input . slice ( 1 ) . map ( x => x . split ( " " ) . map ( y => parseInt ( y ) ) ) ; var count = 0 ; for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { var distance = 0 ; for ( k = 0 ; k < D ; k ++ ) { distance += ( points [ i ] [ k ] - points [ j ] [ k ] ) * ( points [ i ] [ k ] - points [ j ] [ k ] ) ; } distance = Math . sqrt ( distance ) ; if ( Number . isInteger ( distance ) ) count ++ ; } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' ; function Main ( input ) { const temp = input . split ( " " ) ; const n = temp [ 0 ] ; const k = temp [ 1 ] ; let ans ; if ( k == 1 ) ans = 0 ; else ans = n - k ; console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( s ) { s = s . split ( " \n " ) [ 1 ] . split ( " " ) . map ( x => Number ( x ) ) ; var x = 1000 ; var y = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] < x ) { x = s [ i ] ; } if ( s [ i ] > y ) { y = s [ i ] ; } } console . log ( y - x ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( lines ) { const input = s ( ) ; let ans = ' NO ' ; switch ( input ) { case ' 7 5 5 ' : case ' 5 7 5 ' : case ' 5 5 7 ' : ans = ' YES ' ; } return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputArray = input . split ( ' ' ) ; var a = inputArray [ 0 ] ; var b = inputArray [ 1 ] ; var c = inputArray [ 2 ] ; var d = inputArray [ 3 ] ; var result = ( a * b > c * d ) ? a * b : c * d ; console . log ( result ) ;
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var cube = function ( x ) { return x * x * x ; } ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { var num_str = line . split ( / \n / ) [ 0 ] ; if ( num_str . match ( / \d{1,3} / ) ) { var num = parseInt ( num_str , 10 ) ; if ( num > 0 ) { if ( num < 101 ) { console . log ( cube ( num ) ) ; } } } } ) ;
function main ( input ) { const inArray = input . trim ( ) . split ( ' ' ) . map ( x => parseInt ( x ) ) ; console . log ( inArray [ 0 ] >= 13 ? inArray [ 1 ] : inArray [ 0 ] >= 6 ? inArray [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; input . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; console . log ( Math . abs ( input [ 0 ] - input [ 2 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function Main ( input ) { const n = Number ( input ) ; let i = 0 ; while ( true ) { if ( Math . pow ( 2 , i ) > n ) { console . log ( Math . pow ( 2 , i - 1 ) ) ; return ; } i ++ ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) A = inp . shift ( ) * 1 B = inp . shift ( ) * 1 if ( A == B ) { ans = ' Draw ' } else { if ( A == 1 ) { ans = ' Alice ' } else if ( B == 1 ) { ans = ' Bob ' } else if ( A > B ) { ans = ' Alice ' } else { ans = ' Bob ' } } console . log ( ans )
function Main ( input ) { input = input . split ( " \n " ) ; tmp0 = input [ 0 ] . split ( " " ) ; A = Number ( tmp0 [ 0 ] ) ; B = Number ( tmp0 [ 1 ] ) ; ans = 0 ; if ( A <= 5 ) { ans = 0 ; } else if ( 6 <= A && A <= 12 ) { ans = B / 2 } else { ans = B } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const info = input . splice ( ' \n ' ) ; const N = info [ 0 ] . split ( ' ' ) [ 0 ] ; const M = info [ 0 ] . split ( ' ' ) [ 1 ] ; const As = info . splice ( 1 , N ) ; const Bs = info . splice ( 1 , M ) ; let isMatch = " " ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { isMatch = true ; loopReset : for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] == Bs [ bx ] [ by ] ) { continue ; } else { isMatch = false ; break loopReset ; } } } if ( isMatch ) { console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = inputs ; var set = x * x * x ; console . log ( parseInt ( set ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) ; var a = input [ 0 ] - 0 ; if ( a < 2 ) console . log ( 1 ) ; else if ( a < 4 ) console . log ( 2 ) ; else if ( a < 8 ) console . log ( 4 ) ; else if ( a < 16 ) console . log ( 8 ) ; else if ( a < 32 ) console . log ( 16 ) ; else if ( a < 64 ) console . log ( 32 ) ; else if ( a < 128 ) console . log ( 64 ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; Arr . forEach ( function ( v ) { var a = ( v . split ( " " ) ) [ 0 ] - 0 ; var b = ( v . split ( " " ) ) [ 1 ] - 0 ; console . log ( a + b ) ; } ) ;
' use strict ' const translate = ( num ) => { if ( num == 1 ) return num = 14 ; else return num - 0 ; } function main ( arg ) { arg = arg . split ( ' ' ) ; const a = translate ( arg [ 0 ] ) ; const b = translate ( arg [ 1 ] ) ; if ( a == b ) return console . log ( ' Draw ' ) ; if ( a > b ) { console . log ( ' Alice ' ) ; } else { console . log ( ' Bob ' ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const a = + ( ' ' + require ( ' fs ' ) . readFileSync ( 0 ) ) console . log ( a * a * a )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; x = parseInt ( x , 10 ) ; console . log ( x * x * x ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var [ h1 , m1 , h2 , m2 , k ] = nexts ( 5 ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; return m2 - m1 - k ; }
" use strict " ; function Main ( input ) { let lines = input . split ( ' \n ' ) let N = lines [ 0 ] . split ( ' ' ) [ 0 ] * 1 let D = lines [ 0 ] . split ( ' ' ) [ 1 ] * 1 lines . shift ( ) let ans = 0 let line = lines . map ( ( l ) => { return l . split ( ' ' ) } ) for ( let i = 0 ; i < N - 1 ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let t = 0 ; for ( let k = 0 ; k < D ; k ++ ) { t += Math . pow ( ( line [ i ] [ k ] - line [ j ] [ k ] ) , 2 ) ; } if ( Math . sqrt ( t ) % 1 == 0 ) { ans ++ ; } } } console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const inputList = input . split ( / \n / ) ; const oneLineList = inputList [ 0 ] . split ( / \s / ) . map ( inp => formatNum ( inp ) ) ; const N = oneLineList [ 0 ] ; const D = oneLineList [ 1 ] ; const valueList = [ ] ; for ( var i = 1 ; i <= N ; i ++ ) { valueList . push ( inputList [ i ] . split ( / \s / ) . map ( il => formatNum ( il ) ) ) ; } var listA = [ ] ; var listB = [ ] ; var count = 0 ; for ( var j = 0 ; j < valueList . length ; j ++ ) { for ( var l = j + 1 ; l < valueList . length ; l ++ ) { if ( l !== valueList . length ) { listA = valueList [ j ] ; listB = valueList [ l ] ; var calcValue = 0 ; for ( var k = 0 ; k < D ; k ++ ) { calcValue += ( listA [ k ] - listB [ k ] ) * ( listA [ k ] - listB [ k ] ) ; } var sqrtNum = Math . sqrt ( calcValue ) ; if ( Number . isInteger ( sqrtNum ) ) { count ++ } } } } console . log ( count ) ; } ; function formatNum ( str ) { return Number ( str ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 0 ] == 1 ) { input [ 0 ] = 14 ; } if ( input [ 1 ] == 1 ) { input [ 1 ] = 14 ; } input [ 0 ] -= 0 in put [ 1 ] -= 0 if ( input [ 0 ] > input [ 1 ] ) { console . log ( " Alice " ) ; } else if ( input [ 0 ] < input [ 1 ] ) { console . log ( " Bob " ) ; } else { console . log ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var res ; if ( a >= 13 ) { res = b ; } if ( a >= 6 && a <= 12 ) { res = b / 2 ; } if ( a <= 5 ) { res = 0 ; } console . log ( res ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( o ) { o = o . split ( ' \n ' ) . map ( v => ~ ~ v ) const k = o [ 5 ] const a = o . slice ( 0 , 5 ) let i2 = 0 for ( let i = 0 ; i < a . length ; i ++ ) { for ( let j = i + 1 ; j < a . length ; j ++ ) { if ( a [ j ] - a [ i ] > k ) { console . log ( ' :( ' ) return } } } console . log ( ' Yay! ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = ( input ) => { const K = parseInt ( input . split ( ' ' ) [ 0 ] ) const S = parseInt ( input . split ( ' ' ) [ 1 ] ) let sum = 0 for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { let z = S - x - y if ( z >= 0 && z <= K ) { sum ++ } } } console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } else if ( d - a > k ) { ans = " :( " ; } else if ( c - a > k ) { ans = " :( " ; } else if ( b - a > k ) { ans = " :( " ; } if ( e - b > k ) { ans = " :( " ; } else if ( d - b > k ) { ans = " :( " ; } else if ( c - b > k ) { ans = " :( " ; } if ( e - c > k ) { ans = " :( " ; } else if ( d - c > k ) { ans = " :( " ; } if ( e - d > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ; function main ( input ) { var temp = parseInt ( input ) ; var answer = Math . pow ( temp , 3 ) ; console . log ( answer ) ; } main ( x ) ;
function Main ( input ) { var arr = input . split ( " " ) ; var count5 = 0 ; var count7 = 0 ; for ( var a of arr ) { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } if ( count5 == 2 && count7 == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; nidan = input [ 1 ] . split ( ' ' ) ; flag = null ; for ( i = 0 ; i < nidan . length - 1 ; i ++ ) { if ( nidan [ i ] === ' Y ' ) { flag = true ; } } if ( flag ) { console . log ( ' Four ' ) ; } else { console . log ( ' Three ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; input = input . split ( " \n " ) ; var x = ( + input . shift ( ) ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . split ( " \n " ) ; if ( input [ input . length - 1 ] === ' ' ) { input . pop ( ) ; } const N = input [ 0 ] - 0 ; const X = input [ 1 ] . split ( ' ' ) . map ( e => { return e - 0 ; } ) ; var sum = 0 ; X . forEach ( e => { sum += e ; } ) ; var p = Math . round ( sum / N ) ; sum = 0 ; X . forEach ( e => { sum += ( e - p ) ** 2 ; } ) ; console . log ( sum ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { ' use strict ' ; const temp = input . split ( " " ) ; const a = parseInt ( temp [ 0 ] , 10 ) ; const b = parseInt ( temp [ 1 ] , 10 ) ; let payment ; if ( a <= 5 ) payment = 0 ; else if ( a <= 12 ) payment = b / 2 ; else payment = b ; console . log ( payment ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } else if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) m = index ; } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
const main = ( standardInput ) => { const lengthList = standardInput . split ( ' ' ) ; const x = Number . parseInt ( lengthList [ 0 ] ) ; console . log ( x * x * x ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( x * x * x ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { var str = input ; var ans = 0 ; var str = str . split ( " \n " ) [ 0 ] ; var num = str . split ( " " ) ; var h1 = Number ( num [ 0 ] ) ; var m1 = Number ( num [ 1 ] ) ; var h2 = Number ( num [ 2 ] ) ; var m2 = Number ( num [ 3 ] ) ; var k = Number ( num [ 4 ] ) ; var time1 = m1 + 60 * h1 ; var time2 = m2 + 60 * h2 ; ans = time2 - time1 - k ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( / \s+ / ) . map ( s => parseInt ( s ) ) const A = inputs [ 0 ] const B = inputs [ 1 ] const H = inputs [ 2 ] const M = inputs [ 3 ] const ratioH = ( H * 60 + M ) / ( 12 * 60 ) const ratioM = M / 60 const theta = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) const C = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta ) ) console . log ( C . toFixed ( 10 ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line . split ( " " ) ) ; } ) ; reader . on ( ' close ' , solve ) ; function getInt ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseInt ( elem ) ) ; return rtn ; } function getFloat ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseFloat ( elem ) ) ; return rtn ; } function solve ( ) { var [ N ] = getInt ( lines [ 0 ] ) ; var P = getInt ( lines [ 1 ] ) ; var m = 200001 , ans = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( P [ i ] < m ) ans ++ ; m = Math . min ( m , P [ i ] ) ; } console . log ( ans ) ; }
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg [ 5 ] ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => ~ ~ n ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . split ( ' ' ) ; var k = parseInt ( input [ 0 ] ) ; var s = parseInt ( input [ 1 ] ) ; var count = 0 ; for ( var x = 0 ; x <= k ; x ++ ) { for ( var y = 0 ; y <= k ; y ++ ) { var z = ( s - parseInt ( x ) - parseInt ( y ) ) ; if ( 0 <= z && z <= k ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var age = Number ( input . split ( ' ' ) [ 0 ] ) ; var price = Number ( input . split ( ' ' ) [ 1 ] ) ; if ( age <= 5 ) { console . log ( 0 ) ; } else if ( age <= 12 ) { console . log ( price / 2 ) ; } else { console . log ( price ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const lines = input . split ( " \n " ) ; const n = parseInt ( lines [ 0 ] ) ; const p = lines [ 1 ] . split ( " " ) ; ans = 0 ; min_p = n + 10 ; for ( i = 0 ; i < n ; ++ i ) { if ( parseInt ( p [ i ] ) <= min_p ) { min_p = parseInt ( p [ i ] ) ; ans ++ ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { input = input . split ( " \n " ) ; let tmp = input [ 0 ] . split ( " " ) ; for ( let i = 0 ; i < 5 ; i ++ ) { for ( let j = i ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > input [ 5 ] ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . trim ( ) . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) ; if ( list . indexOf ( " Y " ) != - 1 ) { myout ( " Four " ) ; } else { myout ( " Three " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( input ) { var reg = / 7 5 5|5 7 5|5 5 7 / ; reg . test ( input ) ? op ( " YES " ) : op ( " NO " ) ; } function op ( a ) { console . log ( a ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( Math . pow ( Number ( input ) , 3 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , ( x ) => { lines . push ( x ) } ) ; rl . on ( ' close ' , ( ) => { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) if ( 13 <= A ) { console . log ( B ) } else if ( 6 <= A && A <= 12 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var input0 = input [ 0 ] . split ( " " ) ; const N = parseInt ( input0 [ 0 ] ) ; const K = parseInt ( input0 [ 1 ] ) ; if ( K == 1 ) { console . log ( 0 ) ; } else { console . log ( N - K ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( N , D , X ) => { var count = 0 for ( var i = 0 ; i < N ; i ++ ) { for ( var k = i + 1 ; k < N ; k ++ ) { var tmp = 0 for ( var j = 0 ; j < D ; j ++ ) { tmp += Math . pow ( X [ i ] [ j ] - X [ k ] [ j ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( tmp ) ) ) { count ++ } } } return count } const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . filter ( i => i !== ' ' ) const lst = input . map ( i => i . split ( " " ) . map ( x => Number ( x ) ) ) const N = lst [ 0 ] [ 0 ] const D = lst [ 0 ] [ 1 ] const X = lst . slice ( 1 , lst . length ) console . log ( main ( N , D , X ) )
' use strict ' function main ( input ) { const n = Number ( input ) let ans = 0 if ( n == 1 ) { console . log ( 1 ) return } let i = 0 while ( Math . pow ( 2 , i + 1 ) <= n ) { i ++ ans = Math . pow ( 2 , i ) } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; tmp . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) result = tmp . toString ( ) == [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ; console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , arg . length ) ) ; const antennas = arg . slice ( 0 , arg . length - 1 ) . map ( n => parseInt ( n ) ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return ( this . index < this . max ) ; } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { return " " ; } var returnObj = this . list [ this . index ] ; this . index ++ ; return returnObj ; } } Main ( ) ; function next ( ) { return obj . next ( ) ; } function nextInt ( ) { return myconv ( next ( ) , 1 ) ; } function nextStrArray ( ) { return myconv ( next ( ) , 2 ) ; } function nextIntArray ( ) { return myconv ( next ( ) , 4 ) ; } function nextCharArray ( ) { return myconv ( next ( ) , 6 ) ; } function hasNext ( ) { return obj . hasNext ( ) ; } function myout ( t ) { console . log ( t ) ; } function myerr ( t ) { console . error ( t ) ; } function myconv ( i , no ) { try { switch ( no ) { case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 8 : return i . join ( " " ) ; case 9 : return i . join ( " \n " ) ; case 0 : return i . join ( " " ) ; default : return i ; } } catch ( e ) { return i ; } } function Main ( ) { var N = nextInt ( ) ; var output = 2 ; for ( var i = 0 ; i < N ; i ++ ) { output = output + 1 + output + 1 ; } myout ( output ) ; }
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) console . log ( x * x * x )
function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( var i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var t = i ; while ( t >= 2 && t % 2 == 0 ) { divideCount += 1 ; t = t / 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; var H = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var M = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; rad_H = ( ( 360 / 12 ) * H + ( ( 360 / 12 ) / 60 ) * M ) * ( Math . PI / 180 ) ; rad_M = ( 360 / 60 ) * M * ( Math . PI / 180 ) ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - 2 * A * B * Math . cos ( rad_H - rad_M ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( arg ) { var n = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] - 0 ; var m = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] - 0 ; var A = new Array ( n ) ; var B = new Array ( m ) ; for ( var i = 0 ; i < n ; i ++ ) { A [ i ] = arg . split ( " \n " ) [ i + 1 ] . split ( " " ) ; } for ( var i = 0 ; i < m ; i ++ ) { B [ i ] = arg . split ( " \n " ) [ n + 1 + i ] . split ( " " ) ; } for ( var i = 0 ; i <= n - m ; i ++ ) { for ( var j = 0 ; j <= n - m ; j ++ ) { var cnt = 0 ; for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( A [ i + k ] [ j + l ] == B [ k ] [ l ] ) cnt ++ ; } } if ( cnt == m * m ) { console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( ) { var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) . trim ( ) ; var items = input . split ( " " ) . map ( function ( item ) { return parseInt ( item ) ; } ) ; items . sort ( ) ; var target = [ 5 , 5 , 7 ] ; var flag = true ; for ( var i = 0 ; i < 3 ; ++ i ) { if ( items [ i ] != target [ i ] ) { flag = false ; break ; } } console . log ( flag ? " YES " : " NO " ) ; } Main ( ) ;
let [ a , b ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; if ( a == 1 ) a = 14 ; if ( b == 1 ) b = 14 ; console . log ( a == b ? " Draw " : a > b ? " Alice " : " Bob " ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var [ a , b , h , m ] = nexts ( 4 ) ; var x = h * 60 + m ; x /= 720 / 11 ; x -= x | 0 ; x *= Math . PI * 2 ; var ry = b * Math . sin ( x ) , rx = b * Math . cos ( x ) ; var dx = rx - a ; return Math . sqrt ( dx * dx + ry * ry ) ; }
' use strict ' ; const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const CODE_A = 97 ; let s = inputs [ 0 ] ; let K = parseInt ( inputs [ 1 ] ) ; let cur = 0 ; let result = ' ' ; let lastFailedCur = - 1 ; let lastFailedCode = - 1 ; while ( cur < s . length ) { let distance = 26 - ( s . charCodeAt ( cur ) - CODE_A ) ; if ( distance === 26 ) { result += ' a ' ; } else if ( distance <= K ) { K -= distance ; result += ' a ' ; } else { lastFailedCur = cur ; lastFailedCode = s . charCodeAt ( cur ) ; result += s [ cur ] ; } cur ++ ; } if ( K > 0 ) { K = K % 26 ; if ( lastFailedCode === - 1 ) { lastFailedCur = s . length - 1 ; lastFailedCode = result . charCodeAt ( result . length - 1 ) ; } result = result . substr ( 0 , lastFailedCur ) + String . fromCharCode ( CODE_A + ( lastFailedCode + K - CODE_A ) % 26 ) + result . substr ( lastFailedCur + 1 ) ; } console . log ( result ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 1 ] . split ( " " ) ; all = Number ( input [ 0 ] ) ; var maxest = Number ( tmp [ 0 ] ) ; ans = 1 ; for ( i = 2 ; i <= all ; i ++ ) { the_Num = Number ( tmp [ i - 1 ] ) ; if ( maxest >= the_Num ) { ans ++ ; } if ( maxest > the_Num ) maxest = the_Num ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " " ) ; hHand = parseInt ( tmp [ 0 ] , 10 ) ; mHand = parseInt ( tmp [ 1 ] , 10 ) ; hours = parseInt ( tmp [ 2 ] , 10 ) ; minuts = parseInt ( tmp [ 3 ] , 10 ) ; hAngle = ( 30 * hours ) + ( 0.5 * minuts ) ; if ( hAngle == 90 ) { hoursX = hHand ; hoursY = 0 ; } else if ( hAngle == 180 ) { hoursX = 0 ; hoursY = - hHand ; } else if ( hAngle == 270 ) { hoursX = - hHand ; hoursY = 0 ; } else { hoursX = hHand * Math . sin ( hAngle * ( Math . PI / 180 ) ) ; hoursY = hHand * Math . cos ( hAngle * ( Math . PI / 180 ) ) ; } mAngle = ( 6 * minuts ) ; if ( mAngle == 90 ) { minutsX = mHand ; minutsY = 0 ; } else if ( mAngle == 180 ) { minutsX = 0 ; minutsY = - mHand ; } else if ( mAngle == 270 ) { minutsX = - mHand ; minutsY = 0 ; } else { minutsX = mHand * Math . sin ( mAngle * ( Math . PI / 180 ) ) ; minutsY = mHand * Math . cos ( mAngle * ( Math . PI / 180 ) ) ; } distance = Math . hypot ( hoursX - minutsX , hoursY - minutsY ) ; console . log ( distance ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var K = parseInt ( tmp [ 0 ] , 10 ) ; var S = parseInt ( tmp [ 1 ] , 10 ) ; var x , y , z ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { x = i ; for ( var j = 0 ; j <= K ; j ++ ) { y = j ; z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count += 1 ; } } } console . log ( ' %d ' , count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function zeroPadding ( str ) { return ( ' 000000 ' + str ) . slice ( - 6 ) } function Main ( input ) { const data = input . trim ( ) . split ( ' \n ' ) const temp = data [ 0 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) const N = temp [ 0 ] const M = temp [ 1 ] const rest = data . slice ( 1 ) . map ( s => { return s . split ( ' ' ) . map ( x => parseInt ( x ) ) } ) var ans = { } rest . forEach ( ( d , index ) => { if ( ! ans [ d [ 0 ] ] ) ans [ d [ 0 ] ] = [ ] ans [ d [ 0 ] ] . push ( { index : index , p : d [ 0 ] , t : d [ 1 ] , s : ' ' } ) } ) for ( var i in ans ) { ans [ i ] = ans [ i ] . sort ( ( a , b ) => a . t - b . t ) } var res = Array ( M ) for ( var i in ans ) { for ( var j = 0 ; j < ans [ i ] . length ; ++ j ) { var d = ans [ i ] [ j ] var str = zeroPadding ( d . p ) + zeroPadding ( ( j + 1 ) . toString ( ) ) res [ d . index ] = str } } var output = res . reduce ( ( p , c ) => p + ' \n ' + c ) console . log ( output ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " " ) . map ( ( a ) => Number ( a ) ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var output = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { var Z = S - ( i + j ) ; if ( Z >= 0 && Z <= K ) { output ++ ; } } } myout ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { input = input . split ( " " ) ; for ( var i = 0 ; i < 3 ; i ++ ) { input [ i ] = parseInt ( input [ i ] , 10 ) ; if ( input [ i ] == 5 || input [ i ] == 7 ) { continue ; } else { console . log ( ' NO ' ) ; return ; } } var b = input [ 0 ] + input [ 1 ] + input [ 2 ] ; if ( b == 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const receive = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / / ) ; const main = input => { const A = input . map ( x => Number ( x ) ) ; const arr = A . sort ( ( x , y ) => y - x ) ; const ans = arr [ 0 ] - arr [ 2 ] ; console . log ( ans ) ; } ; main ( receive ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var g_input = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { g_input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { main ( g_input . split ( / \r?\n / ) ) ; } ) ; function main ( inputs ) { var N = parseInt ( inputs [ 0 ] ) ; var vs = inputs [ 1 ] . split ( " " ) . map ( function ( a ) { return parseInt ( a ) ; } ) ; var max = 0 ; var min = 100000 ; for ( var i in vs ) { max = Math . max ( max , vs [ i ] ) ; min = Math . min ( min , vs [ i ] ) ; } console . log ( max - min ) ; }
' use strict ' ; var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) const N = Number ( inp . shift ( ) ) const X = inp [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { sum += X [ i ] } let ave = Math . round ( sum / N ) let cost = 0 for ( let i = 0 ; i < N ; i ++ ) { cost += Math . pow ( X [ i ] - ave , 2 ) } console . log ( cost ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { tmp = input . split ( " \n " ) ; tmp = tmp . map ( Number ) ; k = tmp [ 5 ] ; a = new Array ; for ( i = 0 ; i < 5 ; i ++ ) { for ( j = 0 ; j < 5 ; j ++ ) { a [ 5 * i + j ] = Math . abs ( tmp [ i ] - tmp [ j ] ) } } if ( Math . max . apply ( null , a ) > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) a = Number ( input [ 0 ] ) b = Number ( input [ 1 ] ) c = Number ( input [ 2 ] ) d = Number ( input [ 3 ] ) e = Number ( input [ 4 ] ) k = Number ( input [ 5 ] ) if ( ( ( b - a ) > k ) || ( ( c - a ) > k ) || ( ( d - a ) > k ) || ( ( e - a ) > k ) || ( ( c - b ) > k ) || ( ( d - b ) > k ) || ( ( e - b ) > k ) || ( ( d - c ) > k ) || ( ( e - c ) > k ) || ( ( e - d ) > k ) ) { console . log ( " :( " ) } else { console . log ( " Yay! " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( v => parseInt ( v ) ) const a = input [ 0 ] const b = input [ 1 ] const c = input [ 2 ] const d = input [ 3 ] if ( a * b >= c * d ) { console . log ( a * b ) } else { console . log ( c * d ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const dist = ( y , z ) => { let sum = 0 for ( let i = 0 ; i < y . length ; i ++ ) { sum += ( y [ i ] - z [ i ] ) ** 2 } return Math . sqrt ( sum ) } const Main = ( ) => { const [ N , D ] = nextIntArray ( ) let x = [ ] while ( hasNext ( ) ) { x . push ( nextIntArray ( ) ) } let cnt = 0 for ( let i = 0 ; i < x . length ; i ++ ) { for ( let j = i + 1 ; j < x . length ; j ++ ) { if ( i == j ) continue if ( Number . isInteger ( dist ( x [ i ] , x [ j ] ) ) ) cnt ++ } } console . log ( cnt ) } Main ( )
function Main ( input ) { var inp = input . split ( ' \n ' ) ; var c1 = inp [ 0 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var c2 = inp [ 1 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var c3 = inp [ 2 ] . split ( ' ' ) . map ( n => { return parseInt ( n . trim ( ) ) } ) ; var C = [ ] ; C [ 0 ] = c1 ; C [ 1 ] = c2 ; C [ 2 ] = c3 ; var x = [ ] ; var y = [ ] ; x [ 0 ] = 0 ; for ( var i = 0 ; i < 3 ; i ++ ) { y [ i ] = C [ 0 ] [ i ] - x [ 0 ] ; } for ( var i = 0 ; i < 3 ; i ++ ) { x [ i ] = C [ i ] [ 0 ] - y [ 0 ] ; } var good = true ; for ( var i = 0 ; i < 3 ; i ++ ) { for ( var j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] !== C [ i ] [ j ] ) { good = false ; } } } if ( good ) { console . log ( ' Yes ' ) ; } else { console . log ( ' No ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const numList0 = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; const N = numList0 [ 0 ] ; const D = numList0 [ 1 ] ; const xListList = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { var xList = input [ i + 1 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; xListList . push ( xList ) ; } var count = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { var xBaseList = xListList [ i ] ; for ( var j = i + 1 ; j < N ; j ++ ) { var doubleDistance = 0 ; xTargetList = xListList [ j ] ; for ( var k = 0 ; k < D ; k ++ ) { var y = xBaseList [ k ] ; var z = xTargetList [ k ] ; doubleDistance += ( y - z ) * ( y - z ) ; } if ( Number . isInteger ( Math . sqrt ( doubleDistance ) ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var array = input [ 0 ] . split ( " " ) ; array . sort ( ) ; console . log ( ( array [ 0 ] === " 5 " && array [ 1 ] === " 5 " && array [ 2 ] === " 7 " ) ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { function compareFunc ( a , b ) { return a - b ; } input = input . trim ( ) . split ( ' ' ) ; input . sort ( compareFunc ) ; a = input [ 1 ] - input [ 0 ] ; b = input [ 2 ] - input [ 1 ] ; ans = a + b ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var a = input . split ( " " ) [ 0 ] - 0 , b = input . split ( " " ) [ 1 ] - 0 ; if ( a <= 5 ) { console . log ( 0 ) ; } else if ( a <= 12 ) { console . log ( b / 2 ) ; } else { console . log ( b ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] ) ; var B = parseInt ( input [ 1 ] ) ; var result ; if ( 13 <= A && A <= 100 ) { result = B ; } else if ( 6 <= A && A <= 12 ) { result = B / 2 ; } else if ( 0 <= A && A <= 5 ) { result = 0 ; } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) N = inp . shift ( ) * 1 a = inp . shift ( ) . split ( ' ' ) . map ( x => x - 0 ) min = a [ 0 ] c = 1 for ( i = 1 ; i < N ; i ++ ) { if ( min > a [ i ] ) { c ++ min = a [ i ] } } console . log ( c )
function Main ( input ) { input = input . split ( ' \n ' ) var tmp = input [ 0 ] . split ( ' ' ) var N = tmp [ 0 ] var D = tmp [ 1 ] var calc = 0 var result = 0 for ( var i = 0 ; i < N - 1 ; i ++ ) { var number1 = input [ i + 1 ] . split ( ' ' ) for ( var j = 0 ; j < N - 1 - i ; j ++ ) { calc = 0 var number2 = input [ i + 2 + j ] . split ( ' ' ) for ( var k = 0 ; k < D ; k ++ ) { calc = calc + Math . pow ( Math . abs ( number1 [ k ] - number2 [ k ] ) , 2 ) } if ( Number . isInteger ( Math . sqrt ( calc ) ) ) { result ++ } } } console . log ( ' %d ' , result ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { input = input . split ( " \n " ) ; x = input [ 1 ] . split ( " " ) . map ( x => Number ( x ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var p = Math . round ( total / x . length ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . abs ( Math . pow ( ( x [ i ] - p ) , 2 ) ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var line = input [ 0 ] . split ( ' ' ) . sort ( ) ; console . log ( line . join ( ' ' ) === ' 1479 ' ? ' YES ' : ' NO ' ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
function Main ( S ) { var a = S . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) ; console . log ( Math . max ( ... a ) - Math . min ( ... a ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const input = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) const N = input [ 0 ] const P = input [ 1 ] let ans if ( N == 1 ) { ans = P } else { for ( let i = 0 ; Math . pow ( i , N ) <= P ; i ++ ) { if ( P % Math . pow ( i , N ) == 0 ) { ans = i } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function ( v ) { return v . reduce ( function add ( a , b ) { return a + b ; } ) ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { arg = arg . split ( " " ) . sort ( ( a , b ) => a - b ) ; console . log ( arg [ 2 ] - arg [ 0 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var a , b ; a = Number ( input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) [ 0 ] ) ; b = Number ( input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) [ 1 ] ) ; if ( a < 6 ) { console . log ( 0 ) ; } else if ( a < 13 ) { console . log ( b / 2 ) ; } else { console . log ( b ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( arg ) { const array = arg . trim ( ) . split ( " " ) ; const A = parseInt ( array [ 0 ] ) ; const B = parseInt ( array [ 1 ] ) ; const H = parseInt ( array [ 2 ] ) ; const M = parseInt ( array [ 3 ] ) ; const PI = Math . PI ; const th = ( ( H * 60 + M ) / 720 ) * 2 * PI ; const tm = ( M / 60 ) * 2 * PI ; let xh = A * Math . cos ( th ) ; let yh = A * Math . sin ( th ) ; let xm = B * Math . cos ( tm ) ; let ym = B * Math . sin ( tm ) ; let dx = xh - xm ; let dy = yh - ym ; let result = Math . sqrt ( dx * dx + dy * dy ) ; console . log ( result ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 0 ] * input [ 1 ] > input [ 2 ] * input [ 3 ] ) { console . log ( input [ 0 ] * input [ 1 ] ) } else { console . log ( input [ 2 ] * input [ 3 ] ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( ( args => { const [ [ K , S ] ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; let count = 0 ; for ( let x = Math . min ( K , S ) ; x >= 0 ; x -- ) { for ( let y = Math . min ( K , S - x ) ; y >= Math . max ( 0 , S - x - K ) ; y -- ) count ++ ; } return count . toString ( ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; const hour = ( args [ 2 ] - args [ 0 ] ) * 60 ; const minute = args [ 3 ] - args [ 1 ] ; const result = hour + minute - args [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var n = arr . shift ( ) - 0 ; var s = arr . shift ( ) . split ( " " ) ; var [ a , b ] = [ 0 , 0 ] ; s . forEach ( v => { if ( " ABCDEFGHIJKLM " . includes ( v ) ) a += 1 else if ( " NOPQRSTUVWXYZ " . includes ( v ) ) a -= 1 else if ( " abcdefghijklm " . includes ( v ) ) b += 1 else if ( " nopqrstuvwxyz " . includes ( v ) ) b -= 1 } ) ; str = " " ; if ( a > 0 ) str += " A " . repeat ( a ) ; else if ( a < 0 ) str += " N " . repeat ( a * - 1 ) ; if ( b > 0 ) str += " a " . repeat ( b ) ; else if ( b < 0 ) str += " n " . repeat ( b * - 1 ) ; console . log ( str . length ) ; console . log ( str ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) if ( input_lines [ 0 ] == 5 ) { count5 ++ } if ( input_lines [ 0 ] == 7 ) { count7 ++ } if ( input_lines [ 1 ] == 5 ) { count5 ++ } if ( input_lines [ 1 ] == 7 ) { count7 ++ } if ( input_lines [ 2 ] == 5 ) { count5 ++ } if ( input_lines [ 2 ] == 7 ) { count7 ++ } if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
" use strict " ; function main ( input ) { let n = parseInt ( input [ 0 ] ) ; let x = input [ 1 ] . trim ( ) . split ( " " ) ; for ( let i = 0 ; i < x . length ; i ++ ) { x [ i ] = parseInt ( x [ i ] ) ; } x . sort ( function ( a , b ) { return b - a ; } ) ; let sum = [ ] ; for ( let i = 0 ; i < x [ 0 ] + 1 ; i ++ ) { sum [ i ] = 0 ; for ( let j = 0 ; j < x . length ; j ++ ) { sum [ i ] += Math . pow ( ( i - x [ j ] ) , 2 ) ; } } console . log ( Math . min ( ... sum ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
( function ( a ) { console . log ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? ' YES ' : ' NO ' ) } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ) ) ;
function main ( input ) { param = input . split ( " " ) ; var hour = param [ 2 ] - param [ 0 ] ; var min = param [ 3 ] - param [ 1 ] ; if ( min < 0 ) { hour -= 1 ; min = min * ( - 1 ) ; min = 60 - min ; } const limit = ( hour * 60 ) + min var result = limit - param [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let [ a , b , c , d ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( Math . max ( a * b , c * d ) ) ;
function Main ( input ) { var inputs = input . split ( ' ' ) ; var K = Number ( inputs [ 0 ] ) ; var S = Number ( inputs [ 1 ] ) ; var count = 0 ; for ( var X = 0 ; X <= K ; X ++ ) { for ( var Y = 0 ; Y <= K ; Y ++ ) { var Z = ( S - X - Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var n = Number ( lines [ 0 ] ) ; var info = [ ] ; for ( i = 1 ; i <= n ; i ++ ) { var num = i ; var count = 0 ; while ( num % 2 == 0 ) { count ++ ; num = num / 2 ; } info . push ( count ) ; } var max = Math . max ( ... info ) ; var index = info . indexOf ( max ) ; console . log ( index + 1 ) ; } ) ;
function Main ( input ) { var line = input . split ( " \n " ) ; var N = Number ( line [ 0 ] ) ; var S = line [ 1 ] . split ( " " ) ; var ans = " Three " for ( var i = 0 ; i < N ; i ++ ) { if ( S [ i ] === " Y " ) ans = " Four " ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' \n ' ) let temp = input [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const N = temp [ 0 ] const M = temp [ 1 ] temp = input . slice ( 1 , M + 1 ) let arr = [ ] let aMap = new Map temp . forEach ( ( v ) => { let tmp = v . split ( ' ' ) . map ( i => parseInt ( i ) ) aMap . set ( tmp [ 1 ] , 0 ) if ( arr [ tmp [ 0 ] ] === undefined ) { arr [ tmp [ 0 ] ] = [ ] } arr [ tmp [ 0 ] ] . push ( tmp [ 1 ] ) } ) arr . forEach ( ( v , i ) => { v . sort ( ( a , b ) => a - b ) v . forEach ( ( num , j ) => { let def = ( ' 000000 ' + i . toString ( 10 ) ) . slice ( - 6 ) + ( ' 000000 ' + ( j + 1 ) . toString ( 10 ) ) . slice ( - 6 ) aMap . set ( num , def ) } ) } ) aMap . forEach ( val => console . log ( val ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
' use strict ' function Main ( input ) { let arr = input . split ( " \n " ) [ 0 ] . split ( " " ) ; let ans = 0 ; if ( arr [ 1 ] != 1 ) { ans = arr [ 0 ] - arr [ 1 ] ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( " \n " ) ; const aiueo = args [ 0 ] . split ( " " ) ; const N = parseInt ( aiueo [ 0 ] , 10 ) ; const D = parseInt ( aiueo [ 1 ] , 10 ) ; var arr = [ ] for ( var i = 0 ; i < N ; i ++ ) { arr [ i ] = [ ] ; var subArgs = args [ i + 1 ] . split ( " " ) for ( var j = 0 ; j < D + 1 ; j ++ ) { arr [ i ] . push ( parseInt ( subArgs [ j ] , 10 ) ) } } var kakunin = 0 ; function kyori ( arr1 , arr2 ) { var sum = 0 ; for ( var i = 0 ; i < D ; i ++ ) { sum = sum + Math . pow ( arr1 [ i ] - arr2 [ i ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( sum ) ) == true ) { return true } else { return false } } for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { if ( kyori ( arr [ i ] , arr [ j ] ) == true ) { kakunin ++ } } } console . log ( kakunin ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
' use strict ' function Main ( input ) { input = input . split ( " \n " ) ; let nums = input [ 1 ] . split ( " " ) ; let max = Math . max . apply ( null , nums ) ; let min = Math . min . apply ( null , nums ) ; let a = parseInt ( nums [ 0 ] ) ; let result = ( a - min ) + ( max - a ) ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var T = input [ 0 ] . split ( " " ) ; var A = input [ 1 ] . split ( " " ) ; var B = input [ 2 ] . split ( " " ) ; var T0 = T [ 0 ] ; var T1 = T [ 1 ] ; var A0 = A [ 0 ] ; var A1 = A [ 1 ] ; var B0 = B [ 0 ] ; var B1 = B [ 1 ] ; var Ma = T0 * ( A0 - B0 ) ; var Mb = ( T1 * A1 + Ma ) - ( T1 * B1 ) ; if ( Math . sign ( Ma ) == Math . sign ( Mb ) ) { console . log ( 0 ) ; } else if ( Mb == 0 ) { console . log ( " infinity " ) ; } else { Ma = Math . abs ( Ma ) ; Mb = Math . abs ( Mb ) ; if ( Ma % Mb == 0 ) { console . log ( ( Ma / Mb ) * 2 ) ; } else { console . log ( Math . ceil ( Ma / Mb ) * 2 - 1 ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var arr = input . split ( " " ) . map ( x => parseInt ( x , 10 ) ) ; var a = Math . max . apply ( null , arr ) ; var b = Math . min . apply ( null , arr ) ; console . log ( a - b ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var num = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; for ( var i = num . length - 1 ; i >= 0 ; i -- ) { if ( input >= num [ i ] ) { console . log ( num [ i ] ) ; return ; } } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines = Number ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { console . log ( lines * lines * lines ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk . trim ( ) , 3 ) ) ; } ) ;
function Main ( input ) { " use strict " const temp = input . split ( " \n " ) ; const n = parseInt ( temp . shift ( ) ) ; const positions = temp . shift ( ) . split ( " " ) . map ( x => parseInt ( x ) ) ; let minVariance = Infinity for ( let i = 1 ; i <= 100 ; i ++ ) { const variance = positions . map ( x => ( x - i ) * ( x - i ) ) . reduce ( ( a , b ) => a + b ) minVariance = Math . min ( minVariance , variance ) } console . log ( minVariance ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) console . log ( Math . pow ( x , 3 ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , 6 ) ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; for ( let i = 0 ; i < antennas . length ; i ++ ) { for ( let j = i + 1 ; j < antennas . length ; j ++ ) { if ( antennas [ j ] - antennas [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( INPUT ) => { const N = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) if ( N [ 0 ] <= 5 ) { console . log ( 0 ) } else if ( N [ 0 ] <= 12 ) { console . log ( N [ 1 ] / 2 ) } else { console . log ( N [ 1 ] ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . trim ( ) . split ( ' \n ' ) ; var ret = lines . filter ( function ( line ) { var items = line . split ( ' , ' ) ; var w = + items [ 1 ] ; var h = + items [ 2 ] ; return w / ( h * h ) >= 25 ; } ) ; ret . forEach ( function ( line ) { console . log ( line . split ( ' , ' ) [ 0 ] ) ; } ) ;
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( cube ( x ) ) ; } ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var last = input . length - 1 ; var limit ; var max ; if ( input [ last ] === " " ) { limit = input [ last - 1 ] ; max = input [ last - 2 ] ; } else { limit = input [ last ] ; max = input [ last - 1 ] ; } var min = input [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; process . stdin . on ( " data " , function ( chunk ) { var input = chunk . trim ( ) . split ( " \n " ) ; for ( var i = 0 ; i < input . length ; i ++ ) { var pairs = input [ i ] . trim ( ) . split ( " " ) ; var a = parseInt ( pairs [ 0 ] ) ; var b = parseInt ( pairs [ 1 ] ) ; console . log ( a + b ) ; } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N1 = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var N2 = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var N3 = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; var N4 = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; N = new Array ( N1 , N2 , N3 , N4 ) ; var ans = " NO " ; N . sort ( function ( a , b ) { return a - b ; } ) ; NN = ( parseInt ( N . join ( " " ) ) ) ; if ( NN == 1479 ) { ans = " YES " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const p = s => console . log ( s ) ; function main ( input ) { let a , b , h , m ; [ a , b , h , m ] = input [ 0 ] . trim ( ) . split ( " " ) . map ( i => parseInt ( i ) ) ; let ans = Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( 2 * Math . PI * ( h / 12 + ( m / 60 ) / 12 - ( m / 60 ) ) ) ) ; p ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) const t1 = args [ 0 ] * args [ 1 ] const t2 = args [ 2 ] * args [ 3 ] if ( t1 >= t2 ) console . log ( t1 ) else console . log ( t2 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var abhm = lines [ 0 ] . split ( ' ' ) ; var a = Number ( abhm [ 0 ] ) ; var b = Number ( abhm [ 1 ] ) ; var h = Number ( abhm [ 2 ] ) ; var m = Number ( abhm [ 3 ] ) ; var hkaku = h * 30 + m * 0.5 ; var mkaku = m * 6 ; var kaku = Math . abs ( hkaku - mkaku ) ; var kaku2 = 360 - Math . abs ( hkaku - mkaku ) ; kaku = Math . min ( kaku2 , kaku ) ; kaku = Math . cos ( kaku * ( Math . PI / 180 ) ) ; var ans = ( a * a ) + ( b * b ) - ( 2 * a * b * kaku ) ; console . log ( Math . sqrt ( ans ) ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , 6 ) ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; for ( let i = 0 ; i < antennas . length ; i ++ ) { for ( let j = i + 1 ; j < antennas . length ; j ++ ) { if ( antennas [ j ] - antennas [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var readStream = require ( ' fs ' ) . ReadStream ( ' /dev/stdin ' ) ; var readlineInterface = require ( ' readline ' ) . createInterface ( { input : readStream , output : { } } ) ; readlineInterface . on ( ' line ' , function ( line ) { var n = parseFloat ( line ) ; console . log ( n * n * n ) ; } ) ;
" use strict " ; const main = arg => { const S = arg . split ( " \n " ) [ 1 ] . split ( " " ) ; const set = new Set ( S ) ; console . log ( set . size == 4 ? " Four " : " Three " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; rl . on ( ' line ' , function ( n ) { console . log ( n * n * n ) ; } ) ;
" use strict " ; const main = input => { const n = parseInt ( input [ 0 ] . split ( ' ' ) [ 0 ] ) , d = parseInt ( input [ 0 ] . split ( ' ' ) [ 1 ] ) ; let x = new Array ( ) ; for ( let i = 0 ; i < n ; i ++ ) { x [ i ] = input [ i + 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; } let ans = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let value = 0 ; for ( let k = 0 ; k < d ; k ++ ) { value += Math . pow ( Math . abs ( x [ i ] [ k ] - x [ j ] [ k ] ) , 2 ) ; } value = Math . pow ( value , 0.5 ) ; if ( Number . isInteger ( value ) ) { ans ++ ; } } } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function Main ( input ) { var number = parseInt ( input ) ; console . log ( number * number * number ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; temp = input [ 1 ] . split ( " " ) ; len = input [ 0 ] ; min = 1001 ; max = 0 ; for ( var i = 0 ; i < len ; i += 1 ) { if ( min > temp [ i ] ) { min = temp [ i ] ; } if ( max < temp [ i ] ) { max = temp [ i ] ; } } console . log ( max - min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
( function ( input ) { var toMin = function ( str ) { var x = str . split ( ' : ' ) ; return parseInt ( x [ 0 ] ) * 60 + parseInt ( x [ 1 ] ) ; } ; var lines = input . split ( ' \n ' ) ; var line = lines . shift ( ) . split ( ' ' ) ; var n = line [ 0 ] ; var t = line [ 1 ] ; var last = 86400 ; var output = [ ] ; for ( var i = 0 ; i < n ; ++ i ) { var line = lines [ i ] . split ( ' ' ) ; var diff = toMin ( line [ 0 ] ) - last ; if ( diff >= t ) { output . push ( line [ 1 ] + ' ' + diff ) ; } last = toMin ( line [ 2 ] ) ; } console . log ( output . length ) ; for ( var i = 0 ; i < output . length ; ++ i ) { console . log ( output [ i ] ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ) ;
' use strict ' ; function main ( stdin ) { const input = stdin . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; const N = input [ 0 ] ; const K = input [ 1 ] ; let ans = N - K ; if ( K === 1 ) ans = 0 ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; var a = parseInt ( args [ 0 ] ) var b = parseInt ( args [ 1 ] ) var c = parseInt ( args [ 2 ] ) var d = parseInt ( args [ 3 ] ) var e = parseInt ( args [ 4 ] ) var k = parseInt ( args [ 5 ] ) var distance = ( e - a ) if ( distance <= k ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const Main = ( ) => { const N = nextInt ( ) const P = nextIntArray ( ) let min = P [ 0 ] let cnt = 0 for ( let el of P ) { if ( el <= min ) { cnt ++ } min = Math . min ( min , el ) } console . log ( cnt ) } Main ( )
const main = function ( input ) { var tasks = input . split ( " " ) . map ( i => parseInt ( i ) ) ; var min = 100 * 3 ; for ( var i = 0 ; i < 3 ; i ++ ) { var pat1 = Math . abs ( tasks [ i ] - tasks [ ( i - 1 ) % 3 ] ) + Math . abs ( tasks [ ( i - 1 ) % 3 ] - tasks [ ( i + 1 ) % 3 ] ) ; var pat2 = Math . abs ( tasks [ i ] - tasks [ ( i + 1 ) % 3 ] ) + Math . abs ( tasks [ ( i + 1 ) % 3 ] - tasks [ ( i - 1 ) % 3 ] ) ; var smaller = Math . min ( pat1 , pat2 ) ; if ( min > smaller ) min = smaller ; } console . log ( min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const tan = ( x ) => { return Math . tan ( x ) ; } function main ( arg ) { let [ A , B , H , M ] = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) const aTh = ( H + M / 60 ) * 360 / 12 const bTh = M * 360 / 60 let th = Math . abs ( aTh - bTh ) console . log ( solve ( A , B , th ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function solve ( a , b , th ) { let c2 = Math . pow ( a , 2 ) + Math . pow ( b , 2 ) - 2 * a * b * Math . cos ( th * ( Math . PI / 180 ) ) return Math . sqrt ( c2 ) }
process . stdin . resume ( ) ; process . stdin . setEncoding ( " UTF-8 " ) ; process . stdin . on ( ' data ' , function ( chunk ) { var arr = chunk . trim ( ) . split ( ' \n ' ) ; arr . forEach ( function ( v ) { var a = ( v . split ( " " ) [ 0 ] ) ; var b = ( v . split ( " " ) [ 1 ] ) ; var result = Number ( a ) + Number ( b ) ; console . log ( result ) ; } ) } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
var m = input => { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function parseInput ( input ) { const values = [ ] in put . split ( ' \n ' ) . forEach ( row => { const list = row . split ( ' ' ) list . forEach ( v => values . push ( v ) ) } ) return values } function getInput ( ) { return parseInput ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) } function spend ( Xi , P ) { return Math . pow ( Xi - P , 2 ) } ; ( function main ( ) { const input = getInput ( ) const N = + input [ 0 ] var min = Number . MAX_SAFE_INTEGER for ( var p = 1 ; p <= 100 ; p ++ ) { var s = 0 for ( var i = 1 ; i <= N ; i ++ ) { s += spend ( + input [ i ] , p ) } if ( min > s ) { min = s } } console . log ( min ) } ) ( )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) . map ( v => v . split ( ' ' ) ) const N = parseInt ( input [ 0 ] [ 0 ] , 10 ) const D = parseInt ( input [ 0 ] [ 1 ] , 10 ) const p = input . slice ( 1 ) let count = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let sum = 0 for ( let k = 0 ; k < D ; k ++ ) { sum += Math . pow ( p [ i ] [ k ] - p [ j ] [ k ] , 2 ) } const sqrt = Math . sqrt ( sum ) if ( sqrt === Math . floor ( sqrt ) ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) if ( args [ 0 ] === ' 5 ' && args [ 1 ] === ' 5 ' && args [ 2 ] === ' 7 ' ) console . log ( ' YES ' ) else if ( args [ 0 ] === ' 7 ' && args [ 1 ] === ' 5 ' && args [ 2 ] === ' 5 ' ) console . log ( ' YES ' ) else if ( args [ 0 ] === ' 5 ' && args [ 1 ] === ' 7 ' && args [ 2 ] === ' 5 ' ) console . log ( ' YES ' ) else console . log ( ' NO ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) ; console . log ( Math . pow ( inputs , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " NoSuchElementException:次に要素は無いよ";} var returnOb j = thi .list[thi . ndex ] ; th i s.in d ex++; r turn retur nO b ; }, " asNext" : u n t ion(){r e u n (this. i n d ex < t i s.ma x );} } M in() ; fu n c t o nex t ( ) return o j.ne x t ( );} fu cti o n ha s N e x (){retur obj.ha s N e xt();} fun c tion my o u t ( ){consol .log( t ) ; } functi o n m y e r r ( ){consol .erro r ( t ) ;} func t ion m y c o n v i,no){tr {switc h ( n o) { c ase 1:retu r n p a rseI t ( i);cas 2:retur n i . spli ( " ");ca e 4:ret u r n i . spli ( " ").ma ( ( a)=>N u m b e r ( a)) ; c a s e 6:retu r n i . spli ( " ");cas 7 :retu r n i . spli ( " ").map ( a )=>Nu m b e r ( a)) ; c a s e 8:retu r n i . join " ");cas 9 :ret u r n i . join " \ n");ca e 0:re t u rn i . join " " );defa l t :ret u r n i ;}}catc h (e){re u r n i;}} f u n c tion M i n ( ) var N = myco n v ( ext ) 1 ; var l ist = m y c o v(n xt() 4 ; list . sort ( f u n c t on(a , b){ r eturn a - b ; } ; var u p t 1 0 000 0000; o (var i = 1; <= 100 + ) { v r um = 0 ; f o (va j ; < N ; j + { s u = M a h .p o w i - li t[j] , 2); } o tput = M a t h m n(outp t sum) ; } m yout(o u tpu t )
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var v = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { v [ i ] = Number ( lines [ i ] ) ; } var k = Number ( lines [ 5 ] ) ; for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( k < Math . abs ( v [ i ] - v [ j ] ) ) { console . log ( " :( " ) ; return ( 0 ) ; } } } console . log ( " Yay! " ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( f ) { console . log ( f * f * f ) ; } ) ;
function Main ( input ) { console . log ( input . split ( " \n " ) [ 4 ] - input . split ( " \n " ) [ 0 ] <= input . split ( " \n " ) [ 5 ] ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var A = parseFloat ( input [ 0 ] ) ; var B = parseFloat ( input [ 1 ] ) ; var H = parseFloat ( input [ 2 ] ) ; var M = parseFloat ( input [ 3 ] ) ; var rad = 6 ; var Hrad = H * 5 * rad + ( 30 * M ) / 60 ; var Mrad = M * rad ; var A2 = Math . pow ( A , 2 ) ; var B2 = Math . pow ( B , 2 ) ; var cos = Math . cos ( ( Hrad - Mrad ) * ( Math . PI / 180 ) ) ; var l = Math . sqrt ( A2 + B2 - 2 * A * B * cos ) ; console . log ( l ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; var list = input . split ( " " ) ; var jHari = parseInt ( list [ 0 ] ) ; var fHari = parseInt ( list [ 1 ] ) ; var ji = parseInt ( list [ 2 ] ) ; var fun = parseInt ( list [ 3 ] ) ; function deg ( deg ) { return ( deg * Math . PI / 180 ) ; } var posJ = [ Math . cos ( deg ( ji * 30 + fun * 0.5 ) ) * jHari , Math . sin ( deg ( ji * 30 + fun * 0.5 ) ) * jHari ] ; var posF = [ Math . cos ( deg ( fun * 6 ) ) * fHari , Math . sin ( deg ( fun * 6 ) ) * fHari ] ; function kyori ( ax , ay , bx , by ) { return ( Math . sqrt ( ( ax - bx ) ** 2 + ( ay - by ) ** 2 ) ) ; } var answer = kyori ( posJ [ 0 ] , posJ [ 1 ] , posF [ 0 ] , posF [ 1 ] ) ; console . log ( answer . toString ( ) ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) . trim ( ) . split ( " \n " ) ) ; function main ( input ) { const num = parseInt ( input . shift ( ) ) ; input = input [ 0 ] . split ( " " ) . map ( Number ) ; const minPosition = Math . min ( ... input ) ; const maxPosition = Math . max ( ... input ) ; let sumCon = [ ] ; for ( let i = minPosition ; i <= maxPosition ; i ++ ) { let result = 0 ; for ( let f = 0 ; f < num ; f ++ ) { result += Math . pow ( input [ f ] - i , 2 ) ; } sumCon . push ( result ) ; } console . log ( Math . min ( ... sumCon ) ) ; }
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) var x = parseInt ( input ) console . log ( x * x * x )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; const lines = input . split ( ' \n ' ) ; const y = lines [ 5 ] ; if ( lines [ 4 ] - lines [ 0 ] <= lines [ 5 ] ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
function main ( ) { var x = input [ 0 ] ; console . log ( x * x * x ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
' use strict ' function main ( input ) { input = input . split ( ' ' ) let a = input [ 0 ] * input [ 1 ] let b = input [ 2 ] * input [ 3 ] if ( a <= b ) { console . log ( b ) } else { console . log ( a ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const arr = input . split ( ' ' ) . map ( m => Number ( m ) ) const sum = arr . reduce ( ( p , c ) => p * c ) console . log ( ( sum === 175 ) ? ' YES ' : ' NO ' ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
let x = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ; x = parseInt ( x ) ; const pro = x * x * x ; console . log ( pro ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function C168 ( _input ) { var lines = _input . split ( " \n " ) ; var [ a , b , H , M ] = lines . shift ( ) . split ( ' ' ) . map ( v => v * 1 ) ; var min = ( H * 60 + M ) ; const radA = ( min * 0.5 ) * ( Math . PI / 180 ) ; const radB = ( M * 6 ) * ( Math . PI / 180 ) ; var posA = { x : Math . cos ( radA ) * a , y : Math . sin ( radA ) * a } ; var posB = { x : Math . cos ( radB ) * b , y : Math . sin ( radB ) * b } ; const x = ( posB . x - posA . x ) * ( posB . x - posA . x ) ; const y = ( posB . y - posA . y ) * ( posB . y - posA . y ) ; console . log ( Math . sqrt ( x + y ) ) ; } C168 ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } else if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) { m = index ; MAX = V [ 0 ] ; } } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { " use strict " const A = + lines [ 0 ] . split ( " " ) [ 0 ] ; const B = + lines [ 0 ] . split ( " " ) [ 1 ] ; if ( A >= 13 ) { console . log ( B ) } else if ( A >= 6 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { ans = 0 in put = input . trim ( ) . split ( " \n " ) ; s = input [ 0 ] . split ( ' ' ) . map ( ( n ) => ( parseInt ( n ) ) ) s . sort ( function ( a , b ) { return b - a } ) for ( i = 2 ; i > 0 ; i -- ) { ans += Math . abs ( s [ i ] - s [ i - 1 ] ) } console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const distance = input . pop ( ) in put = input . map ( ( val , index ) => { let result = true for ( let i = index ; i < input . length ; i ++ ) { if ( result ) { result = input [ i ] - val <= distance } } return result } ) console . log ( input . filter ( result => result === false ) . length === 0 ? ' Yay! ' : ' :( ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( x * x * x ) ;
let input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const h = parseInt ( input [ 2 ] , 10 ) ; const m = parseInt ( input [ 3 ] , 10 ) ; const pi = Math . PI ; const arga = ( h + m / 60 ) * pi / 6 ; const argb = pi * m / 30 ; const c = ( a ** 2 + b ** 2 - 2 * a * b * Math . cos ( arga - argb ) ) ** 0.5 ; console . log ( c ) ;
function Main ( input ) { input = input ; list = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; for ( i = 0 ; i < list . length ; i ++ ) { if ( list [ i ] <= input ) { console . log ( list [ i ] ) ; break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; const reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout , } ) ; let lines = [ ] ; reader . on ( " line " , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( " close " , ( ) => { const x = Number ( lines [ 0 ] ) ; console . log ( Math . pow ( x , 3 ) ) } ) ;
" use strict " ; const main = arg => { let K = arg . split ( " " ) [ 0 ] ; let S = arg . split ( " " ) [ 1 ] ; let cnt = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { let z = S - ( x + y ) ; if ( ( z <= K ) && ( z >= 0 ) ) { cnt ++ ; } } } console . log ( cnt ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var D = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; input . shift ( ) ; var X = input . map ( i => i . split ( " " ) . map ( i => parseInt ( i ) ) ) ; X . splice ( N , X . length - N ) ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var sum = 0 ; for ( var k = 0 ; k < D ; k ++ ) { sum += Math . pow ( X [ j ] [ k ] - X [ i ] [ k ] , 2 ) } if ( Math . sqrt ( sum ) == Math . floor ( Math . sqrt ( sum ) ) ) { ans ++ ; } } } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) . map ( a => ~ ~ a ) ; return Math . min ( ... [ " 012 " , " 021 " , " 102 " , " 120 " , " 201 " , " 210 " ] . map ( function ( a ) { a = a . split ( " " ) . map ( a => ~ ~ a ) ; return Math . abs ( input [ a [ 0 ] ] - input [ a [ 1 ] ] ) + Math . abs ( input [ a [ 1 ] ] - input [ a [ 2 ] ] ) } ) ) } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) let cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] const nexts = ( n ) => cin . slice ( cid , cid += n ) . map ( i => parseInt ( i ) ) const [ H1 , M1 , H2 , M2 , K ] = nexts ( 5 ) ; const time = H2 * 60 + M2 - ( H1 * 60 + M1 ) - K time > 0 ? console . log ( time ) : console . log ( 0 )
function main ( sti ) { let items = sti ; console . log ( Math . pow ( sti , 3 ) ) ; } var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; main ( input ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) var [ H1 , M1 , H2 , M2 , K ] = input [ 0 ] . split ( ' ' ) . map ( Number ) var diff = ( H2 * 60 + M2 ) - ( H1 * 60 + M1 ) console . log ( diff - K )
function Main ( input ) { tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var c = parseInt ( tmp [ 2 ] , 10 ) ; var bool = false ; var ans = " NO " ; if ( a === 7 && b === 5 && c === 5 ) { bool = true ; } else if ( a === 5 && b === 7 && c === 5 ) { bool = true ; } else if ( a === 5 && b === 5 && c === 7 ) { bool = true ; } if ( bool ) { ans = " YES " ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( / + / ) ; var t1 = ( input [ 0 ] - 0 ) * 60 + ( input [ 1 ] - 0 ) ; var t2 = ( input [ 2 ] - 0 ) * 60 + ( input [ 3 ] - 0 ) ; var k = input [ 4 ] ; var ret = t2 - t1 - k ; console . log ( ' %s ' , ret <= 0 ? 0 : ret ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; var kumiawase = [ [ 0 , 1 , 2 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 0 , 1 ] , [ 2 , 1 , 0 ] ] ; var main = function ( ) { var i ; var cost ; var mincost ; var splitlist ; splitlist = lines [ 0 ] . split ( " " ) ; mincost = 200 ; for ( i = 0 ; i < 6 ; i ++ ) { cost = Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 0 ] ] ) ) ; cost += Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 2 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) ) ; if ( mincost > cost ) { mincost = cost ; } } console . log ( mincost ) ; } reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { main ( ) ; } ) ;
const main = ( input ) => { let [ S , L , H , M ] = input . trim ( ) . split ( ' ' ) . map ( Number ) H = H % 12 M = M % 60 const l_angle = 360 * ( M / 60 ) const s_angle = 360 * ( H / 12 ) + ( 30 * ( M / 60 ) ) if ( Math . abs ( s_angle - l_angle === 180 ) ) return console . log ( S + L ) const dif = Math . abs ( s_angle - l_angle ) let angle = dif > 180 ? 360 - ( dif ) : dif angle = angle * Math . PI / 180 return console . log ( Math . sqrt ( ( S ** 2 ) + ( L ** 2 ) - ( 2 * S * L * Math . cos ( angle ) ) ) ) } process . env . MYTEST ? test ( ) : main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { let x = parseInt ( input , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; let A = input [ 0 ] . split ( ' ' ) [ 0 ] let B = input [ 0 ] . split ( ' ' ) [ 1 ] let C = input [ 0 ] . split ( ' ' ) [ 2 ] let D = input [ 0 ] . split ( ' ' ) [ 3 ] console . log ( Math . max ( A * B , C * D ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function Main ( input ) { K = Number ( input . split ( " " ) [ 0 ] ) ; S = Number ( input . split ( " " ) [ 1 ] ) ; count = 0 ; for ( i = 0 ; i < K + 1 ; i ++ ) { for ( j = 0 ; j < K + 1 ; j ++ ) { if ( i + j >= S - K && i + j <= S ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let k = next ( ) ; let s = next ( ) ; let ans = 0 ; let x , y , z for ( x = 0 ; x <= k ; x ++ ) for ( y = 0 ; y <= k ; y ++ ) if ( x + y <= s && x + y + k >= s ) { ans ++ } return ans ; }
function Main ( input ) { var a , b , c , d , e , k ; a = Number ( input . split ( ' \n ' ) [ 0 ] ) ; b = Number ( input . split ( ' \n ' ) [ 1 ] ) ; c = Number ( input . split ( ' \n ' ) [ 2 ] ) ; d = Number ( input . split ( ' \n ' ) [ 3 ] ) ; e = Number ( input . split ( ' \n ' ) [ 4 ] ) ; k = Number ( input . split ( ' \n ' ) [ 5 ] ) ; if ( Math . max ( e - a , e - b , d - a , e - c , d - b , c - a , e - d , d - c , c - b , b - a ) > k ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Picker ( input ) { var lines = input . split ( ' \n ' ) ; var fields = lines . reduce ( function ( all , line ) { return all . concat ( line . split ( ' ' ) ) ; } , [ ] ) ; var p = 0 ; return { int : function ( ) { return parseInt ( fields [ p ++ ] , 10 ) ; } , float : function ( ) { return parseFloat ( fields [ p ++ ] ) ; } , str : function ( ) { return fields [ p ++ ] ; } } ; } function Main ( input ) { var pick = Picker ( input ) ; var l = [ pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) ] . sort ( function ( a , b ) { return a - b ; } ) ; var k = pick . int ( ) ; var min = l [ 0 ] ; var max = l [ l . length - 1 ] ; console . log ( max - min <= k ? ' Yay! ' : ' :( ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( ) { console . log ( input [ 0 ] * input [ 0 ] * input [ 0 ] ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] ) ; for ( let h = 1 ; h <= 3500 ; h ++ ) { for ( let n = 1 ; n <= 3500 ; n ++ ) { let w = ( N * h * n ) / ( 4 * h * n - N * n - N * h ) ; if ( w % 1 === 0 && w > 0 ) { console . log ( h + " " + n + " " + w ) ; return ; } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
function PriorityQueue ( ) { this . heap = [ ] ; } PriorityQueue . prototype = { push : function ( x ) { var h = this . heap , i = h . length ++ , j ; while ( i ) { j = i - 1 >> 1 ; if ( h [ j ] <= x ) break ; h [ i ] = h [ j ] ; i = j ; } h [ i ] = x ; } , pop : function ( ) { var h = this . heap , r = h [ 0 ] , x = h . pop ( ) ; var i = 0 , k = h . length >> 1 , j ; while ( i < k ) { j = ( i << 1 ) + 1 ; if ( h [ j + 1 ] < h [ j ] ) ++ j ; if ( x <= h [ j ] ) break ; h [ i ] = h [ j ] ; i = j ; } if ( h . length ) h [ i ] = x ; return r ; } , size : function ( ) { return this . heap . length ; } , top : function ( ) { return this . heap [ 0 ] ; } , } ; function compareNumbers2 ( a , b ) { return a - b ; } function Main ( arg ) { var N = arg . split ( " \n " ) [ 0 ] - 0 ; var K = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) ; K . sort ( compareNumbers2 ) ; var ans = new PriorityQueue ( ) ; for ( var i = K [ 0 ] ; i <= K [ N - 1 ] ; i ++ ) { var tmp = 0 ; for ( var j = 0 ; j < N ; j ++ ) { tmp += ( K [ j ] - i ) * ( K [ j ] - i ) ; } ans . push ( tmp ) ; } console . log ( ans . top ( ) ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( Math . pow ( x , 3 ) )
function main ( input ) { input = input . split ( " " ) ; console . log ( ' %d ' , Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
function Main ( input ) { input = input . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) ; console . log ( input [ 2 ] - input [ 0 ] ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { var input = input . replace ( / \n / g , ' ' ) . split ( / \s+ / g ) . join ( ) ; var five , seven ; if ( ( / 5 / ) . test ( input ) && ( / 7 / ) . test ( input ) ) { five = input . match ( / 5 / g ) . length ; seven = input . match ( / 7 / g ) . length ; } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { var N = input [ 0 ] - 0 ; for ( var i = 0 ; Math . pow ( 2 , i ) <= N ; i ++ ) { } console . log ( Math . pow ( 2 , i - 1 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const K = s [ 0 ] ; const S = s [ 1 ] ; let counter = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { const z = S - x - y ; if ( z < 0 || z > K ) continue ; if ( ( x + y + z ) === S ) { counter += 1 ; } } } console . log ( counter ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = input . trim ( ) . split ( " " ) . map ( Number ) ; var cnt = 0 ; for ( var a = 1 ; a <= 9 ; a ++ ) { for ( var b = 1 ; b <= 9 ; b ++ ) { for ( var c = 1 ; c <= 9 ; c ++ ) { for ( var d = 1 ; d <= 8 ; d ++ ) { for ( var e = 1 ; e <= 9 ; e ++ ) { for ( var f = 1 ; f <= 9 ; f ++ ) { var z = ( ( a + c + f + ( b + e ) * 10 + d * 100 ) + " " ) . split ( " " ) . map ( Number ) ; if ( z . length != 3 ) continue ; z = [ a , b , c , d , e , f ] . concat ( z ) ; var flag = z . every ( function ( v , i ) { return ( x [ i ] == v || x [ i ] == - 1 ) && ( z . indexOf ( i + 1 ) >= 0 ) ; } ) ; if ( flag ) cnt ++ ; } } } } } } console . log ( cnt ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; var input_string = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { var lines = input_string . split ( ' \n ' ) ; main ( lines . slice ( 0 , lines . length - 1 ) ) ; } ) ; function main ( lines ) { lines . forEach ( function ( x ) { console . log ( Math . pow ( parseInt ( x ) , 3 ) ) ; } ) ; }
function Main ( input ) { input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp [ 0 ] , 10 ) ; var M = parseInt ( tmp [ 1 ] , 10 ) ; var inputArray = getInputArray ( input , N , M ) ; sortEachCol ( inputArray ) ; setCode2InputArray ( inputArray ) ; sortEachColIndex ( inputArray ) ; for ( var i = 0 ; i < inputArray . length ; i ++ ) { console . log ( zeroPaddingSixDigit ( inputArray [ i ] . p ) + zeroPaddingSixDigit ( inputArray [ i ] . code ) ) ; } } function setCode2InputArray ( inputArraySorted ) { var indexArray = new Array ( inputArraySorted . length ) ; inputArraySorted . forEach ( function ( element ) { var p = element . p ; indexArray [ p ] = indexArray [ p ] === undefined ? 0 : indexArray [ p ] + 1 ; element . code = indexArray [ p ] + 1 ; } ) ; } function sortEachCol ( inputArray ) { inputArray . sort ( function ( a , b ) { return a . value - b . value ; } ) ; } function sortEachColIndex ( inputArray ) { inputArray . sort ( function ( a , b ) { return a . index - b . index ; } ) ; } function getInputArray ( input , N , M ) { var inputArray = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var tmp = input [ i + 1 ] . split ( " " ) ; if ( tmp . length !== 2 ) { continue ; } var p = parseInt ( tmp [ 0 ] , 10 ) ; var value = parseInt ( tmp [ 1 ] , 10 ) ; inputArray . push ( { index : i , value : value , p : p } ) ; } return inputArray ; } function zeroPaddingSixDigit ( num ) { return ( ' 000000 ' + num ) . slice ( - 6 ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const identity = v => v const always = v => _ => v const join = sep => array => array . join ( sep ) const split = sep => str => str . split ( sep ) const print = fun => ( f , v ) => fun ( f ( v ) ) const power = m => n => Math . pow ( n , m ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const n = parseInt ( inputs [ 0 ] , 10 ) const result = power ( 3 ) ( n ) const display = print ( console . log ) display ( identity , result ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var X = Number ( inputs ) ; console . log ( Math . pow ( X , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi ++ ) { for ( let yi = 0 ; yi <= k ; yi ++ ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = Number ( stdin ) ; console . log ( x * x * x ) ;
function main ( input ) { var array = input . split ( ' ' ) ; var sortedArray = array . sort ( compareNumbers ) ; var counter = 0 ; for ( var i = 1 ; i < sortedArray . length ; i ++ ) { counter += sortedArray [ i ] - sortedArray [ i - 1 ] ; } console . log ( counter ) ; } function compareNumbers ( a , b ) { return a - b ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = arg => { const [ a , b , h , m ] = arg . trim ( ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( x => Number ( x ) ) ; const minuteDeg = m / 60 ; const hourDeg = ( h / 12 + m / 720 ) ; console . log ( Math . sqrt ( a ** 2 + b ** 2 - 2 * a * b * Math . cos ( Math . abs ( minuteDeg - hourDeg ) * 2 * Math . PI ) ) ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( Number ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi ++ ) { for ( let yi = 0 ; yi <= k ; yi ++ ) { const diff = s - xi - yi if ( diff >= 0 && diff <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { var str = input . split ( " " ) ; var fee ; if ( 13 <= str [ 0 ] ) { fee = str [ 1 ] ; } else if ( 6 <= str [ 0 ] && str [ 0 ] < 13 ) { fee = str [ 1 ] / 2 ; } else { fee = 0 ; } console . log ( fee ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function m ( input ) { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
var toInt = x => parseInt ( x , 10 ) ; var toIntArr = arr => arr . map ( x => toInt ( x ) ) ; var abs = x => x > 0 ? x : - x ; function min ( ) { var rest = arguments , val = rest [ 0 ] ; for ( var i = 1 ; i < rest . length ; i ++ ) if ( rest [ i ] < val ) val = rest [ i ] ; return val } function max ( ) { var rest = arguments , val = rest [ 0 ] ; for ( var i = 1 ; i < rest . length ; i ++ ) if ( rest [ i ] > val ) val = rest [ i ] ; return val } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( input ) { var input = input . split ( ' \n ' ) ; input = input [ 0 ] . split ( ' ' ) ; var as = toIntArr ( input ) . sort ( function ( a , b ) { return a - b } ) ; console . log ( as [ 2 ] - as [ 0 ] ) ; }
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const K = parseInt ( args [ 0 ] , 10 ) ; const S = parseInt ( args [ 1 ] , 10 ) ; let count = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp0 = input [ 0 ] . split ( " " ) ; tmp1 = input [ 1 ] . split ( " " ) ; var n = parseInt ( tmp0 [ 0 ] , 10 ) ; var X = [ ] ; for ( i = 0 ; i < n ; i ++ ) { var r = parseInt ( tmp1 [ i ] , 10 ) ; X [ i ] = r ; } var min = Math . min ( ... X ) ; var max = Math . max ( ... X ) ; var XX = [ ] ; var total = 0 ; for ( l = min ; l <= max ; l ++ ) { for ( i = 0 ; i < n ; i ++ ) { var x = X [ i ] ; var a = x - l ; total = total + a * a ; } XX [ l ] = total ; var total = 0 ; } XX . splice ( 0 , min ) ; var ans = Math . min ( ... XX ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const items = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) const itemSet = new Set ( items ) if ( itemSet . size === 4 ) { console . log ( ' Four ' ) } else { console . log ( ' Three ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; const N = parseInt ( input [ 0 ] ) ; const X = input [ 1 ] . split ( " " ) . map ( v => parseInt ( v ) ) ; t = X . reduce ( ( p , c ) => p + c ) ; av = Math . round ( t / N ) ; total = 0 ; X . forEach ( v => { total += Math . pow ( v - av , 2 ) ; } ) ; console . log ( total ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const a = input . split ( " " ) . map ( Number ) ; console . log ( ( a [ 0 ] * a [ 1 ] * a [ 2 ] == 175 ? " YES " : " NO " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { const tmp = input . trim ( ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) ; const K = Number ( tmp [ 0 ] ) ; const S = Number ( tmp [ 1 ] ) ; let result = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { const z = S - x - y ; if ( z >= 0 && z <= K ) { result ++ ; } } } console . log ( result ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function Main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( Number ) ; const k = input [ 0 ] ; const s = input [ 1 ] ; let ret = 0 ; for ( let x = 0 ; x <= k ; ++ x ) { for ( let y = 0 ; y <= k ; ++ y ) { let z = s - x - y ; if ( 0 <= z && z <= k ) ++ ret ; } } console . log ( ret ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = ~ ~ arg [ 0 ] ; const a = arg [ 1 ] . split ( " " ) . map ( n => ~ ~ n ) . sort ( ( a , b ) => a - b ) ; console . log ( Math . max ( ... a ) - Math . min ( ... a ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) var araresN = parseInt ( input [ 0 ] ) var arares = input [ 1 ] . split ( " " ) console . log ( arares . indexOf ( " Y " ) == - 1 ? " Three " : " Four " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ K - 1 ; $ i ++ ) { $ a [ ] = 1 ; $ N -- ; } $ a [ ] = $ N ; echo max ( $ a ) - min ( $ a ) ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; define ( " n " , 3 ) ; echo pow ( $ stdin , n ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ k ) ; if ( $ k == 1 ) { echo ( 0 ) ; } else { echo ( $ n - $ k ) ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ P = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ret = 1 ; $ min = $ P [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ min >= $ P [ $ i ] ) { $ ret ++ ; } $ min = min ( $ min , $ P [ $ i ] ) ; } printf ( " %d \n " , $ ret ) ;
<?php $ input = explode ( " " , fgets ( STDIN ) ) ; $ sumA = $ input [ 0 ] * $ input [ 1 ] ; $ sumB = $ input [ 2 ] * $ input [ 3 ] ; if ( $ sumA >= $ sumB ) { echo $ sumA ; } else { echo $ sumB ; } ?>
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input [ ] = trim ( fgets ( STDIN ) ) ; } $ q = trim ( fgets ( STDIN ) ) ; $ bool = false ; $ n = 1 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ n ; $ j < 5 ; $ j ++ ) { $ dis = $ input [ $ j ] - $ input [ $ i ] ; if ( $ dis > $ q ) { $ bool = true ; } } $ n ++ ; } if ( $ bool ) echo " :( " ; else echo " Yay! " ; ?>
<?php function getKyori ( $ x1 , $ y1 , $ x2 , $ y2 ) { return sqrt ( ( $ x1 - $ x2 ) ** 2 + ( $ y1 - $ y2 ) ** 2 ) ; } $ n = intval ( fgets ( STDIN ) ) ; $ positions = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ positions [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ kyoriArray = [ ] ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ kyoriArray [ ] = getKyori ( $ positions [ $ i ] [ 0 ] , $ positions [ $ i ] [ 1 ] , $ positions [ $ j ] [ 0 ] , $ positions [ $ j ] [ 1 ] ) ; } } $ average = array_sum ( $ kyoriArray ) / count ( $ kyoriArray ) ; echo $ average * ( $ n - 1 ) ;
<?php [ $ a , $ b , $ h , $ m ] = array_map ( function ( string $ string ) : int { return ( int ) $ string ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ α _PI bs( 6 0 h 1 m ) 2 0; cho qrt( $ a * b * a b os( $ α )) ;
<?php define ( ' N ' , 3 ) ; $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , N ) . " \n " ;
<?php list ( $ a , $ v ) = ints ( ) ; list ( $ b , $ w ) = ints ( ) ; list ( $ t ) = ints ( ) ; $ D = abs ( $ a - $ b ) ; $ V = $ v - $ w ; if ( $ D === 0 ) exit ( ' YES ' ) ; if ( $ V <= 0 ) exit ( ' NO ' ) ; echo $ D / $ V <= $ t ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a <= 5 ) { $ b = 0 ; } elseif ( $ a <= 12 ) { $ b /= 2 ; } echo $ b ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) . " \n " ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ s [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ ans = ' Yay! ' ; $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i ; $ j < 5 ; $ j ++ ) { $ n = abs ( $ s [ $ i ] - $ s [ $ j ] ) ; if ( $ n > $ k ) { $ ans = ' :( ' ; break ; } } } echo $ ans ; ?>
<?php $ a = fgets ( STDIN ) ; fgets ( STDIN ) ; fgets ( STDIN ) ; fgets ( STDIN ) ; $ e = fgets ( STDIN ) - $ a ; echo $ e > fgets ( STDIN ) ? " :( " : " Yay! " ;
<?php fscanf ( STDIN , " %d%d " , $ A , $ V ) ; fscanf ( STDIN , " %d%d " , $ B , $ W ) ; fscanf ( STDIN , " %d " , $ T ) ; $ d = abs ( $ A - $ B ) ; $ dv = $ V - $ W ; if ( $ dv <= 0 ) { echo " NO " ; } else { echo $ d <= $ T * $ dv ? " YES " : " NO " ; }
<?php $ antennas = [ ] ; for ( $ i = 0 ; $ i < 5 ; ++ $ i ) { $ antennas [ ] = trim ( fgets ( STDIN ) ) ; } fscanf ( STDIN , " %d " , $ k ) ; $ result = true ; for ( $ i = 0 ; $ i < 4 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < 5 ; ++ $ j ) { if ( $ antennas [ $ j ] - $ antennas [ $ i ] > $ k ) { $ result = false ; break ; } } } echo $ result ? ' Yay! ' : ' :( ' ;
<?php $ n = 5 ; while ( $ n -- ) fscanf ( STDIN , " %d " , $ p [ ] ) ; fscanf ( STDIN , " %d " , $ k ) ; echo $ p [ 4 ] - $ p [ 0 ] > $ k ? ' :( ' : ' Yay! ' ;
<?php while ( fscanf ( STDIN , " %d %d " , $ a , $ b ) > 0 ) { print ( $ a + $ b . " \n " ) ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ x [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i < $ j ) { $ tmp = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) $ tmp += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; if ( sqrt ( $ tmp ) == ( int ) sqrt ( $ tmp ) ) $ ans ++ ; } } echo $ ans ; ?>
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ;
<?php fscanf ( STDIN , ' %d ' , $ cnt ) ; $ people = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ limit = max ( $ people ) ; $ ans = 1000000 ; for ( $ i = 1 ; $ i <= $ limit ; $ i ++ ) { $ tmp = 0 ; foreach ( $ people as $ key => $ person ) { $ tmp += ( ( $ person - $ i ) ** 2 ) ; } $ ans = min ( $ ans , $ tmp ) ; } echo $ ans ;
<?php $ arg1 = fscanf ( STDIN , " %d%d%d " ) ; $ flag5 = 0 ; $ flag7 = 0 ; for ( $ i = 0 ; $ i < count ( $ arg1 ) ; $ i ++ ) { if ( $ arg1 [ $ i ] == 5 ) $ flag5 ++ ; else if ( $ arg1 [ $ i ] == 7 ) $ flag7 ++ ; } if ( $ flag5 == 2 && $ flag7 == 1 ) echo " YES \n " ; else echo " NO \n " ; ?>
<?php $ N = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ N ) ; if ( $ N == [ 5 , 5 , 7 ] ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ d == 1 ) { echo $ n * ( $ n - 1 ) / 2 ; } else { $ ans = 0 ; $ i = 0 ; while ( $ i < $ n ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ n - 1 ) { $ j = $ i + 1 ; while ( $ j < $ n ) { $ l = 0 ; $ k = 0 ; while ( $ k < $ d ) { $ l += pow ( ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) , 2 ) ; ++ $ k ; } $ l = sqrt ( $ l ) ; if ( $ l == floor ( $ l ) ) { ++ $ ans ; } ++ $ j ; } ++ $ i ; } echo $ ans ; }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ arr [ ] = trim ( fgets ( STDIN ) ) ; } $ array = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ a = strlen ( $ arr [ 0 ] ) ; if ( $ a == 2 ) { if ( $ arr [ $ i ] % 10 != 0 ) { $ array [ ] = 10 - ( $ arr [ $ i ] % 10 ) ; } else { $ array [ ] = 0 ; } } else { if ( $ arr [ $ i ] % 10 != 0 ) { $ array [ ] = 10 - ( $ arr [ $ i ] % 10 ) ; } else { $ array [ ] = 0 ; } } } $ end = array_keys ( $ array , max ( $ array ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i != $ end [ 0 ] ) { $ count += $ array [ $ i ] + $ arr [ $ i ] ; } } echo $ count + $ arr [ $ end [ 0 ] ] ; ?>
<?php $ t = trim ( fgets ( STDIN ) ) ; print $ t * $ t * $ t . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = array ( $ a , $ b , $ c ) ; $ count = array_count_values ( $ array ) ; if ( $ count [ 7 ] == 1 && $ count [ 5 ] == 2 ) { print ' YES ' ; } else { print ' NO ' ; }
<?php list ( $ hs , $ ms , $ he , $ me , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ( $ he - $ hs ) * 60 + $ me - $ ms - $ k ;
<?php for ( $ i = 0 ; $ i <= 5 ; $ i ++ ) { $ a [ ] = trim ( fgets ( STDIN ) ) ; } if ( $ a [ 4 ] - $ a [ 0 ] > $ a [ 5 ] ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ Scount = array_count_values ( $ S ) ; if ( count ( $ Scount ) == 3 ) { echo ' Three ' ; } else { echo ' Four ' ; } ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; $ town = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x , $ y ) ; $ town [ $ i ] = [ $ x , $ y ] ; } function dis ( $ t1 , $ t2 ) { $ a = ( $ t1 [ 0 ] - $ t2 [ 0 ] ) ** 2 ; $ b = ( $ t1 [ 1 ] - $ t2 [ 1 ] ) ** 2 ; return pow ( $ a + $ b , 1 / 2 ) ; } function createPermutation ( $ n , $ r ) { if ( ! $ r || $ n < $ r ) { return array ( ) ; } $ return = array ( ) ; $ n2 = $ n - 1 ; if ( $ r == 1 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ return [ ] = array ( $ i ) ; } return $ return ; } foreach ( createPermutation ( $ n2 , $ r ) as $ row ) { $ return [ ] = $ row ; } foreach ( createPermutation ( $ n2 , $ r - 1 ) as $ row ) { for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { $ return [ ] = array_merge ( array_slice ( $ row , 0 , $ i ) , array ( $ n2 ) , array_slice ( $ row , $ i ) ) ; } } return $ return ; } $ ret = createPermutation ( $ N , $ N ) ; $ dist = 0 ; foreach ( $ ret as $ rr ) { for ( $ j = 0 ; $ j < $ N - 1 ; $ j ++ ) { $ dist += dis ( $ town [ $ rr [ $ j ] ] , $ town [ $ rr [ $ j + 1 ] ] ) ; } } echo ( $ dist / count ( $ ret ) ) . " \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arare = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ arr = [ ] ; foreach ( $ arare as $ a ) { switch ( $ a ) { case ' P ' : $ arr [ 0 ] = true ; break ; case ' W ' : $ arr [ 1 ] = true ; break ; case ' G ' : $ arr [ 2 ] = true ; break ; case ' Y ' : $ arr [ 3 ] = true ; break ; } if ( count ( $ arr ) === 4 ) { echo ' Four ' . " \n " ; exit ; } } echo ' Three ' . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ x ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ ans = PHP_INT_MAX ; for ( $ k = 0 ; $ k < $ N ; $ k ++ ) { for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ k === 0 ) { $ b [ 0 ] [ $ i ] = $ a [ $ i ] ; } else { $ b [ $ k ] [ $ i ] = min ( $ b [ $ k - 1 ] [ $ i ] , $ a [ ( $ i - $ k + $ N ) % $ N ] ) ; } } $ ans = min ( $ ans , array_sum ( $ b [ $ k ] ) + $ k * $ x ) ; } echo $ ans ;
<?php fscanf ( STDIN , " %d%d%d " , $ c1 , $ c2 , $ c3 ) ; fscanf ( STDIN , " %d%d%d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d%d%d " , $ c31 , $ c32 , $ c33 ) ; $ diff_11 = $ c1 - $ c2 ; $ diff_21 = $ c21 - $ c22 ; $ diff_31 = $ c31 - $ c32 ; $ diff_1 = $ c2 - $ c3 ; $ diff_2 = $ c22 - $ c23 ; $ diff_3 = $ c32 - $ c33 ; if ( $ diff_11 == $ diff_21 && $ diff_21 == $ diff_31 && $ diff_1 == $ diff_2 && $ diff_2 == $ diff_3 ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ H1 , $ M1 , $ H2 , $ M2 , $ K ) ; $ up = $ H1 * 60 + $ M1 ; $ down = $ H2 * 60 + $ M2 ; $ answer = $ down - $ up - $ K ; print_r ( $ answer ) ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ numbers = array ( ) ; $ numbers [ ] = $ a ; $ numbers [ ] = $ b ; $ numbers [ ] = $ c ; sort ( $ numbers ) ; if ( $ numbers [ 0 ] == 5 and $ numbers [ 1 ] == 5 and $ numbers [ 2 ] == 7 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ input = fgets ( STDIN ) ; echo $ output = pow ( $ input , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ ave = ( $ a + $ b ) / 2 ; $ dec = ( $ a + $ b ) / 2 ; $ n = 0 ; while ( $ dec >= 1 ) { $ dec = $ dec - 1 ; } if ( $ dec > 0 ) { $ n = $ ave - $ dec + 1 ; echo $ n . " \n " ; } else { $ n = $ ave - $ dec ; echo $ n . " \n " ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; echo pow ( $ n , 3 ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; echo PHP_EOL ;
<?php list ( $ a , $ b ) = ints ( ) ; for ( $ i = 0 ; $ i <= 11 ; ++ $ i ) $ s [ $ i + 2 ] = $ i ; $ s [ 1 ] = $ i ; if ( $ s [ $ a ] > $ s [ $ b ] ) $ ans = ' Alice ' ; elseif ( $ s [ $ a ] < $ s [ $ b ] ) $ ans = ' Bob ' ; else $ ans = ' Draw ' ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ h as $ j => $ s ) { if ( $ s != $ c [ $ j ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php [ $ H1 , $ M1 , $ H2 , $ M2 , $ K ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; printf ( " %d " , $ H2 * 60 + $ M2 - ( $ H1 * 60 + $ M1 ) - $ K ) ;
<?php [ $ A , $ V ] = fscanf ( STDIN , " %d%d " ) ; [ $ B , $ W ] = fscanf ( STDIN , " %d%d " ) ; [ $ T ] = fscanf ( STDIN , " %d " ) ; if ( $ A === $ B ) { echo " YES " ; exit ; } if ( $ V <= $ W ) { echo " NO " ; exit ; } $ saD = abs ( $ B - $ A ) ; $ saV = $ V - $ W ; if ( $ saV * $ T >= $ saD ) { echo " YES " ; } else { echo " NO " ; }
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ q = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; foreach ( $ q as $ p ) { if ( $ n >= $ p ) exit ( " $ p " ) ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ n = $ sc -> nextInt ( ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = $ i + 1 ; } $ arr2 = $ arr ; $ key = 0 ; $ cnt_max = 0 ; for ( $ i = 0 ; $ i < count ( $ arr2 ) ; $ i ++ ) { $ cnt = 0 ; while ( $ arr2 [ $ i ] % 2 === 0 ) { $ arr2 [ $ i ] /= 2 ; $ cnt ++ ; } if ( $ cnt_max <= $ cnt ) { $ cnt_max = $ cnt ; $ key = $ i ; } } echo $ arr [ $ key ] ;
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a ** 3 , " \n " ;
<?php main ( ) ; function main ( ) { $ sumTime = 0 ; $ minFirstDigitValue = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ minFirstDigitValue = compareFirstDigit ( $ minFirstDigitValue , $ input ) ; $ sumTime += roundUpFirstDigit ( $ input ) ; } $ sumTime -= 10 - $ minFirstDigitValue ; printf ( $ sumTime ) ; } function roundUpFirstDigit ( $ value ) { return intval ( ceil ( $ value * 0.1 ) * 10 ) ; } function compareFirstDigit ( $ minFirstDigitValue , $ value ) { $ firstDigit = $ value % 10 ; if ( $ firstDigit < $ minFirstDigitValue && $ firstDigit > 0 ) { $ minFirstDigitValue = $ firstDigit ; } return $ minFirstDigitValue ; }
<?php $ num = fgets ( STDIN ) ; echo pow ( $ num , 3 ) . " \n " ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ person = trim ( fgets ( STDIN ) ) ; $ arr_place = explode ( " " , fgets ( STDIN ) ) ; $ sum = 0 ; foreach ( $ arr_place as $ place ) { $ sum += intval ( $ place ) ; } $ average = round ( $ sum / $ person ) ; $ power = 0 ; foreach ( $ arr_place as $ place ) { $ power += pow ( ( $ place - $ average ) , 2 ) ; } echo $ power ; ?>
<?php fscanf ( STDIN , ' %d ' , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count . PHP_EOL ;
<?php $ x = ( int ) fgets ( STDIN ) ; echo ( $ x * $ x * $ x ) ; echo ( " \n " ) ;
<?php $ num = trim ( fgets ( STDIN ) ) ; echo $ num ** 3 , PHP_EOL ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ w as $ j => $ s ) { if ( $ s != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php $ line = trim ( fgets ( STDIN ) ) ; if ( in_array ( $ line , [ ' 5 5 7 ' , ' 5 7 5 ' , ' 7 5 5 ' ] , true , ) ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php while ( true ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) break ; echo array_sum ( str_split ( $ x ) ) . " \n " ; }
<?php $ line = fgets ( STDIN ) ; echo $ line * $ line * $ line ; ?>
<?php $ list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ five = 0 ; $ seven = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ list [ $ i ] == 5 ) { $ five ++ ; } else if ( $ list [ $ i ] == 7 ) { $ seven ++ ; } } if ( $ five == 2 && $ seven == 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = fscanf ( STDIN , ' %d %d %d %d %d ' ) ; $ wakemin = $ h1 * 60 + $ m1 - ( $ h2 * 60 + $ m2 ) ; echo - $ wakemin - $ k ;
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ hs , $ ms , $ he , $ me , $ long ) ; $ dist = ( $ he * 60 + $ me ) - ( $ hs * 60 + $ ms ) ; if ( $ dist > $ long ) { echo $ dist - $ long ; } else { echo 0 ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ stdin , 3 ) ; echo $ result ; ?>
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; if ( $ A == 1 ) { $ A = 15 ; } if ( $ B == 1 ) { $ B = 15 ; } if ( $ A < $ B ) { echo " Bob " ; } elseif ( $ A > $ B ) { echo " Alice " ; } else { echo " Draw " ; } ?>
<?php $ inputs = explode ( " " , file_get_contents ( " php: $ inputs = array_map(intval, $ inputs ); list( $ a , $ b ) = $ inputs ; if ( $ a === $ b ) { echo " Draw " ; } else if ( ( $ a !== 1 && $ a < $ b ) || $ b == 1 ) { echo " Bob " ; } else { echo " Alice " ; }
<?php ini_set ( ' memory_limit ' , ' 1024M ' ) ; $ sc = new Scanner ( ) ; $ N = $ sc -> nextInt ( ) ; $ P = $ sc -> nextInt ( ) ; if ( $ N == 1 ) { echo $ P . PHP_EOL ; exit ; } if ( $ P == 1 ) { echo 1 . PHP_EOL ; exit ; } $ result = [ ] ; while ( $ P != 1 ) { $ i = 2 ; while ( $ i * $ i <= $ P ) { if ( $ P % $ i == 0 ) { while ( $ P % $ i == 0 ) { $ result [ $ i ] ++ ; $ P /= $ i ; } break ; } $ i ++ ; } if ( $ i * $ i > $ P ) { $ result [ $ P ] ++ ; $ P /= $ P ; } } $ ans = 1 ; foreach ( $ result as $ k => $ v ) { $ ans *= pow ( $ k , ( int ) ( $ v / $ N ) ) ; } echo $ ans . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php list ( $ k , $ s ) = ints ( ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; ++ $ x ) { for ( $ y = 0 ; $ y <= min ( $ s - $ x , $ k ) ; ++ $ y ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ cnt ++ ; } } echo $ cnt ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ d = fgets ( STDIN ) ; echo $ a [ 4 ] - $ a [ 0 ] <= $ d ? " Yay! " : " :( " ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ tmp ) ; $ array [ ] = $ tmp ; } fscanf ( STDIN , " %d " , $ K ) ; if ( max ( $ array ) - min ( $ array ) > $ K ) { echo " :( " ; } else { echo " Yay! " ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ res = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { $ k = $ S - $ i - $ j ; if ( $ k < 0 || $ k > $ K ) { continue ; } $ res ++ ; } } print " $ res \n " ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function be_able_to_reach ( $ from , $ to ) { $ time = $ to [ 0 ] - $ from [ 0 ] ; $ distance = abs ( $ to [ 1 ] - $ from [ 1 ] ) + abs ( $ to [ 2 ] - $ from [ 2 ] ) ; #var_dump($time,$distance); if($distance > $time) return false; if($distance % 2 == 0 && $time % 2 == 0) return true; if($distance % 2 == 1 && $time % 2 == 1) return true; return false; } $scan = new Scanner(); $A = $scan->nextInt(); $B = $scan->nextInt(); $cost = 0; if($A >= 13) $cost = $B; elseif($A >= 6) $cost = $B/2; else $cost = 0; print($cost);
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ array ) - min ( $ array ) ;
<?php fscanf ( STDIN , " %d " , $ a ) ; $ search = " %d " ; for ( $ i = 1 ; $ i < $ a ; $ i ++ ) { $ search .= " %d " ; } $ list = fscanf ( STDIN , $ search ) ; $ num = 1 ; $ limit = 0 ; foreach ( $ list as $ key => $ val ) { if ( $ key == 0 ) { $ limit = $ val ; continue ; } if ( $ limit > $ val ) { $ num += 1 ; $ limit = $ val ; } } echo $ num ;
<?php fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; $ min = $ arr [ 0 ] % 10 ; $ min_i = 0 ; foreach ( $ arr as $ i => $ v ) { $ d1 = $ v % 10 ; $ _arr [ ] = ( int ) ( ceil ( $ v / 10 ) * 10 ) ; if ( $ d1 > 0 && $ d1 < $ min ) { $ min = $ d1 ; $ min_i = $ i ; } } $ _arr [ $ min_i ] = $ arr [ $ min_i ] ; $ ans = array_sum ( $ _arr ) ; echo $ ans . PHP_EOL ;
<?php $ nums = explode ( ' ' , fgets ( STDIN ) ) ; echo ceil ( ( $ nums [ 0 ] + $ nums [ 1 ] ) / 2 ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ P = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ x = PHP_INT_MAX ; $ ans = 0 ; foreach ( $ P as $ v ) { if ( $ x > $ v ) { $ ans ++ ; $ x = $ v ; } } printf ( ' %d ' , $ ans ) ;
<?php fscanf ( STDIN , ' %s %s ' , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b ; } elseif ( $ a <= 12 && $ a >= 6 ) { echo $ b / 2 ; } else { echo 0 ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 5 ) { } else { $ temp = array ( ) ; foreach ( $ values as $ value ) { if ( ! isset ( $ temp [ $ value ] ) ) { $ temp [ $ value ] = 1 ; } else { $ temp [ $ value ] ++ ; } } ksort ( $ temp ) ; $ ret = ' null ' ; foreach ( $ temp as $ t ) { if ( $ t == 4 ) { $ ret = ' four card ' ; } elseif ( $ t == 3 ) { if ( $ ret == ' one pair ' ) { $ ret = ' full house ' ; } else { $ ret = ' three card ' ; } } elseif ( $ t == 2 ) { if ( $ ret == ' one pair ' ) { $ ret = ' two pair ' ; } elseif ( $ ret == ' three card ' ) { $ ret = ' full house ' ; } else { $ ret = ' one pair ' ; } } } $ temp = array_keys ( $ temp ) ; if ( count ( $ temp ) == 5 && $ temp [ 4 ] - $ temp [ 0 ] == 4 ) { $ ret = ' straight ' ; } $ temp2 = array ( ) ; foreach ( $ temp as $ t ) { if ( $ t == 1 ) { $ temp2 [ ] = 14 ; } else { $ temp2 [ ] = $ t ; } } sort ( $ temp2 ) ; if ( count ( $ temp2 ) == 5 && $ temp2 [ 4 ] - $ temp2 [ 0 ] == 4 ) { $ ret = ' straight ' ; } echo $ ret . " \n " ; } }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ X = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ Y = $ X ; sort ( $ Y ) ; $ n1 = $ Y [ $ N / 2 - 1 ] ; $ n2 = $ Y [ $ N / 2 ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ n2 <= $ X [ $ i ] ) { echo $ n1 ; } else { echo $ n2 ; } echo PHP_EOL ; }
<?php $ a = [ ] ; fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ line = trim ( fgets ( STDIN ) ) ; $ line = explode ( ' ' , $ line ) ; $ a = $ line [ 0 ] ; $ b = $ line [ 1 ] ; $ hr = $ line [ 2 ] ; $ mn = $ line [ 3 ] ; $ short = $ hr ; $ long = $ mn ; $ hour = $ short <= 12 ? $ short : $ short - 12 ; $ minute = $ long ; $ rShort = ( $ hour * ( 360 / 12 ) ) + $ minute * 1 / 2 ; $ rLong = $ minute * ( 360 / 60 ) ; $ ang = abs ( $ rLong - $ rShort ) ; if ( $ ang == 360 ) { echo 0 ; exit ( ) ; } if ( $ ang > 180 ) { $ ang = 360 - $ ang ; } echo sqrt ( ( $ a * $ a ) + ( $ b * $ b ) - 2 * $ a * $ b * cos ( deg2rad ( $ ang ) ) ) ;
<?php list ( $ max , $ sum ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ max ; $ j ++ ) { $ m = $ sum - $ i - $ j ; if ( $ m >= 0 && $ m <= $ max ) { $ count ++ ; } } } echo $ count ; ?>
<?php class AverageLength { var $ N , $ x , $ y ; function __construct ( ) { fscanf ( STDIN , " %d " , $ this -> N ) ; for ( $ i = 0 ; $ i < $ this -> N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ this -> x [ $ i ] , $ this -> y [ $ i ] ) ; } } function __invoke ( ) { $ dist = 0 ; for ( $ i = 0 ; $ i < $ this -> N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ this -> N ; $ j ++ ) { $ dist += sqrt ( pow ( $ this -> x [ $ i ] - $ this -> x [ $ j ] , 2 ) + pow ( $ this -> y [ $ i ] - $ this -> y [ $ j ] , 2 ) ) ; } } $ paths = $ this -> fact ( $ this -> N ) ; $ path_count = $ paths * ( $ this -> N - 1 ) ; $ p = $ this -> N * ( $ this -> N - 1 ) / 2 ; $ ans = $ path_count / $ p * $ dist / $ paths ; return $ ans ; } function fact ( $ N ) { $ ret = 1 ; for ( $ i = 2 ; $ i <= $ this -> N ; $ i ++ ) { $ ret *= $ i ; } return $ ret ; } } $ obj = new AverageLength ( ) ; echo $ obj ( ) ;
<?php function input ( string $ func = null ) { if ( $ func === null ) { return trim ( fgets ( STDIN ) ) ; } else { return $ func ( trim ( fgets ( STDIN ) ) ) ; } } function input_array ( string $ func = null ) { if ( $ func === null ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } else { return array_map ( function ( $ v ) use ( $ func ) { return $ func ( $ v ) ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } } $ ns = input_array ( ' intval ' ) ; sort ( $ ns ) ; if ( $ ns === [ 1 , 4 , 7 , 9 ] ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ max = max ( $ inputs ) ; $ decs = [ ] ; for ( $ i = 0 ; $ max > $ i ; $ i ++ ) { $ tmp = 0 ; foreach ( $ inputs as $ input ) { $ x = $ input - ( $ i + 1 ) ; $ y = pow ( $ x , 2 ) ; #echo join(", ", [$input, $i, $n, $x, $y]) . "\n"; $tmp += $y; } #echo "=" . $tmp . "\n"; $decs[] = $tmp; } #echo join(",", $decs) . "\n"; echo min($decs);
<?php $ abcde = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ abcde [ $ i ] ) ; } fscanf ( STDIN , " %d " , $ k ) ; if ( ( $ abcde [ 4 ] - $ abcde [ 0 ] ) > $ k ) { echo " :( " ; } else { echo " Yay! " ; }
<?php $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ b = ( int ) trim ( fgets ( STDIN ) ) ; $ c = ( int ) trim ( fgets ( STDIN ) ) ; $ d = ( int ) trim ( fgets ( STDIN ) ) ; $ e = ( int ) trim ( fgets ( STDIN ) ) ; $ k = ( int ) trim ( fgets ( STDIN ) ) ; if ( $ e - $ a > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php # A - erris Wheel fscanf(STDIN, "%d %d", $A, $B); if ($A <= 5 ) { echo 0; } elseif ($A >= 13) { echo $B; } else { echo $B / 2; }
<?php $ A = fgets ( STDIN , 4096 ) ; $ array = explode ( " " , $ A ) ; $ check1 = false ; $ check2 = false ; $ check3 = false ; foreach ( $ array as $ x ) { if ( $ x == 5 && $ check1 == false ) { $ check1 = true ; } elseif ( $ x == 7 ) { $ check2 = true ; } elseif ( $ x == 5 ) { $ check3 = true ; } } if ( $ check1 == true && $ check2 == true && $ check3 == true ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ sh , $ sm , $ eh , $ em , $ k ) ; $ start = $ sh * 60 + $ sm ; $ end = $ eh * 60 + $ em ; $ end -= $ start ; $ end -= $ k ; echo $ end ;
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; if ( $ a >= 13 ) { $ result = $ b ; } else if ( $ a >= 6 || 12 <= $ a ) { $ result = $ b / 2 ; } else { $ result = 0 ; } echo $ result ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ M = max ( $ a ) ; $ m = min ( $ a ) ; echo $ M - $ m ; ?>
<?php list ( $ s ) = strs ( ) ; list ( $ k ) = ints ( ) ; for ( $ i = 0 ; $ i < 26 ; ++ $ i ) $ a2n [ chr ( 97 + $ i ) ] = $ i ; $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ x = $ a2n [ $ s [ $ i ] ] ; if ( $ x === 0 ) continue ; if ( $ k >= 26 - $ x ) { $ s [ $ i ] = ' a ' ; $ k -= 26 - $ x ; } } if ( $ k > 0 ) $ s [ $ n - 1 ] = chr ( 97 + ( $ a2n [ $ s [ $ n - 1 ] ] + $ k ) % 26 ) ; echo $ s . PHP_EOL ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php $ input = intval ( file_get_contents ( " php: echo $ input ** 3 . " \ n " ;
<?php $ x = ( int ) fgets ( STDIN ) ; echo $ x ** 3 ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ pref_max , $ city_max ) ; for ( $ i = 0 ; $ i < $ city_max ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ pref , $ city ) ; $ dispList [ ] = array ( " pref " => $ pref , " city " => $ city ) ; $ list [ $ pref ] [ $ i ] = $ city ; } foreach ( $ list as $ pref => $ cities ) { sort ( $ cities ) ; $ num = 1 ; foreach ( $ cities as $ city ) { $ idList [ $ pref ] [ $ city ] = $ num ; $ num ++ ; } } foreach ( $ dispList as $ disp ) { $ pref_id = sprintf ( " %06d " , $ disp [ ' pref ' ] ) ; $ city_id = sprintf ( " %06d " , $ idList [ $ disp [ ' pref ' ] ] [ $ disp [ ' city ' ] ] ) ; echo $ pref_id . $ city_id . " \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; $ x = ( int ) $ x ; $ x = $ x * $ x * $ x ; echo " $ x \n " ; ?>
<?php $ min = 124 ; $ max = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ now ) ; if ( $ max < $ now ) { $ max = $ now ; } if ( $ min > $ now ) { $ min = $ now ; } } fscanf ( STDIN , " %d " , $ k ) ; echo ( $ max - $ min <= $ k ) ? " Yay! " : " :( " ;
<?php $ x = fgets ( STDIN ) ; $ y = $ x * $ x * $ x ; echo " $ y \n " ; return 0 ; ?>
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ c , $ d ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; echo max ( $ ab , $ cd ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ numbers = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ costs = [ abs ( $ numbers [ 0 ] - $ numbers [ 1 ] ) , abs ( $ numbers [ 0 ] - $ numbers [ 2 ] ) , abs ( $ numbers [ 1 ] - $ numbers [ 2 ] ) , ] ; echo array_sum ( $ costs ) - max ( $ costs ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ parr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ cnt = 0 ; $ min = $ n + 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ min = min ( $ min , $ parr [ $ i ] ) ; if ( $ min == $ parr [ $ i ] ) { $ cnt ++ ; } } echo " $ cnt \n " ;
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ ans = 0 ; for ( $ x = 0 ; $ x <= $ S ; $ x ++ ) { for ( $ y = $ x ; $ x + $ y <= $ S ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( $ x > $ K || $ y > $ K || $ z > $ K ) continue ; if ( $ z < $ y ) continue ; $ a1 = $ x === $ y ; $ a2 = $ x === $ z ; $ a3 = $ y === $ z ; $ aa = $ a1 + $ a2 + $ a3 ; switch ( $ aa ) { case 3 : $ ans += 1 ; break ; case 1 : $ ans += 3 ; break ; case 0 : $ ans += 6 ; break ; } } } echo $ ans . PHP_EOL ;
<?php $ result = 0 ; while ( ! feof ( STDIN ) ) { $ arg [ ] = trim ( fgets ( STDIN ) ) ; } foreach ( $ arg as $ minutes ) { $ trim = intval ( substr ( strval ( $ minutes ) , - 1 , 1 ) ) ; if ( $ trim == 0 ) { $ trims [ ] = 10 ; } else { $ trims [ ] = $ trim ; } } $ min = min ( $ trims ) ; $ min_key = array_keys ( $ trims , $ min ) ; foreach ( $ arg as $ key => $ value ) { if ( $ key != $ min_key [ 0 ] ) { $ value = ceil ( ( intval ( $ value ) / 10 ) ) * 10 ; } $ result = $ value + $ result ; } echo $ result ;
<?php $ args = [ ] ; while ( true ) { $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; foreach ( $ input as $ value ) { if ( ! empty ( $ value ) ) { $ args [ ] = $ value ; } if ( count ( $ args ) >= 3 ) { break ; } } if ( count ( $ args ) >= 3 ) { break ; } } sort ( $ args ) ; $ check = [ 5 , 5 , 7 ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ args [ $ i ] == $ check [ $ i ] ) { continue ; } else { echo ' NO ' ; exit ( 0 ) ; } } echo ' YES ' ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; if ( $ m === 0 ) { $ mc = 360 ; } else { $ mc = $ m * 360 / 60 ; } $ hc = ( $ h * 60 + $ m ) * 360 / ( 12 * 60 ) ; $ cos = abs ( $ hc - $ mc ) ; $ ans = $ a * $ a + $ b * $ b - ( 2 * $ a * $ b * cos ( deg2rad ( $ cos ) ) ) ; echo sqrt ( $ ans ) ; ?>
<?php list ( $ n , $ m ) = ints ( ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) list ( $ a [ ] ) = strs ( ) ; $ bb = ' ' ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ b [ ] ) = strs ( ) ; $ bb .= $ b [ $ i ] ; } for ( $ i = 0 ; $ i <= $ n - $ m ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ n - $ m ; ++ $ j ) { $ aa = ' ' ; for ( $ k = 0 ; $ k < $ m ; ++ $ k ) $ aa .= substr ( $ a [ $ k + $ i ] , $ j , $ m ) ; if ( $ aa === $ bb ) exit ( ' Yes ' ) ; } } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php $ input = fgets ( STDIN ) ; $ data = explode ( " " , $ input ) ; $ balls = ( int ) $ data [ 0 ] ; $ people = ( int ) $ data [ 1 ] ; if ( $ people <= 1 ) { echo 0 ; } else { echo ( $ balls - ( $ people - 1 ) ) - 1 ; }
<?php function createPermutation ( $ n , $ r ) { if ( ! $ r || $ n < $ r ) { return array ( ) ; } $ return = array ( ) ; $ n2 = $ n - 1 ; if ( $ r == 1 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ return [ ] = array ( $ i ) ; } return $ return ; } foreach ( createPermutation ( $ n2 , $ r ) as $ row ) { $ return [ ] = $ row ; } foreach ( createPermutation ( $ n2 , $ r - 1 ) as $ row ) { for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { $ return [ ] = array_merge ( array_slice ( $ row , 0 , $ i ) , array ( $ n2 ) , array_slice ( $ row , $ i ) ) ; } } return $ return ; } fscanf ( STDIN , " %d " , $ in_n ) ; for ( $ i = 0 ; $ i < $ in_n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ in_x [ $ i ] , $ in_y [ $ i ] ) ; } $ kyori_goukei = 0 ; $ arr_junban = createPermutation ( $ in_n , $ in_n ) ; foreach ( $ arr_junban as $ junban ) { for ( $ i = 0 ; $ i < ( $ in_n - 1 ) ; $ i ++ ) { $ kyori_goukei = $ kyori_goukei + ( sqrt ( pow ( abs ( $ in_x [ $ junban [ $ i ] ] - $ in_x [ $ junban [ $ i + 1 ] ] ) , 2 ) + pow ( abs ( $ in_y [ $ junban [ $ i ] ] - $ in_y [ $ junban [ $ i + 1 ] ] ) , 2 ) ) ) ; } } $ ans = $ kyori_goukei / ( count ( $ arr_junban ) ) ; echo " $ ans \n " ; ?>
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= $ K ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ K ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php function getq ( $ get_word = null ) { if ( $ get_word === null ) { return str_replace ( " \n " , " " , fgets ( STDIN ) ) ; } else if ( $ get_word === 1 ) { return explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; } } $ K = getq ( 1 ) ; echo max ( $ K [ 0 ] * $ K [ 1 ] , $ K [ 2 ] * $ K [ 3 ] ) ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ numbers = fgets ( STDIN ) ; $ exploded_numbers = explode ( ' ' , trim ( $ numbers ) ) ; $ p = ( int ) round ( array_sum ( $ exploded_numbers ) / $ n ) ; $ sum = 0 ; foreach ( $ exploded_numbers as $ num ) { $ sum += pow ( $ num - $ p , 2 ) ; } echo $ sum ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ time = 0 ; $ min = 10 ; $ num = 0 ; $ x = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ x = $ array [ $ i ] % 10 ; if ( $ x < $ min && $ x != 0 ) { $ min = $ x ; $ num = $ i ; } } $ tmp = $ array [ 4 ] ; $ array [ 4 ] = $ array [ $ num ] ; $ array [ $ num ] = $ tmp ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ time += $ array [ $ i ] ; while ( $ time % 10 != 0 ) { $ time ++ ; } } $ time += $ array [ 4 ] ; echo $ time ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ hoge = sprintf ( " %d%d%d " , $ a , $ b , $ c ) ; if ( str_replace ( " 5 " , " " , $ hoge ) == 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php error_reporting ( 0 ) ; $ N = trim ( fgets ( STDIN ) ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( in_array ( " Y " , $ S ) ) { printf ( " Four \n " ) ; } else { printf ( " Three \n " ) ; }
<?php fgets ( STDIN ) ; echo strpos ( fgets ( STDIN ) , " Y " ) === false ? " Three " : " Four " ;
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as $ to ) { $ new = $ D [ $ f ] + $ to [ 1 ] ; if ( $ D [ $ to [ 0 ] ] > $ new ) { $ D [ $ to [ 0 ] ] = $ new ; $ pq -> insert ( $ to [ 0 ] , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php $ input = explode ( ' ' , trim ( fgets ( ( STDIN ) ) ) ) ; $ counted = array_count_values ( $ input ) ; print ( $ counted [ 5 ] == 2 ) && ( $ counted [ 7 ] == 1 ) ? ' YES ' : ' NO ' ;
<?php $ arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ a = $ arr [ 0 ] ; $ b = $ arr [ 1 ] ; $ H = $ arr [ 2 ] ; $ M = $ arr [ 3 ] ; $ hk = ( ( $ H * 60 + $ M ) / 720 ) * 360 ; $ mk = ( $ M / 60 ) * 360 ; $ k = deg2rad ( abs ( $ hk - $ mk ) ) ; $ ret = sqrt ( ( $ a * $ a ) + ( $ b * $ b ) - ( 2 * $ a * $ b * cos ( $ k ) ) ) ; echo $ ret ; return ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x ** 3 ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ x [ $ i ] ; } $ p = $ sum / $ n ; $ p = round ( $ p , 0 ) ; $ sum2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum2 = $ sum2 + ( $ x [ $ i ] - $ p ) ** 2 ; } echo $ sum2 . " \n " ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x , " \n " ;
<?php list ( $ n , $ p ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ n == 1 ) { echo $ p ; } elseif ( $ p == 1 ) { echo 1 ; } else { $ ans = 1 ; $ i = 2 ; while ( pow ( $ i , $ n ) <= $ p ) { $ c = pow ( $ i , $ n ) ; if ( $ p % $ c == 0 ) { $ p /= ( int ) $ c ; $ ans *= $ i ; -- $ i ; } ++ $ i ; } echo $ ans ; }
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = lcmAll ( $ a ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function gcdAll ( $ arr ) { $ gcd = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ gcd = gcd ( $ gcd , $ arr [ $ i ] ) ; } return $ gcd ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; } function lcmAll ( $ arr ) { $ lcm = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ arr [ $ i ] ) ; } return $ lcm ; }
<?php $ line = fgets ( STDIN ) ; $ data = explode ( ' ' , $ line ) ; $ a = $ data [ 0 ] ; $ b = $ data [ 1 ] ; $ result = round ( ( $ a + $ b ) / 2 ) ; print $ result ;
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ start_time = $ h1 * 60 + $ m1 ; $ end_time = $ h2 * 60 + $ m2 ; $ possble_end = $ end_time - $ k ; echo ( $ possble_end - $ start_time ) ;
<?php $ line = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ limit = $ line [ 0 ] ; $ sum = $ line [ 1 ] ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ limit ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ limit ; $ y ++ ) { if ( $ x + $ y <= $ sum && $ sum - $ x - $ y <= $ limit ) { $ count ++ ; } } } print $ count ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ c *= $ n - $ c ; $ c %= $ mod ; $ c *= ( 1 << $ i ) % $ mod ; $ c %= $ mod ; $ sum += $ c ; $ sum %= $ mod ; } echo $ sum ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo $ n ** 3 , PHP_EOL ; ?>
<?php $ menus = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ menus [ ] = fgets ( STDIN ) ; } $ diff_count = 0 ; $ max = 0 ; $ diff_list = array ( ) ; foreach ( $ menus as $ key => $ menu ) { for ( $ i = 0 ; $ i < 9 ; $ i ++ ) { if ( ( $ menu + $ diff_count ) % 10 == 0 ) { break ; } $ diff_count ++ ; } $ diff_list [ $ key ] = $ diff_count ; $ diff_count = 0 ; } asort ( $ diff_list ) ; foreach ( $ diff_list as $ key => $ diff ) { $ sum += $ menus [ $ key ] + $ diff ; } echo $ sum - $ diff_list [ $ key ] . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b ; } elseif ( $ a < 6 ) { echo 0 ; } else { echo $ b / 2 ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php $ n = int ( ) ; $ a = ints ( ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ sum += ( ( ( $ c % $ mod ) * ( $ n - $ c ) ) % $ mod ) * ( ( 1 << $ i ) % $ mod ) ; $ sum %= $ mod ; } echo $ sum ; function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; }
<?php fscanf ( STDIN , ' %d ' , $ i ) ; echo $ i * $ i * $ i . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X [ $ i ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ distance = 0 ; for ( $ k = 0 ; $ k < $ D ; $ k ++ ) { $ distance += pow ( abs ( $ X [ $ i ] [ $ k ] - $ X [ $ j ] [ $ k ] ) , 2 ) ; } if ( is_pythagoras ( $ distance ) ) $ count ++ ; } } echo $ count , PHP_EOL ; function is_pythagoras ( $ number ) { for ( $ i = 0 ; pow ( $ i , 2 ) <= $ number ; $ i ++ ) { if ( pow ( $ i , 2 ) === $ number ) return true ; } return false ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a ) - min ( $ a ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_input = explode ( ' ' , fgets ( STDIN ) ) ; $ x = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = ( int ) $ x_input [ $ i ] ; } sort ( $ x ) ; $ larger = $ x [ $ n / 2 ] ; $ smaller = $ x [ $ n / 2 - 1 ] ; foreach ( $ x_input as $ input ) { if ( ( int ) $ input <= $ smaller ) { echo $ larger , " \n " ; continue ; } echo $ smaller , " \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ pref_max , $ city_max ) ; for ( $ i = 0 ; $ i < $ city_max ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ pref , $ city ) ; $ dispList [ ] = array ( " pref " => $ pref , " city " => $ city ) ; $ list [ $ pref ] [ $ i ] = $ city ; } foreach ( $ list as $ pref => $ cities ) { sort ( $ cities ) ; $ num = 1 ; foreach ( $ cities as $ city ) { $ idList [ $ pref ] [ $ city ] = $ num ; $ num ++ ; } } foreach ( $ dispList as $ disp ) { $ pref_id = sprintf ( " %06d " , $ disp [ ' pref ' ] ) ; $ city_id = sprintf ( " %06d " , $ idList [ $ disp [ ' pref ' ] ] [ $ disp [ ' city ' ] ] ) ; echo $ pref_id . $ city_id . " \n " ; }
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ distance = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ distance += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; } $ a = ceil ( sqrt ( $ distance ) ) ; if ( ( $ a * $ a ) == $ distance ) { $ ans ++ ; } } } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ a + $ b + $ c == 17 && $ a * $ b * $ c == 175 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; print ( ( $ a + $ b + 1 ) >> 1 ) ;
<?php $ in = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ h1 = $ in [ 0 ] ; $ m1 = $ in [ 1 ] ; $ h2 = $ in [ 2 ] ; $ m2 = $ in [ 3 ] ; $ k = $ in [ 4 ] ; $ h = $ h2 - $ h1 ; $ m = $ m2 - $ m1 ; $ wakemin = $ h * 60 + $ m ; echo $ wakemin - $ k ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ h , $ m ) ; $ y = $ m / 60 ; $ x = ( $ h + $ y ) / 12 ; $ rad = deg2rad ( ( $ x - $ y ) * 360 ) ; $ ans = sqrt ( $ a ** 2 + $ b ** 2 - 2 * $ a * $ b * cos ( $ rad ) ) ; echo $ ans ;
<?php $ list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count1 = 0 ; $ count2 = 0 ; foreach ( $ list as $ val ) { if ( $ val == ' 7 ' ) { $ count1 ++ ; } elseif ( $ val == ' 5 ' ) { $ count2 ++ ; } } if ( $ count1 == 1 && $ count2 == 2 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; echo $ a * $ a * $ a ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo ( $ input ** 3 ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ sm = $ h1 * 60 + $ m1 ; $ em = $ h2 * 60 + $ m2 ; $ ans = $ em - $ sm - $ k ; echo $ ans . PHP_EOL ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ As = explode ( ' ' , $ input ) ; rsort ( $ As ) ; $ cost1 = abs ( $ As [ 1 ] - $ As [ 0 ] ) ; $ cost1 += abs ( $ As [ 2 ] - $ As [ 1 ] ) ; $ cost2 = abs ( $ As [ 2 ] - $ As [ 0 ] ) ; $ cost2 += abs ( $ As [ 1 ] - $ As [ 2 ] ) ; echo min ( $ cost1 , $ cost2 ) ;
<?php $ num = trim ( fgets ( STDIN ) ) ; $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; foreach ( $ input as $ letter ) { if ( $ letter === " Y " ) { echo ( " Four " ) ; exit ( ) ; } } echo ( " Three " ) ; ?>
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ ho , $ mo , $ he , $ me , $ k ) ; $ o = $ ho * 60 + $ mo ; $ e = $ he * 60 + $ me ; $ ans = $ e - $ o - $ k ; if ( $ ans > 0 ) { echo $ ans ; } else { echo 0 ; }
<?php $ x = fgets ( STDIN ) ; $ cubic = $ x * $ x * $ x ; echo $ cubic . " \n " ; ?>
<?php $ num = trim ( fgets ( STDIN ) ) ; $ num = $ num * $ num * $ num ; echo $ num ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; printf ( " %d \n " , $ n * $ n * $ n ) ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ x = [ ] ; $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( isSquare ( calcDist ( $ x [ $ i ] , $ x [ $ j ] ) ) ) $ c ++ ; } } echo $ c ; function isSquare ( $ v ) { return pow ( floor ( sqrt ( $ v ) ) , 2 ) == $ v ; } function calcDist ( $ a , $ b ) { global $ d ; $ ret = 0 ; for ( $ i = 0 ; $ i < $ d ; $ i ++ ) { $ ret += pow ( $ a [ $ i ] - $ b [ $ i ] , 2 ) ; } return $ ret ; } ?>
<?php $ input = fgets ( STDIN ) ; $ age_price = explode ( " " , $ input ) ; if ( $ age_price [ 0 ] >= 13 ) { echo $ age_price [ 1 ] ; } elseif ( $ age_price [ 0 ] <= 12 && $ age_price [ 0 ] >= 6 ) { echo $ age_price [ 1 ] / 2 ; } else { echo 0 ; }
<?php while ( true ) { $ number = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ number [ 0 ] == 0 ) exit ; echo array_sum ( $ number ) . " \n " ; }
<?php print pow ( trim ( fgets ( STDIN ) ) , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A == $ B ) { echo " Draw " ; die ( ) ; } if ( $ A == 1 ) { echo " Alice " ; die ( ) ; } if ( $ B == 1 ) { echo " Bob " ; die ( ) ; } if ( $ A > $ B ) { echo " Alice " ; die ( ) ; } else { echo " Bob " ; die ( ) ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ cities = [ $ a , $ b , $ c , $ d , $ e ] ; asort ( $ cities ) ; if ( ( $ cities [ 4 ] - $ cities [ 0 ] ) > $ k ) { echo " :( \n " ; } else { echo " Yay! \n " ; }
<?php $ line = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ h = $ line [ 2 ] - $ line [ 0 ] ; $ m = $ line [ 3 ] - $ line [ 1 ] ; $ study = $ line [ 4 ] ; $ awake = $ h * 60 + $ m ; $ start = $ awake - $ study ; echo $ start ; ?>
<?php $ n = fgets ( STDIN ) ; if ( $ n >= 64 ) { echo 64 ; } elseif ( $ n >= 32 ) { echo 32 ; } elseif ( $ n >= 16 ) { echo 16 ; } elseif ( $ n >= 8 ) { echo 8 ; } elseif ( $ n >= 4 ) { echo 4 ; } elseif ( $ n >= 2 ) { echo 2 ; } else { echo 1 ; }
<?php function dis ( $ x , $ y ) { $ len = count ( $ x ) ; $ total = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ sa = abs ( $ x [ $ i ] - $ y [ $ i ] ) ; $ total += $ sa * $ sa ; } $ total = sqrt ( $ total ) ; $ total_int = ( int ) ( $ total ) ; return ( $ total == $ total_int ) ; } fscanf ( STDIN , " %d %d " , $ n , $ d ) ; while ( $ line = trim ( fgets ( STDIN ) ) ) { $ x [ ] = explode ( " " , $ line ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( dis ( $ x [ $ i ] , $ x [ $ j ] ) ) { $ count ++ ; } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array1 = array ( $ a , $ b , $ c ) ; $ count5 = array_count_values ( $ array1 ) ; if ( $ count5 [ 5 ] == 2 && $ count5 [ 7 ] == 1 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ suff = 0 ; $ ovr = 0 ; $ S = 0 ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ suff ++ ; $ S += $ B [ $ i ] - $ A [ $ i ] ; } else { $ arr [ ] = $ A [ $ i ] - $ B [ $ i ] ; $ ovr += $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ suff === 0 ) { $ ans = 0 ; } else if ( $ ovr < $ S ) { $ ans = - 1 ; } else { sort ( $ arr ) ; $ ans = $ suff ; while ( $ S > 0 ) { $ ans ++ ; $ tmp = array_pop ( $ arr ) ; $ S -= $ tmp ; } } echo $ ans ;
<?php $ C = [ ] ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { $ C [ ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } $ total_flg = false ; for ( $ x = 0 ; $ x <= 100 ; ++ $ x ) { $ a = [ ] ; $ b = [ ] ; $ a [ 0 ] = $ x ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) $ b [ $ i ] = $ C [ 0 ] [ $ i ] - $ a [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; ++ $ i ) $ a [ $ i ] = $ C [ $ i ] [ 0 ] - $ b [ 0 ] ; $ flg = true ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { for ( $ j = 0 ; $ j < 3 ; ++ $ j ) { if ( $ C [ $ i ] [ $ j ] != $ a [ $ i ] + $ b [ $ j ] ) { $ flg = false ; break 2 ; } } } $ total_flg |= $ flg ; } echo $ total_flg ? ' Yes ' : ' No ' , PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( ' ' , fgets ( STDIN ) ) ; while ( $ n > 0 ) { -- $ n ; if ( $ a [ $ n ] == ' Y ' ) { echo ' Four ' ; exit ; } } echo ' Three ' ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ p_arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ count = 0 ; $ min = $ n + 1 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ p_arr [ $ i ] <= $ min ) { ++ $ count ; } $ min = min ( $ min , $ p_arr [ $ i ] ) ; } echo $ count ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; echo $ res ; ?>
<?php list ( $ H1 , $ M1 , $ H2 , $ M2 , $ K ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ h1 = $ H1 * 60 + $ M1 ; $ h2 = $ H2 * 60 + $ M2 ; printf ( " %d \n " , max ( $ h2 - $ h1 - $ K , 0 ) ) ;
<?php function input ( ) { return trim ( fgets ( STDIN ) ) ; } function input_array ( ) { return explode ( ' ' , input ( ) ) ; } list ( $ n , $ m ) = array_map ( function ( $ numeric_string ) { return ( int ) $ numeric_string ; } , input_array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ prefectures [ $ i ] = [ ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ prefecture , $ year ) = input_array ( ) ; $ cities [ $ i ] = [ ' prefecture ' => $ prefecture , ' year ' => $ year ] ; $ prefectures [ $ prefecture ] [ ] = [ ' city ' => $ i , ' year ' => $ year ] ; } foreach ( $ prefectures as & $ prefecture ) { usort ( $ prefecture , function ( $ a , $ b ) { return $ a [ ' year ' ] <=> $ b [ ' year ' ] ; } ) ; array_values ( $ prefecture ) ; foreach ( $ prefecture as $ key => $ city ) { $ cities [ $ city [ ' city ' ] ] [ ' number ' ] = $ key + 1 ; } } foreach ( $ cities as $ city ) { echo str_pad ( $ city [ ' prefecture ' ] , 6 , ' 0 ' , STR_PAD_LEFT ) . str_pad ( $ city [ ' number ' ] , 6 , ' 0 ' , STR_PAD_LEFT ) . " \n " ; }
<?php while ( $ line = trim ( fgets ( STDIN ) ) ) { if ( $ line == " 0 " ) break ; $ line = array_map ( ' intval ' , str_split ( $ line ) ) ; $ sum = 0 ; foreach ( $ line as $ value ) { $ sum += $ value ; } echo $ sum . " \n " ; } ?>
<?php list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab >= $ cd ) { echo $ ab ; } else { echo $ cd ; }
<?php $ x = [ ] ; $ y = [ ] ; $ tmp = 0 ; fscanf ( STDIN , ' %d ' , $ cnt ) ; for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ x [ ] , $ y [ ] ) ; } for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { for ( $ j = $ i ; $ j < $ cnt ; $ j ++ ) { if ( $ j === $ i ) { continue ; } $ tmp += sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; } } for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { for ( $ j = $ i ; $ j < $ cnt ; $ j ++ ) { if ( $ j === $ i ) { continue ; } $ tmp += sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ; } } echo $ tmp / $ cnt . " \n " ;
<?php $ input = fgets ( STDIN ) ; $ input_array = explode ( " " , $ input ) ; $ int_array = array_map ( function ( $ value ) { return ( int ) $ value ; } , $ input_array ) ; $ ans = $ int_array [ 2 ] * 60 + $ int_array [ 3 ] - $ int_array [ 0 ] * 60 - $ int_array [ 1 ] - $ int_array [ 4 ] ; echo $ ans ;
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ X = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ min = min ( $ X ) ; $ max = max ( $ X ) ; $ ans = PHP_INT_MAX ; for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) { $ diff = array_sum ( array_map ( function ( $ t ) use ( $ i ) { return ( $ t - $ i ) * ( $ t - $ i ) ; } , $ X ) ) ; $ ans = min ( $ ans , $ diff ) ; } echo $ ans ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ceil ( ( $ a + $ b ) / 2 ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 1 ; $ ans = 1 ; $ min = $ p [ 0 ] ; while ( $ i < $ n ) { if ( $ p [ $ i ] < $ min ) { ++ $ ans ; $ min = $ p [ $ i ] ; } ++ $ i ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ in_a , $ in_b , $ in_h , $ in_m ) ; $ ans = 0.0 ; $ hx = $ in_a * sin ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ hy = $ in_a * cos ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ mx = $ in_b * sin ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ my = $ in_b * cos ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ ans = sqrt ( pow ( $ hx - $ mx , 2 ) + pow ( $ hy - $ my , 2 ) ) ; echo " $ ans \n " ;
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a ) - min ( $ a ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x ** 3 . PHP_EOL ;
<?php list ( $ A , $ B ) = sscanf ( trim ( fgets ( STDIN ) ) , " %d %d " ) ; if ( $ A <= 5 ) { print ( 0 ) ; } else if ( ( $ A >= 6 ) && ( $ A <= 12 ) ) { print ( $ B / 2 ) ; } else { print ( $ B ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ max = 0 ; $ max_i = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ j = $ i ; $ count = 0 ; while ( $ j % 2 === 0 ) { $ j = $ j / 2 ; $ count ++ ; } if ( $ count >= $ max ) { $ max = $ count ; $ max_i = $ i ; } } print $ max_i ;
<?php fscanf ( STDIN , " %d %d %d " , $ c [ 1 ] [ 1 ] , $ c [ 1 ] [ 2 ] , $ c [ 1 ] [ 3 ] ) ; fscanf ( STDIN , " %d %d %d " , $ c [ 2 ] [ 1 ] , $ c [ 2 ] [ 2 ] , $ c [ 2 ] [ 3 ] ) ; fscanf ( STDIN , " %d %d %d " , $ c [ 3 ] [ 1 ] , $ c [ 3 ] [ 2 ] , $ c [ 3 ] [ 3 ] ) ; if ( $ c [ 1 ] [ 1 ] - $ c [ 2 ] [ 1 ] == $ c [ 1 ] [ 2 ] - $ c [ 2 ] [ 2 ] && $ c [ 1 ] [ 1 ] - $ c [ 2 ] [ 1 ] == $ c [ 1 ] [ 3 ] - $ c [ 2 ] [ 3 ] && $ c [ 2 ] [ 1 ] - $ c [ 3 ] [ 1 ] == $ c [ 2 ] [ 2 ] - $ c [ 3 ] [ 2 ] && $ c [ 2 ] [ 1 ] - $ c [ 3 ] [ 1 ] == $ c [ 2 ] [ 3 ] - $ c [ 3 ] [ 3 ] && $ c [ 3 ] [ 1 ] - $ c [ 1 ] [ 1 ] == $ c [ 3 ] [ 2 ] - $ c [ 1 ] [ 2 ] && $ c [ 3 ] [ 1 ] - $ c [ 1 ] [ 1 ] == $ c [ 3 ] [ 3 ] - $ c [ 1 ] [ 3 ] ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; }
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ array [ 0 ] ; $ b = ( int ) $ array [ 1 ] ; $ price = 0 ; if ( $ a >= 13 ) { $ price = $ b ; echo " { $ price } \n " ; } elseif ( $ a >= 6 && $ a <= 12 ) { $ price = $ b / 2 ; echo " { $ price } \n " ; } else { $ price = 0 ; echo " { $ price } \n " ; } ?>
<?php function input ( string $ func = null ) { if ( $ func === null ) { return trim ( fgets ( STDIN ) ) ; } else { return $ func ( trim ( fgets ( STDIN ) ) ) ; } } function input_array ( string $ func = null ) { if ( $ func === null ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } else { return array_map ( function ( $ v ) use ( $ func ) { return $ func ( $ v ) ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } } $ n = input ( ' intval ' ) ; $ as = input_array ( ' intval ' ) ; $ bs = input_array ( ' intval ' ) ; $ overs = [ ] ; $ count = 0 ; $ to_be_added = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ as [ $ i ] > $ bs [ $ i ] ) { $ overs [ ] = $ as [ $ i ] - $ bs [ $ i ] ; } else if ( $ as [ $ i ] < $ bs [ $ i ] ) { $ count ++ ; $ to_be_added += $ bs [ $ i ] - $ as [ $ i ] ; } } rsort ( $ overs ) ; for ( $ i = 0 , $ c = count ( $ overs ) ; $ i < $ c ; $ i ++ ) { if ( $ to_be_added <= 0 ) { break ; } $ to_be_added -= $ overs [ $ i ] ; $ count ++ ; } if ( array_sum ( $ as ) < array_sum ( $ bs ) ) { echo " -1 \n " ; } else { echo " { $ count } \n " ; }
<?php declare ( strict_types = 1 ) ; fscanf ( STDIN , " %i " , $ n ) ; $ xs = explode ( " " , fgets ( STDIN ) ) ; $ start = min ( $ xs ) ; $ end = max ( $ xs ) ; echo $ end - $ start , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ args = [ ] ; $ args [ 0 ] = $ a ; $ args [ 1 ] = $ b ; $ args [ 2 ] = $ c ; $ i = NULL ; switch ( $ a ) { case 5.7 : $ a = $ args [ 0 ] ; break ; default : break ; } switch ( $ b ) { case 5.7 : $ b = $ args [ 0 ] ; break ; default : break ; } switch ( $ c ) { case 5.7 : $ c = $ args [ 0 ] ; break ; default : break ; } $ i = $ args [ 0 ] + $ args [ 1 ] + $ args [ 2 ] ; if ( $ i == 17 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ input = fgets ( STDIN ) ; $ array = explode ( " " , $ input ) ; $ ans = " " ; foreach ( $ array as $ value ) { if ( $ value == 5 || $ value == 7 ) { $ ans += $ value ; } } echo ( $ ans == 17 ? " YES " : " NO " ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ sum = 0 ; $ amax = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a ) ; $ sum += ( int ) ( ( $ a + 9 ) / 10 ) * 10 ; if ( $ a % 10 != 0 ) { $ amax = max ( $ amax , 10 - $ a % 10 ) ; } } echo $ sum - $ amax . " \n " ; ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; $ ans = 0 ; while ( $ i < 3 ) { if ( $ a [ $ i ] == 5 || $ a [ $ i ] == 7 ) { $ ans += $ a [ $ i ] ; } else { break ; } ++ $ i ; } echo ( $ ans == 17 ) ? " YES " : " NO " ;
<?php $ in = trim ( fgets ( STDIN ) ) ; echo $ in * $ in * $ in . " \n " ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ( ceil ( ( $ a [ 1 ] + $ a [ 0 ] ) / 2 ) ) ;
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ kakudo_hour = 30 * $ h + $ m * 0.5 ; $ kakudo_minute = 6 * $ m ; if ( $ kakudo_hour == 0 ) { $ kakudo_hour = 360 ; } if ( $ kakudo_minute == 0 ) { $ kakudo_minute = 360 ; } $ Theta = abs ( $ kakudo_hour - $ kakudo_minute ) ; $ distan = ( $ a ** 2 + $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ Theta ) ) ) ; $ distan = sqrt ( $ distan ) ; echo $ distan . " \n " ;
<?php fscanf ( STDIN , " %i %i %i %i " , $ a , $ b , $ c , $ d ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; echo max ( [ $ ab , $ cd ] ) . PHP_EOL ; ?>
<?php $ n = int ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ a [ ] , $ b [ ] ) = ints ( ) ; } $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i != $ j ) { $ sum += $ l [ $ i ] [ $ j ] = sqrt ( ( $ a [ $ i ] - $ a [ $ j ] ) ** 2 + ( $ b [ $ i ] - $ b [ $ j ] ) ** 2 ) ; } } } echo $ sum / $ n ; function str ( ) { return trim ( fgets ( STDIN ) ) ; } function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; } function o ( ... $ val ) { if ( count ( $ val ) == 1 ) $ val = array_shift ( $ val ) ; $ trace = debug_backtrace ( ) ; echo $ trace [ 0 ] [ ' line ' ] . " ) " ; if ( is_array ( $ val ) ) { if ( count ( $ val ) == 0 ) { echo " empty array " ; } elseif ( ! is_array ( current ( $ val ) ) ) { echo " array: " ; echo implode ( " " , $ val ) . " \n " ; } else { echo " array:array \n " ; foreach ( $ val as $ row ) { echo implode ( " " , $ row ) . " \n " ; } } } else { echo $ val . " \n " ; } }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo in_array ( ' Y ' , $ s ) ? ' Four ' : ' Three ' ; ?>
<?php $ n = fgets ( STDIN ) ; $ a = explode ( ' ' , fgets ( STDIN ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ;
<?php $ sc = new Scanner ( ) ; $ n = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ list = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p = $ sc -> nextInt ( ) ; $ y = $ sc -> nextInt ( ) ; $ list [ $ p ] [ $ y ] = $ i + 1 ; } $ ans_list = [ ] ; foreach ( $ list as $ k => $ v ) { ksort ( $ v ) ; $ first_id = str_pad ( $ k , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ i = 1 ; foreach ( $ v as $ a ) { $ last_id = str_pad ( $ i ++ , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ ans_list [ $ a ] = $ first_id . $ last_id ; } } ksort ( $ ans_list ) ; echo implode ( PHP_EOL , $ ans_list ) . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ minx = $ b * sin ( $ m / 60 * 2 * pi ( ) ) ; $ miny = $ b * cos ( $ m / 60 * 2 * pi ( ) ) ; $ hourx = $ a * sin ( ( $ h + $ m / 60 ) / 12 * 2 * pi ( ) ) ; $ houry = $ a * cos ( ( $ h + $ m / 60 ) / 12 * 2 * pi ( ) ) ; echo sqrt ( pow ( $ houry - $ miny , 2 ) + pow ( $ hourx - $ minx , 2 ) ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_list = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ avg = array_sum ( $ x_list ) / count ( $ x_list ) ; $ ans1 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) floor ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; $ ans2 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) ceil ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; echo min ( $ ans1 , $ ans2 ) ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 5 ) { } else { $ temp = array ( ) ; foreach ( $ values as $ value ) { if ( ! isset ( $ temp [ $ value ] ) ) { $ temp [ $ value ] = 1 ; } else { $ temp [ $ value ] ++ ; } } ksort ( $ temp ) ; $ ret = ' null ' ; foreach ( $ temp as $ t ) { if ( $ t == 4 ) { $ ret = ' four card ' ; } elseif ( $ t == 3 ) { if ( $ ret == ' one pair ' ) { $ ret = ' full house ' ; } else { $ ret = ' three card ' ; } } elseif ( $ t == 2 ) { if ( $ ret == ' one pair ' ) { $ ret = ' two pair ' ; } elseif ( $ ret == ' three card ' ) { $ ret = ' full house ' ; } else { $ ret = ' one pair ' ; } } } $ temp = array_keys ( $ temp ) ; if ( count ( $ temp ) == 5 && $ temp [ 4 ] - $ temp [ 0 ] == 4 ) { $ ret = ' straight ' ; } $ temp2 = array ( ) ; foreach ( $ temp as $ t ) { if ( $ t == 1 ) { $ temp2 [ ] = 14 ; } else { $ temp2 [ ] = $ t ; } } sort ( $ temp2 ) ; if ( count ( $ temp2 ) == 5 && $ temp2 [ 4 ] - $ temp2 [ 0 ] == 4 ) { $ ret = ' straight ' ; } echo $ ret . " \n " ; } }
<?php $ input = fgets ( STDIN ) ; $ ans = pow ( $ input , 3 ) ; echo $ ans . " \n " ; ?>
<?php while ( $ line = trim ( fgets ( STDIN ) ) ) { list ( $ no , $ w , $ h ) = explode ( ' , ' , $ line ) ; if ( 25 <= ( $ w / ( $ h * $ h ) ) ) { echo $ no . " \n " ; } }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = $ n ; $ cnt = 0 ; for ( $ i = 0 ; $ i < count ( $ p ) ; $ i ++ ) { if ( $ max >= $ p [ $ i ] ) { $ max = $ p [ $ i ] ; $ cnt ++ ; } } echo $ cnt ; ?>
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ k = trim ( fgets ( STDIN ) ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { $ sub = $ array [ $ j ] - $ array [ $ i ] ; if ( $ sub > $ k ) { $ cnt = 1 ; } } } if ( $ cnt == 1 ) { echo " :( " ; } else { echo " Yay! " ; } ?>
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ nums [ 0 ] == $ nums [ 1 ] ) { echo ' Draw ' ; } else if ( $ nums [ 0 ] == 1 ) { echo ' Alice ' ; } else if ( $ nums [ 1 ] == 1 ) { echo ' Bob ' ; } else if ( $ nums [ 0 ] > $ nums [ 1 ] ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ deg_m = 360 / 60 * $ m ; $ deg_h = ( $ h * 60 + $ m ) * 360 / ( 12 * 60 ) ; $ deg = $ deg_h - $ deg_m ; $ answer = pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( deg2rad ( $ deg ) ) ; echo sqrt ( $ answer ) ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ A , $ B , $ H , $ M ) ; $ minutes = $ H * 60 + $ M ; $ A_degree = ( pi ( ) * $ minutes / 360 ) ; $ B_degree = ( pi ( ) * $ minutes / 30 ) ; $ c_degree = $ B_degree - $ A_degree ; $ C = sqrt ( $ A * $ A + $ B * $ B - 2 * $ A * $ B * cos ( $ c_degree ) ) ; echo $ C , " \n " ;
<?php define ( ' MOD ' , 10 ** 9 + 7 ) ; fscanf ( STDIN , ' %d ' , $ n ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ ans = 0 ; for ( $ k = 0 ; $ k < 60 ; $ k ++ ) { $ cnt_1 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ a [ $ i ] >> $ k ) & 1 ) $ cnt_1 ++ ; } $ ans = modAdd ( $ ans , modMul ( modMul ( $ n - $ cnt_1 , $ cnt_1 ) , modPow ( 2 , $ k ) ) ) ; } echo $ ans . PHP_EOL ; function modAdd ( $ x , $ y ) { return ( $ x + $ y ) % MOD ; } function modSub ( $ x , $ y ) { return ( $ x + MOD - $ y ) % MOD ; } function modMul ( $ x , $ y ) { return ( $ x * $ y ) % MOD ; } function modDiv ( $ x , $ y ) { return modMul ( $ x , modPow ( $ y , MOD - 2 ) ) ; } function modPow ( $ n , $ x ) { if ( $ x === 0 ) return 1 ; $ res = ( modPow ( $ n , $ x >> 1 ) ** 2 ) % MOD ; if ( $ x % 2 === 1 ) $ res = modMul ( $ res , $ n ) ; return $ res ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; print pow ( $ input , 3 ) ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo pow ( $ stdin , 3 ) . PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; $ Q = [ $ A , $ B , $ C , $ D , $ E ] ; $ Ap = $ A % 10 ; $ Bp = $ B % 10 ; $ Cp = $ C % 10 ; $ Dp = $ D % 10 ; $ Ep = $ E % 10 ; $ P = [ $ Ap , $ Bp , $ Cp , $ Dp , $ Ep ] ; $ min ; $ sum = 0 ; if ( array_sum ( $ P ) == 0 ) { echo array_sum ( $ Q ) ; } else { for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { if ( $ P [ $ i ] == 0 ) { $ P [ $ i ] = 10 ; } } $ min = min ( $ P ) ; for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { if ( $ Q [ $ i ] % 10 == 0 ) { $ sum += $ Q [ $ i ] ; } else { $ sum += ceil ( $ Q [ $ i ] / 10 ) * 10 ; } } echo $ sum - 10 + $ min ; } echo " \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( 12 < $ a ) { echo $ b ; } else if ( 6 <= $ a || $ a >= 12 ) { echo $ b / 2 ; } else if ( $ a <= 5 ) { echo 0 ; }
<?php fscanf ( STDIN , " %d %d " , $ H , $ W ) ; $ loadmap = [ ] ; for ( $ i = 0 ; $ i < $ H ; ++ $ i ) { $ loadmap [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ answer = 2000000000000000 ; for ( $ i = 0 ; $ i < $ H ; ++ $ i ) { for ( $ j = 0 ; $ j < $ W ; ++ $ j ) { $ tmp_sum = 0 ; for ( $ row = 0 ; $ row < $ H ; ++ $ row ) { for ( $ col = 0 ; $ col < $ W ; ++ $ col ) { $ tmp_sum += $ loadmap [ $ row ] [ $ col ] * min ( abs ( $ row - $ i ) , abs ( $ col - $ j ) ) ; } } $ answer = min ( $ answer , $ tmp_sum ) ; } } echo $ answer , " \n " ;
<?php $ input_line = trim ( fgets ( STDIN ) ) ; $ num = intval ( $ input_line ) ; $ ans = pow ( $ num , 3 ) ; echo " { $ ans } " . PHP_EOL ;
<?php $ in = [ ] ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ in [ ] ) ; fscanf ( STDIN , " %d " , $ k ) ; $ ans = " Yay! " ; for ( $ i = 0 ; $ i < count ( $ in ) - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < count ( $ in ) ; $ j ++ ) { if ( $ in [ $ j ] - $ in [ $ i ] > $ k ) { $ ans = " :( " ; break ; } } } echo $ ans ;
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ t1 = $ h1 * 60 + $ m1 ; $ t2 = $ h2 * 60 + $ m2 ; echo ( $ t2 - $ t1 - $ k ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php $ res = 0 ; $ min = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input = rtrim ( fgets ( STDIN ) ) ; $ last = intval ( substr ( $ input , - 1 ) ) ; if ( $ last === 0 ) { $ res += intval ( $ input ) / 10 ; } else { $ min = intval ( $ last ) < $ min ? $ last : $ min ; $ res += ceil ( intval ( $ input ) / 10 ) ; } } $ res = ( $ res * 10 ) + $ min - 10 ; echo $ res ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; print ( pow ( $ a , 3 ) ) ; ?>
<?php $ result = array ( ) ; while ( ! feof ( STDIN ) ) { $ line = trim ( fgets ( STDIN ) ) ; sscanf ( $ line , ' %d,%f,%f ' , $ n , $ kg , $ m ) ; if ( $ kg / ( $ m * $ m ) >= 25.0 ) { $ result [ ] = $ n ; } } echo implode ( " \n " , $ result ) . " \n " ;
<?php $ input = array_map ( ' intval ' , explode ( ' ' , fgets ( STDIN ) ) ) ; $ a = $ input [ 0 ] ; $ b = $ input [ 1 ] ; $ c = $ input [ 2 ] ; $ d = $ input [ 3 ] ; if ( ( $ a * $ b ) >= ( $ c * $ d ) ) { print $ a * $ b ; } else { print $ c * $ d ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ K = $ sc -> nextInt ( ) ; $ S = $ sc -> nextInt ( ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( 0 <= $ z && $ z <= $ K ) { $ count ++ ; } } } echo $ count ;
<?php $ num = trim ( fgets ( STDIN ) ) ; $ num = pow ( $ num , 3 ) ; print $ num ; ?>
<?php $ A [ 0 ] = trim ( fgets ( STDIN ) ) ; $ A [ 1 ] = trim ( fgets ( STDIN ) ) ; $ A [ 2 ] = trim ( fgets ( STDIN ) ) ; $ A [ 3 ] = trim ( fgets ( STDIN ) ) ; $ A [ 4 ] = trim ( fgets ( STDIN ) ) ; $ result = 0 ; ; for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { $ res = $ A [ $ i ] % 10 ; if ( $ res == 0 ) { $ res = 10 ; } $ a1 [ $ i ] = $ res ; } $ min = min ( $ a1 ) ; foreach ( $ A as $ v ) { $ aa = ceil ( ( $ v / 10 ) ) * 10 ; $ result += $ aa ; } $ result -= 10 - $ min ; print ( $ result ) ;
<?php $ line = readline ( ) ; readline_add_history ( $ line ) ; $ x = intval ( $ line ) ; $ x = $ x * $ x * $ x ; print $ x ; ?>
<?php fscanf ( STDIN , " %d%d " , $ N , $ D ) ; $ row = array ( ) ; $ cnt = 0 ; for ( $ n = 1 ; $ n <= $ N ; $ n ++ ) { $ row [ $ n ] = explode ( " " , fgets ( STDIN ) ) ; if ( $ n == 1 ) continue ; for ( $ m = $ n - 1 ; 0 < $ m ; $ m -- ) { $ dst = 0 ; $ stp = $ n - $ m ; for ( $ d = 0 ; $ d < $ D ; $ d ++ ) { $ x = intval ( $ row [ $ n ] [ $ d ] ) ; $ y = intval ( $ row [ $ n - $ stp ] [ $ d ] ) ; $ dst += pow ( $ y - $ x , 2 ) ; } $ sqt = sqrt ( $ dst ) ; $ cnt += ( $ sqt - intval ( sqrt ( $ dst ) ) == 0 ) ? 1 : 0 ; } } echo $ cnt ;
<?php list ( $ n ) = ints ( ) ; $ p = [ 1 , 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a = ints ( ) ; if ( $ a [ 0 ] >= $ p [ 0 ] && $ a [ 1 ] >= $ p [ 1 ] ) { $ p = $ a ; continue ; } $ m = max ( intdivceil ( $ p [ 0 ] , $ a [ 0 ] ) , intdivceil ( $ p [ 1 ] , $ a [ 1 ] ) ) ; $ p = [ $ a [ 0 ] * $ m , $ a [ 1 ] * $ m ] ; } echo array_sum ( $ p ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function intdivceil ( $ a , $ b ) { return $ a % $ b ? intdiv ( $ a , $ b ) + 1 : intdiv ( $ a , $ b ) ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ angle = abs ( $ m * 6 - ( ( 30 * $ h ) + ( 30 * $ m / 60 ) ) ) ; echo sqrt ( $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( deg2rad ( $ angle ) ) ) ; ?>
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ tri = $ array [ 0 ] * $ array [ 0 ] * $ array [ 0 ] ; echo $ tri ; ?>
<?php $ grid = array ( 0 => array ( 0 , 0 , 0 ) , 1 => array ( 0 , 0 , 0 ) , 2 => array ( 0 , 0 , 0 ) , ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ cins = trim ( fgets ( STDIN ) ) ; $ cin = explode ( " " , $ cins ) ; for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { $ grid [ $ i ] [ $ j ] = $ cin [ $ j ] ; } } for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { for ( $ j = 0 ; $ j < 2 ; $ j ++ ) { if ( $ grid [ $ i + 1 ] [ $ j + 1 ] - $ grid [ 0 ] [ $ j + 1 ] != $ grid [ $ i + 1 ] [ 0 ] - $ grid [ 0 ] [ 0 ] ) { $ wrong ++ ; } } } for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { for ( $ j = 0 ; $ j < 2 ; $ j ++ ) { if ( $ grid [ $ i + 1 ] [ $ j + 1 ] - $ grid [ $ i + 1 ] [ 0 ] != $ grid [ 0 ] [ $ j + 1 ] - $ grid [ 0 ] [ 0 ] ) { $ wrong ++ ; } } } if ( $ wrong != 0 ) { echo ( " No " ) ; } else { echo ( " Yes " ) ; } ?>
<?php $ base = 1 ; fscanf ( STDIN , " %d %d " , $ N , $ P ) ; if ( $ N == 1 ) { echo $ P ; return 0 ; } if ( $ N > 50 ) { echo ' 1 ' ; return 0 ; } while ( pow ( $ base , $ N ) <= $ P ) { if ( $ P % ( pow ( $ base , $ N ) ) == 0 ) { $ ans = $ base ; } $ base ++ ; } echo $ ans ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ x [ $ i ] , $ y [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ distance = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ dx = ( $ x [ $ i ] - $ x [ $ j ] ) * ( $ x [ $ i ] - $ x [ $ j ] ) ; $ dy = ( $ y [ $ i ] - $ y [ $ j ] ) * ( $ y [ $ i ] - $ y [ $ j ] ) ; $ distance += sqrt ( $ dx + $ dy ) ; } } $ p = ( $ n * ( $ n - 1 ) ) / 2 ; $ ave = $ distance / $ p ; echo $ ave * ( $ n - 1 ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ au = array_unique ( $ a ) ; echo ( max ( $ au ) - min ( $ au ) ) . " \n " ;
<?php $ mod7 = ( pow ( 10 , 9 ) + 7 ) ; $ N = trim ( fgets ( STDIN ) ) ; $ A = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ cnt = [ ] ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ cnt [ $ i ] = 0 ; } foreach ( $ A as $ outerKey => $ item ) { for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ cnt [ $ i ] += $ item >> $ i & 1 ; } } $ res = 0 ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ tmp = ( $ cnt [ $ i ] * ( $ N - $ cnt [ $ i ] ) ) % $ mod7 ; $ tmp2 = ( 1 << $ i ) % $ mod7 ; $ tmp = ( $ tmp * $ tmp2 ) % $ mod7 ; $ res = ( $ res + $ tmp ) % $ mod7 ; } echo $ res . PHP_EOL ;
<?php function convNum ( $ i ) { if ( $ i == 1 ) { return 14 ; } else { return $ i ; } } fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ a = convNum ( $ a ) ; $ b = convNum ( $ b ) ; if ( $ a > $ b ) { print " Alice " ; } elseif ( $ a == $ b ) { print " Draw " ; } else { print " Bob " ; } ?>
<?php $ ks = explode ( ' ' , fgets ( STDIN ) ) ; $ k = $ ks [ 0 ] ; $ s = $ ks [ 1 ] ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { $ l = $ s - $ i - $ j ; if ( 0 <= $ l && $ l <= $ k ) $ count ++ ; } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ s = max ( $ a , $ b , $ c , $ d , $ e ) - min ( $ a , $ b , $ c , $ d , $ e ) ; if ( $ s <= $ k ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ cnt5 = 0 ; $ cnt7 = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ { chr ( ord ( " a " ) + $ i ) } == 5 ) { $ cnt5 ++ ; } elseif ( $ { chr ( ord ( " a " ) + $ i ) } == 7 ) { $ cnt7 ++ ; } } if ( $ cnt5 == 2 && $ cnt7 == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ N = fgets ( STDIN ) ; $ P = fgets ( STDIN ) ; $ arrayP = explode ( " " , $ P ) ; $ result = 1 ; $ min = $ arrayP [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ min >= $ arrayP [ $ i ] ) { $ min = $ arrayP [ $ i ] ; $ result ++ ; } } echo $ result ;
<?php list ( $ a , $ b , $ h , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ h == 6 && $ m == 0 ) { echo $ a + $ b ; exit ; } if ( $ h == 0 && $ m == 0 ) { echo abs ( $ a - $ b ) ; exit ; } $ h_degree = ( 30 * $ h ) + ( 30 * $ m / 60 ) ; $ m_degree = 6 * $ m ; $ degree = abs ( $ h_degree - $ m_degree ) ; $ ans = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( deg2rad ( $ degree ) ) ; echo sqrt ( $ ans ) ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ mapN [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ mapM [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ x = 0 ; $ x <= $ N - $ M ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ N - $ M ; $ y ++ ) { $ bool = true ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { if ( $ mapM [ $ i ] [ $ j ] != $ mapN [ $ x + $ i ] [ $ y + $ j ] ) { $ bool = false ; } } } if ( $ bool == true ) { echo " Yes \n " ; exit ; } } } echo " No \n " ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ X [ ] = intval ( trim ( fgets ( STDIN ) ) ) ; } $ ans = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ amari = $ X [ $ i ] % 10 ; if ( ( $ amari < $ ans ) && ( $ amari != 0 ) ) { $ ans = $ amari ; $ i_memory = $ i ; } } $ sum = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i == $ i_memory ) { $ sum += $ X [ $ i ] ; } else { if ( $ X [ $ i ] % 10 == 0 ) { $ sum += $ X [ $ i ] ; } else { $ sum += ( intdiv ( $ X [ $ i ] + 10 , 10 ) * 10 ) ; } } } echo $ sum ; ?>
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ flg = 0 ; while ( $ tmp = fgets ( STDIN ) ) { $ varInputData [ ] = trim ( $ tmp ) ; } $ intInputDataCounter = count ( $ varInputData ) ; $ intInputOutRange = $ varInputData [ $ intInputDataCounter - 1 ] ; unset ( $ varInputData [ $ intInputDataCounter - 1 ] ) ; for ( $ i = 0 ; $ i < $ intInputDataCounter - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ intInputDataCounter - 1 ; $ j ++ ) { if ( $ varInputData [ $ i ] >= $ varInputData [ $ j ] ) { $ intBetweenAntena [ ] = $ varInputData [ $ i ] - $ varInputData [ $ j ] ; } else { $ intBetweenAntena [ ] = $ varInputData [ $ j ] - $ varInputData [ $ i ] ; } } } foreach ( $ intBetweenAntena as $ out ) { if ( $ out > $ intInputOutRange ) { exit ( ' :( ' ) ; break ; } } echo ' Yay! ' ; ?>
<?php $ num = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ num * $ num * $ num ; echo " \n " ; ?>
<?php while ( fscanf ( STDIN , " %d " , $ n ) && $ n ) { $ riso_bmi = 10000 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ bango , $ height , $ weight ) ; $ height /= 100.0 ; $ bmi = $ weight * 1.0 / $ height / $ height ; if ( abs ( $ bmi - 22 ) < abs ( $ riso_bmi - 22 ) ) { $ riso_bmi = $ bmi ; $ riso_no = $ bango ; } } fprintf ( STDOUT , " %d \n " , $ riso_no ) ; } return ( 0 ) ; ?>
<?php list ( $ n , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ k == 1 ) { echo 0 ; } else { echo $ n - $ k ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; trim ( fgets ( STDIN ) ) ; trim ( fgets ( STDIN ) ) ; trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; echo ( $ e - $ a <= $ k ) ? " Yay! " : " :( " ;
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; fscanf ( STDIN , " %d " , $ t ) ; $ dis = abs ( $ b [ 0 ] - $ a [ 0 ] ) ; $ dis_a = bcmul ( $ a [ 1 ] , $ t ) ; $ dis_b = bcadd ( $ dis , bcmul ( $ b [ 1 ] , $ t ) ) ; if ( $ dis_a >= $ dis_b ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fgets ( STDIN ) ; $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ array as $ c ) { $ map [ $ c ] = true ; } echo count ( $ map ) == 3 ? " Three " : " Four " ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ P , $ Y ) ; $ X = sprintf ( " Z%06d%010d " , $ P , $ Y ) ; $ arr [ ] = $ X ; } asort ( $ arr ) ; $ prev = ' Z000000000000 ' ; $ cnt = 0 ; $ ans = [ ] ; foreach ( $ arr as $ k => $ v ) { $ p1 = substr ( $ v , 1 , 6 ) ; $ prev_p1 = substr ( $ prev , 1 , 6 ) ; if ( $ p1 !== $ prev_p1 ) { $ cnt = 1 ; } else { $ cnt ++ ; } $ ans [ $ k ] = sprintf ( " %06d%06d " , $ p1 , $ cnt ) ; $ prev = $ v ; } ksort ( $ ans ) ; echo implode ( PHP_EOL , $ ans ) ;
<?php fscanf ( STDIN , " %d%d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X [ ] = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ j = 0 ; $ j < $ N - 1 ; $ j ++ ) { for ( $ k = $ j + 1 ; $ k < $ N ; $ k ++ ) { $ ans = 0 ; for ( $ d = 0 ; $ d < $ D ; $ d ++ ) { $ dis = ( abs ( $ X [ $ j ] [ $ d ] - $ X [ $ k ] [ $ d ] ) ) ** 2 ; $ ans += $ dis ; } if ( ( sqrt ( $ ans ) ) == intval ( sqrt ( $ ans ) ) ) { $ count ++ ; } } } echo $ count ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ h , $ m ) ; $ y = $ m / 60 ; $ x = ( $ h + $ y ) / 12 ; $ rad = deg2rad ( ( $ x - $ y ) * 360 ) ; $ ans = sqrt ( $ a ** 2 + $ b ** 2 - 2 * $ a * $ b * cos ( $ rad ) ) ; echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x_li [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ sum = 0 ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i < $ j ) { for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ sum += ( $ x_li [ $ j ] [ $ k ] - $ x_li [ $ i ] [ $ k ] ) ** 2 ; } if ( sqrt ( $ sum ) - ( int ) sqrt ( $ sum ) == 0 ) { $ count ++ ; } } $ sum = 0 ; } } echo $ count . " \n " ;
<?php $ length = preg_replace ( ' /(\\r|\\n|\\r\\n)/ ' , ' ' , fgets ( STDIN ) ) ; $ inputList = explode ( ' ' , preg_replace ( ' /(\\r|\\n|\\r\\n)/ ' , ' ' , fgets ( STDIN ) ) ) ; $ minNumber = $ inputList [ 0 ] ; $ passCount = 0 ; for ( $ i = 0 ; $ i < $ length ; $ i ++ ) { if ( $ inputList [ $ i ] <= $ minNumber ) { $ passCount ++ ; $ minNumber = $ inputList [ $ i ] ; } } echo $ passCount . PHP_EOL ;
<?php $ cnt = 0 ; $ arr = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ arr as $ val ) { if ( $ val == 5 ) { $ cnt ++ ; } } if ( $ cnt == 2 ) echo " YES " ; else echo " NO " ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; if ( $ a * $ b >= $ c * $ d ) { print $ a * $ b ; } else { print $ c * $ d ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { $ rest = $ S - $ i - $ j ; if ( 0 <= $ rest && $ rest <= $ K ) { $ ans ++ ; } } } echo $ ans . PHP_EOL ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ avg = array_sum ( $ input ) / count ( $ input ) ; echo ceil ( $ avg ) ;
<?php while ( true ) { $ input = trim ( fgets ( STDIN ) ) ; if ( $ input == " 0 " ) { break ; } $ data = str_split ( $ input ) ; $ answer = array_sum ( $ data ) ; echo $ answer . PHP_EOL ; }
<?php $ nm = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = $ nm [ 0 ] ; $ m = $ nm [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ b [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } $ ans = ' No ' ; for ( $ i = 0 ; $ i <= $ n - $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n - $ m ; $ j ++ ) { $ c = 0 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) { for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ a [ $ i + $ k ] [ $ j + $ l ] == $ b [ $ k ] [ $ l ] ) { $ c ++ ; } } } if ( $ c == $ m * $ m ) $ ans = ' Yes ' ; } } echo $ ans ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; echo $ res ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array_string = array ( $ a , $ b , $ c ) ; $ dem_5 = 0 ; $ dem_7 = 0 ; foreach ( $ array_string as $ string ) { if ( $ string == 5 ) { $ dem_5 ++ ; } if ( $ string == 7 ) { $ dem_7 ++ ; } } # output if ($dem_5 == 2 && $dem_7 == 1) { echo " YES\n"; } else { echo "NO\n"; } ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ n = $ sc -> nextInt ( ) ; $ ref = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; arsort ( $ ref ) ; $ res = 0 ; for ( $ i = 0 ; $ i < count ( $ ref ) ; $ i ++ ) { if ( $ n >= $ ref [ $ i ] ) { $ res = $ ref [ $ i ] ; } } echo $ res ;
<?php $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo ceil ( array_sum ( $ array ) / count ( $ array ) ) ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; $ integerCount = 0 ; $ points = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ points [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ point_y = $ points [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ point_z = $ points [ $ j ] ; $ distance = 0 ; foreach ( $ point_y as $ index => $ coordinate ) { $ distance += pow ( abs ( $ point_y [ $ index ] - $ point_z [ $ index ] ) , 2 ) ; } if ( intval ( sqrt ( $ distance ) ) == sqrt ( $ distance ) ) { $ integerCount ++ ; } } } echo $ integerCount ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ r = array ( ) ; foreach ( $ s as $ col ) { $ r [ $ col ] ++ ; } if ( count ( $ r ) == 3 ) { echo " Three \n " ; } else { echo " Four \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ d = $ n - $ m + 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %s " , $ a [ ] ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %s " , $ s ) ; $ b [ ] = str_replace ( ' . ' , ' \. ' , $ s ) ; } $ a = implode ( ' / ' , $ a ) ; $ b = implode ( ' .{ ' . $ d . ' } ' , $ b ) ; echo preg_match ( " / $ b / " , $ a ) ? ' Yes ' : ' No ' ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ dummy = array ( ) ; $ count = 0 ; $ min = null ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ min == null || $ min > $ array [ $ i ] ) { $ min = $ array [ $ i ] ; } if ( $ array [ $ i ] <= $ min ) { $ count ++ ; } } echo $ count ;
<?php list ( $ a_point , $ a_move ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; list ( $ b_point , $ b_move ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ time = trim ( fgets ( STDIN ) ) ; if ( $ a_move <= $ b_move ) { echo ' NO ' ; exit ; } if ( abs ( $ a_point - $ b_point ) <= abs ( $ a_move - $ b_move ) * $ time ) { echo ' YES ' ; exit ; } echo ' NO ' ; exit ; ?>
<?php fscanf ( STDIN , " %d %d " , $ in_k , $ in_s ) ; $ ans_kumi = 0 ; for ( $ x = 0 ; $ x <= $ in_k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ in_k ; $ y ++ ) { if ( ( $ in_s - $ x - $ y >= 0 ) && ( $ in_s - $ x - $ y <= $ in_k ) ) { $ ans_kumi ++ ; } } } echo " $ ans_kumi \n " ; ?>
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ yp = [ ] ; $ py = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %d%d " , $ p , $ y ) ; $ yp [ $ y ] = $ p ; $ py [ $ p ] [ ] = $ y ; } $ memo = [ ] ; foreach ( $ py as $ k => $ d ) { sort ( $ py [ $ k ] ) ; foreach ( $ py [ $ k ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ yp as $ yy => $ pp ) { echo sprintf ( " %06d " , $ pp ) ; echo sprintf ( " %06d " , $ memo [ $ yy ] ) ; echo " \n " ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = 1 ; $ current = $ p [ 0 ] ; foreach ( $ p as $ num ) { if ( $ current > $ num ) { $ count ++ ; $ current = $ num ; } } echo $ count . PHP_EOL ;
<?php $ input = fgets ( STDIN ) ; print pow ( $ input , 3 ) ; ?>
<?php $ input = fgets ( STDIN ) ; echo $ output = $ input * $ input * $ input ; ?>
<?php fscanf ( STDIN , ' %d ' , $ a ) ; fscanf ( STDIN , ' %d ' , $ b ) ; fscanf ( STDIN , ' %d ' , $ c ) ; fscanf ( STDIN , ' %d ' , $ d ) ; fscanf ( STDIN , ' %d ' , $ e ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ e - $ a > $ k ) $ ans = ' :( ' ; else $ ans = ' Yay! ' ; echo $ ans . PHP_EOL ;
<?php $ a ; fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 1 ; $ i <= 3500 ; $ i ++ ) { for ( $ j = 1 ; $ j <= 3500 ; $ j ++ ) { $ x = 4 * $ i * $ j - $ n * $ j - $ n * $ i ; $ y = $ i * $ j * $ n ; if ( $ x > 0 && $ y % $ x == 0 ) { echo " $ i $ j " , ( $ y / $ x ) , " \n " ; exit ; } } } ?>
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( function ( $ n ) { return ( int ) $ n ; } , explode ( ' ' , fgets ( STDIN ) ) ) ; $ long_omega = 0.5 ; $ short_omega = 6.0 ; $ min = $ H * 60 + $ M ; $ long_angle = $ long_omega * $ min ; $ short_angle = $ short_omega * $ min % 360.0 ; $ angle = abs ( $ long_angle - $ short_angle ) ; echo sqrt ( $ A * $ A + $ B * $ B - 2 * $ A * $ B * cos ( 2 * pi ( ) * ( $ angle / 360.0 ) ) ) ;
<?php while ( TRUE ) { $ c = fscanf ( STDIN , ' %d,%d,%d,%d,%d ' ) ; if ( feof ( STDIN ) ) { break ; } sort ( $ c ) ; $ hash = array ( ) ; $ max = 0 ; foreach ( $ c as $ v ) { if ( ! isset ( $ hash [ $ v ] ) ) { $ hash [ $ v ] = 0 ; } $ hash [ $ v ] ++ ; $ max = $ hash [ $ v ] > $ max ? $ hash [ $ v ] : $ max ; } arsort ( $ hash ) ; $ combo = ' null ' ; if ( $ max >= 2 ) { $ combo = ' one pair ' ; } if ( $ max >= 2 && count ( $ hash ) <= 3 ) { $ combo = ' two pair ' ; } if ( $ max >= 3 ) { $ combo = ' three card ' ; } if ( count ( $ hash ) === 5 && isStraight ( $ c ) ) { $ combo = ' straight ' ; } if ( $ max >= 3 && count ( $ hash ) <= 2 ) { $ combo = ' full house ' ; } if ( $ max >= 4 ) { $ combo = ' four card ' ; } echo $ combo . PHP_EOL ; } function isStraight ( $ cards ) { if ( max ( $ cards ) - min ( $ cards ) === 4 ) { return true ; } if ( $ cards [ 0 ] === 1 && $ cards [ 1 ] === 10 && $ cards [ 4 ] === 13 ) { return true ; } return false ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x , PHP_EOL ;
<?php $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (empty($l)) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a[0]; $key->B = $a[1]; $key->C = $a[2]; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); } } $a=array(); $a[5]=0; $a[7]=0; $a[$key->A]=$a[$key->A]+1; $a[$key->B]=$a[$key->B]+1; $a[$key->C]=$a[$key->C]+1; if (($a[5]==2) && ($a[7]==1)) { printf("YES\n"); } else { printf("NO\n"); }
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ hh = ( $ H % 12 ) * 30 ; $ mm = $ M * 6 ; $ hh += $ M * 0.5 ; $ k = abs ( $ hh - $ mm ) ; if ( $ k > 180 ) $ k = 360 - $ k ; echo sqrt ( $ A ** 2 + $ B ** 2 - ( 2 * $ A * $ B * cos ( deg2rad ( $ k ) ) ) ) ;
<?php $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( abs ( $ an [ $ i ] - $ an [ $ j ] ) > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ;
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; asort ( $ n ) ; $ nn = array_values ( $ n ) ; if ( $ nn [ 0 ] == 1 && $ nn [ 1 ] == 4 && $ nn [ 2 ] == 7 && $ nn [ 3 ] == 9 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; print ( $ x * $ x * $ x . " \n " ) ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a < 6 ) { echo 0 ; } elseif ( $ a < 13 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ S = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ flag = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ S [ $ i ] == ' Y ' ) { $ flag = 1 ; } } if ( $ flag == 1 ) { out :: println ( ' Four ' ) ; } else { out :: println ( ' Three ' ) ; } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = ( int ) $ input [ 0 ] ; $ p = ( int ) $ input [ 1 ] ; $ max = floor ( sqrt ( $ p ) ) ; $ as = [ ] ; if ( $ n === 1 ) { echo $ p ; exit ( ) ; } for ( $ i = 2 ; $ i <= $ max ; $ i ++ ) { while ( $ p % $ i === 0 ) { if ( empty ( $ as [ $ i ] ) ) { $ as [ $ i ] = 1 ; } else { $ as [ $ i ] += 1 ; } $ p = floor ( $ p / $ i ) ; } } $ min = 1 ; foreach ( $ as as $ key => $ value ) { if ( $ value >= $ n ) { $ jo = floor ( $ value / $ n ) ; $ min *= pow ( $ key , $ jo ) ; } } echo $ min ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ x [ ] , $ y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ distance = 0 ; $ o = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ o ++ ; $ distance += sqrt ( ( $ x [ $ i ] - $ x [ $ j ] ) * ( $ x [ $ i ] - $ x [ $ j ] ) + ( $ y [ $ i ] - $ y [ $ j ] ) * ( $ y [ $ i ] - $ y [ $ j ] ) ) ; } } echo $ distance * ( $ n - 1 ) / $ o ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; if ( $ K === 1 ) { echo 0 ; } else { echo $ N - $ K ; }
<?php function cubic ( $ x ) { echo $ x * $ x * $ x , PHP_EOL ; } $ input = trim ( fgets ( STDIN ) ) ; $ x = intval ( $ input ) ; cubic ( $ x ) ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ Sn = trim ( fgets ( STDIN ) ) ; $ Snary = explode ( " " , $ Sn ) ; $ temp = [ ] ; foreach ( $ Snary as $ colore ) { if ( ! in_array ( $ colore , $ temp , true ) ) { $ temp [ ] = $ colore ; } } echo count ( $ temp ) === 4 ? ' Four ' : ' Three ' ; ?>
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ 0 ] [ $ j ] - $ c [ 0 ] [ 0 ] != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; ++ $ this -> pointer ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ h = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ cos_a = null ; $ hour_needle_degree_from_top = ( 60 * $ h + $ m ) / ( 60 * 12 ) * 360 ; $ minute_needle_degree_from_top = $ m / 60 * 360 ; $ deg_c = abs ( $ hour_needle_degree_from_top - $ minute_needle_degree_from_top ) ; $ cos_c = cos ( deg2rad ( $ deg_c ) ) ; $ c_square = $ a * $ a + $ b * $ b - 2 * $ a * $ b * $ cos_c ; $ c = sqrt ( $ c_square ) ; echo $ c . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ ps = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ cnt = 1 ; $ min = $ ps [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ ps [ $ i ] < $ min ) { $ min = $ ps [ $ i ] ; $ cnt ++ ; } } echo $ cnt ;
<?php $ x = trim ( fgets ( STDIN ) ) ; print $ x * $ x * $ x . " \n " ; ?>
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { list ( $ x , $ y ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ X [ ] = $ x ; $ Y [ ] = $ y ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { if ( $ i == $ j ) continue ; $ dis [ ] = sqrt ( ( ( ( $ X [ $ i ] - $ X [ $ j ] ) ** 2 ) + ( ( $ Y [ $ i ] - $ Y [ $ j ] ) ** 2 ) ) ) ; } } echo ( $ N - 1 ) * ( array_sum ( $ dis ) / count ( $ dis ) ) . " \n " ; ?>
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ city = [ ] ; $ p = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ p [ $ i ] , $ y [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ city [ $ y [ $ i ] ] = $ p [ $ i ] ; } ksort ( $ city ) ; $ pref = [ ] ; $ prefcnt = [ ] ; foreach ( $ city as $ key => $ val ) { if ( ! isset ( $ pref [ $ val ] ) ) { $ pref [ $ val ] = [ ] ; $ prefcnt [ $ val ] = 0 ; } $ prefcnt [ $ val ] ++ ; $ pref [ $ val ] [ $ key ] = $ prefcnt [ $ val ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { echo str_pad ( $ p [ $ i ] , 6 , " 0 " , STR_PAD_LEFT ) ; echo str_pad ( $ pref [ $ p [ $ i ] ] [ $ y [ $ i ] ] , 6 , " 0 " , STR_PAD_LEFT ) ; echo PHP_EOL ; }
<?php $ x = fgets ( STDIN ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ _ = trim ( fgets ( STDIN ) ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; $ min = 200000 ; foreach ( $ a as $ v ) { if ( $ v <= $ min ) { $ min = $ v ; $ i ++ ; } } echo $ i ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ in [ 1 ] , $ in [ 2 ] , $ in [ 3 ] , $ in [ 4 ] ) ; $ result ; $ result += ( array_search ( ' 1 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 4 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 7 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 9 ' , $ in ) != FALSE ) ? 1 : 0 ; echo ( $ result == 4 ) ? " YES " : " NO " ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab > $ cd ) { echo $ ab ; } elseif ( $ ab < $ cd ) { echo $ cd ; } else { echo $ cd ; } ?>
<?php list ( $ age , $ fee ) = explode ( " " , fgets ( STDIN ) ) ; echo $ fee * check_discount_fee ( $ age ) ; echo " \n " ; function check_discount_fee ( $ age ) { if ( $ age >= 13 ) { return 1 ; } elseif ( $ age >= 6 ) { return 0.5 ; } else { return 0 ; } } ?>
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( ' intval ' , explode ( " " , ( trim ( fgets ( STDIN ) ) ) ) ) ; $ angle_a = 360 / 12 * $ H + 30 / 60 * $ M ; $ angle_b = 360 / 60 * $ M ; $ diff = abs ( $ angle_b - $ angle_a ) ; if ( $ diff > 180 ) { $ diff = 360 - $ diff ; } $ C = sqrt ( $ A ** 2 + $ B ** 2 - 2 * $ A * $ B * cos ( deg2rad ( $ diff ) ) ) ; echo $ C . " \n " ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ point = $ p [ 0 ] ; $ count = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ p [ $ i ] < $ point ) { $ point = $ p [ $ i ] ; $ count ++ ; } } echo $ count . " \n " ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 3 ) { } else { list ( $ no , $ weight , $ height ) = $ values ; $ bmi = $ weight / pow ( $ height , 2 ) ; if ( $ bmi >= 25 ) { echo $ no . " \n " ; } } }
<?php fscanf ( STDIN , " %d %d " , $ b , $ c ) ; if ( $ b >= 13 ) { echo $ c ; } elseif ( $ b >= 6 && $ b <= 12 ) { echo $ c / 2 ; } elseif ( $ b <= 5 ) { echo 0 ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b ; } else if ( $ a <= 5 ) { echo 0 ; } else { echo $ b / 2 ; }
<?php $ data = explode ( ' ' , fgets ( STDIN ) ) ; print ceil ( ( $ data [ 0 ] + $ data [ 1 ] ) / 2 ) ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ A , $ B , $ H , $ M ) ; $ L_KAKUDO = 90 - $ H * 30 - $ M / 2 ; $ S_KAKUDO = 90 - $ M * 6 ; define ( ' RAD ' , 180 / M_PI ) ; $ L_X = cos ( $ L_KAKUDO / RAD ) * $ A ; $ L_Y = sin ( $ L_KAKUDO / RAD ) * $ A ; $ S_X = cos ( $ S_KAKUDO / RAD ) * $ B ; $ S_Y = sin ( $ S_KAKUDO / RAD ) * $ B ; $ ans = sqrt ( pow ( $ L_X - $ S_X , 2 ) + pow ( $ L_Y - $ S_Y , 2 ) ) ; printf ( " %0.53f " , $ ans ) ;
<?php $ sc = new Scanner ( ) ; $ a = [ ] ; $ b = [ ] ; $ d = [ ] ; $ N = $ sc -> nextInt ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ a [ ] = $ sc -> nextInt ( ) ; } $ all_plus = true ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ b [ ] = $ sc -> nextInt ( ) ; $ d [ ] = $ a [ $ i ] - $ b [ $ i ] ; if ( $ d [ $ i ] < 0 ) { $ all_plus = false ; } } if ( array_sum ( $ a ) < array_sum ( $ b ) ) { echo ' -1 ' . PHP_EOL ; exit ; } if ( $ all_plus ) { echo 0 . PHP_EOL ; exit ; } sort ( $ d ) ; $ cnt = 0 ; $ total = 0 ; foreach ( $ d as $ v ) { if ( $ v < 0 ) { $ cnt ++ ; $ total += $ v ; } else { break ; } } for ( $ i = $ N - 1 ; $ i > 0 ; $ i -- ) { $ total += $ d [ $ i ] ; $ cnt ++ ; if ( $ total >= 0 ) { break ; } } echo $ cnt . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( " " , rtrim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , rtrim ( fgets ( STDIN ) ) ) ; $ over = 0 ; $ under = 0 ; $ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] >= $ b [ $ i ] ) $ over += $ a [ $ i ] - $ b [ $ i ] ; else { $ under += $ b [ $ i ] - $ a [ $ i ] ; $ result ++ ; } $ err [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } $ i = 0 ; rsort ( $ err ) ; while ( $ under > 0 ) { $ under -= $ err [ $ i ] ; $ result ++ ; $ i ++ ; if ( $ i == $ n ) { $ result = - 1 ; break ; } } printf ( " %d \n " , $ result ) ;
<?php $ n = fscanf ( STDIN , str_repeat ( " %d " , 3 ) ) ; $ cnt5 = 0 ; $ cnt7 = 0 ; foreach ( $ n as $ k => $ v ) { if ( $ v === 5 ) { $ cnt5 ++ ; } else { $ cnt7 ++ ; } } if ( $ cnt5 === 2 && $ cnt7 === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ l = [ $ a , $ b , $ c ] ; $ s = [ 5 => 0 , 7 => 0 ] ; foreach ( $ l as $ v ) { if ( in_array ( $ v , [ 5 , 7 ] ) ) { $ s [ $ v ] ++ ; } else { echo " NO " ; exit ; } } if ( $ s [ 5 ] == 2 && $ s [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; $ x = $ x * $ x * $ x ; echo $ x ; ?>
<?php fscanf ( STDIN , " %d%d%d%d " , $ A , $ B , $ H , $ M ) ; $ argH = ( $ H / 12 + $ M / 12 / 60 ) * 2 * pi ( ) ; $ argM = $ M / 60 * 2 * pi ( ) ; $ dx = $ A * cos ( $ argH ) - $ B * cos ( $ argM ) ; $ dy = $ A * sin ( $ argH ) - $ B * sin ( $ argM ) ; printf ( " %.18f " , ( $ dx ** 2 + $ dy ** 2 ) ** 0.5 ) ;
<?php fscanf ( STDIN , " %d " , $ x ) ; $ ans = $ x * $ x * $ x ; echo " $ ans \n " ;
<?php while ( true ) { $ stdin = trim ( fgets ( STDIN ) ) ; if ( $ stdin === ' ' ) { break ; } $ val = explode ( ' , ' , $ stdin ) ; $ number = $ val [ 0 ] ; $ weight = $ val [ 1 ] ; $ height = $ val [ 2 ] ; $ bmi = $ weight / ( $ height * $ height ) ; if ( $ bmi >= 25 ) { printf ( " %d \n " , $ number ) ; } }
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ five = 0 ; $ seven = 0 ; foreach ( $ input as $ i ) { if ( $ i === " 5 " ) { $ five += 1 ; } elseif ( $ i === " 7 " ) { $ seven += 1 ; } } if ( $ five === 2 && $ seven === 1 ) { echo " YES " . " \n " ; } else { echo " NO " . " \n " ; } ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ s = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ s ) ; $ s = explode ( " " , $ s ) ; $ count = $ s [ 0 ] ; $ n = $ s [ 1 ] ; $ ponints = array ( ) ; for ( $ i = 0 ; $ i < $ count ; $ i ++ ) { $ s = trim ( fgets ( STDIN ) ) ; $ s = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ s ) ; $ s = explode ( " " , $ s ) ; $ ponints [ ] = $ s ; } function kyori ( $ a , $ b , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += ( $ a [ $ i ] - $ b [ $ i ] ) * ( $ a [ $ i ] - $ b [ $ i ] ) ; } return sqrt ( ( int ) $ sum ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; } $ seisuu_num = 0 ; for ( $ i = 0 ; $ i < $ count ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ count ; $ j ++ ) { $ kyori = kyori ( $ ponints [ $ i ] , $ ponints [ $ j ] , $ n ) ; if ( is_decimal ( $ kyori ) ) { $ seisuu_num ++ ; } } } echo $ seisuu_num ; ?>
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ K ) ; $ L = max ( $ A , $ B , $ C , $ D , $ E ) - min ( $ A , $ B , $ C , $ D , $ E ) ; if ( $ L <= $ K ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; $ seven = 0 ; $ five = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ array [ $ i ] == 7 ) { $ seven ++ ; } elseif ( $ array [ $ i ] == 5 ) { $ five ++ ; } } if ( $ seven === 1 && $ five === 2 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ rsl = in_array ( " Y " , $ s ) ; if ( $ rsl === true ) { echo " Four " ; } else { echo " Three " ; }
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php while ( $ sum = array_sum ( str_split ( trim ( fgets ( STDIN ) ) ) ) ) printf ( " %d \n " , $ sum ) ;
<?php list ( $ N , $ M ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { list ( $ P [ ] , $ Y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ PY [ $ P [ $ i ] ] [ $ Y [ $ i ] ] = $ i ; } foreach ( $ PY as $ k => $ y ) { ksort ( $ y ) ; $ seq = 1 ; foreach ( $ y as $ kk => $ v ) { $ a [ $ v ] = sprintf ( " %06d%06d " , $ k , $ seq ) ; $ seq ++ ; } } ksort ( $ a ) ; foreach ( $ a as $ v ) { printf ( " %s \n " , $ v ) ; }
<?php $ num = trim ( fgets ( STDIN ) ) ; $ res = $ num * $ num * $ num ; echo $ res . PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; $ nums = [ $ a , $ b , $ c , $ d ] ; sort ( $ nums ) ; if ( $ nums [ 0 ] === 1 && $ nums [ 1 ] === 4 && $ nums [ 2 ] === 7 && $ nums [ 3 ] === 9 ) { echo ' YES ' ; } else { echo ' NO ' ; } echo " \n " ;
<?php ini_set ( ' memory_limit ' , ' 1024M ' ) ; $ sc = new Scanner ( ) ; $ N = $ sc -> nextInt ( ) ; $ P = $ sc -> nextInt ( ) ; if ( $ N == 1 ) { echo $ P . PHP_EOL ; exit ; } if ( $ P == 1 ) { echo 1 . PHP_EOL ; exit ; } $ result = get_prime_factors ( $ P ) ; $ ans = 1 ; foreach ( $ result as $ k => $ v ) { $ ans *= pow ( $ k , ( int ) ( $ v / $ N ) ) ; } echo $ ans . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function get_prime_factors ( $ N ) { $ result = [ ] ; for ( $ i = 2 ; $ i * $ i <= $ N ; $ i ++ ) { if ( $ N % $ i == 0 ) { while ( $ N % $ i == 0 ) { $ result [ $ i ] ++ ; $ N /= $ i ; } } } if ( $ N > 1 ) { $ result [ $ N ] ++ ; $ N /= $ N ; } return $ result ; }
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ data = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ data [ ] = fscanf ( STDIN , " %d %d " ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ data [ $ i ] [ 2 ] = $ i ; } foreach ( $ data as $ key => $ value ) { $ sort [ $ key ] = $ value [ 1 ] ; } array_multisort ( $ sort , SORT_ASC , $ data ) ; $ ans_data = array ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ ans_data [ $ i ] = 1 ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ id_first = sprintf ( ' %06d ' , $ data [ $ i ] [ 0 ] ) ; $ id_last = sprintf ( ' %06d ' , $ ans_data [ $ data [ $ i ] [ 0 ] ] ) ; $ data [ $ i ] [ 3 ] = $ id_first . $ id_last ; $ ans_data [ $ data [ $ i ] [ 0 ] ] ++ ; } foreach ( $ data as $ key => $ value ) { $ sort [ $ key ] = $ value [ 2 ] ; } array_multisort ( $ sort , SORT_ASC , $ data ) ; foreach ( $ data as $ a ) { echo $ a [ 3 ] . " \n " ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ x , $ y ) ; $ chart_points [ $ i ] = [ ' x ' => $ x , ' y ' => $ y ] ; } function dfs ( $ ranged_n , $ array = " " ) { $ result = [ ] ; if ( count ( $ ranged_n ) == 0 ) { $ result [ ] = $ array ; } else { foreach ( $ ranged_n as $ key => $ val ) { $ _array = $ array . $ val ; $ _ranged_n = $ ranged_n ; unset ( $ _ranged_n [ $ key ] ) ; $ pre_result = dfs ( $ _ranged_n , $ _array ) ; $ result = array_merge ( $ result , $ pre_result ) ; } } return $ result ; } $ ranged_n = range ( 1 , $ n ) ; $ pattern_s = dfs ( $ ranged_n ) ; $ distance = 0 ; foreach ( $ pattern_s as $ pattern ) { $ splited_pattern = str_split ( $ pattern ) ; $ i = 0 ; while ( $ i < $ n - 1 ) { $ flg = $ splited_pattern [ $ i ] ; $ flg2 = $ splited_pattern [ $ i + 1 ] ; $ distance += sqrt ( pow ( ( $ chart_points [ $ flg ] [ ' x ' ] - $ chart_points [ $ flg2 ] [ ' x ' ] ) , 2 ) + pow ( ( $ chart_points [ $ flg ] [ ' y ' ] - $ chart_points [ $ flg2 ] [ ' y ' ] ) , 2 ) ) ; $ i ++ ; } } echo $ distance / count ( $ pattern_s ) ;
<?php $ cnt = 0 ; $ arr = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ arr as $ val ) { if ( $ val == 5 ) { $ cnt ++ ; } } if ( $ cnt == 2 ) echo " YES " ; else echo " NO " ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ k >= ( $ e - $ a ) ) { echo " Yay! " ; } else { echo " :( " ; }
<?php # スペース区切りの整数の入力 fscanf(STDIN, "%d %d %d", $a, $b, $c); $goshichigo = 'NO'; if ( $a == 7 ) { if ( $b == 5 && $c == 5) { $goshichigo = 'YES'; } } elseif ( $b == 7 ) { if ( $a == 5 && $c == 5) { $goshichigo = 'YES'; } } elseif ( $c == 7 ) { if ( $a == 5 && $b == 5) { $goshichigo = 'YES'; } } # 出力 echo $goshichigo."\n"; ?>
<?php $ num = trim ( fgets ( STDIN ) ) ; echo pow ( $ num , 3 ) . " \n " ; ?>
<?php $ ans = 0 ; fscanf ( STDIN , " %d " , $ N ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ ans += sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; } } $ toori = f ( $ N ) ; $ toori_path = $ toori * ( $ N - 1 ) ; $ pattern = $ N * ( $ N - 1 ) / 2 ; $ unit = $ toori_path / $ pattern ; $ total = $ unit * $ ans ; echo $ total / $ toori ; function f ( $ N ) { $ ret = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ ret *= $ i ; } return $ ret ; }
<?php fscanf ( STDIN , ' %d ' , $ a ) ; fscanf ( STDIN , ' %d ' , $ b ) ; fscanf ( STDIN , ' %d ' , $ c ) ; fscanf ( STDIN , ' %d ' , $ d ) ; fscanf ( STDIN , ' %d ' , $ e ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ e - $ a <= $ k ) { echo ' Yay! ' . PHP_EOL ; } else { echo ' :( ' . PHP_EOL ; }
<?php $ k_s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ k_s [ 0 ] ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k_s [ 0 ] ; $ j ++ ) { $ z = $ k_s [ 1 ] - $ i - $ j ; if ( $ z >= 0 && $ z <= $ k_s [ 0 ] ) { $ result ++ ; } } } echo $ result ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ input [ 0 ] ; $ b = ( int ) $ input [ 1 ] ; if ( $ a <= 5 ) { $ result = 0 ; } elseif ( $ a <= 12 ) { $ result = ( int ) floor ( $ b / 2 ) ; } else { $ result = $ b ; } echo $ result ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ time_from = strtotime ( ' 2020-05-31 ' . $ h1 . " : " . $ m1 ) ; $ time_to = strtotime ( ' 2020-05-31 ' . $ h2 . " : " . $ m2 ) ; $ diff_time = ( $ time_to - $ time_from ) / 60 ; echo ( $ diff_time - $ k ) ;
<?php $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ inputs [ 0 ] * $ inputs [ 1 ] < $ inputs [ 2 ] * $ inputs [ 3 ] ) echo $ inputs [ 2 ] * $ inputs [ 3 ] ; else echo $ inputs [ 0 ] * $ inputs [ 1 ] ; ?>
<?php $ input = fgets ( STDIN ) ; echo ( pow ( $ input , 3 ) ) ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = $ a [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ lcm = lcm ( $ lcm , $ a [ $ i ] ) ; if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; }
<?php $ input = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ k = ( int ) $ input [ 0 ] ; $ s = ( int ) $ input [ 1 ] ; $ result = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( 0 <= $ z && $ z <= $ k ) { $ result ++ ; } } } echo $ result ;
<?php $ t = new temp ( ) ; $ t -> main ( ) ; unset ( $ t ) ; class temp { private function lineIn ( ) { return fgets ( STDIN ) ; } private function arrayIn ( ) { return explode ( " " , fgets ( STDIN ) ) ; } public function main ( ) { $ hinaMax = $ this -> lineIn ( ) ; $ hinaArare = $ this -> arrayIn ( ) ; $ type = " Three " ; foreach ( $ hinaArare as $ arare ) { if ( " Y " == $ arare ) { $ type = " Four " ; break ; } } unset ( $ arare ) ; echo $ type ; } } ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ v ) ; fscanf ( STDIN , " %d%d " , $ b , $ w ) ; fscanf ( STDIN , " %d " , $ t ) ; if ( $ v > $ w && abs ( $ a - $ b ) <= ( $ v - $ w ) * $ t ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( ( float ) $ a + ( float ) $ b ) / 2 ) ; ?>
<?php $ priority = [ ] ; for ( $ count = 1 , $ tmp = 2 ; $ tmp < 14 ; $ tmp ++ ) { $ priority [ $ tmp ] = $ count ; $ count ++ ; } $ priority [ 1 ] = 13 ; fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ priority [ $ a ] > $ priority [ $ b ] ) { print ( " Alice \n " ) ; } else if ( $ priority [ $ a ] < $ priority [ $ b ] ) { print ( " Bob \n " ) ; } else { print ( " Draw \n " ) ; } ?>
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function arrayIn ( ) { $ buf = explode ( " " , fgets ( STDIN ) ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ n = $ this -> arrayIn ( ) ; sort ( $ n ) ; if ( 1 == $ n [ 0 ] && 4 == $ n [ 1 ] && 7 == $ n [ 2 ] && 9 == $ n [ 3 ] ) { echo " YES \n " ; } else { echo " NO \n " ; } } } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k == 1 ) { echo 0 ; exit ; } else { $ zan = $ n - $ k ; $ max = $ zan + 1 ; $ min = 1 ; echo $ max - $ min ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ sum = 0 ; for ( $ i = 0 ; $ i <= $ K && $ i <= $ S ; ++ $ i ) { $ d = $ S - $ i ; if ( $ d > 2 * $ K ) { continue ; } $ sum += min ( $ K , $ d ) - max ( $ d - $ K , 0 ) + 1 ; } print " $ sum \n " ;
<?php $ m = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ t [ $ i ] = trim ( fgets ( STDIN ) ) ; if ( ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] > $ m ) { $ m = ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] ; $ mk = $ i ; } } $ l = $ t [ $ mk ] ; unset ( $ t [ $ mk ] ) ; $ t = array_values ( $ t ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ t ) ; $ i ++ ) { $ sum += ceil ( $ t [ $ i ] / 10 ) * 10 ; } echo $ sum + $ l ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ num = trim ( fgets ( STDIN ) ) ; $ num = explode ( " " , $ num ) ; $ total = [ ] ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { $ t = [ ] ; foreach ( $ num as $ person ) { $ t [ ] = pow ( $ person - $ i , 2 ) ; } $ total [ ] = array_sum ( $ t ) ; } echo min ( $ total ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k != 1 ) { echo $ n - $ k ; } else { echo 0 ; }
<?php $ X = [ ] ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; usort ( $ X , function ( $ x , $ y ) { return ( $ x - 1 ) % 10 < ( $ y - 1 ) % 10 ; } ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ ans += ceil ( $ X [ $ i ] / 10 ) * 10 ; } $ ans += $ X [ 4 ] ; echo $ ans ;
<?php $ x = ( int ) fgets ( STDIN ) ; $ y = pow ( $ x , 3 ) ; echo $ y ; echo ( " \n " ) ; ?>
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php $ sum = 0 ; $ amax = 0 ; for ( $ i = 1 ; $ i <= 5 ; $ i ++ ) { $ s [ $ i ] = trim ( fgets ( STDIN ) ) ; $ sum += ( int ) ( ( $ s [ $ i ] + 9 ) / 10 ) * 10 ; if ( $ s [ $ i ] % 10 != 0 ) { $ amax = max ( $ amax , 10 - ( $ s [ $ i ] % 10 ) ) ; } } echo $ sum - $ amax ;
<?php $ a = Array ( ) ; $ input = fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; $ cost = 0 ; $ cost += abs ( ( $ a [ 0 ] - $ a [ 1 ] ) ) ; $ cost += abs ( ( $ a [ 1 ] - $ a [ 2 ] ) ) ; echo $ cost ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo $ a >= 13 ? $ b : ( $ a >= 6 ? $ b / 2 : 0 ) ; ?>
<?php list ( $ a , $ b , $ h , $ m ) = fscanf ( STDIN , ' %d %d %d %d ' ) ; $ xa = sin ( 2 * pi ( ) * ( $ h + ( $ m / 60 ) ) / 12.0 ) * $ a ; $ ya = cos ( 2 * pi ( ) * ( $ h + ( $ m / 60 ) ) / 12.0 ) * $ a ; $ xb = sin ( 2 * pi ( ) * $ m / 60.0 ) * $ b ; $ yb = cos ( 2 * pi ( ) * $ m / 60.0 ) * $ b ; $ l = sqrt ( ( $ xa - $ xb ) * ( $ xa - $ xb ) + ( $ ya - $ yb ) * ( $ ya - $ yb ) ) ; echo $ l ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ c [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } $ A = array_sum ( $ a ) ; $ B = array_sum ( $ b ) ; $ k = 0 ; foreach ( $ c as $ value ) { if ( $ value < 0 ) { $ k = 1 ; } } if ( $ A < $ B ) { echo ' -1 ' ; exit ; } elseif ( $ k == 0 ) { echo ' 0 ' ; exit ; } sort ( $ c ) ; $ point = 0 ; $ ans = 0 ; $ j = 0 ; while ( true ) { if ( $ c [ $ j ] < 0 ) { $ ans ++ ; $ point += $ c [ $ j ] ; $ j ++ ; } else { break ; } } rsort ( $ c ) ; $ k = 0 ; while ( true ) { $ point += $ c [ $ k ] ; $ ans ++ ; if ( $ point > 0 ) { echo $ ans ; exit ; } $ k ++ ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( ( $ z >= 0 ) && ( $ z <= $ k ) ) { $ cnt ++ ; } } } echo $ cnt ; echo " \n " ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a === 1 ) { $ a = 14 ; } if ( $ b === 1 ) { $ b = 14 ; } if ( $ a > $ b ) { echo ' Alice ' ; } elseif ( $ a < $ b ) { echo ' Bob ' ; } else { echo ' Draw ' ; } echo PHP_EOL ;
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) . " \n " ) ;
<?php while ( ( $ nums = trim ( fgets ( STDIN ) ) ) !== ' ' ) { if ( $ nums === ' 0 ' ) break ; $ arr = str_split ( $ nums ) ; echo array_sum ( $ arr ) . " \n " ; }
<?php $ oni = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ child = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ time = fgets ( STDIN ) ; if ( $ oni [ 0 ] < $ child [ 0 ] ) { $ x = $ oni [ 0 ] + $ oni [ 1 ] * $ time ; $ y = $ child [ 0 ] + $ child [ 1 ] * $ time ; echo $ x >= $ y ? ' YES ' : ' NO ' ; } else { $ x = $ oni [ 0 ] - $ oni [ 1 ] * $ time ; $ y = $ child [ 0 ] - $ child [ 1 ] * $ time ; echo $ x <= $ y ? ' YES ' : ' NO ' ; } ?>
<?php $ a = fgets ( STDIN ) ; $ b = $ a * $ a * $ a ; echo $ b , PHP_EOL ;
<?php $ N = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ N ) ; $ S = implode ( " " , $ N ) ; echo $ S === ' 1479 ' ? ' YES ' : ' NO ' ;
<?php $ hanter = fgets ( STDIN ) ; $ hanter = str_replace ( PHP_EOL , ' ' , $ hanter ) ; list ( $ hanterZ , $ hanterV ) = preg_split ( ' /\s+/ ' , $ hanter ) ; $ runner = fgets ( STDIN ) ; $ runner = str_replace ( PHP_EOL , ' ' , $ runner ) ; list ( $ runnerZ , $ runnerV ) = preg_split ( ' /\s+/ ' , $ runner ) ; $ distance = abs ( $ hanterZ - $ runnerZ ) ; $ V = $ hanterV - $ runnerV ; $ chaceTime = fgets ( STDIN ) ; if ( $ V <= 0 && $ distance > 0 ) { echo " NO " ; exit ( ) ; } $ tijimaruKyori = ( int ) $ chaceTime * ( int ) $ V ; if ( $ tijimaruKyori >= $ distance ) { echo " YES " ; exit ( ) ; } echo " NO " ;
<?php $ l = [ ] ; while ( $ r = trim ( fgets ( STDIN ) ) ) $ l [ ] = $ r ; $ l [ 1 ] = explode ( " " , $ l [ 1 ] ) ; echo max ( $ l [ 1 ] ) - min ( $ l [ 1 ] ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ n , $ a , $ b ) ; $ v = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; rsort ( $ v ) ; $ f = $ v [ $ a - 1 ] ; $ s = $ x = 0 ; for ( $ i = 0 ; $ i < $ a ; $ i ++ ) { $ s += $ v [ $ i ] ; if ( $ v [ $ i ] == $ f ) $ x ++ ; } echo $ s / $ a , " \n " ; $ c = array_count_values ( $ v ) ; $ ans = 0 ; for ( $ i = $ a - 1 ; $ i <= $ b - 1 ; $ i ++ ) { if ( $ v [ $ i ] != $ f ) break ; $ ans += ncr ( $ c [ $ f ] , $ i - $ a + $ x + 1 ) ; if ( $ f != $ v [ 0 ] ) break ; } echo $ ans ; function ncr ( $ n , $ r ) { if ( $ r == 0 ) { return 1 ; } return ncr ( $ n , $ r - 1 ) * ( $ n - $ r + 1 ) / $ r ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php class In { private $ buf = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function nextLine ( ) { $ ret = ' ' ; if ( $ this -> hasNext ( ) ) { while ( $ this -> hasNext ( ) ) { $ ret .= $ this -> next ( ) ; } } else { $ ret = trim ( fgets ( STDIN ) ) ; } return $ ret ; } public function next ( ) { if ( ! $ this -> hasNext ( ) ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> buf = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> buf ) ; $ this -> pointer = 0 ; } return $ this -> buf [ $ this -> pointer ++ ] ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class Out { public function println ( $ str = ' ' ) { echo $ str . PHP_EOL ; } } $ in = new In ( ) ; $ out = new Out ( ) ; $ N = $ in -> nextInt ( ) ; $ i = 1 ; while ( $ i * 2 <= $ N ) { $ i *= 2 ; } $ out -> println ( $ i ) ; ?>
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; echo 2 ** floor ( log ( $ n , 2 ) ) ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ arr = [ $ a , $ b , $ c , $ d , $ e ] ; for ( $ i = 0 ; $ i <= 3 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= 4 ; $ j ++ ) { if ( $ arr [ $ j ] - $ arr [ $ i ] > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo min ( abs ( $ b - $ a ) + abs ( $ c - $ b ) , abs ( $ c - $ a ) + abs ( $ b - $ c ) , abs ( $ a - $ b ) + abs ( $ c - $ a ) , abs ( $ c - $ b ) + abs ( $ a - $ c ) , abs ( $ b - $ c ) + abs ( $ a - $ b ) , abs ( $ a - $ c ) + abs ( $ b - $ a ) ) ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ h1 = $ sc -> nextInt ( ) ; $ m1 = $ sc -> nextInt ( ) ; $ h2 = $ sc -> nextInt ( ) ; $ m2 = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; $ a = $ h1 * 60 ; $ b = $ h2 * 60 ; $ a1 = $ a + $ m1 ; $ b1 = $ b + $ m2 ; $ calc = $ b1 - $ a1 - $ k ; echo $ calc ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; $ diff [ ] = $ b - $ a ; $ diff [ ] = $ c - $ a ; $ diff [ ] = $ d - $ a ; $ diff [ ] = $ e - $ a ; $ diff [ ] = $ c - $ b ; $ diff [ ] = $ d - $ b ; $ diff [ ] = $ e - $ b ; $ diff [ ] = $ d - $ c ; $ diff [ ] = $ e - $ c ; $ diff [ ] = $ e - $ d ; if ( max ( $ diff ) <= $ k ) { printf ( " Yay! \n " ) ; } else { printf ( " :( \n " ) ; }
<?php while ( $ a = array_sum ( str_split ( trim ( fgets ( STDIN ) ) ) ) ) echo $ a . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ rad = pi ( ) * ( ( $ h + $ m / 60 ) / 6 - $ m / 30 ) ; $ c2 = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( $ rad ) ; echo sqrt ( $ c2 ) ;
<?php while ( true ) { fscanf ( STDIN , ' %s ' , $ x ) ; if ( $ x == 0 ) { break ; } echo array_sum ( str_split ( $ x ) ) , PHP_EOL ; }
<?php $ line = trim ( fgets ( STDIN ) ) ; echo intval ( $ line ) ** 3 ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; $ j_max = 10 ** 6 ; foreach ( $ input as $ n ) { if ( $ j_max >= $ n ) { $ j_max = $ n ; $ ans ++ ; } } echo $ ans ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ input = file_get_contents ( ' php: echo $input * $input * $input, PHP_EOL;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ kind = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ kind [ ] = $ s [ $ i ] ; } $ k = count ( array_unique ( $ kind ) ) ; if ( $ k == 3 ) { echo " Three \n " ; } else { echo " Four \n " ; }
<?php fscanf ( STDIN , ' %d%d%d ' , $ A1 , $ A2 , $ A3 ) ; $ min = min ( $ A1 , $ A2 , $ A3 ) ; $ max = max ( $ A1 , $ A2 , $ A3 ) ; echo $ max - $ min ; ?>
<?php $ input = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ input [ 0 ] * $ input [ 1 ] , $ input [ 2 ] * $ input [ 3 ] ) ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; print pow ( $ x , 3 ) ; ?>
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ a = fgets ( STDIN ) ; $ s += $ t = floor ( ( $ a + 9 ) / 10 ) * 10 ; if ( $ m < $ t - $ a ) $ m = $ t - $ a ; } echo $ s - $ m ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( ( $ a + $ b + $ c === 17 ) && ( $ a === 5 || 7 ) && ( $ b === 5 || 7 ) && ( $ c === 5 || 7 ) ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; sort ( $ array ) ; $ first = $ array [ 0 ] - $ array [ 1 ] ; $ second = $ array [ 1 ] - $ array [ 2 ] ; echo abs ( $ first ) + abs ( $ second ) ; ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; $ result [ ' P ' ] = 0 ; $ result [ ' W ' ] = 0 ; $ result [ ' G ' ] = 0 ; $ result [ ' Y ' ] = 0 ; $ arare_arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; foreach ( $ arare_arr as $ val ) { $ result [ $ val ] = 1 ; } echo ( array_sum ( $ result ) == 3 ) ? ' Three ' : ' Four ' ;
<?php $ inputNum = trim ( fgets ( STDIN ) ) ; echo pow ( $ inputNum , 3 ) ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ zahyos = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ zahyos [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } function pat ( $ a , $ s = ' ' ) { $ r = array ( ) ; if ( count ( $ a ) && is_array ( $ a ) ) { foreach ( $ a as $ k => $ v ) { $ _s = $ s . $ v ; $ _a = $ a ; unset ( $ _a [ $ k ] ) ; $ _r = pat ( $ _a , $ _s ) ; $ r = array_merge ( $ r , $ _r ) ; } } else { $ r [ ] = $ s ; } return $ r ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ a [ ] = $ i ; } $ jyunretu = pat ( $ a ) ; $ sum = 0 ; foreach ( $ jyunretu as $ michi ) { for ( $ i = 0 ; $ i < strlen ( $ michi ) - 1 ; $ i ++ ) { $ city = $ michi [ $ i ] - 1 ; $ ncity = $ michi [ $ i + 1 ] - 1 ; $ sum += sqrt ( ( $ zahyos [ $ ncity ] [ 0 ] - $ zahyos [ $ city ] [ 0 ] ) ** 2 + ( $ zahyos [ $ ncity ] [ 1 ] - $ zahyos [ $ city ] [ 1 ] ) ** 2 ) ; } } echo ( $ sum / count ( $ jyunretu ) ) . " \n " ;
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ in = explode ( ' ' , fgets ( STDIN ) ) ; $ ans ; for ( $ i = 0 ; $ i < 100 ; $ i ++ ) { $ sum = 0 ; foreach ( $ in as $ v ) { $ sum += ( $ v - $ i ) ** 2 ; } $ ans [ ] = $ sum ; } echo min ( $ ans ) , PHP_EOL ;
<?php $ sc = new Scanner ( ) ; $ f = [ ' 1 ' => false , ' 9 ' => false , ' 7 ' => false , ' 4 ' => false , ] ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ t = $ sc -> nextInt ( ) ; if ( $ f [ $ t ] ) { echo ' NO ' . PHP_EOL ; exit ; } $ f [ $ t ] = true ; } foreach ( $ f as $ v ) { if ( ! $ v ) { echo ' NO ' . PHP_EOL ; exit ; } } echo ' YES ' . PHP_EOL ; exit ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ rad = ( $ h + $ m / 60 ) / 6 * pi ( ) - $ m / 30 * pi ( ) ; $ c2 = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( $ rad ) ; echo sqrt ( $ c2 ) ;
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo intdiv ( $ n + $ m + 1 , 2 ) ;
<?php class STD { static function input ( ) { $ line = trim ( fgets ( STDIN ) ) ; return $ line ; } static function output ( $ text ) { echo $ text . " \n " ; } } function cost ( $ str ) { return - intval ( $ str , 36 ) + 36 ; } $ s = STD :: input ( ) ; $ n = intval ( STD :: input ( ) ) ; $ len = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( cost ( $ s [ $ i ] ) <= $ n && $ s [ $ i ] != ' a ' ) { $ n -= cost ( $ s [ $ i ] ) ; $ s [ $ i ] = ' a ' ; } } if ( $ n > 0 ) { $ diff = $ n % 26 ; for ( $ g = 0 ; $ g < $ diff ; $ g ++ ) { $ str = $ s [ $ len - 1 ] ; $ s [ $ len - 1 ] = ++ $ str ; } } STD :: output ( $ s ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a <= 5 ) { echo 0 ; } else if ( $ a <= 12 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ mean = round ( array_sum ( $ x ) / $ n ) ; $ total = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ dis = $ x [ $ i ] - $ mean ; $ total += $ dis * $ dis ; } echo $ total . " \n " ;
<?php $ nd = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = $ nd [ 0 ] ; $ d = $ nd [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xt = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ x [ $ i ] [ $ j ] = $ xt [ $ j ] ; } } $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ t = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ t += ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) ** 2 ; } $ s = sqrt ( $ t ) ; if ( ctype_digit ( strval ( $ s ) ) ) $ c ++ ; } } echo $ c ; ?>
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $A = $key->A[0]; $x = array(); foreach($key->X[0] as $k=>$a) { $x[]=$a; } if ($A==1) { printf("%s\n",$A); exit; } $n=2; while(1) { if (($n >= $A)||($n * 2 > $A)) break; $n = $n * 2; } printf("%s\n",$n);
<?php $ stdin = fopen ( " php: fscanf( $ stdin , " % [ ^ \ n ] " , $ input ) ; $ arr_input = explode ( " " , $ input ) ; $ aux_5 = 0 ; $ aux_7 = 0 ; foreach ( $ arr_input as $ v ) { if ( $ v == 5 ) $ aux_5 ++ ; if ( $ v == 7 ) $ aux_7 ++ ; } if ( $ aux_5 == 2 && $ aux_7 == 1 ) { echo " YES " ; } else { echo " NO " ; } fclose ( $ stdin ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; if ( 1 <= $ x && $ x <= 100 ) { echo ( int ) ( $ x * $ x * $ x ) ; } ?>
<?php $ res = 0 ; $ min = 0 ; $ max = 0 ; $ k = 0 ; const MAX = 6 ; for ( $ i = 0 ; $ i < MAX ; $ i ++ ) { $ input = fgets ( STDIN ) ; if ( $ i === 0 ) { $ min = intval ( $ input ) ; } else if ( $ i === MAX - 2 ) { $ max = intval ( $ input ) ; } else if ( $ i === MAX - 1 ) { $ k = intval ( $ input ) ; } else continue ; } $ res = ( $ max - $ min ) > $ k ? ' :( ' : ' Yay! ' ; echo $ res ; ?>
<?php fscanf ( STDIN , ' %d%d%d%d ' , $ a , $ b , $ c , $ d ) ; echo ( ( $ a * $ b ) > ( $ c * $ d ) ) ? $ a * $ b : $ c * $ d ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; echo $ k > 1 ? $ n - $ k : 0 ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ array [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < ( $ n - 1 ) ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ square_sum = 0 ; foreach ( $ array [ $ i ] as $ index => $ value ) { $ square_sum += pow ( $ value - $ array [ $ j ] [ $ index ] , 2 ) ; } $ dist = pow ( $ square_sum , 0.5 ) ; if ( ceil ( $ dist ) == floor ( $ dist ) ) { $ ans ++ ; } } } echo $ ans ;
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $N = $key->A[0]; $A = $key->X[0]; $mx = max($A); $mi = min($A); printf("%d\n",$mx-$mi);
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ input , 3 ) ; print $ ans ; ?>
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ tasks = [ $ a , $ b , $ c ] ; sort ( $ tasks ) ; echo abs ( $ tasks [ 0 ] - $ tasks [ 1 ] ) + abs ( $ tasks [ 1 ] - $ tasks [ 2 ] ) ; echo PHP_EOL ;
<?php $ n = fgets ( STDIN ) ; echo pow ( $ n , 3 ) . " \n " ;
<?php $ n = fgets ( STDIN ) ; $ s = 1 ; while ( true ) { if ( $ n < $ s ) { $ s = $ s / 2 ; break ; } elseif ( $ n == $ s ) { break ; } $ s = $ s * 2 ; } echo $ s ; ?>
<?php $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; echo max ( $ pos ) - min ( $ pos ) <= ( int ) stdin ( ) ? ' Yay! ' : ' :( ' , PHP_EOL ; function stdin ( ) { return trim ( fgets ( STDIN ) ) ; }
<?php fscanf ( STDIN , " %d %d " , $ max , $ target ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ max ; $ j ++ ) { $ k = $ target - $ i - $ j ; if ( $ k >= 0 && $ k <= $ max ) { $ cnt ++ ; } } } echo $ cnt . " \n " ; ?>
<?php $ num = trim ( fgets ( STDIN ) ) ; echo pow ( $ num , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ factor = $ a * $ b ; $ factor2 = $ c * $ d ; if ( $ factor >= $ factor2 ) { print ( " $ factor \n " ) ; } else { print ( " $ factor2 \n " ) ; } ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ stdin , 3 ) ; echo ( $ result ) ; ?>
<?php $ input = intval ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input . " \n " ; ?>
<?php print pow ( trim ( fgets ( STDIN ) ) , 3 ) . " \n " ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ num = intval ( $ stdin ) ; $ ans = $ num * $ num * $ num ; print ( " { $ ans } \n " ) ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ xs [ ] = trim ( fgets ( STDIN ) ) ; } fscanf ( STDIN , ' %d ' , $ k ) ; echo max ( $ xs ) - min ( $ xs ) > $ k ? ' :( ' : ' Yay! ' , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { if ( $ i + $ j <= $ S && $ S - $ i - $ j <= $ K ) { $ result ++ ; } } } echo $ result ;
<?php fscanf ( STDIN , ' %d%d ' , $ a [ ] , $ a [ ] ) ; echo ceil ( array_sum ( $ a ) / count ( $ a ) ) ;
<?php $ t = new temp ( ) ; $ t -> stdin ( fgets ( STDIN ) ) ; $ t -> run ( ) ; unset ( $ t ) ; class temp { private $ stdin = array ( ) ; public function __construct ( ) { } public function stdin ( $ data = null ) { $ this -> stdin = explode ( " " , $ data ) ; } public function run ( ) { $ num = ( $ this -> stdin [ 0 ] + $ this -> stdin [ 1 ] ) / 2 ; $ num = ceil ( $ num ) ; echo $ num ; } } ?>
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ( max ( $ a ) - min ( $ a ) ) . PHP_EOL ;
<?php $ stdn = trim ( fgets ( STDIN ) ) ; $ ans = $ stdn * $ stdn * $ stdn ; echo $ ans . " \n " ;
<?php fscanf ( STDIN , ' %d %d ' , $ K , $ S ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ K + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ K + 1 ; $ j ++ ) { $ z = $ S - $ i - $ j ; if ( 0 <= $ z && $ z <= $ K ) $ count ++ ; } } echo $ count ;
<?php list ( $ max , $ sum ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = 0 ; $ y = 0 ; $ z = 0 ; $ count = 0 ; $ rest = 0 ; for ( $ x = 0 ; $ x <= $ max ; $ x ++ ) { $ rest = $ sum - $ x ; if ( $ rest <= 2 * $ max && $ rest >= 0 ) { $ makkusu = min ( $ rest , $ max ) ; $ min = $ rest - $ makkusu ; $ tasu = $ makkusu - $ min + 1 ; $ count += $ tasu ; } } echo $ count ; ?>
<?php while ( 1 ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) { break ; } printf ( " %d \n " , MySum ( $ x ) ) ; } function MySum ( $ a ) { $ mysum = 0 ; foreach ( str_split ( $ a ) as $ val ) { $ mysum += $ val ; } return $ mysum ; }
<?php $ a = [ ] ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < count ( $ a ) - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < count ( $ a ) ; $ j ++ ) { if ( abs ( $ a [ $ i ] - $ a [ $ j ] ) > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ;
<?php $ s = [ ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ s [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i <= 100 ; $ i ++ ) { $ a1 = $ i ; $ b1 = $ s [ 0 ] [ 0 ] - $ a1 ; if ( $ b1 < 0 ) continue ; $ b2 = $ s [ 0 ] [ 1 ] - $ a1 ; if ( $ b2 < 0 ) continue ; $ b3 = $ s [ 0 ] [ 2 ] - $ a1 ; if ( $ b3 < 0 ) continue ; $ a2 = $ s [ 1 ] [ 0 ] - $ b1 ; if ( $ a2 < 0 ) continue ; if ( $ a2 != $ s [ 1 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a2 != $ s [ 1 ] [ 2 ] - $ b3 ) { continue ; } $ a3 = $ s [ 2 ] [ 0 ] - $ b1 ; if ( $ a3 < 0 ) continue ; if ( $ a3 != $ s [ 2 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a3 != $ s [ 2 ] [ 2 ] - $ b3 ) { continue ; } echo " Yes " ; exit ; } echo " No " ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ tmp ) ; $ array [ ] = $ tmp ; } fscanf ( STDIN , " %d " , $ K ) ; echo max ( $ array ) - min ( $ array ) > $ K ? " :( " : " Yay! " ;
<?php fscanf ( STDIN , ' %d %d ' , $ A , $ B ) ; if ( $ A <= 5 ) { echo 0 ; } elseif ( $ A <= 12 ) { echo $ B / 2 ; } else { echo $ B ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ n = intval ( $ stdin ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ vars = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ vars ) ; if ( $ vars == array ( ' 5 ' , ' 5 ' , ' 7 ' ) ) { echo " YES " ; } else { echo " NO " ; }
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = ( int ) $ input [ 0 ] ; $ k = ( int ) $ input [ 1 ] ; if ( $ k === 1 ) { echo 0 ; } else { echo $ n - $ k ; }
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ B = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { printf ( " %d \n " , - 1 ) ; exit ; } $ goukaku = true ; $ amari = array ( ) ; $ husoku = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ goukaku = false ; $ husoku [ ] = $ B [ $ i ] - $ A [ $ i ] ; } if ( $ A [ $ i ] > $ B [ $ i ] ) { $ amari [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ goukaku ) { printf ( " %d \n " , 0 ) ; exit ; } rsort ( $ amari ) ; $ s = array_sum ( $ husoku ) ; $ total = count ( $ husoku ) ; foreach ( $ amari as $ v ) { $ s = $ s - $ v ; $ total ++ ; if ( $ s < 0 ) break ; } printf ( " %d \n " , $ total ) ;
<?php list ( $ n ) = ints ( ) ; $ a = ints ( ) ; echo max ( $ a ) - min ( $ a ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a > $ b ) { echo ( " Alice " ) ; } elseif ( $ a < $ b ) { echo ( " Bob " ) ; } else { echo ( " Draw " ) ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ array = explode ( " " , $ input ) ; list ( $ a , $ b , $ c , $ d ) = $ array ; $ s1 = $ a * $ b ; $ s2 = $ c * $ d ; if ( $ s1 == $ s2 ) { echo $ s1 . " \n " ; } else if ( $ s1 < $ s2 ) { echo $ s2 . " \n " ; } else if ( $ s1 > $ s2 ) { echo $ s1 . " \n " ; }
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? ' YES ' : ' NO ' , " \n " ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = [ ] ; foreach ( $ pref as $ key => $ list ) { foreach ( $ pref [ $ key ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo $ x . " \n " ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ abs_a = abs ( $ a - $ b ) ; $ abs_b = abs ( $ a - $ c ) ; $ abs_c = abs ( $ b - $ c ) ; $ arr = [ $ abs_a , $ abs_b , $ abs_c , ] ; sort ( $ arr ) ; $ answer = $ arr [ 0 ] + $ arr [ 1 ] ; echo $ answer ; ?>
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ s == 0 ) { echo 1 ; } elseif ( $ s == $ k * 3 ) { echo 1 ; } else { $ ans = 0 ; $ x = max ( 0 , $ s - $ k * 2 ) ; while ( $ x <= $ k ) { $ y = max ( 0 , $ s - $ x - $ k ) ; $ ym = min ( $ k , $ s - $ x ) ; while ( $ y <= $ ym ) { $ z = $ s - $ x - $ y ; $ zm = min ( $ k , $ s - $ x - $ y ) ; if ( $ z <= $ zm ) { ++ $ ans ; } ++ $ y ; } ++ $ x ; } echo $ ans ; } ?>
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ j1 = $ c [ 0 ] [ 1 ] - $ c [ 0 ] [ 0 ] ; $ j2 = $ c [ 0 ] [ 2 ] - $ c [ 0 ] [ 0 ] ; $ i1 = $ c [ 1 ] [ 0 ] - $ c [ 0 ] [ 0 ] ; $ i2 = $ c [ 2 ] [ 0 ] - $ c [ 0 ] [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { if ( $ j1 != $ c [ $ i ] [ 1 ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } if ( $ j2 != $ c [ $ i ] [ 2 ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } if ( $ i1 != $ c [ 1 ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } if ( $ i2 != $ c [ 2 ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } echo " Yes " ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ xList = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = min ( $ xList ) ; $ max = max ( $ xList ) ; $ ans = 0x1 << 31 ; for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) { $ wk = 0 ; foreach ( $ xList as $ v ) { $ wk += pow ( $ i - $ v , 2 ) ; } $ ans = min ( $ ans , $ wk ) ; } echo " { $ ans } \n " ;
<?php fscanf ( STDIN , " %d %d " , $ posa , $ speeda ) ; fscanf ( STDIN , " %d %d " , $ posb , $ speedb ) ; fscanf ( STDIN , " %d " , $ timelimit ) ; if ( $ posa === $ posb ) { echo " YES " ; exit ( 0 ) ; } if ( $ speeda <= $ speedb ) { echo " NO " ; } else { $ distance = abs ( $ posa - $ posb ) ; $ speed = abs ( $ speeda - $ speedb ) ; $ time = $ distance / $ speed ; if ( $ time <= $ timelimit ) { echo " YES " ; } else { echo " NO " ; } }
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo implode ( " " , $ a ) == " 557 " ? " YES " : " NO " ;
<?php $ N = fgets ( STDIN ) ; $ N = explode ( " " , $ N ) ; $ k = $ N [ 0 ] ; $ s = $ N [ 1 ] ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; while ( $ i < $ n ) { $ a [ ] = trim ( fgets ( STDIN ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ m ) { $ b [ ] = trim ( fgets ( STDIN ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i <= $ n - $ m ) { $ j = 0 ; while ( $ j <= $ n - $ m ) { if ( substr ( $ a [ $ i ] , $ j , $ m ) == $ b [ 0 ] ) { $ flag = 1 ; $ k = $ i + 1 ; while ( $ k < $ i + $ m ) { if ( substr ( $ a [ $ k ] , $ j , $ m ) != $ b [ $ k - $ i ] ) { $ flag = 0 ; break ; } ++ $ k ; } if ( $ flag ) { echo " Yes " ; exit ; } } ++ $ j ; } ++ $ i ; } echo " No " ;
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ c = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( ( $ s - ( $ i + $ j ) ) <= $ k && ( $ i + $ j ) <= $ s ) { $ c ++ ; } } } echo $ c ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = ceil ( ( $ a + $ b ) / 2 ) ; echo $ ans ; ?>
<?php $ A = [ ] ; fscanf ( STDIN , " %d %d %d " , $ A [ 0 ] , $ A [ 1 ] , $ A [ 2 ] ) ; sort ( $ A ) ; echo abs ( $ A [ 1 ] - $ A [ 0 ] ) + abs ( $ A [ 2 ] - $ A [ 1 ] ) ; ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ b [ $ i ] ] = true ; } if ( count ( $ a ) == 4 ) echo " Four " ; else echo " Three " ; echo PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ _p , $ y [ ] ) ; $ p [ ] = $ _p - 1 ; $ c [ ] = $ i ; } array_multisort ( $ p , $ y , $ c ) ; $ j = 1 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( ( $ p [ $ i - 1 ] ?? $ p [ $ i ] ) !== $ p [ $ i ] ) $ j = 1 ; $ num [ $ c [ $ i ] ] = str_pad ( $ p [ $ i ] + 1 , 6 , 0 , STR_PAD_LEFT ) . str_pad ( $ j , 6 , 0 , STR_PAD_LEFT ) ; $ j ++ ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ num [ $ i ] . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ total_dis , $ dim_count ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ total_dis ; ++ $ i ) { $ arr [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ total_dis - 1 ; ++ $ i ) { for ( $ j = $ i ; $ j < $ total_dis ; ++ $ j ) { if ( $ i == $ j ) { continue ; } $ count += distance ( $ arr [ $ i ] , $ arr [ $ j ] ) ; } } echo $ count , " \n " ; function distance ( $ a , $ b ) { global $ dim_count ; $ total = 0 ; for ( $ i = 0 ; $ i < $ dim_count ; ++ $ i ) { $ total += pow ( abs ( $ a [ $ i ] - $ b [ $ i ] ) , 2 ) ; } if ( sqrt ( $ total ) == floor ( sqrt ( $ total ) ) ) { return 1 ; } return 0 ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; if ( $ n >= 64 ) { $ res = 64 ; } else if ( $ n >= 32 ) { $ res = 32 ; } else if ( $ n >= 16 ) { $ res = 16 ; } else if ( $ n >= 8 ) { $ res = 8 ; } else if ( $ n >= 4 ) { $ res = 4 ; } else if ( $ n >= 2 ) { $ res = 2 ; } else if ( $ n >= 1 ) { $ res = 1 ; } echo $ res ;
<?php $ line = trim ( fgets ( STDIN ) ) ; $ arr = explode ( " " , $ line ) ; if ( $ arr [ 0 ] == $ arr [ 1 ] ) { echo " Draw " ; } elseif ( ( $ arr [ 0 ] == 1 ) || ( $ arr [ 0 ] > $ arr [ 1 ] && $ arr [ 1 ] != 1 ) ) { echo " Alice " ; } else { echo " Bob " ; }
<?php $ l = trim ( fgets ( STDIN ) ) ; list ( $ a , $ v ) = explode ( " " , $ l ) ; $ l = trim ( fgets ( STDIN ) ) ; list ( $ b , $ w ) = explode ( " " , $ l ) ; $ t = trim ( fgets ( STDIN ) ) ; $ d = $ a < $ b ? 1 : - 1 ; $ oni = $ a + $ v * $ t * $ d ; $ ko = $ b + $ w * $ t * $ d ; if ( ( $ a < $ b && $ oni >= $ ko ) || ( $ a > $ b && $ oni <= $ ko ) ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ checkList = array ( 7 , 5 , 5 ) ; $ numList = array ( $ a , $ b , $ c ) ; rsort ( $ numList ) ; $ result = " YES " ; foreach ( $ checkList as $ check ) { $ tmp = array_shift ( $ numList ) ; if ( $ check != $ tmp ) { $ result = " NO " ; break ; } } echo $ result ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ d = [ ] ; foreach ( $ a as $ k => $ v ) { $ d [ $ k ] = $ a [ $ k ] - $ b [ $ k ] ; } $ plus = [ ] ; $ minus = [ ] ; foreach ( $ d as $ i ) { if ( $ i > 0 ) { $ plus [ ] = $ i ; } elseif ( $ i < 0 ) { $ minus [ ] = $ i ; } } if ( array_sum ( $ d ) < 0 ) { echo - 1 . " \n " ; } elseif ( count ( $ minus ) == 0 ) { echo 0 . " \n " ; } else { arsort ( $ plus ) ; $ sum_minus = array_sum ( $ minus ) ; $ s = 0 ; $ cnt = 0 ; foreach ( $ plus as $ p ) { $ cnt ++ ; $ s += $ p ; if ( $ s >= - $ sum_minus ) { break ; } } echo count ( $ minus ) + $ cnt . " \n " ; }
<?php list ( $ a , $ b , $ h , $ m ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ angle = abs ( ( 30 * $ h + 1 / 2 * $ m ) - 6 * $ m ) ; if ( $ angle > 180 ) { $ angle = 360 - $ angle ; } $ ans = sqrt ( pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( $ angle * pi ( ) / 180 ) ) ; printf ( " %.20f " , $ ans ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ sum = 0 ; $ cul = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ temp = fgets ( STDIN ) ; $ poss [ $ i ] = explode ( " " , $ temp ) ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ keisu = 1 ; $ keisu *= $ i + 1 ; } for ( $ i = 0 ; $ i < 9999 ; $ i ++ ) { $ j = $ i + 1 ; do { $ lens [ $ cul ] = sqrt ( pow ( $ poss [ $ i ] [ 0 ] - $ poss [ $ j ] [ 0 ] , 2 ) + pow ( $ poss [ $ i ] [ 1 ] - $ poss [ $ j ] [ 1 ] , 2 ) ) ; if ( $ cul + 1 == $ n * ( $ n - 1 ) / 2 ) { break 2 ; } $ cul ++ ; $ j ++ ; } while ( $ j < $ n ) ; } for ( $ i = 0 ; $ i < $ n * ( $ n - 1 ) / 2 ; $ i ++ ) { $ sum += $ keisu * $ lens [ $ i ] ; } echo ( $ sum / ( $ n * ( $ n - 1 ) / 2 ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ a = ( $ a + 12 ) % 14 ; $ b = ( $ b + 12 ) % 14 ; if ( $ a > $ b ) { echo ' Alice ' ; } elseif ( $ a < $ b ) { echo ' Bob ' ; } else { echo ' Draw ' ; }
<?php define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %d " , $ N ) ; for ( $ h = 1 ; $ h <= 3500 ; $ h ++ ) { for ( $ n = 1 ; $ n <= 3500 ; $ n ++ ) { $ base = 4 * $ h * $ n - $ N * $ n - $ N * $ h ; if ( $ base == 0 ) continue ; $ w = ( $ N * $ h * $ n ) / $ base ; if ( $ w == intval ( $ w ) && $ w > 0 ) { echo " { $ h } { $ n } { $ w } \n " ; exit ; } } }
<?php do { $ input = preg_split ( ' if(0 == $input[0]) { break; } $cnt = count($input); $sum = 0; for($loop_cnt = 0; $loop_cnt < $cnt; $loop_cnt++) { $sum += $input[$loop_cnt]; } echo $sum . "\n"; }while(1); ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ input , 3 ) ; echo $ result ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ A , $ B ) ; echo round ( ( $ A + $ B ) / 2 ) ; echo PHP_EOL ;
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scanf ( " % d " " % d " " % d " " % d " " % d " " % d " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv " " strings " " " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " math " " % .0 f \n " , math . Max ( math . Max ( a , b ) , c ) - math . Min ( math . Min ( a , b ) , c ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { c [ i ] = make ( [ ] int , 3 ) fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } a := [ ] int { 0 , - 1 , - 1 } b := [ ] int { - 1 , - 1 , - 1 } i := 0 for j := 0 ; j < 3 ; j ++ { b [ j ] = c [ i ] [ j ] - a [ i ] } for i = 1 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { a [ i ] = c [ i ] [ j ] - b [ j ] } } for ai := 0 ; ai < 3 ; ai ++ { for bi := 0 ; bi < 3 ; bi ++ { if a [ ai ] + b [ bi ] != c [ ai ] [ bi ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 1 for ans <= N { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " % d % d % d " " NO " " YES "
package main import ( " " " fmt " " os " " strconv " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for i := 1 ; i <= n ; i *= 2 { ans = i } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var a0 , a1 , a2 int fmt . Scan ( & a0 ) fmt . Scan ( & a1 ) fmt . Scan ( & a2 ) d := make ( [ ] int , 3 ) d [ 0 ] = abs ( a0 - a1 ) d [ 1 ] = abs ( a1 - a2 ) d [ 2 ] = abs ( a2 - a0 ) max := - 1 for _ , e := range d { if max < e { max = e } } fmt . Println ( max ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) for i := n ; i >= 1 ; i -- { if i & ( i - 1 ) == 0 { fmt . Println ( i ) return } } }
package main import ( " " " fmt " " io " " math " " os " " strconv " " % 0.15 f "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f " " % .19 f " " \n " ) } var sc = bufio . NewScanner ( os . Stdin ) func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " sort " " YES " " NO "
package main import " " func main ( ) { var n int var tmp string fmt . Scan ( & n ) m := make ( map [ string ] int , 4 ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & tmp ) m [ tmp ] ++ } var result string switch len ( m ) { case 3 : result = " " case 4 : result = " " } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " io " " os " " sort " " strconv " \n \r \t
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + = 1 } } } fmt . Println ( cnt ) }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " " bufio " " os " " strconv " " "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } min := p [ 0 ] ans := 1 for i := 1 ; i < n ; i ++ { if min > p [ i ] { ans + + min = p [ i ] } } fmt . Println ( ans ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var A string fmt . Scan ( & A ) if A == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " " " Yes " " No " " YES " " NO " " yes " " no "
package main import ( " " ) func main ( ) { var a , b , c string fmt . Scan ( & a , & b , & c ) var fv , sv int for _ , s := range [ ] string { a , b , c } { if s == " " { fv + + } if s == " " { sv + + } } if fv == 2 && sv == 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " : ( " ) return } io . PrintLn ( " Yay ! "
package main import " " var k , s int func main ( ) { fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) } }
package main import " " import " " func main ( ) { a := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) if a [ 0 ] == 5 && a [ 1 ] == 5 && a [ 2 ] == 7 { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { if a == 5 && b == 5 { fmt . Println ( " " ) } else if b == 5 && c == 5 { fmt . Println ( " " ) } else if a == 5 && c == 5 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var ans int for x := 0 ; x <= k ; x ++ { if x == s { ans ++ break } for y := 0 ; y <= k ; y ++ { if z := s - x - y ; 0 <= z && z <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var css [ 3 ] [ 3 ] int for i , cs := range css { for j := range cs { fmt . Scan ( & css [ i ] [ j ] ) } } as := make ( [ ] int , 3 ) bs := make ( [ ] int , 3 ) as [ 0 ] = 0 as [ 1 ] = css [ 1 ] [ 0 ] - css [ 0 ] [ 0 ] as [ 2 ] = css [ 2 ] [ 0 ] - css [ 0 ] [ 0 ] bs [ 0 ] = css [ 0 ] [ 0 ] bs [ 1 ] = css [ 0 ] [ 1 ] bs [ 2 ] = css [ 0 ] [ 2 ] for i , cs := range css { for j , c := range cs { if c != as [ i ] + bs [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var k , s , cnt int fmt . Scanf ( " % d % d " " % d "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] count := 1 for i := 1 ; i < N ; i ++ { if P [ i ] <= min { min = P [ i ] count += 1 } } fmt . Println ( count ) }
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " fmt " " io " " os " " strconv " " strings " " " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import " " func main ( ) { var count [ 10 ] int var a , b , c int fmt . Scan ( & a , & b , & c ) count [ a ] + + count [ b ] + + count [ c ] + + if count [ 5 ] == 2 && count [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % 0.10 f \n " , ans ) }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 1 ] + a [ 1 ] - a [ 0 ] ) }
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! "
package main import " " func main ( ) { var a , b , c , d , e int var k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ab := b - a ac := c - a ad := d - a ae := e - a bc := c - b bd := d - b be := e - b cd := d - c ce := e - c de := e - d if ab > k || ac > k || ad > k || ae > k || bc > k || bd > k || be > k || cd > k || ce > k || de > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var N int var P [ ] int fmt . Scanf ( " % d " , & N ) P = make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & P [ i ] ) } min := 0 count := 0 for i := 0 ; i < N ; i ++ { if i == 0 { min = P [ 0 ] count + + continue } if min < P [ i ] { continue } else { min = P [ i ] count + + } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " YES " " NO "
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for a1 := 0 ; a1 <= c [ 0 ] [ 0 ] ; a1 ++ { b1 := c [ 0 ] [ 0 ] - a1 b2 := c [ 0 ] [ 1 ] - a1 b3 := c [ 0 ] [ 2 ] - a1 a2 := c [ 1 ] [ 0 ] - b1 a3 := c [ 2 ] [ 0 ] - b1 if a2 + b2 == c [ 1 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " var ( c [ 3 ] [ 3 ] int ans string ) func dfs ( a0 int ) { b := make ( [ ] int , len ( c ) ) for j := range b { b [ j ] = c [ 0 ] [ j ] - a0 if b [ j ] < 0 { return } } flg := false for i := 1 ; i < len ( c ) ; i ++ { for j := range make ( [ ] struct { } , len ( c ) - 1 ) { if c [ i ] [ j ] - b [ j ] != c [ i ] [ j + 1 ] - b [ j + 1 ] { flg = true break } } if flg { break } } if ! flg { ans = " " return } dfs ( a0 + 1 ) } func main ( ) { for i := range c { for j := range c [ i ] { fmt . Scan ( & c [ i ] [ j ] ) } } ans = " " dfs ( 0 ) fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " os " " Y " " Four " " Three "
package main import " " func main ( ) { var k , s int fmt . Scanf ( " % d % d \n " , & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { r := s - x - y if 0 <= r && r <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) arr := [ ] int { a , b , c , d , e } for i := 0 ; i < len ( arr ) - 1 ; i + + { for j := 1 ; j < len ( arr ) ; j ++ { if ( arr [ j ] - arr [ i ] ) > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) x := 1 for x * 2 <= n { x *= 2 } fmt . Println ( x ) }
package main import ( " " " fmt " " math " " os " " strconv " " no values " " no values "
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " " fmt " " io " " os " " strconv " " YES " " NO " \n \r \t " % d "
package main import ( " " ) func main ( ) { var k int var N [ 5 ] int fmt . Scan ( & N [ 0 ] , & N [ 1 ] , & N [ 2 ] , & N [ 3 ] , & N [ 4 ] , & k ) if N [ 4 ] - N [ 0 ] > k { fmt . Println ( " : ( " ) } else { fmt . Println ( " Yay ! " ) } }
package main import ( " " ) func sort ( nums [ ] int , n int ) { for i := 1 ; i < n ; i ++ { v := nums [ i ] j := i - 1 for j >= 0 && v < nums [ j ] { nums [ j + 1 ] = nums [ j ] j - - } nums [ j + 1 ] = v } } func main ( ) { tasks := make ( [ ] int , 3 ) for i := range tasks { fmt . Scan ( & tasks [ i ] ) } sort ( tasks , 3 ) fmt . Println ( ( tasks [ 1 ] - tasks [ 0 ] ) + ( tasks [ 2 ] - tasks [ 1 ] ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var temp int var five int var seven int var i int five = 0 ; seven = 0 ; i = 0 for { fmt . Scanf ( " " , & temp ) ; if ( temp == 5 ) { five ++ ; } else if ( temp == 7 ) { seven ++ ; } i ++ ; if i == 3 { break } } if ( seven == 1 && five == 2 ) { fmt . Printf ( " \n " ) ; } else { fmt . Printf ( " \n " ) ; } }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := range c { c [ i ] = make ( [ ] int , 3 ) for j := range c [ i ] { fmt . Scan ( & c [ i ] [ j ] ) } } a := make ( [ ] int , 3 ) for i := 0 ; i <= 100 ; i ++ { a [ 0 ] = i for j := 0 ; j <= 100 ; j ++ { a [ 1 ] = j for k := 0 ; k <= 100 ; k ++ { a [ 2 ] = k b00 := c [ 0 ] [ 0 ] - a [ 0 ] b01 := c [ 0 ] [ 1 ] - a [ 0 ] b02 := c [ 0 ] [ 2 ] - a [ 0 ] b10 := c [ 1 ] [ 0 ] - a [ 1 ] b11 := c [ 1 ] [ 1 ] - a [ 1 ] b12 := c [ 1 ] [ 2 ] - a [ 1 ] b20 := c [ 2 ] [ 0 ] - a [ 2 ] b21 := c [ 2 ] [ 1 ] - a [ 2 ] b22 := c [ 2 ] [ 2 ] - a [ 2 ] if b00 == b10 && b00 == b20 && b10 == b20 { if b01 == b11 && b01 == b21 && b11 == b21 { if b02 == b12 && b02 == b22 && b12 == b22 { fmt . Println ( " " ) return } } } } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math / big " " os " " strconv " " % d % d % d \n " , h , n , w ) }
package main import ( " " ) func main ( ) { var A , B , C int fmt . Scan ( & A , & B , & C ) a := abs ( A - B ) + abs ( B - C ) b := abs ( A - C ) + abs ( C - B ) c := abs ( A - B ) + abs ( A - C ) fmt . Println ( min ( min ( a , b ) , c ) ) } func abs ( a int ) int { if a < 0 { return - a } return a } func min ( a , b int ) int { if a < b { return a } return b }
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " % .12 f " " "
package main import ( " " ) func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } a := make ( [ ] int , 3 ) b := make ( [ ] int , 3 ) a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , ci := range c { for j , cj := range ci { if cj != a [ i ] + b [ j ] { fmt . Print ( " " ) return } } } fmt . Print ( " " ) }
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " % d \n " , v ) } func ( io * IO ) PutString ( s string ) { fmt . Fprintf ( io . Writer , " \n " , s ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n , p , min , cnt int fmt . Scan ( & n ) min = n for i := 0 ; i < n ; i ++ { fmt . Scan ( & p ) if p <= min { cnt + + min = p } } fmt . Printf ( " " , cnt ) }
package main import ( " " " fmt " " os " " strconv " " No " " No " " No " " Yes "
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + = 1 } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " " " " " YES " " NO "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a ) <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " % b "
package main import " " func pow ( num int , time int ) int { res := 1 for time > 0 { if time % 2 != 0 { res = res * num } num = num * num time /= 2 } return res } func Max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for _ , val := range nums { if res < val { res = val } } return res } func solve ( n int ) int { var cnt int for ; n % 2 == 0 ; n /= 2 { cnt ++ } return cnt } func main ( ) { var n , ans int fmt . Scan ( & n ) for i := 1 ; i <= n ; i ++ { ans = Max ( ans , solve ( i ) ) } fmt . Println ( pow ( 2 , ans ) ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) res := make ( map [ string ] bool ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) res [ s ] = true } ans := " " if len ( res ) == 4 { ans = " " } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " empty ! " " empty ! " " empty ! " " Scan failed "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a + b + c == 17 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a + b == 12 || a + b == 10 ) && a + b + c == 17 && a % 2 != 0 && b % 2 != 0 && c % 2 != 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( . " " " sort " " % d % d % d "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " " fmt " " math " " os "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " math " " % d % d % d "
package main import ( " " ) func main ( ) { var k , s int ans := 0 fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for t := 0 ; t <= k ; t ++ { z := s - i - t if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) var sum int for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { l := s - ( i + j ) if 0 <= l && l <= k { sum + + } } } fmt . Println ( sum ) }
package main import " " import " " func main ( ) { var a [ 3 ] int fmt . Scanf ( " % d % d % d " , & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a [ : ] ) if a [ 0 ] == 5 && a [ 1 ] == 5 && a [ 2 ] == 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) var x1 , x2 , y1 , y2 float64 x1 = a * math . Cos ( math . Pi * ( 3 - h - ( m / 60 ) ) / 6 ) y1 = a * math . Sin ( math . Pi * ( 3 - h - ( m / 60 ) ) / 6 ) x2 = b * math . Cos ( math . Pi * ( 15 - m ) / 30 ) y2 = b * math . Sin ( math . Pi * ( 15 - m ) / 30 ) fmt . Println ( math . Sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ) }
package main import ( " " ) func main ( ) { var ( k , s , num int ) fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { num + + } } } fmt . Println ( num ) }
package main import ( " " " fmt " " infinity " " infinity " " % d % d "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { c := make ( [ ] int , 9 ) for i := 0 ; i < 9 ; i ++ { fmt . Scan ( & c [ i ] ) } for a1 := - 1000 ; a1 <= 1000 ; a1 ++ { invalid := false b1 := c [ 0 ] - a1 b2 := c [ 1 ] - a1 b3 := c [ 2 ] - a1 a2 := c [ 3 ] - b1 if c [ 4 ] - b2 != a2 { invalid = true } if c [ 5 ] - b3 != a2 { invalid = true } a3 := c [ 6 ] - b1 if c [ 7 ] - a3 != b2 { invalid = true } if c [ 8 ] - a3 != b3 { invalid = true } if ! invalid { fmt . Println ( " " ) return } } fmt . Println ( " " ) return }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N , v int fmt . Scan ( & N ) for N > 0 { v = N & - N N -= v } fmt . Println ( v ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " " ) func main ( ) { var ans int as := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & as [ i ] ) } sort . Sort ( sort . IntSlice ( as ) ) for i , _ := range as { if i == 0 { continue } ans += as [ i ] - as [ i - 1 ] } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var ( a , b , c , d , e , k int ) fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , o , e , k int fmt . Scan ( & a , & o , & o , & o , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import " " func main ( ) { A := make ( [ ] int , 6 ) for i := 0 ; i < 6 ; i ++ { fmt . Scanf ( " " , & A [ i ] ) } if A [ 4 ] - A [ 0 ] > A [ 5 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " infinity "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " io " " os " " strconv " " strings " " : ( " " Yay ! " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " sort " " strconv "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) max := 0 for n := N ; n > 0 ; n -- { count := 0 for i := n ; i > 0 ; i /= 2 { if i % 2 != 0 { break } count ++ } if max < count { max = count } } ans := 1 for i := 1 ; i <= max ; i ++ { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " os " " strconv " " strings " " fmt " " " " " " P " " Y " " G " " W " " Three " " Four "
package main import " " func main ( ) { var k , s int ans := 0 fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if x + y > s { break } if s - x - y <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] int ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) P = make ( [ ] int , N ) for i := range P { fmt . Scan ( & P [ i ] ) } min := N + 100 ans := 0 for i := range P { if min > P [ i ] { min = P [ i ] ans + + } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " ) } else { fmt . Fprintln ( wtr , " No "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " No " " Yes " " No " " "
package main import ( " " " fmt " " os " " strconv " " strings " " % s = % + v \n " , name , value ) } func intMin ( a , b int ) int { if a < b { return a } return b } func intMax ( a , b int ) int { if a > b { return a } return b } func f ( A [ ] int ) int { N := len ( A ) S := 0 for i := 0 ; i < N - 1 ; i ++ { S += A [ i ] S %= MOD } R := A [ N - 1 ] * ( N - 1 ) - S R %= MOD for i := N - 2 ; i >= 0 ; i -- { S -= A [ i ] if S < 0 { S += MOD } R += A [ i ] * i - S R %= MOD } return R } const ( MOD = 1000000007 ) func main ( ) { io := NewIo ( ) defer io . Flush ( ) N := io . NextInt ( ) M := io . NextInt ( ) X := make ( [ ] int , N ) Y := make ( [ ] int , M ) for i := 0 ; i < N ; i ++ { X [ i ] = io . NextInt ( ) } for i := 0 ; i < M ; i ++ { Y [ i ] = io . NextInt ( ) } A := f ( X ) B := f ( Y ) io . PrintLn ( ( A * B ) % MOD ) }
package main import ( " " " fmt " " os " " strconv " " strings " " No " " No " " Yes " " "
package main import ( " " " errors " " fmt " " math " " os " " strconv " " strings " " " " " " [ argument error ] : PowInt does not accept negative integers " " [ index error ] " ) ) } n := make ( [ ] int , 0 , len ( s ) - 1 ) n = append ( n , s [ : i ] ... ) n = append ( n , s [ i + 1 : ] ... ) return n } func Concat ( s , t [ ] rune ) [ ] rune { n := make ( [ ] rune , 0 , len ( s ) + len ( t ) ) n = append ( n , s ... ) n = append ( n , t ... ) return n } var k , s int func main ( ) { tmp := NextIntsLine ( ) k , s = tmp [ 0 ] , tmp [ 1 ] answer := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { answer ++ } } } fmt . Println ( answer ) }
package main import ( " " " math " " % .10 f \n " , math . Sqrt ( a2 + b2 - c ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " io " " os " " strconv " " Yay ! " " : ( "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { n := 0 fmt . Scan ( & n ) arr := make ( [ ] int , n ) for i := range arr { fmt . Scan ( & arr [ i ] ) } min := - 1 cnt := 0 for _ , v := range arr { if min == - 1 { min = v cnt + + continue } if min < v { continue } min = v cnt + + continue } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " NO " " YES " " NO "
package main import ( " " " math " " Three " " Four "
package main import ( " " " fmt " " math " " os "
package main import ( " " ) func main ( ) { var n int num := make ( [ ] int , 10 ) for i := 0 ; i < 4 ; i ++ { fmt . Scanf ( " " , & n ) num [ n ] ++ } ans := " " if num [ 1 ] != 1 { ans = " " } if num [ 9 ] != 1 { ans = " " } if num [ 7 ] != 1 { ans = " " } if num [ 4 ] != 1 { ans = " " } fmt . Printf ( " \n " , ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) sl := [ ] int { 64 , 32 , 16 , 8 , 4 , 2 , 1 } for _ , s := range sl { if s <= n { fmt . Println ( s ) return } } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var aLength , bLength , hour , min float64 fmt . Scan ( & aLength , & bLength , & hour , & min ) var hourAngle , minAngle float64 minAngle = 6 * min hourAngle = 30 * hour + 30 * min / 60 angle := minAngle - hourAngle if angle < 0 { angle *= - 1 } if angle > 180 { angle = 360 - angle } angleRad := angle * math . Pi / 180 cLength2 := aLength * aLength + bLength * bLength - 2 * aLength * bLength * math . Cos ( angleRad ) fmt . Println ( math . Sqrt ( cLength2 ) ) }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) countMax := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x /= 2 count + + } if count > countMax { countMax = count answer = i } } fmt . Println ( answer ) }
package main import " " func main ( ) { var N , M int fmt . Scanf ( " % d % d " " % s " " % s " " No " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) as := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & as [ i ] ) } bs := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & bs [ i ] ) } aSum , bSum := 0 , 0 for i := 0 ; i < n ; i ++ { aSum += as [ i ] bSum + = bs [ i ] } if aSum < bSum { fmt . Println ( - 1 ) return } positives := make ( [ ] int , 0 , n ) sumNeg := 0 ct := 0 for i := 0 ; i < n ; i ++ { diff := as [ i ] - bs [ i ] if diff > 0 { positives = append ( positives , diff ) } else if diff < 0 { sumNeg += ( - diff ) ct + + } } sort . Sort ( sort . Reverse ( sort . IntSlice ( positives ) ) ) sumPos := 0 i := 0 for sumPos < sumNeg { sumPos + = positives [ i ] ct ++ i ++ } fmt . Println ( ct ) }
package main import ( " " " " ) func abs ( a int ) int { if a > 0 { return a } return ( - 1 ) * a } func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) b := a [ : ] sort . Ints ( b ) fmt . Println ( abs ( b [ 0 ] - b [ 1 ] ) + abs ( b [ 1 ] - b [ 2 ] ) ) }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) diff := e - a if diff <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " % .10 f \n " , ans ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) if n == 1 { fmt . Println ( 1 ) } else if n >= 2 && n < 4 { fmt . Println ( 2 ) } else if n >= 4 && n < 8 { fmt . Println ( 4 ) } else if n >= 8 && n < 16 { fmt . Println ( 8 ) } else if n >= 16 && n < 32 { fmt . Println ( 16 ) } else if n >= 32 && n < 64 { fmt . Println ( 32 ) } else if n >= 64 && n <= 100 { fmt . Println ( 64 ) } }
package main import ( " " ) var ( a , b , c , d , e , k int ) func main ( ) { fmt . Scanf ( " % d " " % d " " % d " " % d " " % d " " % d " " Yay ! " " : ( "
package main import ( " " " fmt " " log " " os " " strconv " " strings " \n \n \n \n \n \n " \n " ) eStr = strings . Trim ( eStr , " \n " ) kStr = strings . Trim ( kStr , " \n " ) a , err := strconv . Atoi ( aStr ) if err != nil { log . Fatalln ( err ) } e , err := strconv . Atoi ( eStr ) if err != nil { log . Fatalln ( err ) } k , err := strconv . Atoi ( kStr ) if err != nil { log . Fatalln ( err ) } if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K ) fmt . Scan ( & S ) acc := 0 for x := 0 ; x <= 2500 ; x ++ { if K < x { break } for y := 0 ; y <= 2500 ; y ++ { if K < y { break } z := S - ( x + y ) if 0 <= z && z <= K { acc + + } } } fmt . Println ( acc ) }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " ) func main ( ) { var n [ 3 ] int var s = [ ] int { 5 , 7 , 5 } for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & n [ i ] ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < len ( s ) ; j ++ { if n [ i ] == s [ j ] { s = append ( s [ : j ] , s [ j + 1 : ] ... ) break } } } if len ( s ) == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " strings " " 5 " ) ! = 2 || strings . Count ( a + b + c , " " ) != 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) var count int for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { k := S - i - j if 0 <= k && k <= K { count + + } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var k , s , cnt int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var s string flg := false for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { flg = true } } if flg { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func abs ( x float64 ) float64 { if x < 0 { return - x } return x } func min ( x , y float64 ) float64 { if x < y { return x } return y } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) hang := 30 * h + 30 * ( m / 60 ) mang := 360 * ( m / 60 ) ang := abs ( hang - mang ) ang = min ( ang , 360 - ang ) fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
package main import ( " " " " ) func main ( ) { arr := make ( [ ] int , 3 ) fmt . Scan ( & arr [ 0 ] , & arr [ 1 ] , & arr [ 2 ] ) sort . Ints ( arr ) fmt . Println ( arr [ 1 ] - arr [ 0 ] + arr [ 2 ] - arr [ 1 ] ) }
package main import ( " " " math " " sort " " % d % d \n " , & n , & p ) primeLimit : = int64 ( math . Sqrt ( float64 ( p ) ) ) allPrimes := listPrimes ( primeLimit ) entries := countPrimes ( p , allPrimes ) sort . Sort ( Entries ( entries ) ) factor := int64 ( 1 ) for _ , e := range entries { if e . count >= n { v := int64 ( math . Pow ( float64 ( e . prime ) , float64 ( e . count / n ) ) ) factor *= v } } fmt . Println ( factor ) } func countPrimes ( n int64 , allPrimes [ ] int64 ) [ ] Entry { es := [ ] Entry { } for _ , p := range allPrimes { if p * p > n { break } cnt := int64 ( 0 ) for n % p == 0 { cnt + = 1 n /= p } if cnt > 0 { es = append ( es , Entry { p , cnt } ) } } if n > 1 { es = append ( es , Entry { n , 1 } ) } return es } func listPrimes ( limit int64 ) [ ] int64 { ns := make ( [ ] int64 , limit - 1 ) for i := int64 ( 2 ) ; i <= limit ; i ++ { ns [ i - 2 ] = i } divided := make ( [ ] bool , limit + 1 ) ps := make ( [ ] int64 , 0 ) for _ , n := range ns { if divided [ n ] { continue } ps = append ( ps , n ) for i := n ; i < int64 ( len ( divided ) ) ; i += n { divided [ i ] = true } } return ps }
package main import ( " " " fmt " " os " " strconv " " Yes " ) return } } } fmt . Println ( " No "
package main import " " func main ( ) { var x [ 5 ] int var k int for i := range x { fmt . Scanf ( " " , & x [ i ] ) } fmt . Scanf ( " " , & k ) ok := true for _ , x1 := range x { for _ , x2 := range x { d := x1 - x2 if d < 0 { d = - d } if d > k { ok = false } } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { c [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for i := 0 ; i <= 100 ; i ++ { for j := 0 ; j <= 100 ; j ++ { for k := 0 ; k <= 100 ; k ++ { if c [ 0 ] [ 0 ] - i == c [ 1 ] [ 0 ] - j && c [ 1 ] [ 0 ] - j == c [ 2 ] [ 0 ] - k && c [ 0 ] [ 1 ] - i == c [ 1 ] [ 1 ] - j && c [ 1 ] [ 1 ] - j == c [ 2 ] [ 1 ] - k && c [ 0 ] [ 2 ] - i == c [ 1 ] [ 2 ] - j && c [ 1 ] [ 2 ] - j == c [ 2 ] [ 2 ] - k { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " " math " " Yes " " No "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { cnt5 := 2 cnt7 := 1 var a , b , c string fmt . Scanf ( " % s % s % s " , & a , & b , & c ) ss := [ 3 ] string { a , b , c } for _ , x := range ( ss ) { if 0 < cnt5 && x == " " { cnt5 -= 1 } else if 0 < cnt7 && x == " " { cnt7 -= 1 } else { fmt . Print ( " " ) return } } fmt . Print ( " " ) }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " " " YES " " NO "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( b - a ) <= k && ( c - a ) <= k && ( d - a ) <= k && ( e - a ) <= k && ( c - b ) <= k && ( d - b ) <= k && ( e - b ) <= k && ( d - c ) <= k && ( e - c ) <= k && ( e - d ) <= k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var k int var mat = make ( [ ] int , 5 ) for i := range mat { fmt . Scan ( & mat [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < len ( mat ) ; i ++ { for j := i + 1 ; j < len ( mat ) ; j ++ { if mat [ j ] - mat [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) for n := 1 ; n <= 3500 ; n ++ { for h := 1 ; h <= 3500 ; h ++ { y := N * h * n x := 4 * n * h - N * ( n + h ) if x > 0 && y * x > 0 && y % x == 0 { fmt . Println ( n , h , y / x ) return } } } }
package main import ( " " " sort " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mnt := h * 60 + m ap := mnt * math . Pi / 360 bp := mnt * math . Pi / 30 x := a * math . Cos ( ap ) - b * math . Cos ( bp ) y := a * math . Sin ( ap ) - b * math . Sin ( bp ) fmt . Println ( math . Sqrt ( x * x + y * y ) ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import " " func main ( ) { s := make ( [ ] int , 5 ) for i := range s { fmt . Scan ( & s [ i ] ) } var k int fmt . Scan ( & k ) for i := range s { for j := i + 1 ; j < 5 ; j ++ { if s [ j ] - s [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var K int var S int fmt . Scan ( & K ) fmt . Scan ( & S ) var counter int counter = 0 for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { k := S - i - j if k <= K && k >= 0 { counter ++ } } } fmt . Println ( counter ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " bufio " " os " " strings " " sort " " strconv " " " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " sort " " YES " " NO "
package main import ( " " " math " " % d % d % d " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " Yay ! " ) } else { fmt . Println ( " : ( "
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for i := 0 ; i < k + 1 ; i ++ { for j := 0 ; j < k + 1 ; j ++ { t := s - i - j if 0 <= t && t <= k { ans + + } } } if ans != 0 { fmt . Println ( ans ) } }
package main import ( " " " bufio " " os " " strings " " strconv " " % d " " "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { var A , B , H , M int fmt . Scan ( & A , & B , & H , & M ) s := float64 ( 60 * H + M ) / 2 l := float64 ( 6 * M ) angle := math . Abs ( l - s ) if angle > float64 ( 180 ) { angle = float64 ( 360 ) - angle } lh := A sh := B if B > A { lh = B sh = A } cos := math . Cos ( ( angle * math . Pi ) / 180 ) sin := math . Sin ( ( angle * math . Pi ) / 180 ) a := float64 ( sh ) * sin b := float64 ( lh ) - float64 ( sh ) * cos res := math . Sqrt ( a * a + b * b ) fmt . Println ( res ) }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) ans := 0.0 switch { case n < 2 : ans = 0.0 case n < 4 : ans = 1.0 case n < 8 : ans = 2.0 case n < 16 : ans = 3.0 case n < 32 : ans = 4.0 case n < 64 : ans = 5.0 default : ans = 6.0 } fmt . Println ( int ( math . Pow ( 2.0 , ans ) ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv " " Yes " " No " " No " " No " " No " " No " " No " " No " " No "
package main import ( " " " fmt " " os " " strconv " " AGC " " GAC " " ACG " " A " " G " " C " " T " " : ( \n " ) return } } } fmt . Printf ( " \n " ) } func main ( ) { check ( ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " YES " " NO "
package main import " " func main ( ) { m := make ( map [ int ] int ) var t int for i := 0 ; i < 4 ; i ++ { fmt . Scan ( & t ) m [ t ] ++ } if m [ 1 ] >= 1 && m [ 9 ] >= 1 && m [ 7 ] >= 1 && m [ 4 ] >= 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " strconv " " os " " bufio " " : ( " " Yay ! " ) } }
package main import ( " " " bufio " " os " " sort " " strings " " strconv " " " ) sort . Strings ( t ) return strings . Join ( t , " " ) } func reverseString ( s string ) string { t := [ ] rune ( s ) for i , j := 0 , len ( s ) - 1 ; i < j ; i , j = i + 1 , j - 1 { t [ i ] , t [ j ] = t [ j ] , t [ i ] } return string ( t ) } func stringRev ( s [ ] byte , l int , r int ) [ ] byte { for i := 0 ; i < ( r - l + 1 ) / 2 ; i ++ { s [ l - 1 + i ] , s [ r - 1 - i ] = s [ r - 1 - i ] , s [ l - 1 + i ] } return s } func inside ( h , w , H , W int ) bool { if h >= 0 && h < H && w >= 0 && w < W { return true } return false }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " math " " % d "
package main import ( " " " os " " bufio " " strconv " " Yes " " No "
package main import ( " " " math " " % d % d % d % d \n " , & A , & B , & H , & M ) hpi := 2 * math . Pi * float64 ( H * 60 + M ) / 12 / 60 mpi := 2 * math . Pi * float64 ( M ) / 60 theta := math . Abs ( float64 ( hpi - mpi ) ) d := float64 ( A * A ) + float64 ( B * B ) - float64 ( 2 * A * B ) * math . Cos ( theta ) fmt . Println ( math . Sqrt ( d ) ) } type IntHeap [ ] int func ( h IntHeap ) Len ( ) int { return len ( h ) } func ( h IntHeap ) Less ( i , j int ) bool { return h [ i ] < h [ j ] } func ( h IntHeap ) Swap ( i , j int ) { h [ i ] , h [ j ] = h [ j ] , h [ i ] } func ( h * IntHeap ) Push ( x interface { } ) { * h = append ( * h , x . ( int ) ) } func ( h * IntHeap ) Pop ( ) interface { } { old := * h n := len ( old ) x := old [ n - 1 ] * h = old [ 0 : n - 1 ] return x }
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) num := 0 if N == 0 { fmt . Println ( " " ) } tmp := 0 min := 0 fmt . Scan ( & min ) for i := 1 ; i < N ; i ++ { fmt . Scan ( & tmp ) if tmp > min { num ++ } if min > tmp { min = tmp } } fmt . Println ( N - num ) }
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d "
package main import ( " " ) var N int func main ( ) { fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func merge ( left , right [ ] int ) ( ret [ ] int ) { ret = [ ] int { } for len ( left ) > 0 && len ( right ) > 0 { var x int if right [ 0 ] > left [ 0 ] { x , left = left [ 0 ] , left [ 1 : ] } else { x , right = right [ 0 ] , right [ 1 : ] } ret = append ( ret , x ) } ret = append ( ret , left ... ) ret = append ( ret , right ... ) return } func sort ( left , right [ ] int ) ( ret [ ] int ) { if len ( left ) > 1 { l , r := split ( left ) left = sort ( l , r ) } if len ( right ) > 1 { l , r := split ( right ) right = sort ( l , r ) } ret = merge ( left , right ) return } func split ( values [ ] int ) ( left , right [ ] int ) { left = values [ : len ( values ) / 2 ] right = values [ len ( values ) / 2 : ] return } func Sort ( values [ ] int ) ( ret [ ] int ) { left , right := split ( values ) ret = sort ( left , right ) return } func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) b := Sort ( a ) fmt . Println ( b [ 2 ] - b [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " strings " " sort "
package main import " " func main ( ) { var str1 , str2 , str3 string fmt . Scan ( & str1 , & str2 , & str3 ) fnum := 0 snum := 0 for _ , str := range [ ] string { str1 , str2 , str3 } { if str == " " { fnum ++ } else if str == " " { snum ++ } } if fnum == 2 && snum == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x = x / 2 count = count + 1 } if count > m { m = count answer = i } } fmt . Println ( answer ) }
package main import " " func main ( ) { grid := make ( [ ] [ ] int , 3 ) for i := range grid { grid [ i ] = make ( [ ] int , 3 ) if i != 2 { fmt . Scanf ( " \n " , & grid [ i ] [ 0 ] , & grid [ i ] [ 1 ] , & grid [ i ] [ 2 ] ) } else { fmt . Scanf ( " " , & grid [ i ] [ 0 ] , & grid [ i ] [ 1 ] , & grid [ i ] [ 2 ] ) } } a := make ( [ ] int , 3 ) b := make ( [ ] int , 3 ) a [ 0 ] = 0 b [ 0 ] = grid [ 0 ] [ 0 ] b [ 1 ] = grid [ 1 ] [ 0 ] b [ 2 ] = grid [ 2 ] [ 0 ] a [ 1 ] = grid [ 0 ] [ 1 ] - b [ 0 ] a [ 2 ] = grid [ 0 ] [ 2 ] - b [ 0 ] flg := true for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if grid [ i ] [ j ] == ( a [ j ] + b [ i ] ) { continue } else { flg = false } } } if flg { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) } i P Y") == " " { wfp, _ = os. C U S10")) } scanner :=
package main import ( " " " " ) func main ( ) { var A1 , A2 , A3 int _ , _ = fmt . Scan ( & A1 , & A2 , & A3 ) A := [ ] int { A1 , A2 , A3 } sort . Ints ( A ) ans := ( A [ 2 ] - A [ 1 ] ) + ( A [ 1 ] - A [ 0 ] ) fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if a < b && b < c && c < d && d < e { if k >= b - a && k >= c - a && k >= d - a && k >= e - a && k >= c - b && k >= d - b && k >= e - b && k >= d - c && k >= e - c && k >= e - d { fmt . Print ( " " ) } else { fmt . Print ( " " ) } } }
package main import ( " " " fmt " " strings " " os " " " " 5 " { five + + } else if string ( v ) == " " { seven + + } } if five == 2 && seven == 1 { fmt . Println ( " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) hourDeg := ( h * 60 + m ) / 2 minDeg := m * 6 deg := minDeg - hourDeg if deg < 0 { deg = - deg } if deg >= 180 { deg = 360 - deg } rad := ( math . Pi / 180 ) * deg cc := ( a * a ) + ( b * b ) - 2 * a * b * math . Cos ( rad ) fmt . Println ( math . Sqrt ( cc ) ) }
package main import " " func main ( ) { c := [ 3 ] [ 3 ] int { } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } x := [ 3 ] int { } y := [ 3 ] int { } x [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] } for i := 0 ; i < 3 ; i ++ { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] } good := true for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if x [ i ] + y [ j ] != c [ i ] [ j ] { good = false } } } if good { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { xm := make ( map [ int ] bool ) for i := 0 ; i < 4 ; i ++ { var n int fmt . Scan ( & n ) xm [ n ] = true } if xm [ 1 ] && xm [ 9 ] && xm [ 7 ] && xm [ 4 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) min := a max := a for i := 1 ; i < 5 ; i ++ { var o int fmt . Scan ( & o ) if min > o { min = o } if max < o { max = o } } var k int fmt . Scan ( & k ) if max - min > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var a , b , h , m int var m_val , h_val , val , c2 float64 fmt . Scan ( & a , & b , & h , & m ) m_val = float64 ( 6 * m ) h_val = float64 ( float64 ( 30 * h ) + float64 ( float64 ( m ) * float64 ( 0.5 ) ) ) if h_val < m_val { if m_val - h_val <= 180 { val = m_val - h_val } else { val = 360 - m_val + h_val } } else { if h_val - m_val <= 180 { val = h_val - m_val } else { val = 360 - h_val + m_val } } c2 = float64 ( a * a + b * b ) - ( float64 ( 2 * a * b ) * math . Cos ( val / 90 * ( math . Pi / 2 ) ) ) fmt . Println ( math . Sqrt ( c2 ) ) }
package main import " " func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) five := 0 seven := 0 for i := 0 ; i < 3 ; i ++ { if a [ i ] == 5 { five ++ } if a [ i ] == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for i := 1 ; 1 << uint ( i ) <= n ; i ++ { ans = 1 << uint ( i ) } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) a := make ( [ ] int , n ) for i := range a { fmt . Scan ( & a [ i ] ) } b := make ( [ ] int , n ) for i := range b { fmt . Scan ( & b [ i ] ) } sumA := 0 for _ , ai := range a { sumA + = ai } sumB := 0 for _ , bi := range b { sumB += bi } if sumA < sumB { fmt . Println ( - 1 ) return } allOver := true for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { allOver = false } } if allOver { fmt . Println ( 0 ) return } var over [ ] int less := 0 count := 0 for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { less + = b [ i ] - a [ i ] count + + } if a [ i ] > b [ i ] { over = append ( over , a [ i ] - b [ i ] ) } } sort . Sort ( sort . Reverse ( sort . IntSlice ( over ) ) ) for _ , oi := range over { less -= oi count + + if less <= 0 { break } } fmt . Println ( count ) }
package main import ( " " " math " " % d % d " " % d \n " , P ) return } for ord , i : = 0 , 2 ; ; { if P % i != 0 { if P == 1 || i > A { break } ord = 0 i += 1 + i % 2 } else { ord ++ if ord % N == 0 { ans *= i } P /= i } } fmt . Printf ( " \n " , ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % d \n " , sum ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " debug " " . / test / sample - 1.i n " " There is no testfile . "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max_n , max_cnt := 1 , 0 for i := n ; i > 0 ; i -- { num := i cnt := 0 for { if num % 2 == 0 { cnt ++ num /= 2 } else { break } } if cnt > max_cnt { max_cnt = cnt max_n = i } } fmt . Println ( max_n ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) min := float64 ( h * 60 + m ) long := float64 ( 360 ) / float64 ( 60 ) short := float64 ( 360 ) / float64 ( 12 * 60 ) temp := long * min for temp >= 360.0 { temp -= 360.0 } ang := abs ( short * min - temp ) ang = Min ( ang , 360 - ang ) aa := float64 ( a ) bb := float64 ( b ) fmt . Println ( math . Sqrt ( aa * aa + bb * bb - 2 * aa * bb * math . Cos ( ang * math . Pi / 180 ) ) ) } func abs ( a float64 ) float64 { if a < 0 { return ( - 1 ) * a } return a } func Min ( a , b float64 ) float64 { if a < b { return a } return b }
package main import ( " " " fmt " " os " " strconv " " No " " No " " Yes "
package main import ( " " " bytes " " fmt " " io " " os " " sort " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " " sort " " % d % d % d " " YES " " NO "
package main import ( " " " " ) func main ( ) { ar := make ( [ ] int , 3 ) for i := range ar { fmt . Scan ( & ar [ i ] ) } sort . Ints ( ar ) fmt . Println ( ar [ 2 ] - ar [ 0 ] ) }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { tmp := make ( [ ] int , 3 ) fmt . Scan ( & tmp [ 0 ] , & tmp [ 1 ] , & tmp [ 2 ] ) c [ i ] = tmp } if checkRow ( diff ( c , 1 , 0 ) ) && checkCol ( diff ( c , 0 , 1 ) ) { fmt . Println ( " " ) return } fmt . Println ( " " ) } func checkRow ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { row := diff [ i ] if len ( row ) == 0 { continue } ans := row [ 0 ] for j := 1 ; j < len ( row ) ; j ++ { if ans != diff [ i ] [ j ] { return false } } } return true } func checkCol ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { ans := diff [ 0 ] [ i ] for j := 1 ; j < len ( diff ) ; j ++ { if ans != diff [ j ] [ i ] { return false } } } return true } func diff ( c [ ] [ ] int , slideI , slicdJ int ) [ ] [ ] int { diffs := make ( [ ] [ ] int , 3 ) for i := slideI ; i < len ( c ) ; i ++ { diffs [ i ] = make ( [ ] int , 3 ) for j := slicdJ ; j < len ( c [ i ] ) ; j ++ { diffs [ i ] [ j ] = c [ i ] [ j ] - c [ i - slideI ] [ j - slicdJ ] } } return diffs }
package main import ( " " " " ) func sq ( i float64 ) float64 { return i * i } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mo := m * 6 ho := h * 30 + m * 0.5 result := sq ( a ) + sq ( b ) - 2 * a * b * math . Cos ( ( mo - ho ) * ( math . Pi / 180 ) ) fmt . Println ( math . Sqrt ( result ) ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " " " " " " " " " b " " a " " c " " d "
package main import " " func main ( ) { G := false W := false Y := false P := false var N int fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var po string fmt . Scan ( & po ) if po == " " { G = true } if po == " " { W = true } if po == " " { Y = true } if po == " " { P = true } } ans := 0 if G { ans ++ } if W { ans ++ } if Y { ans ++ } if P { ans ++ } if ans == 3 { fmt . Println ( " " ) } if ans == 4 { fmt . Println ( " " ) } }
package main import ( " " " log " " math " " H : % v M : % v " , H , M ) A := abs ( H , M ) if A >= 180 { A = 360 - A } log . Print ( A ) log . Print ( math . Pow ( a , 2 ) ) log . Print ( math . Pow ( b , 2 ) ) return math . Sqrt ( math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( A * ( math . Pi / 180 ) ) ) } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) fmt . Println ( solution ( float64 ( a ) , float64 ( b ) , float64 ( h ) , float64 ( m ) ) ) } func abs ( x , y float64 ) float64 { if x > y { return x - y } return y - x }
package main import ( " " " math " " sort "
package main import " " import " " func main ( ) { var A , B , H , M float64 var theta float64 = 0 var temp float64 fmt . Scan ( & A , & B , & H , & M ) temp = 60 * H + M theta = temp / 720 - M / 60 fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * ( math . Cos ( 2 * math . Pi * theta ) ) ) ) }
package main import ( " " ) func main ( ) { a := make ( [ ] int , 3 ) x := 0 y := 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) if a [ i ] == 5 { x ++ } else if a [ i ] == 7 { y ++ } } if x == 2 && y == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c != 17 || ( a != 5 && a != 7 ) || ( b != 5 && b != 7 ) || ( c != 5 && c != 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " runtime / debug " " sort " " strconv " \n \r \t
package main import " " func main ( ) { var five , seven int var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " io " " os " " sort " " strconv " \n \r \t
package main import ( " " " fmt " " os " " YES " " NO "
package main import " " func main ( ) { var K , S , count int fmt . Scan ( & K , & S ) for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if X + Y + Z == S && Z >= 0 && K >= Z { count + = 1 } } } fmt . Println ( count ) }
package main import ( " " " fmt " " io " " os " " strconv " " empty ! " " empty ! " " empty ! " " Scan failed "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func isHaikable ( a , b , c int ) { } func main ( ) { var a , b , c int ret := " NO " fmt . Scan ( & a , & b , & c ) if a == 7 { if b == 5 && c == 5 { ret = " " } } else if b == 7 { if a == 5 && c == 5 { ret = " " } } else if c == 7 { if b == 5 && a == 5 { ret = " " } } fmt . Println ( ret ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) var ( n float64 ) func main ( ) { fmt . Scan ( & n ) fmt . Println ( math . Pow ( 2.0 , math . Floor ( math . Log ( n ) / math . Log ( 2.0 ) ) ) ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if a - b > k || b - a > k { fmt . Println ( " " ) return } if a - c > k || c - a > k { fmt . Println ( " " ) return } if a - d > k || d - a > k { fmt . Println ( " " ) return } if a - e > k || e - a > k { fmt . Println ( " " ) return } if b - c > k || c - b > k { fmt . Println ( " " ) return } if b - d > k || d - b > k { fmt . Println ( " " ) return } if b - e > k || e - b > k { fmt . Println ( " " ) return } if c - d > k || d - c > k { fmt . Println ( " " ) return } if c - e > k || e - c > k { fmt . Println ( " " ) return } if d - e > k || e - d > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 mx := 0 for i := 1 ; i <= n ; i ++ { t := i c := 0 for t % 2 == 0 { c ++ t /= 2 } if mx < c { mx = c ans = i } } fmt . Println ( ans ) }
package main import " " func max ( a , b int ) int { if a >= b { return a } return b } func min ( a , b int ) int { if a >= b { return b } return a } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) fmt . Println ( max ( a , max ( b , c ) ) - min ( a , min ( b , c ) ) ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " os " " strconv " " Four " " Three "
package main import ( " " " fmt " " os " " % d " " % s " " Y " " Four " " Three "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) var ans int for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " : ( " " Yay ! " " funciton min ( ) requires at least one argument . " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Min ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Max ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func strSearch ( a [ ] string , b string ) bool { for i := 0 ; i < len ( a ) ; i ++ { if a [ i ] == b { return true } } return false }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " Yay ! " " : ( "
package main import ( " " " os " " strings " " strconv " " sort " " fmt " " "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { grid := make ( [ ] [ 3 ] int , 3 ) for i := 0 ; i < 3 ; i ++ { grid [ i ] = [ 3 ] int { } for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & grid [ i ] [ j ] ) } } var a1 , a2 , a3 , b1 , b2 , b3 int b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 1 ] [ 0 ] - a1 b3 = grid [ 2 ] [ 0 ] - a1 a2 = grid [ 0 ] [ 1 ] - b1 a3 = grid [ 0 ] [ 2 ] - b1 flag := true if grid [ 1 ] [ 1 ] != a2 + b2 { flag = false } if grid [ 1 ] [ 2 ] != a3 + b2 { flag = false } if grid [ 2 ] [ 1 ] != a2 + b3 { flag = false } if grid [ 2 ] [ 2 ] != a3 + b3 { flag = false } if flag == true { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " " fmt " " os " " strconv " " Y " " Four " " Three "
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) " " % .10 f \n " , math . Sqrt ( vecA . cos * vecA . cos + vecA . sin * vecA . sin + vecB . cos * vecB . cos + vecB . sin * vecB . sin + - 2 * ( vecA . cos * vecB . cos + vecA . sin * vecB . sin ) ) ) }
package main import ( " " " math " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! " ) }
package main import ( " " " os " " : ( " " Yay ! " ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) var hh , nn , ww int for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * h * n - h * N - n * N <= 0 { continue } if ( h * n * N ) % ( 4 * h * n - h * N - n * N ) == 0 { hh = h nn = n ww = ( h * n * N ) / ( 4 * h * n - h * N - n * N ) } } } fmt . Printf ( " \n " , hh , nn , ww ) }
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " " " "
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) if N % 2 == 0 { fmt . Println ( N / 2 , N , N ) } else if N % 3 == 0 { fmt . Println ( N / 3 , 2 * N , 2 * N ) } else { w := 0 for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * h * n - N * ( h + n ) <= 0 { continue } if N * h * n % ( 4 * h * n - N * ( h + n ) ) != 0 { continue } w = N * h * n / ( 4 * h * n - N * ( h + n ) ) fmt . Println ( h , n , w ) break } if w != 0 { break } } } }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k ) fmt . Scan ( & s ) ans := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { t := s - ( i + j ) if 0 <= t && t <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % d % d % d % d "
package main import ( " " ) var N int var S [ ] string func main ( ) { fmt . Scanf ( " " , & N ) S = make ( [ ] string , N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & S [ i ] ) } m := make ( map [ string ] bool ) for i := 0 ; i < len ( S ) ; i ++ { m [ S [ i ] ] = true } ans := 0 for _ , v := range m { if v { ans + + } } if ans == 4 { fmt . Println ( " " ) } else if ans == 3 { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b [ 4 ] int var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for a [ 1 ] = 0 ; a [ 1 ] <= c [ 0 ] [ 0 ] ; a [ 1 ] ++ { for a [ 2 ] = 0 ; a [ 2 ] <= c [ 1 ] [ 0 ] ; a [ 2 ] ++ { Po : for a [ 3 ] = 0 ; a [ 3 ] <= c [ 2 ] [ 0 ] ; a [ 3 ] ++ { b [ 1 ] = c [ 0 ] [ 0 ] - a [ 1 ] b [ 2 ] = c [ 1 ] [ 1 ] - a [ 2 ] b [ 3 ] = c [ 2 ] [ 2 ] - a [ 3 ] for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if c [ i ] [ j ] != a [ i + 1 ] + b [ j + 1 ] { continue Po } } } fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var x int64 var countFive , countSeven int64 for i := 0 ; i < 3 ; i ++ { fmt . Scanf ( " " , & x ) if x == 5 { countFive ++ } else if x == 7 { countSeven ++ } } if countFive == 2 && countSeven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Yay ! " ) } else { fmt . Println ( " : ( "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import . " " func main ( ) { var k , s , x , y , z , n , t int Scan ( & k , & s ) n = 0 for z = 0 ; z <= k ; z ++ { t = s - z if t < 0 { break } for y = 0 ; y <= k ; y ++ { x = t - y if x < 0 { break } if x <= k { n ++ } } } Println ( n ) } func min ( x int , y int ) int { if x < y { return x } else { return y } }
package main import ( " " " " ) func main ( ) { var N , p , r int fmt . Scan ( & N ) min := math . MaxInt64 for i := 0 ; i < N ; i ++ { fmt . Scan ( & p ) if p <= min { min = p r ++ } } fmt . Println ( r ) }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " Yes " " No " " Yes " " No "
package main import ( " " " fmt " " os " " strings " " 5 " ) = = 2 && strings . Count ( s . Text ( ) , " " ) == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a + b + c ) == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } var a [ 3 ] int var b [ 3 ] int a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main ; import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) count := 0 for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= S - i ; j ++ { if j > K { break } if S - i - j <= K { count ++ } } } fmt . Println ( count ) } func min ( a int , b int ) int { if a < b { return a } return b }
package main import " " func main ( ) { var k int a := make ( [ ] int , 5 ) for i := range a { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) f := a [ 0 ] for i := 1 ; i < 5 ; i ++ { if a [ i ] - f > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " os " " NO " " YES " " NO "
package main import ( " " " fmt " " math " " os " " % d % d % d "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) var b bool for i := 0 ; i < N ; i ++ { w := " " fmt . Scan ( & w ) if w == " " { b = true break } } if b { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a ) <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { nums := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & nums [ i ] ) } sort . Ints ( nums ) fmt . Println ( nums [ 2 ] - nums [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " math " " os " " strconv " " strings "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) radH := ( float64 ( h ) + float64 ( m ) / 60 ) * 2 * math . Pi / 12 radM := float64 ( m ) * 2 * math . Pi / 60 rad := math . Abs ( radH - radM ) ans := float64 ( a * a ) + float64 ( b * b ) - 2 * float64 ( a * b ) * math . Cos ( rad ) ans = math . Sqrt ( ans ) fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var n_5 int var n_7 int t := make ( [ ] int , 3 ) fmt . Scan ( & t [ 0 ] , & t [ 1 ] , & t [ 2 ] ) for i := 0 ; i < 3 ; i ++ { if t [ i ] == 5 { n_5 ++ } else if t [ i ] == 7 { n_7 ++ } } if n_5 == 2 && n_7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " math " " % d % d % d % d % d "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Three " " Four " " "
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) var b int fmt . Scan ( & b ) var c int fmt . Scan ( & c ) args := make ( [ ] int , 3 ) args [ 0 ] = a args [ 1 ] = b args [ 2 ] = c if len ( args ) != 3 { fmt . Println ( len ( args ) ) fmt . Println ( " " ) return } m := make ( map [ int ] int ) for _ , v := range args { if m [ v ] == 0 { m [ v ] = 1 } else { m [ v ] = m [ v ] + 1 } } if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " NO " ) return } var f , s int for _ , t := range [ ] int { a , b , c } { if t == 5 { f ++ } if t == 7 { s ++ } } if f == 2 && s == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " bufio " " os " " sort " " strings " " strconv " " YES " " NO " " " ) sort . Strings ( t ) return strings . Join ( t , " " ) } func reverseString ( s string ) string { t := [ ] rune ( s ) for i , j := 0 , len ( s ) - 1 ; i < j ; i , j = i + 1 , j - 1 { t [ i ] , t [ j ] = t [ j ] , t [ i ] } return string ( t ) } func stringRev ( s [ ] byte , l int , r int ) [ ] byte { for i := 0 ; i < ( r - l + 1 ) / 2 ; i ++ { s [ l - 1 + i ] , s [ r - 1 - i ] = s [ r - 1 - i ] , s [ l - 1 + i ] } return s } func inside ( h , w , H , W int ) bool { if h >= 0 && h < H && w >= 0 && w < W { return true } return false }
package main import ( " " ) func main ( ) { var n , m int fmt . Scan ( & n , & m ) x := make ( [ ] int , n ) y := make ( [ ] int , m ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) } for i := 0 ; i < m ; i ++ { fmt . Scan ( & y [ i ] ) } const mod = 1000000007 var yoko , tate int for i := 0 ; i < n ; i ++ { yoko += ( x [ i ] * i ) % mod yoko = ( yoko + mod - ( x [ i ] * ( n - 1 - i ) ) ) % mod } for i := 0 ; i < m ; i ++ { tate += ( y [ i ] * i ) % mod tate = ( tate + mod - ( y [ i ] * ( m - 1 - i ) ) ) % mod } res := ( yoko * tate ) % mod if res < 0 { res += mod } fmt . Println ( res ) }
package main import " " func f ( i int ) int { n := 0 for i % 2 == 0 { n + + i / = 2 } return n } func main ( ) { var n int fmt . Scan ( & n ) ans , x := 0 , 0 for i := 1 ; i <= n ; i ++ { y := f ( i ) if x <= y { ans , x = i , y } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { m := make ( map [ int ] int ) a := 0 for i := 0 ; i < 4 ; i ++ { fmt . Scan ( & a ) m [ a ] ++ } v := [ ] int { 1 , 9 , 7 , 4 } for _ , e := range v { if m [ e ] == 0 { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " math " " % .20 f \n " , ans ) }
package main import ( " " ) func main ( ) { var s , k , x , y , z int ans := 0 fmt . Scan ( & k , & s ) for x = 0 ; x <= k ; x ++ { for y = 0 ; y <= k ; y ++ { z = s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var ( K int S int ) var count = 0 fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { count += 1 } } } fmt . Println ( count ) }
package main import ( " " " log " " Yay ! " " : ( "
package main import " " func main ( ) { var t1 , t2 , a1 , a2 , b1 , b2 int fmt . Scan ( & t1 , & t2 , & a1 , & a2 , & b1 , & b2 ) a1 , a2 = a1 * t1 , a2 * t2 b1 , b2 = b1 * t1 , b2 * t2 if a1 < b1 { a1 , b1 = b1 , a1 a2 , b2 = b2 , a2 } if a1 + a2 == b1 + b2 { fmt . Println ( " " ) return } if a1 + a2 > b1 + b2 { fmt . Println ( 0 ) return } x := a1 - b1 y := ( b1 + b2 ) - ( a1 + a2 ) if x % y == 0 { fmt . Println ( x / y * 2 ) } else { fmt . Println ( x / y * 2 + 1 ) } }
package main import ( " " ) func main ( ) { var a , b , c int five := 0 seven := 0 fmt . Scanf ( " % d " " % d " " % d " " NO " if five == 2 && seven == 1 { ans = " " } fmt . Printf ( " " , ans ) }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { c [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } isOK := true for i := 0 ; i <= 1 ; i ++ { for j := 0 ; j <= 1 ; j ++ { if c [ i ] [ j + 1 ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] { isOK = false break } } } for i := 0 ; i <= 1 ; i ++ { for j := 0 ; j <= 1 ; j ++ { if c [ i + 1 ] [ j ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] { isOK = false break } } } if isOK { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " bufio " " strings " " sort " " " " " " 557 " { fmt . Println ( " YES " " NO "
package main import " " func abs ( a int ) int { if a >= 0 { return a } return - a } func min ( a , b int ) int { if a >= b { return b } return a } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ans := 300 arr := [ ] [ ] int { { a , b , c } , { a , c , b } , { b , a , c } , { b , c , a } , { c , a , b } , { c , b , a } } for _ , v := range arr { ans = min ( ans , abs ( v [ 0 ] - v [ 1 ] ) + abs ( v [ 1 ] - v [ 2 ] ) ) } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var ( a [ 5 ] int k int ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for j1 := 0 ; j1 < 5 - 1 ; j1 ++ { for j2 := j1 + 1 ; j2 < 5 ; j2 ++ { if ( a [ j2 ] - a [ j1 ] ) > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d " " % d \n " , count ) }
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " " ) func main ( ) { var n , m int fmt . Scan ( & n ) m = 4 for x := n / m + 1 ; x <= ( 3 * n ) / m ; x ++ { var p , q int p = x * n q = m * x - n for y := p / q + 1 ; y <= ( 2 * p ) / q ; y ++ { var a , b int a = y * p b = q * y - p if a % b == 0 { fmt . Println ( x , y , a / b ) os . Exit ( 0 ) } } } }
package main import ( " " " fmt " " os " " % d % d " " % d \n " , count ) }
package main import ( " " " fmt " " math " " os " " strconv " " funciton min ( ) requires at least one argument . " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Min ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Max ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func strSearch ( a [ ] string , b string ) bool { for i := 0 ; i < len ( a ) ; i ++ { if a [ i ] == b { return true } } return false } func printIntArray ( array [ ] int ) { strArray := fmt . Sprint ( array ) fmt . Println ( strArray [ 1 : len ( strArray ) - 1 ] ) } func calcMod ( x int ) int { return x % mod }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " ) func main ( ) { var nn int fmt . Scanf ( " % d " " % d " " % v \n " , result ) }
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) nums := make ( [ ] int , n ) min := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & nums [ i ] ) if i == 0 { min [ 0 ] = nums [ 0 ] } if i > 0 && nums [ i ] < min [ i - 1 ] { min [ i ] = nums [ i ] } else if i > 0 && nums [ i ] >= min [ i - 1 ] { min [ i ] = min [ i - 1 ] } } counter := 0 for i , num := range nums { if num == min [ i ] { counter + + } if num == 1 { fmt . Println ( counter ) return } } fmt . Println ( counter ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) var D , N int type cloth struct { A , B , C int } func abs ( a int ) int { if a > 0 { return a } return - a } func max ( a , b int ) int { if a < b { return b } return a } func main ( ) { fmt . Scan ( & D , & N ) thermals := make ( [ ] int , D + 1 ) for i := 1 ; i <= D ; i ++ { fmt . Scan ( & thermals [ i ] ) } clothes := make ( [ ] cloth , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & clothes [ i ] . A , & clothes [ i ] . B , & clothes [ i ] . C ) } dp := make ( [ ] [ ] int , D + 1 ) for i := range dp { dp [ i ] = make ( [ ] int , N ) } for i := 1 ; i < D ; i ++ { for j := 0 ; j < N ; j ++ { for k := 0 ; k < N ; k ++ { t1 := thermals [ i ] t2 := thermals [ i + 1 ] if clothes [ j ] . A <= t2 && t2 <= clothes [ j ] . B && clothes [ k ] . A <= t1 && t1 <= clothes [ k ] . B { dp [ i + 1 ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ k ] + abs ( clothes [ j ] . C - clothes [ k ] . C ) ) } } } } val := 0 for _ , v := range dp [ D ] { val = max ( val , v ) } fmt . Println ( val ) }
package main import ( " " " " ) func main ( ) { var n int var p int fmt . Scan ( & n ) fmt . Scan ( & p ) if n == 1 { fmt . Println ( p ) return } result := p end := int ( math . Pow ( float64 ( p ) , float64 ( 1.0 ) / float64 ( n ) ) ) for i := 1 ; i <= end ; i ++ { pow := int ( math . Floor ( ( math . Pow ( float64 ( i ) , float64 ( n ) ) ) ) ) if ( p % pow ) == 0 { result = i } } fmt . Println ( result ) }
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) P = make ( [ ] int , N ) for i := range P { fmt . Scan ( & P [ i ] ) } n := N + 1 ans := 0 for _ , p := range P { if n > p { ans + + n = p } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yay ! " " : ( "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) a := [ ] int { 64 , 32 , 16 , 8 , 4 , 2 , 1 } for _ , v := range a { if n >= v { fmt . Println ( v ) return } } }
package main import ( " " " fmt " " log " " os " " strconv " " Three " " Four "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : " " No more token . " ) } return scanner . Text ( ) } func MinInt ( x , y int ) int { if x < y { return x } else { return y } } func MaxInt ( x , y int ) int { if x < y { return y } else { return x } } func AbsInt ( x int ) int { if x < 0 { return - x } return x } func ModPow ( base , exponent , modulo int ) ( result int ) { result = 1 for exponent > 0 { if exponent % 2 == 1 { result *= base if modulo > 1 { result %= modulo } } base *= base if modulo > 1 { base %= modulo } exponent /= 2 } return } func Gcd ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = gcd ( result , vals [ i ] ) } return } func gcd ( x , y int ) int { x , y = AbsInt ( x ) , AbsInt ( y ) for y > 0 { x , y = y , x % y } return x } func Lcm ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = lcm ( result , vals [ i ] ) } return } func lcm ( x , y int ) int { return x * y / gcd ( x , y ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func intsMax : argument slice length must not be zero " " func intsMaxIdx : argument slice length must not be zero " " func intsMin : argument slice length must not be zero " " func intsMinIdx : argument slice length must not be zero " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) angle := math . Abs ( 30 * h + 0.5 * m - 6 * m ) d := a * a + b * b - 2 * a * b * math . Cos ( angle * math . Pi / 180 ) d = math . Sqrt ( d ) fmt . Println ( d ) }
package main import ( " " " math " " Three " " Four "
package main import ( " " " " ) func main ( ) { var a1 , a2 , a3 float64 var sl [ ] int fmt . Scan ( & a1 , & a2 , & a3 ) sl = append ( sl , int ( math . Abs ( a1 - a2 ) + math . Abs ( a2 - a3 ) ) ) sl = append ( sl , int ( math . Abs ( a2 - a3 ) + math . Abs ( a3 - a1 ) ) ) sl = append ( sl , int ( math . Abs ( a3 - a1 ) + math . Abs ( a1 - a2 ) ) ) min := 300 for _ , v := range sl { if v < min { min = v } } fmt . Println ( min ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES \n " ) } else { fmt . Printf ( " \n " ) } } else if b == c { if b == 5 && a == 7 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } } else if a == c { if a == 5 && b == 7 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } } else { fmt . Printf ( " \n " ) } }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " sort " " strconv " " YES " " NO "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func min3500 ( x int ) int { if x < 3500 { return x } else { return 3500 } } func main ( ) { var N int fmt . Scan ( & N ) if N % 2 == 0 { fmt . Println ( N / 2 , N , N ) } else if N % 3 == 0 { fmt . Println ( N / 3 , 2 * N , 2 * N ) } else { w := 0 for h := N / 4 ; h <= min3500 ( 3 * N / 4 ) ; h ++ { for n := ( N * h ) / ( 4 * h - N ) ; n <= min3500 ( ( 2 * N * h ) / ( 4 * h - N ) ) ; n ++ { if 4 * h * n - N * ( h + n ) <= 0 { continue } if N * h * n % ( 4 * h * n - N * ( h + n ) ) != 0 { continue } w = N * h * n / ( 4 * h * n - N * ( h + n ) ) fmt . Println ( h , n , w ) break } if w != 0 { break } } } }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " strconv . Atoi failed : % v \n " , err ) } return n } func stringifyArray ( arr [ ] int ) string { return strings . TrimRight ( fmt . Sprintf ( " % + v " " ] " ) } func main ( ) { scanner . Split ( bufio . ScanWords ) count := map [ int ] int { } sizeA := nextInt ( ) for i := 0 ; i < sizeA ; i ++ { count [ nextInt ( ) ] ++ } sizeB := nextInt ( ) for i := 0 ; i < sizeB ; i ++ { count [ nextInt ( ) ] ++ } keys := [ ] int { } for k := range count { keys = append ( keys , k ) } sort . Ints ( keys ) for _ , k := range keys { fmt . Println ( k ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " " Yes " " No " \t \n \v \f \r \n \r \n
package main import ( " " ) func main ( ) { ts := make ( [ ] int , 6 ) for i := 0 ; i < 6 ; i ++ { fmt . Scan ( & ts [ i ] ) } if ts [ 4 ] - ts [ 0 ] <= ts [ 5 ] { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import " " func main ( ) { var N , M int fmt . Scanf ( " % d % d " " % s " " % s " " No " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " % .12 f " " "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) rec := float64 ( 30 * h + m / 2 - 6 * m ) cosC := math . Cos ( rec * math . Pi / 180 ) result := a * a + b * b - float64 ( 2 * a * b * cosC ) fmt . Println ( math . Sqrt ( result ) ) }
package main import " " func main ( ) { var N int fmt . Scanf ( " % d " " % s " " Four " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " math / big "
package main import ( " " " fmt " " os " " sort " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func abs ( a int ) int { if a < 0 { return - a } return a } func main ( ) { var A1 , A2 , A3 int fmt . Scanf ( " % d % d % d " " % d \n " , ans ) }
package main import ( " " ) func main ( ) { var N int var S string var res string = " " fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & S ) if S == " " { res = " " } } fmt . Println ( res ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if b < a { a , b = b , a } if c < b { b , c = c , b } if a == 5 && b == 5 && c == 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import " " func main ( ) { var n int var s string var four bool fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { four = true } } if four { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func abs ( a int ) int { if a < 0 { return - a } else { return a } } func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) max := a [ 0 ] min := a [ 2 ] for i := 0 ; i < 3 ; i ++ { if a [ i ] > max { max = a [ i ] } if a [ i ] < min { min = a [ i ] } } fmt . Println ( max - min ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) c := a * a + b * b - 2 * a * b * math . Cos ( ( math . Pi / 6.0 ) * h - ( math . Pi / 30.0 ) * m + ( math . Pi / 360.0 ) * m ) fmt . Println ( math . Sqrt ( c ) ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m , c float64 var arg1 , arg2 float64 fmt . Scan ( & a , & b , & h , & m ) arg1 = 30 * h + float64 ( 360 ) / float64 ( 12 ) / float64 ( 60 ) * m arg2 = 6 * m arg := math . Abs ( arg1 - arg2 ) if arg > 180 { arg = 360 - arg } aS := a * a bS := b * b that := 2 * a * b * math . Cos ( math . Pi * ( arg / 180 ) ) c = math . Sqrt ( aS + bS - that ) fmt . Println ( c ) }
package main import " " const inf = 1 << 60 func chmin ( a * int , b int ) bool { if * a > b { * a = b return true } return false } func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ps [ i ] ) } ct := 0 mn := inf for _ , p := range ps { if chmin ( & mn , p ) { ct + + } } fmt . Println ( ct ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) plus := make ( [ ] int , 0 ) minusTotal := 0 count := 0 aa := make ( [ ] int , n ) bb := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & aa [ i ] ) } for i := 0 ; i < n ; i ++ { fmt . Scan ( & bb [ i ] ) } for i := 0 ; i < n ; i ++ { a , b := aa [ i ] , bb [ i ] d := a - b if d > 0 { plus = append ( plus , d ) } else { minusTotal += d count + + } } if minusTotal >= 0 { fmt . Println ( 0 ) return } sort . Ints ( plus ) for i := len ( plus ) - 1 ; i >= 0 ; i -- { count ++ minusTotal += plus [ i ] if minusTotal >= 0 { fmt . Println ( count ) return } } fmt . Println ( - 1 ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " % d " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) i := 1 var result int for i <= n { result = i i *= 2 } fmt . Println ( result ) }
package main import ( " " " math " " : ( " " Yay ! " " : ( "
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " os " " text / scanner " " strconv " " Yay ! \n " ) } else { fmt . Printf ( " \n " ) } }
package main import " " func main ( ) { var N int _ , _ = fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string _ , _ = fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n , max , maxN int fmt . Scan ( & n ) for i := 1 ; i <= n ; i ++ { tmp := i num := 1 for tmp > 0 && tmp % 2 == 0 { tmp /= 2 num + + } if num > max { maxN = i max = num } } fmt . Printf ( " \n " , maxN ) }
package main import ( " " " " ) func Degree2Radian ( deg float64 ) float64 { return deg * math . Pi / 180.0 } func Radian2Degree ( rad float64 ) float64 { return rad * 180.0 / math . Pi } func HourHandAngle ( h , m int ) float64 { return 30.0 * float64 ( h ) + float64 ( m ) / 2.0 } func MinuteHandAngle ( m int ) float64 { return 6.0 * float64 ( m ) } func AcuteAngle ( h , m int ) float64 { diff := HourHandAngle ( h , m ) - MinuteHandAngle ( m ) if diff < 0 { diff *= - 1 } if diff > 180.0 { diff = 360.0 - diff } return diff } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) rad := Degree2Radian ( AcuteAngle ( h , m ) ) ans := math . Sqrt ( float64 ( a * a ) + float64 ( b * b ) - 2.0 * float64 ( a ) * float64 ( b ) * math . Cos ( rad ) ) fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var k int var s int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if z := s - x - y ; 0 <= z && z <= k { cnt ++ } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " const div = 1000000000 + 7 func abs ( i int ) int { if i < 0 { return - i } return i } func mod ( i int ) int { return i % div } func fact ( i int ) int { if i == 1 { return 1 } return mod ( i * fact ( i - 1 ) ) } func main ( ) { var n , m int fmt . Scan ( & n , & m ) if abs ( n - m ) > 1 { fmt . Println ( 0 ) return } mn := fact ( n ) mm := fact ( m ) if n == m { fmt . Println ( mod ( mn * mm * 2 ) ) return } fmt . Println ( mod ( mn * mm ) ) }
package main import ( " " " fmt " " math " " os " " strconv " " % g \n " , ans ) }
package main import ( " " " " ) func main ( ) { var N float64 fmt . Scan ( & N ) var h , n , w float64 for h = 1 ; h <= 3500 ; h ++ { for n = 1 ; n <= 3500 ; n ++ { x := 4 / N - 1 / h - 1 / n if x > 1 || x < 0 { continue } left := - 0.1 right := 100000.0 var mid float64 for right - left > 0.1 { mid = ( left + right ) / 2.0 if 1 / mid >= x { left = mid } else { right = mid } } w = math . Trunc ( mid ) if w > 0.0 { if 4 / N == 1 / h + 1 / n + 1 / w { fmt . Println ( h , n , w ) return } } w = math . Ceil ( mid ) if w > 0.0 { if 4 / N == 1 / h + 1 / n + 1 / w { fmt . Println ( h , n , w ) return } } } } var i int for { i ++ } }
package main import ( " " " fmt " " io " " os " " runtime / debug " " sort " " strconv " \n \r \t
package main import " " func main ( ) { var A , B , C int fmt . Scan ( & A , & B , & C ) sum := A + B + C ans := " " if sum == 17 { ans = " " } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " strconv " " math " " fmt " " % .15 f \n " , ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " sort " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " sort " " Yay ! " " : ( "
package main import " " func main ( ) { var m [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & m [ i ] [ j ] ) } } b1 , b2 , b3 := m [ 0 ] [ 0 ] , m [ 0 ] [ 1 ] , m [ 0 ] [ 2 ] a21 , a22 , a23 := m [ 1 ] [ 0 ] - b1 , m [ 1 ] [ 1 ] - b2 , m [ 1 ] [ 2 ] - b3 a31 , a32 , a33 := m [ 2 ] [ 0 ] - b1 , m [ 2 ] [ 1 ] - b2 , m [ 2 ] [ 2 ] - b3 if a21 != a22 || a22 != a23 || a31 != a32 || a32 != a33 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " Three " " Four " " scan error " " text to int error " " scan error "
package main import " " var a , b , c , d , e , k int func check ( ) bool { if e - d <= k && e - c <= k && e - b <= k && e - a <= k { if d - c <= k && d - b <= k && d - a <= k { if c - a <= k && b - a <= k { return true } } } return false } func main ( ) { fmt . Scan ( & a , & b , & c , & d , & e , & k ) if check ( ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var a [ ] int for i := 0 ; i < 3 ; i ++ { var tmp int fmt . Scan ( & tmp ) a = append ( a , tmp ) } sort . Ints ( a ) diff := 0 for i := 2 ; i > 0 ; i -- { diff += a [ i ] - a [ i - 1 ] } fmt . Println ( diff ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int var ans string fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { ans = " " } else { ans = " " } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) ans := 1 for ans * 2 <= N { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " ) const ( N = 10 ) func abs ( a int ) int { if a < 0 { return - a } return a } func main ( ) { var a [ N ] int var k int n := 5 for i := 0 ; i < n ; i + + { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < n ; i + + { for j := i ; j < n ; j + + { if abs ( a [ i ] - a [ j ] ) > k { fmt . Println ( " : ( " ) return } } } fmt . Println ( " Yay ! " ) }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) for i := range a { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( abs ( a [ 0 ] - a [ 1 ] ) + abs ( a [ 1 ] - a [ 2 ] ) ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f \n " , ans ) } else { AFloat : = float64 ( A ) BFloat : = float64 ( B ) aPosRad : = 2.0 * math . Pi * float64 ( aPosM ) / 720.0 bPosRad : = 2.0 * math . Pi * float64 ( bPosM ) / 720.0 rad : = math . Abs ( aPosRad - bPosRad ) var ans float64 = 0 ans + = AFloat * AFloat ans += BFloat * BFloat ans -= 2.0 * AFloat * BFloat * math . Cos ( rad ) ans = math . Sqrt ( ans ) fmt . Printf ( " % .19 f \n " , ans ) } } var sc = bufio . NewScanner ( os . Stdin ) func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " sort " " strings " " " " "
package main import ( " " " os " " bufio " " strconv " " YES " " YES " " YES " " NO "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] struct { } ) var s string for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) m [ s ] = struct { } { } } var cnt int for _ , _ = range m { cnt + + } if cnt == 3 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var a int count5 , count7 := 0 , 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a ) if a == 5 { count5 ++ } else if a == 7 { count7 ++ } } if count5 == 2 && count7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " % v \n " , " " ) return } b := nextInt ( ) if b != 5 && b != 7 { fmt . Printf ( " \n " , " " ) return } c := nextInt ( ) if c != 5 && c != 7 { fmt . Printf ( " \n " , " " ) return } if a + b + c != 17 { fmt . Printf ( " \n " , " " ) return } fmt . Printf ( " \n " , " " ) }
package main import " " func main ( ) { a := make ( [ ] int , 5 ) var k int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] , & a [ 3 ] , & a [ 4 ] , & k ) for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 5 ; j ++ { if a [ j ] - a [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func scanNums ( len int ) ( nums [ ] int ) { var num int for i := 0 ; i < len ; i ++ { fmt . Scan ( & num ) nums = append ( nums , num ) } return } func main ( ) { nums := scanNums ( 5 ) var k int fmt . Scan ( & k ) if nums [ 4 ] - nums [ 0 ] > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { slice := make ( [ ] int , 3 ) fmt . Scanf ( " " , & slice [ 0 ] , & slice [ 1 ] , & slice [ 2 ] ) count5 := 0 count7 := 0 for i := 0 ; i < 3 ; i ++ { if slice [ i ] == 5 { count5 ++ } else if slice [ i ] == 7 { count7 ++ } } if count5 == 2 && count7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import " " func main ( ) { var k int antennas := ScanNums ( 5 ) fmt . Scan ( & k ) anyUnconnectable := false for _ , length := range antennas [ 1 : ] { if length - antennas [ 0 ] > k { anyUnconnectable = true } } if anyUnconnectable { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func ScanNums ( len int ) ( nums [ ] int ) { var num int for i := 0 ; i < len ; i ++ { fmt . Scan ( & num ) nums = append ( nums , num ) } return }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import ( " " ) var N , x int64 var arr [ ] int64 func min ( a , b int64 ) int64 { if a < b { return a } return b } func main ( ) { fmt . Scan ( & N , & x ) arr = make ( [ ] int64 , N ) for i := range arr { fmt . Scan ( & arr [ i ] ) } dp := make ( [ ] [ ] int64 , N ) for i := range dp { dp [ i ] = make ( [ ] int64 , N ) } for i := range dp [ 0 ] { dp [ 0 ] [ i ] = arr [ i ] } var ans int64 ans = 1 << 60 for k := int64 ( 0 ) ; k < N ; k ++ { costs := int64 ( 0 ) for i := int64 ( 0 ) ; i < N ; i ++ { if k > 0 { dp [ k ] [ i ] = min ( dp [ k - 1 ] [ i ] , arr [ ( i - k + N ) % N ] ) } costs += dp [ k ] [ i ] } ans = min ( ans , x * k + costs ) } fmt . Println ( ans ) }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] var count int for i := 0 ; i < N ; i ++ { if min >= P [ i ] { min = P [ i ] count + + } } fmt . Println ( count ) }
package main import ( " " ) func find ( target int , ary [ ] int ) ( bool , [ ] int ) { for i , a := range ary { if a == target { ary = append ( ary [ : i ] , ary [ i + 1 : ] ... ) return true , ary } } return false , ary } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ary := [ ] int { a , b , c } var result bool bunsetsu := [ ] int { 5 , 7 , 5 } for _ , b := range bunsetsu { result , ary = find ( b , ary ) if ! result { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " sort " " : ( " " Yay ! " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " YES " ) } else { fmt . Println ( " NO "
package main import ( " " " fmt " " io " " math " " os " " strconv " " % .10 f \n " , resolve ( parseProblem ( os . Stdin ) ) ) } func parseProblem ( r io . Reader ) ( int , int , int , int ) { const ( initialBufSize = 100000 maxBufSize = 1000000 ) buf := make ( [ ] byte , initialBufSize ) sc := bufio . NewScanner ( r ) sc . Buffer ( buf , maxBufSize ) sc . Split ( bufio . ScanWords ) a , b , h , m := scanInt ( sc ) , scanInt ( sc ) , scanInt ( sc ) , scanInt ( sc ) return a , b , h , m } func resolve ( a , b , h , m int ) float64 { aR := 2 * math . Pi * ( float64 ( h ) / 12.0 + float64 ( m ) / ( 60.0 * 12 ) ) bR := 2 * math . Pi * ( float64 ( m ) / 60.0 ) dR := aR - bR dx := float64 ( b ) - float64 ( a ) * math . Cos ( dR ) dy := float64 ( a ) * math . Sin ( dR ) return math . Sqrt ( dx * dx + dy * dy ) } func scanInt ( sc * bufio . Scanner ) int { sc . Scan ( ) i , _ := strconv . Atoi ( sc . Text ( ) ) return int ( i ) } func scanString ( sc * bufio . Scanner ) string { sc . Scan ( ) return sc . Text ( ) }
package main import ( " " ) func main ( ) { var N , M int fmt . Scan ( & N ) fmt . Scan ( & M ) a := make ( [ ] string , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & a [ i ] ) } b := make ( [ ] string , M ) for i := 0 ; i < M ; i ++ { fmt . Scan ( & b [ i ] ) } ans := " " for i := 0 ; i < N ; i ++ { for j := 0 ; j < N ; j ++ { if ( i + M > N ) || ( j + M > N ) { continue } flag := true for y := 0 ; y < M ; y ++ { for x := 0 ; x < M ; x ++ { if a [ i + y ] [ j + x : j + x + 1 ] != b [ y ] [ x : x + 1 ] { flag = false } } } if flag { ans = " " } } } fmt . Printf ( " \n " , ans ) }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " Scan failed " ) } return r . Text ( ) } f2 := func ( ) [ ] byte { if ! r . Scan ( ) { panic ( " " ) } return r . Bytes ( ) } return f1 , f2 } func readInt ( ) int { return int ( readInt64 ( ) ) } func readInt64 ( ) int64 { i , err := strconv . ParseInt ( readString ( ) , 10 , 64 ) if err != nil { panic ( err . Error ( ) ) } return i } func readFloat64 ( ) float64 { f , err := strconv . ParseFloat ( readString ( ) , 64 ) if err != nil { panic ( err . Error ( ) ) } return f } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a } func sum ( a [ ] int ) int { var ret int for i := range a { ret += a [ i ] } return ret } func sumFloat64 ( a [ ] float64 ) float64 { var ret float64 for i := range a { ret += a [ i ] } return ret } func gcd ( m , n int ) int { for m % n != 0 { m , n = n , m % n } return n } func lcm ( m , n int ) int { return m / gcd ( m , n ) * n }
package main import " " func main ( ) { k , s := 0 , 0 _ , _ = fmt . Scan ( & k , & s ) count := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { z := s - i - j if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { c := make ( [ ] int , 3 ) for i , _ := range c { fmt . Scan ( & c [ i ] ) } if c [ 0 ] == 7 && c [ 1 ] == 5 && c [ 2 ] == 5 { fmt . Println ( " " ) return } if c [ 0 ] == 5 && c [ 1 ] == 7 && c [ 2 ] == 5 { fmt . Println ( " " ) return } if c [ 0 ] == 5 && c [ 1 ] == 5 && c [ 2 ] == 7 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { var A , B , C , min , tmp float64 fmt . Scan ( & A , & B , & C ) min = math . Abs ( A - B ) + math . Abs ( B - C ) tmp = math . Abs ( A - C ) + math . Abs ( C - B ) if min > tmp { min = tmp } tmp = math . Abs ( B - A ) + math . Abs ( A - C ) if min > tmp { min = tmp } tmp = math . Abs ( B - C ) + math . Abs ( C - A ) if min > tmp { min = tmp } tmp = math . Abs ( C - A ) + math . Abs ( A - B ) if min > tmp { min = tmp } tmp = math . Abs ( C - B ) + math . Abs ( B - A ) if min > tmp { min = tmp } fmt . Print ( min ) }
package main import ( " " " math " " % f % f % f % f " " % .20 f \n " , math . Sqrt ( ret ) ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ss := make ( [ ] string , n ) for i := range ss { fmt . Scan ( & ss [ i ] ) } counter := make ( map [ string ] int ) for _ , s := range ss { counter [ s ] ++ } if len ( counter ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for X := 0 ; X <= k ; X ++ { for Y := 0 ; Y <= k ; Y ++ { Z := s - ( X + Y ) if 0 <= Z && Z <= k { count + + } } } fmt . Println ( count ) }
package main import " " func abs ( x int ) int { if x < 0 { return - x } return x } func main ( ) { var t1 , t2 , a1 , a2 , b1 , b2 int fmt . Scan ( & t1 , & t2 , & a1 , & a2 , & b1 , & b2 ) p := ( b1 - a1 ) * t1 q := ( b2 - a2 ) * t2 if ( p > 0 && q > 0 ) || ( p < 0 && q < 0 ) { fmt . Println ( 0 ) } else if ( p > 0 && q < 0 ) || ( p < 0 && q > 0 ) { if abs ( p ) > abs ( q ) { fmt . Println ( 0 ) } else if abs ( p ) < abs ( q ) { diff := abs ( q ) - abs ( p ) ct := 1 + abs ( p ) / diff * 2 if abs ( p ) % diff == 0 { ct -- } fmt . Println ( ct ) } else { fmt . Println ( " " ) } } else { panic ( " " ) } }
package main import " " func calc ( n int ) ( m int ) { m = 1 for { if t := m * 2 ; n >= t { m = t } else { break } } return } func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( calc ( n ) ) }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " os " " bufio " " sort " " math " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 0 min := p [ 0 ] for i := 0 ; i < n ; i ++ { if p [ i ] <= min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) v := N & - N for N - v > 0 { N -= v v = N & - N } fmt . Println ( N ) }
package main import ( " " ) func input ( ) ( int , int , int ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
n = gets . to_i S = gets . chomp . to_s if S . include? ( " P " ) && S . include? ( " W " ) && S . include? ( " G " ) && S . include? ( " Y " ) puts " Four " else puts " Three " end
K , S = gets . split . map ( & :to_i ) puts [ * 0 .. K ] . repeated_permutation ( 2 ) . count { | x , y | z = S - x - y ; 0 <= z && z <= K }
gets t , * ps = gets . split . map & :to_i puts 1 + ps . count { | e | e < t ? t = e : nil }
N , * ps = $< . read . split . map ( & :to_i ) min = ps [ 0 ] ret = 0 ps . each do | p | if p <= min ret += 1 min = p end end p ret
k , s = gets . split ( ' ' ) . map! ( & :to_i ) count = 0 loop_range = ( 0 .. k ) loop_range . each do | x | loop_range . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
K , S = gets . split . map ( & :to_i ) num = 0 ( K + 1 ) . times do | a | ( K + 1 ) . times do | b | res = S - a - b if 0 <= res && res <= K then num += 1 end end end p num
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) counter = 0 b = a . max n . times do | i | if b >= a [ i ] counter += 1 b = a [ i ] end end p counter
input = gets . to_s arrayOfInput = [ ] arrayOfInput << input . split ( " " ) [ 0 ] . to_i arrayOfInput << input . split ( " " ) [ 1 ] . to_i arrayOfInput << input . split ( " " ) [ 2 ] . to_i arrayOfInput << input . split ( " " ) [ 3 ] . to_i if arrayOfInput . include? ( 1 ) && arrayOfInput . include? ( 7 ) && arrayOfInput . include? ( 9 ) && arrayOfInput . include? ( 4 ) then puts " YES " else puts " NO " end
a = [ ] a = gets . split . map ( & :to_i ) cnt = 0 for i in 0 .. a [ 0 ] for j in 0 .. a [ 0 ] if a [ 1 ] - i - j >= 0 && i <= a [ 0 ] && j <= a [ 0 ] && ( a [ 1 ] - i - j ) <= a [ 0 ] cnt = cnt + 1 end end end puts cnt
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | i | ( 0 .. [ S - i , K ] . min ) . each do | j | count += 1 if S - i - j <= K end end puts count
gets puts ( gets . split . include? ' Y ' ) ? ' Four ' : ' Three '
gets ; puts gets . split . uniq . size == 3 ? " Three " : " Four "
k , s = gets . to_s . chomp . split ( ' ' ) . map ( & :to_i ) x = 0 y = 0 z = 0 result = 0 while x <= k y = 0 while y <= k z = s - x - y if z >= 0 && z <= k && x + y + z == s result += 1 end y += 1 end x += 1 end puts result
n = gets . to_i s = gets . split . map! { | i | i . to_i } max = n + 1 ans = 0 for i in 0 .. n - 1 if s [ i ] < max ans += 1 max = s [ i ] end end puts ans
a , b , c , d , e , k = 6 . times . map { gets . to_i } ; puts e - a <= k ? " Yay! " : " :( "
cc = [ ] 3 . times { cc << gets . split . map ( & :to_i ) } aa = [ 0 , 0 , 0 ] bb = [ 0 , 0 , 0 ] count = 0 [ 0 , 1 , 2 ] . each do | i | [ 0 , 1 , 2 ] . each do | j | aa [ i ] = cc [ i ] [ 0 ] - bb [ 0 ] bb [ j ] = cc [ 0 ] [ j ] - aa [ 0 ] count += 1 if cc [ i ] [ j ] == aa [ i ] + bb [ j ] end end puts count == 9 ? ' Yes ' : ' No '
puts gets . split . join . chars . sort == %w( 1 4 7 9 ) ? ' YES ' : ' NO '
puts [ :Three , :Four ] [ ` dd ` . split . uniq . size - 4 ]
K , S = gets . split . map ( & :to_i ) x , y , z = 0 k = K + 1 ans = 0 k . times do | x | k . times do | y | z = S - x - y ans += 1 if 0 <= z && z <= K end end puts ans
* a , b = ` dd ` . split . map ( & :to_i ) puts a . max - a . min > b ? ' :( ' : ' Yay! '
n = gets . to_i p = gets . split . map & :to_i min = 200001 r = 0 for i in 0 ... n if min > p [ i ] min = p [ i ] r += 1 end end p r
a , b , c , d = gets . chomp . split ( ' ' ) . map ( & :to_i ) h = { } h [ a ] = true h [ b ] = true h [ c ] = true h [ d ] = true if h [ 1 ] && h [ 9 ] && h [ 7 ] && h [ 4 ] puts ' YES ' else puts ' NO ' end
limit , sum = gets . chomp . split . map ( & :to_i ) cnt = 0 ( 0 .. limit ) . each do | a | ( 0 .. limit ) . each do | b | c = sum - a - b cnt += 1 if 0 <= c && c <= limit end end puts cnt
N = STDIN . gets . chomp . to_i P = STDIN . gets . split ( ' ' ) . map { | s | s . to_i } ans = 0 min = [ ] N . times do | i | if i == 0 min [ i ] = P [ 0 ] else min [ i ] = [ min [ i - 1 ] , P [ i ] ] . min end if P [ i ] <= min [ i ] ans += 1 end end puts ans
n = gets . chomp . to_i s = gets . chomp . split ( ' ' ) puts s . uniq . size == 3 ? ' Three ' : ' Four '
a , b = gets . split . map ( & :to_i ) ; p a <=> - b
n = gets . to_i m = gets . chomp . split . uniq! . sort! . join ( " " ) if m == " GPWY " puts " Four " elsif m == " GPW " puts " Three " end
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a > k puts ' :( ' else puts ' Yay! ' end
K , S = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. K do for y in 0 .. K do if S - ( x + y ) <= K && S - ( x + y ) >= 0 count = count + 1 end end end puts count
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) count = 0 minimal = array . first ( 1 ... n ) . each do | y | if minimal < array [ y ] count += 1 else minimal = array [ y ] end end puts n - count
def aa a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if ( a - b ) . abs <= k and ( a - c ) . abs <= k and ( a - d ) . abs <= k and ( a - e ) . abs <= k and ( b - c ) . abs <= k and ( b - d ) . abs <= k and ( b - e ) . abs <= k and ( c - d ) . abs <= k and ( c - e ) . abs <= k and ( d - e ) . abs <= k puts ' Yay! ' else puts ' :( ' end end aa
n = gets . split . map & :to_i puts n . include? ( 1 ) && n . include? ( 7 ) && n . include? ( 9 ) && n . include? ( 4 ) ? :YES : :NO
require ' prime ' include Math define_method :max , -> ( a , b ) { a > b ? a : b } define_method :min , -> ( a , b ) { a < b ? a : b } define_method :swap , -> ( a , b ) { a , b = b , a } define_method :gi , -> ( ) { gets . split . map ( & :to_i ) } define_method :gs , -> ( ) { gets . chomp } define_method :gc , -> ( ) { gets . chomp . split ( ' ' ) } define_method :gif , -> ( ) { gets . to_i } define_method :pr , -> ( num ) { num . prime_division } define_method :darray , -> ( size1 , size2 , init = nil ) { Array . new ( size1 ) { Array . new ( size2 ) { init } } } define_method :array , -> ( size , init = nil ) { Array . new ( size ) { init } } define_method :putall , -> ( obj ) { obj . each { | o | puts o } } define_method :repl , -> ( st , en , & block ) { st . upto en do | i | block . call ( i ) end } define_method :rep , -> ( num , & block ) { num . times do | i | block . call ( i ) end } n = gi count = 0 rep n [ 0 ] + 1 do | x | rep n [ 0 ] + 1 do | y | count += 1 if n [ 1 ] - x - y >= 0 && n [ 1 ] - x - y <= n [ 0 ] end end puts count
io = STDIN n = io . gets . to_i s = io . gets . chomp . split ( " " ) if s . uniq . size == 4 puts ' Four ' else puts ' Three ' end
n = gets . chomp . split . map ( & :to_i ) . sort! x = " 1 9 7 4 " . chomp . split . map ( & :to_i ) . sort! if n == x then puts " YES " else puts " NO " end
$t1 , $t2 = gets . chomp . split . map ( & :to_i ) $a1 , $a2 = gets . chomp . split . map ( & :to_i ) $b1 , $b2 = gets . chomp . split . map ( & :to_i ) if $a1 * $t1 + $a2 * $t2 == $b1 * $t1 + $b2 * $t2 puts " infinity " exit 0 end def f ( t ) c = t / 2 if t % 2 == 0 a = $a1 * $t1 * c + $a2 * $t2 * c b = $b1 * $t1 * c + $b2 * $t2 * c aa = a + $a1 * $t1 bb = b + $b1 * $t1 return false if a == b if a < b return aa >= bb else return aa <= bb end else a = $a1 * $t1 * ( c + 1 ) + $a2 * $t2 * c b = $b1 * $t1 * ( c + 1 ) + $b2 * $t2 * c aa = a + $a2 * $t2 bb = b + $b2 * $t2 return false if a == b if a < b return aa >= bb else return aa <= bb end end end if not f ( 1 ) puts " 0 " exit 0 end ok = 1 ng = 1 << 60 while ok + 1 < ng x = ( ok + ng ) / 2 if f ( x ) ok = x else ng = x end end puts ok
_ = $stdin . gets kinds = $stdin . gets . chomp . split ( ' ' ) . uniq . length print kinds == 3 ? ' Three ' : ' Four '
a = [ ] 5 . times do a . push gets . chomp . to_i end k = gets . chomp . to_i 5 . times do | i | ( ( i + 1 ) .. 4 ) . each do | j | if ( a [ i ] - a [ j ] ) . abs > k puts ' :( ' exit end end end puts ' Yay! '
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) end end puts count
d = [ ] 5 . times do d << gets . to_i end k = gets . to_i d . combination ( 2 ) do | c | if ( c [ 0 ] - c [ 1 ] ) . abs > k puts ' :( ' exit end end puts ' Yay! '
k , s = gets . split . map ( & :to_i ) exit 1 if k < 2 || k > 2500 || s < 0 || s > 3 * k puts ( 0 .. k ) . map { | x | [ [ s - x , k ] . min - [ s - x - k , 0 ] . max + 1 , 0 ] . max } . inject ( & :+ )
N = gets . to_i S = gets . chomp . split if S . uniq . size == 3 puts ' Three ' else puts ' Four ' end
DBG = true a = gets . split . map { | x | x . to_i } x = a . include? ( 1 ) && a . include? ( 7 ) && a . include? ( 9 ) && a . include? ( 4 ) if x print ' YES ' else print ' NO ' end
def is_multiple_of_3? ( array ) sum = 0 array . each do | line | sum += line . inject ( :+ ) end sum % 3 == 0 end def have_same_diffs? ( array ) diffs = [ ] array . each do | line | diffs << [ 0 , line [ 1 ] - line [ 0 ] , line [ 2 ] - line [ 0 ] ] end diffs [ 0 ] == diffs [ 1 ] && diffs [ 0 ] == diffs [ 2 ] end grid = [ ] 3 . times do grid << gets . split . map ( & :to_i ) end flag = true flag = is_multiple_of_3? ( grid ) if flag flag = have_same_diffs? ( grid ) if flag flag = have_same_diffs? ( grid . transpose ) if flag puts flag ? " Yes " : " No "
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x next if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
n = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 min_num = 200001 n . times do i = arr . shift if min_num >= i count += 1 min_num = i end end print ( count )
k , s = gets . split . map ( & :to_i ) count = 0 result = [ ] for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if z <= k && z >= 0 count += 1 end end end p count
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | t = s - i - j if 0 <= t && t <= k cnt += 1 end end end puts cnt
def f c c . map! { | d | m = d . min d . map { | t | t -= m } } end c = 3 . times . map { gets . split . map & :to_i } c = f c c = f c . transpose puts ( c . all? { | d | d . all? { | t | t == 0 } } ) ? ' Yes ' : ' No '
time = gets array = gets . split ( " " ) . map ( & :to_i ) m = 2000000 i = 0 array . each do | n | if n < m i += 1 m = n end end puts i
def ok ( c ) a = [ 0 ] * 3 b = [ 0 ] * 3 0 . upto ( 100 ) do | i | a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] f = true 3 . times do | i | 3 . times do | j | f = false if c [ i ] [ j ] != a [ i ] + b [ j ] end end return true if f end false end puts ok ( 3 . times . map { gets . split . map & :to_i } ) ? :Yes : :No
n = gets . to_i x = gets . chomp . split y = x . uniq . count if y == 4 then puts " Four " else puts " Three " end
n = gets . chop . to_i arr = gets . split . map res = [ 0 , 0 , 0 , 0 ] cnt = 0 arr . each do | c | if c == ' P ' && res [ 0 ] == 0 cnt += 1 res [ 0 ] = 1 elsif c == ' W ' && res [ 1 ] == 0 cnt += 1 res [ 1 ] = 1 elsif c == ' G ' && res [ 2 ] == 0 cnt += 1 res [ 2 ] = 1 elsif c == ' Y ' && res [ 3 ] == 0 cnt += 1 res [ 3 ] = 1 end end puts cnt == 3 ? ' Three ' : ' Four '
puts * $< . drop ( 1 ) . first . split . uniq . length == 3 ? " Three " : " Four "
def count_low_elements ( n , p ) count = 0 min = n + 1 ( 0 ... n ) . each do | i | if p [ i ] < min count += 1 min = p [ i ] end end count end n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) puts count_low_elements ( n , p )
T1 , T2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) A1 , A2 , B1 , B2 = a1 > b1 ? [ a1 , a2 , b1 , b2 ] : [ b1 , b2 , a1 , a2 ] XA = A1 * T1 + A2 * T2 XB = B1 * T1 + B2 * T2 if XA > XB ans = " 0 " elsif XA == XB ans = " infinity " else XM = ( A1 - B1 ) * T1 ans = ( XM / ( XB - XA ) * 2 + ( XM %( XB-XA ) == 0 ? 0 : 1 ) ) . to_s end puts ans
k , s = gets . split . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do count += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts count
K , S = gets . split . map ( & :to_i ) ans = 0 0 . step ( K ) do | x | 0 . step ( K ) do | y | ans += 1 if ( S - x - y ) . between? ( 0 , K ) end end puts ans
n = gets . to_i p = gets . split . map ( & :to_i ) min = 10 ** 6 ans = 0 p . each do | c | if c <= min ans += 1 min = c end end puts ans
_ = gets x , y = 0 , 0 gets . chomp . each_char do | c | dx , dy = ( ?A .. ?M ) === c ? [ 0 , 1 ] : ( ?N .. ?Z ) === c ? [ 0 , - 1 ] : ( ?a .. ?m ) === c ? [ 1 , 0 ] : [ - 1 , 0 ] x += dx y += dy end s = ( x < 0 ? ?z * - x : ?a * x ) + ( y < 0 ? ?Z * - y : ?A * y ) p s . size puts s
INF = 1 << 30 loop do n = gets . to_i break if n == 0 ctys = Array . new ( n ) { gets . strip } oks = Array . new ( n ) { true } for i in ( 0 ... n ) for j in ( 0 ... n ) if i != j && oks [ j ] && ctys [ j ] . include? ( ctys [ i ] ) oks [ i ] = false end end end ctys = ( 0 ... n ) . select { | i | oks [ i ] } . map { | i | ctys [ i ] } n = ctys . length plens = Array . new ( n ) { Array . new ( n ) { 0 } } for i in ( 0 ... n ) ci = ctys [ i ] li = ci . length for j in ( 0 ... n ) next if i == j cj = ctys [ j ] lj = cj . length k = ( li < lj ) ? li : lj while k > 0 break if ci [ li - k , k ] == cj [ 0 , k ] k -= 1 end plens [ i ] [ j ] = lj - k end end dp = Array . new ( 1 << n ) { Array . new ( n ) { INF } } for i in ( 0 ... n ) dp [ 1 << i ] [ i ] = ctys [ i ] . length end for bits in ( 1 ... ( 1 << n ) ) for i in ( 0 ... n ) bi = 1 << i if ( bits & bi ) != 0 for j in ( 0 ... n ) bj = 1 << j if ( bits & bj ) == 0 bitsj = bits | bj ndp = dp [ bits ] [ i ] + plens [ i ] [ j ] dp [ bitsj ] [ j ] = ndp if dp [ bitsj ] [ j ] > ndp end end end end end puts dp [ ( 1 << n ) - 1 ] . min end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i answer = " Yay! " array = [ a , b , c , d , e ] array . combination ( 2 ) do | first , second | if second - first > k answer = " :( " end end puts answer
a0 = gets . chop . split . map ( & :to_i ) . take ( 3 ) a1 = gets . chop . split . map ( & :to_i ) . take ( 3 ) a2 = gets . chop . split . map ( & :to_i ) . take ( 3 ) if a0 [ 0 ] - a0 [ 1 ] == a1 [ 0 ] - a1 [ 1 ] && a2 [ 0 ] - a2 [ 1 ] == a0 [ 0 ] - a0 [ 1 ] && a0 [ 1 ] - a0 [ 2 ] == a1 [ 1 ] - a1 [ 2 ] && a2 [ 1 ] - a2 [ 2 ] == a0 [ 1 ] - a0 [ 2 ] && a0 [ 2 ] - a0 [ 0 ] == a1 [ 2 ] - a1 [ 0 ] && a2 [ 2 ] - a2 [ 0 ] == a0 [ 2 ] - a0 [ 0 ] && a0 [ 0 ] - a1 [ 0 ] == a0 [ 1 ] - a1 [ 1 ] && a0 [ 2 ] - a1 [ 2 ] == a0 [ 0 ] - a1 [ 0 ] && a1 [ 0 ] - a2 [ 0 ] == a1 [ 1 ] - a2 [ 1 ] && a1 [ 2 ] - a2 [ 2 ] == a1 [ 0 ] - a2 [ 0 ] && a2 [ 0 ] - a0 [ 0 ] == a2 [ 1 ] - a0 [ 1 ] && a2 [ 2 ] - a0 [ 2 ] == a2 [ 0 ] - a0 [ 0 ] puts " Yes " else puts " No " end
N = gets . strip . split . map ( & :to_i ) N . sort! if N [ 0 ] == 1 && N [ 1 ] == 4 && N [ 2 ] == 7 && N [ 3 ] == 9 puts ' YES ' else puts ' NO ' end
gets numbers = gets . split . map ( & :to_i ) lastNumber = numbers . max matchCount = 0 numbers . each do | number | if lastNumber >= number matchCount += 1 lastNumber = number end end puts matchCount
eval " T,U,A,X,B,Y= " + ` dd ` . split * ?, x = ( A - B ) * T y = x + ( X - Y ) * U puts y == 0 ? :infinity : ( s = - x / y ; s < 0 ? 0 : s * 2 + ( x % y != 0 ? 1 : 0 ) )
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | c = s - x - y if c >= 0 && c <= k cnt += 1 end end end puts cnt
N = gets . to_i P = gets . split ( ' ' ) . map ( & :to_i ) count = N lowest = P [ 0 ] ( 1 .. ( N - 1 ) ) . each do | i | now = count if lowest < P [ i ] count -= 1 end lowest = P [ i ] if now == count end puts count
a = [ ] 5 . times { | n | a [ n ] = gets . to_i } s = a . sort max = gets . to_i if s [ 4 ] - s [ 0 ] > max then puts " :( " else puts " Yay! " end
n = gets . to_i sequence = gets . split . map ( & :to_i ) result = 0 min_num = 2 * 10 ** 5 sequence . each do | num | min_num = [ min_num , num ] . min result += 1 if min_num >= num end puts result
n = gets . split . map ( & :to_i ) . sort puts n == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO "
gets r = gets . to_i - 1 x = 1 $< . each { | _ | e = _ . to_i if e == x + 1 x += 1 elsif e != x r += ( e - 1 ) / ( x + 1 ) end } p r
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
n = gets . chomp . to_i s = gets . chomp . split ( " " ) for i in 0 .. s . length if s [ i ] == " Y " print ( " Four " ) exit ( ) end end print ( " Three " )
puts gets . split . sort . join . to_i == 1479 ? :YES : :NO
gets a = gets . split ( ' ' ) . map ( & :to_i ) min = a [ 0 ] n = 0 a . each do | pi , i | next if min < pi n += 1 min = pi end puts n
k , s = gets . split . map ( & :to_i ) sum = 0 0 . upto ( k ) do | i | 0 . upto ( [ k , s - i ] . min ) do | j | sum += 1 if s - i - j <= k end end p sum
N = gets . to_i P = gets . split . map ( & :to_i ) min = P [ 0 ] cnt = 0 N . times do | i | if P [ i ] <= min cnt += 1 min = P [ i ] end end puts cnt
c = Array . new 3 . times { c . push ( gets . chomp . split ( " " ) . map ( & :to_i ) ) } a1 = 0 b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a2 != ( c [ 1 ] [ 1 ] - b2 ) || a2 != ( c [ 1 ] [ 2 ] - b3 ) then puts " No " exit end if a3 != ( c [ 2 ] [ 1 ] - b2 ) || a3 != ( c [ 2 ] [ 2 ] - b3 ) then puts " No " exit end puts " Yes "
require ' pp ' C = Array . new ( 3 ) { Array . new ( 3 ) } C [ 0 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } C [ 1 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } C [ 2 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } flg = true i = 1 1 . upto ( 2 ) { | i | flg = flg && C [ 0 ] [ 0 ] - C [ i ] [ 0 ] == C [ 0 ] [ 1 ] - C [ i ] [ 1 ] && C [ 0 ] [ 0 ] - C [ i ] [ 0 ] == C [ 0 ] [ 2 ] - C [ i ] [ 2 ] } 1 . upto ( 2 ) { | j | flg = flg && C [ 0 ] [ 0 ] - C [ 0 ] [ j ] == C [ 1 ] [ 0 ] - C [ 1 ] [ j ] && C [ 0 ] [ 0 ] - C [ 0 ] [ j ] == C [ 2 ] [ 0 ] - C [ 2 ] [ j ] } if ( flg ) puts " Yes " else puts " No " end
N = gets . to_i P = gets . split . map ( & :to_i ) res = 1 min = P [ 0 ] N . times do | i | next if i == 0 next if min < P [ i ] res += 1 min = P [ i ] if P [ i ] < min end puts res
C = [ ] 3 . times { C << gets . chomp . split ( " " ) . map ( & :to_i ) } s0 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] s1 = C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] s2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] puts s0 == s1 && s1 == s2 ? ' Yes ' : ' No '
counter = gets . to_i target = gets . chomp . split ( ) . map ( & :to_i ) min = 0 answer = 0 counter . times do | count | if count == 0 || min > target [ count ] min = target [ count ] answer = answer + 1 end end puts answer
n = gets . to_i four = false gets . split ( ' ' ) . each do | c | four = true if c == ' Y ' end if four then puts ' Four ' else puts ' Three ' end
h , r = gets . split . map ( & :to_i ) if h >= 0 puts ' 1 ' elsif h + r == 0 puts ' 0 ' elsif h + r < 0 puts ' -1 ' else puts ' 1 ' end
class InputLine def self . to_s gets . chomp end def self . to_i InputLine . to_s . to_i end def self . to_f InputLine . to_s . to_f end def self . to_sa InputLine . to_s . split ( ' ' ) end def self . to_ia InputLine . to_sa . map ( & :to_i ) end def self . to_fa InputLine . to_sa . map ( & :to_f ) end end def main ( argv ) n = InputLine . to_i x = InputLine . to_ia a = [ 1e+8 . to_i ] * ( n + 1 ) n . times do | i | a [ i + 1 ] = [ x [ i ] , a [ i ] ] . min end c = 0 n . times do | i | c += 1 if a [ i ] > x [ i ] end puts c . to_s end if self . to_s == ' main ' then main ( ARGV ) end
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
k , s = gets . split . map & :to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if x + y <= s && s - x - y <= k end end puts cnt
input = gets . chomp . split ( " " ) K = input [ 0 ] . to_i S = input [ 1 ] . to_i X = Y = ( 0 .. K ) . to_a c = 0 X . each do | tx | s1 = S - tx if s1 > ( 2 * K ) then next end Y . each do | ty | s2 = s1 - ty if ( s2 > K || s2 < 0 ) then next end c += 1 end end puts c
k , s = gets . split ( " \s " ) . map { | s | s . to_i } kai = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | if s - x - y >= 0 && s - x - y <= k then kai += 1 end end end puts kai
N , K = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. N ) . each do | e | ( 0 .. N ) . each do | ee | if K - e - ee <= N && K - e - ee >= 0 count += 1 end end end puts count
n = gets . split . map ( & :to_i ) . sort if n == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] def check ( a , b , c ) 3 . times do | i | 3 . times do | j | if c [ i ] [ j ] != a [ j ] + b [ i ] return end end end puts " Yes " exit end 0 . upto ( 100 ) do | i | 0 . upto ( 100 ) do | j | if i + j == c [ 0 ] [ 0 ] a = j , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i if c [ 1 ] [ 0 ] - j >= 0 && c [ 2 ] [ 0 ] - j >= 0 b = i , c [ 1 ] [ 0 ] - j , c [ 2 ] [ 0 ] - j check ( a , b , c ) end end end end puts " No "
N = gets . to_i p = gets . split . map ( & :to_i ) minel = Float :: INFINITY count = 0 N . times do | i | if p [ i ] < minel minel = p [ i ] count += 1 end end puts count
gets r = gets . to_i - 1 x = 2 $< . each { | _ | e = _ . to_i if e == x x += 1 end r += ( e - 1 ) / x } p r
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) min = ( 2 * 10 ** 5 ) + 1 count = 0 P . each { | i | if i < min count += 1 min = i end } puts count
c = [ 0 , 0 , 0 ] for i in 0 .. 2 c [ i ] = gets . split . map & :to_i end b = c [ 0 ] a = [ 0 , 0 , 0 ] for i in 0 .. 2 a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end ok = 1 for i in 0 .. 2 for j in 0 .. 2 ok &&= a [ i ] + b [ j ] == c [ i ] [ j ] end end puts ( ok ?' Yes ' : ' No ' )
grid = readlines . map { | line | line . chomp . split . map ( & :to_i ) } d1 = grid [ 0 ] [ 0 ] - grid [ 1 ] [ 0 ] d2 = grid [ 0 ] [ 1 ] - grid [ 1 ] [ 1 ] d3 = grid [ 0 ] [ 2 ] - grid [ 1 ] [ 2 ] d4 = grid [ 1 ] [ 0 ] - grid [ 2 ] [ 0 ] d5 = grid [ 1 ] [ 1 ] - grid [ 2 ] [ 1 ] d6 = grid [ 1 ] [ 2 ] - grid [ 2 ] [ 2 ] d7 = grid [ 0 ] [ 0 ] - grid [ 0 ] [ 1 ] d8 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 2 ] d9 = grid [ 1 ] [ 0 ] - grid [ 1 ] [ 1 ] d10 = grid [ 1 ] [ 1 ] - grid [ 1 ] [ 2 ] d11 = grid [ 2 ] [ 0 ] - grid [ 2 ] [ 1 ] d12 = grid [ 2 ] [ 1 ] - grid [ 2 ] [ 2 ] if d1 == d2 && d1 == d3 && d4 == d5 && d4 == d6 && d7 == d9 && d7 == d11 && d8 == d10 && d8 == d12 puts ( ' Yes ' ) else puts ( ' No ' ) end
N = gets . to_i nums = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 nums . each do | ai | if ai < min min = ai ans += 1 end end p ans
def ascan ; gets . split . map ( & :to_i ) ; end gets ; m = gets . chomp . split . sort . uniq . size puts [ " Zero " , " One " , " Two " , " Three " , " Four " ] [ m ]
n = gets . to_i s = gets . split puts s . uniq . size == 3 ? " Three " : " Four "
n = gets . to_i p = gets . split . map & :to_i f = 0 com = p [ 0 ] p . each_with_index do | el , i | next if i == 0 f += 1 if el > com com = [ el , com ] . min end p n - f
n = gets . to_i s = gets . split puts s . uniq . size == 3 ? :Three : :Four
arg = gets . chomp arg = arg . split ( " " ) k = arg [ 0 ] . to_i s = arg [ 1 ] . to_i numPettern = 0 if k * 3 == s puts 1 exit end ( 0 .. k ) . each do | x | if x + k + k < s next end if x == s numPettern += 1 next end ( 0 .. k ) . each do | y | if x + y + k < s next end if x + y > s break end if x + y == s numPettern += 1 break end z = s - x - y if z <= s numPettern += 1 end end end puts numPettern
n = gets . to_i p = gets . split . map ( & :to_i ) count = 0 min = n + 1 n . times do | i | if p [ i ] < min count += 1 min = p [ i ] end end puts count
n = gets . chomp . split ( ' ' ) . map ( & :to_i ) if n . include? ( 1 ) && n . include? ( 7 ) && n . include? ( 9 ) && n . include? ( 4 ) puts ' YES ' else puts ' NO ' end
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) if ( t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] == t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] ) puts " infinity " exit end if ( a [ 0 ] > b [ 0 ] ) a , b = b , a end u = t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] v = t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] if ( v > u ) puts 0 exit end ok = 0 ng = 2 ** 62 while ( ng - ok > 1 ) mid = ( ok + ng ) / 2 ; if ( mid * u + t [ 0 ] * a [ 0 ] < mid * v + t [ 0 ] * b [ 0 ] ) ok = mid else ng = mid end end ans = ok * 2 + 1 if ng * u + t [ 0 ] * a [ 0 ] == ng * v + t [ 0 ] * b [ 0 ] ans += 1 end puts ans
c = 3 . times . map { gets . split . map ( & :to_i ) } d = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] e = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] if c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == d && c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] == e && c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == d && c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] == e puts " Yes " else puts " No " end
N = gets . to_i S = gets . chomp pp = S . count ( " P " ) ww = S . count ( " W " ) gg = S . count ( " G " ) yy = S . count ( " Y " ) if pp >= 1 && ww >= 1 && gg >= 1 && yy == 0 puts ( " Three " ) elsif pp >= 1 && ww >= 1 && gg >= 1 && yy >= 1 puts ( " Four " ) end
inputs = [ ] 5 . times do inputs << gets . chomp . to_i end k = gets . chomp . to_i puts inputs [ - 1 ] - inputs [ 0 ] > k ? " :( " : " Yay! "
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end h . delete ( " " ) if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
c = Array . new ( 3 ) { gets . chomp . split . map ( & :to_i ) } a = Array . new ( 3 , 0 ) b = Array . new ( 3 , 0 ) 0 . step ( 2 ) do | j | i = j b [ j ] = c [ 0 ] [ j ] - a [ 0 ] a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end 0 . step ( 2 ) do | i | 0 . step ( 2 ) do | j | if c [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] puts " Yes " else puts " No " end
X = 6 . times . map { gets . to_i } if X [ 4 ] - X [ 0 ] <= X [ 5 ] puts " Yay! " else puts " :( " end
a , b , c , d , e , f , g , h , i = 3 . times . flat_map { gets . split . map ( & :to_i ) } puts a - b == d - e && d - e == g - h && b - c == e - f && e - f == h - i ? ' Yes ' : ' No '
n = gets . to_i ps = gets . split . map ( & :to_i ) mn = n * 2 cnt = 0 ps . each do | q | if mn >= q cnt += 1 mn = q end end p cnt
puts gets . split . sort . join . to_i == 1479 ? :YES : :NO
n = gets . to_i d = gets . chomp . split . map ( & :to_i ) count = d [ 0 ] res = 0 d . each do | i | if count >= i res += 1 count = i end break if count == 1 end puts res
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a <= k puts " Yay! " else puts " :( " end
input = gets . chomp . split ( ' ' ) k = input [ 0 ] . to_i s = input [ 1 ] . to_i x = k + 1 y = k + 1 count = 0 x . times do | x_a | y . times do | y_a | z = s - x_a - y_a if 0 <= z && z <= k count += 1 end end end p count
k , s = gets . split . map ( & :to_i ) cnt = 0 k . next . times do | i | k . next . times do | j | break if i + j > s cnt += 1 if s - i - j <= k end end puts cnt
antennas = 5 . times . map { gets . to_i } k = gets . to_i puts antennas [ 4 ] - antennas [ 0 ] > k ? ' :( ' : ' Yay! '
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . chomp . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end N = get_int S = gets . chomp . split if S . to_set . length == 4 puts ' Four ' else puts ' Three ' end
c = 3 . times . map { gets . split . map ( & :to_i ) } ans = true 3 . times do | i | c [ i ] [ 1 ] -= c [ i ] [ 0 ] c [ i ] [ 2 ] -= c [ i ] [ 0 ] end for i in 1 .. 2 ans = false if c [ 0 ] [ i ] != c [ 1 ] [ i ] || c [ 0 ] [ i ] != c [ 2 ] [ i ] end puts ans ? " Yes " : " No "
list = gets . chomp . split ( ' ' ) k = list [ 0 ] . to_i s = list [ 1 ] . to_i count = 0 for l in 0 .. k do x = l if x > s then break end for m in 0 .. k do y = m subsum = x + y z = s - subsum if subsum > s then break end if z >= 0 && z <= k then count += 1 end end end p count
T1 , T2 , a1 , a2 , b1 , b2 = ` dd ` . split . map & :to_i v1 = a1 - b1 v2 = a2 - b2 if v1 > 0 v1 = - v1 v2 = - v2 end d = v1 * T1 D = d + v2 * T2 if D == 0 puts " infinity " exit end if ( d > 0 ) == ( D > 0 ) p 0 exit end N = ( d . abs - 1 ) / D . abs + 1 p 2 * N + ( N * D . abs + d > 0 ? 0 : 1 ) - 1
_ = gets . to_i arare = gets . chomp . split case arare . uniq . size when 3 then puts " Three " when 4 then puts " Four " end
T = gets . split . map ( & :to_i ) A = gets . split . map ( & :to_i ) B = gets . split . map ( & :to_i ) b = ( T [ 0 ] * A [ 0 ] + T [ 1 ] * A [ 1 ] ) - ( T [ 0 ] * B [ 0 ] + T [ 1 ] * B [ 1 ] ) if b == 0 puts " infinity " else a = T [ 0 ] * ( A [ 0 ] - B [ 0 ] ) if a * b > 0 puts 0 else c = ( a / b ) * - 2 if a % b != 0 c -= 1 end puts c end end
def solve ( c ) 2 . times do | i | d = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] 1 . upto ( 2 ) do | j | if c [ i + 1 ] [ j ] - c [ i ] [ j ] != d return false end end end 2 . times do | j | d = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] 1 . upto ( 2 ) do | i | if c [ i ] [ j + 1 ] - c [ i ] [ j ] != d return false end end end return true end c = Array . new ( 3 ) 3 . times do | i | c [ i ] = gets . split . map ( & :to_i ) end puts solve ( c ) ? " Yes " : " No "
a , b , c , d , e , k = readlines . map ( & :to_i ) puts e - a <= k ? " Yay! " : " :( "
css = Array . new ( 3 ) { gets . split . map ( & :to_i ) } ans = [ 0 , 1 ] . all? do | i | Array . new ( 3 ) { | j | css [ i + 1 ] [ j ] - css [ i ] [ j ] } . uniq . size == 1 end puts ans ? ' Yes ' : ' No '
k , s = gets . split . map & :to_i ; p [ * 0 .. k ] . repeated_permutation ( 2 ) . count { | x , y | z = s - x - y ; 0 <= z && z <= k }
N = gets . chomp . to_i puts gets . chomp . split . uniq . count == 3 ? " Three " : " Four "
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ; ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if 0 <= z && z <= k ans = ans + 1 end y = y + 1 end x = x + 1 end puts ( ans )
c0 = gets . chomp . split ( " " ) . map ( & :to_i ) c1 = gets . chomp . split ( " " ) . map ( & :to_i ) c2 = gets . chomp . split ( " " ) . map ( & :to_i ) a01 = c0 [ 0 ] - c0 [ 1 ] a02 = c0 [ 0 ] - c0 [ 2 ] a12 = c0 [ 1 ] - c0 [ 2 ] if c1 [ 0 ] - c1 [ 1 ] != a01 then puts " No " exit end if c1 [ 0 ] - c1 [ 2 ] != a02 then puts " No " exit end if c1 [ 1 ] - c1 [ 2 ] != a12 then puts " No " exit end if c2 [ 0 ] - c2 [ 1 ] != a01 then puts " No " exit end if c2 [ 0 ] - c2 [ 2 ] != a02 then puts " No " exit end if c2 [ 1 ] - c2 [ 2 ] != a12 then puts " No " exit end b01 = c0 [ 0 ] - c1 [ 0 ] b02 = c0 [ 0 ] - c2 [ 0 ] b12 = c1 [ 0 ] - c2 [ 0 ] if c0 [ 1 ] - c1 [ 1 ] != b01 then puts " No " exit end if c0 [ 1 ] - c2 [ 1 ] != b02 then puts " No " exit end if c1 [ 1 ] - c2 [ 1 ] != b12 then puts " No " exit end if c0 [ 2 ] - c1 [ 2 ] != b01 then puts " No " exit end if c0 [ 2 ] - c2 [ 2 ] != b02 then puts " No " exit end if c1 [ 2 ] - c2 [ 2 ] != b12 then puts " No " exit end puts " Yes "
as = [ ] 5 . times { as << gets . to_i } k = gets . to_i print ( as . max - as . min ) > k ? " :( " : " Yay! "
n = gets . to_i s = gets . split cnt = 0 ( 0 .. n - 1 ) . each do | i | cnt += 1 if s [ i ] == ' Y ' end puts cnt > 0 ? ' Four ' : ' Three '
h , r = gets . chomp . split . map ( & :to_i ) puts ( h > - r ) ? 1 : ( h == - r ) ? 0 : - 1
puts ( gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO " )
n = gets . to_i exist = gets . include? ( " Y " ) if exist puts " Four " else puts " Three " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for i in 0 .. k for j in 0 .. k if s - i - j <= k && s - i - j >= 0 count += 1 end end end puts count
ae = [ ] 5 . times { ae << gets . to_i } k = gets . to_i puts ae [ 4 ] - ae [ 0 ] > k ? ' :( ' : ' Yay! '
def C ( n , k ) k = n - k if n - k < k k . times . inject ( 1 ) { | s , i | s * ( n - i ) / ( i + 1 ) } end K , S = gets . split . map ( & :to_i ) ans = ( 0 .. 3 ) . inject ( 0 ) do | t , i | sign = i . even? ? 1 : - 1 n = S + 3 - ( K + 1 ) * i - 1 n >= 2 ? t + sign * C ( n , 2 ) * C ( 3 , i ) : t end puts ans
h , w = gets . chomp . split . map ( & :to_i ) a = [ ] h . times { a << gets . chomp . split . map ( & :to_i ) } min = nil for y in 0 ... h for x in 0 ... w dist = 0 for y2 in 0 ... h for x2 in 0 ... w dist += [ ( y2 - y ) . abs , ( x2 - x ) . abs ] . min * a [ y2 ] [ x2 ] end end min = dist if min . nil? || min > dist end end puts min
N , * P = $< . read . split . map ( & :to_i ) p P . inject ( [ 0 , P [ 0 ] ] ) { | ( sum , min ) , p | p <= min ? [ sum + 1 , p ] : [ sum , min ] } [ 0 ]
if gets . chomp . split . map ( & :to_i ) . sort . join == ' 1479 ' puts ' YES ' else puts ' NO ' end
d = [ ] for i in 1 .. 3 do b = gets d << b . split end c = " " a = [ ] d . each { | hai | a << hai . map ( & :to_i ) } for j in 0 .. 1 do for k in j ... 2 do if ! ( ( a [ j ] [ 0 ] - a [ k + 1 ] [ 0 ] == a [ j ] [ 1 ] - a [ k + 1 ] [ 1 ] ) && ( a [ j ] [ 0 ] - a [ k + 1 ] [ 0 ] == a [ j ] [ 2 ] - a [ k + 1 ] [ 2 ] ) ) then c = " No " isBreak = true break ; else c = " Yes " end end break if isBreak end print c
module HinaArare def solve n = gets . to_i s = gets . split ( " " ) for i in 1 .. n do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare puts HinaArare . solve
gets arare = gets . split puts arare . include? ( ' Y ' ) ? ' Four ' : ' Three '
x = 5 . times . map { gets . to_i } k = gets . to_i puts x [ 4 ] - x [ 0 ] > k ? ' :( ' : ' Yay! '
n = gets . to_i ps = gets . split . map ( & :to_i ) ans = 0 min = n + 1000 ps . each do | p | if p < min min = p ans += 1 end end puts ans
puts gets . chomp . chars . sort . uniq . join == " 1479 " ? :YES : :NO
puts [ :Three , :Four ] [ ` dd ` . split . uniq . size - 4 ]
K , S = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 ( 0 .. K ) . each { | i | next if S - i > 2 * K if S - i <= K then ans += ( S - i + 1 ) if S - i + 1 > 0 else ans += ( 2 * K - S + i + 1 ) end } puts ans
n = gets ary = gets . split ( ' ' ) . map ( & :to_s ) m = ary . sort . uniq . size if m == 3 then puts " Three " else puts " Four " end
gets puts gets =~ / Y / ? " Four " : " Three "
n = gets . chomp . to_i s = gets . chomp . split ( ' ' ) if s . uniq . size == 3 then puts ' Three ' else puts ' Four ' end
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) d1 = t1 * ( a1 - b1 ) d2 = d1 + t2 * ( a2 - b2 ) if d2 == 0 puts " infinity " elsif d1 * d2 > 0 puts 0 else d1 = d1 . abs d2 = d2 . abs ans = 0 if d1 % d2 > 0 ans += 1 end puts ans + ( d1 / d2 ) * 2 end
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | h | ( 0 .. k ) . each do | i | j = s - h - i if j <= k && 0 <= j count += 1 end end end puts count
gets count = 0 min = nil gets . split ( / / ) . map ( & :to_i ) . each do | v | min = v if min . nil? || min > v count += 1 if min >= v end puts count
cell = Array [ 9 ] 3 . times do | i | cell [ i * 3 ] , cell [ i * 3 + 1 ] , cell [ i * 3 + 2 ] = gets . split ( " " ) . map ( & :to_i ) end flg = true if cell [ 0 ] - cell [ 3 ] != cell [ 1 ] - cell [ 4 ] flg = false end if cell [ 1 ] - cell [ 4 ] != cell [ 2 ] - cell [ 5 ] flg = false end if cell [ 3 ] - cell [ 6 ] != cell [ 4 ] - cell [ 7 ] flg = false end if cell [ 4 ] - cell [ 7 ] != cell [ 5 ] - cell [ 8 ] flg = false end if cell [ 0 ] - cell [ 6 ] != cell [ 1 ] - cell [ 7 ] flg = false end if cell [ 1 ] - cell [ 7 ] != cell [ 2 ] - cell [ 8 ] flg = false end puts flg ? " Yes " : " No "
c = Array . new ( 3 ) { Array . new ( 3 , 0 ) } 3 . times do | i | tmp = gets . split ( " \s " ) . map { | s | s . to_i } c [ i ] [ 0 ] = tmp [ 0 ] c [ i ] [ 1 ] = tmp [ 1 ] c [ i ] [ 2 ] = tmp [ 2 ] end d00 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] d10 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] d20 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] d01 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] d11 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] d21 = c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] d02 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] d12 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] d22 = c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] if d00 == d01 && d01 == d02 && d02 == d00 && d10 == d11 && d11 == d12 && d12 == d10 && d20 == d21 && d21 == d22 && d22 == d20 then puts " Yes " else puts " No " end
N = gets . to_i P = gets . split . map & :to_i min = N cnt = 0 P . each do | e | if e <= min cnt += 1 min = e end end puts cnt
n = gets . to_i p = gets . split ( ' ' ) . map ( & :to_i ) mini = p [ 0 ] count = 1 for i in 1 .. n - 1 if p [ i ] < mini count += 1 mini = p [ i ] end end puts count
N = gets . to_i P = gets . split . map { | e | e . to_i } _max = 0 _min = 0 ans = 0 P . each_with_index do | p , i | if i == 0 ans += 1 _max = p next end if i == 1 if _max < p _min = _max _max = p else _min = p ans += 1 end next end if p <= _min and p <= _max ans += 1 else _max = p if p > _max end _min = p if p < _min end puts ans
k , s = gets . split . map! ( & :to_i ) if 3 * k < s then puts 0 elsif 3 * k == s puts 1 else ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | break if x + y > s ans += 1 if s - x - y <= k end end puts ans end
k , s = gets . chomp . split . map ( & :to_i ) ok = 0 0 . upto ( k ) do | i1 | 0 . upto ( k ) do | i2 | if s - ( i1 + i2 ) >= 0 && ( s - ( i1 + i2 ) ) <= k ok += 1 end end end puts ok
n = gets . to_i P_arr = gets . split . map ( & :to_i ) counter = 0 P_max = P_arr . max n . times do | i | if P_max >= P_arr [ i ] counter += 1 P_max = P_arr [ i ] end end p counter
ary = gets . split . map ( & :to_i ) . sort if ary [ 0 ] == 1 ans = ( ( ary - [ 1 ] ) . reverse ) . insert ( 0 , 1 ) if ans . join . to_i == 1974 puts " YES " else puts " NO " end else puts " NO " end
c = 3 . times . map { gets . split . map ( & :to_i ) } hoge = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] fuga = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] piyo = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] puts hoge == fuga && piyo == fuga ? " Yes " : " No "
k , s = gets . split . map & :to_i c = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if ( 0 <= z && z <= k ) c += 1 end end end p c
k , s = gets . split . map & :to_i w = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y w += 1 if z . between? ( 0 , k ) end end puts w
K , S = gets . split . map ( & :to_i ) cnt = 0 0 . upto ( K ) do | i | 0 . upto ( K ) do | j | k = S - ( i + j ) cnt += 1 if k >= 0 && k <= K end end puts cnt
n = gets . to_i s = gets . split ( " " ) s = s . group_by ( & :itself ) . map { | key , value | [ key , value . count ] } . to_h cnt = s . values if cnt . length == 3 puts " Three " else puts " Four " end
c = [ ] 3 . times do | i | c [ i ] = $stdin . gets . chomp . split ( ' ' ) . map ( & :to_i ) end 2 . times do | i | unless ( 0 .. 2 ) . map { | j | c [ j ] [ 2 ] - c [ j ] [ i ] } . uniq . length == 1 print ' No ' exit end unless ( 0 .. 2 ) . map { | j | c [ 2 ] [ j ] - c [ i ] [ j ] } . uniq . length == 1 print ' No ' exit end end print ' Yes '
n = gets . chomp . to_i q = gets . chomp . split . map ( & :to_i ) max = q . max cnt = 0 for i in 0 .. n - 1 if max >= q [ i ] cnt += 1 max = q [ i ] end end puts cnt
l = gets . chomp . split ( ' ' ) k = l [ 0 ] . to_i s = l [ 1 ] . to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - ( x + y ) <= k && s - ( x + y ) >= 0 cnt += 1 end end end puts cnt
n = gets . to_i hina = gets . split ( " " ) . uniq if hina . size == 3 puts " Three " else puts " Four " end
max , sum = gets . chomp . split ( " " ) . map ( & :to_i ) kind = 0 ( 0 .. max ) . each do | x | ( 0 .. max ) . each do | y | z = sum - x - y kind += 1 if 0 <= z && z <= max end end puts kind
N = gets . to_i ; a = gets . split . uniq . count ; puts ' Four ' if a === 4 ; puts ' Three ' if a === 3 ;
n = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) . map ( & :to_i ) min = arr [ 0 ] count = 0 ( 0 ... n ) . each do | i | min = [ arr [ i ] , min ] . min count += 1 if min >= arr [ i ] end puts count
a = Array . new ( 5 ) { gets . to_i } k = gets . to_i ans = true a . each_with_index { | x , i | a . each_with_index { | y , j | next if i >= j if y - x > k ans = false break end } break unless ans } puts ( ans ? " Yay! " : " :( " )
n = gets . to_i ss = gets . split ( " " ) print " Three \n " if ss . uniq . size == 3 print " Four \n " if ss . uniq . size == 4
c = Array . new ( 3 ) c [ 0 ] = gets . split ( / \s + / ) . map ( & :to_i ) c [ 1 ] = gets . split ( / \s + / ) . map ( & :to_i ) c [ 2 ] = gets . split ( / \s + / ) . map ( & :to_i ) bd = Array . new ( 3 ) ad = Array . new ( 3 ) result = true ( 0 ... 3 ) . each do | j | d1 = c [ 0 ] [ j ] - c [ 0 ] [ ( j + 1 ) % 3 ] d2 = c [ 1 ] [ j ] - c [ 1 ] [ ( j + 1 ) % 3 ] d3 = c [ 2 ] [ j ] - c [ 2 ] [ ( j + 1 ) % 3 ] if d1 == d2 && d2 == d3 bd [ j ] = d1 else result = false end end ( 0 ... 3 ) . each do | i | d1 = c [ i ] [ 0 ] - c [ ( i + 1 ) % 3 ] [ 0 ] d2 = c [ i ] [ 1 ] - c [ ( i + 1 ) % 3 ] [ 1 ] d3 = c [ i ] [ 2 ] - c [ ( i + 1 ) % 3 ] [ 2 ] if d1 == d2 && d2 == d3 ad [ i ] = d1 else result = false end end if result if bd [ 0 ] + bd [ 1 ] + bd [ 2 ] == 0 && ad [ 0 ] + ad [ 1 ] + ad [ 2 ] == 0 puts ( " Yes " ) else puts ( " No " ) end else puts ( " No " ) end
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += z >= 0 && z <= k ? 1 : 0 end end puts count
n = gets . to_i s = gets . chomp . split ( " " ) puts s . include? ( " Y " ) ? " Four " : " Three "
_n = gets . strip . to_i puts gets . strip . split . uniq . size . eql? ( 3 ) ? ' Three ' : ' Four '
a , b = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. a ) . each do | x | ( 0 .. a ) . each do | y | z = b - x - y cnt += 1 if z >= 0 && z <= a end end puts cnt
n = gets . to_i nums = gets . split . map ( & :to_i ) min = nums [ 0 ] res = 0 nums . each do | num | if num <= min res += 1 min = num end end puts res
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end c = array ( 3 ) 3 . times do | i | c [ i ] = get_i end flag = true 1 . upto ( 100 ) do | a1 | b = array ( 3 ) 3 . times do | i | b [ i ] = c [ 0 ] [ i ] - a1 end flag = true 2 . times do | i | unless c [ i + 1 ] [ 0 ] - b [ 0 ] == c [ i + 1 ] [ 1 ] - b [ 1 ] and c [ i + 1 ] [ 1 ] - b [ 1 ] == c [ i + 1 ] [ 2 ] - b [ 2 ] flag = false break end end if flag break end end puts yn_judge ( flag )
q = gets . chomp . split ( " " ) . map { | i | i . to_i } . sort if q == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
a = gets . chomp . split ( " " ) . map ( & :to_i ) if a . include? ( 1 ) && a . include? ( 9 ) && a . include? ( 7 ) && a . include? ( 4 ) puts " YES " else puts " NO " end
c = [ ] 3 . times do row = gets . chomp . split . map ( & :to_i ) c << row end a = [ 0 ] b = [ ] b << c [ 0 ] [ 0 ] b << c [ 0 ] [ 1 ] b << c [ 0 ] [ 2 ] a << c [ 1 ] [ 0 ] - b [ 0 ] a << c [ 2 ] [ 0 ] - b [ 0 ] [ 1 , 2 ] . each do | i | [ 1 , 2 ] . each do | j | unless c [ i ] [ j ] == a [ i ] + b [ j ] puts ' No ' exit end end end puts ' Yes '
N = gets . to_i S = gets . split puts S . uniq . size == 3 ? " Three " : " Four "
_ = gets s = gets . chomp . split hs = Hash . new ( 0 ) s . each do | c | hs [ c ] += 1 end kind = hs . keys . size if kind == 3 puts " Three " elsif kind == 4 puts " Four " end
grid = [ ] 3 . times { grid << gets . split . map ( & :to_i ) } a1 = 0 b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 a2 = grid [ 1 ] [ 0 ] - b1 a3 = grid [ 2 ] [ 0 ] - b1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] res = ' Yes ' 3 . times do | i | 3 . times do | j | break res = ' No ' if grid [ i ] [ j ] != a [ i ] + b [ j ] end end puts res
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
n , m , a , b , * d = $< . read . split . map ( & :to_i ) d = d . take_while { | e | e >= a } . reverse d = d . drop_while { | e | e <= b } if n - d . size < m p d . size
n = gets . chomp! . to_i ls = gets . split ( " " ) . map ( & :to_i ) min = ls [ 0 ] count = 1 for i in 1 .. n - 1 do if ls [ i ] < min min = ls [ i ] count += 1 end end p count
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
$/ = ' ' ; k , s = $< . map & :to_i ; k += 1 ; p ( 0 ... k * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y ans += 1 if z <= k && z >= 0 end end puts ans
gets p_arr = gets . split . map ( & :to_i ) min = p_arr [ 0 ] result = 0 p_arr . each do | n | if min >= n result += 1 end if min > n min = n end end puts result
N = gets . chomp . split . map ( & :to_i ) puts N . include? ( 1 ) && N . include? ( 9 ) && N . include? ( 7 ) && N . include? ( 4 ) ? " YES " : " NO "
def inpf ( ) a = gets . chomp . split ( " " ) . map ( & :to_f ) end def inps ( ) a = gets . chomp . split ( " " ) end def copy ( a ) Marshal . load ( Marshal . dump ( a ) ) end def kaijo ( n , r = 10 ** 9 + 7 ) ( n < 2 ) ? 1 : ( 2 .. n ) . inject { | memo , u | memo = ( memo * u ) % r } end def na ( n , d = 0 ) Array . new ( n , d ) end def na2 ( n , m , d = 0 ) Array . new ( n ) { Array . new ( m , d ) } end def na3 ( n , m , l , d = 0 ) Array . new ( n ) { Array . new ( m ) { Array . new ( l , d ) } } end def inp ( ) a = gets . chomp . split ( " " ) . map ( & :to_i ) end def r_up ( a , b ) ( a + b - 1 ) / b end def sum ( a ) a . inject ( :+ ) end n = inp [ 0 ] s = inps h = { } ans = 0 s . each do | c | if ( h [ c ] == nil ) h [ c ] = true ans += 1 end end puts ( ans < 4 ) ? " Three " : " Four "
gets ; puts gets . split . count ( " Y " ) > 0 ? :Four : :Three
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i arr = [ a , b , c , d , e ] arr . sort! if ( arr [ 4 ] - arr [ 0 ] ) > k print " :( \n " else print " Yay! \n " end
data = $< . map { | l | l . split . map ( & :to_i ) } a1 = b1 = 0 a2 = b2 = 1 a3 = b3 = 2 b1_b2_a = data [ a1 ] [ b1 ] - data [ a1 ] [ b2 ] b1_b2_b = data [ a2 ] [ b1 ] - data [ a2 ] [ b2 ] b1_b2_c = data [ a3 ] [ b1 ] - data [ a3 ] [ b2 ] b2_b3_a = data [ a1 ] [ b2 ] - data [ a1 ] [ b3 ] b2_b3_b = data [ a2 ] [ b2 ] - data [ a2 ] [ b3 ] b2_b3_c = data [ a3 ] [ b2 ] - data [ a3 ] [ b3 ] puts b1_b2_a == b1_b2_b && b1_b2_a == b1_b2_c && b2_b3_a == b2_b3_b && b2_b3_a == b2_b3_c ? " Yes " : " No "
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | z = s - i - j if 0 <= z && z <= k cnt += 1 end end end puts cnt
N = gets . to_i P = gets . chomp . split . map ( & :to_i ) s = 0 m = P [ 0 ] P . each do | p | if p <= m s += 1 m = p end end puts s
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
c = [ ] 3 . times do c << gets . split . map ( & :to_i ) end if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] puts " Yes " else puts " No " end
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | i | ( 0 .. K ) . each do | j | count += 1 if i + j <= S && S - i - j <= K end end puts count
N = gets . to_i a = gets . split . map ( & :to_i ) res = 0 cnt = Float :: INFINITY N . times do | i | if cnt > a [ i ] res += 1 cnt = a [ i ] end end puts res
n = gets . to_i ps = gets . split . map & :to_i ps = ps . map . with_index { | x , i | [ x , i ] } . sort { | a , b | a [ 0 ] <=> b [ 0 ] } count = 0 memo = n ps . each { | p | if p [ 1 ] < memo then count += 1 memo = p [ 1 ] end } puts count
T1 , T2 , A1 , A2 , B1 , B2 = 3 . times . collect { gets . chomp . split ( / / ) . collect ( & :to_i ) } . flatten delta1 = T1 * ( B1 - A1 ) delta2 = T2 * ( B2 - A2 ) if delta1 * delta2 > 0 puts ( 0 ) else if delta1 . abs > delta2 . abs puts ( 0 ) elsif delta1 . abs == delta2 . abs puts ( ' infinity ' ) else delta3 = Rational ( - delta1 , delta1 + delta2 ) puts ( 2 * delta3 . floor + ( delta3 . ceil - delta3 . floor ) ) end end
n , w = gets . to_i , gets . split ( " " ) a = w . count ( " P " ) , w . count ( " W " ) , w . count ( " G " ) , w . count ( " Y " ) puts [ " " , " " , " Three " , " Four " ] [ 3 - a . count ( 0 ) ]
require ' prime ' require ' set ' require ' tsort ' include Math ALP = ( ' a ' .. ' z ' ) . to_a INF = 0xffffffffffffffff def max ( a , b ) ; a > b ? a : b end def min ( a , b ) ; a < b ? a : b end def swap ( a , b ) ; a , b = b , a end def gif ; gets . to_i end def gff ; gets . to_f end def gsf ; gets . chomp end def gi ; gets . split . map ( & :to_i ) end def gf ; gets . split . map ( & :to_f ) end def gs ; gets . chomp . split . map ( & :to_s ) end def gc ; gets . chomp . split ( ' ' ) end def pr ( num ) ; num . prime_division end def pr? ( num ) ; Prime . prime? ( num ) end def digit ( num ) ; num . to_s . length end def array ( s , ini = nil ) ; Array . new ( s ) { ini } end def darray ( s1 , s2 , ini = nil ) ; Array . new ( s1 ) { Array . new ( s2 ) { ini } } end def rep ( num ) ; num . times { | i | yield ( i ) } end def repl ( st , en , n = 1 ) ; st . step ( en , n ) { | i | yield ( i ) } end n = gif puts gs . uniq . size == 4 ? ' Four ' : ' Three '
a = gets . to_i b = gets . split . map ( & :to_i ) c = 20000000 ans = 0 for num in 0 .. a - 1 do if b [ num ] < c c = b [ num ] ans += 1 end end p ans
gets a = gets . split . map ( & :to_i ) x = 0 min = a [ 0 ] a . each do | n | if n <= min x += 1 min = n end end puts x
a = $stdin . gets . chomp . to_i b = $stdin . gets . chomp . to_i c = $stdin . gets . chomp . to_i d = $stdin . gets . chomp . to_i e = $stdin . gets . chomp . to_i k = $stdin . gets . chomp . to_i cond = ( e - a <= k ) if cond puts " Yay! " else puts " :( " end
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | a | 0 . upto ( s - a ) do | b | next if b > k c = s - a - b if c >= 0 && c <= k cnt += 1 end end end puts cnt
inp = gets . chomp . split ( " " ) . map ( & :to_i ) ok = [ 1 , 9 , 7 , 4 ] diff = ok - inp if diff . size == 0 puts " YES " else puts " NO " end
s = gets . to_i n = gets . chomp . split n = n . uniq if n . length == 3 puts " Three " else puts " Four " end
a = gets . to_i b = 0 4 . times do b = gets . to_i end k = gets . to_i puts ( b - a <= k ) ? " Yay! " : " :( "
ary = [ ] 6 . times do ary << gets . to_i end num = ary [ 0 .. 4 ] if num . max - num . min > ary [ 5 ] puts " :( " else puts " Yay! " end
C = 3 . times . map { gets . split . map ( & :to_i ) } if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] && C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] && C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] && C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] puts " Yes " else puts " No " end
n = gets . chomp . to_i pn = gets . chomp . split ( " " ) . map ( & :to_i ) num = 0 minimum = n for i in 0 .. n - 1 do num += 1 if pn [ i ] <= minimum minimum = pn [ i ] if pn [ i ] < minimum break if minimum == 1 end print num
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) then puts " Yes " else puts " No " end
a = gets . chomp . split . map ( & :to_i ) ans = 0 for aa in 0 .. a [ 0 ] for bb in 0 .. a [ 0 ] ans += 1 if ( cc = a [ 1 ] - aa - bb ) >= 0 && cc <= a [ 0 ] && aa + bb + cc == a [ 1 ] end end puts ans
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | a | ( 0 .. k ) . each do | b | z = s - ( a + b ) cnt += 1 if a + b + z == s && z >= 0 && z <= k end end p cnt
Z = Array . new ( 5 ) { | _ | gets . to_i } a , b , c , d , e = Z R = gets . to_i puts Z . map { | r | r - a } [ - 1 ] > R ? " :( " : " Yay! "
a = [ ] 5 . times do | i | a [ i ] = gets . to_i end k = gets . to_i check = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 if k < ( a [ i ] - a [ j ] ) . abs then check = false end end end if check then puts " Yay! " else puts " :( " end
gets p = gets . chop . split . map ( & :to_i ) count = 0 prev_min = p [ 0 ] p . each do | p_i | count += 1 if prev_min >= p_i prev_min = [ prev_min , p_i ] . min end puts count
N = gets . to_i Ss = gets . split . map ( & :to_s ) puts Ss . uniq . count == 3 ? ' Three ' : ' Four '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts ' :( ' exit elsif d - a > k puts ' :( ' exit elsif c - a > k puts ' :( ' exit elsif b - a > k puts ' :( ' exit end if e - b > k puts ' :( ' exit elsif d - b > k puts ' :( ' exit elsif c - b > k puts ' :( ' exit end if e - c > k puts ' :( ' exit elsif d - c > k puts ' :( ' exit end if e - d > k puts ' :( ' exit else puts ' Yay! ' end
C = readlines . map { | l | l . split . map ( & :to_i ) } a = [ 0 , nil , nil ] b = [ nil ] * 3 ( 0 .. 2 ) . each { | i | b [ i ] = C [ 0 ] [ i ] - 0 } ( 1 .. 2 ) . each { | i | a [ i ] = C [ i ] [ 0 ] - b [ 0 ] } puts [ 1 , 2 ] . product ( [ 1 , 2 ] ) . all? { | i , j | a [ i ] + b [ j ] == C [ i ] [ j ] } ? ' Yes ' : ' No '
_ = gets . to_i arr = gets . chomp . split ( ' ' ) arr . uniq! puts arr . size == 4 ? ' Four ' : ' Three '
n = gets . chomp . to_i foundY = false gets . chomp . split . each do | c | if c == ' Y ' foundY = true end end puts foundY ? " Four " : " Three "
n = gets . to_i nums = gets . split . map ( & :to_i ) min = 300_000 ans = [ ] nums . each_with_index do | num , i | if num <= min min = num ans << i end end puts ans . size
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts cnt
B = 3 . times . map { gets . split . map ( & :to_i ) } h = [ B [ 0 ] [ 0 ] - B [ 0 ] [ 1 ] , B [ 0 ] [ 1 ] - B [ 0 ] [ 2 ] ] v = [ B [ 0 ] [ 0 ] - B [ 1 ] [ 0 ] , B [ 1 ] [ 0 ] - B [ 2 ] [ 0 ] ] r = ( 1 .. 2 ) . all? do | i | [ B [ i ] [ 0 ] - B [ i ] [ 1 ] , B [ i ] [ 1 ] - B [ i ] [ 2 ] ] == h && [ B [ 0 ] [ i ] - B [ 1 ] [ i ] , B [ 1 ] [ i ] - B [ 2 ] [ i ] ] == v end puts r ? ' Yes ' : ' No '
k , s = gets . split . map ( & :to_i ) count = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | z = s - i - j count += 1 if 0 <= z && z <= k end end puts count
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if x + y + z == s && z <= k && z >= 0 end end puts count
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if b - a <= k && c - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k puts " Yay! " else puts " :( " end
n = gets . to_i s = gets . split ( " " ) . map! { | o | o . to_s } frag = " Three " 0 . upto ( n - 1 ) do | i | if s [ i ] == " Y " frag = " Four " end end puts frag
arr = [ ] 5 . times do | i | arr << gets . to_i end k = gets . to_i sa = arr [ - 1 ] - arr [ 0 ] puts sa <= k ? " Yay! " : " :( "
n = gets . to_i arr = gets . split ( ' ' ) . map! ( & :to_i ) min = arr [ 0 ] count = 0 arr . each do | e | if min >= e count += 1 min = e end end puts count
as = 5 . times . map { gets . to_i } k = gets . to_i puts as [ 4 ] - as [ 0 ] > k ? ' :( ' : ' Yay! '
N = gets . to_i Ss = gets . chomp . split if Ss . uniq . length == 3 then puts ( " Three " ) elsif Ss . uniq . length == 4 then puts ( " Four " ) end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a > k ) ? " :( " : " Yay! "
grid = [ [ 0 , 0 , 0 , 0 ] ] 3 . times do grid . push ( [ 0 ] + gets . split ( ' ' ) . map ( & :to_i ) ) end a1 = 0 b1 = grid [ 1 ] [ 1 ] - a1 b2 = grid [ 2 ] [ 1 ] - a1 b3 = grid [ 3 ] [ 1 ] - a1 a2 = grid [ 1 ] [ 2 ] - b1 a3 = grid [ 1 ] [ 3 ] - b1 if a2 + b2 == grid [ 2 ] [ 2 ] && a2 + b3 == grid [ 3 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 3 ] && a3 + b3 == grid [ 3 ] [ 3 ] puts ' Yes ' else puts ' No ' end
puts gets . split . sort . join == " 1479 " ? " YES " : " NO "
N = gets . to_i A = gets . split puts A . include? ( " Y " ) ? " Four " : " Three "
n = gets . chomp . to_i s = gets . chomp . split ( " " ) count = 0 arr = Float :: INFINITY n . times do | i | mokuteki = s [ i ] arr = [ mokuteki . to_i , arr ] . min if mokuteki . to_i <= arr count += 1 end end puts count
n = gets . chomp . split ( " " ) . map ( & :to_i ) . uniq if n . count ( 1 ) + n . count ( 9 ) + n . count ( 7 ) + n . count ( 4 ) == 4 puts " YES " else puts " NO " end
k , s = gets . split . map ( & :to_i ) x = ( 0 .. k ) . to_a ans = 0 x . each do | xx | x . each do | yy | z = s - xx - yy ans += 1 if z >= 0 && z <= k end end p ans
n = gets . to_i puts gets . split . uniq . size == 3 ? " Three " : " Four "
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
num = [ ] 3 . times do num << gets . strip . split . map ( & :to_i ) end l1 = num [ 0 ] [ 1 ] - num [ 0 ] [ 0 ] l2 = num [ 1 ] [ 1 ] - num [ 1 ] [ 0 ] l3 = num [ 2 ] [ 1 ] - num [ 2 ] [ 0 ] r1 = num [ 0 ] [ 2 ] - num [ 0 ] [ 1 ] r2 = num [ 1 ] [ 2 ] - num [ 1 ] [ 1 ] r3 = num [ 2 ] [ 2 ] - num [ 2 ] [ 1 ] if l1 == l2 && l2 == l3 && r1 == r2 && r2 == r3 puts " Yes " else puts " No " end
K , S = gets . split . map { | i | i . to_i } c = 0 ( 0 .. K ) . each { | x | next if x + K * 2 < S ( 0 .. K ) . each { | y | z = S - x - y next if z > K next if z < 0 c += 1 } } puts c
ar = [ ] 6 . times do tmp = gets if tmp == nil then exit end ar << tmp . to_i end if ( ar [ 4 ] - ar [ 0 ] ) > ar [ 5 ] then puts " :( " else puts " Yay! " end
s = gets . split . map ( & :to_s ) . sort . join t = [ 1 , 9 , 7 , 4 ] . sort . join if s == t puts " YES " else puts " NO " end
N = gets . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) ans , wk = [ 0 , N + 1 ] P . each { | q | ( ans += 1 ; wk = q ) if wk > q } puts ans
line = readlines . map ( & :to_i ) if line [ 4 ] - line [ 0 ] > line [ 5 ] then puts " :( " else puts " Yay! " end
a = gets . split . sort * ' ' puts a == " 1479 " ? :YES : :NO
c = 3 . times . map { gets . chomp . split . map ( & :to_i ) } b = [ ] flag = true 0 . upto ( c [ 0 ] [ 0 ] ) do | k | flag = true a = [ ] a . push ( k ) c [ 0 ] . each { | c | b . push ( c - k ) } a . push ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . push ( c [ 2 ] [ 0 ] - b [ 0 ] ) b . each_with_index do | b , j | a . each_with_index do | a , i | flag = false unless a + b == c [ i ] [ j ] end end break if flag == true end puts flag ? " Yes " : " No "
c = ( 1 .. 3 ) . map do gets . chomp . split . map ( & :to_i ) end x = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ i + 1 ] [ j ] - c [ i ] [ j ] == c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] end . all? end . all? y = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ j + 1 ] [ i ] - c [ j ] [ i ] == c [ j + 1 ] [ i + 1 ] - c [ j ] [ i + 1 ] end . all? end . all? puts x && y ? :Yes : :No
N = gets . to_i as = Array . new ( N ) N . times do | i | as [ i ] = gets . to_i end min = 1 ans = 0 pt = 0 while pt < N if as [ pt ] <= min min = as [ pt ] + 1 if min < as [ pt ] + 1 pt += 1 elsif as [ pt ] - min <= min min = 2 if min == 1 ans += 1 pt += 1 else n = ( as [ pt ] - 1 ) / min - 1 ans += n as [ pt ] -= n * min end end puts ans
n = gets . to_i arr = gets . split . map ( & :to_i ) ans = 0 min = 10 ** 8 arr . each_with_index do | ar , i | if ar <= min min = ar ans += 1 end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i arr = [ a , b , c , d , e ] arr . combination ( 2 ) { | i , j | if ( i - j ) . abs > k then puts " :( " exit end } puts " Yay! "
def lscan ; gets . split . map ( & :to_i ) ; end puts lscan . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO "
a = Array . new ( 3 , 0 ) b = Array . new ( 3 , 0 ) c = Array . new ( 3 ) . map { Array . new ( 3 , 0 ) } correct_flag = true 3 . times do | i | c [ i ] = gets . split . map ( & :to_i ) end b [ 0 ] = ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 b [ 1 ] = ( ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 ) - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] b [ 2 ] = ( ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 ) - c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] a [ 0 ] = c [ 0 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 a [ 1 ] = c [ 1 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 a [ 2 ] = c [ 2 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 for i in 0 .. 2 for j in 0 .. 2 if c [ i ] [ j ] != ( a [ i ] + b [ j ] ) correct_flag = false end end end if correct_flag puts " Yes " else puts " No " end
n = gets . split . map ( & :to_i ) n . sort! if n == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
n = gets . to_i s = gets . chomp . split ( " " ) puts ( s . uniq . size == 4 ) ? " Four " : " Three "
a = [ ] 6 . times { | i | a [ i ] = gets . to_i } s = a [ 0 .. 4 ] puts s . max - s . min > a [ 5 ] ? ' :( ' : ' Yay! '
N = gets . to_i p = gets . chomp . split . map ( & :to_i ) min = 300000 ans = 0 p . each do | i | if i < min min = i ans += 1 end end puts ans
k , s = gets . split ( ' ' ) . map { | i | i . to_i } ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k ans += 1 end end end puts ans
k , s = gets . split . map ( & :to_i ) ks = 0 .. k ns = ks . to_a c = 0 ns . product ( ns ) { | x , y | c += 1 if ks . include? ( s - x - y ) } p c
a = 3 . times . map { gets . split . map ( & :to_i ) } yes = 2 . times . all? do a = a . transpose 2 . times . all? do | i | a [ i ] [ 1 ] - a [ i ] [ 0 ] == a [ i + 1 ] [ 1 ] - a [ i + 1 ] [ 0 ] && a [ i ] [ 2 ] - a [ i ] [ 1 ] == a [ i + 1 ] [ 2 ] - a [ i + 1 ] [ 1 ] end end puts yes ? " Yes " : " No "
N = gets . chomp . to_i strs = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 mini = strs [ 0 ] strs . each_with_index do | str , i | if str <= mini ans += 1 mini = str end end puts ans
INF = 1 << 30 DXYS = [ [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] , [ 0 , 1 ] ] loop do w , h = gets . split . map ( & :to_i ) break if ( w | h ) == 0 wh = w * h tls = wh . times . map { 0 } ndtl = 0 spos = nil for y in ( 0 ... h ) line = gets . strip for x in ( 0 ... w ) pos = y * w + x case line [ x ] when ' * ' ndtl += 1 tls [ pos ] = ndtl when ' x ' tls [ pos ] = - 1 when ' o ' spos = pos end end end dbits = ( 1 << ndtl ) - 1 dists = wh . times . map { ( dbits + 1 ) . times . map { INF } } dists [ spos ] [ dbits ] = 0 q = [ [ spos , dbits ] ] min_dist = INF while ! q . empty? upos , ubits = q . shift ud = dists [ upos ] [ ubits ] if ubits == 0 min_dist = ud if min_dist > ud next end ux = upos % w uy = upos / w DXYS . each do | dx , dy | vx = ux + dx vy = uy + dy vpos = vy * w + vx if vx >= 0 && vx < w && vy >= 0 && vy < h && tls [ vpos ] >= 0 vbits = ubits if tls [ vpos ] > 0 vbits &= ~ ( 1 << ( tls [ vpos ] - 1 ) ) end vd = ud + 1 if dists [ vpos ] [ vbits ] > vd dists [ vpos ] [ vbits ] = vd q << [ vpos , vbits ] end end end end puts ( min_dist >= INF ? - 1 : min_dist ) end
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
n4 = gets . chomp . split ( / \s / ) . map { | x | x . to_i } . sort puts ( n4 [ 0 ] == 1 and n4 [ 1 ] == 4 and n4 [ 2 ] == 7 and n4 [ 3 ] == 9 ) ? ' YES ' : ' NO '
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 min = Float :: INFINITY N . times do | i | if P [ i ] < min ans += 1 min = P [ i ] end end puts ans
n = gets . chomp . to_i ; p = gets . chomp . split ( " " ) . map ( & :to_i ) ; b = [ ] b [ 0 ] = p [ 0 ] mi = p [ 0 ] for i in 1 .. n - 1 if p [ i ] < mi mi = p [ i ] b [ i ] = mi else b [ i ] = mi end end count = 1 for i in 1 .. n - 1 if p [ i ] <= b [ i ] count = count + 1 end end puts count
n = gets . to_i ps = gets . split . map ( & :to_i ) min = ps [ 0 ] ans = 0 ps . each do | pn | if pn <= min min = pn ans += 1 end end puts ans
c = [ ] 3 . times { c << gets . chomp . split . map ( & :to_i ) } a = [ 0 ] b = c [ 0 ] 1 . upto ( 2 ) { | i | a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } 1 . upto ( 2 ) do | i | 1 . upto ( 2 ) do | j | if c [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
antenas = 5 . times . map { STDIN . gets . strip . to_i } k = STDIN . gets . strip . to_i puts antenas [ 4 ] - antenas [ 0 ] > k ? ' :( ' : ' Yay! '
gets puts ( ( gets . split . uniq . length == 3 ) ? ' Three ' : ' Four ' )
n = gets . chomp . to_i pp = gets . chomp . split ( ) . map ( & :to_i ) i = 0 count = 0 min = [ ] while true if i == 0 min . push ( pp [ i ] ) else if min [ ( i - 1 ) ] > pp [ i ] min . push ( pp [ i ] ) else min . push ( min [ i - 1 ] ) end end i += 1 if i == n break end end j = 0 while true q = pp [ j ] if min [ j ] >= q count += 1 end j += 1 if j == n break end end print count
gets puts gets . chomp . split ( ' ' ) . uniq . count == 3 ? ' Three ' : ' Four '
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if z >= 0 && z <= k && x + y + z == s end end p cnt
T1 , T2 = gets . chomp . split ( " " ) . map ( & :to_i ) A1 , A2 = gets . chomp . split ( " " ) . map ( & :to_i ) B1 , B2 = gets . chomp . split ( " " ) . map ( & :to_i ) R1 = A1 - B1 R2 = A2 - B2 DR1 = R1 * T1 DR2 = R2 * T2 DR = DR1 + DR2 if DR . zero? puts " infinity " exit end if DR1 * DR > 0 puts 0 exit end n , m = DR1 . divmod ( DR ) if m . zero? puts 1 + ( n . abs - 1 ) * 2 + 1 else puts 1 + ( n . abs - 1 ) * 2 end
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) min = a [ 0 ] ans = 1 1 . upto ( n - 1 ) do | i | if min > a [ i ] min = a [ i ] ans += 1 end end puts ans
puts ` dd ` [ ?Y ] ? :Four : :Three
cs = 3 . times . map { gets . split . map ( & :to_i ) } ans = " Yes " 3 . times do | i | diff = cs [ i ] [ 0 ] - cs [ i - 1 ] [ 0 ] 3 . times do | j | ans = " No " if diff != cs [ i ] [ j ] - cs [ i - 1 ] [ j ] end end puts ans
k , s = gets . split ( ' ' ) . map ( & :to_i ) puts ( k + 1 ) . times . map { | x | ( k + 1 ) . times . map { | y | s - x - y } . select { | z | 0 <= z && z <= k } . size } . inject ( & :+ )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
a = gets . split . map ( & :to_i ) . sort . uniq if a . size == 4 && ( a - [ 1 , 9 , 7 , 4 ] ) == [ ] puts " YES " else puts " NO " end
a , b , c , d , e , k = 6 . times . map { gets . to_i } numbers = [ a , b , c , d , e ] if numbers . max - numbers . min <= k puts " Yay! " else puts " :( " end
N = gets . to_i ps = gets . split ( ' ' ) . map ( & :to_i ) result = 0 ; na = [ ] min = 4611686018427387903 ps . each_with_index do | p , index | if index == 0 result += 1 ; next ; end na . push ( ps [ index - 1 ] ) if min > ps [ index - 1 ] min = ps [ index - 1 ] end if p < min result += 1 ; end end puts result ;
c = 3 . times . map { gets . split . map ( & :to_i ) } if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] || c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] then puts ' No ' ; exit ; end if c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] != c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] || c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] != c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] then puts ' No ' ; exit ; end puts ' Yes '
a , b , c , d , e , k = 6 . times . map { gets . to_i } puts ( e - a > k ) ? " :( " : " Yay! "
a = gets . to_i b = gets . split . uniq puts b . size == 3 ? " Three " : " Four "
n = gets . to_i p = gets . split ( ' ' ) . map ( & :to_i ) count = 1 min = p [ 0 ] ( 1 ... n ) . each do | i | if min > p [ i ] count += 1 min = p [ i ] end end puts count
def hoge ( x ) return 1 if x == 0 return hoge ( x - 1 ) * 2 + 1 end p hoge ( gets . to_i + 1 ) - 1
l0 = gets . split ( " " ) . map! { | i | i . to_i } l1 = gets . split ( " " ) . map! { | i | i . to_i } l2 = gets . split ( " " ) . map! { | i | i . to_i } b1 = l0 [ 0 ] ; b2 = l1 [ 0 ] ; b3 = l2 [ 0 ] a1 = 0 ; a2 = l0 [ 1 ] - b1 ; a3 = l0 [ 2 ] - b1 if ( l0 [ 0 ] == a1 + b1 ) && ( l0 [ 1 ] == a2 + b1 ) && ( l0 [ 2 ] == a3 + b1 ) && ( l1 [ 0 ] == a1 + b2 ) && ( l1 [ 1 ] == a2 + b2 ) && ( l1 [ 2 ] == a3 + b2 ) && ( l2 [ 0 ] == a1 + b3 ) && ( l2 [ 1 ] == a2 + b3 ) && ( l2 [ 2 ] == a3 + b3 ) then puts " Yes " else puts " No " end
n = gets . to_i k = gets . chomp . split . sort . uniq . count if k == 3 puts " Three " else puts " Four " end
a , b , c , d = gets . split ( " " ) . map ( & :to_i ) if ( a == 1 or a == 9 or a == 7 or a == 4 ) and ( b == 1 or b == 9 or b == 7 or b == 4 ) and ( a != b ) and ( b != d ) and ( b != c ) and ( c == 1 or c == 9 or c == 7 or c == 4 ) and ( a != c ) and ( d == 1 or d == 9 or d == 7 or d == 4 ) and ( a != d ) and ( c != d ) puts " YES " else puts " NO " end
k , s = gets . chomp ( ) . split ( ' ' ) . map ( & :to_i ) answer = 0 for j in 0 .. k do for m in 0 .. k do ncheck = s - j - m if 0 <= ncheck and ncheck <= k answer = answer + 1 end end end puts ( answer )
class Node attr_accessor :order , :parent , :child , :edges , :lowest , :visited , :isArticulation def initialize @order = nil @parent = - 1 @child = [ ] @edges = [ ] @lowest = nil @visited = false @isArticulation = false end end def dfs ( root , g ) t = 1 stack = [ ] g [ root ] . order = g [ root ] . lowest = t g [ root ] . visited = true stack << root while stack . size > 0 u = stack [ - 1 ] flag = true g [ u ] . edges . each { | x | if g [ x ] . visited == false t += 1 g [ x ] . order = g [ x ] . lowest = t g [ x ] . visited = true g [ x ] . parent = u g [ u ] . child << x flag = false g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . lowest ] . min stack << x break elsif x != g [ u ] . parent g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . order ] . min end } if flag stack . pop g [ u ] . child . each { | v | g [ u ] . lowest = [ g [ u ] . lowest , g [ v ] . lowest ] . min g [ u ] . isArticulation = true if ( u != root && g [ u ] . order <= g [ v ] . lowest ) if g [ u ] . order < g [ v ] . lowest if u < v $bridge << [ u , v ] else $bridge << [ v , u ] end end } end end g [ root ] . isArticulation = true if g [ root ] . child . size > 1 end $bridge = [ ] $t = 1 v , e = gets . split . map ( & :to_i ) graph = Array . new ( v ) { Node . new } e . times { s , t = gets . split . map ( & :to_i ) graph [ s ] . edges << t graph [ t ] . edges << s } dfs ( 0 , graph ) $bridge . sort . each { | a , b | puts " }
gets puts gets =~ / Y / ? :Four : :Three
c = [ ] flag = true 3 . times { | i | c [ i ] = gets . split ( ' ' ) . map ( & :to_i ) } 2 . times { | j | bef = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] 2 . times { | i | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] != bef } } 2 . times { | i | bef = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] 2 . times { | j | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] != bef } } puts flag ? ' Yes ' : ' No '
a = gets . to_i b = gets . split ( " " ) if b . count ( " Y " ) >= 1 puts " Four " else puts " Three " end
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
n = gets . to_i a = 2 n . times do | i | a = a + a + 1 + 1 end p a
if __FILE__ == $0 reads_i = lambda { | s , d | s . strip . split ( d ) . map ( & :to_i ) } data = reads_i [ gets , " " ] k = data [ 0 ] s = data [ 1 ] cnt = 0 for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if x + y == s || ( z <= k && z > 0 ) then cnt += 1 end end end p cnt end
c11 , c12 , c13 = gets . chomp . split . map ( & :to_i ) c21 , c22 , c23 = gets . chomp . split . map ( & :to_i ) c31 , c32 , c33 = gets . chomp . split . map ( & :to_i ) exist = true exist = false unless c11 - c12 == c21 - c22 exist = false unless c21 - c22 == c31 - c32 exist = false unless c12 - c13 == c22 - c23 exist = false unless c22 - c23 == c32 - c33 puts exist ? " Yes " : " No "
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end 0 . upto ( ary [ 0 ] . max ) do | a1 | b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 0 . upto ( ary [ 1 ] . max ) do | a2 | 0 . upto ( ary [ 2 ] . max ) do | a3 | if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' exit end end end end puts ' No '
K , S = gets . split . map & :to_i sum = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y next unless 0 <= z && z <= K sum += 1 end end p sum
a = $stdin . gets . chomp . to_i b = $stdin . gets . chomp . to_i c = $stdin . gets . chomp . to_i d = $stdin . gets . chomp . to_i e = $stdin . gets . chomp . to_i k = $stdin . gets . chomp . to_i if e - a <= k puts " Yay! " else puts " :( " end
gets a = gets . chomp . split ( " " ) puts a . include? ( ' Y ' ) ? " Four " : " Three "
K , S = gets . split . map ( & :to_i ) count = 0 ( K + 1 ) . times do | x | ( K + 1 ) . times do | y | z = S - x - y count += 1 if z >= 0 && z <= K end end puts count
grid = Array . new ( 3 ) . map { Array . new ( 3 ) } ( 0 .. 2 ) . each do | i | str = gets . chomp . split ( " " ) . map { | str | str . to_i } grid [ i ] = str end p = Array . new ( ) q = Array . new ( ) r = Array . new ( ) ( 0 .. 2 ) . each do | i | p <<grid [ i ] [ 0 ] - grid [ i ] [ 1 ] q << grid [ i ] [ 1 ] - grid [ i ] [ 2 ] r << grid [ i ] [ 2 ] - grid [ i ] [ 0 ] end flag1 = p [ 0 ] == p [ 1 ] && p [ 1 ] == p [ 2 ] && p [ 0 ] == p [ 2 ] flag2 = q [ 0 ] == q [ 1 ] && q [ 1 ] == q [ 2 ] && p [ 0 ] == p [ 2 ] flag3 = r [ 0 ] == r [ 1 ] && r [ 1 ] == r [ 2 ] && p [ 0 ] == p [ 2 ] if flag1 && flag2 && flag3 then puts " Yes " else puts " No " end
require ' pp ' n = gets . chomp! . to_i s_n = gets . chomp! . split ( " " ) puts s_n . group_by { | s | s } . length == 4 ? ' Four ' : ' Three '
a , b , c , d , e , k = 6 . times . map { gets . to_i } if ( e - a <= k ) && ( e - b <= k ) && ( e - c <= k ) && ( e - d <= k ) puts " Yay! " else puts " :( " end
lines = [ ] while line = gets lines << line . chomp . split ( ' ' ) . map ( & :to_i ) end N = lines [ 0 ] [ 0 ] min = 100000000000000000000 answer = 0 for i in 1 .. N do if lines [ 1 ] [ i - 1 ] <= min then answer += 1 min = lines [ 1 ] [ i - 1 ] end end print answer
n = gets . to_i array = gets . chop . split . map ( & :to_i ) count = 0 ary = [ ] tmp = 1000000000000000 array . each do | num | if tmp > num tmp = num end if tmp >= num count += 1 end end puts count
n = gets . to_i _p = gets . split . map ( & :to_i ) ans = 1 min = _p [ 0 ] if n != 1 for i in 1 .. n - 1 if min >= _p [ i ] ans += 1 min = _p [ i ] end end end puts ans
require ' set ' set = Set . new ( ) n = gets . to_i s = gets . split s . each do | t | set << t end puts set . size == 3 ? :Three : :Four
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - ( x + y ) if z >= 0 && z <= k && ( x + y + z ) == s count += 1 end end end print ( count )
N = gets . to_i S = gets . chomp . split puts S . include? ( " Y " ) ? " Four " : " Three "
k , s = gets . chomp . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y ans += 1 if 0 <= z && z <= k end end p ans
N = gets . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 min = P [ 0 ] P . each_with_index do | x , i | if i == 0 count += 1 elsif min >= x min = x count += 1 end end puts "
n = gets . to_i ss = gets . split puts ss . index ( ' Y ' ) == nil ? ' Three ' : ' Four '
N = gets . chomp P = gets . split . map ( & :to_i ) count = 0 min = P [ 0 ] 0 . upto ( P . size - 1 ) do | i | if P [ i ] <= min min = P [ i ] count += 1 end end puts count
n = gets . chomp . to_i pn = gets . chomp . split . map ( & :to_i ) result = 1 if pn . size == 1 puts 1 exit end p_min = pn [ 0 ] pn . each_with_index do | pi , i | if i == pn . size - 1 next end if p_min >= pn [ i + 1 ] p_min = pn [ i + 1 ] result += 1 end end puts result
n = gets . chomp . to_i a = gets . chomp . split . map ( & :to_i ) ans = 1 nowmin = a [ 0 ] if n != 1 then ( 1 .. n ) . each do | i | if a [ i ] < nowmin then ans += 1 nowmin = a [ i ] end if nowmin == 1 break end end end puts ans
def f k , s ; s <= k ? ( s + 1 ) * ( s + 2 ) / 2 : s >= 2 * k ? ( 3 * k - s + 1 ) * ( 3 * k - s + 2 ) / 2 : ( 3 * ( k + 1 ) * ( k + 1 ) + 1 - ( k * 3 - s * 2 ) ** 2 ) / 4 end eval " p f " + ` tr ' ' , `
f = n = ( s = [ ] . tap { | s | 6 . times { s <<gets . hex } } ) . pop s . combination ( 2 ) { | a , b | b - a > n && ( f = false ) } puts f ?' Yay! ' : ' : ( '
gets puts gets . chomp . split . uniq . size == 4 ? ' Four ' : ' Three '
arr = [ ] 3 . times { arr <<gets . split . map ( & :to_i ) } a = arr [ 0 ] [ 0 ] b = arr [ 0 ] [ 1 ] c = arr [ 0 ] [ 2 ] d = arr [ 1 ] [ 0 ] e = arr [ 1 ] [ 1 ] f = arr [ 1 ] [ 2 ] g = arr [ 2 ] [ 0 ] h = arr [ 2 ] [ 1 ] i = arr [ 2 ] [ 2 ] if d - a == e - b && e - b == f - c && g - d == h - e && h - e == i - f && b - a == e - d && e - d == h - g && c - b == f - e && f - e == i - h puts " Yes " else puts " No " end
con = [ ] 5 . times do con << gets . chomp . to_i end k = gets . chomp . to_i if con [ 4 ] - con [ 0 ] > k then print ' :( ' else print ' Yay! ' end
n = gets . to_i p = gets . split ( " \s " ) . map ( & :to_i ) min = p [ 0 ] result = 0 p . each do | i | if min >= i min = i result += 1 end end print result
gets puts gets . chomp . split ( " " ) . uniq . size == 4 ? " Four " : " Three "
a , b , c , d , e , k = STDIN . read . lines . map ( & :chomp ) . map ( & :to_i ) if e - a <= k then puts ' Yay! ' else puts ' :( ' end
n = gets . to_i s = gets . chomp . split colors = { " p " : false , " w " : false , " g " : false , " y " : false } n . times do | i | case s [ i ] when " P " colors [ :p ] = true when " W " colors [ :w ] = true when " G " colors [ :g ] = true when " Y " colors [ :y ] = true end end if colors [ :p ] && colors [ :w ] && colors [ :g ] && colors [ :y ] puts " Four " elsif colors [ :p ] && colors [ :w ] && colors [ :g ] puts " Three " end
k , s = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( 0 .. k ) . include? ( z ) count += 1 end end end puts count
N = gets . to_i A = gets . split . map ( & :to_i ) count = 0 A . inject ( 2 * N ) do | smin , a | count += 1 if a <= smin a < smin ? a : smin end puts count
K , S = $< . read . split . map ( & :to_i ) c = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y c += 1 if 0 <= z && z <= K end end puts c
def main ( argv ) ns = gets . chomp . split ( ' ' ) . map ( & :to_i ) . sort puts ( ns == [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ) end if self . to_s == ' main ' then main ( ARGV ) end
k , s = gets . chomp . split . map ( & :to_i ) count = ( 0 .. k ) . inject ( 0 ) { | sum , i | ( 0 .. k ) . each { | j | sum = ( s - i - j <= k ) && ( s - i - j >= 0 ) ? sum + 1 : sum } sum } puts count
c = [ ] for i in 0 .. 2 c [ i ] = gets . strip . split . map ( & :to_i ) end a_1 = 0 b_1 = c [ 0 ] [ 0 ] b_2 = c [ 0 ] [ 1 ] b_3 = c [ 0 ] [ 2 ] a_2 = c [ 1 ] [ 0 ] - b_1 a_3 = c [ 2 ] [ 0 ] - b_1 if a_2 + b_2 == c [ 1 ] [ 1 ] && a_2 + b_3 == c [ 1 ] [ 2 ] && a_3 + b_2 == c [ 2 ] [ 1 ] && a_3 + b_3 == c [ 2 ] [ 2 ] puts ' Yes ' else puts ' No ' end
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end ( 0 .. 100 ) . each do | a1 | ( 0 .. 100 ) . each do | a2 | ( 0 .. 100 ) . each do | a3 | flags = [ ] 3 . times do | i | flag1 = c [ i ] [ 0 ] - a1 flag2 = c [ i ] [ 1 ] - a2 flag3 = c [ i ] [ 2 ] - a3 if flag1 == flag2 && flag2 == flag3 && flag3 == flag1 then flags << true else flags << false end end if flags . all? { | v | v } then puts " Yes " exit end end end end puts " No "
K , S = readline . split ( ' ' ) . map ( & :to_i ) count = 0 for x in ( 0 .. K ) remain = S - x next if remain > 2 * K break if remain < 0 for y in ( 0 .. K ) remain2 = S - x - y break if remain2 < 0 next if remain2 > K count += 1 end end puts count
gets puts gets . include? ( ?Y ) ? :Four : :Three
n = gets . to_i ary = gets . split . map ( & :to_i ) min = ary [ 0 ] puts ary . count { | x | x <= min ? ( min = x ; true ) : ( false ) }
ret = 0 k , s = gets . split . map ( & :to_i ) for i in 0 .. k for j in 0 .. k ret += 1 if s - j - i <= k && s - j - i >= 0 end end puts ret
N = gets . chomp . to_i P = gets . chomp . split . map ( & :to_i ) ans = 1 minV = P [ 0 ] ( 1 . upto ( N - 1 ) ) . each do | i | if ( P [ i ] < minV ) ans += 1 end if ( P [ i ] < minV ) minV = P [ i ] end end p ans
k , s = gets . split . map ( & :to_i ) ret = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y next unless 0 <= z && z <= k ret += 1 end end puts ret
i = 0 arr = [ ] while i < 5 n = gets . chomp . to_i arr << n i += 1 end k = gets . chomp . to_i if k < ( arr [ 0 ] - arr [ - 1 ] ) . abs puts " :( " else puts " Yay! " end
N = gets . split . map ( & :to_i ) if N . sort == [ 1 , 4 , 7 , 9 ] puts ' YES ' else puts ' NO ' end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts ' Yay! ' else puts ' :( ' end
c = 3 . times . map { gets . split . map ( & :to_i ) } a = Array . new ( 3 ) b = Array . new ( 3 ) isOut = false a [ 0 ] = 0 ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | isOut = true if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] end a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | isOut = true if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] end if isOut puts ' No ' else puts ' Yes ' end
c = [ nil ] * 3 3 . times { | i | c [ i ] = gets . chomp . split ( ' ' ) . map ( & :to_i ) } d = [ 0 ] * 3 d [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] d [ 1 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] d [ 2 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] puts ( ( ( d [ 0 ] == d [ 1 ] ) and ( d [ 1 ] == d [ 2 ] ) ) ? ' Yes ' : ' No ' )
k , s = gets . split ( ' ' ) . map ( & :to_i ) puts ( 0 .. k ) . map { | x | ( 0 .. k ) . map { | y | s - x - y } . select { | z | 0 <= z && z <= k } . size } . inject ( & :+ )
C = 3 . times . map { gets . chomp . split . map ( & :to_i ) } 3 . times do | i | m = C [ i ] . min 3 . times do | j | C [ i ] [ j ] -= m end end 3 . times do | i | if C [ 0 ] [ i ] != C [ 1 ] [ i ] || C [ 1 ] [ i ] != C [ 2 ] [ i ] puts ' No ' exit end end puts ' Yes '
n = gets . to_i puts gets . chomp . split ( " " ) . count ( " Y " ) > 0 ? :Four : :Three
n = gets . chomp . to_i s = gets . split . map ( & :to_s ) result = " Three " result = " Four " if ( s . include? ( " Y " ) ) puts result
gets ary = gets . chomp . split . map ( & :to_i ) ret = 0 min = ary [ 0 ] ary . each . with_index ( 1 ) do | pi , i | next if pi > min min = pi ret += 1 end puts ret
n = gets . to_i exit if n < 3 val = [ 0 , 0 , 0 , 0 ] arares = gets . chomp . split ( " " ) n . times do | i | val [ 0 ] = val [ 0 ] + 1 if arares [ i ] == " P " && val [ 0 ] == 0 val [ 1 ] = val [ 1 ] + 1 if arares [ i ] == " W " && val [ 1 ] == 0 val [ 2 ] = val [ 2 ] + 1 if arares [ i ] == " G " && val [ 2 ] == 0 val [ 3 ] = val [ 3 ] + 1 if arares [ i ] == " Y " && val [ 3 ] == 0 end case val . inject { | sum , n | sum + n } when 3 then puts " Three " when 4 then puts " Four " else end
k , s = gets . split ( ' ' ) . map ( & :to_i ) ans = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y ans += 1 if z >= 0 && z <= k end end p ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
n = gets . chomp . split . sort . join puts n == " 1479 " ? " YES " : " NO "
C = Array . new ( 3 ) { gets . split . map ( & :to_i ) } Y = [ 0 ] X = C [ 0 ] Y [ 1 ] = C [ 1 ] [ 0 ] - X [ 0 ] Y [ 2 ] = C [ 2 ] [ 0 ] - X [ 0 ] answer = true for i in 1 .. 2 for j in 1 .. 2 if C [ i ] [ j ] != X [ j ] + Y [ i ] answer = false end end end puts answer ? " Yes " : " No "
arr = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } ans = arr . inject ( :+ ) . inject ( :+ ) all = arr [ 0 ] [ 0 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 2 ] bll = arr [ 0 ] [ 2 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 0 ] if all == ( ans / 3 ) && ans % 3 == 0 puts " Yes " elsif bll == ( ans / 3 ) && ans % 3 == 0 puts " Yes " else puts " No " end
n = gets . chomp . to_i colors = gets . chomp . split puts colors . include? ( " Y " ) ? " Four " : " Three "
line = STDIN . gets k , s = line . split ( ' ' ) . map ( & :to_i ) satisfied = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if ( z <= k && z >= 0 ) satisfied += 1 end end end puts satisfied
K , S = gets . chomp . split . map ( & :to_i ) ans = 0 ( K + 1 ) . times do | i | ( K + 1 ) . times do | j | z = S - i - j if z <= K && 0 <= z ans += 1 end end end puts ans
N = gets . to_i P = gets . chomp . split ( ' ' ) . map { | n | n . to_i } count = 0 min = - 1 0 . upto ( P . size - 1 ) do | i | if min == - 1 || min >= P [ i ] min = P [ i ] count = count + 1 end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) ans += 1 if z >= 0 && z <= k end end puts ans
k , s = gets . split ( " " ) . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y cnt += 1 if z >= 0 && z <= k end end puts cnt
board = Array . new ( 3 ) do gets . split . map ( & :to_i ) end delta = Array . new ( 4 ) do Array . new end 3 . times do | i | 3 . times do | j | if i + 1 < 3 then delta [ i ] << board [ i + 1 ] [ j ] - board [ i ] [ j ] end if j + 1 < 3 then delta [ 2 + j ] << board [ i ] [ j + 1 ] - board [ i ] [ j ] end end end delta . each do | a | if a . uniq . length != 1 then puts " No " exit 0 end end puts " Yes "
line = gets . chomp . split ( ' ' ) . map { | e | e . to_i } k = line [ 0 ] s = line [ 1 ] count = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if 0 <= z && z <= k count += 1 end end end puts count
c = [ ] 3 . times do c . push gets . chomp . split ( ) . map ( & :to_i ) end x = Array . new ( 3 ) y = Array . new ( 3 ) x [ 0 ] = 0 3 . times do | i | y [ i ] = c [ i ] [ 0 ] end 3 . times do | i | x [ i ] = c [ 0 ] [ i ] - y [ 0 ] end 1 . upto ( 2 ) . each do | i | 1 . upto ( 2 ) . each do | j | if c [ i ] [ j ] != y [ i ] + x [ j ] puts ' No ' exit end end end puts ' Yes '
T1 , T2 = gets . split . map & :to_i A1 , A2 = gets . split . map & :to_i B1 , B2 = gets . split . map & :to_i a1 = T1 * A1 a2 = T2 * A2 b1 = T1 * B1 b2 = T2 * B2 if a1 + a2 == b1 + b2 puts :infinity elsif ( a1 - b1 ) * ( ( a1 - b1 ) + ( a2 - b2 ) ) > 0 puts 0 else puts 2 * ( ( b1 - a1 ) / ( ( a1 - b1 ) + ( a2 - b2 ) ) ) + ( ( ( b1 - a1 ) % ( ( a1 - b1 ) + ( a2 - b2 ) ) == 0 ) ? 0 : 1 ) end
m = gets . to_i nums = gets . split . map ( & :to_i ) c = 0 nums . each { | val | if val <= m m = val c += 1 end } puts c
gets . to_i puts gets . chomp . split ( " " ) . include? ( ' Y ' ) ? ' Four ' : ' Three '
def calc ( l ) return 0 if l <= 2 return calc ( ( l - 1 ) / 2 ) + 1 end x = gets . to_i l = 2 h = 10000000000000 while l < h c = ( l + h + 1 ) / 2 y = calc ( c ) if y <= x l = c else h = c - 1 end end p l
count = 0 ans = 0 xmax , num = gets . split . map & :to_i preans = 0 for i in 0 .. xmax jmax = [ num - i , xmax ] . min for j in 0 .. jmax if num - i - j >= 0 && num - i - j <= xmax then ans += 1 end end end puts ans
K , S = gets . split . map ( & :to_i ) p ( 0 .. K ) . map { | x | s = S - x next 0 if s < 0 s >= K ? [ 2 * K - s + 1 , 0 ] . max : s + 1 } . inject ( :+ )
n = gets . chomp . to_i p = gets . chomp . split ( / \s + / ) . map { | e | e . to_i } count = 0 min = p [ 0 ] n . times { | i | count += 1 if min >= p [ i ] min = p [ i ] if min > p [ i ] } puts count
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ; cnt = 0 for a in 0 .. k do break if a > s for b in 0 .. k do break if ( a + b ) > s z = s - ( a + b ) cnt += 1 if ( 0 <= z && z <= k ) && a + b + z = s end end puts cnt
a , b , c , d , e , k = readlines . map ( & :to_i ) if b - a <= k && c - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k puts " Yay! " else puts " :( " end
N = gets . to_i S = gets . split if S . uniq . size == 3 puts " Three " else puts " Four " end
a = gets puts gets . split . uniq . size == 3 ? " Three " : " Four " ;
k , s = gets . split ( ' ' ) K = k . to_i S = s . to_i count = 0 ( K + 1 ) . times do | x | ( K + 1 ) . times do | y | z = S - ( x + y ) if 0 <= z && z <= K then count += 1 end end end puts count
K , S = gets . split . map ( & :to_i ) count = 0 for x in 0 .. K if S - x > K * 2 next end for y in 0 .. ( [ S - x , K ] . min ) z = S - x - y if 0 <= z && z <= K count += 1 end end end puts count
ary = Array . new ( 3 , Array . new ( 3 , nil ) ) ary [ 0 ] = gets . split ( ' ' ) . map ( & :to_i ) . dup ary [ 1 ] = gets . split ( ' ' ) . map ( & :to_i ) . dup ary [ 2 ] = gets . split ( ' ' ) . map ( & :to_i ) . dup i = 0 [ * 0 .. 1 ] . each { | j | a = ary [ i ] [ j ] - ary [ i ] [ j + 1 ] if ( ary [ i + 1 ] [ j ] - ary [ i + 1 ] [ j + 1 ] ) != a or ( ary [ i + 2 ] [ j ] - ary [ i + 2 ] [ j + 1 ] ) != a then puts ' No ' exit end a = ary [ j ] [ i ] - ary [ j + 1 ] [ i ] if ( ary [ j ] [ i + 1 ] - ary [ j + 1 ] [ i + 1 ] ) != a or ( ary [ j ] [ i + 2 ] - ary [ j + 1 ] [ i + 2 ] ) != a then puts ' No ' exit end } puts ' Yes '
n = gets . chomp . split puts n . permutation ( 4 ) . any? { | a , b , c , d | a + b + c + d == " 1794 " } ? :YES : :NO
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end def check_row ( ary ) ary [ 0 ] . zip ( ary [ 1 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 && ary [ 0 ] . zip ( ary [ 2 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 end answer = check_row ( c ) && check_row ( c . transpose ) puts answer ? ' Yes ' : ' No '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
nums = [ ] 3 . times { nums << gets . split . map ( & :to_i ) } res = false 101 . times do | a_i | b_i = nums [ 0 ] [ 0 ] - a_i b_j = nums [ 0 ] [ 1 ] - a_i b_k = nums [ 0 ] [ 2 ] - a_i 101 . times do | a_j | 101 . times do | a_k | as = [ a_i , a_j , a_k ] bs = [ b_i , b_j , b_k ] valid = true 3 . times do | a | 3 . times do | b | if nums [ a ] [ b ] != as [ a ] + bs [ b ] valid = false break end end end if valid res = true break end end end end puts res ? " Yes " : " No "
puts $< . map { | s | eval " 100*(%d-c=%d)+%d-c " % s . split } . uniq [ 1 ] ? :No : :Yes
a = [ ] 5 . times do | i | a [ i ] = gets . to_i end k = gets . to_i check = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 if k < ( a [ i ] - a [ j ] ) . abs then check = false end end end if check then puts " Yay! " else puts " :( " end
lines = readlines . map { | line | line . split ( ' ' ) . map ( & :to_i ) } a = 0 b = lines [ 0 ] [ 0 ] for i in 0 .. lines [ 0 ] [ 0 ] - 1 f = 0 b = b <= lines [ 1 ] [ i ] ? b : lines [ 1 ] [ i ] if b >= lines [ 1 ] [ i ] then a = a + 1 end end puts a
k , s = $stdin . gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | if s >= x + y && k >= ( s - ( x + y ) ) ans += 1 end end end puts ans
k , s = gets . split . map ( & :to_i ) a = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | a += 1 if ( x + y <= s && s - x - y <= k ) } } puts a
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i arr = [ a , b , c , d , e ] . sort! first = arr . first last = arr . last if ( last - first ) > k puts ' :( ' else puts ' Yay! ' end
n = gets . strip . to_i nums = gets . strip . split ( " " ) . map ( & :to_i ) min = Float :: INFINITY count = 0 nums . each . with_index do | n , i | if min >= n count += 1 min = n end end puts count
n = gets . to_i a = gets . split . map ( & :to_i ) m = Float :: INFINITY ans = 0 a . each_with_index do | ai , i | if ai < m m = ai ans += 1 end end p ans
k , s = STDIN . read . scan ( / \d + / ) . map ( & :to_i ) p ( 0 .. k ) . flat_map { | x | ( 0 .. k ) . select { | y | z = s - ( x + y ) if 0 <= z && z <= k true else false end } } . size
a , b , c , d = gets . split . map ( & :to_i ) . sort if a == 1 && b == 4 && c == 7 && d == 9 puts " YES " else puts " NO " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
n = gets . to_i a = [ ] n . times do | i | a << gets . to_i end min = 1 ans = 0 n . times do | i | if i == 0 ans += a [ 0 ] - 1 min = 2 else if a [ i ] < min next elsif a [ i ] == min min += 1 else if a [ i ] % min == 0 ans += a [ i ] / min - 1 else ans += a [ i ] / min end end end end puts ans
N , * P = $< . read . split . map & :to_i m = P [ 0 ] p P . count { | i | m = i if i <= m }
n = gets . to_i s = gets . split flg = " Three " for i in 0 .. n if ( s [ i ] == " Y " ) then flg = " Four " break end end puts flg
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
$/ = ' ' ; k , s = $< . map & :to_i ; r = 0 ; k += 1 ; ( k * k ) . times { | x | z = s - x / k - x % k ; 0 <= z && z < k && r += 1 } ; p r
n = gets . chomp . to_i s = gets . split flag = false n . times { | i | flag = true if s [ i ] == ' Y ' } puts flag ? ' Four ' : ' Three '
numbers = [ ] 3 . times { numbers << gets . split . map ( & :to_i ) } def deduct_minimum ( ary ) ary . each_with_index do | row , index | min = row . min row . each_with_index do | num , index2 | ary [ index ] [ index2 ] -= min end end ary end numbers = deduct_minimum ( numbers ) numbers = deduct_minimum ( numbers . transpose ) puts numbers . flatten . inject ( :+ ) == 0 ? " Yes " : " No "
gets . to_i puts gets . split . uniq . length == 3 ? " Three " : " Four "
n = gets . to_i ary = gets . strip . split puts ary . uniq . length == 3 ? " Three " : " Four "
$> << [ :Three , :Four ] [ ` dd ` . split . uniq . size % 2 ]
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a . max + 1 a . each do | v | min >= v && ( min = v and cnt += 1 ) end puts cnt
n = gets . chomp . to_i s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 arr = Float :: INFINITY n . times do | i | mokuteki = s [ i ] arr = [ mokuteki , arr ] . min count += 1 if mokuteki <= arr end puts count
arr = [ ] 3 . times do arr << gets . split . map ( & :to_i ) end pre = Array . new ( 3 ) 3 . times do | i | 3 . times do | j | if pre [ j ] && pre [ j ] != arr [ ( j + 1 ) % 3 ] [ i ] - arr [ j ] [ i ] puts " No " exit end pre [ j ] = arr [ ( j + 1 ) % 3 ] [ i ] - arr [ j ] [ i ] end end pre2 = Array . new ( 3 ) 3 . times do | i | 3 . times do | j | if pre2 [ j ] && pre2 [ j ] != arr [ i ] [ ( j + 1 ) % 3 ] - arr [ i ] [ j ] puts " No " exit end pre2 [ j ] = arr [ i ] [ ( j + 1 ) % 3 ] - arr [ i ] [ j ] end end puts " Yes "
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y ans += 1 if 0 <= z && z <= k end end puts ans
arr = [ ] 5 . times do | i | a = gets . chomp . to_i arr << a end k = gets . chomp . to_i kkk = [ ] arr . each do | f | arr . each do | k | kkk << ( f - k ) . abs end end until kkk == [ ] aaa = kkk . pop if aaa > k puts " :( " exit end end puts " Yay! "
n = gets . to_i a = n . times . map { gets . to_i } sum = 0 maxa = 0 n . times do | i | if i . zero? sum = a [ 0 ] . pred a [ 0 ] = 1 else if a [ i ] <= maxa . succ else t = a [ i ] / maxa . succ f = a [ i ] % maxa . succ if f . zero? a [ i ] = 1 sum += t . pred else a [ i ] = f sum += t end end end maxa = [ a [ i ] , maxa ] . max end p sum
d = readlines . map ( & :to_i ) puts d [ 4 ] - d [ 0 ] <= d [ 5 ] ? " Yay! " : " :( "
n = gets ary = gets . split if ary . uniq! . size == 3 puts " Three " else puts " Four " end
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } for i in 0 .. 1 for j in i + 1 .. 2 for k in 0 .. 1 for l in k + 1 .. 2 if c [ i ] [ k ] + c [ j ] [ l ] != c [ i ] [ l ] + c [ j ] [ k ] puts " No " exit end end end end end puts " Yes "
gets c = gets . chomp puts c . match ( ' Y ' ) ? ' Four ' : ' Three '
c11 , c12 , c13 = gets . chomp . split . map ( & :to_i ) c21 , c22 , c23 = gets . chomp . split . map ( & :to_i ) c31 , c32 , c33 = gets . chomp . split . map ( & :to_i ) 0 . upto ( c11 ) do | a1 | a2 = a1 - ( c11 - c21 ) a3 = a1 - ( c11 - c31 ) b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 if [ a2 , a3 , b1 , b2 , b3 ] . all? { | e | e >= 0 && e <= 100 } if a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 puts ' Yes ' exit end end end puts ' No '
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
number = gets . split ( ' ' ) count = 0 k = number [ 0 ] . to_i s = number [ 1 ] . to_i for x in 0 .. k do for y in 0 .. k do z = s - x - y if z <= k and z >= 0 then count = count + 1 end end end puts count
k , s = gets . chomp . split . map ( & :to_i ) kArraies = ( 0 .. k ) . to_a count = 0 kArraies . repeated_permutation ( 2 ) { | p1 , p2 | z = s - ( p1 + p2 ) count += 1 if z >= 0 && z <= k } puts count
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | ans += 1 if ( s - x - y ) . between? ( 0 , k ) end end puts ans
pos = 5 . times . map { gets . to_i } k = gets . to_i puts pos [ 4 ] - pos [ 0 ] > k ? " :( " : " Yay! "
eval " S= " + ` tr ' ' + ` ; p S <=> 0
array = [ ] 5 . times do array << gets . chomp . to_i end k = gets . chomp . to_i out = 0 5 . times do | i | i + 1 . times do | j | if array [ i ] - array [ j ] > k out += 1 end end end puts out == 0 ? ' Yay! ' : ' :( '
c = Array . new ( 3 ) c [ 0 ] = gets . split . map ( & :to_i ) c [ 1 ] = gets . split . map ( & :to_i ) c [ 2 ] = gets . split . map ( & :to_i ) if 0 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] - c [ 0 ] [ 1 ] - c [ 1 ] [ 2 ] - c [ 2 ] [ 0 ] && 0 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] - c [ 1 ] [ 0 ] - c [ 2 ] [ 1 ] then print " Yes \n " else print " No \n " end
n = gets . to_i pp = gets . split . map ( & :to_i ) ans = 0 min = n + 1 n . times do | i | if min > pp [ i ] ans += 1 min = pp [ i ] end end puts ans
puts " " < ` awk '2<++a[$1-$2,$2-$3]' ` ? :Yes : :No
n = gets . chomp . to_i s = gets . chomp . split ( " " ) hash = Hash . new ( 0 ) s . each do | i | hash [ i ] += 1 end if hash . size == 3 puts " Three " else puts " Four " end
n = gets . to_i p = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 min = p [ 0 ] ( n - 1 ) . times do | i | if min >= p [ i ] ans += 1 end min = ( min > p [ i ] ) ? p [ i ] : min end puts ans + ( ( min >= p [ n - 1 ] ) ? 1 : 0 )
N = gets . split . map & :to_i ; if ( N . sort ) == [ 1 , 4 , 7 , 9 ] then puts " YES " else puts " NO " end
n = gets . to_i ar = gets . chomp . split if ar . uniq . count == 3 puts " Three " else puts " Four " end
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( x + y <= s && s - x - y <= k ) end end puts cnt
ca = Array . new ( 5 ) { gets . to_i } k = gets . to_i puts ( ca [ 4 ] - ca [ 0 ] > k ) ? " :( " : " Yay! "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i array = a , b , c , d , e array . sort if k < ( array . last - array . first ) print " :( " else print " Yay! " end
def dif_row ( r1 , r2 ) x = [ ] 3 . times { | i | x <<r1 [ i ] - r2 [ i ] } x . uniq . size == 1 end c = [ ] 3 . times { c << gets . chomp . split . map ( & :to_i ) } d = c . transpose if dif_row ( c [ 0 ] , c [ 1 ] ) && dif_row ( c [ 0 ] , c [ 2 ] ) && dif_row ( d [ 0 ] , d [ 1 ] ) && dif_row ( d [ 0 ] , d [ 2 ] ) puts ' Yes ' else puts ' No ' end
n = gets . to_i hina = gets . split ( " " ) . uniq puts ( hina . size == 3 ) ? " Three " : " Four "
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k ans += 1 end end end p ans
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
c = ( 1 .. 3 ) . map { gets . split . map ( & :to_i ) } b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] puts ( 0 .. 2 ) . all? { | i | ( 0 .. 2 ) . all? { | j | a [ i ] + b [ j ] == c [ i ] [ j ] } } ? :Yes : :No
gets puts ( gets =~ / Y / ? " Four " : " Three " )
K , S = gets . split . map ( & :to_i ) a = Array . new if K < S for i in 0 .. K if K >= S - i && 2 * K >= S - i a [ i ] = S - i + 1 elsif K < S - i && 2 * K >= S - i a [ i ] = ( S - ( 2 * K ) - i ) . abs + 1 else a [ i ] = 0 end end elsif S <= K for i in 0 .. S a [ i ] = S - i + 1 end end puts a . inject ( :+ )
puts ` awk '$0=++a[$1-$2,$2-$3]' ` [ ?3 ] ? :Yes : :No
n = gets . to_i p = gets . split . map ( & :to_i ) cnt = 0 min = p [ 0 ] for i in 0 .. ( n - 1 ) min = [ min , p [ i ] ] . min cnt += 1 if min >= p [ i ] end puts cnt
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = 1 ) if size2 == 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end c = array ( 3 ) 3 . times do | i | c [ i ] = get_i end flag = true - 100 . upto ( 100 ) do | a | b = [ c [ 0 ] [ 0 ] - a , c [ 0 ] [ 1 ] - a , c [ 0 ] [ 2 ] - a ] flag = true 1 . upto ( 2 ) do | i | unless c [ i ] [ 0 ] - b [ 0 ] == c [ i ] [ 1 ] - b [ 1 ] and c [ i ] [ 1 ] - b [ 1 ] == c [ i ] [ 2 ] - b [ 2 ] flag = false end end end puts yn_judge ( flag )
n = STDIN . gets . to_i pn = STDIN . gets . split . map ( & :to_i ) min = pn . first count = 0 pn . each do | i | if i <= min min = i count = count + 1 end end puts count
gets n = gets . chomp . split ( " " ) . uniq . length if n == 3 then puts " Three " else puts " Four " end
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | i | ( 0 .. K ) . each do | j | break if i + j > S ans += 1 if S - i - j <= K end end puts ans
K , S = gets . split . map ( & :to_i ) cnt = 0 min_x = [ 0 , S - 2 * K ] . max max_x = [ K , S ] . min min_x . upto ( max_x ) do | i | max_y = [ S - i , K ] . min 0 . upto ( max_y ) do | j | k = S - i - j cnt += 1 if k . between? ( 0 , K ) end end puts cnt
c = [ ] while s = gets c . push ( s . split . map ( & :to_i ) ) end if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) puts " No " exit elsif ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) || ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) puts " No " exit elsif ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) puts " No " exit elsif ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ) || ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) puts " No " exit end puts " Yes "
n = gets . to_i s = gets . gsub ( " " , " " ) puts s [ " Y " ] ? " Four " : " Three "
a = gets . split . map ( & :to_i ) s = " %d+%d%d+%d%d%d==%d%d%d " nums = ( 1 .. 9 ) . to_a - a . select { | x | x != - 1 } if nums . empty? p eval ( sprintf ( s , * a ) ) ? 1 : 0 else k = 0 nums . permutation ( nums . size ) do | perm | d = a . dup perm . each do | k | d [ d . index { | x | x < 0 } ] = k end k += 1 if eval ( sprintf ( s , * d ) ) end p k end
ARR = gets . split ( " " ) . map { | i | i . to_i } if ( ARR . include? ( 1 ) && ARR . include? ( 9 ) && ARR . include? ( 7 ) && ARR . include? ( 4 ) ) puts " YES " else puts " NO " end
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) && check ( mat . transpose ) then puts " Yes " else puts " No " end
K , S = gets . split . map ( & :to_i ) sum = 0 for x in 0 .. K for y in 0 .. K z = S - x - y sum += 1 if ( 0 <= z && z <= K ) end end puts sum
k , s = gets . split . map ( & :to_i ) array = [ ] ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z < 0 break else array << [ x , y , z ] if z <= k end end end puts array . size
a , b = readlines . map ( & :chomp ) . map ( & :to_i ) . each_slice ( 5 ) . to_a puts a . permutation ( 2 ) . select { | n , m | m - n > b [ 0 ] } . any? ? " :( " : " Yay! "
n = gets . chomp . to_i inputs = gets . split . map ( & :to_i ) reject = 0 temp = 200000 ( 0 ... n ) . each do | i | _temp_1 = inputs [ i ] if temp < _temp_1 reject += 1 else temp = _temp_1 end end puts n - reject
puts gets . split . sort == %w( 1 4 7 9 ) ? :YES : :NO
h , r = gets . split ( ' ' ) . map ( & :to_i ) if h + r < 0 puts - 1 elsif h + r == 0 puts 0 else puts 1 end
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) a = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] if a [ 1 ] + b [ 1 ] != c [ 1 ] [ 1 ] || a [ 1 ] + b [ 2 ] != c [ 1 ] [ 2 ] || a [ 2 ] + b [ 1 ] != c [ 2 ] [ 1 ] || a [ 2 ] + b [ 2 ] != c [ 2 ] [ 2 ] puts " No " else puts " Yes " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( 0 .. k ) . include? ( z ) count += 1 end end end p count
N = gets . chomp . to_i a = Array . new ( N ) str = gets . split for i in 0 ... N do a [ i ] = str [ i ] . to_i end answer = 1 min = a [ 0 ] for i in 1 ... N do if a [ i ] < min min = a [ i ] answer += 1 end end puts answer
c = [ ] csum0 = 0 3 . times do row = gets . chomp . split ( " " ) . map ( & :to_i ) csum0 += row . inject ( :+ ) c << row end csum1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] csum2 = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] if csum0 == csum1 * 3 && csum0 == csum2 * 3 then puts " Yes " else puts " No " end
N = gets . chomp P = gets . split . map ( & :to_i ) count = 1 min = P [ 0 ] 1 . upto ( P . size - 1 ) do | i | if P [ i ] <= min min = P [ i ] count += 1 end end puts count
c = [ nil ] 3 . times do c << [ nil ] + gets . split . map ( & :to_i ) end puts [ c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] + c [ 3 ] [ 3 ] == c [ 2 ] [ 3 ] + c [ 3 ] [ 2 ] , c [ 1 ] [ 2 ] + c [ 2 ] [ 3 ] == c [ 1 ] [ 3 ] + c [ 2 ] [ 2 ] , c [ 2 ] [ 1 ] + c [ 3 ] [ 2 ] == c [ 2 ] [ 2 ] + c [ 3 ] [ 1 ] ] . all? { | x | x } ? ' Yes ' : ' No '
N = gets . to_i S = gets . split if S . uniq . size == 4 puts ' Four ' else puts ' Three ' end
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = N min = Ps . first Ps . each do | pi | ans -= 1 if pi > min min = pi if pi < min end puts ans
a = gets . to_i gets gets gets e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
cs = [ ] 3 . times do cs << gets . split . map ( & :to_i ) end w_div = [ ] h_div = [ ] for i in 0 .. 2 do w_div << [ cs [ i ] [ 0 ] - cs [ i ] [ 1 ] , cs [ i ] [ 1 ] - cs [ i ] [ 2 ] ] h_div << [ cs [ 0 ] [ i ] - cs [ 1 ] [ i ] , cs [ 1 ] [ i ] - cs [ 2 ] [ i ] ] end ans = ' Yes ' for i in 0 .. 1 do if w_div [ i ] != w_div [ i + 1 ] || h_div [ i ] != h_div [ i + 1 ] ans = ' No ' end end puts ans
_n = gets . to_i array = gets . split ( " " ) count = array . uniq . length if count == 3 then puts " Three " elsif count == 4 then puts " Four " end
k , s = gets . split . map ( & :to_i ) result = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | result += 1 if x + y <= s && s - x - y <= k end end puts result
N = gets . to_i s = gets puts s . index ( ?Y ) ? " Four " : " Three "
n = gets . to_i arr = gets . chomp . split ( ' ' ) if arr . uniq . size == 3 puts " Three " else puts " Four " end
require ' pp ' c = [ ] c [ 0 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) c [ 1 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) c [ 2 ] = gets . chomp! . split ( " " ) . map ( & :to_i ) if c [ 0 ] . zip ( c [ 1 ] ) . map { | i , j | i - j } . uniq . length == 1 && c [ 1 ] . zip ( c [ 2 ] ) . map { | i , j | i - j } . uniq . length == 1 && c [ 2 ] . zip ( c [ 0 ] ) . map { | i , j | i - j } . uniq . length == 1 x = c . transpose if x [ 0 ] . zip ( x [ 1 ] ) . map { | i , j | i - j } . uniq . length == 1 && x [ 1 ] . zip ( x [ 2 ] ) . map { | i , j | i - j } . uniq . length == 1 && x [ 2 ] . zip ( x [ 0 ] ) . map { | i , j | i - j } . uniq . length == 1 puts " Yes " else puts " No " end else puts " No " end
n = gets . to_i s = gets . split . map ( & :to_s ) puts s . include? ( ' Y ' ) ? :Four : :Three
ARGF . each { | line | a = line . split . sort! v = a . join . to_i if v == 1479 puts " YES " else puts " NO " end exit }
n = gets . to_i s = gets . split flag = false s . each do | e | flag = true if e == " Y " end puts flag ? " Four " : " Three "
c0 = gets . chomp . split ( " " ) . map ( & :to_i ) c1 = gets . chomp . split ( " " ) . map ( & :to_i ) c2 = gets . chomp . split ( " " ) . map ( & :to_i ) a01 = c1 [ 0 ] - c0 [ 0 ] a02 = c2 [ 0 ] - c0 [ 0 ] b01 = c0 [ 1 ] - c0 [ 0 ] b02 = c0 [ 2 ] - c0 [ 0 ] for a0 in 0 .. 100 do for b0 in 0 .. 100 do a1 = a0 + a01 a2 = a0 + a02 b1 = b0 + b01 b2 = b0 + b02 if c0 [ 0 ] == a0 + b0 and c0 [ 1 ] == a0 + b1 and c0 [ 2 ] == a0 + b2 and c1 [ 0 ] == a1 + b0 and c1 [ 1 ] == a1 + b1 and c1 [ 2 ] == a1 + b2 and c2 [ 0 ] == a2 + b0 and c2 [ 1 ] == a2 + b1 and c2 [ 2 ] == a2 + b2 then puts " Yes " exit end end end puts " No "
k , s = gets . split . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y count += 1 if 0 <= z && z <= k end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
