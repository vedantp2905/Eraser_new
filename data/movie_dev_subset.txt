box = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) box . append ( a ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : a1_b1 = box [ 0 ] [ 0 ] - a1 a1_b2 = box [ 1 ] [ 0 ] - a1 a1_b3 = box [ 2 ] [ 0 ] - a1 a2_b1 = box [ 0 ] [ 1 ] - a2 a2_b2 = box [ 1 ] [ 1 ] - a2 a2_b3 = box [ 2 ] [ 1 ] - a2 f = True if a1_b1 != a2_b1 or a1_b2 != a2_b2 or a1_b3 != a2_b3 : f = False a1_b = [ a1_b1 , a1_b2 , a1_b3 ] a2_b = [ a2_b1 , a2_b2 , a2_b3 ] res = True a1_a3 = [ ] a2_a3 = [ ] for i in range ( 3 ) : if ( box [ i ] [ 2 ] - a1_b [ i ] ) != ( box [ i ] [ 2 ] - a2_b [ i ] ) : res = False a1_a3 . append ( box [ i ] [ 2 ] - a1_b [ i ] ) a2_a3 . append ( box [ i ] [ 2 ] - a2_b [ i ] ) a3 = a1_a3 [ 0 ] for i in range ( 1 , 3 ) : if a3 != a1_a3 [ i ] : res = False a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a = [ a1 , a2 , a3 ] b = a3_b for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False res = True for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False if res : print ( " Yes " ) exit ( ) print ( " No " )
def main ( * args , ** kwargs ) : grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 101 ) : b1_1 = grid [ 0 ] [ 0 ] - a1 b2_1 = grid [ 0 ] [ 1 ] - a1 b3_1 = grid [ 0 ] [ 2 ] - a1 for a2 in range ( 0 , 101 ) : b1_2 = grid [ 1 ] [ 0 ] - a2 b2_2 = grid [ 1 ] [ 1 ] - a2 b3_2 = grid [ 1 ] [ 2 ] - a2 for a3 in range ( 0 , 101 ) : b1_3 = grid [ 2 ] [ 0 ] - a3 b2_3 = grid [ 2 ] [ 1 ] - a3 b3_3 = grid [ 2 ] [ 2 ] - a3 if b1_1 == b1_2 == b1_3 and b2_1 == b2_2 == b2_3 and b3_1 == b3_2 == b3_3 : print ( ' Yes ' ) return print ( ' No ' ) return main ( )
A = [ None , None , None ] B = [ 0 , None , None ] C = [ None , None , None ] for i in range ( 3 ) : A [ i ] = list ( map ( int , input ( ) . split ( ) ) ) flag = True for i in range ( 3 ) : for j in range ( 3 ) : if B [ i ] == None : B [ i ] = A [ i ] [ j ] - C [ j ] elif C [ j ] == None : C [ j ] = A [ i ] [ j ] - B [ i ] elif A [ i ] [ j ] != B [ i ] + C [ j ] : flag = False if flag == True : print ( " Yes " ) else : print ( " No " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ ] a = [ 0 ] for i in range ( 3 ) : b . append ( c [ 0 ] [ i ] ) for i in range ( 3 ) : if i == 0 : continue else : a . append ( c [ i ] [ i ] - b [ i ] ) for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ ] b = [ ] for i in range ( 3 ) : a . append ( abs ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) ) a . append ( abs ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) ) for i in range ( 3 ) : b . append ( abs ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) ) b . append ( abs ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) ) if a [ 0 ] == a [ 2 ] and a [ 2 ] == a [ 4 ] and b [ 0 ] == b [ 2 ] and b [ 2 ] == b [ 4 ] \ and a [ 1 ] == a [ 3 ] and a [ 3 ] == a [ 5 ] and b [ 1 ] == b [ 3 ] and b [ 3 ] == b [ 5 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c12 == c21 - c22 == c31 - c32 and c12 - c13 == c22 - c23 == c32 - c33 and c11 - c21 == c12 - c22 == c13 - c23 and c21 - c31 == c22 - c32 == c23 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
S1 = list ( map ( int , input ( ) . split ( ) ) ) S2 = list ( map ( int , input ( ) . split ( ) ) ) S3 = list ( map ( int , input ( ) . split ( ) ) ) List = [ ] if S3 [ 2 ] - S3 [ 1 ] == S2 [ 2 ] - S2 [ 1 ] == S1 [ 2 ] - S1 [ 1 ] : List . append ( 1 ) if S3 [ 1 ] - S3 [ 0 ] == S2 [ 1 ] - S2 [ 0 ] == S1 [ 1 ] - S1 [ 0 ] : List . append ( 1 ) if S2 [ 0 ] - S1 [ 0 ] == S2 [ 1 ] - S1 [ 1 ] == S2 [ 2 ] - S1 [ 2 ] : List . append ( 1 ) if S2 [ 0 ] - S3 [ 0 ] == S2 [ 1 ] - S3 [ 1 ] == S2 [ 2 ] - S3 [ 2 ] : List . append ( 1 ) print ( " Yes " if sum ( List ) == 4 else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = C [ 0 ] [ 0 ] a = [ c [ 0 ] - x for c in C ] b = [ C [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a = c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] b = c1 [ 1 ] + c2 [ 2 ] + c3 [ 0 ] c = c1 [ 2 ] + c2 [ 0 ] + c3 [ 1 ] d = c1 [ 0 ] + c2 [ 2 ] + c3 [ 1 ] e = c1 [ 1 ] + c2 [ 0 ] + c3 [ 2 ] f = c1 [ 2 ] + c2 [ 1 ] + c3 [ 0 ] if a == b == c == d == e == f : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x = min ( c1 ) y = min ( c2 ) z = min ( c3 ) for i in range ( 3 ) : c1 [ i ] -= x c2 [ i ] -= y c3 [ i ] -= z print ( ' NYoe s ' [ c1 == c2 == c3 : : 2 ] )
a = [ ] for i in range ( 3 ) : a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) sa1 = a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] sa2 = a [ 0 ] [ 0 ] - a [ 2 ] [ 0 ] if sum ( a [ 0 ] ) == sum ( a [ 1 ] ) + 3 * sa1 == sum ( a [ 2 ] ) + 3 * sa2 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] : ans = " No " elif c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : ans = " No " elif c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] : ans = " No " elif c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : ans = " No " print ( ans )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) d , e , f = m ( ) g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
import math from math import gcd , pi , sqrt INF = float ( " inf " ) MOD = 10 ** 9 + 7 import sys sys . setrecursionlimit ( 10 ** 6 ) import itertools import bisect from collections import Counter , deque def i_input ( ) : return int ( input ( ) ) def i_map ( ) : return map ( int , input ( ) . split ( ) ) def i_list ( ) : return list ( i_map ( ) ) def i_row ( N ) : return [ i_input ( ) for _ in range ( N ) ] def i_row_list ( N ) : return [ i_list ( ) for _ in range ( N ) ] def s_input ( ) : return input ( ) def s_map ( ) : return input ( ) . split ( ) def s_list ( ) : return list ( s_map ( ) ) def s_row ( N ) : return [ s_input for _ in range ( N ) ] def s_row_str ( N ) : return [ s_list ( ) for _ in range ( N ) ] def s_row_list ( N ) : return [ list ( s_input ( ) ) for _ in range ( N ) ] def main ( ) : c = [ i_list ( ) for i in range ( 3 ) ] for i in range ( 1 , 3 ) : t = c [ i ] [ 0 ] - c [ 0 ] [ 0 ] if c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == t and c [ i ] [ 2 ] - c [ 0 ] [ 2 ] == t : pass else : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : t = c [ 0 ] [ i ] - c [ 0 ] [ 0 ] if c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == t and c [ 2 ] [ i ] - c [ 2 ] [ 0 ] == t : pass else : print ( " No " ) exit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = False for i in range ( - 100 , 100 ) : for j in range ( - 100 , 100 ) : for k in range ( - 100 , 100 ) : a11 = c [ 0 ] [ 0 ] - i a12 = c [ 0 ] [ 1 ] - j a13 = c [ 0 ] [ 2 ] - k if a11 != a12 or a12 != a13 : continue a21 = c [ 1 ] [ 0 ] - i a22 = c [ 1 ] [ 1 ] - j a23 = c [ 1 ] [ 2 ] - k if a21 != a22 or a22 != a23 : continue a31 = c [ 2 ] [ 0 ] - i a32 = c [ 2 ] [ 1 ] - j a33 = c [ 2 ] [ 2 ] - k if a31 != a32 or a32 != a33 : continue flag = True print ( ' Yes ' if flag else ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : print ( " No " ) sys . exit ( ) if not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) : print ( " No " ) sys . exit ( ) if not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : print ( " No " ) sys . exit ( ) if not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( " No " ) sys . exit ( ) if not ( c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( " No " ) sys . exit ( ) if not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( " No " ) sys . exit ( ) print ( " Yes " )
from sys import stdin if __name__ == " __main__ " : _in = [ _ . rstrip ( ) for _ in stdin . readlines ( ) ] c_arr = [ ] for i in range ( 3 ) : _ = list ( map ( int , _in [ i ] . split ( ' ' ) ) ) c_arr . append ( _ ) sum_c_arr = sum ( [ sum ( c ) for c in c_arr ] ) if ( c_arr [ 0 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 1 ] + c_arr [ 1 ] [ 2 ] + c_arr [ 2 ] [ 0 ] ) == sum_c_arr / 3 : TF = ' Yes ' else : TF = ' No ' print ( TF )
import sys C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 2 ) : for i in range ( 2 ) : if C [ i + 1 ] [ j + 1 ] - C [ i + 1 ] [ j ] != C [ i ] [ 1 + j ] - C [ i ] [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] and c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] : continue else : print ( " No " ) exit ( ) print ( " Yes " )
import bisect , collections , copy , itertools , math , string import sys def I ( ) : return int ( sys . stdin . readline ( ) . rstrip ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) def S ( ) : return sys . stdin . readline ( ) . rstrip ( ) def LS ( ) : return list ( sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) def main ( ) : grid = [ ] for _ in range ( 3 ) : grid . append ( LI ( ) ) ans = True l1 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 0 ] l2 = grid [ 0 ] [ 2 ] - grid [ 0 ] [ 1 ] ans &= grid [ 1 ] [ 1 ] - grid [ 1 ] [ 0 ] == l1 and grid [ 1 ] [ 2 ] - grid [ 1 ] [ 1 ] == l2 ans &= grid [ 2 ] [ 1 ] - grid [ 2 ] [ 0 ] == l1 and grid [ 2 ] [ 2 ] - grid [ 2 ] [ 1 ] == l2 r1 = grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] r2 = grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] ans &= grid [ 1 ] [ 1 ] - grid [ 0 ] [ 1 ] == r1 and grid [ 1 ] [ 1 ] - grid [ 0 ] [ 1 ] == r2 ans &= grid [ 1 ] [ 2 ] - grid [ 0 ] [ 2 ] == r1 and grid [ 1 ] [ 2 ] - grid [ 0 ] [ 2 ] == r2 print ( " Yes " if ans else " No " ) main ( )
import sys input = sys . stdin . readline d = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if d [ 0 ] [ 0 ] + d [ 1 ] [ 1 ] + d [ 2 ] [ 2 ] == d [ 0 ] [ 1 ] + d [ 1 ] [ 2 ] + d [ 2 ] [ 0 ] == d [ 0 ] [ 2 ] + d [ 1 ] [ 0 ] + d [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = set ( ) e = set ( ) for i in range ( 3 ) : d . add ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) e . add ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) print ( " Yes " if len ( d ) == len ( e ) == 1 else " No " )
si = lambda : input ( ) ni = lambda : int ( input ( ) ) nm = lambda : map ( int , input ( ) . split ( ) ) nl = lambda : list ( map ( int , input ( ) . split ( ) ) ) l = [ nl ( ) for i in range ( 3 ) ] a1 = 0 b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a2 = l [ 1 ] [ 0 ] - b1 a3 = l [ 2 ] [ 0 ] - b1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] for i , aa in enumerate ( a ) : for j , bb in enumerate ( b ) : if l [ i ] [ j ] != aa + bb : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from sys import exit c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l_1 = [ 0 , 1 , 2 ] l_2 = [ 1 , 2 , 0 ] for i in range ( 3 ) : if not c [ l_1 [ i ] ] [ 0 ] - c [ l_2 [ i ] ] [ 0 ] == c [ l_1 [ i ] ] [ 1 ] - c [ l_2 [ i ] ] [ 1 ] == c [ l_1 [ i ] ] [ 2 ] - c [ l_2 [ i ] ] [ 2 ] : print ( ' No ' ) exit ( ) if not c [ 0 ] [ l_1 [ i ] ] - c [ 0 ] [ l_2 [ i ] ] == c [ 1 ] [ l_1 [ i ] ] - c [ 1 ] [ l_2 [ i ] ] == c [ 2 ] [ l_1 [ i ] ] - c [ 2 ] [ l_2 [ i ] ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ch = [ ] for i in l : ch . append ( [ i [ 0 ] - i [ 1 ] , i [ 1 ] - i [ 2 ] ] ) if ch [ 0 ] == ch [ 1 ] and ch [ 1 ] == ch [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a0 in range ( - 100 , 201 ) : for a1 in range ( - 100 , 201 ) : for a2 in range ( - 100 , 201 ) : if c [ 0 ] [ 0 ] - a0 == c [ 1 ] [ 0 ] - a1 == c [ 2 ] [ 0 ] - a2 : if c [ 0 ] [ 1 ] - a0 == c [ 1 ] [ 1 ] - a1 == c [ 2 ] [ 1 ] - a2 : if c [ 0 ] [ 2 ] - a0 == c [ 1 ] [ 2 ] - a1 == c [ 2 ] [ 2 ] - a2 : print ( " Yes " ) exit ( ) print ( " No " )
import sys def getN ( ) : return int ( input ( ) ) def getNM ( ) : return map ( int , input ( ) . split ( ) ) def getlist ( ) : return list ( map ( int , input ( ) . split ( ) ) ) import math import bisect import heapq from collections import defaultdict , Counter , deque MOD = 10 ** 9 + 7 INF = 10 ** 15 def main ( ) : a , b , c = getlist ( ) s12 = b - a s13 = c - a s23 = c - b for i in range ( 2 ) : d , e , f = getlist ( ) if e - d != s12 : print ( " No " ) return if f - d != s13 : print ( " No " ) return if f - e != s23 : print ( " No " ) return print ( " Yes " ) return if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] list_a = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] list_b = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != list_a [ i ] + list_b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for __ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : if flag == False : break for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) flag = False break if flag == True : print ( " Yes " )
import sys input = sys . stdin . readline sys . setrecursionlimit ( 10 ** 7 ) c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 for a2 in range ( 0 , 101 ) : if not ( b1 == ( c [ 1 ] [ 0 ] - a2 ) and b2 == ( c [ 1 ] [ 1 ] - a2 ) and b3 == ( c [ 1 ] [ 2 ] - a2 ) ) : continue for a3 in range ( 0 , 101 ) : if ( b1 == ( c [ 2 ] [ 0 ] - a3 ) and b2 == ( c [ 2 ] [ 1 ] - a3 ) and b3 == ( c [ 2 ] [ 2 ] - a3 ) ) : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
import sys import itertools sys . setrecursionlimit ( 10000 ) def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 for a2 in range ( 101 ) : b2 = C [ 1 ] [ 1 ] - a2 for a3 in range ( 101 ) : b3 = C [ 2 ] [ 2 ] - a3 if check ( C , [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ) : print ( " Yes " ) return print ( " No " ) def check ( C , A , B ) : for i in range ( len ( C ) ) : for j in range ( len ( C [ i ] ) ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : return False return True if ' __main__ ' == __name__ : resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
lis = [ ] for _ in range ( 3 ) : lis . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag1 = 0 flag2 = 0 for a1 in range ( 101 ) : b1 = lis [ 0 ] [ 0 ] - a1 b2 = lis [ 0 ] [ 1 ] - a1 b3 = lis [ 0 ] [ 2 ] - a1 for a2 in range ( 101 ) : if a2 + b1 == lis [ 1 ] [ 0 ] and a2 + b2 == lis [ 1 ] [ 1 ] and a2 + b3 == lis [ 1 ] [ 2 ] : flag1 = 1 break else : flag1 = 0 for a3 in range ( 101 ) : if a3 + b1 == lis [ 2 ] [ 0 ] and a3 + b2 == lis [ 2 ] [ 1 ] and a3 + b3 == lis [ 2 ] [ 2 ] : flag2 = 1 break else : flag2 = 0 if flag1 == 1 and flag2 == 1 : print ( " Yes " ) exit ( ) print ( " No " )
c = [ [ ] , [ ] , [ ] ] c [ 0 ] = [ int ( x ) for x in input ( ) . split ( ) ] c [ 1 ] = [ int ( x ) for x in input ( ) . split ( ) ] c [ 2 ] = [ int ( x ) for x in input ( ) . split ( ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] != c [ ( i + 2 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 1 ) % 3 ] [ ( j + 2 ) % 3 ] : ans = " No " break if ans == " No " : break print ( ans )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) count = 0 if C [ 0 ] [ 0 ] + C [ 2 ] [ 2 ] != C [ 2 ] [ 0 ] + C [ 0 ] [ 2 ] : count + = 1 D = [ ] E = [ ] F = [ ] for i in range ( 3 ) : D . append ( C [ i ] [ 0 ] - C [ i ] [ 1 ] ) E . append ( C [ i ] [ 1 ] - C [ i ] [ 2 ] ) F . append ( C [ i ] [ 2 ] - C [ i ] [ 0 ] ) if len ( set ( D ) ) != 1 or len ( set ( E ) ) != 1 or len ( set ( F ) ) != 1 : count + = 1 G = [ ] H = [ ] I = [ ] for i in range ( 3 ) : G . append ( C [ 0 ] [ i ] - C [ 1 ] [ i ] ) H . append ( C [ 1 ] [ i ] - C [ 2 ] [ i ] ) I . append ( C [ 2 ] [ i ] - C [ 0 ] [ i ] ) if len ( set ( G ) ) != 1 or len ( set ( H ) ) != 1 or len ( set ( I ) ) != 1 : count + = 1 if count == 0 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c . append ( [ c1 , c2 , c3 ] ) a1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] a2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] b1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b2 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] ans = " No " if c [ 1 ] [ 1 ] + a1 == c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] + b1 == c [ 0 ] [ 1 ] : if c [ 1 ] [ 2 ] + a2 == c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] + b1 == c [ 0 ] [ 2 ] : if c [ 2 ] [ 1 ] + a1 == c [ 2 ] [ 0 ] and c [ 2 ] [ 1 ] + b2 == c [ 0 ] [ 1 ] : if c [ 2 ] [ 2 ] + a2 == c [ 2 ] [ 0 ] and c [ 2 ] [ 2 ] + b2 == c [ 0 ] [ 2 ] : ans = " Yes " print ( ans )
a = [ 0 for i in range ( 3 ) ] b = [ 0 for i in range ( 3 ) ] c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : ans = ' No ' print ( ans )
import sys input = sys . stdin . readline def main ( ) : C = [ ] for _ in range ( 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) is_yes = True for j in range ( 2 ) : tmp = 0 for i in range ( 3 ) : if i == 0 : tmp = C [ j + 1 ] [ i ] - C [ j ] [ i ] else : if tmp != C [ j + 1 ] [ i ] - C [ j ] [ i ] : is_yes = False break for i in range ( 2 ) : tmp = 0 for j in range ( 3 ) : if j == 0 : tmp = C [ j ] [ i + 1 ] - C [ j ] [ i ] else : if tmp != C [ j ] [ i + 1 ] - C [ j ] [ i ] : is_yes = False break if is_yes : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( min ( c [ 0 ] ) + 1 ) : b = [ c [ 0 ] [ k ] - i for k in range ( 3 ) ] a = [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] != a [ i ] + b [ 1 ] or c [ i ] [ 2 ] != a [ i ] + b [ 2 ] : break else : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
def main ( ) : c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] all_sum = 0 answer = True for i in range ( 3 ) : all_sum += sum ( c [ i ] ) if all_sum % 3 == 0 : all_sum // = 3 else : answer = False now_sum = 0 for i in range ( 3 ) : now_sum += c [ i ] [ i ] if now_sum != all_sum : answer = False now_sum = 0 for i in range ( 3 ) : now_sum + = c [ i ] [ 2 - i ] if now_sum != all_sum : answer = False print ( " Yes " if answer else " No " ) if __name__ == ' __main__ ' : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if sum ( c1 ) + sum ( c2 ) + sum ( c3 ) == 3 * ( c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : D [ i ] [ j ] = C [ i + 1 ] [ j ] - C [ i ] [ j ] flag = True if D [ 0 ] [ 0 ] == D [ 0 ] [ 1 ] and D [ 0 ] [ 1 ] == D [ 0 ] [ 2 ] and D [ 0 ] [ 2 ] == D [ 0 ] [ 0 ] : pass else : flag = False if D [ 1 ] [ 0 ] == D [ 1 ] [ 1 ] and D [ 1 ] [ 1 ] == D [ 1 ] [ 2 ] and D [ 1 ] [ 2 ] == D [ 1 ] [ 0 ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] import sys for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = False for i in range ( max ( c [ 0 ] [ 0 ] , c [ 1 ] [ 0 ] , c [ 2 ] [ 0 ] ) + 1 ) : a1 , a2 , a3 = c [ 0 ] [ 0 ] - i , c [ 1 ] [ 0 ] - i , c [ 2 ] [ 0 ] - i if c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 and c [ 0 ] [ 1 ] - a1 == c [ 2 ] [ 1 ] - a3 and \ c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 and c [ 0 ] [ 2 ] - a1 == c [ 2 ] [ 2 ] - a3 : flg = True print ( " Yes " if flg else " No " )
import numpy as np a = np . array ( input ( ) . split ( ) , dtype = ' int ' ) b = np . array ( input ( ) . split ( ) , dtype = ' int ' ) - a c = np . array ( input ( ) . split ( ) , dtype = ' int ' ) - a if np . all ( b == b [ 0 ] ) and np . all ( c == c [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] num = s [ 0 ] [ 0 ] ans = " No " for i in range ( num + 1 ) : a_1 = num - i b_1 = i a_2 = s [ 1 ] [ 0 ] - b_1 a_3 = s [ 2 ] [ 0 ] - b_1 b_2 = s [ 0 ] [ 1 ] - a_1 b_3 = s [ 0 ] [ 2 ] - a_1 if s [ 1 ] [ 1 ] != a_2 + b_2 : continue if s [ 1 ] [ 2 ] != a_2 + b_3 : continue if s [ 2 ] [ 1 ] != a_3 + b_2 : continue if s [ 2 ] [ 2 ] != a_3 + b_3 : continue ans = " Yes " print ( ans )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != c [ i + 1 ] [ 0 ] - c [ i + 1 ] [ 1 ] : print ( ' No ' ) break if c [ i ] [ 1 ] - c [ i ] [ 2 ] != c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 2 ] : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 0 ] : print ( ' No ' ) break else : print ( ' Yes ' )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] match = True for i in range ( 2 ) : d1 = grid [ 0 ] [ i + 1 ] - grid [ 0 ] [ i ] d2 = grid [ 1 ] [ i + 1 ] - grid [ 1 ] [ i ] d3 = grid [ 2 ] [ i + 1 ] - grid [ 2 ] [ i ] if ( d1 != d2 ) or ( d1 != d3 ) : match = False break for i in range ( 2 ) : d1 = grid [ i + 1 ] [ 0 ] - grid [ i ] [ 0 ] d2 = grid [ i + 1 ] [ 1 ] - grid [ i ] [ 1 ] d3 = grid [ i + 1 ] [ 2 ] - grid [ i ] [ 2 ] if ( d1 != d2 ) or ( d1 != d3 ) : match = False break if match : print ( " Yes " ) else : print ( " No " )
def LIHW ( h ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] masu = LIHW ( 3 ) ans = " Yes " for i in range ( 2 ) : if masu [ i + 1 ] [ 1 ] - masu [ i + 1 ] [ 0 ] != masu [ 0 ] [ 1 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ i + 1 ] [ 2 ] - masu [ i + 1 ] [ 1 ] != masu [ 0 ] [ 2 ] - masu [ 0 ] [ 1 ] : ans = " No " for i in range ( 2 ) : if masu [ 1 ] [ i + 1 ] - masu [ 0 ] [ i + 1 ] != masu [ 1 ] [ 0 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ 2 ] [ i + 1 ] - masu [ 1 ] [ i + 1 ] != masu [ 2 ] [ 0 ] - masu [ 1 ] [ 0 ] : ans = " No " print ( ans )
import math import numpy as np from fractions import gcd import collections C = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] C = np . array ( C ) cross1 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] cross2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] if ( cross1 == cross2 and np . sum ( C ) / 6 == cross1 / 2 ) : print ( ' Yes ' ) else : print ( ' No ' )
ls = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if ls [ i % 3 ] [ j % 3 ] - ls [ i % 3 ] [ ( j + 1 ) % 3 ] == ls [ ( i + 1 ) % 3 ] [ j % 3 ] - ls [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : cnt += 1 print ( ' Yes ' if cnt == 9 else ' No ' )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = False for a1 in range ( 0 , 101 ) : for a2 in range ( 0 , 101 ) : for a3 in range ( 0 , 101 ) : b1 , b2 , b3 = C [ 0 ] [ 0 ] - a1 , C [ 0 ] [ 1 ] - a1 , C [ 0 ] [ 2 ] - a1 flag1 = ( b1 == C [ 1 ] [ 0 ] - a2 ) and ( b1 == C [ 2 ] [ 0 ] - a3 ) flag2 = ( b2 == C [ 1 ] [ 1 ] - a2 ) and ( b2 == C [ 2 ] [ 1 ] - a3 ) flag3 = ( b3 == C [ 1 ] [ 2 ] - a2 ) and ( b3 == C [ 2 ] [ 2 ] - a3 ) if flag1 and flag2 and flag3 : ans = True if ans : print ( " Yes " ) else : print ( " No " )
ls = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = [ 0 , 0 , 0 , 0 ] if ls [ 0 ] [ 0 ] - ls [ 1 ] [ 0 ] == ls [ 0 ] [ 1 ] - ls [ 1 ] [ 1 ] and ls [ 0 ] [ 1 ] - ls [ 1 ] [ 1 ] == ls [ 0 ] [ 2 ] - ls [ 1 ] [ 2 ] : flag [ 0 ] = 1 if ls [ 1 ] [ 0 ] - ls [ 2 ] [ 0 ] == ls [ 1 ] [ 1 ] - ls [ 2 ] [ 1 ] and ls [ 1 ] [ 1 ] - ls [ 2 ] [ 1 ] == ls [ 1 ] [ 2 ] - ls [ 2 ] [ 2 ] : flag [ 1 ] = 1 if ls [ 0 ] [ 0 ] - ls [ 0 ] [ 1 ] == ls [ 1 ] [ 0 ] - ls [ 1 ] [ 1 ] and ls [ 1 ] [ 0 ] - ls [ 1 ] [ 1 ] == ls [ 2 ] [ 0 ] - ls [ 2 ] [ 1 ] : flag [ 2 ] = 1 if ls [ 0 ] [ 1 ] - ls [ 0 ] [ 2 ] == ls [ 1 ] [ 1 ] - ls [ 1 ] [ 2 ] and ls [ 1 ] [ 1 ] - ls [ 1 ] [ 2 ] == ls [ 2 ] [ 1 ] - ls [ 2 ] [ 2 ] : flag [ 3 ] = 1 if sum ( flag ) == 4 : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 == c22 - c12 == c23 - c13 and c31 - c21 == c32 - c22 == c33 - c23 : print ( " Yes " ) else : print ( " No " )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b2_1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] b3_1 = C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] if ( any ( [ b2_1 != C [ x ] [ 1 ] - C [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) or any ( [ b3_1 != C [ x ] [ 2 ] - C [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) ) : print ( " No " ) else : print ( " Yes " ) if __name__ == " __main__ " : main ( )
import numpy as np arr = [ ] for i in range ( 3 ) : arr . append ( [ int ( s ) for s in input ( ) . split ( " " ) ] ) def calculate ( arr ) : arr = np . array ( arr ) minValPerRow = min ( arr [ 0 ] ) result = False for sa in range ( minValPerRow + 1 ) : mrr = arr [ 0 ] - sa mrr1 = arr [ 1 ] - mrr mrr2 = arr [ 2 ] - mrr s1 = mrr1 [ 0 ] == mrr1 [ 1 ] == mrr1 [ 2 ] s2 = mrr2 [ 0 ] == mrr2 [ 1 ] == mrr2 [ 2 ] if s1 == True and s2 == True : result = True break if result : print ( " Yes " ) else : print ( " No " ) calculate ( arr )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = False for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( a [ 0 ] [ 0 ] - a1 == a [ 1 ] [ 0 ] - a2 == a [ 2 ] [ 0 ] - a3 ) and ( a [ 0 ] [ 1 ] - a1 == a [ 1 ] [ 1 ] - a2 == a [ 2 ] [ 1 ] - a3 ) and ( a [ 0 ] [ 2 ] - a1 == a [ 1 ] [ 2 ] - a2 == a [ 2 ] [ 2 ] - a3 ) : flag = True break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = list ( map ( int , input ( ) . split ( ) ) ) x , y , z = c [ 0 ] - c [ 1 ] , c [ 1 ] - c [ 2 ] , c [ 2 ] - c [ 0 ] flag = True for i in range ( 2 ) : c = list ( map ( int , input ( ) . split ( ) ) ) s , t , u = c [ 0 ] - c [ 1 ] , c [ 1 ] - c [ 2 ] , c [ 2 ] - c [ 0 ] if ( x != s ) or ( y != t ) or ( z != u ) : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
C = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) C . append ( ci ) ans = " No " for a1 in range ( 0 , 101 ) : for a2 in range ( 0 , 101 ) : for a3 in range ( 0 , 101 ) : if ( C [ 0 ] [ 0 ] - a1 == C [ 1 ] [ 0 ] - a2 == C [ 2 ] [ 0 ] - a3 ) and ( C [ 0 ] [ 1 ] - a1 == C [ 1 ] [ 1 ] - a2 == C [ 2 ] [ 1 ] - a3 ) and ( C [ 0 ] [ 2 ] - a1 == C [ 1 ] [ 2 ] - a2 == C [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) quit ( ) print ( ans )
import numpy as np import sys c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) for i in range ( - 1 , 2 ) : if len ( set ( c [ i ] - c [ i + 1 ] ) ) == 1 : pass else : print ( " No " ) sys . exit ( ) for i in range ( - 1 , 2 ) : if len ( set ( c [ : , i ] - c [ : , i + 1 ] ) ) == 1 : pass else : print ( " No " ) sys . exit ( ) print ( " Yes " )
grid = [ ] al = 0 cnt = 0 for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) al += sum ( a ) cnt += a [ i ] grid . append ( a ) if al == cnt * 3 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] N = 100 for i in range ( - N , N + 1 ) : for j in range ( - N , N + 1 ) : for k in range ( - N , N + 1 ) : if c [ 0 ] [ 0 ] - i == c [ 0 ] [ 1 ] - j == c [ 0 ] [ 2 ] - k : if c [ 1 ] [ 0 ] - i == c [ 1 ] [ 1 ] - j == c [ 1 ] [ 2 ] - k : if c [ 2 ] [ 0 ] - i == c [ 2 ] [ 1 ] - j == c [ 2 ] [ 2 ] - k : print ( ' Yes ' ) return print ( ' No ' ) main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] == ( a [ i ] + b [ j ] ) : pass else : ans = " No " break print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) sw = 1 b1 = min ( c1 ) a = [ c1 [ 0 ] - b1 , c1 [ 1 ] - b1 , c1 [ 2 ] - b1 ] if not ( c2 [ 0 ] - a [ 0 ] == c2 [ 1 ] - a [ 1 ] == c2 [ 2 ] - a [ 2 ] ) : sw = 0 if not ( c3 [ 0 ] - a [ 0 ] == c3 [ 1 ] - a [ 1 ] == c3 [ 2 ] - a [ 2 ] ) : sw = 0 print ( [ " No " , " Yes " ] [ sw ] )
c = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) c . append ( [ x , y , z ] ) if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) and ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = c [ 0 ] flg = True for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : flg = False print ( ' Yes ' if flg else ' No ' )
import sys from collections import deque , defaultdict from math import sqrt , factorial def solve ( ) : c = [ ] ok = 1 for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) if i : if c [ i ] != c [ i - 1 ] : d = c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] c [ i ] = [ x - d for x in c [ i ] ] if c [ i ] != c [ i - 1 ] : ok = 0 if ok : print ( " Yes " ) else : print ( " No " ) t = 1 for case in range ( 1 , t + 1 ) : ans = solve ( )
import numpy as np import sys def validation ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) return sys . exit ( ) print ( ' Yes ' ) return sys . exit ( ) c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] ) for i in range ( np . max ( c ) + 1 ) : a = [ ] b = [ ] a . append ( i ) b . append ( c [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) validation ( c , a , b )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) s = 0 for i in range ( 3 ) : for j in range ( 3 ) : if i == j : s += c [ i ] [ j ] * 2 else : s - = c [ i ] [ j ] if s == 0 : print ( " Yes " ) else : print ( " No " )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = L [ 0 ] [ 2 ] + L [ 1 ] [ 1 ] + L [ 2 ] [ 0 ] c2 = L [ 0 ] [ 1 ] + L [ 1 ] [ 0 ] + L [ 2 ] [ 2 ] c3 = L [ 0 ] [ 0 ] + L [ 1 ] [ 2 ] + L [ 2 ] [ 1 ] if ( c1 == c2 and c2 == c3 ) : print ( ' Yes ' ) else : print ( ' No ' )
import io array = [ ] for i in range ( 3 ) : array . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( array [ 0 ] [ 0 ] + array [ 1 ] [ 1 ] + array [ 2 ] [ 2 ] ) * 3 == ( sum ( array [ 0 ] ) + sum ( array [ 1 ] ) + sum ( array [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) b = [ 0 ] * 3 b [ 0 ] = c1 [ 0 ] b [ 1 ] = c1 [ 1 ] b [ 2 ] = c1 [ 2 ] C = c1 + c2 + c3 a = [ 0 ] * 3 a [ 0 ] = 0 a [ 1 ] = C [ 3 ] - b [ 0 ] a [ 2 ] = C [ 6 ] - b [ 0 ] z = 0 for x in a : for y in b : if C [ z ] != x + y : print ( " No " ) exit ( ) z += 1 print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a1_a2 = c1 [ 0 ] - c2 [ 0 ] a2_a3 = c2 [ 0 ] - c3 [ 0 ] b1_b2 = c1 [ 0 ] - c1 [ 1 ] b2_b3 = c1 [ 1 ] - c1 [ 2 ] cnt = 0 if a1_a2 == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : cnt + = 1 if a2_a3 == c2 [ 1 ] - c3 [ 1 ] == c2 [ 2 ] - c3 [ 2 ] : cnt + = 1 if b1_b2 == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : cnt + = 1 if b2_b3 == c2 [ 1 ] - c2 [ 2 ] == c3 [ 1 ] - c3 [ 2 ] : cnt + = 1 if cnt == 4 : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = [ a [ i ] - a [ i + 1 ] for i in range ( 2 ) ] for i in range ( 2 ) : c = list ( map ( int , input ( ) . split ( ) ) ) d = [ c [ i ] - c [ i + 1 ] for i in range ( 2 ) ] if b != d : print ( ' No ' ) break else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] A2 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] B1 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] B2 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] if c [ 1 ] [ 1 ] == A1 + B1 + c [ 0 ] [ 0 ] and c [ 1 ] [ 2 ] == A1 + B1 + B2 + c [ 0 ] [ 0 ] and c [ 2 ] [ 1 ] == A1 + A2 + B1 + c [ 0 ] [ 0 ] and c [ 2 ] [ 2 ] == A1 + A2 + B1 + B2 + c [ 0 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cmax = 0 for i in c : for j in i : cmax = max ( cmax , j ) ck = 0 for i in range ( - cmax , cmax + 1 ) : a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] - b [ 1 ] != a [ 1 ] or c [ 1 ] [ 2 ] - b [ 2 ] != a [ 1 ] : continue a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if a [ 2 ] != c [ 2 ] [ 1 ] - b [ 1 ] or a [ 2 ] != c [ 2 ] [ 2 ] - b [ 2 ] : continue ck = 1 break if ck : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : C = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for i in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] and C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] : if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] and C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] : print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a2_a1 = c2 [ 0 ] - c1 [ 0 ] a3_a2 = c3 [ 0 ] - c2 [ 0 ] a1_a3 = c1 [ 0 ] - c3 [ 0 ] b2_b1 = c1 [ 1 ] - c1 [ 0 ] b3_b2 = c1 [ 2 ] - c1 [ 1 ] b1_b3 = c1 [ 0 ] - c1 [ 2 ] if a2_a1 != c2 [ 1 ] - c1 [ 1 ] or a2_a1 != c2 [ 2 ] - c1 [ 2 ] : print ( " No " ) elif a3_a2 != c3 [ 1 ] - c2 [ 1 ] or a3_a2 != c3 [ 2 ] - c2 [ 2 ] : print ( " No " ) elif a1_a3 != c1 [ 1 ] - c3 [ 1 ] or a1_a3 != c1 [ 2 ] - c3 [ 2 ] : print ( " No " ) elif b2_b1 != c2 [ 1 ] - c2 [ 0 ] or b2_b1 != c3 [ 1 ] - c3 [ 0 ] : print ( " No " ) elif b3_b2 != c2 [ 2 ] - c2 [ 1 ] or b3_b2 != c3 [ 2 ] - c3 [ 1 ] : print ( " No " ) elif b1_b3 != c2 [ 0 ] - c2 [ 2 ] or b1_b3 != c3 [ 0 ] - c3 [ 2 ] : print ( " No " ) else : print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) cnt = [ ] ans = 0 for k in range ( 2 ) : cnt = c [ k ] for i in range ( k + 1 , 3 ) : for j in range ( - 100 , 101 , 1 ) : if k == i : break else : d = c [ i ] d = [ a + j for a in c [ i ] ] if d == c [ k ] : ans + = 1 break if ans == 3 : for k in range ( 2 ) : c1 = c [ 0 ] [ k ] c2 = c [ 1 ] [ k ] c3 = c [ 2 ] [ k ] for i in range ( k + 1 , 3 ) : d1 = c [ 0 ] [ i ] d2 = c [ 1 ] [ i ] d3 = c [ 2 ] [ i ] for j in range ( - 100 , 101 , 1 ) : if k == i : break else : d1 + = j d2 += j d3 += j if d1 == c1 and d2 == c2 and d3 == c3 : ans + = 1 break else : d1 = c [ 0 ] [ i ] d2 = c [ 1 ] [ i ] d3 = c [ 2 ] [ i ] if ans == 6 : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] for a1 in range ( 101 ) : b1 , b2 , b3 = c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2 , a3 = c [ 1 ] [ 0 ] - b1 , c [ 2 ] [ 0 ] - b1 if a2 < 0 or a3 < 0 : continue if a2 + b2 != c [ 1 ] [ 1 ] or a2 + b3 != c [ 1 ] [ 2 ] : continue if a3 + b2 != c [ 2 ] [ 1 ] or a3 + b3 != c [ 2 ] [ 2 ] : continue print ( " Yes " ) break else : print ( " No " )
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] D = [ [ ] for _ in range ( 4 ) ] for i in range ( 2 ) : for j in range ( 3 ) : D [ i ] . append ( C [ i + 1 ] [ j ] - C [ i ] [ j ] ) D [ i + 2 ] . append ( C [ j ] [ i + 1 ] - C [ j ] [ i ] ) for d in D : if len ( set ( d ) ) != 1 : print ( " No " ) break else : print ( " Yes " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = ' No ' if c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : ans = ' No ' if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : ans = ' No ' if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
def main ( ) : G = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] def is_ok ( rs , cs ) : for r , ri in enumerate ( rs , start = 1 ) : for c , ci in enumerate ( cs ) : if G [ r ] [ c ] != ri + ci : return False return True for r0 in range ( G [ 0 ] [ 0 ] + 1 ) : c0 = G [ 0 ] [ 0 ] - r0 c1 = G [ 0 ] [ 1 ] - r0 c2 = G [ 0 ] [ 2 ] - r0 r1 = G [ 1 ] [ 0 ] - c0 r2 = G [ 2 ] [ 0 ] - c0 rs = ( r1 , r2 ) cs = ( c0 , c1 , c2 ) if is_ok ( rs , cs ) : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if ( C [ 1 ] [ 1 ] - b2 ) == a2 and ( C [ 1 ] [ 2 ] - b3 ) == a2 : if ( C [ 2 ] [ 1 ] - b2 ) == a3 and ( C [ 2 ] [ 2 ] - b3 ) == a3 : print ( " Yes " ) exit ( ) print ( " No " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
import sys c = list ( map ( int , input ( ) . split ( ) ) ) diffa = c [ 1 ] - c [ 0 ] diffb = c [ 2 ] - c [ 1 ] c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) print ( " Yes " )
import sys C = [ list ( map ( int , sys . stdin . readline ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a0 in range ( 101 ) : b0 = C [ 0 ] [ 0 ] - a0 b1 = C [ 0 ] [ 1 ] - a0 b2 = C [ 0 ] [ 2 ] - a0 if ( C [ 1 ] [ 0 ] - b0 == C [ 1 ] [ 1 ] - b1 == C [ 1 ] [ 2 ] - b2 ) and ( C [ 2 ] [ 0 ] - b0 == C [ 2 ] [ 1 ] - b1 == C [ 2 ] [ 2 ] - b2 ) : print ( " Yes " ) exit ( ) print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x = min ( c1 ) y = min ( c2 ) z = min ( c3 ) for i in range ( 3 ) : c1 [ i ] -= x c2 [ i ] -= y c3 [ i ] -= z print ( ' NYoe s ' [ c1 == c2 == c3 : : 2 ] )
c1 = [ int ( i ) for i in input ( ) . split ( ) ] c2 = [ int ( i ) for i in input ( ) . split ( ) ] c3 = [ int ( i ) for i in input ( ) . split ( ) ] flag = False if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] : if c1 [ 1 ] - c1 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c2 [ 2 ] - c2 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c3 [ 2 ] - c3 [ 0 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 2 ] - c2 [ 2 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 2 ] - c3 [ 2 ] : flag = True print ( ' Yes ' ) if not flag : print ( ' No ' )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_list = [ [ ] for i in range ( 3 ) ] b_list = [ [ ] for i in range ( 3 ) ] a_list [ 0 ] = 0 b_list [ 0 ] = c_list [ 0 ] [ 0 ] a_list [ 1 ] = c_list [ 0 ] [ 1 ] - b_list [ 0 ] a_list [ 2 ] = c_list [ 0 ] [ 2 ] - b_list [ 0 ] b_list [ 1 ] = c_list [ 1 ] [ 0 ] - a_list [ 0 ] b_list [ 2 ] = c_list [ 2 ] [ 0 ] - a_list [ 0 ] if ( ( ( a_list [ 1 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 2 ] ) and ( ( a_list [ 1 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for row in range ( 3 ) : for col in range ( 3 ) : if C [ row ] [ col ] - C [ ( row + 1 ) % 3 ] [ col ] != C [ row ] [ ( col + 1 ) % 3 ] - C [ ( row + 1 ) % 3 ] [ ( col + 1 ) % 3 ] : print ( ' No ' ) exit ( ) for col in range ( 3 ) : for row in range ( 3 ) : if C [ row ] [ col ] - C [ row ] [ ( col + 1 ) % 3 ] != C [ ( row + 1 ) % 3 ] [ col ] - C [ ( row + 1 ) % 3 ] [ ( col + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] mx = 0 for i in range ( 3 ) : mx = max ( mx , max ( c [ i ] ) ) flag = True for i in range ( mx + 1 ) : d1 = [ c [ 0 ] [ 0 ] - i , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i ] for j in range ( mx + 1 ) : d2 = [ c [ 1 ] [ 0 ] - j , c [ 1 ] [ 1 ] - j , c [ 1 ] [ 2 ] - j ] for k in range ( mx + 1 ) : d3 = [ c [ 2 ] [ 0 ] - k , c [ 2 ] [ 1 ] - k , c [ 2 ] [ 2 ] - k ] if d1 == d2 == d3 : flag = False print ( " YNeos " [ flag : : 2 ] )
c_list = [ ] for i in range ( 3 ) : c_list . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) c_11 = c_list [ 0 ] [ 0 ] ans = 0 for a_1 in range ( c_11 + 1 ) : b_1 = c_11 - a_1 b_2 = c_list [ 0 ] [ 1 ] - a_1 b_3 = c_list [ 0 ] [ 2 ] - a_1 if c_list [ 1 ] [ 0 ] - b_1 == c_list [ 1 ] [ 1 ] - b_2 == c_list [ 1 ] [ 2 ] - b_3 and c_list [ 2 ] [ 0 ] - b_1 == c_list [ 2 ] [ 1 ] - b_2 == c_list [ 2 ] [ 2 ] - b_3 : print ( " Yes " ) ans = 1 exit ( ) if ans == 0 : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 for a2 in range ( c [ 1 ] [ 0 ] + 1 ) : if b1 != c [ 1 ] [ 0 ] - a2 : continue if b2 != c [ 1 ] [ 1 ] - a2 : continue if b3 != c [ 1 ] [ 2 ] - a2 : continue for a3 in range ( c [ 2 ] [ 0 ] + 1 ) : if b1 != c [ 2 ] [ 0 ] - a3 : continue if b2 != c [ 2 ] [ 1 ] - a3 : continue if b3 != c [ 2 ] [ 2 ] - a3 : continue print ( " Yes " ) exit ( ) print ( " No " )
c = [ 0 ] * 3 c_max = 0 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c_max = max ( c_max , max ( c [ i ] ) ) c_max += 1 for a1 in range ( c_max ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a1 + b1 == c [ 0 ] [ 0 ] and a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ i ] [ 0 ] - 0 for i in range ( 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np import copy c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = [ int ( x ) for x in input ( ) . split ( ) ] ans = False while c [ 0 ] [ 0 ] >= 0 and c [ 0 ] [ 1 ] >= 0 and c [ 0 ] [ 2 ] >= 0 : a = copy . deepcopy ( c [ 1 ] ) b = copy . deepcopy ( c [ 2 ] ) for i in range ( 3 ) : a [ i ] -= c [ 0 ] [ i ] b [ i ] -= c [ 0 ] [ i ] if a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] : ans = True break for i in range ( 3 ) : c [ 0 ] [ i ] - = 1 if ans : print ( " Yes " ) else : print ( " No " )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] a = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] b = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] hantei = True for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ j ] + b [ i ] : hantei = False print ( ' Yes ' if hantei else ' No ' )
import os import sys def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a_12 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] a_13 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] a_23 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] b_12 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] b_13 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] b_23 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if b_12 != c [ i ] [ 0 ] - c [ i ] [ 1 ] or b_13 != c [ i ] [ 0 ] - c [ i ] [ 2 ] or b_23 != c [ i ] [ 1 ] - c [ i ] [ 2 ] : print ( " No " ) return if a_12 != c [ 0 ] [ i ] - c [ 1 ] [ i ] or a_13 != c [ 0 ] [ i ] - c [ 2 ] [ i ] or a_23 != c [ 1 ] [ i ] - c [ 2 ] [ i ] : print ( " No " ) return print ( " Yes " ) if __name__ == " __main__ " : main ( )
C = list ( list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ) for a in range ( 3 ) : if ( C [ a ] [ 0 ] - C [ a ] [ 1 ] != C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] or C [ a ] [ 1 ] - C [ a ] [ 2 ] != C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) for b in range ( 3 ) : if ( C [ 0 ] [ b ] - C [ 1 ] [ b ] != C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] or C [ 1 ] [ b ] - C [ 2 ] [ b ] != C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
matrix = [ ] for i in range ( 3 ) : matrix . append ( list ( map ( int , input ( ) . split ( ) ) ) ) mat_dif = [ 0 , 0 , 0 ] for i in range ( 3 ) : mat_dif [ i ] = ( [ matrix [ i ] [ 0 ] - matrix [ i ] [ 1 ] ] , [ matrix [ i ] [ 1 ] - matrix [ i ] [ 2 ] ] ) if mat_dif [ 0 ] == mat_dif [ 1 ] == mat_dif [ 2 ] : print ( " Yes " ) else : print ( " No " )
import numpy as np C = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( C ) answer = ' Yes ' S = C . sum ( ) trace = np . diag ( C ) . sum ( ) S_row0 = C [ 0 , : ] . sum ( ) S_row1 = C [ 1 , : ] . sum ( ) S_row2 = C [ 2 , : ] . sum ( ) S_col0 = C [ : , 0 ] . sum ( ) S_col1 = C [ : , 1 ] . sum ( ) S_col2 = C [ : , 2 ] . sum ( ) if S != 3 * trace : answer = ' No ' elif S_row0 - 3 * C [ 0 , 0 ] != trace - S_col0 : answer = ' No ' elif S_row1 - 3 * C [ 1 , 0 ] != trace - S_col0 : answer = ' No ' print ( answer )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 3 ) : x = [ 0 ] * 3 y = [ 0 ] * 3 for j in range ( 3 ) : x [ j ] = c [ i - 1 ] [ j ] - c [ i ] [ j ] y [ j ] = c [ j ] [ i - 1 ] - c [ j ] [ i ] if len ( set ( x ) ) != 1 or len ( set ( y ) ) != 1 : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) a = [ 0 ] * 3 b = [ 0 ] * 3 x = 0 for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - x for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : x = a [ i ] + b [ j ] if x != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = l [ 0 ] [ 0 ] y = l [ 0 ] [ 1 ] z = l [ 0 ] [ 2 ] a = 0 b = l [ 1 ] [ 0 ] - x c = l [ 2 ] [ 0 ] - x if b + y == l [ 1 ] [ 1 ] and b + z == l [ 1 ] [ 2 ] and c + y == l [ 2 ] [ 1 ] and c + z == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
import math import heapq import bisect import numpy as np from collections import Counter C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 flg = 0 for i in range ( C [ 0 ] [ 0 ] + 1 ) : A [ 0 ] = i B [ 0 ] = C [ 0 ] [ 0 ] - i for j in range ( 1 , 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] B [ j ] = C [ 0 ] [ j ] - A [ 0 ] tmp = abs ( C [ 1 ] [ 1 ] - A [ 1 ] - B [ 1 ] ) + abs ( C [ 1 ] [ 2 ] - A [ 1 ] - B [ 2 ] ) + abs ( C [ 2 ] [ 1 ] - A [ 2 ] - B [ 1 ] ) + abs ( C [ 2 ] [ 2 ] - A [ 2 ] - B [ 2 ] ) if tmp == 0 : flg = 1 if flg : print ( " Yes " ) else : print ( " No " )
from sys import stdin import sys [ c11 , c12 , c13 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) [ c21 , c22 , c23 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) [ c31 , c32 , c33 ] = list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) if ( ( c11 + c12 + c13 ) - ( c21 + c22 + c23 ) ) % 3 != 0 or ( ( c21 + c22 + c23 ) - ( c31 + c32 + c33 ) ) % 3 != 0 or ( ( c31 + c32 + c33 ) - ( c11 + c12 + c13 ) ) % 3 != 0 : print ( " No " ) elif ( ( c11 + c21 + c31 ) - ( c12 + c22 + c32 ) ) % 3 != 0 or ( ( c12 + c22 + c32 ) - ( c13 + c23 + c33 ) ) % 3 != 0 or ( ( c13 + c23 + c33 ) - ( c11 + c21 + c31 ) ) % 3 != 0 : print ( " No " ) else : print ( " Yes " )
a , b = [ 0 ] * 3 , [ 10 ] * 3 c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ok = False for i in range ( 101 ) : for j in range ( 101 ) : a1 = i a2 = c21 - c11 + a1 a3 = c31 - c11 + a1 b1 = j b2 = c12 - c11 + b1 b3 = c13 - c11 + b1 if ( ( c11 == a1 + b1 ) and ( c12 == a1 + b2 ) and ( c13 == a1 + b3 ) and ( c21 == a2 + b1 ) and ( c22 == a2 + b2 ) and ( c23 == a2 + b3 ) and ( c31 == a3 + b1 ) and ( c32 == a3 + b2 ) and ( c33 == a3 + b3 ) ) : ok = True break if ( ok ) : break if ok : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] print ( " Yes " if c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] == c [ 2 ] [ 2 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] else " No " )
c1 = list ( map ( int , input ( ) . split ( ' ' ) ) ) c2 = list ( map ( int , input ( ) . split ( ' ' ) ) ) c3 = list ( map ( int , input ( ) . split ( ' ' ) ) ) check_b12 = c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] check_b13 = c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] check_a12 = c1 [ 0 ] - c1 [ 1 ] == c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] check_a13 = c1 [ 0 ] - c1 [ 2 ] == c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] if check_a12 and check_a13 and check_b12 and check_b13 : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np lst = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] arr = np . array ( lst ) if len ( set ( arr [ 1 , : ] - arr [ 0 , : ] ) ) == 1 and len ( set ( arr [ 2 , : ] - arr [ 0 , : ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
p = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if p [ 0 ] [ 0 ] - p [ 0 ] [ 1 ] == p [ 1 ] [ 0 ] - p [ 1 ] [ 1 ] == p [ 2 ] [ 0 ] - p [ 2 ] [ 1 ] and p [ 0 ] [ 1 ] - p [ 0 ] [ 2 ] == p [ 1 ] [ 1 ] - p [ 1 ] [ 2 ] == p [ 2 ] [ 1 ] - p [ 2 ] [ 2 ] and p [ 0 ] [ 0 ] - p [ 1 ] [ 0 ] == p [ 0 ] [ 1 ] - p [ 1 ] [ 1 ] == p [ 0 ] [ 2 ] - p [ 1 ] [ 2 ] and p [ 1 ] [ 0 ] - p [ 2 ] [ 0 ] == p [ 1 ] [ 1 ] - p [ 2 ] [ 1 ] == p [ 1 ] [ 2 ] - p [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) f = True for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False print ( " Yes " if f else " No " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c4 - c1 == c5 - c2 == c6 - c3 and \ c7 - c1 == c8 - c2 == c9 - c3 and \ c7 - c4 == c8 - c5 == c9 - c6 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 , b2 , b3 = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 check = [ ] check . append ( c [ 1 ] [ 1 ] == a2 + b2 ) check . append ( c [ 2 ] [ 1 ] == a3 + b2 ) check . append ( c [ 1 ] [ 2 ] == a2 + b3 ) check . append ( c [ 2 ] [ 2 ] == a3 + b3 ) if sum ( check ) == 4 : print ( " Yes " ) else : print ( " No " )
import numpy as np import scipy C = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) : for j in range ( 3 ) : if C [ 0 ] [ 0 ] - C [ 0 ] [ j ] != C [ i ] [ 0 ] - C [ i ] [ j ] : print ( " No " ) exit ( ) if C [ 0 ] [ 0 ] - C [ i ] [ 0 ] != C [ 0 ] [ j ] - C [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys c = [ list ( map ( int , l . split ( ) ) ) for l in sys . stdin . read ( ) . splitlines ( ) ] for i in range ( 2 ) : c [ 2 - i ] = [ x - y for x , y in zip ( c [ 2 - i ] , c [ 1 - i ] ) ] for i in range ( 2 ) : for j in range ( 3 ) : c [ j ] [ 2 - i ] -= c [ j ] [ 1 - i ] if c [ 1 ] [ 1 : ] == c [ 2 ] [ 1 : ] == [ 0 , 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2_1 = c [ 1 ] [ 0 ] - b1 a2_2 = c [ 1 ] [ 1 ] - b2 a2_3 = c [ 1 ] [ 2 ] - b3 if a2_1 < 0 or a2_2 < 0 or a2_3 < 0 : continue if a2_1 != a2_2 or a2_2 != a2_3 or a2_1 != a2_3 : continue a3_1 = c [ 2 ] [ 0 ] - b1 a3_2 = c [ 2 ] [ 1 ] - b2 a3_3 = c [ 2 ] [ 2 ] - b3 if a3_1 < 0 or a3_2 < 0 or a3_3 < 0 : continue if a3_1 != a3_2 or a3_2 != a3_3 or a3_1 != a3_3 : continue print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = max ( c [ 0 ] ) for i in range ( a + 1 ) : a1 = i b = [ 0 , 0 , 0 ] a = [ 0 , 0 , 0 ] cnt = 0 for j in range ( 3 ) : for k in range ( 3 ) : if j == 0 : b [ k ] = c [ j ] [ k ] - a1 elif j == 2 or j == 1 : a [ k ] = c [ j ] [ k ] - b [ k ] if ( j == 1 or j == 2 ) and k == 2 : if len ( set ( a ) ) == 1 and a [ 0 ] >= 0 : cnt + = 1 print ( ' Yes ' if cnt == 2 else ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] B = [ x for x in grid [ 0 ] ] b = B [ 0 ] A = [ grid [ i ] [ 0 ] - b for i in range ( 3 ) ] res = True for i , a in enumerate ( A ) : for j , b in enumerate ( B ) : if grid [ i ] [ j ] != a + b : res = False break else : continue break print ( ' Yes ' if res else ' No ' )
import numpy as np a = np . array ( [ [ int ( x ) for x in input ( ) . split ( ) ] for y in range ( 3 ) ] , dtype = np . int64 ) for i in range ( 3 ) : for j in range ( 0 , 3 ) : a [ i ] [ j ] -= a [ i ] [ 2 ] for j in range ( 3 ) : for i in range ( 1 , 3 ) : if ( a [ i ] [ j ] != a [ 0 ] [ j ] ) : print ( " No " ) exit ( 0 ) print ( " Yes " )
s = [ ] yoko = [ ] ans = " Yes " for i in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) s . append ( [ a , b , c ] ) yoko . append ( [ a - b , b - c , c - a ] ) if yoko [ 0 ] != yoko [ 1 ] or yoko [ 1 ] != yoko [ 2 ] : ans = " No " tate = [ ] for i in range ( 3 ) : tate . append ( [ s [ i ] [ 0 ] - s [ i ] [ 1 ] , s [ i ] [ 1 ] - s [ i ] [ 2 ] , s [ i ] [ 2 ] - s [ i ] [ 0 ] ] ) if tate [ 0 ] != tate [ 1 ] or tate [ 1 ] != tate [ 2 ] : ans = " No " print ( ans )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) b = np . array ( [ ] , int ) for l in range ( 3 ) : buf = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) b = np . concatenate ( ( b , buf ) , axis = None ) b = np . reshape ( b , ( 9 , 1 ) ) Ab = np . concatenate ( ( A , b ) , axis = 1 ) rA = np . linalg . matrix_rank ( A ) rAb = np . linalg . matrix_rank ( Ab ) if rA == rAb : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] or c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
import sys lst = [ ] for i in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) lst . append ( [ a , b , c ] ) for i in range ( 2 ) : for j in range ( 2 ) : if ( lst [ i ] [ j + 1 ] - lst [ i ] [ j ] ) != ( lst [ i + 1 ] [ j + 1 ] - lst [ i + 1 ] [ j ] ) or ( lst [ j + 1 ] [ i ] - lst [ j ] [ i ] ) != ( lst [ j + 1 ] [ i + 1 ] - lst [ j ] [ i + 1 ] ) : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = " Yes " for i in range ( 3 ) : for j in range ( i + 1 , 3 ) : tmp = [ ] for h in range ( 3 ) : tmp . append ( c [ h ] [ i ] - c [ h ] [ j ] ) if len ( set ( tmp ) ) != 1 : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : if ( c [ i ] [ 0 ] - c [ j ] [ 0 ] ) != ( c [ i ] [ 1 ] - c [ j ] [ 1 ] ) or ( c [ i ] [ 2 ] - c [ j ] [ 2 ] ) != ( c [ i ] [ 1 ] - c [ j ] [ 1 ] ) or ( c [ i ] [ 2 ] - c [ j ] [ 2 ] ) != ( c [ i ] [ 0 ] - c [ j ] [ 0 ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from sys import stdin def main ( ) : readline = stdin . readline c = [ ] s = 0 for i in range ( 3 ) : li = list ( map ( int , readline ( ) . split ( ) ) ) s += sum ( li ) c . append ( li ) if s % 3 != 0 : print ( " No " ) else : if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == s // 3 : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] def thr_check ( a , b , c ) : if a == b and b == c and c == a : return True else : return False s1 = thr_check ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] , C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] , C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) s2 = thr_check ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] , C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] , C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) s3 = thr_check ( C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] , C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] , C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] ) s4 = thr_check ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] , C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] , C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) s5 = thr_check ( C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] , C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] , C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ) s6 = thr_check ( C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] , C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] ) if s1 and s2 and s3 and s4 and s5 and s6 : print ( " Yes " ) else : print ( " No " )
row0 = list ( map ( int , input ( ) . split ( ) ) ) row1 = list ( map ( int , input ( ) . split ( ) ) ) row2 = list ( map ( int , input ( ) . split ( ) ) ) rows = [ row0 , row1 , row2 ] rowsdiff = [ ] for item in rows : rowsdiff . append ( [ item [ 1 ] - item [ 0 ] , item [ 2 ] - item [ 1 ] ] ) columns = [ [ rows [ 0 ] [ i ] , rows [ 1 ] [ i ] , rows [ 2 ] [ i ] ] for i in range ( 3 ) ] columnsdiff = [ ] for item in columns : columnsdiff . append ( [ item [ 1 ] - item [ 0 ] , item [ 2 ] - item [ 1 ] ] ) Answer = ' Yes ' rowscheck = ( rowsdiff [ 0 ] == rowsdiff [ 1 ] ) * ( rowsdiff [ 1 ] == rowsdiff [ 2 ] ) columnscheck = ( columnsdiff [ 0 ] == columnsdiff [ 1 ] ) * ( columnsdiff [ 1 ] == columnsdiff [ 2 ] ) if rowscheck * columnscheck != 1 : Answer = ' No ' print ( Answer )
def readlines ( ) : for _ in range ( 3 ) : yield list ( map ( int , input ( ) . split ( ) ) ) c = list ( readlines ( ) ) def it ( ) : for a1 in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 yield ( c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 ) print ( " Yes " if any ( it ( ) ) else " No " )
r = range M = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in r ( 3 ) ] for i in r ( 2 ) : x = M [ 0 ] [ i ] - M [ 0 ] [ i + 1 ] y = M [ i ] [ 0 ] - M [ i + 1 ] [ 0 ] for j in r ( 3 ) : if x != M [ j ] [ i ] - M [ j ] [ i + 1 ] or y != M [ i ] [ j ] - M [ i + 1 ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False ans = " Yes " for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " flag = True break print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) count = 0 if c11 - c12 == c21 - c22 == c31 - c32 : count + = 1 if c12 - c13 == c22 - c23 == c32 - c33 : count + = 1 if c21 - c11 == c22 - c12 == c23 - c13 : count + = 1 if c21 - c31 == c22 - c32 == c23 - c33 : count + = 1 if count == 4 : print ( " Yes " ) else : print ( " No " )
ls = [ ] for i in range ( 3 ) : ls . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' if ls [ 1 ] [ 1 ] - ls [ 1 ] [ 0 ] != ls [ 0 ] [ 1 ] - ls [ 0 ] [ 0 ] : ans = ' No ' if ls [ 2 ] [ 1 ] - ls [ 2 ] [ 0 ] != ls [ 0 ] [ 1 ] - ls [ 0 ] [ 0 ] : ans = ' No ' if ls [ 1 ] [ 2 ] - ls [ 1 ] [ 0 ] != ls [ 0 ] [ 2 ] - ls [ 0 ] [ 0 ] : ans = ' No ' if ls [ 2 ] [ 2 ] - ls [ 2 ] [ 0 ] != ls [ 0 ] [ 2 ] - ls [ 0 ] [ 0 ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] \ == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] \ == c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] d = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] if ( a == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) and ( a == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : if ( b == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( b == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : if ( d == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( d == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
from itertools import product c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , None , None ] b = [ c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] f = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : f = False break if f : print ( ' Yes ' ) else : print ( ' No ' )
c = list ( map ( int , input ( ) . split ( ) ) ) c += list ( map ( int , input ( ) . split ( ) ) ) c += list ( map ( int , input ( ) . split ( ) ) ) if ( c [ 0 ] - c [ 1 ] == c [ 3 ] - c [ 4 ] == c [ 6 ] - c [ 7 ] ) and ( c [ 1 ] - c [ 2 ] == c [ 4 ] - c [ 5 ] == c [ 7 ] - c [ 8 ] ) and ( c [ 0 ] - c [ 3 ] == c [ 1 ] - c [ 4 ] == c [ 2 ] - c [ 5 ] ) and ( c [ 3 ] - c [ 6 ] == c [ 4 ] - c [ 7 ] == c [ 5 ] - c [ 8 ] ) : ans = ' Yes ' else : ans = ' No ' print ( ans )
import sys , math , itertools , heapq , collections , bisect input = lambda : sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf-8 ' ) sys . setrecursionlimit ( 10 ** 8 ) inf = float ( ' inf ' ) ans = count = 0 B = list ( map ( int , input ( ) . split ( ) ) ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
from collections import deque C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( C [ 0 ] [ 0 ] + 1 ) : q = deque ( [ C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i , C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i ] ) flag = 0 for j in range ( 1 , 3 ) : d = set ( ) for k in range ( 3 ) : d . add ( C [ j ] [ k ] - q . popleft ( ) ) if len ( d ) == 1 : flag += 1 if flag == 2 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c . extend ( c2 ) c . extend ( c3 ) for a1 in range ( c [ 0 ] + 1 ) : b1 = c [ 0 ] - a1 b2 = c [ 1 ] - a1 b3 = c [ 2 ] - a1 a2 = c [ 3 ] - b1 a3 = c [ 6 ] - b1 ab = [ a1 , a2 , a3 , b1 , b2 , b3 ] for i in ab : if i < 0 : break if ( c [ 4 ] == a2 + b2 ) & ( c [ 5 ] == a2 + b3 ) & ( c [ 7 ] == a3 + b2 ) & ( c [ 8 ] == a3 + b3 ) : print ( " Yes " ) break else : print ( " No " )
( * c , ) = map ( int , open ( 0 ) . read ( ) . split ( ) ) print ( " YNeos " [ sum ( c ) % 3 > 0 or sum ( c ) // 3 != c [ 0 ] + c [ 4 ] + c [ 8 ] : : 2 ] )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] T = sum ( [ sum ( i ) for i in L ] ) print ( ' Yes ' if L [ 0 ] [ 0 ] + L [ 1 ] [ 1 ] + L [ 2 ] [ 2 ] == ( T / 3 ) else ' No ' )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1_max = max ( s [ 0 ] ) for i in range ( 0 , a1_max + 1 ) : a1 = i b1 = s [ 0 ] [ 0 ] - a1 b2 = s [ 0 ] [ 1 ] - a1 b3 = s [ 0 ] [ 2 ] - a1 a2 = s [ 1 ] [ 0 ] - b1 a3 = s [ 2 ] [ 0 ] - b1 if b1 >= 0 and b2 >= 0 and b3 >= 0 and a2 >= 0 and a3 >= 0 : if s [ 1 ] [ 1 ] == a2 + b2 and s [ 1 ] [ 2 ] == a2 + b3 and s [ 2 ] [ 1 ] == a3 + b2 and s [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians from itertools import permutations , combinations , product , accumulate from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from fractions import gcd from bisect import bisect def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] a [ 0 ] = 0 for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] != - 1 : b [ i ] = c [ i ] [ j ] - a [ j ] else : a [ j ] = c [ i ] [ j ] - b [ i ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) sys . exit ( ) else : print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] for a1 in range ( 100 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a21 = c2 [ 0 ] - b1 a22 = c2 [ 1 ] - b2 a23 = c2 [ 2 ] - b3 a31 = c3 [ 0 ] - b1 a32 = c3 [ 1 ] - b2 a33 = c3 [ 2 ] - b3 if ( a21 == a22 == a23 ) and ( a31 == a32 == a33 ) : print ( ' Yes ' ) break elif a1 == 99 : print ( ' No ' ) break else : continue
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] a = [ sum ( C [ i ] ) - sum ( C [ i - 1 ] ) for i in range ( 3 ) ] b = [ sum ( [ C [ j ] [ i ] for j in range ( 3 ) ] ) - sum ( [ C [ j ] [ i - 1 ] for j in range ( 3 ) ] ) for i in range ( 3 ) ] for i in range ( 3 ) : if not ( a [ i ] / 3 ) . is_integer ( ) or not ( b [ i ] / 3 ) . is_integer ( ) : print ( " No " ) break else : print ( " Yes " )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] def solve ( ) : if not ( s [ 0 ] [ 1 ] - s [ 0 ] [ 0 ] == s [ 1 ] [ 1 ] - s [ 1 ] [ 0 ] == s [ 2 ] [ 1 ] - s [ 2 ] [ 0 ] ) : return False if not ( s [ 0 ] [ 2 ] - s [ 0 ] [ 1 ] == s [ 1 ] [ 2 ] - s [ 1 ] [ 1 ] == s [ 2 ] [ 2 ] - s [ 2 ] [ 1 ] ) : return False if not ( s [ 1 ] [ 0 ] - s [ 0 ] [ 0 ] == s [ 1 ] [ 1 ] - s [ 0 ] [ 1 ] == s [ 1 ] [ 2 ] - s [ 0 ] [ 2 ] ) : return False if not ( s [ 2 ] [ 0 ] - s [ 1 ] [ 0 ] == s [ 2 ] [ 1 ] - s [ 1 ] [ 1 ] == s [ 2 ] [ 2 ] - s [ 1 ] [ 2 ] ) : return False return True print ( ' Yes ' if solve ( ) else ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e == b + d : if b + f == c + e : if d + h == e + g : if e + i == f + h : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = 0 for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 if b1 >= 0 : if a1 + b1 == c [ 0 ] [ 0 ] : a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if a2 >= 0 and a3 >= 0 and b2 >= 0 and b3 >= 0 : if a2 + b2 == c [ 1 ] [ 1 ] and a3 + b2 == c [ 2 ] [ 1 ] : if a2 + b3 == c [ 1 ] [ 2 ] and a3 + b3 == c [ 2 ] [ 2 ] : m = 1 if m == 1 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = False print ( ' Yes ' if ans else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = " No " for i in range ( 0 , 101 ) : a = i b = [ C [ 0 ] [ 0 ] - a , C [ 0 ] [ 1 ] - a , C [ 0 ] [ 2 ] - a ] for j in range ( 1 , 3 ) : v = C [ j ] diff = [ v [ k ] - b [ k ] for k in range ( 3 ) ] if len ( set ( diff ) ) != 1 or any ( [ i < 0 for i in diff ] ) : break else : ans = " Yes " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( len ( c ) ) : mi = min ( c [ i ] ) * c [ i ] , = map ( lambda x : x - mi , c [ i ] ) print ( " Yes " if c [ 0 ] == c [ 1 ] and c [ 1 ] == c [ 2 ] else " No " )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) s = 0 for i in range ( 0 , min ( l1 [ 0 ] , l1 [ 1 ] , l1 [ 2 ] , l2 [ 0 ] , l3 [ 0 ] ) + 1 ) : j = l1 [ 0 ] - i m = l1 [ 1 ] - i n = l1 [ 2 ] - i if l2 [ 0 ] - j == l2 [ 1 ] - m == l2 [ 2 ] - n and l3 [ 0 ] - j == l3 [ 1 ] - m == l3 [ 2 ] - n : s = 1 break print ( " Yes " if s == 1 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 a3 = c [ 2 ] [ 0 ] - b1 b3 = c [ 0 ] [ 2 ] - a1 if a2 + b2 != c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if a2 + b3 != c [ 1 ] [ 2 ] : print ( " No " ) exit ( ) if a3 + b2 != c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) if a3 + b3 != c [ 2 ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( min ( c11 , c12 , c13 ) + 1 ) : t1 = c11 - i t2 = c12 - i t3 = c13 - i if c21 - t1 == c22 - t2 and c21 - t1 == c23 - t3 and c31 - t1 == c32 - t2 and c31 - t1 == c33 - t3 : print ( " Yes " ) break else : print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 10 , 0 , 0 ] y = [ 0 , 0 , 0 ] for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] [ j ] != x [ i ] + y [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c_0 = list ( map ( int , input ( ) . split ( ) ) ) c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c_0 , c_1 , c_2 ] for a_0 in range ( 100 + 1 ) : for a_1 in range ( 100 + 1 ) : for a_2 in range ( 100 + 1 ) : b_0 = c [ 0 ] [ 0 ] - a_0 b_1 = c [ 0 ] [ 1 ] - a_0 b_2 = c [ 0 ] [ 2 ] - a_0 a = [ a_0 , a_1 , a_2 ] b = [ b_0 , b_1 , b_2 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : continue else : flag = False if flag : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys c = list ( ) for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) x = a + e == b + d and b + f == c + e and d + h == e + g and e + i == f + h print ( ' YNeos ' [ 0 if x else 1 : : 2 ] )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c1 [ 1 ] != c2 [ 0 ] - c2 [ 1 ] or c1 [ 0 ] - c1 [ 1 ] != c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c1 [ 2 ] != c2 [ 0 ] - c2 [ 2 ] or c1 [ 0 ] - c1 [ 2 ] != c3 [ 0 ] - c3 [ 2 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c2 [ 0 ] != c1 [ 1 ] - c2 [ 1 ] or c1 [ 0 ] - c2 [ 0 ] != c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if c1 [ 0 ] - c3 [ 0 ] != c1 [ 1 ] - c3 [ 1 ] or c1 [ 0 ] - c3 [ 0 ] != c1 [ 2 ] - c3 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
cs = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : yoko = abs ( cs [ 0 ] [ i ] - cs [ 0 ] [ i + 1 ] ) for j in range ( 1 , 3 ) : if yoko - abs ( cs [ j ] [ i ] - cs [ j ] [ i + 1 ] ) != 0 : print ( ' No ' ) exit ( ) for i in range ( 2 ) : tate = abs ( cs [ 0 + i ] [ 0 ] - cs [ 1 + i ] [ 0 ] ) for j in range ( 1 , 3 ) : if tate - abs ( cs [ i ] [ j ] - cs [ i + 1 ] [ j ] ) != 0 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from itertools import chain , groupby def flatten ( list_of_lists ) : return chain . from_iterable ( list_of_lists ) def all_equal ( iterable ) : g = groupby ( iterable ) return next ( g , True ) and not next ( g , False ) C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s = sum ( flatten ( C ) ) x = all_equal ( [ C [ 1 ] [ i ] - C [ 0 ] [ i ] for i in range ( 3 ) ] ) y = all_equal ( [ C [ 2 ] [ i ] - C [ 0 ] [ i ] for i in range ( 3 ) ] ) z = all_equal ( [ C [ 2 ] [ i ] - C [ 1 ] [ i ] for i in range ( 3 ) ] ) if all ( ( x , y , z ) ) and s % 3 == 0 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) x = c [ 0 ] [ 0 ] * 2 - c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] y = c [ 0 ] [ 1 ] * 2 - c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] z = c [ 0 ] [ 2 ] * 2 - c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] o = c [ 0 ] [ 2 ] * 2 - c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] p = c [ 1 ] [ 2 ] * 2 - c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] q = c [ 2 ] [ 2 ] * 2 - c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] if x == y == z and o == p == q : print ( " Yes " ) else : print ( " No " )
import sys import heapq , math from itertools import zip_longest , permutations , combinations , combinations_with_replacement from itertools import accumulate , dropwhile , takewhile , groupby from functools import lru_cache from copy import deepcopy c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) def ok ( c ) : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] \ and c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] \ and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : return True return False print ( " Yes " if ok ( [ c1 , c2 , c3 ] ) else " No " )
def readInts ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def main ( ) : C = [ readInts ( ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = C [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ j ] [ i ] == a [ j ] + b [ i ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] and c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( " Yes " ) else : print ( " No " )
def main ( ) : a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( a [ 1 ] [ 0 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 0 ] [ 2 ] ) \ and ( a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] ) \ and ( a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] ) \ and ( a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] ) : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
inp = [ ] inp . append ( list ( map ( int , input ( ) . split ( ) ) ) ) inp . append ( list ( map ( int , input ( ) . split ( ) ) ) ) inp . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 101 ) : flag = 0 a1 = i b1 = inp [ 0 ] [ 0 ] - a1 if b1 < 0 : flag = 1 a2 = inp [ 0 ] [ 1 ] - b1 if a2 < 0 : flag = 1 a3 = inp [ 0 ] [ 2 ] - b1 if a3 < 0 : flag = 1 if inp [ 1 ] [ 0 ] - a1 != inp [ 1 ] [ 1 ] - a2 or inp [ 1 ] [ 0 ] - a1 != inp [ 1 ] [ 2 ] - a3 : flag = 1 if inp [ 2 ] [ 0 ] - a1 != inp [ 2 ] [ 1 ] - a2 or inp [ 2 ] [ 0 ] - a1 != inp [ 2 ] [ 2 ] - a3 : flag = 1 if flag == 0 : print ( " Yes " ) exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True a1 = 0 b1 = C [ 0 ] [ 0 ] b2 = C [ 0 ] [ 1 ] b3 = C [ 0 ] [ 2 ] if not ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 and C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) : flg = False if not ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 and C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : flg = False if flg : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = True break if flag : print ( ' No ' ) else : print ( ' Yes ' )
C_list = [ ] for _ in range ( 3 ) : C_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) from itertools import combinations ans = ' Yes ' for r in combinations ( range ( 3 ) , 2 ) : for c in combinations ( range ( 3 ) , 2 ) : if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 0 ] ] != C_list [ r [ 0 ] ] [ c [ 1 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 0 ] ] [ c [ 1 ] ] != C_list [ r [ 1 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) b = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] print ( ' Yes ' if a == 3 * b else ' No ' )
row1 = list ( map ( int , input ( ) . split ( ) ) ) row2 = list ( map ( int , input ( ) . split ( ) ) ) row3 = list ( map ( int , input ( ) . split ( ) ) ) if ( row1 [ 1 ] - row1 [ 0 ] != row2 [ 1 ] - row2 [ 0 ] or row1 [ 1 ] - row1 [ 0 ] != row3 [ 1 ] - row3 [ 0 ] or row1 [ 2 ] - row1 [ 1 ] != row2 [ 2 ] - row2 [ 1 ] or row1 [ 2 ] - row1 [ 1 ] != row3 [ 2 ] - row3 [ 1 ] ) : print ( ' No ' ) elif ( row1 [ 0 ] - row2 [ 0 ] != row1 [ 1 ] - row2 [ 1 ] or row1 [ 0 ] - row2 [ 0 ] != row1 [ 2 ] - row2 [ 2 ] or row1 [ 0 ] - row3 [ 0 ] != row1 [ 1 ] - row3 [ 1 ] or row1 [ 0 ] - row3 [ 0 ] != row1 [ 2 ] - row3 [ 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) s = 0 if ( c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] and c1 [ 0 ] - c2 [ 0 ] == c1 [ 2 ] - c2 [ 2 ] ) : s + = 1 if ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] and c3 [ 0 ] - c2 [ 0 ] == c3 [ 2 ] - c2 [ 2 ] ) : s + = 1 if ( s == 2 ) : print ( ' Yes ' ) else : print ( ' No ' )
res = 0 a = [ ] a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for j in range ( 2 ) : s = a [ 0 ] [ j ] - a [ 0 ] [ j + 1 ] t = a [ 1 ] [ j ] - a [ 1 ] [ j + 1 ] u = a [ 2 ] [ j ] - a [ 2 ] [ j + 1 ] if s == t and t == u : res = res + 1 for j in range ( 2 ) : s = a [ j ] [ 0 ] - a [ j + 1 ] [ 0 ] t = a [ j ] [ 1 ] - a [ j + 1 ] [ 1 ] u = a [ j ] [ 2 ] - a [ j + 1 ] [ 2 ] if s == t and t == u : res = res + 1 if res == 4 : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) a = [ 0 ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] for j in range ( 1 , 3 ) : a . append ( c [ j ] [ j ] - b [ j ] ) ans = ' Yes ' for k in range ( 3 ) : for m in range ( 3 ) : if c [ k ] [ m ] != a [ k ] + b [ m ] : ans = ' No ' break print ( ans )
M = [ ] for i in range ( 3 ) : row = list ( map ( int , input ( ) . split ( ) ) ) M . append ( row ) flg = True for i in range ( 3 ) : if M [ 0 ] [ i ] - M [ 0 ] [ i - 1 ] == M [ 1 ] [ i ] - M [ 1 ] [ i - 1 ] == M [ 2 ] [ i ] - M [ 2 ] [ i - 1 ] : continue else : flg = False if M [ i ] [ 0 ] - M [ i - 1 ] [ 0 ] == M [ i ] [ 1 ] - M [ i - 1 ] [ 1 ] == M [ i ] [ 2 ] - M [ i - 1 ] [ 2 ] : continue else : flg = False if flg : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c_ = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_ ) if c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] and c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if C1 [ 0 ] - C1 [ 1 ] == C2 [ 0 ] - C2 [ 1 ] == C3 [ 0 ] - C3 [ 1 ] and C1 [ 1 ] - C1 [ 2 ] == C2 [ 1 ] - C2 [ 2 ] == C3 [ 1 ] - C3 [ 2 ] and C1 [ 0 ] - C2 [ 0 ] == C1 [ 1 ] - C2 [ 1 ] == C1 [ 2 ] - C2 [ 2 ] and C2 [ 0 ] - C3 [ 0 ] == C2 [ 1 ] - C3 [ 1 ] == C2 [ 2 ] - C3 [ 2 ] : print ( " Yes " ) else : print ( " No " )
import sys def main ( ) : mod = 1000000007 inf = float ( ' inf ' ) sys . setrecursionlimit ( 10 ** 6 ) def input ( ) : return sys . stdin . readline ( ) . rstrip ( ) def ii ( ) : return int ( input ( ) ) def mi ( ) : return map ( int , input ( ) . split ( ) ) def mi_0 ( ) : return map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) def lmi ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def lmi_0 ( ) : return list ( map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) ) def li ( ) : return list ( input ( ) ) grid = [ lmi ( ) for _ in range ( 3 ) ] vertical = [ [ grid [ i + 1 ] [ j ] - grid [ i ] [ j ] for j in range ( 3 ) ] for i in range ( 2 ) ] horizontal = [ [ grid [ i ] [ j + 1 ] - grid [ i ] [ j ] for i in range ( 3 ) ] for j in range ( 2 ) ] if len ( list ( set ( vertical [ 0 ] ) ) ) == 1 and len ( list ( set ( vertical [ 1 ] ) ) ) == 1 and len ( list ( set ( horizontal [ 0 ] ) ) ) == 1 and len ( list ( set ( horizontal [ 1 ] ) ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == " __main__ " : main ( )
import sys C11 , C12 , C13 = map ( int , input ( ) . split ( ) ) C21 , C22 , C23 = map ( int , input ( ) . split ( ) ) C31 , C32 , C33 = map ( int , input ( ) . split ( ) ) if ( C11 + C22 == C12 + C21 ) and ( C12 + C23 == C13 + C22 ) and ( C21 + C32 == C22 + C31 ) and ( C22 + C33 == C23 + C32 ) : print ( ' Yes ' ) sys . exit ( ) print ( " No " )
x = list ( map ( int , input ( ) . split ( ) ) ) y = list ( map ( int , input ( ) . split ( ) ) ) z = list ( map ( int , input ( ) . split ( ) ) ) if x [ 1 ] - x [ 0 ] != y [ 1 ] - y [ 0 ] or y [ 1 ] - y [ 0 ] != z [ 1 ] - z [ 0 ] or x [ 2 ] - x [ 0 ] != y [ 2 ] - y [ 0 ] or y [ 0 ] - x [ 0 ] != y [ 1 ] - x [ 1 ] or z [ 1 ] - x [ 1 ] != z [ 2 ] - x [ 2 ] or z [ 0 ] - x [ 0 ] != z [ 1 ] - x [ 1 ] or z [ 1 ] - x [ 1 ] != z [ 2 ] - x [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = ' No ' print ( ans )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] line_max = [ ] for i in range ( len ( c ) ) : line_max . append ( max ( c [ i ] ) ) flag = False for i in range ( line_max [ 0 ] + 1 ) : for j in range ( line_max [ 1 ] + 1 ) : for k in range ( line_max [ 2 ] + 1 ) : cnt = 0 for l in range ( 3 ) : x = c [ 0 ] [ l ] - i y = c [ 1 ] [ l ] - j z = c [ 2 ] [ l ] - k if x >= 0 and y >= 0 and z >= 0 : if x == y and y == z and z == x : cnt + = 1 if cnt == 3 : flag = True print ( " Yes " ) if flag else print ( " No " )
import sys def input ( ) : return sys . stdin . readline ( ) [ : - 1 ] def mi ( ) : return map ( int , input ( ) . split ( ) ) def ii ( ) : return int ( input ( ) ) def main ( ) : c = [ list ( mi ( ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] \ and c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ and c [ 2 ] [ 2 ] + c [ 0 ] [ 0 ] == c [ 2 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) for i in range ( 2 ) : c0 = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] c1 = c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] c2 = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] if not ( c0 == c1 == c2 ) : print ( " No " ) exit ( 0 ) for i in range ( 2 ) : r0 = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] r1 = c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] r2 = c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] if not ( c0 == c1 == c2 ) : print ( " No " ) exit ( 0 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cross_left = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] cross_right = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] total = 0 for i in range ( 3 ) : total += sum ( c [ i ] ) if total % 3 == 0 and total // 3 == cross_left and total // 3 == cross_right : print ( ' Yes ' ) else : print ( ' No ' )
a11 , a12 , a13 = map ( int , input ( ) . split ( ) ) a21 , a22 , a23 = map ( int , input ( ) . split ( ) ) a31 , a32 , a33 = map ( int , input ( ) . split ( ) ) if a22 != a21 + a12 - a11 : print ( ' No ' ) elif a23 != a21 + a13 - a11 : print ( ' No ' ) elif a32 != a31 + a12 - a11 : print ( ' No ' ) elif a33 != a31 + a13 - a11 : print ( ' No ' ) else : print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c21 == c12 - c22 == c13 - c23 and c11 - c31 == c12 - c32 == c13 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def m ( ) : return map ( int , input ( ) . split ( ) ) def main ( ) : c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = l ( ) for i in range ( 2 ) : x = c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != x : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = True for i in range ( 2 ) : tmp = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] for j in range ( 2 ) : if c [ j + 1 ] [ i + 1 ] - c [ j + 1 ] [ i ] != tmp : ans = False break for i in range ( 2 ) : tmp = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] for j in range ( 2 ) : if c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] != tmp : ans = False break if ans : print ( " Yes " ) else : print ( " No " )
List = [ ] for i in range ( 3 ) : List . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = 0 b = 0 c = 0 flg = True for i in range ( 2 ) : a = List [ 0 ] [ i + 1 ] - List [ 0 ] [ i ] b = List [ 1 ] [ i + 1 ] - List [ 1 ] [ i ] c = List [ 2 ] [ i + 1 ] - List [ 2 ] [ i ] if a != b or b != c or c != a : flg = False a = List [ i + 1 ] [ 0 ] - List [ i ] [ 0 ] b = List [ i + 1 ] [ 1 ] - List [ i ] [ 1 ] c = List [ i + 1 ] [ 2 ] - List [ i ] [ 2 ] if a != b or b != c or c != a : flg = False if flg : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : C = list ( map ( int , input ( ) . split ( ) ) ) c . append ( C ) for i in range ( 3 ) : Min = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] -= Min for i in range ( 2 ) : if c [ i ] == c [ i + 1 ] : pass else : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] ans = False for i in range ( 101 ) : flag = False a [ 0 ] = i for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for j in range ( 3 ) : a [ j ] = c [ j ] [ 0 ] - b [ 0 ] for j in range ( 3 ) : for k in range ( 3 ) : if a [ j ] + b [ k ] != c [ j ] [ k ] : flag = True break if flag : break else : ans = True break print ( ' Yes ' ) if ans else print ( ' No ' )
import numpy as np from numpy . linalg import matrix_rank A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) Ac = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c11 ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c12 ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c13 ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c21 ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c22 ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c23 ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c31 ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c32 ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c33 ] ] ) if matrix_rank ( A ) == matrix_rank ( Ac ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != c [ j + 1 ] [ i + 1 ] - c [ j + 1 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
List = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] newlist = [ ] new = [ x - y for ( x , y ) in zip ( List [ 0 ] , List [ 1 ] ) ] new2 = [ x - y for ( x , y ) in zip ( List [ 2 ] , List [ 1 ] ) ] if new [ 0 ] == new [ 1 ] and new [ 1 ] == new [ 2 ] : pass else : print ( ' No ' ) exit ( ) if new2 [ 0 ] == new2 [ 1 ] and new2 [ 1 ] == new2 [ 2 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def check ( data ) : diff = { } for i in range ( 3 ) : for j in range ( 2 ) : key_b = " b_ " + str ( j ) + " - " + str ( j + 1 ) delta_b = data [ i ] [ j + 1 ] - data [ i ] [ j ] if key_b in diff : if diff [ key_b ] != delta_b : return False else : diff [ key_b ] = delta_b for j in range ( 3 ) : for i in range ( 2 ) : key_a = " a_ " + str ( i ) + " - " + str ( i + 1 ) delta_a = data [ i + 1 ] [ j ] - data [ i ] [ j ] if key_a in diff : if diff [ key_a ] != delta_a : return False else : diff [ key_a ] = delta_a return True data = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] if check ( data ) : print ( " Yes " ) else : print ( " No " )
import sys def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) c = [ LI ( ) for _ in range ( 3 ) ] x , y , z = c [ 0 ] for x2 , y2 , z2 in c [ 1 : ] : d = x2 - x if not y + d == y2 or not z + d == z2 : print ( ' No ' ) break else : print ( ' Yes ' )
mycode = r import sys import os if sys . argv [ - 1 ] == ' ONLINE_JUDGE ' : with open ( ' mycode.pyx ' , ' w ' ) as f : f . write ( mycode ) os . system ( ' cythonize -i -3 -b mycode.pyx ' ) import mycode
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = ' No ' if c11 - c21 == c12 - c22 & c12 - c22 == c13 - c23 : if c21 - c31 == c22 - c32 & c22 - c32 == c23 - c33 : if c11 - c12 == c21 - c22 & c21 - c22 == c31 - c32 : if c12 - c13 == c22 - c23 & c22 - c23 == c32 - c33 : ans = ' Yes ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] yoko = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] tate = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] flag = 1 for i in range ( 1 , 3 ) : if not ( ( c [ i ] [ 1 ] - c [ i ] [ 0 ] == yoko [ 0 ] ) and ( c [ i ] [ 2 ] - c [ i ] [ 1 ] == yoko [ 1 ] ) ) : flag = 0 if not ( ( c [ 1 ] [ i ] - c [ 0 ] [ i ] == tate [ 0 ] ) and ( c [ 2 ] [ i ] - c [ 1 ] [ i ] == tate [ 1 ] ) ) : flag = 0 if flag == 1 : print ( " Yes " ) else : print ( " No " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] b = C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] if a and b : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) a = ( a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 0 ] ) b = ( b [ 1 ] - b [ 0 ] , b [ 2 ] - b [ 0 ] ) c = ( c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 0 ] ) if a == b and b == c : print ( " Yes " ) else : print ( " No " )
import sys sys . setrecursionlimit ( 5000 ) def dfs ( x ) : global ng , parity for v in adj [ x ] : if parity [ v ] == parity [ x ] : ng = True return elif parity [ v ] < 0 : parity [ v ] = 1 ^ parity [ x ] dfs ( v ) return while True : n , m = map ( int , input ( ) . split ( ) ) if n == 0 and m == 0 : break adj = [ [ ] for _ in range ( n ) ] parity = [ - 1 for _ in range ( n ) ] for _ in range ( m ) : a , b = map ( int , input ( ) . split ( ) ) adj [ a - 1 ] . append ( b - 1 ) adj [ b - 1 ] . append ( a - 1 ) ng = False parity [ 0 ] = 0 dfs ( 0 ) if ng : print ( 0 ) continue ans = [ ] zero = parity . count ( 0 ) if zero % 2 == 0 : ans . append ( zero // 2 ) if ( n - zero ) % 2 == 0 and zero * 2 != n : ans . append ( ( n - zero ) // 2 ) ans . sort ( ) print ( len ( ans ) ) if ans : print ( * ans , sep = " \n " )
grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 101 ) : a1 = i b = [ grid [ 0 ] [ 0 ] - a1 , grid [ 0 ] [ 1 ] - a1 , grid [ 0 ] [ 2 ] - a1 ] flag = True for j in range ( 1 , 3 ) : for k in range ( 2 ) : if grid [ j ] [ k ] - b [ k ] != grid [ j ] [ k + 1 ] - b [ k + 1 ] : flag = False if flag : print ( " Yes " ) exit ( ) print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if a [ i ] [ j ] - a [ i ] [ j + 1 ] == a [ i + 1 ] [ j ] - a [ i + 1 ] [ j + 1 ] : continue else : print ( " No " ) ; exit ( ) print ( " Yes " )
matrix = [ 0 ] * 3 for i in range ( 3 ) : matrix [ i ] = [ int ( j ) for j in input ( ) . split ( ) ] for a1 in range ( 101 ) : for b1 in range ( 101 ) : a2 = matrix [ 1 ] [ 0 ] - b1 a3 = matrix [ 2 ] [ 0 ] - b1 b2 = matrix [ 0 ] [ 1 ] - a1 b3 = matrix [ 0 ] [ 2 ] - a1 if matrix [ 1 ] [ 1 ] == a2 + b2 and matrix [ 1 ] [ 2 ] == a2 + b3 and matrix [ 2 ] [ 1 ] == a3 + b2 and matrix [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
s = [ [ int ( i ) for i in input ( ) . split ( " " ) ] for _ in range ( 3 ) ] sum = s [ 0 ] [ 0 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 2 ] fail = 0 if s [ 0 ] [ 0 ] + s [ 1 ] [ 2 ] + s [ 2 ] [ 1 ] != sum : fail = 1 if s [ 1 ] [ 1 ] + s [ 0 ] [ 2 ] + s [ 2 ] [ 0 ] != sum : fail = 1 if s [ 2 ] [ 2 ] + s [ 0 ] [ 1 ] + s [ 1 ] [ 0 ] != sum : fail = 1 if fail == 0 : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if not ( c12 - c11 == c22 - c21 == c32 - c31 ) : print ( " No " ) quit ( ) if not ( c13 - c12 == c23 - c22 == c33 - c32 ) : print ( " No " ) quit ( ) if not ( c21 - c11 == c22 - c12 == c23 - c13 ) : print ( " No " ) quit ( ) if not ( c31 - c21 == c32 - c22 == c33 - c23 ) : print ( " No " ) quit ( ) print ( " Yes " )
from sys import stdin if __name__ == " __main__ " : _in = [ _ . rstrip ( ) for _ in stdin . readlines ( ) ] c_arr = [ ] for i in range ( 3 ) : _ = list ( map ( int , _in [ i ] . split ( ' ' ) ) ) c_arr . append ( _ ) sum_c_arr = sum ( [ sum ( c ) for c in c_arr ] ) if ( c_arr [ 0 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 1 ] + c_arr [ 1 ] [ 2 ] + c_arr [ 2 ] [ 0 ] ) == sum_c_arr / 3 and \ ( c_arr [ 2 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 0 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 1 ] [ 2 ] ) == sum_c_arr / 3 : TF = ' Yes ' else : TF = ' No ' print ( TF )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if a2 + b1 == c [ 1 ] [ 0 ] and a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] : if a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) quit ( ) print ( ' No ' )
C = [ None for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ok = True for p in range ( 2 ) : diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ i ] [ p + 1 ] - C [ i ] [ p ] if len ( set ( diff ) ) > 1 : ok = False for p in range ( 2 ) : diff = [ 0 ] * 3 for i in range ( 3 ) : diff [ i ] = C [ p + 1 ] [ i ] - C [ p ] [ i ] if len ( set ( diff ) ) > 1 : ok = False print ( ( " No " , " Yes " ) [ ok ] )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 == C [ 1 ] [ 0 ] - a2 == C [ 2 ] [ 0 ] - a3 b2 = C [ 0 ] [ 1 ] - a1 == C [ 1 ] [ 1 ] - a2 == C [ 2 ] [ 1 ] - a3 b3 = C [ 0 ] [ 2 ] - a1 == C [ 1 ] [ 2 ] - a2 == C [ 2 ] [ 2 ] - a3 if b1 and b2 and b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c_one = list ( map ( int , input ( ) . split ( ) ) ) c_two = list ( map ( int , input ( ) . split ( ) ) ) c_thr = list ( map ( int , input ( ) . split ( ) ) ) a_b_ones = [ ( x , c_one [ 0 ] - x ) for x in range ( c_one [ 0 ] + 1 ) ] a_b_twos = [ ( x , c_two [ 1 ] - x ) for x in range ( c_two [ 1 ] + 1 ) ] a_b_thrs = [ ( x , c_thr [ 2 ] - x ) for x in range ( c_thr [ 2 ] + 1 ) ] ans = ' No ' for p in a_b_ones : for q in a_b_twos : for r in a_b_thrs : a1 , b1 = p [ 0 ] , p [ 1 ] a2 , b2 = q [ 0 ] , q [ 1 ] a3 , b3 = r [ 0 ] , r [ 1 ] if ( c_one [ 1 ] == a1 + b2 ) and ( c_one [ 2 ] == a1 + b3 ) and ( c_two [ 0 ] == a2 + b1 ) and ( c_two [ 2 ] == a2 + b3 ) and ( c_thr [ 0 ] == a3 + b1 ) and ( c_thr [ 1 ] == a3 + b2 ) : ans = ' Yes ' print ( ans )
l = [ 0 ] * 3 for i in range ( 3 ) : l [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : if l [ 0 ] [ i ] - l [ 1 ] [ i ] != l [ 0 ] [ i + 1 ] - l [ 1 ] [ i + 1 ] : print ( ' No ' ) exit ( ) if l [ 1 ] [ i ] - l [ 2 ] [ i ] != l [ 1 ] [ i + 1 ] - l [ 2 ] [ i + 1 ] : print ( ' No ' ) exit ( ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] x2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] x3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] x4 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] x5 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] x6 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) x1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] x2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] x3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] x4 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] x5 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] x6 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( ' No ' ) break else : print ( ' Yes ' )
( * c , ) = map ( int , open ( 0 ) . read ( ) . split ( ) ) print ( " YNeos " [ sum ( c ) % 3 > 0 or sum ( c ) // 3 != c [ 0 ] + c [ 4 ] + c [ 8 ] : : 2 ] )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e : if d - e == g - h : if b - c == e - f : if e - f == h - i : if a - d == b - e : if b - e == c - f : if d - g == e - h : if e - h == f - i : print ( " Yes " ) exit ( ) print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] cond = True cond &= c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] cond &= c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] cond &= c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] cond &= c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] print ( " Yes " if cond else " No " )
def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def m ( ) : return map ( int , input ( ) . split ( ) ) def main ( ) : c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = l ( ) a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = min ( c [ 0 ] ) for i in range ( 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for i in range ( 1 , 3 ) : b [ i ] = c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) N = 101 for i in range ( N ) : a1 = i b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( ' Yes ' ) else : print ( ' No ' )
field = [ ] result = " Yes " for i in range ( 3 ) : field . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 3 ) : for j in range ( 3 ) : if not ( field [ i ] [ j ] >= 0 and field [ i ] [ j ] <= 100 * 2 ) : result = " No " if j == 0 : pos_i0 = field [ i ] [ j ] field [ i ] [ j ] - = pos_i0 for j in range ( 3 ) : if not ( field [ 0 ] [ j ] == field [ 1 ] [ j ] and field [ 0 ] [ j ] == field [ 2 ] [ j ] ) : result = " No " print ( result )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e + i == b + f + g == c + d + h == a + f + h == c + e + g == b + d + i : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( tuple ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) break else : print ( ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( - 10000 , 10001 ) : b1 = grid [ 0 ] [ 0 ] - a1 a2 = grid [ 1 ] [ 0 ] - b1 a3 = grid [ 2 ] [ 0 ] - b1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if a2 + b2 == grid [ 1 ] [ 1 ] and a2 + b3 == grid [ 1 ] [ 2 ] and a3 + b2 == grid [ 2 ] [ 1 ] and a3 + b3 == grid [ 2 ] [ 2 ] : print ( ' Yes ' ) break else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) d1 = [ c2 [ i ] - c1 [ i ] for i in range ( 3 ) ] d2 = [ c3 [ i ] - c1 [ i ] for i in range ( 3 ) ] if ( d1 [ 0 ] == d1 [ 1 ] and d1 [ 0 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] and d2 [ 0 ] == d2 [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c1 ) a = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] b = [ 0 , c [ 1 ] [ 1 ] - a [ 1 ] , c [ 2 ] [ 2 ] - a [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
mat = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( a ) ans = False if mat [ 1 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 0 ] [ 2 ] : if mat [ 2 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] and mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 2 ] [ 2 ] - mat [ 0 ] [ 2 ] : ans = True if ans : print ( " Yes " ) else : print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 101 ) : b1 = a [ 0 ] [ 0 ] - i b2 = a [ 0 ] [ 1 ] - i b3 = a [ 0 ] [ 2 ] - i a1 = i a2 = a [ 1 ] [ 0 ] - b1 a3 = a [ 2 ] [ 0 ] - b1 A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] flag = True for l in range ( 3 ) : for r in range ( 3 ) : if A [ l ] < 0 or B [ r ] < 0 or a [ l ] [ r ] != A [ l ] + B [ r ] : flag = False if flag : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
def myAnswer ( C : list ) -> int : return " Yes " if ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] ) else " No " def modelAnswer ( ) : return def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( myAnswer ( C [ : ] ) ) if __name__ == ' __main__ ' : main ( )
g = [ [ * map ( int , input ( ) . split ( ) ) ] for _ in range ( 3 ) ] for h in [ 0 , 1 ] : for w in [ 0 , 1 ] : if g [ h ] [ w ] + g [ h + 1 ] [ w + 1 ] != g [ h + 1 ] [ w ] + g [ h ] [ w + 1 ] : exit ( print ( ' No ' ) ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) and ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) and ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) and ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) : print ( " Yes " ) else : print ( " No " )
mycode = r import sys import os if sys . argv [ - 1 ] == ' ONLINE_JUDGE ' : with open ( ' mycode.pyx ' , ' w ' ) as f : f . write ( mycode ) os . system ( ' cythonize -i -3 -b mycode.pyx ' ) import mycode
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in list ( input ( ) . split ( ) ) ] ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
points = [ [ None for j in range ( 3 ) ] for i in range ( 3 ) ] from itertools import product for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) points [ i ] [ 0 ] = c1 points [ i ] [ 1 ] = c2 points [ i ] [ 2 ] = c3 valid = False for a1 in range ( 101 ) : maxA1 = min ( points [ 0 ] ) if a1 > maxA1 : continue b1 = points [ 0 ] [ 0 ] - a1 b2 = points [ 0 ] [ 1 ] - a1 b3 = points [ 0 ] [ 2 ] - a1 a2 = points [ 1 ] [ 0 ] - b1 a3 = points [ 2 ] [ 0 ] - b1 A = { 0 : a1 , 1 : a2 , 2 : a3 } B = { 0 : b1 , 1 : b2 , 2 : b3 } for i in range ( 3 ) : for j in range ( 3 ) : if points [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys import numpy as np c = np . array ( sys . stdin . read ( ) . split ( ) , dtype = np . int8 ) . reshape ( 3 , 3 ) def main ( c ) : c -= c [ 0 ] c -= c [ : , 0 ] [ : , None ] return ' No ' if np . count_nonzero ( c ) else ' Yes ' if __name__ == ' __main__ ' : ans = main ( c ) print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s1 = sum ( c [ 0 ] ) s2 = sum ( c [ 1 ] ) s3 = sum ( c [ 2 ] ) s4 = c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] s5 = c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] s6 = c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] for x in [ s2 - s1 , s3 - s1 , s5 - s4 , s6 - s4 ] : if abs ( x ) % 3 != 0 : print ( ' No ' ) break else : print ( ' Yes ' )
cr = list ( ) for i in range ( 3 ) : cw = list ( map ( int , input ( ) . split ( ) ) ) cr . append ( cw ) a = list ( ) b = list ( ) a . append ( 0 ) b . append ( cr [ 0 ] [ 0 ] - a [ 0 ] ) a . append ( cr [ 1 ] [ 0 ] - b [ 0 ] ) b . append ( cr [ 0 ] [ 1 ] - a [ 0 ] ) a . append ( cr [ 2 ] [ 0 ] - b [ 0 ] ) b . append ( cr [ 0 ] [ 2 ] - a [ 0 ] ) wkans = list ( ) for i in range ( 3 ) : wkrow = list ( ) for j in range ( 3 ) : wkrow . append ( cr [ i ] [ j ] - ( a [ i ] + b [ j ] ) ) wkans . append ( wkrow ) if min ( wkans ) == max ( wkans ) : ans = ' Yes ' else : ans = ' No ' print ( ans )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for _ in range ( 3 ) ] print ( " Yes " if a - b == d - e == g - h and b - c == e - f == h - i else " No " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
l = [ ] for i in range ( 3 ) : ll = [ int ( x ) for x in input ( ) . split ( ) ] l . append ( ll ) if l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] != l [ 1 ] [ 0 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 0 ] - l [ 2 ] [ 1 ] != l [ 1 ] [ 0 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 0 ] [ 2 ] - l [ 0 ] [ 1 ] != l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 2 ] - l [ 2 ] [ 1 ] != l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 0 ] [ 0 ] - l [ 1 ] [ 0 ] != l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] or l [ 0 ] [ 2 ] - l [ 1 ] [ 2 ] != l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 2 ] [ 0 ] - l [ 1 ] [ 0 ] != l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 2 ] - l [ 1 ] [ 2 ] != l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys import numpy as np input = sys . stdin . readline def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def TL ( mylist ) : return np . array ( mylist ) . T . tolist ( ) mylist1 = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for i in range ( 3 ) ] mylist2 = TL ( mylist1 ) def chech ( mylist ) : result = True b1 = mylist [ 0 ] [ 0 ] - mylist [ 0 ] [ 1 ] c1 = mylist [ 0 ] [ 0 ] - mylist [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if ( mylist [ i ] [ 0 ] - mylist [ i ] [ 1 ] ) != b1 or ( mylist [ i ] [ 0 ] - mylist [ i ] [ 2 ] ) != c1 : result = False break return result if chech ( mylist1 ) and chech ( mylist2 ) : print ( " Yes " ) else : print ( " No " )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] is_able = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : is_able = False break if is_able : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = c [ 0 ] [ 0 ] for i in range ( a1 + 1 ) : b1 = a1 - i b2 = c [ 0 ] [ 1 ] - i b3 = c [ 0 ] [ 2 ] - i a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) exit ( )
import sys grid = [ ] for i in range ( 3 ) : array = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) grid . append ( array ) point = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 1 ] ] for i , j in point : if grid [ i ] [ j ] != grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j ] - grid [ i + 1 ] [ j + 1 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] : flag = False if C [ i ] [ j ] - C [ i ] [ j - 1 ] != C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] : flag = False print ( ' Yes ' if flag else ' No ' )
l = list ( ) for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if l [ 0 ] [ 0 ] - l [ 1 ] [ 0 ] == l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] == l [ 0 ] [ 2 ] - l [ 1 ] [ 2 ] : if l [ 2 ] [ 0 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
a = [ ] for i in range ( 3 ) : line = list ( map ( int , input ( ) . split ( ) ) ) a . append ( line ) r = [ ] g = [ ] for i in range ( 3 ) : x = a [ 0 ] [ i ] r . append ( x ) y = a [ i ] [ 0 ] - a [ 0 ] [ 0 ] g . append ( y ) g [ 0 ] = 0 flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] [ j ] != ( g [ i ] + r [ j ] ) : flag = False break if flag : print ( " Yes " ) else : print ( " No " )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , tan , asin , acos , atan , radians , degrees , log2 from itertools import accumulate , permutations , combinations , combinations_with_replacement , product , groupby from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from bisect import bisect , bisect_left from fractions import gcd from heapq import heappush , heappop from functools import reduce def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
def main ( ) : a = [ [ 0 ] * 3 for i in range ( 3 ) ] a [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) a [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) a [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) : minum = min ( a [ i ] ) for j in range ( 3 ) : a [ i ] [ j ] = a [ i ] [ j ] - minum ans = True for i in range ( 3 ) : if a [ 0 ] [ i ] != a [ 1 ] [ i ] or a [ 1 ] [ i ] != a [ 2 ] [ i ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' ) main ( )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) flag = True abs_a = [ ] for i in range ( 3 ) : abs_a . append ( abs ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) ) abs_a . append ( abs ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) ) abs_a . append ( abs ( c [ 0 ] [ i ] - c [ 2 ] [ i ] ) ) if abs_a [ 0 ] == abs_a [ 3 ] and abs_a [ 0 ] == abs_a [ 6 ] : pass else : flag = False if abs_a [ 1 ] == abs_a [ 4 ] and abs_a [ 1 ] == abs_a [ 7 ] : pass else : flag = False if abs_a [ 2 ] == abs_a [ 5 ] and abs_a [ 2 ] == abs_a [ 8 ] : pass else : flag = False if flag : print ( " Yes " ) else : print ( " No " )
import numpy as np N = 3 rows = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] arr = np . array ( rows ) b1 = arr [ 0 ] - arr [ 0 ] [ 0 ] b2 = arr [ 1 ] - arr [ 1 ] [ 0 ] b3 = arr [ 2 ] - arr [ 2 ] [ 0 ] if not ( list ( b1 ) == list ( b2 ) == list ( b3 ) ) : print ( " No " ) exit ( ) arr = arr . T a1 = arr [ 0 ] - arr [ 0 ] [ 0 ] a2 = arr [ 1 ] - arr [ 1 ] [ 0 ] a3 = arr [ 2 ] - arr [ 2 ] [ 0 ] if not ( list ( a1 ) == list ( a2 ) == list ( a3 ) ) : print ( " No " ) exit ( ) print ( " Yes " )
grid = list ( ) for a in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) grid . append ( [ a , b , c ] ) ans = ' No ' for a1 in range ( 0 , 101 ) : for a2 in range ( 0 , 101 ) : b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 1 ] [ 1 ] - a2 a3 = grid [ 2 ] [ 1 ] - b2 b3 = grid [ 2 ] [ 2 ] - a3 a_list = [ a1 , a2 , a3 ] b_list = [ b1 , b2 , b3 ] count = 0 for x in range ( 3 ) : for y in range ( 3 ) : if grid [ x ] [ y ] == a_list [ x ] + b_list [ y ] : count += 1 if count == 9 : ans = ' Yes ' break print ( ans )
N = 3 c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] ds = [ sum ( c [ j ] [ ( i + j ) % 3 ] for j in range ( N ) ) for i in range ( N ) ] if ds [ 0 ] == ds [ 1 ] == ds [ 2 ] : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) ans = ' No ' if a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] and a [ 2 ] - a [ 1 ] == b [ 2 ] - b [ 1 ] == c [ 2 ] - c [ 1 ] : if b [ 0 ] - a [ 0 ] == b [ 1 ] - a [ 1 ] == b [ 2 ] - a [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : ans = ' Yes ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i ] [ j + 1 ] == c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : r = list ( map ( int , input ( ) . split ( ) ) ) c . append ( r ) d1 = set ( [ ] ) d2 = set ( [ ] ) d3 = set ( [ ] ) d4 = set ( [ ] ) for i in range ( 3 ) : d1 . add ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) d2 . add ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) d3 . add ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d4 . add ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) if len ( d1 ) == 1 and len ( d2 ) == 1 and len ( d3 ) == 1 and len ( d4 ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
def is_correct ( grids ) : for a1 in range ( min ( 101 , grids [ 0 ] [ 0 ] + 1 ) ) : b_list = grids [ 0 ] [ 0 ] - a1 , grids [ 0 ] [ 1 ] - a1 , grids [ 0 ] [ 2 ] - a1 a2 , a3 = grids [ 1 ] [ 0 ] - b_list [ 0 ] , grids [ 2 ] [ 0 ] - b_list [ 0 ] a_list = [ a1 , a2 , a3 ] temp_grids = [ ] for an in a_list : row = [ ] for bn in b_list : row . append ( an + bn ) temp_grids . append ( row ) if grids == temp_grids : return True return False grids = [ ] for _ in range ( 3 ) : grids . append ( list ( map ( int , input ( ) . split ( ) ) ) ) print ( " Yes " if is_correct ( grids ) else " No " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if l [ i ] [ j ] == a [ i ] + b [ j ] : cnt += 1 if cnt == 9 : print ( " Yes " ) exit ( ) print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] b = [ 0 for _ in range ( 3 ) ] ans = ' Yes ' for i in range ( 3 ) : if i == 0 : for j in range ( 3 ) : b [ j ] = c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] else : for j in range ( 3 ) : if b [ j ] != c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] : ans = ' No ' break if ans == ' No ' : break print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def f ( ) : for i in range ( 2 ) : for j in range ( 2 ) : if C [ i ] [ j ] - C [ i ] [ j + 1 ] != C [ i + 1 ] [ j ] - C [ i + 1 ] [ j + 1 ] : return False if C [ j ] [ i ] - C [ j + 1 ] [ i ] != C [ j ] [ i + 1 ] - C [ j + 1 ] [ i + 1 ] : return False return True if f ( ) : print ( " Yes " ) else : print ( " No " )
def resolve ( ) : grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] is_flag = True for i in range ( 3 ) : A = grid [ 0 ] [ i - 1 ] - grid [ 0 ] [ i ] C = grid [ 2 ] [ i - 1 ] - grid [ 2 ] [ i ] B = grid [ 1 ] [ i - 1 ] - grid [ 1 ] [ i ] if A == B and B == C : pass else : is_flag = False print ( ' Yes ' ) if is_flag else print ( ' No ' ) if __name__ == " __main__ " : resolve ( )
import sys c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : arr1 = c [ i ] arr2 = c [ i + 1 ] d = arr1 [ 2 ] - arr2 [ 2 ] for j in range ( 2 ) : if d != arr1 [ j ] - arr2 [ j ] : print ( ' No ' ) sys . exit ( 0 ) for i in range ( 2 ) : d = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] for j in range ( 2 ) : if d != c [ j ] [ i ] - c [ j ] [ i + 1 ] : print ( ' No ' ) sys . exit ( 0 ) print ( ' Yes ' )
import sys , math from itertools import permutations , combinations from collections import defaultdict , Counter , deque from math import factorial from bisect import bisect_left , bisect_right sys . setrecursionlimit ( 10 ** 7 ) enu = enumerate MOD = 10 ** 9 + 7 def input ( ) : return sys . stdin . readline ( ) [ : - 1 ] pl = lambda x : print ( * x , sep = ' \n ' ) C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : lu = C [ i ] [ j ] for ii in range ( 3 ) : if i == ii : continue for jj in range ( 3 ) : if j == jj : continue rd = C [ ii ] [ jj ] ld = C [ ii ] [ j ] ru = C [ i ] [ jj ] if lu + rd != ld + ru : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) f = 0 for a1 in range ( min ( c1 ) + 1 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a2_1 = c2 [ 0 ] - b1 a2_2 = c2 [ 1 ] - b2 a2_3 = c2 [ 2 ] - b3 if not ( a2_1 == a2_2 and a2_2 == a2_3 ) : continue a3_1 = c3 [ 0 ] - b1 a3_2 = c3 [ 1 ] - b2 a3_3 = c3 [ 2 ] - b3 if not ( a3_1 == a3_2 and a3_2 == a3_3 ) : continue print ( " Yes " ) f = 1 break if not f : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D1 = [ [ ] for _ in range ( 3 ) ] D2 = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 2 ) : D1 [ i ] . append ( C [ i ] [ j ] - C [ i ] [ j + 1 ] ) for j in range ( 3 ) : for i in range ( 2 ) : D2 [ j ] . append ( C [ i ] [ j ] - C [ i + 1 ] [ j ] ) print ( ' Yes ' if D1 [ 0 ] == D1 [ 1 ] == D1 [ 2 ] and D2 [ 0 ] == D2 [ 1 ] == D2 [ 2 ] else ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 + c22 + c33 == c12 + c23 + c31 == c13 + c21 + c32 : print ( " Yes " ) else : print ( " No " )
P = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c_11 = P [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : P [ i ] [ j ] -= c_11 A_1 = 0 A_2 = P [ 1 ] [ 0 ] A_3 = P [ 2 ] [ 0 ] B_1 = 0 B_2 = P [ 0 ] [ 1 ] B_3 = P [ 0 ] [ 2 ] Flag = " Yes " if not A_2 + B_2 == P [ 1 ] [ 1 ] : Flag = " No " if not A_2 + B_3 == P [ 1 ] [ 2 ] : Flag = " No " if not A_3 + B_2 == P [ 2 ] [ 1 ] : Flag = " No " if not A_3 + B_3 == P [ 2 ] [ 2 ] : Flag = " No " print ( Flag )
n = 3 rows = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] nums = rows [ 0 ] + rows [ 1 ] + rows [ 2 ] isTrue = False if nums [ 0 ] - nums [ 1 ] == nums [ 3 ] - nums [ 4 ] == nums [ 6 ] - nums [ 7 ] and nums [ 0 ] - nums [ 3 ] == nums [ 1 ] - nums [ 4 ] == nums [ 2 ] - nums [ 5 ] : isTrue = True else : isTrue = False if nums [ 1 ] - nums [ 2 ] == nums [ 4 ] - nums [ 5 ] == nums [ 7 ] - nums [ 8 ] and nums [ 3 ] - nums [ 6 ] == nums [ 4 ] - nums [ 7 ] == nums [ 5 ] - nums [ 8 ] : isTrue = True else : isTrue = False if isTrue : print ( " Yes " ) else : print ( " No " )
def resolve ( ) : c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a01 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] a02 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] a12 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] b01 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b02 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] b12 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 3 ) : if ( ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) != a01 ) or ( c [ i ] [ 0 ] - c [ i ] [ 2 ] != a02 ) or ( c [ i ] [ 1 ] - c [ i ] [ 2 ] != a12 ) : return False if ( ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) != b01 or ( c [ 0 ] [ i ] - c [ 2 ] [ i ] ) != b02 or ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) != b12 ) : return False return True if __name__ == " __main__ " : if ( resolve ( ) ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] != c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : ans = False break for i in range ( 3 ) : for j in range ( 3 ) : if c [ j ] [ i ] - c [ ( j + 1 ) % 3 ] [ i ] != c [ j ] [ ( i + 1 ) % 3 ] - c [ ( j + 1 ) % 3 ] [ ( i + 1 ) % 3 ] : ans = False break print ( " Yes " if ans else " No " )
data = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = data [ 0 ] [ 0 ] - a1 b2 = data [ 0 ] [ 1 ] - a1 b3 = data [ 0 ] [ 2 ] - a1 if ( b1 + a2 == data [ 1 ] [ 0 ] and b2 + a2 == data [ 1 ] [ 1 ] and b3 + a2 == data [ 1 ] [ 2 ] and b1 + a3 == data [ 2 ] [ 0 ] and b2 + a3 == data [ 2 ] [ 1 ] and b3 + a3 == data [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
import numpy as np M = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) print ( ' Yes ' if ( np . all ( M [ 0 , : ] - M [ 0 , 0 ] == M [ 1 , : ] - M [ 1 , 0 ] ) and np . all ( M [ 0 , : ] - M [ 0 , 0 ] == M [ 2 , : ] - M [ 2 , 0 ] ) and np . all ( M [ : , 0 ] - M [ 0 , 0 ] == M [ : , 1 ] - M [ 0 , 1 ] ) and np . all ( M [ : , 0 ] - M [ 0 , 0 ] == M [ : , 2 ] - M [ 0 , 2 ] ) ) else ' No ' )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : A = [ i , j , k ] B = [ C [ 0 ] [ 0 ] - A [ 0 ] , C [ 1 ] [ 1 ] - A [ 1 ] , C [ 2 ] [ 2 ] - A [ 2 ] ] count = 0 for l in range ( 3 ) : for m in range ( 3 ) : if C [ l ] [ m ] == A [ l ] + B [ m ] : count += 1 if count == 9 : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( - 100 , 101 ) : b = [ c - a1 for c in C [ 0 ] ] for a2 in range ( - 100 , 101 ) : if b != [ c - a2 for c in C [ 1 ] ] : continue for a3 in range ( - 100 , 101 ) : if b == [ c - a3 for c in C [ 2 ] ] : print ( ' Yes ' ) quit ( ) print ( ' No ' )
C = [ ] import numpy as np for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : ALL = [ ] for j in range ( 3 ) : a = C [ 0 ] [ j ] - C [ i ] [ j ] ALL . append ( a ) if len ( set ( ALL ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for x in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def is_right ( a0 , a1 , a2 ) : for j in range ( H ) : if grids [ j ] [ 0 ] - a0 == grids [ j ] [ 1 ] - a1 == grids [ j ] [ 2 ] - a2 : continue else : return False return True H = 3 grids = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( H ) ] for a0 in range ( 100 + 1 ) : for a1 in range ( 100 + 1 ) : for a2 in range ( 100 + 1 ) : if is_right ( a0 , a1 , a2 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] if ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) and ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : print ( " Yes " ) else : print ( " No " )
mtx = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff1 = mtx [ 0 ] [ 0 ] - mtx [ 1 ] [ 0 ] diff2 = mtx [ 0 ] [ 0 ] - mtx [ 2 ] [ 0 ] diff3 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 1 ] diff4 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 2 ] if mtx [ 0 ] [ 1 ] - mtx [ 1 ] [ 1 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 1 ] [ 2 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 1 ] - mtx [ 2 ] [ 1 ] != diff2 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 2 ] [ 2 ] != diff2 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 2 ] != diff4 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 2 ] != diff4 : print ( ' No ' ) else : print ( ' Yes ' )
def che ( da ) : for i in range ( 2 ) : for j in range ( 2 ) : if da [ i ] [ j ] - da [ i ] [ j + 1 ] != da [ 2 ] [ j ] - da [ 2 ] [ j + 1 ] : return False if da [ i ] [ j ] - da [ i + 1 ] [ j ] != da [ i ] [ 2 ] - da [ i + 1 ] [ 2 ] : return False return True da = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if che ( da ) : print ( ' Yes ' ) else : print ( ' No ' )
a = [ 0 ] * 3 b = [ 0 ] * 3 C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : a [ i ] = C [ 0 ] [ i ] for i in range ( 3 ) : b [ i ] = C [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != C [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' if A [ 0 ] + C [ 2 ] != A [ 2 ] + C [ 0 ] : ans = ' No ' elif abs ( A [ 0 ] - A [ 1 ] ) != abs ( B [ 0 ] - B [ 1 ] ) or abs ( B [ 0 ] - B [ 1 ] ) != abs ( C [ 0 ] - C [ 1 ] ) : ans = ' No ' elif abs ( A [ 1 ] - A [ 2 ] ) != abs ( B [ 1 ] - B [ 2 ] ) or abs ( B [ 1 ] - B [ 2 ] ) != abs ( C [ 1 ] - C [ 2 ] ) : ans = ' No ' elif abs ( A [ 0 ] - B [ 0 ] ) != abs ( A [ 1 ] - B [ 1 ] ) or abs ( A [ 1 ] - B [ 1 ] ) != abs ( A [ 2 ] - B [ 2 ] ) : ans = ' No ' elif abs ( B [ 0 ] - C [ 0 ] ) != abs ( B [ 1 ] - C [ 1 ] ) or abs ( B [ 1 ] - C [ 1 ] ) != abs ( B [ 2 ] - C [ 2 ] ) : ans = ' No ' print ( ans )
l = list ( list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ) first = l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] second = l [ 0 ] [ 1 ] - l [ 0 ] [ 2 ] first1 = l [ 0 ] [ 0 ] - l [ 1 ] [ 0 ] second2 = l [ 1 ] [ 0 ] - l [ 2 ] [ 0 ] for k in range ( 3 ) : if ( l [ k ] [ 0 ] - l [ k ] [ 1 ] != first or l [ k ] [ 1 ] - l [ k ] [ 2 ] != second ) : print ( " No " ) exit ( ) for j in range ( 3 ) : if ( l [ 0 ] [ k ] - l [ 1 ] [ k ] != first1 or l [ 1 ] [ k ] - l [ 2 ] [ k ] != second2 ) : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) b1 , b2 , b3 = c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] if c2 [ 0 ] - b1 == c2 [ 1 ] - b2 == c2 [ 2 ] - b3 and c3 [ 0 ] - b1 == c3 [ 1 ] - b2 == c3 [ 2 ] - b3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if a1 == c [ 1 ] [ 1 ] - b1 == c [ 1 ] [ 2 ] - b2 \ and a2 == c [ 2 ] [ 1 ] - b1 == c [ 2 ] [ 2 ] - b2 : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 0 , 101 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c_grid = [ 0 ] * 3 for i in range ( 3 ) : c_grid [ i ] = list ( map ( int , input ( ) . split ( ) ) ) res = ' No ' for a1 in range ( 101 ) : b1 = c_grid [ 0 ] [ 0 ] - a1 b2 = c_grid [ 0 ] [ 1 ] - a1 b3 = c_grid [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue if b1 > 100 or b2 > 100 or b3 > 100 : continue a2 = c_grid [ 1 ] [ 0 ] - b1 if a2 < 0 or a2 > 100 or a2 != c_grid [ 1 ] [ 1 ] - b2 or a2 != c_grid [ 1 ] [ 2 ] - b3 : continue a3 = c_grid [ 2 ] [ 0 ] - b1 if a3 < 0 or a3 > 100 or a3 != c_grid [ 2 ] [ 1 ] - b2 or a3 != c_grid [ 2 ] [ 2 ] - b3 : continue res = ' Yes ' print ( res )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) for a in range ( 0 , 101 ) : for b in range ( 0 , 101 ) : for c in range ( 0 , 101 ) : a1 = a a2 = b a3 = c b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if a1 + b1 == c1 [ 0 ] and a1 + b2 == c1 [ 1 ] and a1 + b3 == c1 [ 2 ] \ and a2 + b1 == c2 [ 0 ] and a2 + b2 == c2 [ 1 ] and a2 + b3 == c2 [ 2 ] \ and a3 + b1 == c3 [ 0 ] and a3 + b2 == c3 [ 1 ] and a3 + b3 == c3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] s2 = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] s3 = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] s4 = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] s5 = c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] + c [ 0 ] [ 1 ] s6 = c [ 2 ] [ 0 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] if s1 == s2 == s3 == s4 == s5 == s6 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ ] for i in range ( 3 ) : C . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) ans = " Yes " A = [ 0 ] * 3 B = C [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : ans = " No " break print ( ans )
c = [ ] sum1 = 0 sum2 = 0 for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) sum1 += sum ( c [ i ] ) sum2 += c [ i ] [ i ] if sum1 == sum2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : pass else : ans = " No " print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) jud = True h1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] h2 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] w1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] w2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 3 ) : if c [ 0 ] [ i ] - c [ 1 ] [ i ] != h1 : jud = False if c [ 1 ] [ i ] - c [ 2 ] [ i ] != h2 : jud = False for i in range ( 3 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != w1 : jud = False if c [ i ] [ 1 ] - c [ i ] [ 2 ] != w2 : jud = False if jud : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] max_1st_row = max ( c [ 0 ] ) for a1 in range ( max_1st_row + 1 ) : b = [ ] for col in range ( 3 ) : b . append ( c [ 0 ] [ col ] - a1 ) a2 = c [ 1 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] != ( a2 + b [ 1 ] ) or c [ 1 ] [ 2 ] != ( a2 + b [ 2 ] ) : continue a3 = c [ 2 ] [ 0 ] - b [ 0 ] if c [ 2 ] [ 1 ] != ( a3 + b [ 1 ] ) or c [ 2 ] [ 2 ] != ( a3 + b [ 2 ] ) : continue print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) * 2 == c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] : if b [ 0 ] - c [ 0 ] == b [ 1 ] - c [ 1 ] == b [ 2 ] - c [ 2 ] : print ( " Yes " ) exit ( ) else : pass print ( " No " )
c_ = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 = c_ [ 0 ] [ 0 ] - a1 a2 = c_ [ 1 ] [ 0 ] - b1 b2 = c_ [ 0 ] [ 1 ] - a1 a3 = c_ [ 2 ] [ 0 ] - b1 b3 = c_ [ 0 ] [ 2 ] - a1 a_ = [ a1 , a2 , a3 ] b_ = [ b1 , b2 , b3 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c_ [ i ] [ j ] != a_ [ i ] + b_ [ j ] : flag = False print ( ' Yes ' if flag else ' No ' )
C = [ 0 ] * 3 A = [ 0 ] * 3 B = [ 0 ] * 3 for j in range ( 3 ) : C [ j ] = [ int ( x ) for x in input ( ) . split ( ) ] B [ 0 ] , B [ 1 ] , B [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] A [ 1 ] , A [ 2 ] = C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] flag = 0 for i in range ( 3 ) : for k in range ( 3 ) : if C [ i ] [ k ] != A [ i ] + B [ k ] : flag = 1 break if flag == 1 : print ( " No " ) else : print ( " Yes " )
from collections import deque C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 1 ) : q = deque ( [ C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i , C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i ] ) flag = 0 for j in range ( 1 , 3 ) : d = set ( ) for k in range ( 3 ) : d . add ( C [ j ] [ k ] - q . popleft ( ) ) if len ( d ) == 1 : flag += 1 if flag == 2 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def a ( c ) : for j in range ( 2 ) : if not ( ( c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] ) == ( c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] ) and ( c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] ) == ( c [ 2 ] [ j ] - c [ 2 ] [ j + 1 ] ) ) : return print ( ' No ' ) if not ( ( c [ j ] [ 0 ] - c [ j + 1 ] [ 0 ] ) == ( c [ j ] [ 1 ] - c [ j + 1 ] [ 1 ] ) and ( c [ j ] [ 1 ] - c [ j + 1 ] [ 1 ] ) == ( c [ j ] [ 2 ] - c [ j + 1 ] [ 2 ] ) ) : return print ( ' No ' ) return print ( ' Yes ' ) a ( c )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) ans = ' Yes ' diff_w = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] for i in range ( 3 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != diff_w [ j - 1 ] : ans = ' No ' break diff_h = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != diff_h [ i - 1 ] : ans = ' No ' break print ( ans )
ls = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def sub ( p , q ) : return p - q for i in range ( len ( ls ) ) : new = [ ls [ i ] [ 0 ] ] * 3 ls [ i ] = list ( map ( sub , ls [ i ] , new ) ) if ( list ( map ( sub , ls [ 0 ] , ls [ 1 ] ) ) == [ 0 , 0 , 0 ] ) and ( list ( map ( sub , ls [ 0 ] , ls [ 2 ] ) ) == [ 0 , 0 , 0 ] ) and ( list ( map ( sub , ls [ 2 ] , ls [ 1 ] ) ) == [ 0 , 0 , 0 ] ) : print ( " Yes " ) else : print ( " No " )
pre_x , pre_y , pre_z = None , None , None for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) if pre_x is None : pre_x , pre_y , pre_z = x , y , z else : if pre_y - pre_x != y - x or pre_z - pre_y != z - y or x - pre_x != y - pre_y or y - pre_y != z - pre_z : print ( ' No ' ) break else : print ( ' Yes ' )
r = [ None ] * 3 for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) r [ i ] = [ x [ i ] - x [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( r [ i ] == r [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
import sys if sys . platform == ' ios ' : sys . stdin = open ( ' input_file.txt ' ) c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 for i in range ( max ( max ( c ) ) + 1 ) : a0 = i b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : ans = ans + 1 break print ( ' Yes ' if ans != 0 else ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if C1 [ 1 ] + C2 [ 0 ] - C1 [ 0 ] == C2 [ 1 ] and C1 [ 1 ] + C3 [ 0 ] - C1 [ 0 ] == C3 [ 1 ] and \ C1 [ 2 ] + C3 [ 0 ] - C1 [ 0 ] == C3 [ 2 ] and C1 [ 2 ] + C2 [ 0 ] - C1 [ 0 ] == C2 [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) d1 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] d2 = C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] + C [ 0 ] [ 2 ] d3 = C [ 2 ] [ 0 ] + C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] if d1 == d2 == d3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : tmp = [ int ( x ) for x in input ( ) . split ( ) ] c . append ( tmp ) b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] a = [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e == g - h and b - c == e - f == h - i and a - c == d - f == g - i and a - d == b - e == c - f and d - g == e - h == f - i and a - g == b - h == c - i : print ( " Yes " ) else : print ( " No " )
from itertools import product flag = True c_list = [ ] for _ in range ( 3 ) : c_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) min_n = min ( sum ( c_list , [ ] ) ) new_list = [ ] for i in c_list : new_list . append ( [ j - min_n for j in i ] ) a = [ None , None , None ] b = [ None , None , None ] for i in range ( 3 ) : for j in range ( 3 ) : if new_list [ i ] [ j ] == 0 : a [ i ] = 0 a_other = [ num for num in [ 0 , 1 , 2 ] if i != num ] b [ j ] = 0 b_other = [ num for num in [ 0 , 1 , 2 ] if j != num ] for k in a_other : a [ k ] = new_list [ k ] [ j ] for k in b_other : b [ k ] = new_list [ i ] [ k ] break for i , j in product ( [ 0 , 1 , 2 ] , repeat = 2 ) : if new_list [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) flag = False break if flag : print ( ' Yes ' )
import sys c = [ input ( ) . split ( ) for i in range ( 3 ) ] num = [ int ( c [ i ] [ j ] ) for i in range ( 3 ) for j in range ( 3 ) ] if num [ 0 ] + num [ 4 ] != num [ 1 ] + num [ 3 ] : print ( ' No ' ) sys . exit ( ) elif num [ 4 ] + num [ 8 ] != num [ 5 ] + num [ 7 ] : print ( ' No ' ) sys . exit ( ) elif num [ 0 ] + num [ 8 ] != num [ 2 ] + num [ 6 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
import sys input = sys . stdin . readline C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] dx2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] dy1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] dy2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] ans = " Yes " for i in range ( 3 ) : if C [ 1 ] [ i ] - C [ 0 ] [ i ] != dx1 or C [ 2 ] [ i ] - C [ 1 ] [ i ] != dx2 : ans = " No " break if C [ i ] [ 1 ] - C [ i ] [ 0 ] != dy1 or C [ i ] [ 2 ] - C [ i ] [ 1 ] != dy2 : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = [ c [ 0 ] [ 0 ] - 0 , c [ 0 ] [ 1 ] - 0 , c [ 0 ] [ 2 ] - 0 ] a = [ c [ 0 ] [ 0 ] - b [ 0 ] , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
mat = [ ] for i in range ( 3 ) : mat . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ 0 ] [ i ] != mat [ j ] [ 0 ] - mat [ j ] [ i ] : ans = ' No ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ i ] [ 0 ] != mat [ 0 ] [ j ] - mat [ i ] [ j ] : ans = ' No ' print ( ans )
dat = [ ] for _ in range ( 3 ) : dat . append ( list ( map ( int , input ( ) . split ( ) ) ) ) f = True a1 , a2 , a3 , b1 , b2 , b3 = - 1 , - 1 , - 1 , - 1 , - 1 , - 1 a1 = 0 b1 = dat [ 0 ] [ 0 ] b2 = dat [ 0 ] [ 1 ] b3 = dat [ 0 ] [ 2 ] a2 = dat [ 1 ] [ 0 ] - b1 a3 = dat [ 2 ] [ 0 ] - b1 if dat [ 1 ] [ 1 ] != a2 + b2 : f = False if dat [ 1 ] [ 2 ] != a2 + b3 : f = False if dat [ 2 ] [ 1 ] != a3 + b2 : f = False if dat [ 2 ] [ 2 ] != a3 + b3 : f = False print ( " Yes " if f else " No " )
x = [ ] for i in range ( 3 ) : x . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = 1 for i in range ( 2 ) : if not ( x [ i + 1 ] [ 0 ] - x [ i ] [ 0 ] == x [ i + 1 ] [ 1 ] - x [ i ] [ 1 ] == x [ i + 1 ] [ 2 ] - x [ i ] [ 2 ] ) : flag = 0 break if flag == 1 : print ( " Yes " ) else : print ( " No " )
import sys c = [ ] for _ in range ( 3 ) : * C , = map ( int , input ( ) . split ( ) ) c . append ( C ) for a1 in range ( 0 , 101 , 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 if ( a2 + b2 ) != c [ 1 ] [ 1 ] : print ( " No " ) sys . exit ( ) if ( a2 + b3 ) != c [ 1 ] [ 2 ] : print ( " No " ) sys . exit ( ) a3 = c [ 2 ] [ 0 ] - b1 if ( a3 + b2 ) != c [ 2 ] [ 1 ] : print ( " No " ) sys . exit ( ) if ( a3 + b3 ) != c [ 2 ] [ 2 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = list ( zip ( * a ) ) c = a [ 0 ] d = b [ 0 ] f = True dx1 = c [ 1 ] - c [ 0 ] dx2 = c [ 2 ] - c [ 1 ] dy1 = d [ 1 ] - d [ 0 ] dy2 = d [ 2 ] - d [ 1 ] for i in range ( 3 ) : c = a [ i ] d = b [ i ] if dx1 == c [ 1 ] - c [ 0 ] and dx2 == c [ 2 ] - c [ 1 ] and dy1 == d [ 1 ] - d [ 0 ] and dy2 == d [ 2 ] - d [ 1 ] : f = True else : f = False break if f : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] bl = c [ 0 ] a2 = c [ 1 ] [ 0 ] - bl [ 0 ] a3 = c [ 2 ] [ 0 ] - bl [ 0 ] al = [ 0 , a2 , a3 ] flag = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != al [ i ] + bl [ j ] : flag = ' No ' break print ( flag )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for M in range ( 3 ) ] ans = " No " for i in range ( min ( l [ 0 ] ) + 1 ) : for j in range ( min ( l [ 1 ] ) + 1 ) : for k in range ( min ( l [ 2 ] ) + 1 ) : if ( l [ 0 ] [ 0 ] - i ) == ( l [ 1 ] [ 0 ] - j ) and ( l [ 0 ] [ 0 ] - i ) == ( l [ 2 ] [ 0 ] - k ) and \ ( l [ 0 ] [ 1 ] - i ) == ( l [ 1 ] [ 1 ] - j ) and ( l [ 0 ] [ 1 ] - i ) == ( l [ 2 ] [ 1 ] - k ) and \ ( l [ 0 ] [ 2 ] - i ) == ( l [ 1 ] [ 2 ] - j ) and ( l [ 0 ] [ 2 ] - i ) == ( l [ 2 ] [ 2 ] - k ) : ans = " Yes " print ( ans )
lst = [ ] for i in range ( 3 ) : a = map ( int , input ( ) . split ( ) ) for j in a : lst . append ( j ) for i in range ( lst [ 0 ] + 1 ) : a , d = i , lst [ 0 ] - i b = lst [ 3 ] - lst [ 0 ] + a c = lst [ 6 ] - lst [ 0 ] + a e = lst [ 1 ] - lst [ 0 ] + d f = lst [ 2 ] - lst [ 0 ] + d if lst [ 4 ] == b + e and lst [ 5 ] == b + f and lst [ 7 ] == c + e and lst [ 8 ] == c + f : print ( " Yes " ) exit ( ) print ( " No " )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) ; d , e , f = m ( ) ; g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] p = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] q = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] b1 , b2 , b3 = 0 , 0 , 0 for i in range ( - 200 , 201 ) : b2 = i b3 = q - b2 b1 = b2 - p if C [ 0 ] [ 0 ] - b1 == C [ 0 ] [ 1 ] - b2 and C [ 0 ] [ 0 ] - b1 == C [ 0 ] [ 2 ] - b3 : if C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 and C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 2 ] - b3 : if C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 and C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 2 ] - b3 : print ( " Yes " ) ; exit ( ) print ( " No " )
A = [ ] for i in range ( 3 ) : A . append ( list ( map ( int , input ( ) . split ( ) ) ) ) t = 0 if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 0 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 0 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 2 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 2 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 0 ] [ 0 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 0 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 0 ] - A [ 2 ] [ 1 ] : if A [ 0 ] [ 2 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 2 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 2 ] [ 1 ] : t = 1 if t == 1 : print ( " Yes " ) else : print ( " No " )
p = [ ] for i in range ( 3 ) : p . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( p [ 0 ] [ 0 ] - p [ 0 ] [ 1 ] == p [ 1 ] [ 0 ] - p [ 1 ] [ 1 ] == p [ 2 ] [ 0 ] - p [ 2 ] [ 1 ] and p [ 0 ] [ 1 ] - p [ 0 ] [ 2 ] == p [ 1 ] [ 1 ] - p [ 1 ] [ 2 ] == p [ 2 ] [ 1 ] - p [ 2 ] [ 2 ] and p [ 0 ] [ 2 ] - p [ 0 ] [ 0 ] == p [ 1 ] [ 2 ] - p [ 1 ] [ 0 ] == p [ 2 ] [ 2 ] - p [ 2 ] [ 0 ] and p [ 0 ] [ 0 ] - p [ 1 ] [ 0 ] == p [ 0 ] [ 1 ] - p [ 1 ] [ 1 ] == p [ 0 ] [ 2 ] - p [ 1 ] [ 2 ] and p [ 1 ] [ 0 ] - p [ 2 ] [ 0 ] == p [ 1 ] [ 1 ] - p [ 2 ] [ 1 ] == p [ 1 ] [ 2 ] - p [ 2 ] [ 2 ] and p [ 2 ] [ 0 ] - p [ 0 ] [ 0 ] == p [ 2 ] [ 1 ] - p [ 0 ] [ 1 ] == p [ 2 ] [ 2 ] - p [ 0 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
list_c = [ ] for i in range ( 3 ) : temp_c = list ( map ( int , input ( ) . split ( ) ) ) list_c . append ( temp_c ) list_a = [ 0 for _ in range ( 3 ) ] list_b = [ 0 for _ in range ( 3 ) ] for i in range ( 3 ) : list_b [ i ] = list_c [ i ] [ 0 ] for i in range ( 3 ) : if i != 0 : list_a [ i ] = list_c [ 0 ] [ i ] - list_b [ 0 ] for j in range ( 3 ) : for i in range ( 3 ) : if list_c [ i ] [ j ] != list_a [ j ] + list_b [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and b [ 0 ] - c [ 0 ] == b [ 1 ] - c [ 1 ] == b [ 2 ] - c [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
import sys input = sys . stdin . readline a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx = [ 0 ] * 2 dy = [ 0 ] * 2 for i in range ( 2 ) : dx [ i ] = a [ 0 ] [ i + 1 ] - a [ 0 ] [ i ] for i in range ( 2 ) : dy [ i ] = a [ i + 1 ] [ 0 ] - a [ i ] [ 0 ] for i in range ( 3 ) : for j in range ( 2 ) : if a [ i ] [ j + 1 ] - a [ i ] [ j ] != dx [ j ] : print ( " No " ) exit ( 0 ) for i in range ( 3 ) : for j in range ( 2 ) : if a [ j + 1 ] [ i ] - a [ j ] [ i ] != dy [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( input_list ( ) ) ) for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a1 + b1 == c [ 0 ] [ 0 ] and a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and \ a2 + b1 == c [ 1 ] [ 0 ] and a3 + b1 == c [ 2 ] [ 0 ] and a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and \ a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' ) def input_list ( ) : return map ( int , input ( ) . split ( ) ) def input_list_str ( ) : return map ( str , input ( ) . split ( ) ) def lcm_base ( x , y ) : return ( x * y ) // fractions . gcd ( x , y ) def lcm_list ( numbers ) : return reduce ( lcm_base , numbers , 1 ) def gcd ( * numbers ) : return reduce ( fractions . gcd , numbers ) def gcd_list ( numbers ) : return reduce ( fractions . gcd , numbers ) def divide_two ( arg ) : c = 0 while True : if c >= 2 : break if arg % 2 != 0 : break arg // = 2 c += 1 return c import math import fractions import collections from functools import reduce main ( )
import numpy as np from itertools import product import sys read = sys . stdin . buffer . read C = np . array ( read ( ) . split ( ) , np . int32 ) . reshape ( 3 , 3 ) a , b , c = np . max ( C + 1 , axis = 1 ) N = [ ] for i , j in product ( range ( a ) , range ( b ) ) : x = C [ 0 , : ] - i y = C [ 1 , : ] - j if np . all ( x == y ) : N . append ( x ) flag = 0 z = C [ 2 , : ] for n in N : for k in range ( c ) : if np . all ( z - k == n ) : flag = 1 break if flag : break print ( [ ' No ' , ' Yes ' ] [ flag ] )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 0 , c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 if a2 + b2 != c [ 1 ] [ 1 ] : continue if a3 + b2 != c [ 2 ] [ 1 ] : continue b3 = c [ 0 ] [ 2 ] - a1 if a2 + b3 != c [ 1 ] [ 2 ] : continue if a3 + b3 != c [ 2 ] [ 2 ] : continue print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
import numpy as np c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( [ c1 , c2 , c3 ] ) Ct = np . transpose ( C ) ans = C + Ct fact = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if not ( ans [ i , j ] == C [ i , i ] + C [ j , j ] ) : fact = " No " break print ( fact )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a2 = l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] a3 = l [ 0 ] [ 2 ] - l [ 0 ] [ 0 ] b2 = l [ 1 ] [ 0 ] - l [ 0 ] [ 0 ] b3 = l [ 2 ] [ 0 ] - l [ 0 ] [ 0 ] is_takahashi_true = True for i in range ( 1 , 3 ) : ta2 = l [ i ] [ 1 ] - l [ i ] [ 0 ] ta3 = l [ i ] [ 2 ] - l [ i ] [ 0 ] tb2 = l [ 1 ] [ i ] - l [ 0 ] [ i ] tb3 = l [ 2 ] [ i ] - l [ 0 ] [ i ] if a2 != ta2 or a3 != ta3 or b2 != tb2 or b3 != tb3 : is_takahashi_true = False print ( " YNeos " [ not is_takahashi_true : : 2 ] )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] and C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] \ and C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a1 , a2 , a3 , b1 , b2 , b3 = 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] if c [ 0 ] [ 0 ] == a1 + b1 and c [ 0 ] [ 1 ] == a1 + b2 and c [ 0 ] [ 2 ] == a1 + b3 \ and c [ 1 ] [ 0 ] == a2 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 \ and c [ 2 ] [ 0 ] == a3 + b1 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) else : print ( " No " )
import itertools def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i , j , k in itertools . product ( range ( grid [ 0 ] [ 0 ] + 1 ) , range ( grid [ 1 ] [ 1 ] + 1 ) , range ( grid [ 2 ] [ 2 ] + 1 ) ) : a = [ i , j , k ] b = [ grid [ idx ] [ idx ] - v for idx , v in enumerate ( a ) ] if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = " No " for a1 in c [ 0 ] : for a2 in c [ 1 ] : for a3 in c [ 2 ] : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 if a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] : ans = " Yes " break if ans == " Yes " : break if ans == " Yes " : break print ( ans )
def pin ( type = int ) : return map ( type , input ( ) . split ( ) ) def worstdata ( ) : a = 0 return a def comp ( x , y ) : dp = [ 0 , max ( act [ 0 ] ) ] * ( N + 1 ) return 0 C = [ list ( pin ( ) ) for _ in range ( 3 ) ] yoko = [ [ 0 ] * 3 for _ in range ( 3 ) ] yoko [ 0 ] = [ C [ 1 ] [ i ] - C [ 0 ] [ i ] for i in range ( 3 ) ] yoko [ 1 ] = [ C [ 2 ] [ i ] - C [ 1 ] [ i ] for i in range ( 3 ) ] yoko [ 2 ] = [ C [ 0 ] [ i ] - C [ 2 ] [ i ] for i in range ( 3 ) ] cond = 1 for kakaka in range ( 3 ) : if not ( yoko [ kakaka ] [ 0 ] == yoko [ kakaka ] [ 1 ] and yoko [ kakaka ] [ 1 ] == yoko [ kakaka ] [ 2 ] ) : cond = 0 break print ( [ " No " , " Yes " ] [ cond ] )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) diff1 = [ c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] , c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ] diff2 = [ c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] , c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] , c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ] if diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 2 ] == diff1 [ 1 ] and diff2 [ 0 ] == diff2 [ 1 ] and diff2 [ 2 ] == diff2 [ 1 ] : print ( " Yes " ) else : print ( " No " )
M = [ ] for i in range ( 3 ) : row = list ( map ( int , input ( ) . split ( ) ) ) M . append ( row ) flg = True for i in range ( 3 ) : if M [ 0 ] [ i ] - M [ 0 ] [ i - 1 ] == M [ 1 ] [ i ] - M [ 1 ] [ i - 1 ] == M [ 2 ] [ i ] - M [ 2 ] [ i - 1 ] : continue else : flg = False if M [ i ] [ 0 ] - M [ i - 1 ] [ 0 ] == M [ i ] [ 1 ] - M [ i - 1 ] [ 1 ] == M [ i ] [ 2 ] - M [ i - 1 ] [ 2 ] : continue else : flg = False if flg : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = ' No ' if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] and C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : if C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] and C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] : result = ' Yes ' print ( result )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] print ( " Yes " if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] else " No " )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) def f ( ) : for i in range ( 2 ) : if not C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : return False for i in range ( 2 ) : if not C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : return False return True if f ( ) : print ( " Yes " ) else : print ( " No " )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if L [ 0 ] [ 0 ] + L [ 1 ] [ 1 ] != L [ 0 ] [ 1 ] + L [ 1 ] [ 0 ] : ans = ' No ' if L [ 0 ] [ 1 ] + L [ 1 ] [ 2 ] != L [ 0 ] [ 2 ] + L [ 1 ] [ 1 ] : ans = ' No ' if L [ 1 ] [ 0 ] + L [ 2 ] [ 1 ] != L [ 1 ] [ 1 ] + L [ 2 ] [ 0 ] : ans = ' No ' if L [ 1 ] [ 1 ] + L [ 2 ] [ 2 ] != L [ 1 ] [ 2 ] + L [ 2 ] [ 1 ] : ans = ' No ' print ( ans )
def m ( a , b ) : n = 3 L = [ 0 ] * 3 for i in range ( n ) : L [ i ] = a [ i ] - b [ i ] return L def f ( L ) : return len ( set ( L ) ) == 1 C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) F = True for i , j in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : F &= f ( m ( C [ i ] , C [ j ] ) ) if F : print ( " Yes " ) else : print ( " No " )
def solve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : a0 = i b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
import sys from math import sqrt from collections import Counter input = sys . stdin . readline def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( MI ( ) ) inf = float ( " inf " ) mod = 10 ** 9 + 7 def main ( ) : c1 = LI ( ) c2 = LI ( ) c3 = LI ( ) if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : if c2 [ 1 ] - c2 [ 2 ] == c2 [ 1 ] - c2 [ 2 ] == c3 [ 1 ] - c3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " ) pass if __name__ == " __main__ " : main ( )
import sys C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : if not ( ( C [ i ] [ 0 ] - C [ ( i + 1 ) % 3 ] [ 0 ] ) == ( C [ i ] [ 1 ] - C [ ( i + 1 ) % 3 ] [ 1 ] ) == ( C [ i ] [ 2 ] - C [ ( i + 1 ) % 3 ] [ 2 ] ) ) : print ( ' No ' ) sys . exit ( ) for j in range ( 3 ) : if not ( ( C [ 0 ] [ j ] - C [ 0 ] [ ( j + 1 ) % 3 ] ) == ( C [ 1 ] [ j ] - C [ 1 ] [ ( j + 1 ) % 3 ] ) == ( C [ 2 ] [ j ] - C [ 2 ] [ ( j + 1 ) % 3 ] ) ) : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
import sys input = sys . stdin . readline c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i ] [ j + 1 ] != c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
l = [ ] l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if l [ i ] [ 1 ] - l [ i ] [ 0 ] != l [ i + 1 ] [ 1 ] - l [ i + 1 ] [ 0 ] or l [ i ] [ 2 ] - l [ i ] [ 1 ] != l [ i + 1 ] [ 2 ] - l [ i + 1 ] [ 1 ] : print ( ' No ' ) break if i == 1 : print ( ' Yes ' )
def main ( ) : import sys sys . setrecursionlimit ( 10 ** 7 ) G = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def recursion ( ai = 0 , b0 = - 1 , b1 = - 1 , b2 = - 1 ) : if ai == 3 : return True if ai > 0 : d = G [ ai ] [ 0 ] - b0 if ( G [ ai ] [ 0 ] - b0 ) == ( G [ ai ] [ 1 ] - b1 ) == ( G [ ai ] [ 2 ] - b2 ) and 0 <= d <= 100 : return recursion ( ai + 1 , b0 , b1 , b2 ) else : return False for a in range ( 100 + 1 ) : d = G [ 0 ] [ 0 ] - a if d < 0 : break b0 = d d = G [ 0 ] [ 1 ] - a if d < 0 : break b1 = d d = G [ 0 ] [ 2 ] - a if d < 0 : break b2 = d if recursion ( ai + 1 , b0 , b1 , b2 ) : return True return False cond = recursion ( ) print ( ' Yes ' if cond else ' No ' ) if __name__ == ' __main__ ' : main ( )
c1 = tuple ( map ( int , input ( ) . split ( ) ) ) c2 = tuple ( map ( int , input ( ) . split ( ) ) ) c3 = tuple ( map ( int , input ( ) . split ( ) ) ) q = 0 adif = [ c1 [ 1 ] - c1 [ 0 ] , c1 [ 2 ] - c1 [ 1 ] ] bdif1 = int ( c2 [ 0 ] - c1 [ 0 ] ) bdif2 = int ( c3 [ 0 ] - c2 [ 0 ] ) acnt = 0 bdif = 0 if c2 [ 1 ] - c2 [ 0 ] != adif [ 0 ] : q = 1 if c2 [ 2 ] - c2 [ 1 ] != adif [ 1 ] : q = 1 if c3 [ 1 ] - c3 [ 0 ] != adif [ 0 ] : q = 1 if c3 [ 2 ] - c3 [ 1 ] != adif [ 1 ] : q = 1 if int ( c2 [ 1 ] - c1 [ 1 ] ) != bdif1 : q = 1 if c2 [ 2 ] - c1 [ 2 ] != bdif1 : q = 1 if c3 [ 1 ] - c2 [ 1 ] != bdif2 : q = 1 if c3 [ 2 ] - c2 [ 2 ] != bdif2 : q = 1 if q == 1 : print ( " No " ) else : print ( " Yes " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l1 = [ ] for i in range ( 3 ) : l1 . append ( tuple ( j - min ( l [ i ] ) for j in l [ i ] ) ) if len ( set ( l1 ) ) != 1 : print ( ' No ' ) exit ( ) k = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : k [ j ] [ i ] = l [ i ] [ j ] k1 = [ ] for i in range ( 3 ) : k1 . append ( tuple ( j - min ( k [ i ] ) for j in k [ i ] ) ) if len ( set ( k1 ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] B = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] A = [ 0 , C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) quit ( ) print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] print ( ' Yes ' ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] else print ( ' No ' )
import sys input = sys . stdin . readline c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : b1 , b2 , b3 = [ x - i for x in c [ 0 ] ] if [ b1 + j , b2 + j , b3 + j ] == c [ 1 ] and [ b1 + k , b2 + k , b3 + k ] == c [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 - c4 == c2 - c5 == c3 - c6 and \ c1 - c7 == c2 - c8 == c3 - c9 and \ c4 - c7 == c5 - c8 == c6 - c9 : print ( ' Yes ' ) else : print ( ' No ' )
table = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = table [ 0 ] [ 0 ] - a1 b2 = table [ 1 ] [ 0 ] - a1 b3 = table [ 2 ] [ 0 ] - a1 a2 = table [ 0 ] [ 1 ] - b1 a3 = table [ 0 ] [ 2 ] - b1 if ( a2 + b2 == table [ 1 ] [ 1 ] and a3 + b2 == table [ 1 ] [ 2 ] and a2 + b3 == table [ 2 ] [ 1 ] and a3 + b3 == table [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) b = grid [ 0 ] a = ( 0 , grid [ 1 ] [ 1 ] - b [ 1 ] , grid [ 2 ] [ 2 ] - b [ 2 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != grid [ i ] [ j ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
def main ( ) : A = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] from itertools import product for a1 , a2 , a3 in product ( range ( 101 ) , repeat = 3 ) : c1 = A [ 0 ] [ 0 ] - a1 == A [ 1 ] [ 0 ] - a2 == A [ 2 ] [ 0 ] - a3 c2 = A [ 0 ] [ 1 ] - a1 == A [ 1 ] [ 1 ] - a2 == A [ 2 ] [ 1 ] - a3 c3 = A [ 0 ] [ 2 ] - a1 == A [ 1 ] [ 2 ] - a2 == A [ 2 ] [ 2 ] - a3 if c1 and c2 and c3 : return print ( " Yes " ) print ( " No " ) if __name__ == ' __main__ ' : main ( )
cc = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] tc = [ x for c in cc for x in c ] if sum ( tc ) % 3 != 0 : print ( ' No ' ) else : cnt = 0 for i in range ( 3 ) : cnt += cc [ i ] [ i ] if cnt == sum ( tc ) // 3 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : grid = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] a1 = 0 a2 = 0 a3 = 0 b1 = 0 b2 = 0 b3 = 0 find_a1 = False find_a2 = False find_a3 = False find_b1 = False find_b2 = False find_b3 = False find_all = False for a in range ( 101 ) : find_a1 = False find_a2 = False find_a3 = False find_b1 = False find_b2 = False find_b3 = False for b in range ( 101 ) : if a + b == grid [ 0 ] [ 0 ] : b1 = b find_b1 = True if a + b == grid [ 0 ] [ 1 ] : b2 = b find_b2 = True if a + b == grid [ 0 ] [ 2 ] : b3 = b find_b3 = True if find_b1 and find_b2 and find_b3 : a1 = a find_a1 = True break for a_ in range ( 101 ) : if ( a_ == grid [ 1 ] [ 0 ] - b1 ) and ( a_ == grid [ 1 ] [ 1 ] - b2 ) and ( a_ == grid [ 1 ] [ 2 ] - b3 ) : a2 = a_ find_a2 = True break for a_ in range ( 101 ) : if ( a_ == grid [ 2 ] [ 0 ] - b1 ) and ( a_ == grid [ 2 ] [ 1 ] - b2 ) and ( a_ == grid [ 2 ] [ 2 ] - b3 ) : a3 = a_ find_a3 = True break if find_a1 and find_a2 and find_a3 and find_b1 and find_b2 and find_b3 : find_all = True break if find_all : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : if not c [ 1 ] [ 0 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] == c [ 1 ] [ 2 ] - b [ 2 ] : ans = " No " if not c [ 2 ] [ 0 ] - b [ 0 ] == c [ 2 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] : ans = " No " print ( ans )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) flag = False for a1 in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 , 0 ] - a1 b2 = c [ 0 , 1 ] - a1 b3 = c [ 0 , 2 ] - a1 if c [ 1 , 0 ] - b1 == c [ 1 , 1 ] - b2 == c [ 1 , 2 ] - b3 and c [ 2 , 0 ] - b1 == c [ 2 , 1 ] - b2 == c [ 2 , 2 ] - b3 : print ( ' Yes ' ) flag = True break if not flag : print ( ' No ' )
A = list ( map ( int , input ( ) . split ( ) ) ) x = A [ 1 ] - A [ 0 ] y = A [ 2 ] - A [ 1 ] f = 0 for i in range ( 2 ) : B = list ( map ( int , input ( ) . split ( ) ) ) if B [ 1 ] - B [ 0 ] != x or B [ 2 ] - B [ 1 ] != y : f = 1 break if f == 0 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] K = C [ 0 ] [ 0 ] b1 , b2 = C [ 0 ] [ 1 ] - K , C [ 0 ] [ 2 ] - K a1 , a2 = C [ 1 ] [ 0 ] - K , C [ 2 ] [ 0 ] - K if C [ 1 ] [ 1 ] == K + a1 + b1 and C [ 1 ] [ 2 ] == K + a1 + b2 and C [ 2 ] [ 1 ] == K + a2 + b1 and C [ 2 ] [ 2 ] == K + a2 + b2 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) D1 = [ ] stp = 0 for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( j + 1 , 3 ) : D1 . append ( c [ i ] [ j ] - c [ i ] [ k ] ) for i in range ( 6 ) : if D1 [ i ] != D1 [ i + 3 ] : stp += 1 D2 = [ ] for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( j + 1 , 3 ) : D2 . append ( c [ j ] [ i ] - c [ k ] [ i ] ) for i in range ( 6 ) : if D2 [ i ] != D2 [ i + 3 ] : stp += 1 if stp == 0 : print ( ' Yes ' ) else : print ( ' No ' )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 1 ) : for j in range ( len ( a ) - 1 ) : b = a [ j + 1 ] [ i ] - a [ j ] [ i ] if a [ j + 1 ] [ i + 1 ] - a [ j ] [ i + 1 ] != b or a [ j + 1 ] [ i + 2 ] - a [ j ] [ i + 2 ] != b : print ( " No " ) exit ( ) print ( " Yes " )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] fin = False for a1 in range ( 101 ) : if fin : break for a2 in range ( 101 ) : if fin : break for a3 in range ( 101 ) : if ( grid [ 0 ] [ 0 ] - a1 == grid [ 1 ] [ 0 ] - a2 and grid [ 1 ] [ 0 ] - a2 == grid [ 2 ] [ 0 ] - a3 ) and ( grid [ 0 ] [ 1 ] - a1 == grid [ 1 ] [ 1 ] - a2 and grid [ 1 ] [ 1 ] - a2 == grid [ 2 ] [ 1 ] - a3 ) and ( grid [ 0 ] [ 2 ] - a1 == grid [ 1 ] [ 2 ] - a2 and grid [ 1 ] [ 2 ] - a2 == grid [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) fin = True break if not fin : print ( " No " )
ans = [ ] flag = True for i in range ( 3 ) : ans . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : diff1 = ans [ i ] [ 0 ] - ans [ i + 1 ] [ 0 ] diff2 = ans [ i ] [ 1 ] - ans [ i + 1 ] [ 1 ] diff3 = ans [ i ] [ 2 ] - ans [ i + 1 ] [ 2 ] if diff1 != diff2 or diff2 != diff2 or diff3 != diff1 : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = True perm = ( ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) ) for p in perm : x0 = c [ p [ 0 ] ] [ 0 ] - c [ p [ 1 ] ] [ 0 ] x1 = c [ p [ 0 ] ] [ 1 ] - c [ p [ 1 ] ] [ 1 ] x2 = c [ p [ 0 ] ] [ 2 ] - c [ p [ 1 ] ] [ 2 ] if not ( x0 == x1 and x1 == x2 ) : result = False break y0 = c [ 0 ] [ p [ 0 ] ] - c [ 0 ] [ p [ 1 ] ] y1 = c [ 1 ] [ p [ 0 ] ] - c [ 1 ] [ p [ 1 ] ] y2 = c [ 2 ] [ p [ 0 ] ] - c [ 2 ] [ p [ 1 ] ] if not ( y0 == y1 and y1 == y2 ) : result = False break if result : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) j1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] j2 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : _j1 = c [ i ] [ 0 ] - c [ i ] [ 1 ] _j2 = c [ i ] [ 1 ] - c [ i ] [ 2 ] if j1 == _j1 and j2 == _j2 : continue print ( " No " ) break else : print ( " Yes " )
from itertools import permutations def main ( ) : grid = [ ] num_sum = 0 for _ in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( " " ) ) ) num_sum += sum ( tmp ) grid . append ( tmp ) num_sum //= 3 index_list = permutations ( [ 0 , 1 , 2 ] ) answer = " Yes " for index in index_list : if not grid [ 0 ] [ index [ 0 ] ] + grid [ 1 ] [ index [ 1 ] ] + grid [ 2 ] [ index [ 2 ] ] == num_sum : answer = " No " break print ( answer ) if __name__ == ' __main__ ' : main ( )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 ans = False for a1 in range ( C [ 0 ] [ 0 ] + 1 ) : tmp = True b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] != a2 + b2 : tmp = False if C [ 1 ] [ 2 ] != a2 + b3 : tmp = False if C [ 2 ] [ 1 ] != a3 + b2 : tmp = False if C [ 2 ] [ 2 ] != a3 + b3 : tmp = False if tmp == True : ans = True if ans : print ( " Yes " ) else : print ( " No " )
n = 3 x = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] a = [ 0 ] * n b = [ 0 ] * n a [ 0 ] = 0 b [ 0 ] = x [ 0 ] [ 0 ] b [ 1 ] = x [ 0 ] [ 1 ] b [ 2 ] = x [ 0 ] [ 2 ] a [ 1 ] = x [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = x [ 2 ] [ 0 ] - b [ 0 ] for i in range ( n ) : for j in range ( n ) : if x [ i ] [ j ] != ( a [ i ] + b [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cnt = 0 if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : cnt + = 1 if ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : cnt + = 1 if ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : cnt + = 1 if cnt == 3 : print ( ' Yes ' ) else : print ( ' No ' )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] MAXSIZE = ( 1 << 31 ) - 1 MINSIZE = - ( 1 << 31 ) + 1 yes = " Yes " no = " No " def solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) : result = no a0 = 0 b0 = line00 b1 = line01 - a0 b2 = line02 - a0 a1 = line10 - line00 a2 = line20 - line00 if ( ( a1 + b1 ) == line11 ) and ( ( a1 + b2 ) == line12 ) and ( ( a2 + b1 ) == line21 ) and ( ( a2 + b2 ) == line22 ) : result = yes return result if __name__ == " __main__ " : line00 , line01 , line02 = MI ( ) line10 , line11 , line12 = MI ( ) line20 , line21 , line22 = MI ( ) print ( " {} " . format ( solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) ) )
import sys c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != c [ j + 1 ] [ i + 1 ] - c [ j + 1 ] [ i ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
import sys read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines c = [ list ( map ( int , readline ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if not c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : ans = ' No ' if not c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : ans = ' No ' if not c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : ans = ' No ' if not c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) for _ in range ( 2 ) : x , y , z = map ( int , input ( ) . split ( ) ) if x - b1 == y - b2 == z - b3 : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if C1 [ 1 ] - C1 [ 0 ] == C2 [ 1 ] - C2 [ 0 ] == C3 [ 1 ] - C3 [ 0 ] and C1 [ 2 ] - C1 [ 1 ] == C2 [ 2 ] - C2 [ 1 ] == C3 [ 2 ] - C3 [ 1 ] : if C2 [ 0 ] - C1 [ 0 ] == C2 [ 1 ] - C1 [ 1 ] == C2 [ 2 ] - C1 [ 2 ] and C3 [ 0 ] - C2 [ 0 ] == C3 [ 1 ] - C2 [ 1 ] == C3 [ 2 ] - C2 [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
import numpy as np X = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) T = True if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False X = X . T if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False print ( " Yes " if T else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] base = [ C [ 0 ] [ 0 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 2 ] ] case_AB = [ 1 for a in range ( base [ 0 ] + 1 ) for b in range ( base [ 1 ] + 1 ) for c in range ( base [ 2 ] + 1 ) if [ [ base [ 0 ] , b + ( base [ 0 ] - a ) , c + ( base [ 0 ] - a ) ] , [ a + ( base [ 1 ] - b ) , base [ 1 ] , c + ( base [ 1 ] - b ) ] , [ a + ( base [ 2 ] - c ) , b + ( base [ 2 ] - c ) , base [ 2 ] ] ] == C ] if case_AB : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : o = c [ 0 ] [ 0 ] - i p = c [ 1 ] [ 1 ] - j q = c [ 2 ] [ 2 ] - k if o < 0 or p < 0 or q < 0 : continue ls = [ [ i + o , i + p , i + q ] , [ j + o , j + p , j + q ] , [ k + o , k + p , k + q ] ] if ls == c : check = True break print ( " Yes " if check else " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) arr = [ [ c11 , c12 , c13 ] , [ c21 , c22 , c23 ] , [ c31 , c32 , c33 ] ] row_dis = [ ] col_dis = [ ] for i in range ( 3 ) : row_dis . append ( [ arr [ 0 ] [ i ] - arr [ 1 ] [ i ] , arr [ 0 ] [ i ] - arr [ 2 ] [ i ] , arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ] ) col_dis . append ( [ arr [ i ] [ 0 ] - arr [ i ] [ 1 ] , arr [ i ] [ 0 ] - arr [ i ] [ 2 ] , arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ] ) if row_dis [ 0 ] == row_dis [ 1 ] == row_dis [ 2 ] and col_dis [ 0 ] == col_dis [ 1 ] == col_dis [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) : print ( " No " ) exit ( ) print ( " Yes " )
import itertools grid = [ ] for _ in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) sum = sum ( list ( itertools . chain . from_iterable ( grid ) ) ) if sum % 3 != 0 : print ( ' No ' ) exit ( ) for i in range ( - 100 , 101 ) : a1 = i b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 a2 = grid [ 1 ] [ 0 ] - b1 a3 = grid [ 2 ] [ 0 ] - b1 if a1 + a2 + a3 + b1 + b2 + b3 == sum // 3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] - 2 * c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] - 2 * c [ 2 ] [ 1 ] - 2 * c [ 0 ] [ 2 ] - 2 * c [ 1 ] [ 2 ] + 4 * c [ 2 ] [ 2 ] == 0 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : ans = " No " break else : continue break print ( ans )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e == b + d : if b + f == c + e : if d + h == e + g : if e + i == f + h : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 x [ 0 ] = 0 y [ 0 ] = 0 for i in range ( 3 ) : y [ i ] = C [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = C [ i ] [ 0 ] - y [ 0 ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != x [ i ] + y [ j ] : ans = False print ( ' Yes ' if ans else ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True b1 = grid [ 0 ] [ 0 ] b2 = grid [ 0 ] [ 1 ] b3 = grid [ 0 ] [ 2 ] if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 : a2 = grid [ 1 ] [ 0 ] - b1 else : flg = False if grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : a3 = grid [ 2 ] [ 0 ] - b1 else : flg = False if flg : print ( ' Yes ' ) else : print ( ' No ' )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) TC = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : TC [ i ] [ j ] = C [ j ] [ i ] for b1 in range ( 101 ) : for b2 in range ( 101 ) : for b3 in range ( 101 ) : a1 = ( sum ( C [ 0 ] ) - ( b1 + b2 + b3 ) ) / 3 a2 = ( sum ( C [ 1 ] ) - ( b1 + b2 + b3 ) ) / 3 a3 = ( sum ( C [ 2 ] ) - ( b1 + b2 + b3 ) ) / 3 if a1 + a2 + a3 + 3 * b1 == sum ( TC [ 0 ] ) and a1 + a2 + a3 + 3 * b2 == sum ( TC [ 1 ] ) and a1 + a2 + a3 + 3 * b3 == sum ( TC [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
import itertools import sys import numpy as np import collections c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) ans = [ ] cr1 , cr2 , cr3 = zip ( c1 , c2 , c3 ) for c in [ c1 , c2 , c3 ] : for i , cr in enumerate ( [ cr1 , cr2 , cr3 ] ) : a = sum ( c ) + sum ( cr ) - c [ i ] * 3 ans . append ( a ) print ( ' Yes ' if len ( set ( ans ) ) == 1 else ' No ' )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 0 , 2 ) : for j in range ( 0 , 2 ) : if C [ i ] [ j ] + C [ i + 1 ] [ j + 1 ] != C [ i + 1 ] [ j ] + C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) if C [ 0 ] [ 0 ] + C [ 2 ] [ 2 ] != C [ 0 ] [ 2 ] + C [ 2 ] [ 0 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) for b1 in range ( 101 ) : for b2 in range ( 101 ) : for b3 in range ( 101 ) : if c1 [ 0 ] - b1 == c1 [ 1 ] - b2 == c1 [ 2 ] - b3 : if c2 [ 0 ] - b1 == c2 [ 1 ] - b2 == c2 [ 2 ] - b3 : if c3 [ 0 ] - b1 == c3 [ 1 ] - b2 == c3 [ 2 ] - b3 : print ( " Yes " ) exit ( ) else : print ( " No " )
def taka ( A ) : t = 0 for a1 in range ( 101 ) : b1 = A [ 0 ] [ 0 ] - a1 b2 = A [ 0 ] [ 1 ] - a1 b3 = A [ 0 ] [ 2 ] - a1 a2 = A [ 1 ] [ 0 ] - b1 a3 = A [ 2 ] [ 0 ] - b1 if a2 + b2 != A [ 1 ] [ 1 ] : t = 1 if a2 + b3 != A [ 1 ] [ 2 ] : t = 1 if a3 + b2 != A [ 2 ] [ 1 ] : t = 1 if a3 + b3 != A [ 2 ] [ 2 ] : t = 1 if t == 0 : return " Yes " return " No " if __name__ == " __main__ " : C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) print ( taka ( C ) )
import copy line = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ansB = copy . copy ( line [ 0 ] ) ansA = [ 0 , line [ 1 ] [ 0 ] - ansB [ 0 ] , line [ 2 ] [ 0 ] - ansB [ 0 ] ] for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if ansA [ i ] + ansB [ j ] != line [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
from sys import stdin input = stdin . readline c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( " Yes " ) else : print ( " No " )
import sys sys . setrecursionlimit ( 10 ** 9 ) INF = 10 ** 18 MOD = 10 ** 9 + 7 input = lambda : sys . stdin . readline ( ) . rstrip ( ) YesNo = lambda b : bool ( [ print ( ' Yes ' ) ] if b else print ( ' No ' ) ) YESNO = lambda b : bool ( [ print ( ' YES ' ) ] if b else print ( ' NO ' ) ) int1 = lambda x : int ( x ) - 1 def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ [ 0 ] * 3 for _ in range ( 3 ) ] b = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : a [ i ] [ j ] = c [ i ] [ j ] - min ( c [ i ] ) b [ j ] [ i ] = c [ i ] [ j ] - min ( c [ 0 ] [ j ] , c [ 1 ] [ j ] , c [ 2 ] [ j ] ) YesNo ( a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a0 a1 = c [ 1 ] [ 0 ] - b [ 0 ] a2 = c [ 2 ] [ 0 ] - b [ 0 ] a = [ a0 , a1 , a2 ] is_ok = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : is_ok = False if is_ok : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 b = [ - 1 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = False break if ans == True : print ( ' Yes ' ) else : print ( ' No ' )
li = [ ] li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) li . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' for a0 in range ( li [ 0 ] [ 0 ] + 1 ) : b0 = li [ 0 ] [ 0 ] - a0 b1 = li [ 1 ] [ 0 ] - a0 b2 = li [ 2 ] [ 0 ] - a0 a1 = li [ 0 ] [ 1 ] - b0 a2 = li [ 0 ] [ 2 ] - b0 if li [ 0 ] [ 0 ] != a0 + b0 : ans = ' No ' if li [ 0 ] [ 1 ] != a1 + b0 : ans = ' No ' if li [ 0 ] [ 2 ] != a2 + b0 : ans = ' No ' if li [ 1 ] [ 0 ] != a0 + b1 : ans = ' No ' if li [ 1 ] [ 1 ] != a1 + b1 : ans = ' No ' if li [ 1 ] [ 2 ] != a2 + b1 : ans = ' No ' if li [ 2 ] [ 0 ] != a0 + b2 : ans = ' No ' if li [ 2 ] [ 1 ] != a1 + b2 : ans = ' No ' if li [ 2 ] [ 2 ] != a2 + b2 : ans = ' No ' print ( ans )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i1 in range ( 0 , grid [ 0 ] [ 0 ] + 1 ) : a [ 0 ] = i1 b [ 0 ] = grid [ 0 ] [ 0 ] - i1 for j2 in range ( 0 , grid [ 1 ] [ 1 ] + 1 ) : a [ 1 ] = j2 b [ 1 ] = grid [ 1 ] [ 1 ] - j2 for k3 in range ( 0 , grid [ 2 ] [ 2 ] + 1 ) : a [ 2 ] = k3 b [ 2 ] = grid [ 2 ] [ 2 ] - k3 if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 2 ) : for i in range ( 3 ) : if i == 0 : d = c [ i ] [ j + 1 ] - c [ i ] [ j ] else : if c [ i ] [ j + 1 ] - c [ i ] [ j ] != d : print ( ' No ' ) exit ( ) for i in range ( 2 ) : for j in range ( 3 ) : if j == 0 : d = c [ i + 1 ] [ j ] - c [ i ] [ j ] else : if c [ i + 1 ] [ j ] - c [ i ] [ j ] != d : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] f = True a , b = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ i ] [ 1 ] == a and c [ i ] [ 1 ] - c [ i ] [ 2 ] == b ) : f = False a , b = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if not ( c [ 0 ] [ i ] - c [ 1 ] [ i ] == a and c [ 1 ] [ i ] - c [ 2 ] [ i ] == b ) : f = False print ( " Yes " if f else " No " )
apple = [ ] for _ in range ( 3 ) : apple . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = apple [ 0 ] b = apple [ 1 ] c = apple [ 2 ] if a [ 0 ] - a [ 1 ] == b [ 0 ] - b [ 1 ] == c [ 0 ] - c [ 1 ] and a [ 0 ] - a [ 2 ] == b [ 0 ] - b [ 2 ] == c [ 0 ] - c [ 2 ] and a [ 1 ] - a [ 2 ] == b [ 1 ] - b [ 2 ] == c [ 1 ] - c [ 2 ] : if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and a [ 0 ] - c [ 0 ] == a [ 1 ] - c [ 1 ] == a [ 2 ] - c [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] f = [ [ x [ 0 ] - x [ 1 ] , x [ 1 ] - x [ 2 ] , x [ 2 ] - x [ 0 ] ] for x in c ] g = f [ 0 ] == f [ 1 ] == f [ 2 ] print ( ' Yes ' if g else ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a21 = [ c [ 1 ] [ i ] - c [ 0 ] [ i ] for i in range ( 3 ) ] a32 = [ c [ 2 ] [ i ] - c [ 1 ] [ i ] for i in range ( 3 ) ] b21 = [ c [ i ] [ 1 ] - c [ i ] [ 0 ] for i in range ( 3 ) ] b32 = [ c [ i ] [ 2 ] - c [ i ] [ 1 ] for i in range ( 3 ) ] if max ( a21 ) != min ( a21 ) or max ( a32 ) != min ( a32 ) or max ( b21 ) != min ( b21 ) or max ( b32 ) != min ( b32 ) : print ( " No " ) else : flag = False for a1 in range ( 101 ) : for b1 in range ( 101 ) : a = [ a1 , a1 + a21 [ 0 ] , a1 + a21 [ 0 ] + a32 [ 0 ] ] b = [ b1 , b1 + b21 [ 0 ] , b1 + b21 [ 0 ] + b32 [ 0 ] ] flagij = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flagij = False flag | = flagij if flag : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] C = [ 0 , 0 , 0 ] for j in range ( 3 ) : for i in range ( 3 ) : C [ j ] += A [ i ] [ j ] R = [ 0 , 0 , 0 ] for i in range ( 3 ) : for j in range ( 3 ) : R [ i ] += A [ i ] [ j ] if ( C [ 0 ] - C [ 1 ] ) % 3 == 0 and ( C [ 1 ] - C [ 2 ] ) % 3 == 0 and ( R [ 0 ] - R [ 1 ] ) % 3 == 0 and ( R [ 1 ] - R [ 2 ] ) % 3 == 0 : print ( " Yes " ) else : print ( " No " )
C = [ ] for i in range ( 3 ) : c = input ( ) . split ( ) C . append ( [ int ( i ) for i in c ] ) ans = " No " if C [ 0 ] [ 2 ] + C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] - C [ 2 ] [ 2 ] == 0 : if C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] - C [ 1 ] [ 2 ] == 0 : if C [ 2 ] [ 0 ] + C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] - C [ 2 ] [ 1 ] == 0 : ans = " Yes " print ( ans )
n = [ ] m = [ [ 0 for i in range ( 3 ) ] for j in range ( 2 ) ] for x in range ( 3 ) : n . append ( list ( map ( int , input ( ) . split ( ) ) ) ) k = max ( n ) kaisuu = max ( k ) + 1 def tansa ( m ) : iti = 2 for j in range ( kaisuu ) : for k in range ( kaisuu ) : if j + k == n [ iti ] [ iti ] : m [ 0 ] [ iti ] = j m [ 1 ] [ iti ] = k for a in range ( kaisuu ) : for b in range ( kaisuu ) : if a + b == n [ iti - 1 ] [ iti - 1 ] and a + m [ 1 ] [ iti ] == n [ iti - 1 ] [ iti ] : m [ 0 ] [ iti - 1 ] = a m [ 1 ] [ iti - 1 ] = b for c in range ( kaisuu ) : for d in range ( kaisuu ) : if c + d == n [ iti - 2 ] [ iti - 2 ] and c + m [ 1 ] [ iti - 1 ] == n [ iti - 2 ] [ iti - 1 ] and c + m [ 1 ] [ iti ] == n [ iti - 2 ] [ iti ] : m [ 0 ] [ iti - 2 ] = c m [ 1 ] [ iti - 2 ] = d if m [ 0 ] [ 1 ] + m [ 1 ] [ 0 ] == n [ 1 ] [ 0 ] and m [ 0 ] [ 2 ] + m [ 1 ] [ 0 ] == n [ 2 ] [ 0 ] and m [ 0 ] [ 2 ] + \ m [ 1 ] [ 1 ] == n [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) tansa ( m ) print ( " No " )
import sys import math import os class cin ( ) : def int ( ) : return int ( sys . stdin . readline ( ) . rstrip ( ) ) def string ( ) : return sys . stdin . readline ( ) . rstrip ( ) def mapInt ( ) : return [ int ( x ) for x in cin . string ( ) . split ( ) ] class Util ( ) : def round_up ( a , b ) : return - ( - a // b ) def toUpperMultiple ( a , x ) : return Util . round_up ( a , x ) * x def toLowerMultiple ( a , x ) : return ( a // x ) * x C = [ [ int ( x ) for x in cin . string ( ) . split ( ) ] for y in range ( 3 ) ] for a1 in range ( 0 , 100 + 1 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 m = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] if m == C : print ( " Yes " ) sys . exit ( ) print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) for i in range ( 2 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if ( c1 - c11 ) == ( c2 - c12 ) and ( c2 - c12 ) == ( c3 - c13 ) : c11 , c12 , c13 = c1 , c2 , c3 else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for j in range ( 100 ) : b1 = [ ] a1 = [ ] a = j for i in range ( 3 ) : b1 . append ( c [ 0 ] [ i ] - a ) a1 . append ( c [ i ] [ 0 ] - b1 [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a1 [ i ] + b1 [ j ] != c [ i ] [ j ] : count = 1 if count == 1 : print ( ' No ' ) else : print ( ' Yes ' )
lc = [ [ int ( w ) for w in input ( ) . split ( ) ] for i in range ( 3 ) ] cond = True lb = lc [ 0 ] a2 = lc [ 1 ] [ 0 ] - lb [ 0 ] a3 = lc [ 2 ] [ 0 ] - lb [ 0 ] la = [ 0 , a2 , a3 ] for i in range ( 3 ) : for j in range ( 3 ) : if lc [ i ] [ j ] != la [ i ] + lb [ j ] : cond = False break print ( " Yes " if cond else " No " )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = " No " for a1 in c [ 0 ] : for a2 in c [ 1 ] : for a3 in c [ 2 ] : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 if a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] : ans = " Yes " break print ( ans )
import sys [ a , b , c ] = list ( map ( int , input ( ) . split ( ) ) ) [ d , e , f ] = list ( map ( int , input ( ) . split ( ) ) ) [ g , h , i ] = list ( map ( int , input ( ) . split ( ) ) ) if d - a == e - b and e - b == f - c and g - d == h - e and h - e == i - f : if b - a == e - d and e - d == h - g and c - b == f - e and f - e == i - h : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) and \ ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] YES = " Yes " NO = " No " def solver ( grid ) : result = NO a0 = 0 b0 = grid [ 0 ] [ 0 ] b1 = grid [ 0 ] [ 1 ] b2 = grid [ 0 ] [ 2 ] a1 = grid [ 1 ] [ 0 ] - b0 a2 = grid [ 2 ] [ 0 ] - b0 if a1 + b1 == grid [ 1 ] [ 1 ] and a1 + b2 == grid [ 1 ] [ 2 ] \ and a2 + b1 == grid [ 2 ] [ 1 ] and a2 + b2 == grid [ 2 ] [ 2 ] : result = YES return result if __name__ == " __main__ " : grid_c = [ [ 0 ] * 3 for j in range ( 0 , 3 ) ] for j in range ( 0 , 3 ) : grid_c [ j ] [ 0 ] , grid_c [ j ] [ 1 ] , grid_c [ j ] [ 2 ] = MI ( ) print ( " {} " . format ( solver ( grid_c ) ) )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = ' Yes ' if not sum ( c [ 0 ] ) % 3 == sum ( c [ 1 ] ) % 3 == sum ( c [ 2 ] ) % 3 : ans = ' No ' cc = [ 0 , 0 , 0 ] for ary in c : cc [ 0 ] + = ary [ 0 ] cc [ 1 ] + = ary [ 1 ] cc [ 2 ] + = ary [ 2 ] if not cc [ 0 ] % 3 == cc [ 1 ] % 3 == cc [ 2 ] % 3 : ans = ' No ' print ( ans )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : next_i = ( i + 1 ) % 3 d = [ c [ i ] [ j ] - c [ next_i ] [ j ] for j in range ( 3 ) ] if len ( set ( d ) ) > 1 : print ( ' No ' ) return for j in range ( 3 ) : next_j = ( j + 1 ) % 3 d = [ c [ i ] [ j ] - c [ i ] [ next_j ] for i in range ( 3 ) ] if len ( set ( d ) ) > 1 : print ( ' No ' ) return print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
grid = [ list ( int ( s ) for s in input ( ) . split ( ) ) for _ in range ( 3 ) ] flg = False if ( grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 1 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 1 ] [ 2 ] - grid [ 0 ] [ 2 ] ) \ and ( grid [ 2 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 2 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 2 ] [ 2 ] - grid [ 0 ] [ 2 ] ) : flg = True print ( " Yes " if flg == True else " No " )
def main ( ) : pc1 , pc2 , pc3 = map ( int , input ( ) . split ( ) ) for i in range ( 2 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if ( c1 - pc1 ) == ( c2 - pc2 ) and ( c2 - pc2 ) == ( c3 - pc3 ) : pc1 , pc2 , pc3 = c1 , c2 , c3 else : return ' No ' return ' Yes ' print ( main ( ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if sum ( sum ( row ) for row in C ) == 3 * sum ( C [ i ] [ i ] for i in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] and c3 [ 0 ] - c1 [ 0 ] == c3 [ 1 ] - c1 [ 1 ] and c3 [ 1 ] - c1 [ 1 ] == c3 [ 2 ] - c1 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] a = np . empty ( 3 ) b = np . empty ( 3 ) c_n = np . array ( c ) for a1 in range ( 101 ) : a [ 0 ] = a1 b = c_n [ 0 , : ] - a1 a [ 1 : ] = c_n [ 1 : , 0 ] - b [ 0 ] if a . min ( ) < 0 or b . min ( ) < 0 : continue ab = a . reshape ( 3 , 1 ) + b . reshape ( 1 , 3 ) if np . all ( c_n == ab ) : print ( " Yes " ) break else : print ( " No " )
[ a , b , c ] = [ int ( i ) for i in input ( ) . split ( ) ] [ d , e , f ] = [ int ( j ) for j in input ( ) . split ( ) ] [ g , h , i ] = [ int ( k ) for k in input ( ) . split ( ) ] t = 0 if d - a == e - b and e - b == f - c : t + = 1 if g - d == h - e and h - e == i - f : t + = 1 if b - a == e - d and e - d == h - g : t + = 1 if c - b == f - e and f - e == i - h : t + = 1 if t == 4 : print ( " Yes " ) else : print ( " No " )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : c = grid [ i ] [ 0 ] for j in range ( 3 ) : grid [ i ] [ j ] -= c ans = ' Yes ' if grid [ 0 ] == grid [ 1 ] and grid [ 1 ] == grid [ 2 ] else ' No ' print ( ans )
from itertools import permutations C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 , 1 , 2 ] ans = [ ] for x in permutations ( A , 3 ) : temp = 0 for j in range ( 3 ) : temp += C [ j ] [ x [ j ] ] ans . append ( temp ) if len ( set ( ans ) ) == 1 : print ( " Yes " ) else : print ( " No " )
import itertools c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = True for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ 0 ] [ a ] - c [ 0 ] [ b ] for j in range ( 1 , 3 ) : if x != c [ j ] [ a ] - c [ j ] [ b ] : ans = False for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ a ] [ 0 ] - c [ b ] [ 0 ] for j in range ( 1 , 3 ) : if x != c [ a ] [ j ] - c [ b ] [ j ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' )
import sys import itertools import time import math import heapq from collections import defaultdict sys . setrecursionlimit ( 10 ** 7 ) INF = 10 ** 18 MOD = 10 ** 9 + 7 read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 1 , 3 ) : x = C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != x : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : x = C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] for i in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i ] [ j - 1 ] != x : print ( " No " ) exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import numpy as np c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) arr_c = np . array ( c ) a_max = np . amax ( arr_c , axis = 1 ) b_max = np . amax ( arr_c , axis = 0 ) a = [ ] b = [ ] for i in range ( 3 ) : if len ( list ( range ( 0 , a_max [ i ] + 1 , 1 ) ) ) == 0 : a . append ( [ 0 ] ) else : a . append ( list ( range ( 0 , a_max [ i ] + 1 , 1 ) ) ) if len ( list ( range ( 0 , b_max [ i ] + 1 , 1 ) ) ) == 0 : b . append ( [ 0 ] ) else : b . append ( list ( range ( 0 , b_max [ i ] + 1 , 1 ) ) ) ans = ' No ' cnt = 0 for a0 in a [ 0 ] : for b0 in b [ 0 ] : if c [ 0 ] [ 0 ] != a0 + b0 : continue for a1 in a [ 1 ] : if c [ 1 ] [ 0 ] != a1 + b0 : continue for b1 in b [ 1 ] : if c [ 0 ] [ 1 ] != a0 + b1 or c [ 1 ] [ 1 ] != a1 + b1 : continue for a2 in a [ 2 ] : if c [ 2 ] [ 0 ] != a2 + b0 or c [ 2 ] [ 1 ] != a2 + b1 : continue for b2 in b [ 2 ] : if c [ 0 ] [ 2 ] != a0 + b2 or c [ 1 ] [ 2 ] != a1 + b2 or c [ 2 ] [ 2 ] != a2 + b2 : continue print ( " Yes " ) exit ( 0 ) print ( ans )
import sys import itertools sys . setrecursionlimit ( 1000000000 ) from heapq import heapify , heappop , heappush , heappushpop import math import collections import copy import bisect if __name__ == " __main__ " : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 b1 = c1 [ 0 ] b2 = c1 [ 1 ] b3 = c1 [ 2 ] b = [ b1 , b2 , b3 ] a2 = c2 [ 0 ] - b1 for i in range ( 3 ) : d = c2 [ i ] - b [ i ] if a2 != d : print ( " No " ) sys . exit ( ) a3 = c3 [ 0 ] - b1 for i in range ( 3 ) : d = c3 [ i ] - b [ i ] if a3 != d : print ( " No " ) sys . exit ( ) print ( " Yes " )
G1 = list ( map ( int , input ( ) . split ( ) ) ) G2 = list ( map ( int , input ( ) . split ( ) ) ) G3 = list ( map ( int , input ( ) . split ( ) ) ) sub_G1 = [ ] sub_G2 = [ ] sub_G3 = [ ] sub_R12 = [ ] sub_R23 = [ ] for i in range ( 2 ) : sub_G1 . append ( G1 [ i + 1 ] - G1 [ i ] ) sub_G2 . append ( G2 [ i + 1 ] - G2 [ i ] ) sub_G3 . append ( G3 [ i + 1 ] - G3 [ i ] ) for k in range ( 3 ) : sub_R12 . append ( G2 [ i ] - G1 [ i ] ) sub_R23 . append ( G3 [ i ] - G2 [ i ] ) condition1 = bool ( sub_G1 [ 0 ] == sub_G2 [ 0 ] == sub_G3 [ 0 ] ) condition2 = bool ( sub_G1 [ 1 ] == sub_G2 [ 1 ] == sub_G3 [ 1 ] ) condition3 = bool ( len ( set ( sub_R12 ) ) == 1 ) condition4 = bool ( len ( set ( sub_R23 ) ) == 1 ) if condition1 and condition2 and condition3 and condition4 : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( 0 , min ( [ c11 , c12 , c13 ] ) + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans ) if __name__ == ' __main__ ' : main ( )
mat = [ ] for i in range ( 3 ) : array = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( array ) diff_tate = [ ] for i in range ( 2 ) : diff_tate . append ( [ mat [ i ] [ 0 ] - mat [ 2 ] [ 0 ] , mat [ i ] [ 1 ] - mat [ 2 ] [ 1 ] , mat [ i ] [ 2 ] - mat [ 2 ] [ 2 ] ] ) diff_yoko = [ ] for i in range ( 2 ) : diff_yoko . append ( [ mat [ 0 ] [ i ] - mat [ 0 ] [ 2 ] , mat [ 1 ] [ i ] - mat [ 1 ] [ 2 ] , mat [ 2 ] [ i ] - mat [ 2 ] [ 2 ] ] ) for diff in diff_tate + diff_yoko : dset = set ( diff ) if len ( dset ) > 1 : print ( " No " ) break else : print ( " Yes " )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] res = ' No ' for i in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : res = ' Yes ' break print ( res ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ans = ' Yes ' for i in range ( 1 , 3 ) : if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x or c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : ans = " No " break print ( ans )
import sys input = sys . stdin . readline N = 3 x = [ 0 for i in range ( N ) ] y = [ 0 for i in range ( N ) ] c = [ [ 0 for i in range ( N ) ] for i in range ( N ) ] for i in range ( N ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c [ i ] [ 0 ] = c1 c [ i ] [ 1 ] = c2 c [ i ] [ 2 ] = c3 x [ 0 ] = 0 for i in range ( N ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] x [ 1 ] = c [ 1 ] [ 0 ] - y [ 0 ] x [ 2 ] = c [ 2 ] [ 0 ] - y [ 0 ] flag = True for i in range ( N ) : for j in range ( N ) : numx = x [ i ] numy = y [ j ] if not numx + numy == c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
cs = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ i - j for i , j in zip ( cs [ 0 ] , cs [ 1 ] ) ] b = [ i - j for i , j in zip ( cs [ 1 ] , cs [ 2 ] ) ] print ( ' Yes ' if a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] else ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - d == b - e == c - f and a - g == b - h == c - i and a - b == d - e == g - h and a - c == d - f == g - i : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 1 ] [ 0 ] == a2 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 0 ] == a3 + b1 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def solve ( ) : import sys s = list ( map ( int , sys . stdin . read ( ) . split ( ) ) ) x , y , z = s [ 0 ] + s [ 4 ] + s [ 8 ] , s [ 1 ] + s [ 5 ] + s [ 6 ] , s [ 2 ] + s [ 3 ] + s [ 7 ] if x == y == z : print ( " Yes " ) else : print ( " No " ) solve ( )
c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = c_1 + c_2 + c_3 if sum ( c ) == 3 * ( c_1 [ 0 ] + c_2 [ 1 ] + c_3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
c_l = [ ] for _ in range ( 3 ) : c_l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) b2mb1 = c_l [ 0 ] [ 1 ] - c_l [ 0 ] [ 0 ] b3mb1 = c_l [ 0 ] [ 2 ] - c_l [ 0 ] [ 0 ] for i in ( 1 , 2 ) : if c_l [ i ] [ 1 ] != c_l [ i ] [ 0 ] + b2mb1 : print ( ' No ' ) exit ( ) if c_l [ i ] [ 2 ] != c_l [ i ] [ 0 ] + b3mb1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = c [ 0 ] . copy ( ) b = [ 0 ] * 3 for i in range ( 1 , 3 ) : b [ i ] = c [ i ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : ans = " No " print ( ans )
def solve ( ) : if not ( c11 - c21 == c12 - c22 == c13 - c23 ) : return False if not ( c11 - c31 == c12 - c32 == c13 - c33 ) : return False if not ( c11 - c12 == c21 - c22 == c31 - c32 ) : return False if not ( c11 - c13 == c21 - c23 == c31 - c33 ) : return False return True c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) print ( ' Yes ' if solve ( ) else ' No ' )
def ii ( ) : return int ( input ( ) ) def iim ( ) : return map ( int , input ( ) . split ( ) ) def iil ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def ism ( ) : return map ( str , input ( ) . split ( ) ) def isl ( ) : return list ( map ( str , input ( ) . split ( ) ) ) l = [ ] for i in range ( 3 ) : l . append ( iil ( ) ) f = True for i in range ( 1 , 3 ) : dif0 = l [ i ] [ 0 ] - l [ i - 1 ] [ 0 ] dif1 = l [ i ] [ 1 ] - l [ i - 1 ] [ 1 ] dif2 = l [ i ] [ 2 ] - l [ i - 1 ] [ 2 ] if dif0 == dif1 == dif2 : continue f = False for i in range ( 1 , 3 ) : dif0 = l [ 0 ] [ i ] - l [ 0 ] [ i - 1 ] dif1 = l [ 1 ] [ i ] - l [ 1 ] [ i - 1 ] dif2 = l [ 2 ] [ i ] - l [ 2 ] [ i - 1 ] if dif0 == dif1 == dif2 : continue f = False print ( ' Yes ' if f else ' No ' )
tab = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = tab [ 0 ] [ 0 ] - a [ 0 ] a [ 1 ] = tab [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = tab [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = tab [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = tab [ 0 ] [ 2 ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if tab [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : continue break else : print ( ' Yes ' )
import sys input = sys . stdin . buffer . readline A = [ 0 , None , None ] B = [ None , None , None ] bl = True for i in range ( 3 ) : C = [ int ( x ) for x in input ( ) . split ( ) ] for j , c in enumerate ( C ) : if A [ i ] is None : A [ i ] = c - B [ j ] if B [ j ] is None : B [ j ] = c - A [ i ] if A [ i ] + B [ j ] != c : bl = False answer = ' Yes ' if bl else ' No ' print ( answer )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) a = 1 b = 0 if A [ 0 ] - B [ 0 ] == A [ 1 ] - B [ 1 ] == A [ 2 ] - B [ 2 ] : b = 1 else : a = 0 if B [ 0 ] - C [ 0 ] == B [ 1 ] - C [ 1 ] == B [ 2 ] - C [ 2 ] : b = 1 else : a = 0 if A [ 0 ] - A [ 1 ] == B [ 0 ] - B [ 1 ] == C [ 0 ] - C [ 1 ] : b = 1 else : a = 0 if A [ 1 ] - A [ 2 ] == B [ 1 ] - B [ 2 ] == C [ 1 ] - C [ 2 ] : b = 1 else : a = 0 if a == 1 : print ( " Yes " ) else : print ( " No " )
* C , = map ( int , open ( 0 ) . read ( ) . split ( ) ) a1 = 0 a2 = C [ 3 ] - C [ 0 ] a3 = C [ 6 ] - C [ 0 ] b1 = C [ 0 ] b2 = C [ 1 ] b3 = C [ 2 ] A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i * 3 + j ] != A [ i ] + B [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e + i == b + f + g == c + d + h : print ( " Yes " ) else : print ( " No " )
c = [ ] flag = True for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c . append ( ( c1 , c2 , c3 ) ) diff1 = abs ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) diff2 = abs ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) for i in range ( 1 , 3 ) : d1 = abs ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) d2 = abs ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) if d1 != diff1 or d2 != diff2 : flag = False break if flag : print ( " Yes " ) else : print ( " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] R1 = [ A [ i ] [ 1 ] - A [ i ] [ 0 ] for i in range ( 3 ) ] R2 = [ A [ i ] [ 2 ] - A [ i ] [ 1 ] for i in range ( 3 ) ] C1 = [ A [ 1 ] [ i ] - A [ 0 ] [ i ] for i in range ( 3 ) ] C2 = [ A [ 2 ] [ i ] - A [ 1 ] [ i ] for i in range ( 3 ) ] ok = True for x in [ R1 , R2 , C1 , C2 ] : if len ( set ( x ) ) != 1 : ok = False break if not ok : print ( ' No ' ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] b = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] f = True for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ i ] [ j + 1 ] - c [ i ] [ j ] ) if a != t : f = False for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ j + 1 ] [ i ] - c [ j ] [ i ] ) if b != t : f = False if f : print ( " Yes " ) else : print ( " No " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if [ [ i + b1 , i + b2 , i + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] == C : print ( " Yes " ) exit ( ) print ( " No " )
import sys import numpy as np def main ( ) : grid = np . array ( sys . stdin . read ( ) . split ( ) , dtype = np . int64 ) . reshape ( 3 , 3 ) grid = grid - grid [ 0 ] grid = grid . T grid = grid - grid [ 0 ] if np . all ( grid == 0 ) : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] + C [ 0 ] [ 0 ] != C [ i ] [ 0 ] + C [ 0 ] [ j ] : ans = ' No ' print ( ans )
import sys cl = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) cl . append ( c ) if cl [ 0 ] [ 0 ] + cl [ 1 ] [ 1 ] != cl [ 1 ] [ 0 ] + cl [ 0 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 1 ] [ 1 ] + cl [ 2 ] [ 2 ] != cl [ 1 ] [ 2 ] + cl [ 2 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 0 ] [ 0 ] + cl [ 2 ] [ 2 ] != cl [ 0 ] [ 2 ] + cl [ 2 ] [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c_i = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_i ) h01 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] h12 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] v01 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] v12 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] buf = 1 for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != h01 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != h12 or c [ 1 ] [ i ] - c [ 0 ] [ i ] != v01 or c [ 2 ] [ i ] - c [ 1 ] [ i ] != v12 : buf = 0 break if buf == 1 : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e == g - h and b - c == e - f == h - i : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] y = C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] if x and y : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ma1 = max ( c11 , c12 , c13 ) + 1 ma2 = max ( c21 , c22 , c23 ) + 1 ma3 = max ( c31 , c32 , c33 ) + 1 mb1 = max ( c11 , c21 , c31 ) + 1 mb2 = max ( c12 , c22 , c32 ) + 1 mb3 = max ( c13 , c23 , c33 ) + 1 for a1 in range ( ma1 ) : for b1 in range ( mb1 ) : if a1 + b1 != c11 : continue for a2 in range ( ma2 ) : if a2 + b1 != c21 : continue for b2 in range ( mb2 ) : if a1 + b2 != c12 or a2 + b2 != c22 : continue for a3 in range ( ma3 ) : if a3 + b1 != c31 or a3 + b2 != c32 : continue for b3 in range ( mb3 ) : if a1 + b3 != c13 or a2 + b3 != c23 or a3 + b3 != c33 : continue print ( ' Yes ' ) exit ( ) print ( ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) print ( ' Yes ' ) if a - d == b - e == c - f and d - g == e - h == f - i else print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for b1 in range ( 101 ) : a1 = C [ 0 ] [ 0 ] - b1 a2 = C [ 0 ] [ 1 ] - b1 a3 = C [ 0 ] [ 2 ] - b1 for b2 in range ( 101 ) : aa1 = C [ 1 ] [ 0 ] - b2 aa2 = C [ 1 ] [ 1 ] - b2 aa3 = C [ 1 ] [ 2 ] - b2 for b3 in range ( 101 ) : aaa1 = C [ 2 ] [ 0 ] - b3 aaa2 = C [ 2 ] [ 1 ] - b3 aaa3 = C [ 2 ] [ 2 ] - b3 if ( a1 , a2 , a3 ) == ( aa1 , aa2 , aa3 ) == ( aaa1 , aaa2 , aaa3 ) : print ( " Yes " ) exit ( ) print ( " No " )
import sys import numpy as np N1 = list ( map ( int , input ( ) . split ( ) ) ) N2 = list ( map ( int , input ( ) . split ( ) ) ) N3 = list ( map ( int , input ( ) . split ( ) ) ) temp = [ ] for i in range ( 3 ) : a = N1 [ i ] + N2 [ i ] - 2 * N3 [ i ] temp . append ( a ) temp2 = [ ] temp2 . append ( N1 [ 0 ] + N1 [ 1 ] - 2 * N1 [ 2 ] ) temp2 . append ( N2 [ 0 ] + N2 [ 1 ] - 2 * N2 [ 2 ] ) temp2 . append ( N3 [ 0 ] + N3 [ 1 ] - 2 * N3 [ 2 ] ) if len ( list ( set ( temp ) ) ) == 1 & len ( list ( set ( temp2 ) ) ) == 1 : print ( " Yes " ) else : print ( " No " )
c_array = [ ] for i in range ( 3 ) : c_list = [ int ( e ) for e in input ( ) . split ( ) ] c_array . append ( c_list ) c11 = c_array [ 0 ] [ 0 ] c12 = c_array [ 0 ] [ 1 ] c13 = c_array [ 0 ] [ 2 ] c21 = c_array [ 1 ] [ 0 ] c22 = c_array [ 1 ] [ 1 ] c23 = c_array [ 1 ] [ 2 ] c31 = c_array [ 2 ] [ 0 ] c32 = c_array [ 2 ] [ 1 ] c33 = c_array [ 2 ] [ 2 ] if ( c11 - c12 == c21 - c22 and c21 - c22 == c31 - c32 and c11 - c12 == c31 - c32 and c12 - c13 == c22 - c23 and c22 - c23 == c32 - c33 and c12 - c13 == c32 - c33 and c11 - c13 == c21 - c23 and c21 - c23 == c31 - c33 and c11 - c13 == c31 - c33 ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ None , None , None ] b = [ None , None , None ] a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys def input ( ) : return sys . stdin . readline ( ) . strip ( ) def resolve ( ) : c0 = list ( map ( int , input ( ) . split ( ) ) ) c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c0 [ 0 ] b [ 1 ] = c1 [ 0 ] b [ 2 ] = c2 [ 0 ] a [ 1 ] = c0 [ 1 ] - b [ 0 ] a [ 2 ] = c0 [ 2 ] - b [ 0 ] if a [ 1 ] + b [ 1 ] == c1 [ 1 ] and a [ 1 ] + b [ 2 ] == c2 [ 1 ] and \ a [ 2 ] + b [ 1 ] == c1 [ 2 ] and a [ 2 ] + b [ 2 ] == c2 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) resolve ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if C [ i ] [ 0 ] - C [ j ] [ 0 ] == C [ i ] [ 1 ] - C [ j ] [ 1 ] and C [ i ] [ 1 ] - C [ j ] [ 1 ] == C [ i ] [ 2 ] - C [ j ] [ 2 ] and C [ i ] [ 2 ] - C [ j ] [ 2 ] == C [ i ] [ 0 ] - C [ j ] [ 0 ] : continue else : print ( ' No ' ) exit ( ) for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if C [ 0 ] [ i ] - C [ 0 ] [ j ] == C [ 1 ] [ i ] - C [ 1 ] [ j ] and C [ 1 ] [ i ] - C [ 1 ] [ j ] == C [ 2 ] [ i ] - C [ 2 ] [ j ] and C [ 2 ] [ i ] - C [ 2 ] [ j ] == C [ 0 ] [ i ] - C [ 0 ] [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys input_methods = [ ' clipboard ' , ' file ' , ' key ' ] using_method = 0 input_method = input_methods [ using_method ] tin = lambda : map ( int , input ( ) . split ( ) ) lin = lambda : list ( tin ( ) ) mod = 1000000007 def main ( ) : vl = [ lin ( ) for _ in range ( 3 ) ] for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ f ] [ i ] - vl [ t ] [ i ] ) if len ( is_same ) != 1 : return ' No ' for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ i ] [ f ] - vl [ i ] [ t ] ) if len ( is_same ) != 1 : return ' No ' return ' Yes ' isTest = False def pa ( v ) : if isTest : print ( v ) def input_clipboard ( ) : import clipboard input_text = clipboard . get ( ) input_l = input_text . splitlines ( ) for l in input_l : yield l if __name__ == " __main__ " : if sys . platform == ' ios ' : if input_method == input_methods [ 0 ] : ic = input_clipboard ( ) input = lambda : ic . __next__ ( ) elif input_method == input_methods [ 1 ] : sys . stdin = open ( ' inputFile.txt ' ) else : pass isTest = True else : pass ret = main ( ) if ret is not None : print ( ret )
import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - ( i + j ) ; if ( 0 <= tmp && tmp <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! ( ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) && ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) ) ) { ans = " No " ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = Integer . parseInt ( stdIn . next ( ) ) ; int [ ] p = new int [ n ] ; p [ 0 ] = Integer . parseInt ( stdIn . next ( ) ) ; int min = p [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( stdIn . next ( ) ) ; if ( min > p [ i ] ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int Z = S - i - j ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j <= k && s - j - i >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x , y , z , cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { x = i ; for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { y = j ; for ( int l = Math . max ( 0 , s - i - j ) ; l <= Math . min ( k , s - i - j ) ; l ++ ) { z = l ; if ( x + y + z == s ) { cnt ++ ; } } } } System . out . println ( cnt ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int cnt = 1 ; ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = sc . nextInt ( ) ; int tmp = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( tmp > p [ i ] ) cnt ++ ; if ( p [ i ] < tmp ) tmp = p [ i ] ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int K = stdIn . nextInt ( ) ; int S = stdIn . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y <= K && S - X - Y >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] numbers = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { numbers [ i ] = in . nextInt ( ) ; } int tempMin = numbers [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( numbers [ i ] < tempMin ) { count ++ ; tempMin = numbers [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int check = 0 ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = a [ 3 ] - a [ 0 ] ; int x2 = a [ 6 ] - a [ 3 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = 1 ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = 1 ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = 1 ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = 1 ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long n = 0 ; for ( int i = 0 ; i <= x ; i ++ ) { n ++ ; n *= 2 ; } System . out . println ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { for ( int y = 0 ; y <= K && y <= S ; y ++ ) { if ( ( x + y ) <= S && S - ( x + y ) <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . math . BigInteger ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; long ans = a [ 0 ] - 1 ; int p = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != p ) { ans += ( a [ i ] - 1 ) / p ; } else { p ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; int [ ] PList = new int [ N ] ; PList [ 0 ] = sc . nextInt ( ) ; int minNumber = PList [ 0 ] ; int cnt = 1 ; for ( int i = 1 ; i < N ; i ++ ) { PList [ i ] = sc . nextInt ( ) ; if ( minNumber >= PList [ i ] ) { minNumber = PList [ i ] ; cnt ++ ; } else { } } System . out . println ( cnt ) ; } }
import static java . lang . System . in ; import static java . lang . System . out ; import java . io . * ; import java . util . * ; public class Main { static final double EPS = 1e-10 ; static final double INF = 1L << 31 ; static final double PI = Math . PI ; public static Scanner sc = new Scanner ( in ) ; StringBuilder sb = new StringBuilder ( ) ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public void run ( ) throws IOException { String input ; String [ ] inputArray ; input = br . readLine ( ) ; inputArray = input . split ( " " ) ; int n = Integer . valueOf ( inputArray [ 0 ] ) ; int [ ] a = new int [ n ] ; long ans = 0L ; a [ 0 ] = Integer . valueOf ( br . readLine ( ) ) ; ans += ( a [ 0 ] - 1 ) ; int m = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = Integer . valueOf ( br . readLine ( ) ) ; if ( a [ i ] == m + 1 ) m ++ ; else if ( a [ i ] > m + 1 ) { ans += ( a [ i ] - 1 ) / ( m + 1 ) ; } } sb . append ( ans ) ; ln ( sb ) ; } public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; } public static void ln ( Object obj ) { out . println ( obj ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] list = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int a = Integer . parseInt ( sc . next ( ) ) ; list [ i ] [ j ] = a ; } } if ( list [ 0 ] [ 0 ] - list [ 1 ] [ 0 ] == list [ 0 ] [ 1 ] - list [ 1 ] [ 1 ] && list [ 0 ] [ 1 ] - list [ 1 ] [ 1 ] == list [ 0 ] [ 2 ] - list [ 1 ] [ 2 ] && list [ 1 ] [ 0 ] - list [ 2 ] [ 0 ] == list [ 1 ] [ 1 ] - list [ 2 ] [ 1 ] && list [ 1 ] [ 1 ] - list [ 2 ] [ 1 ] == list [ 1 ] [ 2 ] - list [ 2 ] [ 2 ] && list [ 0 ] [ 0 ] - list [ 0 ] [ 1 ] == list [ 1 ] [ 0 ] - list [ 1 ] [ 1 ] && list [ 0 ] [ 0 ] - list [ 0 ] [ 1 ] == list [ 2 ] [ 0 ] - list [ 2 ] [ 1 ] && list [ 0 ] [ 1 ] - list [ 0 ] [ 2 ] == list [ 1 ] [ 1 ] - list [ 1 ] [ 2 ] && list [ 0 ] [ 1 ] - list [ 0 ] [ 2 ] == list [ 2 ] [ 1 ] - list [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( ; n > 0 ; n -- ) { int x = sc . nextInt ( ) ; if ( x < min ) { ans ++ ; min = x ; } } System . out . println ( ans ) ; } static class FastScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public FastScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; tokenizer = null ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public String nextLine ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( " \n " ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . io . * ; import java . util . * ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Iterator < String > sc ) { int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int sum = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { int remaining = S - x ; sum += Math . max ( Math . min ( remaining , K ) - Math . max ( remaining - K , 0 ) + 1 , 0 ) ; } System . out . println ( sum ) ; } } class Main { public static void main ( String ... args ) { try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { Iterator < String > tokens = reader . lines ( ) . map ( s -> s . split ( " " ) ) . flatMap ( Arrays :: stream ) . iterator ( ) ; Solver . INSTANCE . solve ( tokens ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Map ; import java . util . HashMap ; import java . util . List ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) throws Exception { int a1 , a2 , a3 , b1 , b2 , b3 ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; String ans = " No " ; for ( int i = 0 ; i < 3 ; i ++ ) { String [ ] line = br . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = Integer . parseInt ( line [ j ] ) ; } } for ( a1 = 0 ; a1 <= grid [ 0 ] [ 0 ] ; a1 ++ ) { b1 = grid [ 0 ] [ 0 ] - a1 ; b2 = grid [ 0 ] [ 1 ] - a1 ; b3 = grid [ 0 ] [ 2 ] - a1 ; a2 = grid [ 1 ] [ 0 ] - b1 ; a3 = grid [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == grid [ 1 ] [ 1 ] && a2 + b3 == grid [ 1 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 1 ] && a3 + b3 == grid [ 2 ] [ 2 ] ) ans = " Yes " ; } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } if ( s < i + j ) break ; } if ( s < i ) break ; } out . write ( String . valueOf ( count ) ) ; out . write ( " \n " ) ; out . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = 3 ; int [ ] [ ] t = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { t [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { int dif0 = t [ i ] [ 0 ] - t [ i + 1 ] [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) { int difj = t [ i ] [ j ] - t [ i + 1 ] [ j ] ; if ( dif0 != difj ) { System . out . println ( " No " ) ; return ; } } } for ( int j = 0 ; j < n - 1 ; j ++ ) { int dif0 = t [ 0 ] [ j ] - t [ 0 ] [ j + 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { int difi = t [ i ] [ j ] - t [ i ] [ j + 1 ] ; if ( dif0 != difi ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , ans = 1 ; int a [ ] ; a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int mmin = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < mmin ) ans ++ ; mmin = Math . min ( mmin , a [ i ] ) ; } System . out . printf ( " %d \n " , ans ) ; in . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { int diff = s - i ; for ( int j = 0 ; j <= k ; j ++ ) { int diff2 = diff - j ; if ( diff2 >= 0 && diff2 <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int limit = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= limit ; i ++ ) { for ( j = 0 ; j <= limit ; j ++ ) { if ( sum - i - j <= limit && sum - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int inputs = sc . nextInt ( ) ; int num ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < inputs ; i ++ ) { num = sc . nextInt ( ) ; if ( min > num ) { min = num ; } if ( min == num ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ; scan . close ( ) ; String [ ] ks = str . split ( " " ) ; int n = 0 ; int k = Integer . parseInt ( ks [ 0 ] ) ; int s = Integer . parseInt ( ks [ 1 ] ) ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { n ++ ; } } } System . out . println ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { try ( Scanner in = new Scanner ( System . in ) ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( ! ( Z >= 0 && Z <= K ) ) { continue ; } count ++ ; } } System . out . println ( count ) ; } } }
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; String result = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int b1 = c [ 0 ] [ 0 ] ; int b2 = c [ 1 ] [ 0 ] ; int b3 = c [ 2 ] [ 0 ] ; if ( ( c [ 0 ] [ 1 ] - b1 != c [ 1 ] [ 1 ] - b2 ) || ( c [ 1 ] [ 1 ] - b2 != c [ 2 ] [ 1 ] - b3 ) ) { result = " No " ; } if ( ( c [ 0 ] [ 2 ] - b1 != c [ 1 ] [ 2 ] - b2 ) || ( c [ 1 ] [ 2 ] - b2 != c [ 2 ] [ 2 ] - b3 ) ) { result = " No " ; } System . out . println ( result ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) <= K && 0 <= ( S - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; long answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { int limit_y = Math . min ( K , S - x ) ; for ( int y = 0 ; y <= limit_y ; y ++ ) { if ( S - x - y <= K ) { answer += 1 ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = N ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static char [ ] [ ] c ; public static void main ( String [ ] args ) throws InterruptedException { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i ] [ 1 ] != c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] || c [ i ] [ 1 ] - c [ i ] [ 2 ] != c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 3 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 1 ] [ i ] != c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] || c [ 1 ] [ i ] - c [ 2 ] [ i ] != c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int grid [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 2 ; i ++ ) { int a = ( grid [ i ] [ 0 ] - grid [ i + 1 ] [ 0 ] ) ; int b = ( grid [ i ] [ 1 ] - grid [ i + 1 ] [ 1 ] ) ; int c = ( grid [ i ] [ 2 ] - grid [ i + 1 ] [ 2 ] ) ; if ( a != b || b != c ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 2 ; i ++ ) { int a = ( grid [ 0 ] [ i ] - grid [ 0 ] [ i + 1 ] ) ; int b = ( grid [ 1 ] [ i ] - grid [ 1 ] [ i + 1 ] ) ; int c = ( grid [ 2 ] [ i ] - grid [ 2 ] [ i + 1 ] ) ; if ( a != b || b != c ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] P = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < P . length ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int ans = 0 ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean f = false ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int tmp = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { tmp = a [ i ] ; continue ; } if ( tmp >= a [ i ] ) { tmp = a [ i ] ; ans ++ ; } } ans ++ ; System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; Integer output = 0 ; Integer kInteger = new Integer ( scanner . next ( ) ) ; Integer sInteger = new Integer ( scanner . next ( ) ) ; for ( int x = 0 ; x <= kInteger ; x ++ ) { for ( int y = 0 ; y <= kInteger ; y ++ ) { if ( kInteger >= ( sInteger - x - y ) && 0 <= ( sInteger - x - y ) ) output ++ ; } } System . out . println ( output ) ; scanner . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( ( 0 <= z ) && ( z <= k ) ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = Long . parseLong ( sc . nextLine ( ) ) ; String [ ] arrays = sc . nextLine ( ) . split ( " " ) ; sc . close ( ) ; int count = 0 ; long tmpMax = Long . parseLong ( arrays [ 0 ] ) ; for ( int i = 0 ; i < N ; i ++ ) { long Pi = Long . parseLong ( arrays [ i ] ) ; if ( tmpMax >= Pi ) { count ++ ; tmpMax = Pi ; } else { continue ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int a = sc . nextInt ( ) ; if ( H >= a ) { ans ++ ; } H = Math . min ( a , H ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 0 ; int b = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= b ) { a ++ ; b = P [ i ] ; } } System . out . println ( a ) ; } }
import java . io . * ; import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) P [ n ] = sc . nextInt ( ) ; int ans = 0 ; int min = 1000000 ; for ( int n = 0 ; n < N ; n ++ ) { if ( P [ n ] < min ) ans ++ ; min = Math . min ( min , P [ n ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 1 ; int max = sc . nextInt ( ) ; int min = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int p = sc . nextInt ( ) ; if ( i == 0 ) { min = p ; if ( max < min ) { int tmp = min ; min = max ; max = tmp ; } } if ( max >= p && min >= p ) { ans ++ ; } if ( p > max ) max = p ; if ( p < min ) min = p ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long count = 0 ; int price = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( x == price ) { price ++ ; continue ; } int d = ( x - 1 ) / price ; count += d ; if ( price == 1 ) { price ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int sum = i + j ; if ( sum <= s && s - sum <= k ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) flag = true ; if ( flag ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = C [ 0 ] [ 0 ] ; b [ 1 ] = C [ 0 ] [ 1 ] ; b [ 2 ] = C [ 0 ] [ 2 ] ; a [ 1 ] = C [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = C [ 2 ] [ 0 ] - b [ 0 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != C [ i ] [ j ] ) { ans = " No " ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) { count += 1 ; } } } System . out . print ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = P [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( min > P [ j ] ) { count ++ ; min = P [ j ] ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = k ; x >= 0 ; x -- ) { for ( int y = Math . min ( s - x , k ) ; y >= 0 ; y -- ) { int z = s - x - y ; if ( z <= k ) { ans ++ ; } else { break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; scanner . close ( ) ; int combination = 0 ; int k ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { k = S - i - j ; if ( i + j + k == S && i >= 0 && j >= 0 && k >= 0 && k <= K ) { combination ++ ; } } } System . out . println ( combination ) ; } }
import java . io . * ; import java . util . * ; class Main { Scanner sc ; int N ; int [ ] P ; private void calc ( ) { sc = new Scanner ( new BufferedInputStream ( System . in ) ) ; int N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = Integer . parseInt ( sc . next ( ) ) ; int c = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) c ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( c ) ; } public static void main ( String [ ] args ) { new Main ( ) . calc ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { int tmp = 0 ; int tmp2 = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { tmp += c [ j ] [ ( i + j ) % 3 ] ; tmp2 += c [ j ] [ ( i - j + 3 ) % 3 ] ; } if ( tmp != sum ) { pr . println ( " No " ) ; return ; } if ( tmp2 != sum ) { pr . println ( " No " ) ; return ; } } pr . println ( " Yes " ) ; } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = s . nextInt ( ) ; } } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b ) { b = c [ i ] [ j ] - c [ i ] [ j + 1 ] == c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] ; } } } String str = b ? " Yes " : " No " ; System . out . println ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int check = 0 ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = 0 ; int x2 = 0 ; int y1 = 0 ; int y2 = 0 ; x1 = a [ 3 ] - a [ 0 ] ; x2 = a [ 6 ] - a [ 3 ] ; y1 = a [ 1 ] - a [ 0 ] ; y2 = a [ 2 ] - a [ 1 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = 1 ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = 1 ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = 1 ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = 1 ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ j ] [ i ] -= c [ 0 ] [ i ] ; } for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] [ j ] -= c [ i ] [ 0 ] ; } if ( c [ 1 ] [ 1 ] == 0 && c [ 1 ] [ 2 ] == 0 && c [ 2 ] [ 1 ] == 0 && c [ 2 ] [ 2 ] == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int min = Integer . MAX_VALUE ; int i ; int temp ; long ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { temp = scan . nextInt ( ) ; if ( temp < min ) { min = temp ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j >= 0 ) && ( S - i - j <= K ) ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { SumOfThreeIntegers solver = new SumOfThreeIntegers ( ) ; solver . readInput ( ) ; solver . solve ( ) ; solver . writeOutput ( ) ; } static class SumOfThreeIntegers { private int k ; private int s ; private Scanner scanner ; private int output ; public SumOfThreeIntegers ( ) { scanner = new Scanner ( System . in ) ; output = 0 ; } public void readInput ( ) { k = scanner . nextInt ( ) ; s = scanner . nextInt ( ) ; } public void solve ( ) { for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && s - x - y >= 0 ) { output ++ ; } } } } public void writeOutput ( ) { System . out . print ( output ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int g [ ] [ ] = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { g [ i ] [ j ] = sc . nextInt ( ) ; } } if ( ( g [ 0 ] [ 0 ] + g [ 1 ] [ 1 ] == g [ 0 ] [ 1 ] + g [ 1 ] [ 0 ] ) && ( g [ 0 ] [ 1 ] + g [ 1 ] [ 2 ] == g [ 0 ] [ 2 ] + g [ 1 ] [ 1 ] ) && ( g [ 1 ] [ 0 ] + g [ 2 ] [ 1 ] == g [ 1 ] [ 1 ] + g [ 2 ] [ 0 ] ) && ( g [ 1 ] [ 1 ] + g [ 2 ] [ 2 ] == g [ 1 ] [ 2 ] + g [ 2 ] [ 1 ] ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - x - y && S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner stdin = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdin . nextInt ( ) ; } } String result = " No " ; int a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; int a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ; if ( ( c [ 1 ] [ 1 ] == ( a2 + c [ 0 ] [ 1 ] ) ) && ( c [ 1 ] [ 2 ] == ( a2 + c [ 0 ] [ 2 ] ) ) && ( c [ 2 ] [ 1 ] == ( a3 + c [ 0 ] [ 1 ] ) ) && ( c [ 2 ] [ 2 ] == ( a3 + c [ 0 ] [ 2 ] ) ) ) { result = " Yes " ; } System . out . println ( result ) ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Reader r = new Reader ( ) ; int [ ] [ ] c = new int [ 3 ] [ ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] = r . ii ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) sum += c [ i ] [ j ] ; boolean flag = true ; loop : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int d = 1 ; d < 3 ; d ++ ) { int j = ( i + d ) % 3 ; int k = 3 - i - j ; int s = c [ 0 ] [ i ] + c [ 1 ] [ j ] + c [ 2 ] [ k ] ; if ( 3 * s != sum ) { flag = false ; break loop ; } } } println ( flag ? " Yes " : " No " ) ; } static void print ( Object o ) { System . out . print ( o . toString ( ) ) ; } static void println ( Object o ) { System . out . println ( o . toString ( ) ) ; } static class Reader extends BufferedReader { Reader ( ) { super ( new InputStreamReader ( System . in ) ) ; } String s ( ) throws IOException { return readLine ( ) ; } String [ ] ss ( ) throws IOException { return s ( ) . split ( " " ) ; } int Int ( String s ) { return Integer . parseInt ( s ) ; } int i ( ) throws IOException { return Int ( s ( ) ) ; } int [ ] ii ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; int [ ] ii = new int [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ii [ j ] = Int ( ss [ j ] ) ; return ii ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w_diffs [ ] = new int [ 2 ] ; int h_diffs [ ] = new int [ 2 ] ; int m [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean con = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { m [ i ] [ j ] = sc . nextInt ( ) ; } } w_diffs [ 0 ] = m [ 0 ] [ 1 ] - m [ 0 ] [ 0 ] ; w_diffs [ 1 ] = m [ 0 ] [ 2 ] - m [ 0 ] [ 1 ] ; h_diffs [ 0 ] = m [ 1 ] [ 0 ] - m [ 0 ] [ 0 ] ; h_diffs [ 1 ] = m [ 2 ] [ 0 ] - m [ 1 ] [ 0 ] ; for ( int i = 1 ; i < 3 && con ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( m [ i ] [ j + 1 ] - m [ i ] [ j ] != w_diffs [ j ] ) con = false ; if ( m [ j + 1 ] [ i ] - m [ j ] [ i ] != h_diffs [ j ] ) con = false ; } } if ( con ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int mini = 1000000 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a <= mini ) { mini = a ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Map ; import java . util . HashMap ; public class Main { int k , s ; public static void main ( String args [ ] ) { new Main ( ) . solve ( ) ; } void solve ( ) { in ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int n = s - i - j ; if ( n >= 0 && n <= k ) cnt ++ ; } } out ( cnt ) ; } void in ( ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void out ( ) { } void out ( int n ) { System . out . println ( n ) ; } void out ( char c ) { System . out . print ( c ) ; } void out ( String s ) { System . out . println ( s ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; ++ i ) a [ i ] = sc . nextLong ( ) ; long ans = 0 ; long c = 1 ; for ( int i = 0 ; i < n ; ++ i ) { long q = ( a [ i ] - 1 ) / c ; ans += q ; if ( q > 0 ) a [ i ] = 1 ; c = Math . max ( c , a [ i ] + 1 ) ; } out . println ( ans ) ; out . close ( ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; import java . util . Vector ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] sequence = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sequence [ i ] = sc . nextInt ( ) ; } int koike = 1 ; int tanaka = 0 ; int min = sequence [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= sequence [ i ] ) { tanaka ++ ; } min = Math . min ( min , sequence [ i ] ) ; } System . out . println ( tanaka ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = c [ 0 ] [ i ] ; } a [ 0 ] = 0 ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean wronganswer = false ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { wronganswer = true ; } ; } } if ( wronganswer ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; } int counter = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { counter ++ ; min = p [ i ] ; } } System . out . println ( counter ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static final PrintStream out = System . out ; static Scanner sc = new Scanner ( System . in ) ; static final long Mod = 1000_000_007L ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; System . exit ( 0 ) ; } void solve ( ) { int K = nextInt ( ) ; int S = nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int num = i + j ; if ( num + K >= S && num <= S ) { cnt ++ ; } else if ( num > S ) { break ; } } } out . println ( cnt ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { return sc . next ( ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) { ans = false ; break ; } if ( c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) { ans = false ; break ; } } if ( ans == true ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] ) { ans = false ; break ; } if ( c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] ) { ans = false ; break ; } } } if ( ans == true ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; ++ i ) { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } scan . close ( ) ; int cnt = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > p [ i ] ) { cnt ++ ; min = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int retu = scan . nextInt ( ) ; Integer [ ] jun = new Integer [ retu ] ; int count = 0 ; for ( int i = 0 ; i < retu ; i ++ ) { jun [ i ] = scan . nextInt ( ) ; } int re = 1 ; int min = jun [ 0 ] ; for ( int i = 0 ; i < retu ; i ++ ) { if ( min >= jun [ i ] ) { count ++ ; } min = Math . min ( min , jun [ i ] ) ; } System . out . println ( count ) ; scan . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int data [ ] = new int [ 10 ] ; int x = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) { data [ i ] = scan . nextInt ( ) ; } for ( int a = 0 ; a < 101 ; a ++ ) { for ( int b = 0 ; b < 101 ; b ++ ) { for ( int c = 0 ; c < 101 ; c ++ ) { for ( int d = 0 ; d < 101 ; d ++ ) { if ( data [ 1 ] == a + d && data [ 4 ] == b + d && data [ 7 ] == c + d ) { for ( int e = 0 ; e < 101 ; e ++ ) { if ( data [ 2 ] == a + e && data [ 5 ] == b + e && data [ 8 ] == c + e ) { for ( int f = 0 ; f < 101 ; f ++ ) { if ( data [ 3 ] == a + f && data [ 6 ] == b + f && data [ 9 ] == c + f ) { System . out . println ( " Yes " ) ; return ; } } } } } } } } } System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; Integer K = Integer . parseInt ( st . nextToken ( ) ) ; Integer S = Integer . parseInt ( st . nextToken ( ) ) ; long ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j > S ) continue ; if ( S - i - j <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } else if ( z < 0 ) { break ; } } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; long A [ ] = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scan . nextLong ( ) ; } long res = 0 ; long min = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { res += A [ i ] - 1 ; min = 1 ; continue ; } if ( min + 1 == A [ i ] ) { min = A [ i ] ; } else if ( min + 1 < A [ i ] ) { res += ( A [ i ] - 1 ) / ( min + 1 ) ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) , temp = t , counter = 0 ; for ( int count = 0 ; count < t ; count ++ ) { int x = scan . nextInt ( ) ; if ( x <= temp ) { temp = x ; counter ++ ; } } System . out . println ( counter ) ; scan . close ( ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Integer > c1 = new ArrayList < > ( ) ; List < Integer > c2 = new ArrayList < > ( ) ; List < Integer > c3 = new ArrayList < > ( ) ; IntStream . range ( 0 , 3 ) . forEach ( i -> c1 . add ( sc . nextInt ( ) ) ) ; IntStream . range ( 0 , 3 ) . forEach ( i -> c2 . add ( sc . nextInt ( ) ) ) ; IntStream . range ( 0 , 3 ) . forEach ( i -> c3 . add ( sc . nextInt ( ) ) ) ; int a1 = 0 ; int b1 = c1 . get ( 0 ) - a1 ; int a2 = c2 . get ( 0 ) - b1 ; int b2 = c2 . get ( 1 ) - a2 ; int a3 = c3 . get ( 0 ) - b1 ; int b3 = c3 . get ( 2 ) - a3 ; if ( c1 . get ( 0 ) == a1 + b1 && c1 . get ( 1 ) == a1 + b2 && c1 . get ( 2 ) == a1 + b3 && c2 . get ( 0 ) == a2 + b1 && c2 . get ( 1 ) == a2 + b2 && c2 . get ( 2 ) == a2 + b3 && c3 . get ( 0 ) == a3 + b1 && c3 . get ( 1 ) == a3 + b2 && c3 . get ( 2 ) == a3 + b3 ) { System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 10000000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = Math . max ( 0 , s - 2 * k ) ; x <= k ; x ++ ) { for ( int y = Math . max ( 0 , s - k - x ) ; y <= Math . min ( k , s - x ) ; y ++ ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; ArrayList < Integer > numList = new ArrayList < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { numList . add ( sc . nextInt ( ) ) ; } int min = numList . get ( 0 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList . get ( i ) < min ) { min = numList . get ( i ) ; } if ( numList . get ( i ) <= min ) { ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int Z = K ; int counter = 0 ; while ( Z >= 0 ) { int Y = S - Z ; if ( Y > K ) { Y = K ; } while ( Y >= 0 ) { int X = S - Z - Y ; if ( K >= X && X >= 0 ) { counter ++ ; } Y -- ; } Z -- ; } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; int count = 0 ; int min = 99999999 ; while ( n -- > 0 ) { int num = sc . nextInt ( ) ; if ( num < min ) { count ++ ; min = num ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long cnt = 0 ; int K = input . nextInt ( ) ; int S = input . nextInt ( ) ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k >= 0 && k <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } public static boolean Three ( int a , int b , int c ) { if ( a != b && b != c && c != a ) return true ; return false ; } public static boolean One ( int a , int b , int c ) { if ( a == b && b == c && c == a ) return true ; return false ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int C = 0 ; int nam = 0 ; for ( int a = 0 ; a <= K ; a ++ ) { for ( int b = 0 ; b <= K ; b ++ ) { C = S - a - b ; if ( 0 <= C && C <= K ) { nam = nam + 1 ; } } } System . out . print ( nam ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { solve_152_C ( ) ; return ; } private static void solve_152_C ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int count = 0 ; Boolean judge = false ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int max = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { int value = P [ i ] ; if ( value <= max ) count ++ ; max = Math . min ( max , value ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int s1 = c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] ; int s2 = c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] ; int s = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; if ( s1 + s2 == 2 * s ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; int numArrasy [ ] = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { numArrasy [ i ] = sc . nextInt ( ) ; } int count = 1 ; int tmp = numArrasy [ 0 ] ; for ( int i = 0 ; i < num ; i ++ ) { if ( tmp > numArrasy [ i ] ) { count ++ ; } tmp = Math . min ( tmp , numArrasy [ i ] ) ; } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String line [ ] = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( line [ 0 ] ) ; int s = Integer . parseInt ( line [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( p [ i ] < min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int [ ] arr = new int [ n ] ; int min = Integer . MAX_VALUE ; int updatedMin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scn . nextInt ( ) ; if ( arr [ i ] < min ) { updatedMin ++ ; min = arr [ i ] ; } } System . out . println ( updatedMin ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = n ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; min = Math . min ( min , p ) ; if ( p <= min ) cnt ++ ; } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] data = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { data [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 = 0 ; int b1 = data [ 0 ] [ 0 ] ; int b2 = data [ 1 ] [ 0 ] ; int b3 = data [ 2 ] [ 0 ] ; int a2 = data [ 0 ] [ 1 ] - b1 ; int a3 = data [ 0 ] [ 2 ] - b1 ; if ( data [ 0 ] [ 0 ] == a1 + b1 && data [ 0 ] [ 1 ] == a2 + b1 && data [ 0 ] [ 2 ] == a3 + b1 && data [ 1 ] [ 0 ] == a1 + b2 && data [ 1 ] [ 1 ] == a2 + b2 && data [ 1 ] [ 2 ] == a3 + b2 && data [ 2 ] [ 0 ] == a1 + b3 && data [ 2 ] [ 1 ] == a2 + b3 && data [ 2 ] [ 2 ] == a3 + b3 ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z <= K && Z >= 0 ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( ( new InputStreamReader ( System . in ) ) ) ; String [ ] l = reader . readLine ( ) . split ( " " ) ; int N = Integer . parseInt ( l [ 0 ] ) ; String [ ] list = reader . readLine ( ) . split ( " " ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( list [ i ] ) ; } int [ ] dp = new int [ N ] ; dp [ 0 ] = 1 ; int min = arr [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( arr [ j ] < min ) { dp [ j ] = 1 + dp [ j - 1 ] ; min = arr [ j ] ; } else { dp [ j ] = dp [ j - 1 ] ; } } System . out . println ( dp [ dp . length - 1 ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { if ( x > S ) break ; for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) break ; int z = S - x - y ; if ( z <= K ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = a [ 0 ] [ i ] ; x [ 1 ] = a [ 1 ] [ 0 ] - y [ 0 ] ; x [ 2 ] = a [ 2 ] [ 0 ] - y [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; boolean bl = true ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] || c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int next = scan . nextInt ( ) ; if ( min > next ) { min = next ; ans ++ ; } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { for ( int y = 0 ; y <= K && y <= S ; y ++ ) { if ( S - x - y >= 0 && S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int min = 0 ; int count = 1 ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = sc . nextInt ( ) ; } min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { C [ r ] [ c ] = in . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] a2 = new int [ 3 ] [ 3 ] ; a [ 0 ] = 0 ; for ( int c = 0 ; c < 3 ; c ++ ) { b [ c ] = C [ 0 ] [ c ] - a [ 0 ] ; } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { a2 [ r ] [ c ] = C [ r ] [ c ] - b [ c ] ; } } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 1 ; c < 3 ; c ++ ) { if ( a2 [ r ] [ c - 1 ] != a2 [ r ] [ c ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] T = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( T [ 0 ] ) ; int S = Integer . parseInt ( T [ 1 ] ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( i + j + k == S && k >= 0 && k <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; MyScanner in = new MyScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; C solver = new C ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class C { public void solve ( int testNumber , MyScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] P = in . nextIntArray ( N ) ; int max = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= max ) { max = P [ i ] ; ans ++ ; } } out . println ( ans ) ; } } static class MyScanner { private BufferedReader in ; private StringTokenizer st ; public MyScanner ( InputStream stream ) { in = new BufferedReader ( new InputStreamReader ( stream ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { String rl = in . readLine ( ) ; if ( rl == null ) { return null ; } st = new StringTokenizer ( rl ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = nextInt ( ) ; } return a ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { private static BufferedReader br ; private static StringTokenizer tokenizer ; private static void solve ( ) throws IOException { int n = nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } int min = arr [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , arr [ i ] ) ; if ( min >= arr [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solve ( ) ; } public static String next ( ) throws IOException { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { String line = br . readLine ( ) ; if ( line == null ) throw new IOException ( ) ; tokenizer = new StringTokenizer ( line ) ; } return tokenizer . nextToken ( ) ; } public static int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public static long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public static double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } int min = arr [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > min ) { count ++ ; } min = Math . min ( min , arr [ i ] ) ; } out . println ( n - count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int result = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int total = x + y ; if ( ! ( total > S ) && ( total + K ) >= S ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int count = 1 ; int min = P [ 0 ] ; if ( N == 1 ) { System . out . println ( 1 ) ; } else { for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( P [ i ] > P [ i + 1 ] && min >= P [ i + 1 ] ) { min = P [ i + 1 ] ; count += 1 ; } } System . out . println ( count ) ; } } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int number [ ] = new int [ n ] ; int mini = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) number [ i ] = scan . nextInt ( ) ; scan . close ( ) ; for ( int j = 0 ; j < n ; j ++ ) { mini = Math . min ( mini , number [ j ] ) ; if ( mini >= number [ j ] ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int Ans = 0 ; if ( S <= K ) Ans = ( S + 1 ) * ( S + 2 ) / 2 ; else if ( K < S && S <= 2 * K ) Ans = ( K + 1 ) * ( K + 1 ) - ( 2 * K - S + 1 ) * ( 2 * K - S ) / 2 - ( S - K + 1 ) * ( S - K ) / 2 ; else if ( 2 * K <= S ) Ans = ( 3 * K - S + 1 ) * ( 3 * K - S + 2 ) / 2 ; System . out . println ( Ans ) ; } }
import java . util . * ; public class Main { public static int p [ ] ; public static int min = 2 * 10 * 10 * 10 * 10 * 10 + 1 ; private static boolean judge ( int i ) { if ( min > p [ i - 1 ] ) { min = p [ i - 1 ] ; return true ; } else { return false ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( judge ( i ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = Integer . parseInt ( scan . next ( ) ) ; int counter = 0 ; int min = Integer . MAX_VALUE ; ArrayList < Integer > pi = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int numPi = Integer . parseInt ( scan . next ( ) ) ; if ( i == 0 ) { counter ++ ; } else { if ( numPi <= min ) { counter ++ ; } } if ( min > numPi ) { min = numPi ; } } System . out . println ( counter ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int m = 1000000 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; m = Math . min ( m , p ) ; if ( p == m ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 = 0 ; int b1 = c [ 1 ] [ 1 ] - a1 ; int b2 = c [ 1 ] [ 2 ] - a1 ; int b3 = c [ 1 ] [ 3 ] - a1 ; boolean ans = c [ 2 ] [ 1 ] - b1 == c [ 2 ] [ 2 ] - b2 && c [ 2 ] [ 2 ] - b2 == c [ 2 ] [ 3 ] - b3 && c [ 3 ] [ 1 ] - b1 == c [ 3 ] [ 2 ] - b2 && c [ 3 ] [ 2 ] - b2 == c [ 3 ] [ 3 ] - b3 ; System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] c1 = sc . nextLine ( ) . split ( " " ) ; String [ ] c2 = sc . nextLine ( ) . split ( " " ) ; String [ ] c3 = sc . nextLine ( ) . split ( " " ) ; int [ ] [ ] grid = new int [ ] [ ] { { Integer . valueOf ( c1 [ 0 ] ) , Integer . valueOf ( c2 [ 0 ] ) , Integer . valueOf ( c3 [ 0 ] ) } , { Integer . valueOf ( c1 [ 1 ] ) , Integer . valueOf ( c2 [ 1 ] ) , Integer . valueOf ( c3 [ 1 ] ) } , { Integer . valueOf ( c1 [ 2 ] ) , Integer . valueOf ( c2 [ 2 ] ) , Integer . valueOf ( c3 [ 2 ] ) } } ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = grid [ 0 ] [ i ] - x [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) x [ i ] = grid [ i ] [ 0 ] - y [ 0 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != grid [ i ] [ j ] ) ans = " No " ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { @ SuppressWarnings ( " resource " ) public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = 2000001 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) { ans ++ ; if ( P [ i ] < min ) { min = P [ i ] ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int max = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; max = Math . max ( max , P [ i ] ) ; } int min = max ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] [ 0 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 1 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 2 ] = Integer . parseInt ( scanner . next ( ) ) ; } scanner . close ( ) ; for ( int i = 0 ; i < c . length ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { int num = c [ i ] [ j ] ; if ( min > num ) { min = num ; } } for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { c [ i ] [ j ] -= min ; } } for ( int i = 0 ; i < c . length ; i ++ ) { if ( c [ 0 ] [ i ] != c [ 1 ] [ i ] || c [ 1 ] [ i ] != c [ 2 ] [ i ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; int num = 1 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; if ( i == 0 ) { min = p [ i ] ; continue ; } if ( p [ i ] < min ) { num ++ ; min = p [ i ] ; } } System . out . println ( num ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = in . nextInt ( ) ; for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = arr [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = arr [ 0 ] [ j ] - a [ 0 ] ; for ( int k = 0 ; k < 3 ; k ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ k ] [ j ] != a [ k ] + b [ j ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) grid [ i ] [ j ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( grid [ i ] [ j ] + grid [ i + 1 ] [ j + 1 ] != grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; long min = Long . MAX_VALUE ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long temp = Long . parseLong ( sc . next ( ) ) ; if ( min > temp ) { ans ++ ; min = temp ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ok = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < N ; j ++ ) { ok = Math . min ( ok , P [ j ] ) ; if ( ok == P [ j ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dx = new int [ 3 ] [ 2 ] ; int [ ] [ ] dy = new int [ 2 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { dx [ i ] [ 0 ] = ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) ; dx [ i ] [ 1 ] = ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) ; } for ( int j = 0 ; j < 3 ; j ++ ) { dy [ 0 ] [ j ] = Math . abs ( c [ 0 ] [ j ] - c [ 1 ] [ j ] ) ; dy [ 1 ] [ j ] = Math . abs ( c [ 1 ] [ j ] - c [ 2 ] [ j ] ) ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( dy [ i ] [ 0 ] != dy [ i ] [ 1 ] || dy [ i ] [ 0 ] != dy [ i ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } for ( int j = 0 ; j < 2 ; j ++ ) { if ( dx [ 0 ] [ j ] != dx [ 1 ] [ j ] || dx [ 0 ] [ j ] != dx [ 2 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int res = 0 ; int mi = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; mi = Math . min ( mi , P ) ; if ( mi == P ) { res ++ ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; for ( int k = 0 ; k < 100 ; k ++ ) { x [ 0 ] = k ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] intArray = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { intArray [ i ] = sc . nextInt ( ) ; } double curMin = 1e9 ; for ( int value : intArray ) { curMin = Math . min ( curMin , value ) ; if ( curMin == value ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int C11 = scan . nextInt ( ) ; int C12 = scan . nextInt ( ) ; int C13 = scan . nextInt ( ) ; scan . nextLine ( ) ; int C21 = scan . nextInt ( ) ; int C22 = scan . nextInt ( ) ; int C23 = scan . nextInt ( ) ; scan . nextLine ( ) ; int C31 = scan . nextInt ( ) ; int C32 = scan . nextInt ( ) ; int C33 = scan . nextInt ( ) ; scan . nextLine ( ) ; if ( ( ( C12 - C11 ) == ( C22 - C21 ) && ( C22 - C21 ) == ( C32 - C31 ) ) && ( ( C13 - C12 ) == ( C23 - C22 ) && ( C23 - C22 ) == ( C33 - C32 ) ) && ( ( C31 - C21 ) == ( C32 - C22 ) && ( C32 - C22 ) == ( C33 - C23 ) ) && ( ( C21 - C11 ) == ( C22 - C12 ) && ( C22 - C12 ) == ( C23 - C13 ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; aLoop : for ( int a = 0 ; a <= k ; a ++ ) { bLoop : for ( int b = 0 ; b <= k ; b ++ ) { int abSum = a + b ; if ( abSum > s ) { continue aLoop ; } else if ( s - abSum <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int c = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( h >= a ) c ++ ; h = Math . min ( a , h ) ; } System . out . println ( c ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] A = new int [ 2 ] ; int [ ] B = new int [ 2 ] ; Arrays . fill ( A , 101 ) ; Arrays . fill ( B , 101 ) ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = reader . nextInt ( ) ; } } A [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 1 ] [ 0 ] ; A [ 1 ] = arr [ 1 ] [ 0 ] - arr [ 2 ] [ 0 ] ; B [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] ; B [ 1 ] = arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( arr [ i - 1 ] [ j ] - A [ i - 1 ] != arr [ i ] [ j ] || arr [ i ] [ j - 1 ] - B [ j - 1 ] != arr [ i ] [ j ] ) { ans = " No " ; } } } System . out . print ( ans ) ; reader . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] List = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { List [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = List [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = List [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( List [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int leftTop = sc . nextInt ( ) ; int middleTop = sc . nextInt ( ) ; int rightTop = sc . nextInt ( ) ; int leftMiddle = sc . nextInt ( ) ; int middleMiddle = sc . nextInt ( ) ; int rightMiddle = sc . nextInt ( ) ; int leftDown = sc . nextInt ( ) ; int middleDown = sc . nextInt ( ) ; int rightDown = sc . nextInt ( ) ; String ans = " Yes " ; int [ ] aTop = { 0 , leftTop - middleTop , leftTop - rightTop } ; int [ ] aMiddle = { 0 , leftMiddle - middleMiddle , leftMiddle - rightMiddle } ; int [ ] aDown = { 0 , leftDown - middleDown , leftDown - rightDown } ; int [ ] bLeft = { 0 , leftTop - leftMiddle , leftTop - leftDown } ; int [ ] bMiddle = { 0 , middleTop - middleMiddle , middleTop - middleDown } ; int [ ] bRight = { 0 , rightTop - rightMiddle , rightTop - rightDown } ; if ( ! Arrays . equals ( aTop , aMiddle ) || ! Arrays . equals ( aTop , aDown ) ) { ans = " No " ; } if ( ! Arrays . equals ( bLeft , bMiddle ) || ! Arrays . equals ( bLeft , bRight ) ) { ans = " No " ; } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { MyReader r = new MyReader ( ) ; int K , S ; { int [ ] a = r . ii ( ) ; K = a [ 0 ] ; S = a [ 1 ] ; } int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) for ( int j = 0 , k ; j < K + 1 ; j ++ ) if ( 0 <= ( k = S - i - j ) && k <= K ) count ++ ; println ( count ) ; } static void print ( Object o ) { System . out . print ( o . toString ( ) ) ; } static void println ( Object o ) { System . out . println ( o . toString ( ) ) ; } static int Int ( String s ) { return Integer . parseInt ( s ) ; } static long Long ( String s ) { return Long . parseLong ( s ) ; } static class MyReader extends BufferedReader { MyReader ( ) { super ( new InputStreamReader ( System . in ) ) ; } String s ( ) throws IOException { return readLine ( ) ; } String [ ] ss ( ) throws IOException { return s ( ) . split ( " " ) ; } int i ( ) throws IOException { return Int ( s ( ) ) ; } int [ ] ii ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; int [ ] ii = new int [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ii [ j ] = Integer . parseInt ( ss [ j ] ) ; return ii ; } long l ( ) throws IOException { return Long ( s ( ) ) ; } long [ ] ll ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; long [ ] ll = new long [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ll [ j ] = Long . parseLong ( ss [ j ] ) ; return ll ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int k = scanner . nextInt ( ) , s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( ( z >= 0 ) && ( z <= k ) ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x = 0 ; int count = 0 ; int y = 0 ; int z = 0 ; Set < Integer > al = new HashSet < > ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { al . add ( i ) ; } for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( al . contains ( s - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . FileNotFoundException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int x = sc . nextInt ( ) ; if ( x < min ) { min = x ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int j , cnt = 0 ; int min = 999999999 ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( min == p [ i ] ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && S - i - j >= 0 ) { ans ++ ; } else if ( S - i - j <= 0 ) { break ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { ans += 1 ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . function . Consumer ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String str [ ] = br . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( str [ j ] ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { int s = c [ ( i + 1 ) % 3 ] [ 0 ] - c [ i ] [ 0 ] ; int t = c [ ( i + 1 ) % 3 ] [ 1 ] - c [ i ] [ 1 ] ; int u = c [ ( i + 1 ) % 3 ] [ 2 ] - c [ i ] [ 2 ] ; if ( s != t || t != u || u != s ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; int [ ] b = new int [ 4 ] ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 1 ] = c [ 1 ] [ 1 ] ; a [ 2 ] = c [ 2 ] [ 1 ] ; a [ 3 ] = c [ 3 ] [ 1 ] ; b [ 1 ] = 0 ; b [ 2 ] = c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ; b [ 3 ] = c [ 1 ] [ 3 ] - c [ 1 ] [ 1 ] ; boolean ans = true ; int numbers [ ] = { 2 , 3 } ; for ( int i : numbers ) { for ( int j : numbers ) { if ( a [ i ] + b [ j ] == c [ i ] [ j ] ) ; else ans = false ; } } if ( ans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] values = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { values [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = false ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { for ( int k = 0 ; k < 101 ; k ++ ) { int b1 = values [ 0 ] [ 0 ] - i ; int b2 = values [ 0 ] [ 1 ] - i ; int b3 = values [ 0 ] [ 2 ] - i ; if ( b1 < 0 || b2 < 0 || b3 < 0 ) continue ; if ( ( values [ 1 ] [ 0 ] == j + b1 && values [ 1 ] [ 1 ] == j + b2 && values [ 1 ] [ 2 ] == j + b3 ) && ( values [ 2 ] [ 0 ] == k + b1 && values [ 2 ] [ 1 ] == k + b2 && values [ 2 ] [ 2 ] == k + b3 ) ) { ok = true ; } } } } System . out . println ( ok ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int a1 , b1 , b2 , b3 ; a1 = 0 ; b1 = c [ 0 ] [ 0 ] ; b2 = c [ 0 ] [ 1 ] ; b3 = c [ 0 ] [ 2 ] ; if ( c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 && c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } if ( c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 && c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . lang . Integer ; import java . lang . Math ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String tokens1 [ ] = scanner . nextLine ( ) . split ( " " ) ; String tokens2 [ ] = scanner . nextLine ( ) . split ( " " ) ; int min = Integer . parseInt ( tokens2 [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < tokens2 . length ; i ++ ) { int val = Integer . parseInt ( tokens2 [ i ] ) ; if ( val <= min ) { count ++ ; } min = Math . min ( min , val ) ; } System . out . print ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int cou = 1 ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 999999999 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , p [ i - 1 ] ) ; if ( p [ i ] < min ) { cou ++ ; } } System . out . print ( cou ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int c = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y == s ) { c ++ ; } else if ( s - ( x + y ) <= k && x + y < s ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int max = p [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max > p [ i ] ) { max = p [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; ArrayList < Integer > P = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) P . add ( sc . nextInt ( ) ) ; int sum = 1 ; int now = P . get ( 0 ) ; for ( int i = 1 ; i < N ; i ++ ) { if ( now >= P . get ( i ) ) { sum ++ ; now = P . get ( i ) ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } String ans = " No " ; for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; if ( c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] && c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] && c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] && c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x < k + 1 ; x ++ ) { for ( int y = 0 ; y < k + 1 ; y ++ ) { if ( s - x - y < k + 1 && s - x - y >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { static int MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < k + 1 ; i ++ ) for ( int j = 0 ; j < k + 1 ; j ++ ) { if ( i + j <= s && i + j + k >= s ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < p . length ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int count = 1 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( min > p [ i ] ) { min = p [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner std = new Scanner ( System . in ) ; int n = std . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = std . nextInt ( ) ; } int max = p [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int value = p [ i ] ; if ( value <= max ) { count ++ ; } max = Math . min ( max , value ) ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int max = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( max >= P [ i ] ) { ans ++ ; max = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z < 0 ) continue ; if ( z > K ) continue ; if ( x + y + z == S ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int arrayMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { arrayMin = Math . min ( p [ i ] , arrayMin ) ; if ( arrayMin == p [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; int P = 0 ; for ( int i = 2 ; i <= N ; i ++ ) { P = sc . nextInt ( ) ; if ( P <= min ) { count ++ ; min = P ; } } System . out . print ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int ans = 1 ; a [ 0 ] = sc . nextInt ( ) ; int min = a [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] <= min ) { min = a [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] tmpString = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( tmpString [ 0 ] ) ; int S = Integer . parseInt ( tmpString [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int total = S - i - j ; if ( total >= 0 && total <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , S - 2 * K ) ; x <= Math . min ( K , S ) ; x ++ ) { int left = S - x ; ans += Math . min ( K , left ) - Math . max ( 0 , left - K ) + 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int Pj = P [ 0 ] ; for ( int i = 0 ; i < N ; ++ i ) { if ( P [ i ] <= Pj ) { ++ count ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int t = S - x - y ; if ( t >= 0 && t <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i > S ) { break ; } for ( int j = i ; j <= K ; j ++ ) { if ( i + j > S ) { break ; } for ( int l = j ; l <= K ; l ++ ) { if ( i + j + l == S ) { if ( i < j && j < l ) { answer = answer + 6 ; } else if ( ( i == j && j < l ) || ( i < j && j == l ) ) { answer = answer + 3 ; } else { answer ++ ; } break ; } } } } System . out . println ( answer ) ; } }
import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) , ans = 0 ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) p [ i ] = sc . nextInt ( ) ; int m = p [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { m = Math . min ( m , p [ i ] ) ; if ( m == p [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 , a2 , a3 , b1 , b2 , b3 ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } String res = " No " ; for ( a1 = 0 ; a1 <= grid [ 0 ] [ 0 ] ; a1 ++ ) { b1 = grid [ 0 ] [ 0 ] - a1 ; b2 = grid [ 0 ] [ 1 ] - a1 ; b3 = grid [ 0 ] [ 2 ] - a1 ; a2 = grid [ 1 ] [ 0 ] - b1 ; a3 = grid [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == grid [ 1 ] [ 1 ] && a2 + b3 == grid [ 1 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 1 ] && a3 + b3 == grid [ 2 ] [ 2 ] ) res = " Yes " ; } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int max = P [ 0 ] ; int min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( max >= P [ i ] && min >= P [ i ] ) { ans += 1 ; } max = Math . max ( max , P [ i ] ) ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = Integer . parseInt ( in . nextLine ( ) ) ; String [ ] params = in . nextLine ( ) . split ( " " ) ; int [ ] ps = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ps [ i ] = Integer . parseInt ( params [ i ] ) ; } int ans = 0 ; int min = ps [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ps [ i ] <= min ) { ans ++ ; min = ps [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = scanner . nextInt ( ) ; int min = P [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) count ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; try { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! check_h ( c , i ) ) { System . out . println ( " No " ) ; return ; } } for ( int j = 0 ; j < 2 ; j ++ ) { if ( ! check_v ( c , j ) ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } finally { scanner . close ( ) ; } } private static boolean check_v ( int [ ] [ ] c , int j ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ i ] [ j + 1 ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] ) return false ; } return true ; } private static boolean check_h ( int [ ] [ ] c , int i ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ i + 1 ] [ j ] - c [ i ] [ j ] != c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] ) return false ; } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int P [ ] = new int [ N ] ; int result = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { if ( x > S ) break ; for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) break ; int z = S - x - y ; if ( z >= 0 && z <= K ) sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int sub = 0 ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i != S ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j != S ) { sub = S - ( i + j ) ; if ( sub >= 0 && sub <= K ) { count ++ ; } } else if ( i + j == S ) { count ++ ; break ; } } } else if ( i == S ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main implements Runnable { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Thread thread = new Thread ( null , new Main ( ) , " " , 32 * 1024 * 1024 ) ; thread . start ( ) ; } @ Override public void run ( ) { final Scanner scanner = new Scanner ( System . in ) ; solve ( scanner ) ; } static void solve ( Scanner scanner ) { int N = Integer . parseInt ( scanner . next ( ) ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = Integer . parseInt ( scanner . next ( ) ) ; } int min = A [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( A [ i ] <= min ) { ans ++ ; } min = Math . min ( min , A [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { int tmp = s - i - j ; if ( tmp >= 0 && tmp <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; a [ 0 ] = 0 ; int [ ] b = { c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] } ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( ( a [ i ] + b [ j ] ) != c [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; String ans = " No " ; LOOP : for ( a [ 0 ] = 0 ; a [ 0 ] <= 100 ; a [ 0 ] ++ ) { b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; if ( b [ 0 ] < 0 || b [ 1 ] < 0 || b [ 2 ] < 0 ) { break ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { continue LOOP ; } } } ans = " Yes " ; break ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int array [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { array [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long ans = array [ 1 ] - 1 ; array [ 1 ] = 1 ; int curr = 2 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( array [ i ] < curr ) continue ; if ( array [ i ] > curr ) { ans += array [ i ] / curr ; if ( array [ i ] % curr == 0 ) -- ans ; } if ( array [ i ] == curr ) ++ curr ; } System . out . print ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) , a = 0 , i , j ; scan . close ( ) ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j > s ) break ; if ( k >= s - i - j ) a ++ ; } } System . out . print ( a ) ; } }
import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( 0 <= z ) && ( z <= k ) ) { answer += 1 ; } } } System . out . println ( answer ) ; } }
import java . util . * ; import java . util . TreeMap ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int cnt = 1 ; int min = sc . nextInt ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int next = sc . nextInt ( ) ; if ( min > next ) { cnt ++ ; } min = Math . min ( min , next ) ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int x = 0 ; int y = 0 ; int z = s - ( x + y ) ; int yz = y + z ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && x + y + k >= s ) { count ++ ; } } } if ( s == k * 3 ) { count = 1 ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static int [ ] [ ] mat = new int [ 3 ] [ 3 ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i , j ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { mat [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( ( mat [ 0 ] [ 0 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] && mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] == mat [ 2 ] [ 0 ] - mat [ 2 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 0 ] [ 2 ] == mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] == mat [ 2 ] [ 1 ] - mat [ 2 ] [ 2 ] && mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] ) ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = 0 ; Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int check = 0 ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = 0 ; int x2 = 0 ; int y1 = 0 ; int y2 = 0 ; x1 = a [ 3 ] - a [ 0 ] ; x2 = a [ 6 ] - a [ 3 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = 1 ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = 1 ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = 1 ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = 1 ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int n = ni ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = ni ( ) ; } int max = 1 ; long cnt = a [ 0 ] - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] == max + 1 ) { ++ max ; continue ; } long v = ( a [ i ] - 1 ) / ( max + 1 ) ; cnt += v ; } System . out . println ( cnt ) ; } int ni ( ) { return Integer . parseInt ( sc . next ( ) ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && x + y + k >= s ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] p = in . readIntArray ( n ) ; int answer = 0 ; for ( int i = 0 , min = Integer . MAX_VALUE ; i < n ; i ++ ) { if ( p [ i ] < min ) answer ++ ; min = Math . min ( min , p [ i ] ) ; } out . println ( answer ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] readIntArray ( int n ) { int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = nextInt ( ) ; } return x ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int sum = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int tmp = sum - i - j ; if ( 0 <= tmp && tmp <= max ) result ++ ; } } System . out . println ( Integer . toString ( result ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; scanner . close ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = 0 ; if ( x + y < s && s - ( x + y ) <= k ) { z = s - ( x + y ) ; } if ( x + y + z == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] nums = new int [ 4 ] [ 4 ] ; for ( int rIdx = 1 ; rIdx <= 3 ; rIdx ++ ) { String [ ] inputs = scanner . nextLine ( ) . split ( " " ) ; for ( int cIdx = 1 ; cIdx <= 3 ; cIdx ++ ) nums [ rIdx ] [ cIdx ] = Integer . parseInt ( inputs [ cIdx - 1 ] ) ; } boolean isRightInfo = true ; for ( int idx = 2 ; idx <= 3 ; idx ++ ) { int diff = nums [ idx ] [ 1 ] - nums [ 1 ] [ 1 ] ; if ( diff != nums [ idx ] [ 2 ] - nums [ 1 ] [ 2 ] || diff != nums [ idx ] [ 3 ] - nums [ 1 ] [ 3 ] ) isRightInfo = false ; diff = nums [ 1 ] [ idx ] - nums [ 1 ] [ 1 ] ; if ( diff != nums [ 2 ] [ idx ] - nums [ 2 ] [ 1 ] || diff != nums [ 3 ] [ idx ] - nums [ 3 ] [ 1 ] ) isRightInfo = false ; } if ( isRightInfo ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { solve ( sc ) ; } } public static void solve ( Scanner sc ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int ans = 0 ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { ans ++ ; min = a [ i ] ; } } System . out . println ( ans + 1 ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } if ( s < i + j ) break ; } if ( s < i ) break ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] level = new int [ n ] ; int count = 1 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { level [ i ] = input . nextInt ( ) ; if ( i == 0 ) { min = level [ 0 ] ; } else { if ( level [ i ] <= min ) { count ++ ; min = level [ i ] ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int ans = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i - 1 ] >= P [ i ] ) { ans ++ ; } else { P [ i ] = P [ i - 1 ] ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long cnt = a [ 0 ] - 1 ; int max = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max < a [ i ] ) { int c = a [ i ] % max == 0 ? ( int ) Math . floor ( a [ i ] / max ) - 1 : ( int ) Math . floor ( a [ i ] / max ) ; cnt += c ; a [ i ] = 1 ; } max = Math . max ( a [ i ] + 1 , max ) ; } sb . append ( cnt ) ; System . out . println ( sb ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] ab = new int [ 3 ] [ 3 ] ; ab [ 0 ] [ 0 ] = sc . nextInt ( ) ; ab [ 0 ] [ 1 ] = sc . nextInt ( ) ; ab [ 0 ] [ 2 ] = sc . nextInt ( ) ; ab [ 1 ] [ 0 ] = sc . nextInt ( ) ; ab [ 1 ] [ 1 ] = sc . nextInt ( ) ; ab [ 1 ] [ 2 ] = sc . nextInt ( ) ; ab [ 2 ] [ 0 ] = sc . nextInt ( ) ; ab [ 2 ] [ 1 ] = sc . nextInt ( ) ; ab [ 2 ] [ 2 ] = sc . nextInt ( ) ; if ( diff_check ( ab , 0 , 1 , true ) && diff_check ( ab , 0 , 2 , true ) && diff_check ( ab , 1 , 2 , true ) && diff_check ( ab , 0 , 1 , false ) && diff_check ( ab , 0 , 2 , false ) && diff_check ( ab , 1 , 2 , false ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private static boolean diff_check ( int [ ] [ ] ab , int i , int j , boolean b ) { int point ; if ( b ) { point = ab [ i ] [ 0 ] - ab [ j ] [ 0 ] ; if ( point != ab [ i ] [ 1 ] - ab [ j ] [ 1 ] ) return false ; if ( point != ab [ i ] [ 2 ] - ab [ j ] [ 2 ] ) return false ; } else { point = ab [ 0 ] [ i ] - ab [ 0 ] [ j ] ; if ( point != ab [ 1 ] [ i ] - ab [ 1 ] [ j ] ) return false ; if ( point != ab [ 2 ] [ i ] - ab [ 2 ] [ j ] ) return false ; } return true ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { String line = " " ; try { line = readLine ( ) ; StringTokenizer st = new StringTokenizer ( line , " " ) ; String k = st . nextToken ( ) ; String s = st . nextToken ( ) ; int k1Value = Integer . parseInt ( k ) ; int sValue = Integer . parseInt ( s ) ; int cnt = 0 ; int x = 0 ; for ( int i = 0 ; i < sValue + 1 ; i ++ ) { if ( i > k1Value ) { continue ; } for ( int j = 0 ; j < sValue + 1 ; j ++ ) { if ( j > k1Value ) { continue ; } else if ( sValue - i - j > k1Value ) { continue ; } if ( i + j <= sValue ) { cnt ++ ; } } } System . out . println ( cnt ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private static String readLine ( ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; return br . readLine ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) <= K && 0 <= ( S - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } boolean bool = true ; if ( ! ( map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 1 ] [ 0 ] - map [ 1 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 1 ] [ 1 ] - map [ 1 ] [ 2 ] && map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 2 ] [ 0 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 2 ] [ 1 ] - map [ 2 ] [ 2 ] ) ) bool = false ; if ( ! ( map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 1 ] - map [ 1 ] [ 1 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 1 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 2 ] - map [ 1 ] [ 2 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 2 ] - map [ 2 ] [ 2 ] ) ) bool = false ; System . out . println ( bool ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static String printAnswer ( int [ ] [ ] c ) { int col1 = 0 ; int col2 = 0 ; int col3 = 0 ; int row1 = 0 ; int row2 = 0 ; int row3 = 0 ; for ( int i = 1 ; i < 3 ; i ++ ) { col1 = c [ 0 ] [ 0 ] - c [ i ] [ 0 ] ; col2 = c [ 0 ] [ 1 ] - c [ i ] [ 1 ] ; col3 = c [ 0 ] [ 2 ] - c [ i ] [ 2 ] ; if ( col1 != col2 || col2 != col3 ) { return " No " ; } row1 = c [ 0 ] [ 0 ] - c [ 0 ] [ i ] ; row2 = c [ 1 ] [ 0 ] - c [ 1 ] [ i ] ; row3 = c [ 2 ] [ 0 ] - c [ 2 ] [ i ] ; if ( row1 != row2 || row2 != row3 ) { return " No " ; } } return " Yes " ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( printAnswer ( c ) ) ; } }
import java . util . * ; public class Main implements Runnable { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Thread thread = new Thread ( null , new Main ( ) , " " , 32 * 1024 * 1024 ) ; thread . start ( ) ; } @ Override public void run ( ) { final Scanner scanner = new Scanner ( System . in ) ; solve ( scanner ) ; } static void solve ( Scanner scanner ) { int N = Integer . parseInt ( scanner . next ( ) ) ; int min = Integer . MAX_VALUE , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int n = Integer . parseInt ( scanner . next ( ) ) ; if ( n < min ) { ans ++ ; min = n ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String ans = " Yes " ; int list [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int num = sc . nextInt ( ) ; list [ i ] [ j ] = num ; } } int tmpListA [ ] = new int [ 3 ] ; int tmpListB [ ] = new int [ 3 ] ; tmpListA [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { tmpListB [ i ] = list [ 0 ] [ i ] - tmpListA [ 0 ] ; tmpListA [ i ] = list [ i ] [ 0 ] - tmpListB [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( list [ i ] [ j ] == ( tmpListA [ i ] + tmpListB [ j ] ) ) { continue ; } else { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int kari = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; boolean hanbetsu = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( ( c [ i ] [ j ] + c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] != kari ) ) { hanbetsu = false ; break ; } } } if ( hanbetsu ) System . out . print ( " Yes " ) ; else System . out . print ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; int max = a [ 0 ] ; int min = a [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max && a [ i ] < min ) { count ++ ; min = a [ i ] ; } else { max = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static int A , B ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; A = sc . nextInt ( ) ; B = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i < A + 1 ; i ++ ) { for ( int j = 0 ; j < A + 1 ; j ++ ) { if ( B - i - j <= A && B - i - j >= 0 ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n [ ] [ ] = new int [ 3 ] [ 3 ] ; int total = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int a = sc . nextInt ( ) ; total += a ; n [ i ] [ j ] = a ; } } String ans = " Yes " ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( total % 3 != 0 ) { ans = " No " ; break ; } total /= 3 ; if ( ( n [ 0 ] [ 0 ] + n [ 1 ] [ 1 ] + n [ 2 ] [ 2 ] ) != total || ( n [ 0 ] [ 2 ] + n [ 1 ] [ 1 ] + n [ 2 ] [ 0 ] ) != total ) { ans = " No " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ i ] [ 0 ] - c [ j ] [ 0 ] == c [ i ] [ 1 ] - c [ j ] [ 1 ] && c [ i ] [ 1 ] - c [ j ] [ 1 ] == c [ i ] [ 2 ] - c [ j ] [ 2 ] ) { } else { b = false ; break loop ; } } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ j ] == c [ 1 ] [ i ] - c [ 1 ] [ j ] && c [ 1 ] [ i ] - c [ 1 ] [ j ] == c [ 2 ] [ i ] - c [ 2 ] [ j ] ) { } else { b = false ; break loop ; } } } if ( b ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i != a + 1 ; i ++ ) { for ( int j = 0 ; j != a + 1 ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int n = sc . nextInt ( ) ; int mini = 200001 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( mini >= p ) count ++ ; mini = ( int ) Math . min ( p , mini ) ; } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j < 0 || s - i - j > k ) { continue ; } cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int h = 0 ; h <= k ; h ++ ) { if ( s - i - h <= k && s >= i + h ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= min ) { cnt ++ ; } if ( p < min ) min = p ; } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = sc . nextInt ( ) ; int [ ] min = new int [ n ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scan . nextInt ( ) ; } } int min = C [ 0 ] [ 0 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( C [ 0 ] [ i ] < min ) min = C [ 0 ] [ i ] ; } int check ; for ( int a1 = 0 ; a1 <= min ; a1 ++ ) { int c11 = C [ 0 ] [ 0 ] - a1 ; int a2 = C [ 1 ] [ 0 ] - c11 ; int a3 = C [ 2 ] [ 0 ] - c11 ; boolean flag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { check = C [ 0 ] [ i ] - a1 ; if ( C [ 1 ] [ i ] - a2 != check || C [ 2 ] [ i ] - a3 != check ) { flag = false ; break ; } } if ( flag == true ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws InterruptedException { Scanner sc = new Scanner ( System . in ) ; int n_customer = sc . nextInt ( ) ; long sold = sc . nextInt ( ) - 1 ; int i = 1 ; int price = 2 ; if ( n_customer > 1 ) { while ( true ) { int money = sc . nextInt ( ) ; if ( money < price ) i ++ ; else if ( money == price ) { price ++ ; i ++ ; } else { if ( money % price == 0 ) { sold += money / price - 1 ; } else { sold += money / price ; } i ++ ; } if ( i == n_customer ) break ; } } System . out . println ( sold ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( min >= p [ i + 1 ] ) { cnt ++ ; min = p [ i + 1 ] ; } } System . out . println ( cnt ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . nextLine ( ) ; StringTokenizer st = new StringTokenizer ( s ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; a ++ ; int original = ( b + 2 ) * ( b + 1 ) / 2 ; if ( b >= a ) { original -= ( b - a + 2 ) * ( b - a + 1 ) * 3 / 2 ; } if ( b >= 2 * a ) { original += ( b - 2 * a + 2 ) * ( b - 2 * a + 1 ) * 3 / 2 ; } System . out . println ( original ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean flag = false ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; flag = true ; for ( int m = 0 ; m < 3 ; m ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ m ] [ k ] != ( a [ m ] + b [ k ] ) ) flag = false ; } } if ( flag ) break ; } System . out . println ( flag ? " Yes " : " No " ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 1000000 ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { c ++ ; min = p [ i ] ; } } System . out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Long > list = new ArrayList < Long > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { list . add ( sc . nextLong ( ) ) ; } for ( int a1 = 0 ; a1 <= list . get ( 0 ) ; a1 ++ ) { List < Long > list2 = new ArrayList < Long > ( ) ; long b1 = list . get ( 0 ) - a1 ; long b2 = list . get ( 1 ) - a1 ; long b3 = list . get ( 2 ) - a1 ; long a2 = list . get ( 4 ) - b2 ; long a3 = list . get ( 8 ) - b3 ; list2 . add ( a1 + b1 ) ; list2 . add ( a1 + b2 ) ; list2 . add ( a1 + b3 ) ; list2 . add ( a2 + b1 ) ; list2 . add ( a2 + b2 ) ; list2 . add ( a2 + b3 ) ; list2 . add ( a3 + b1 ) ; list2 . add ( a3 + b2 ) ; list2 . add ( a3 + b3 ) ; boolean flag = true ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( list . get ( i ) < 0 || list2 . get ( i ) < 0 ) { flag = false ; break ; } if ( ! list . get ( i ) . equals ( list2 . get ( i ) ) ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int z ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z <= K && z >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { resolve ( System . in , System . out ) ; } static void resolve ( InputStream is , PrintStream pw ) { Scanner sc = new Scanner ( is ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int min = p [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pi = p [ i ] ; if ( pi <= min ) { count ++ ; } min = Math . min ( min , pi ) ; } pw . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( min > P [ i ] ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( a [ 0 ] = 0 ; a [ 0 ] < 101 ; a [ 0 ] ++ ) { b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; for ( a [ 1 ] = 0 ; a [ 1 ] < 101 ; a [ 1 ] ++ ) { b [ 1 ] = c [ 1 ] [ 1 ] - a [ 1 ] ; for ( a [ 2 ] = 0 ; a [ 2 ] < 101 ; a [ 2 ] ++ ) { b [ 2 ] = c [ 2 ] [ 2 ] - a [ 2 ] ; boolean ok = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { ok = false ; } } } if ( ok ) { out . println ( " Yes " ) ; return ; } } } } out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( long i = 0 ; i < n - 1 ; i ++ ) { int a = sc . nextInt ( ) ; if ( a <= min ) count ++ ; min = Math . min ( min , a ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int sum = sc . nextInt ( ) ; int ct = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int tmp = sum - i - j ; if ( tmp <= max && tmp >= 0 ) ct ++ ; } } System . out . println ( ct ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int smallest = 200001 ; int counter = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( p [ i ] <= smallest ) { counter ++ ; smallest = p [ i ] ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = in . nextInt ( ) ; } int minZ = p [ 0 ] , cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( minZ >= p [ i ] ) { minZ = p [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { int a = i ; int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; if ( c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 && c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 ) { if ( c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 && c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) { System . out . println ( " Yes " ) ; return ; } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int c3 = sc . nextInt ( ) ; int c4 = sc . nextInt ( ) ; int c5 = sc . nextInt ( ) ; int c6 = sc . nextInt ( ) ; int c7 = sc . nextInt ( ) ; int c8 = sc . nextInt ( ) ; int c9 = sc . nextInt ( ) ; int sum1 = c1 + c5 + c9 ; int sum2 = c1 + c6 + c8 ; int sum3 = c2 + c4 + c9 ; int sum4 = c2 + c6 + c7 ; int sum5 = c3 + c4 + c8 ; int sum6 = c3 + c5 + c7 ; if ( sum1 == sum2 && sum2 == sum3 && sum3 == sum4 && sum4 == sum5 && sum5 == sum6 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] -= grid [ 0 ] [ j ] ; } } boolean ans = false ; if ( grid [ 1 ] [ 0 ] == grid [ 1 ] [ 1 ] && grid [ 1 ] [ 1 ] == grid [ 1 ] [ 2 ] && grid [ 2 ] [ 0 ] == grid [ 2 ] [ 1 ] && grid [ 2 ] [ 1 ] == grid [ 2 ] [ 2 ] ) ans = true ; if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; int start , end ; if ( S < K ) { end = S ; } else { end = K ; } if ( S - 2 * K > 0 ) { start = S - 2 * K ; } else { start = 0 ; } for ( int x = start ; x <= end ; x ++ ) { int temp = S - x ; if ( temp > K ) { count += 2 * K - temp + 1 ; } else { count += temp + 1 ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n = getInput ( ) . get ( 0 ) ; ArrayList < Integer > p = getInput ( ) ; int count = 1 ; int tmin = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { tmin = Math . min ( p . get ( i - 1 ) , tmin ) ; if ( p . get ( i ) <= tmin ) ++ count ; } Print ( count ) ; } private static Scanner scanner = new Scanner ( System . in ) ; private static ArrayList < Integer > getInput ( ) { String in = scanner . nextLine ( ) ; ArrayList < Integer > result = new ArrayList < > ( ) ; for ( String t : in . split ( " " ) ) { result . add ( Integer . parseInt ( t ) ) ; } return result ; } private static void Print ( Object o ) { System . out . println ( o ) ; } private static void Print ( Object ... o ) { for ( Object i : o ) System . out . print ( i ) ; System . out . println ( ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int c = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( min >= p [ i ] ) { c ++ ; } } System . out . println ( c ) ; } }
import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . * ; import java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; HashMap < Integer , Integer > mem = new HashMap < > ( ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int x = Math . min ( s , k ) ; int total = 0 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= x ; j ++ ) { int sum = i + j ; if ( sum <= s && sum + x >= s ) total ++ ; } } System . out . print ( total ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) p [ i ] = sc . nextInt ( ) ; int ans = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; ++ i ) { if ( p [ i ] <= min ) { min = p [ i ] ; ++ ans ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . execute ( ) ; } public void execute ( ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] board = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { board [ i ] [ j ] = sc . nextInt ( ) ; } } if ( check ( board ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } private boolean check ( int [ ] [ ] board ) { if ( board . length != 3 || board [ 0 ] . length != 3 ) { throw new IllegalArgumentException ( ) ; } boolean check = false ; for ( int i = 0 ; i < 100 ; i ++ ) { int a1 = i ; int b1 = board [ 0 ] [ 0 ] - a1 ; int b2 = board [ 0 ] [ 1 ] - a1 ; int b3 = board [ 0 ] [ 2 ] - a1 ; if ( withoutRange ( b1 ) || withoutRange ( b2 ) || withoutRange ( b3 ) ) { continue ; } int a2 = board [ 1 ] [ 0 ] - b1 ; if ( withoutRange ( a2 ) || ( board [ 1 ] [ 1 ] - b2 ) != a2 || ( board [ 1 ] [ 2 ] - b3 ) != a2 ) { continue ; } int a3 = board [ 2 ] [ 0 ] - b1 ; if ( withoutRange ( a3 ) || ( board [ 2 ] [ 1 ] - b2 ) != a3 || ( board [ 2 ] [ 2 ] - b3 ) != a3 ) { continue ; } check = true ; break ; } return check ; } private boolean withoutRange ( int x ) { return ( x < 0 && x > 100 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; Scanner sc = new Scanner ( System . in ) ; main . solve ( sc ) ; sc . close ( ) ; } void solve ( Scanner sc ) { int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y <= K && S >= x + y ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { c [ i ] [ k ] = Integer . parseInt ( scan . next ( ) ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; ++ i ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } boolean ok = true ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { if ( c [ i ] [ k ] != x [ i ] + y [ k ] ) { ok = false ; } } } System . out . print ( ok ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { sum = S - ( i + j ) ; if ( 0 <= sum && sum <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 200001 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { ans += 1 ; min = p ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scanner . nextInt ( ) ; } } int temp2 = map [ 0 ] [ 1 ] - map [ 0 ] [ 0 ] ; int temp3 = map [ 0 ] [ 2 ] - map [ 0 ] [ 0 ] ; if ( map [ 1 ] [ 1 ] - map [ 1 ] [ 0 ] == temp2 && map [ 2 ] [ 1 ] - map [ 2 ] [ 0 ] == temp2 && map [ 1 ] [ 2 ] - map [ 1 ] [ 0 ] == temp3 && map [ 2 ] [ 2 ] - map [ 2 ] [ 0 ] == temp3 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int A = 0 ; int B = 0 ; int C ; int [ ] [ ] Card = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { Card [ i ] [ j ] = scan . nextInt ( ) ; } } A = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 1 ] ; B = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 2 ] ; C = Card [ 0 ] [ 1 ] - Card [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( A != Card [ i ] [ 0 ] - Card [ i ] [ 1 ] || B != Card [ i ] [ 0 ] - Card [ i ] [ 2 ] || C != Card [ i ] [ 1 ] - Card [ i ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( 0 <= z && z <= K ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] sum = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean jdg = true ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 0 ] = 0 ; a [ 1 ] = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { jdg = false ; break ; } } } if ( jdg ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= s ; x ++ ) { if ( x <= k ) { for ( int y = 0 ; y <= s - x ; y ++ ) { if ( y <= k && s - x - y <= k ) { count += 1 ; } } } } System . out . println ( String . valueOf ( count ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; Integer n = scan . nextInt ( ) ; ArrayList < Integer > array = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) array . add ( scan . nextInt ( ) ) ; int min = array . get ( 0 ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array . get ( i ) < min ) { min = array . get ( i ) ; count ++ ; } } System . out . println ( count + 1 ) ; } static int factorial ( int n ) { if ( n == 0 ) { return 1 ; } return n * factorial ( n - 1 ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - i - j <= k ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } out ( count ) ; } static long gcd ( long a , long b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static int gcd ( int a , int b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static void out ( String info ) { System . out . println ( info ) ; } static void out ( int info ) { System . out . println ( info ) ; } static void out ( double info ) { System . out . println ( info ) ; } static void out ( long info ) { System . out . println ( info ) ; } }
import java . util . Scanner ; public class Main implements Runnable { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , " " , 128 * 1024 * 1024 ) . start ( ) ; } public void run ( ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int a1 , a2 , a3 , b1 , b2 , b3 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } a1 = Math . min ( c [ 0 ] [ 0 ] , Math . min ( c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ) ) ; a2 = Math . min ( c [ 1 ] [ 0 ] , Math . min ( c [ 1 ] [ 1 ] , c [ 1 ] [ 2 ] ) ) ; a3 = Math . min ( c [ 2 ] [ 0 ] , Math . min ( c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] ) ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int min = i == 0 ? a1 : i == 1 ? a2 : a3 ; c [ i ] [ j ] -= min ; } } for ( int j = 0 ; j < 3 ; j ++ ) { int tmp = c [ 0 ] [ j ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( c [ i ] [ j ] != tmp ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . PriorityQueue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int n = sc . nextInt ( ) ; PriorityQueue < Integer > q = new PriorityQueue < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int now = sc . nextInt ( ) ; q . add ( now ) ; if ( now == q . peek ( ) ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { static int ans = 1 ; static int min ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( sc . next ( ) ) ; } min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { check ( n , a , i ) ; } System . out . println ( ans ) ; } public static void check ( int n , int [ ] a , int i ) { if ( a [ i ] < min ) { min = a [ i ] ; ans ++ ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] [ ] c2 = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; c2 [ i ] [ j ] = c [ i ] [ j ] ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] [ 2 ] -= c [ i ] [ 0 ] ; c [ i ] [ 1 ] -= c [ i ] [ 0 ] ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ 0 ] [ i + 1 ] != c [ 1 ] [ i + 1 ] || c [ 2 ] [ i + 1 ] != c [ 1 ] [ i + 1 ] ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c2 [ 2 ] [ i ] -= c2 [ 0 ] [ i ] ; c2 [ 1 ] [ i ] -= c2 [ 0 ] [ i ] ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( c2 [ i + 1 ] [ 0 ] != c2 [ i + 1 ] [ 1 ] || c2 [ i + 1 ] [ 2 ] != c2 [ i + 1 ] [ 1 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String result = " Yes " ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = arr [ 0 ] [ i ] - a [ 0 ] ; a [ i ] = arr [ i ] [ 0 ] - b [ 0 ] ; } l : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != arr [ i ] [ j ] ) { result = " No " ; break l ; } } } System . out . println ( result ) ; } }
import java . util . * ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Iterator < String > sc ) { int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int sum = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { int remaining = S - x ; sum += Math . max ( Math . min ( remaining , K ) - Math . max ( remaining - K , 0 ) + 1 , 0 ) ; } System . out . println ( sum ) ; } } class Main { public static void main ( String ... args ) { Solver . INSTANCE . solve ( new Scanner ( System . in ) ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - ( i + j ) >= 0 && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int min = 10000000 ; int count = 0 ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; if ( min >= p [ i ] ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; stdIn . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < list . length ; i ++ ) { list [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < list . length ; i ++ ) { if ( min >= list [ i ] ) { min = list [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int min = 1_000_000_000 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( P [ i ] , min ) ; if ( min >= P [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( n - i - j <= k && n - i - j >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( in . readLine ( ) ) ; String [ ] str = in . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; int min = 100000 * 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( str [ i ] ) ; min = Math . min ( p [ i ] , min ) ; if ( p [ i ] <= min ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int a [ ] = new int [ N ] ; int nowp = 1 ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == nowp ) { nowp ++ ; continue ; } if ( a [ i ] < nowp ) { continue ; } if ( a [ i ] % nowp == 0 || nowp == 1 ) { ans = ans + a [ i ] / nowp - 1 ; if ( nowp == 1 ) { nowp ++ ; } } else { ans = ans + a [ i ] / nowp ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int r = n ; int max = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { r -- ; } else { max = p [ i ] ; } } System . out . println ( r ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; public class Main { static int n ; static ArrayList < ArrayList < Integer > > edge ; static boolean used [ ] ; static boolean flag = false ; static int ans ; public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; n = Integer . parseInt ( br . readLine ( ) ) ; String str [ ] = br . readLine ( ) . split ( " " ) ; int a [ ] = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( str [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( a [ i ] , min ) ; if ( min < a [ i ] ) { } else { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] && c [ 1 ] [ 2 ] == c [ 1 ] [ 0 ] + c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 1 ] == c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 2 ] == c [ 2 ] [ 0 ] + c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static int lcm ( int x , int y ) { return x * y / gcd ( x , y ) ; } public static int gcd ( int x , int y ) { if ( x < y ) return gcd ( y , x ) ; if ( y == 0 ) return x ; return gcd ( y , x % y ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= K ; ++ j ) { int res = S - i - j ; if ( 0 <= res && res <= K ) ++ ans ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z <= k && z >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { int X = i ; for ( int j = 0 ; j <= K ; j ++ ) { int Y = j ; if ( S - X - Y >= 0 && S - X - Y <= K ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = a [ 0 ] [ i ] ; x [ 1 ] = a [ 1 ] [ 0 ] - y [ 0 ] ; x [ 2 ] = a [ 2 ] [ 0 ] - y [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int N = gi ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE ; int c = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = gi ( ) ; if ( min > P [ i ] ) { min = P [ i ] ; c ++ ; } } System . out . println ( c ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = s . nextInt ( ) ; } } int flag = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ) != ( arr [ i + 1 ] [ 0 ] - arr [ i + 1 ] [ 1 ] ) ) flag = 1 ; if ( ( arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ) != ( arr [ i + 1 ] [ 1 ] - arr [ i + 1 ] [ 2 ] ) ) flag = 1 ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ 0 ] [ i ] - arr [ 1 ] [ i ] ) != ( arr [ 0 ] [ i + 1 ] - arr [ 1 ] [ i + 1 ] ) ) flag = 1 ; if ( ( arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ) != ( arr [ 1 ] [ i + 1 ] - arr [ 2 ] [ i + 1 ] ) ) flag = 1 ; } if ( flag != 0 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { for ( int j = 0 ; j <= a ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { private static void p ( Object x ) { System . out . println ( x ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } p ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scan . nextInt ( ) ; } } int min = C [ 0 ] [ 0 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( C [ 0 ] [ i ] < min ) min = C [ 0 ] [ i ] ; } int check ; for ( int a1 = 0 ; a1 <= min ; a1 ++ ) { int c11 = C [ 0 ] [ 0 ] - a1 ; int a2 = C [ 1 ] [ 0 ] - c11 ; int a3 = C [ 2 ] [ 0 ] - c11 ; boolean flag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { check = C [ 0 ] [ i ] - a1 ; if ( C [ 1 ] [ i ] - a2 != check || C [ 2 ] [ i ] - a3 != check ) { flag = false ; break ; } } if ( flag == true ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 == 0 && sum / 3 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . * ; import java . util . * ; import java . math . * ; public class Main { FastReader sc ; void solve ( ) throws IOException { int n = sc . ni ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . ni ( ) ; } int min = a [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= min ) ans ++ ; min = Math . min ( min , a [ i ] ) ; } System . out . println ( ans ) ; } Main ( ) { try { sc = new FastReader ( ) ; } catch ( Exception e ) { System . out . println ( e ) ; } } public static void main ( String [ ] args ) throws IOException { new Main ( ) . solve ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { System . out . println ( e ) ; } } FastReader ( String s ) { try { br = new BufferedReader ( new FileReader ( s ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { System . out . println ( e ) ; } } String ns ( ) { if ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { System . out . println ( e ) ; } } return st . nextToken ( ) ; } int ni ( ) { return Integer . parseInt ( ns ( ) ) ; } long nl ( ) { return Long . parseLong ( ns ( ) ) ; } double nd ( ) { return Double . parseDouble ( ns ( ) ) ; } } }
import java . util . * ; import java . io . * ; import java . nio . charset . StandardCharsets ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; Main ins = new Main ( in ) ; ins . calc ( ) ; ins . showResult ( ) ; } int [ ] [ ] c ; Main ( BufferedReader in ) throws IOException { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { String [ ] tokens = in . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = Integer . parseInt ( tokens [ j ] ) ; } } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { c [ j ] [ i ] -= c [ 0 ] [ i ] ; } } for ( int i = 0 ; i < 3 ; ++ i ) { c [ 0 ] [ i ] = 0 ; } boolean enable = true ; for ( int i = 0 ; i < 3 ; ++ i ) { boolean cond = true ; for ( int j = 1 ; j < 3 ; ++ j ) { if ( c [ i ] [ j ] != c [ i ] [ 0 ] ) { cond = false ; } } if ( ! cond ) { enable = false ; break ; } } System . out . println ( ( enable ? " Yes " : " No " ) ) ; } void calc ( ) { } void showResult ( ) { } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int total = 0 ; int [ ] num = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; total += num [ i ] ; } int nextTotal1 = num [ 0 ] + num [ 1 ] + num [ 3 ] + num [ 4 ] ; int nextTotal2 = num [ 4 ] + num [ 5 ] + num [ 7 ] + num [ 8 ] ; int nextTotal3 = num [ 1 ] + num [ 2 ] + num [ 4 ] + num [ 5 ] ; int nextTotal4 = num [ 3 ] + num [ 4 ] + num [ 6 ] + num [ 7 ] ; int nextTotal5 = num [ 0 ] + num [ 2 ] + num [ 6 ] + num [ 8 ] ; if ( total % 3 == 0 && nextTotal1 % 2 == 0 && nextTotal1 % 2 == 0 && nextTotal3 % 2 == 0 && nextTotal4 % 2 == 0 && nextTotal5 % 2 == 0 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] rx = new int [ 3 ] ; int [ ] ry = new int [ 3 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } ry [ 0 ] = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { rx [ j ] = c [ 0 ] [ j ] - ry [ 0 ] ; } for ( int j = 1 ; j < 3 ; j ++ ) { ry [ j ] = c [ j ] [ 0 ] - rx [ 0 ] ; } outside : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( rx [ j ] + ry [ i ] != c [ i ] [ j ] ) { flag = false ; System . out . println ( " No " ) ; break outside ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < X ; i ++ ) { ans = 2 * ans + 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) { c [ i ] = sc . nextInt ( ) ; } int d1 = c [ 1 ] - c [ 0 ] ; int d2 = c [ 2 ] - c [ 1 ] ; String ans = " Yes " ; if ( c [ 4 ] != c [ 3 ] + d1 ) { ans = " No " ; } if ( c [ 7 ] != c [ 6 ] + d1 ) { ans = " No " ; } if ( c [ 5 ] != c [ 4 ] + d2 ) { ans = " No " ; } if ( c [ 8 ] != c [ 7 ] + d2 ) { ans = " No " ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] line = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( line [ 0 ] ) ; int S = Integer . parseInt ( line [ 1 ] ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int target = S - x - y ; if ( target >= 0 && target <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; boolean good = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) good = false ; } } System . out . println ( good ? " Yes " : " No " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { ans ++ ; } min = Math . min ( min , p [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { min = p [ i ] ; count ++ ; } else if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean flag = true ; for ( int j = 0 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] [ j ] = in . nextInt ( ) ; } } int sa1 = a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] ; int sa2 = a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] ; int sa3 = a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] ; int sa21 = a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] ; int sa22 = a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] ; int sa23 = a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] ; int sa31 = a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] ; int sa32 = a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; int sa33 = a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] ; if ( sa1 == sa2 && sa1 == sa3 ) { if ( sa21 == sa22 && sa21 == sa23 ) { if ( sa31 == sa32 && sa31 == sa33 ) { flag = true ; } else { flag = false ; } } else { flag = false ; } } else { flag = false ; } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < Integer > list = new TreeSet < Integer > ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { try ( Scanner sc = new Scanner ( System . in ) ) { int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } long ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( min >= P [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int X = 0 , Y = 0 , Z = 0 ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { X = i ; Y = j ; Z = S - X - Y ; int total = X + Y + Z ; if ( total == S && Z >= 0 && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int [ ] sum = new int [ 6 ] ; sum [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; sum [ 1 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; sum [ 2 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; sum [ 3 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ; sum [ 4 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; sum [ 5 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; boolean takahashi = true ; for ( int i = 1 ; i < 6 ; i ++ ) { if ( sum [ 0 ] != sum [ i ] ) { takahashi = false ; break ; } } if ( takahashi ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; in . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int P [ ] = new int [ N ] ; int sum = 1 ; boolean flag = true ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int pre_min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { flag = true ; if ( P [ i ] < pre_min ) { sum += 1 ; pre_min = P [ i ] ; } } System . out . print ( sum ) ; } }
import java . util . Scanner ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int m = n ; int a = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = Integer . parseInt ( sc . next ( ) ) ; m = Math . min ( m , c ) ; if ( m >= c ) { a += 1 ; } } System . out . println ( a ) ; } }
import java . io . File ; import java . io . IOException ; import java . lang . reflect . Array ; import java . util . * ; import java . util . Map . Entry ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; boolean ans = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } if ( ! ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] && c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) ) { ans = " No " ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , s = sc . nextInt ( ) , t = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= K ) t ++ ; } } System . out . println ( t ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; ++ x ) { for ( int y = 0 ; y <= k ; ++ y ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; bw . flush ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) { if ( p [ j ] < min ) { min = p [ j ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Map < String , Integer > minMap = new HashMap < > ( ) ; final String MIN = " min " ; int [ ] numList = new int [ 220000 ] ; for ( int i = 0 ; i < N ; i ++ ) { numList [ i ] = Integer . parseInt ( sc . next ( ) ) ; } minMap . put ( MIN , numList [ 0 ] ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList [ i ] <= minMap . get ( MIN ) ) { minMap . put ( MIN , numList [ i ] ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { int [ ] [ ] c ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } } void solve ( ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int min = Math . min ( c [ 0 ] [ 0 ] , Math . min ( c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ) ) ; for ( int i = 0 ; i <= min ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 1 ] - b [ 1 ] ; check : for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) break check ; if ( j == 2 && k == 2 ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } } } System . out . println ( " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] permutaion = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { permutaion [ i ] = in . nextInt ( ) ; } int min = permutaion [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( permutaion [ i ] <= min ) { ans ++ ; min = permutaion [ i ] ; } } System . out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] intArray = new int [ n ] ; int count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { intArray [ i ] = sc . nextInt ( ) ; } int min = intArray [ 0 ] ; for ( int i = 1 ; i < intArray . length ; i ++ ) { if ( min > intArray [ i ] ) { min = intArray [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static final PrintStream out = System . out ; static final Scanner sc = new Scanner ( System . in ) ; static final long Mod = 1000_000_007L ; int N ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; System . exit ( 0 ) ; } void solve ( ) { N = nextInt ( ) ; int [ ] P = nextIntArray ( N ) ; int cnt = 1 , min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { cnt ++ ; min = P [ i ] ; } } out . println ( cnt ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { return sc . next ( ) ; } long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } long lcm ( long m , long n ) { return m * n / gcd ( m , n ) ; } }
import java . util . * ; class Main { final Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } private void run ( ) { int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( min > p ) ans ++ ; min = Math . min ( p , min ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = ( int ) 1e9 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( ; sc . hasNext ( ) ; ) { arr . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = arr . get ( 0 ) ; for ( int num : arr ) { if ( num <= min ) { count ++ ; min = num ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String W = in . readLine ( ) ; int N = Integer . parseInt ( W ) ; W = in . readLine ( ) ; String [ ] Ws = W . split ( " " ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = Integer . parseInt ( Ws [ i ] ) ; } int ans = 0 ; int Pj = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { ans ++ ; Pj = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 || c [ 1 ] [ 1 ] - b2 != c [ 1 ] [ 2 ] - b3 ) { continue ; } if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 || c [ 2 ] [ 1 ] - b2 != c [ 2 ] [ 2 ] - b3 ) { continue ; } System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = c [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scan . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( list ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( list . get ( i ) <= min ) { min = list . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int m = n + 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( m >= p [ i ] ) { count ++ ; m = p [ i ] ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = scan . nextInt ( ) ; int out = 1 ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , Math . min ( p [ i ] , p [ i - 1 ] ) ) ; if ( min >= p [ i ] ) out ++ ; } System . out . println ( out ) ; scan . close ( ) ; } }
import java . util . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String result = " No " ; for ( int a1 = - 200 ; a1 <= 200 ; a1 ++ ) { boolean bool = true ; int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; int a3 = c [ 2 ] [ 0 ] - b1 ; if ( c [ 1 ] [ 1 ] != a2 + b2 ) bool = false ; if ( c [ 1 ] [ 2 ] != a2 + b3 ) bool = false ; if ( c [ 2 ] [ 1 ] != a3 + b2 ) bool = false ; if ( c [ 2 ] [ 2 ] != a3 + b3 ) bool = false ; if ( bool ) { result = " Yes " ; break ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; boolean gg = true ; Integer [ ] array = new Integer [ n ] ; int a = 1 ; int b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = s . nextInt ( ) ; if ( i != 0 ) { if ( array [ i ] < b ) { b = array [ i ] ; a ++ ; } else { } } else { b = array [ i ] ; } } System . out . print ( a ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; long sum = 0 ; int check = s - 2 * k ; int initial = ( int ) Math . max ( 0 , check ) ; for ( int i = initial ; i <= k ; i ++ ) { int current = s - i ; int start = 0 ; int end = k ; if ( current > 2 * k ) { continue ; } else if ( current > k ) { start = current - k ; sum += end - start + 1 ; } else if ( current >= 0 ) { end = current ; sum += end - start + 1 ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; class Main { int k ; int s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void solve ( ) { int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) <= k ) && ( s - ( x + y ) >= 0 ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) { res ++ ; } } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int sum = 0 ; int min = 999999999 ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; if ( min >= x [ i ] ) sum ++ ; if ( x [ i ] < min ) min = x [ i ] ; } System . out . print ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int pm = 1000000 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= pm ) { ans ++ ; pm = p ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; Integer count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - ( i + j ) ; if ( 0 <= z && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 0 ; int o = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( o > p ) { c ++ ; o = p ; } } System . out . println ( c ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] p = IntStream . range ( 0 , sc . nextInt ( ) ) . map ( e -> sc . nextInt ( ) ) . toArray ( ) ; int temp = p [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] <= temp ) { ans ++ ; temp = p [ i ] ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str [ ] = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( str [ 0 ] ) ; int s = Integer . parseInt ( str [ 1 ] ) ; int result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; } int sum1 , sum2 , sum3 , sum4 ; sum1 = a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] ; sum2 = a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 2 ] [ 0 ] ; sum3 = a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 0 ] [ 2 ] ; if ( sum1 == sum2 && sum2 == sum3 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int k = stdIn . nextInt ( ) ; int s = stdIn . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; PriorityQueue < Integer > q = new PriorityQueue < Integer > ( ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; q . add ( P ) ; if ( q . peek ( ) == P ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] permutations = new int [ n + 1 ] ; int min = n ; int [ ] mins = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { permutations [ i ] = sc . nextInt ( ) ; if ( i == 1 ) { min = permutations [ 1 ] ; } min = Math . min ( min , permutations [ i ] ) ; mins [ i ] = min ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( permutations [ i ] == mins [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int c = 0 ; c < n ; c ++ ) { p [ c ] = sc . nextInt ( ) ; } int ans = 0 ; int c = p [ 0 ] ; for ( int d = 0 ; d < n - 1 ; d ++ ) { if ( c < p [ d + 1 ] ) { ans ++ ; } c = Math . min ( c , p [ d + 1 ] ) ; } System . out . println ( n - ans ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ ] ; for ( int i = 0 ; i < 3 ; i ++ ) arr [ i ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = scan . nextInt ( ) ; } int [ ] diff = new int [ 9 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) diff [ i * 3 + j ] = arr [ i ] [ j ] - arr [ i ] [ ( j + 1 ) % 3 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { if ( diff [ i ] != diff [ i + 3 ] || diff [ i + 3 ] != diff [ i + 6 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { try { while ( st == null || ! st . hasMoreElements ( ) ) { st = new StringTokenizer ( br . readLine ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { String s = " " ; try { s = br . readLine ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return s ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) cnt ++ ; } } out . println ( cnt ) ; out . flush ( ) ; out . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { void solve ( ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int out = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) out ++ ; } } System . out . println ( out ) ; scan . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { private static final PrintStream so = System . out ; private static final Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } so . println ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { public void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } long ans = 0 ; int min = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int buy = 0 ; if ( a [ i ] % min == 0 ) { buy = ( a [ i ] - 1 ) / min ; } else { buy = a [ i ] / min ; } ans += buy ; a [ i ] -= buy * min ; if ( a [ i ] == min && ( buy == 0 || min == 1 ) ) { min ++ ; } } out . println ( ans ) ; } public void run ( ) { in = new FastScanner ( ) ; out = new PrintWriter ( System . out ) ; solve ( ) ; out . close ( ) ; } FastScanner in ; PrintWriter out ; class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( String fileName ) { try { br = new BufferedReader ( new FileReader ( fileName ) ) ; } catch ( FileNotFoundException e ) { } } public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String nextToken ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b = true ; b &= a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; System . out . println ( b ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ 0 ] [ i ] = sc . nextInt ( ) ; c [ 1 ] [ i ] = sc . nextInt ( ) ; c [ 2 ] [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ i - 1 ] [ j - 1 ] - c [ i ] [ j - 1 ] != c [ i - 1 ] [ j ] - c [ i ] [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum - n ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum - n ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; max = Math . max ( c [ i ] [ j ] , max ) ; } } for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { for ( int k = 0 ; k <= max ; k ++ ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == j - i && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == j - k ) { if ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == j - i && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == j - k ) { if ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] == j - i && c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == j - k ) { System . out . println ( " Yes " ) ; return ; } } } } } } System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = 200000 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; min = Math . min ( min , P ) ; if ( min == P ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] min = new long [ n ] ; int count = 1 ; min [ 0 ] = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long p = sc . nextLong ( ) ; if ( p <= min [ i - 1 ] ) { min [ i ] = p ; count ++ ; } else { min [ i ] = min [ i - 1 ] ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { Scanner sc ; int N ; int [ ] P ; private void calc ( ) { sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int c = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) c ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( c ) ; } public static void main ( String [ ] args ) { new Main ( ) . calc ( ) ; } }
import java . util . * ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; long count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { if ( x == S ) { count ++ ; break ; } if ( x > S ) { break ; } if ( x + K + K < S ) { continue ; } for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y == S ) { count ++ ; break ; } if ( x + y > S ) { break ; } if ( x + y + K < S ) { continue ; } count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static final int MOD = 1000000007 ; public static ArrayList < Integer > list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int n = parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = parseInt ( sc . next ( ) ) ; } sc . close ( ) ; int cnt = 0 ; int mn = 200001 ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= mn ) { cnt ++ ; mn = p [ i ] ; } } out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i != a + 1 ; i ++ ) { for ( int j = 0 ; j != a + 1 ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int stack ; int start = 0 ; if ( s - 2 * k > 0 ) start = s - 2 * k ; int end = k ; if ( s < k ) end = s ; for ( int x = 0 ; x <= k ; x ++ ) { stack = s - x ; if ( stack <= 2 * k && stack >= 0 ) { if ( stack <= k ) count += stack + 1 ; else count += k - ( stack - k ) + 1 ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] tmpArray = br . readLine ( ) . split ( " " ) ; int [ ] low = new int [ n ] ; int result = 1 ; low [ 0 ] = Integer . parseInt ( tmpArray [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = Integer . parseInt ( tmpArray [ i ] ) ; if ( tmp > low [ i - 1 ] ) { low [ i ] = low [ i - 1 ] ; } else { low [ i ] = tmp ; result ++ ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int ans = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) { ans += 1 ; } if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) { ans += 1 ; } if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) { ans += 1 ; } if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) { ans += 1 ; } if ( ans == 4 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; long sum = 0 ; long cnt = 2 ; long a = scan . nextLong ( ) ; if ( a >= 2 ) { sum += a - 1 ; } for ( int i = 1 ; i < n ; i ++ ) { a = scan . nextLong ( ) ; long b = a / cnt ; if ( cnt == a ) { cnt ++ ; b = 0 ; } else if ( a % cnt == 0 ) { b -- ; } sum += b ; } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; if ( c [ 3 ] - c [ 0 ] == c [ 4 ] - c [ 1 ] && c [ 3 ] - c [ 0 ] == c [ 5 ] - c [ 2 ] && c [ 6 ] - c [ 3 ] == c [ 7 ] - c [ 4 ] && c [ 6 ] - c [ 3 ] == c [ 8 ] - c [ 5 ] && c [ 1 ] - c [ 0 ] == c [ 4 ] - c [ 3 ] && c [ 1 ] - c [ 0 ] == c [ 7 ] - c [ 6 ] && c [ 2 ] - c [ 1 ] == c [ 5 ] - c [ 4 ] && c [ 2 ] - c [ 1 ] == c [ 8 ] - c [ 7 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int tmp = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( tmp > p [ i ] ) { tmp = p [ i ] ; count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int z ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 , min = n , p ; i < n ; i ++ ) { p = sc . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] g = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { g [ i ] [ 0 ] = sc . nextInt ( ) ; g [ i ] [ 1 ] = sc . nextInt ( ) ; g [ i ] [ 2 ] = sc . nextInt ( ) ; } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( g [ i ] [ j ] - g [ i + 1 ] [ j ] != g [ i ] [ j + 1 ] - g [ i + 1 ] [ j + 1 ] ) { ans = false ; break ; } if ( g [ i ] [ j ] - g [ i ] [ j + 1 ] != g [ i + 1 ] [ j ] - g [ i + 1 ] [ j + 1 ] ) { ans = false ; break ; } } } if ( ans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; import static java . lang . System . in ; public class Main { ArrayList < Integer > [ ] graph ; HashSet < Integer > cycle ; int [ ] prev ; PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) throws Exception { Main main = new Main ( ) ; System . out . println ( main . solve ( ) ) ; } long solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long ans = 0 ; int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= mini ) ans += 1 ; mini = Math . min ( mini , a [ i ] ) ; } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( ( s - i - j ) <= k && ( s - i - j ) >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int map [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int h = 0 ; h < 3 ; h ++ ) { for ( int w = 0 ; w < 3 ; w ++ ) { map [ h ] [ w ] = sc . nextInt ( ) ; } } int dw1 = map [ 0 ] [ 1 ] - map [ 0 ] [ 0 ] ; if ( dw1 != map [ 1 ] [ 1 ] - map [ 1 ] [ 0 ] || dw1 != map [ 2 ] [ 1 ] - map [ 2 ] [ 0 ] ) { answer ( false ) ; return ; } int dw2 = map [ 0 ] [ 2 ] - map [ 0 ] [ 1 ] ; if ( dw2 != map [ 1 ] [ 2 ] - map [ 1 ] [ 1 ] || dw2 != map [ 2 ] [ 2 ] - map [ 2 ] [ 1 ] ) { answer ( false ) ; return ; } int dh1 = map [ 1 ] [ 0 ] - map [ 0 ] [ 0 ] ; if ( dh1 != map [ 1 ] [ 1 ] - map [ 0 ] [ 1 ] || dh1 != map [ 1 ] [ 2 ] - map [ 0 ] [ 2 ] ) { answer ( false ) ; return ; } int dh2 = map [ 2 ] [ 0 ] - map [ 1 ] [ 0 ] ; if ( dh2 != map [ 2 ] [ 1 ] - map [ 1 ] [ 1 ] || dh2 != map [ 2 ] [ 2 ] - map [ 1 ] [ 2 ] ) { answer ( false ) ; return ; } answer ( true ) ; } private static void answer ( boolean ans ) { if ( ans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int min = p [ 0 ] ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { min = p [ i ] ; sum = sum + 1 ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( 0 <= num && num <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int p = in . nextInt ( ) ; if ( p <= min ) { min = p ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int PjMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = sc . nextInt ( ) ; if ( Pi <= PjMin ) { count ++ ; } if ( PjMin >= Pi ) { PjMin = Pi ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { new Solver ( ) . run ( ) ; } } class Solver { public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; return ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = sc . nextInt ( ) ; int ans = 1 ; int tmp = b [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( tmp > b [ i ] ) { tmp = b [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - x - y >= 0 ) && ( s - x - y <= k ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Stack ; public class Main { final int [ ] [ ] dir = { { - 1 , - 1 } , { - 1 , 1 } , { 1 , - 1 } , { 1 , 1 } } ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = readInt ( sc ) ; int s = readInt ( sc ) ; int cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - a - b ; if ( c >= 0 && c <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } static int readInt ( Scanner sc ) { return Integer . parseInt ( sc . next ( ) ) ; } static double calcDistance ( Pair p1 , Pair p2 ) { return Math . pow ( Math . pow ( p1 . getX ( ) - p2 . getX ( ) , 2 ) + Math . pow ( p1 . getY ( ) - p2 . getY ( ) , 2 ) , 0.5 ) ; } } class Pair { private int x ; private int y ; public int getX ( ) { return x ; } public void setX ( int x ) { this . x = x ; } public int getY ( ) { return y ; } public void setY ( int y ) { this . y = y ; } public Pair ( ) { } public Pair ( int x , int y ) { this . x = x ; this . y = y ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = stdIn . nextInt ( ) ; } int count = 1 ; int min = a [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( a [ i ] > min ) { } else { count ++ ; min = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) throws Exception { Main main = new Main ( ) ; } public Main ( ) { Scanner scanner = new Scanner ( System . in ) ; int N ; N = Integer . parseInt ( scanner . next ( ) ) ; int min = Integer . MAX_VALUE ; int result = 0 , in ; for ( int i = 0 ; i < N ; i ++ ) { in = Integer . parseInt ( scanner . next ( ) ) ; if ( min >= in ) { result ++ ; min = in ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; } if ( ( ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) ) && ( ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 3 ] [ 2 ] - c [ 3 ] [ 1 ] ) ) && ( ( c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] ) == ( c [ 2 ] [ 3 ] - c [ 2 ] [ 2 ] ) ) && ( ( c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] ) == ( c [ 3 ] [ 3 ] - c [ 3 ] [ 2 ] ) ) && ( ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) ) && ( ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 3 ] - c [ 1 ] [ 3 ] ) ) && ( ( c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 3 ] [ 2 ] - c [ 2 ] [ 2 ] ) ) && ( ( c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 3 ] [ 3 ] - c [ 2 ] [ 3 ] ) ) ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; return ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 1000000 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] < min ) { ans ++ ; } min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] t = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( t [ 0 ] ) ; int S = Integer . parseInt ( t [ 1 ] ) ; int count = 0 ; br : for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( 0 <= k && k <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int count = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { new Solution ( ) ; } } class Solution { Scanner scanner ; public Solution ( ) { scanner = new Scanner ( System . in ) ; while ( scanner . hasNext ( ) ) { run_case ( ) ; } } private void run_case ( ) { scanner . nextLine ( ) ; String line = scanner . nextLine ( ) ; int [ ] arr = strToIntArray ( line ) ; int res = 0 ; TreeMap < Integer , Integer > map = new TreeMap < > ( ) ; for ( int u : arr ) { map . put ( u , 1 ) ; if ( map . lowerKey ( u ) == null ) res ++ ; } System . out . println ( res ) ; return ; } private int [ ] strToIntArray ( String str ) { String [ ] vals = str . split ( " \\ s+ " ) ; int sz = vals . length ; int [ ] res = new int [ sz ] ; for ( int i = 0 ; i < sz ; i ++ ) { res [ i ] = Integer . parseInt ( vals [ i ] ) ; } return res ; } }
import java . io . * ; import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int lo = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = input . nextInt ( ) ; if ( x <= lo ) { cnt ++ ; lo = x ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int a = c11 - c21 ; int b = c12 - c22 ; int d = c13 - c23 ; int e = c21 - c31 ; int f = c22 - c32 ; int g = c23 - c33 ; if ( a == b & b == d & e == f & f == g ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { StringTokenizer st ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String temp = br . readLine ( ) ; int n = Integer . parseInt ( temp ) ; temp = br . readLine ( ) ; st = new StringTokenizer ( temp , " " ) ; int [ ] a = new int [ n ] ; int j = 0 ; int min = n + 1 ; int ans = 0 ; while ( st . hasMoreTokens ( ) ) { a [ j ] = Integer . parseInt ( st . nextToken ( ) ) ; if ( a [ j ] < min ) { min = a [ j ] ; ans ++ ; } j ++ ; } br . close ( ) ; System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; if ( a [ i ] [ j ] > max ) { max = a [ i ] [ j ] ; } } } String f = " Yes " ; x [ 0 ] = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { y [ j ] = a [ 0 ] [ j ] - x [ 0 ] ; } for ( int j = 0 ; j < 3 ; j ++ ) { x [ j ] = a [ j ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] != x [ i ] + y [ j ] ) { f = " No " ; } } } System . out . println ( f ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long cnt = 1 ; long t = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long m = sc . nextLong ( ) ; if ( t > m ) { cnt ++ ; t = m ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = - 100 ; i <= 100 ; i ++ ) { for ( int j = - 100 ; j <= 100 ; j ++ ) { for ( int k = - 100 ; k <= 100 ; k ++ ) { int [ ] b = new int [ 3 ] ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 1 ] [ 1 ] - j ; b [ 2 ] = c [ 2 ] [ 2 ] - k ; if ( i + b [ 0 ] == c [ 0 ] [ 0 ] && i + b [ 1 ] == c [ 0 ] [ 1 ] && i + b [ 2 ] == c [ 0 ] [ 2 ] && j + b [ 0 ] == c [ 1 ] [ 0 ] && j + b [ 1 ] == c [ 1 ] [ 1 ] && j + b [ 2 ] == c [ 1 ] [ 2 ] && k + b [ 0 ] == c [ 2 ] [ 0 ] && k + b [ 1 ] == c [ 2 ] [ 1 ] && k + b [ 2 ] == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; Long result = 0L ; int k = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int a = in . nextInt ( ) ; if ( i == 0 ) { result += a - 1 ; k ++ ; } else { if ( a == k ) { k ++ ; } else { result += ( a - 1 ) / k ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long n = input . nextLong ( ) ; long s = f ( n ) ; System . out . println ( s ) ; } private static long f ( long n ) { if ( n == 0 ) return 2 ; return ( f ( n - 1 ) * 2 ) + 2 ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ABC051_B solver = new ABC051_B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ABC051_B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int l = s - ( i + j ) ; if ( l >= 0 && l <= k ) ++ counter ; else continue ; ; } } out . println ( counter ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int max = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( max > p ) { ans ++ ; max = p ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - a - b ; if ( 0 <= c && c <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , s - 2 * k ) ; x <= Math . min ( k , s ) ; x ++ ) { ans += Math . max ( Math . min ( k , s - x ) - Math . max ( 0 , s - x - k ) + 1 , 0 ) ; } out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; try { long k = scanner . nextLong ( ) ; long s = scanner . nextLong ( ) ; long ans = 0 ; for ( long x = 0 ; x <= k ; x ++ ) { for ( long y = 0 ; y <= k ; y ++ ) { long z = s - x - y ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } finally { scanner . close ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { solve ( sc ) ; } } public static void solve ( Scanner sc ) { int [ ] [ ] matrix = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { matrix [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = matrix [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = matrix [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = matrix [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = matrix [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = matrix [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( matrix [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int digit = sc . nextInt ( ) ; if ( min > digit ) { min = digit ; ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , 1 ) ; String s ; String sl [ ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { sl = r . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sl [ j ] ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; boolean f = true ; for ( int i = 0 ; i < 2 ; i ++ ) { int z = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] - c [ i + 1 ] [ j ] != z ) { f = false ; } } } for ( int i = 0 ; i < 2 ; i ++ ) { int z = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != z ) { f = false ; } } } System . out . println ( f ? " Yes " : " No " ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; min = Math . min ( min , p ) ; if ( p <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . BufferedInputStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( new BufferedInputStream ( System . in ) ) ; int a = sc . nextInt ( ) ; int m [ ] = new int [ a ] ; int min = a ; int count = 0 ; for ( int i = 0 ; i < a ; i ++ ) { m [ i ] = sc . nextInt ( ) ; if ( m [ i ] < min ) min = m [ i ] ; if ( m [ i ] <= min ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; class Main { public static final int MOD = 1000000007 ; public static final int INF = 1000000000 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a , b ; a = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; b = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; String ans = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( a != c [ i ] [ 0 ] - c [ i ] [ 1 ] || b != c [ i ] [ 1 ] - c [ i ] [ 2 ] ) { ans = " No " ; break ; } } for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ j ] - c [ 1 ] [ j ] || c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ j ] - c [ 2 ] [ j ] ) { ans = " No " ; break ; } } out . println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int count = 0 ; int pj = p [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( p [ i ] <= pj ) { ++ count ; pj = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { result ++ ; min = p ; } } sc . close ( ) ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean find = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { a [ 0 ] = i ; for ( int j = 0 ; j < 3 ; j ++ ) { b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b1 = c [ 1 ] [ j ] - a [ 1 ] ; if ( b1 != b [ j ] ) { find = false ; } } if ( find == true ) { a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b2 = c [ 2 ] [ j ] - a [ 2 ] ; if ( b2 != b [ j ] ) { find = false ; } } } if ( find == true ) { System . out . println ( " Yes " ) ; return ; } find = true ; } System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . charset . StandardCharsets ; import java . util . Arrays ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String line = in . readLine ( ) ; for ( int j = 0 ; j < 3 ; j ++ ) { String [ ] line_char = line . split ( " " ) ; grid [ i ] [ j ] = Integer . parseInt ( line_char [ j ] ) ; } } boolean trueFlag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( grid [ i ] [ j ] - grid [ i - 1 ] [ j ] != grid [ i ] [ j + 1 ] - grid [ i - 1 ] [ j + 1 ] ) { trueFlag = false ; } } } if ( trueFlag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) break ; if ( S - ( x + y ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int a = 0 ; for ( int x = 0 ; x <= k ; ++ x ) { for ( int y = 0 ; y <= k ; ++ y ) { if ( s - x - y >= 0 && s - x - y <= k ) { ++ a ; } } } System . out . println ( a ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int a ; int b ; int cnt = 0 ; for ( a = 0 ; a <= K ; a ++ ) { int qw = K ; if ( S - a < qw ) { qw = S - a ; } for ( b = 0 ; b <= qw ; b ++ ) { if ( S - a - b <= K ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int P [ ] = new int [ N ] ; int countI = 1 ; for ( int i = 0 ; i < N ; i ++ ) { int b = scan . nextInt ( ) ; P [ i ] = b ; } int j = 1 ; int Min = P [ 0 ] ; while ( j < N ) { if ( P [ j ] < Min ) { Min = P [ j ] ; countI ++ ; } j ++ ; } System . out . println ( countI ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int k , s , x , y , z , n ; n = 0 ; Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { n ++ ; } } } System . out . println ( n ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int result = 1 ; int min = p [ 0 ] ; for ( int i = 1 ; i < p . length ; i ++ ) { if ( p [ i ] <= min ) { result ++ ; } min = Math . min ( min , p [ i ] ) ; } System . out . println ( result ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; int sum = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= num ; x ++ ) { for ( int y = 0 ; y <= num ; y ++ ) { if ( ( sum - ( x + y ) <= num ) && ( sum - ( x + y ) >= 0 ) ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = in . nextInt ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { ans = " No " ; break ; } } } out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; Integer [ ] c1 = new Integer [ 3 ] ; Integer [ ] c2 = new Integer [ 3 ] ; Integer [ ] c3 = new Integer [ 3 ] ; Arrays . setAll ( c1 , i -> Integer . parseInt ( sc . next ( ) ) ) ; Arrays . setAll ( c2 , i -> Integer . parseInt ( sc . next ( ) ) ) ; Arrays . setAll ( c3 , i -> Integer . parseInt ( sc . next ( ) ) ) ; sc . close ( ) ; Integer [ ] vertical = new Integer [ ] { c1 [ 0 ] - c1 [ 0 ] , c2 [ 0 ] - c1 [ 0 ] , c3 [ 0 ] - c1 [ 0 ] } ; Integer [ ] newC1 = new Integer [ ] { vertical [ 0 ] + c1 [ 0 ] , vertical [ 0 ] + c1 [ 1 ] , vertical [ 0 ] + c1 [ 2 ] } ; Integer [ ] newC2 = new Integer [ ] { vertical [ 1 ] + c1 [ 0 ] , vertical [ 1 ] + c1 [ 1 ] , vertical [ 1 ] + c1 [ 2 ] } ; Integer [ ] newC3 = new Integer [ ] { vertical [ 2 ] + c1 [ 0 ] , vertical [ 2 ] + c1 [ 1 ] , vertical [ 2 ] + c1 [ 2 ] } ; boolean judge1 = Arrays . equals ( c1 , newC1 ) ; boolean judge2 = Arrays . equals ( c2 , newC2 ) ; boolean judge3 = Arrays . equals ( c3 , newC3 ) ; boolean judge = judge1 && judge2 && judge3 ; String result = judge ? " Yes " : " No " ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; String result = " Yes " ; int d1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int d2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int d3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; int d4 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int d5 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int d6 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; if ( d1 != d2 || d2 != d3 ) { result = " No " ; } if ( d4 != d5 || d5 != d6 ) { result = " No " ; } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j <= S && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans = ans * 2 + 2 ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static String ans = " " , s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int Pj = P [ 0 ] ; for ( int i = 0 ; i < N ; ++ i ) { if ( P [ i ] <= Pj ) { ++ count ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; int [ ] P = nextIntArray1origin ( sc , N ) ; sc . close ( ) ; int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } @ SuppressWarnings ( " unused " ) private int [ ] nextIntArray1origin ( Scanner sc , int n ) { int [ ] result = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { result [ i ] = sc . nextInt ( ) ; } return result ; } }
import java . io . * ; import java . util . * ; public class Main { private static FastReader in = new FastReader ( System . in ) ; private static PrintWriter out = new PrintWriter ( System . out ) ; private static final long MOD = ( long ) 1e9 + 7 ; public static void main ( String [ ] args ) { solve ( ) ; out . flush ( ) ; } private static void solve ( ) { int n = in . nextInt ( ) ; int [ ] p = in . nextIntArray ( n ) ; int ans = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( p [ i ] <= min ) { ans ++ ; } } out . println ( ans ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; FastReader ( InputStream inputStream ) { br = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . A ( ) ; } void A ( ) { int N ; Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int a = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { a ++ ; min = P [ i ] ; } } System . out . println ( a ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int min = p [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > p [ i ] ) { min = p [ i ] ; } if ( min >= p [ i ] ) { ans += 1 ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) cnt ++ ; } } out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ; int n = Integer . parseInt ( str ) ; int ans = 1 ; int min = 0 ; str = scan . nextLine ( ) ; String [ ] substr = str . split ( " " , 0 ) ; int [ ] array = new int [ 200000 ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = Integer . parseInt ( substr [ i ] ) ; } if ( array [ 1 ] == 0 ) { System . out . println ( ans ) ; return ; } if ( array [ 1 ] <= array [ 0 ] ) { min = array [ 1 ] ; ans ++ ; } else { min = array [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( min >= array [ i ] ) { min = array [ i ] ; ans ++ ; } } System . out . println ( ans ) ; scan . close ( ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } if ( arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] == arr [ 1 ] [ 0 ] - arr [ 1 ] [ 1 ] && arr [ 1 ] [ 0 ] - arr [ 1 ] [ 1 ] == arr [ 2 ] [ 0 ] - arr [ 2 ] [ 1 ] ) { if ( arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] == arr [ 1 ] [ 1 ] - arr [ 1 ] [ 2 ] && arr [ 1 ] [ 1 ] - arr [ 1 ] [ 2 ] == arr [ 2 ] [ 1 ] - arr [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] r = new int [ 3 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } outside : for ( int i = 0 ; i < 3 ; i ++ ) { int a = 101 ; for ( int j = 0 ; j < 3 ; j ++ ) { a = Math . min ( c [ i ] [ j ] , a ) ; } if ( i == 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { r [ j ] = c [ i ] [ j ] - a ; } } if ( i > 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( r [ j ] != c [ i ] [ j ] - a ) { flag = false ; System . out . println ( " No " ) ; break outside ; } } } } if ( flag == true ) { System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 , min = n ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; Integer n = s . nextInt ( ) ; long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { Integer p = s . nextInt ( ) ; if ( p <= min ) { count ++ ; } min = Math . min ( p , min ) ; } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int ans = 1 ; boolean [ ] b = new boolean [ n ] ; b [ 0 ] = true ; int j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( b [ j ] ) { if ( p [ i ] <= p [ j ] ) { b [ i ] = true ; j = i ; ans ++ ; } else { b [ i ] = false ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int x , y , z ; int ans = 0 ; for ( x = 0 ; x <= K ; x ++ ) { for ( y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { long n = sc . nextLong ( ) ; List < Long > an = new ArrayList < > ( ) ; for ( long i = 0 ; i < n ; i ++ ) { an . add ( sc . nextLong ( ) ) ; } long result = 0 ; long min = Integer . MAX_VALUE ; for ( long l : an ) { if ( min > l ) { result ++ ; min = l ; } } System . out . println ( result ) ; } } static long lcm ( long a , long b ) { long temp ; long c = a ; c *= b ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return c / b ; } static long gcd ( long a , long b ) { long temp ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return b ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int sum = 0 ; int min = - 1 ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int b = scan . nextInt ( ) ; int [ ] g = put ( b , min ) ; sum += g [ 0 ] ; min = g [ 1 ] ; } System . out . println ( sum ) ; } public static int [ ] put ( int a , int b ) { int [ ] g = new int [ 2 ] ; if ( b == - 1 ) { g [ 1 ] = a ; g [ 0 ] = 1 ; return g ; } if ( a <= b ) { g [ 1 ] = a ; g [ 0 ] = 1 ; return g ; } g [ 1 ] = b ; g [ 0 ] = 0 ; return g ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) throws IOException { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { List < String > vals = br . lines ( ) . limit ( 3 ) . collect ( Collectors . toList ( ) ) ; List < List < Integer > > grid = new ArrayList < > ( ) ; vals . stream ( ) . forEachOrdered ( v -> { grid . add ( splitBySpace ( v ) . stream ( ) . map ( s -> Integer . valueOf ( s ) ) . collect ( Collectors . toList ( ) ) ) ; } ) ; for ( int i = 0 ; i < grid . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < grid . size ( ) ; j ++ ) { int sub = grid . get ( i ) . get ( 0 ) - grid . get ( j ) . get ( 0 ) ; for ( int k = 1 ; k < grid . get ( i ) . size ( ) ; k ++ ) { if ( sub != grid . get ( i ) . get ( k ) - grid . get ( j ) . get ( k ) ) { System . out . println ( " No " ) ; return ; } } } } System . out . println ( " Yes " ) ; } } private static List < String > splitBySpace ( String target ) { return Arrays . asList ( target . split ( " \\ s " ) ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; C solver = new C ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class C { static long inf = ( long ) 1e17 ; public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = Integer . parseInt ( in . next ( ) ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( in . next ( ) ) ; } long min = inf ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { min = p [ i ] ; ans ++ ; } } out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int mi = 200001 , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; if ( P < mi ) { ans ++ ; mi = P ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner cro = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; int i , j ; for ( i = 0 ; i < 3 ; i ++ ) for ( j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = cro . nextInt ( ) ; if ( a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] && a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] && a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] && a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] && a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] C1 = new int [ 3 ] ; int [ ] C2 = new int [ 3 ] ; int [ ] C3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { C1 [ i ] = sc . nextInt ( ) ; C2 [ i ] = sc . nextInt ( ) ; C3 [ i ] = sc . nextInt ( ) ; } if ( sol ( C1 ) != sol ( C2 ) || sol ( C2 ) != sol ( C3 ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } private static int sol ( int [ ] C ) { Arrays . sort ( C ) ; int sum = 0 ; for ( int n : C ) { sum += n ; } return sum - C [ 0 ] * C . length ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scanner . nextInt ( ) ) ; } scanner . close ( ) ; int count = 0 ; int min = list . get ( 0 ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) . compareTo ( min ) == 1 ) { continue ; } count += 1 ; min = list . get ( i ) ; } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 1 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 1 ] [ 3 ] ) { out . println ( " Yes " ) ; } else { out . println ( " No " ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Integer > list = new ArrayList < Integer > ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; n > i ; i ++ ) { int a = sc . nextInt ( ) ; list . add ( a ) ; } int count = 0 ; int min = 1000000 ; for ( int i = 0 ; n > i ; i ++ ) { int a = list . get ( i ) ; if ( min > a ) { min = a ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int maxValue = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= maxValue ; x ++ ) { for ( int y = 0 ; y <= maxValue ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= maxValue ) cnt ++ ; } } System . out . println ( cnt ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = 0 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > p [ i ] ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . util . function . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; sc . close ( ) ; int min = P [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min < P [ i ] ) continue ; min = P [ i ] ; ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z <= K && z >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P ; int min = 0 ; int counter = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P = sc . nextInt ( ) ; if ( min < 1 || P < min ) { min = P ; counter ++ ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int csum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; csum += c [ i ] [ j ] ; } } int [ ] threesum = new int [ 6 ] ; threesum [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; threesum [ 1 ] = c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] ; threesum [ 2 ] = c [ 1 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 2 ] [ 2 ] ; threesum [ 3 ] = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] ; threesum [ 4 ] = c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] ; threesum [ 5 ] = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] ; for ( int i = 1 ; i < 6 ; i ++ ) { if ( threesum [ 0 ] != threesum [ i ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; if ( k >= s ) { System . out . println ( ( s + 2 ) * ( s + 1 ) / 2 ) ; } else { int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver solver = new Solver ( ) ; solver . init ( ) ; solver . readHead ( in . readLine ( ) ) ; solver . readP ( in . readLine ( ) ) ; } } class Solver { int N ; int cnt ; public void init ( ) { N = 0 ; cnt = 0 ; } public void readHead ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; N = Integer . parseInt ( strArr [ 0 ] ) ; } public void readP ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; int min = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = Integer . parseInt ( strArr [ i ] ) ; if ( min > p ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; } public boolean hasNext ( ) { return cnt < N ; } public void readBody ( String str ) { cnt ++ ; } public void solve ( ) { } }
import java . util . PriorityQueue ; import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - x - y && S - x - y <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp < min ) { min = Math . min ( min , tmp ) ; cnt ++ ; } } System . out . print ( cnt ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) result ++ ; } } System . out . println ( result ) ; } public static class Scanner { private BufferedReader br ; private StringTokenizer tok ; public Scanner ( InputStream is ) throws IOException { br = new BufferedReader ( new InputStreamReader ( is ) ) ; } private void getLine ( ) throws IOException { while ( ! hasNext ( ) ) tok = new StringTokenizer ( br . readLine ( ) ) ; } private boolean hasNext ( ) { return tok != null && tok . hasMoreTokens ( ) ; } public String next ( ) throws IOException { getLine ( ) ; return tok . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; out . println ( IntStream . rangeClosed ( Math . max ( 0 , s - 2 * k ) , Math . min ( k , s ) ) . map ( x -> Math . min ( k , s - x ) - Math . max ( 0 , s - x - k ) + 1 ) . filter ( v -> v > 0 ) . sum ( ) ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( final String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; long N ; N = sc . nextLong ( ) ; long [ ] P = new long [ ( int ) ( N ) ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } final Solver solver = new Solver ( ) ; solver . solve ( N , P ) ; } } class Solver { public void solve ( long N , long [ ] P ) { long ans = 0 ; long min = Long . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int n = sc . nextInt ( ) ; int [ ] pArray = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pArray [ i ] = sc . nextInt ( ) ; } int min = pArray [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( pArray [ i ] < min ) { count ++ ; min = pArray [ i ] ; } } System . out . println ( count ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( ( z <= k ) && ( z >= 0 ) ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] values = IOUtils . readIntArray ( in , n , 0 ) ; long res = 0 ; int cost = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int canBuy = ( values [ i ] - 1 ) / cost ; res += canBuy ; int afterBuy = canBuy == 0 ? values [ i ] : 1 ; cost = Math . max ( cost , afterBuy + 1 ) ; } out . println ( res ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String nextString ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } } static class IOUtils { public static int [ ] readIntArray ( InputReader in , int size , int start ) { int [ ] res = new int [ start + size ] ; for ( int i = start ; i < start + size ; i ++ ) res [ i ] = in . nextInt ( ) ; return res ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int A [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int cnt = 1 ; int min = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= A [ i ] ) { cnt ++ ; min = A [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i - 1 ] || c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i - 1 ] ) ok = false ; } for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i - 1 ] [ 1 ] || c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 2 ] - c [ i - 1 ] [ 2 ] ) ok = false ; } System . out . println ( ok ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { min = p [ i ] ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] numbers = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { numbers [ i ] [ j ] = sc . nextInt ( ) ; } } if ( ( ( numbers [ 0 ] [ 0 ] - numbers [ 0 ] [ 1 ] ) == ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) ) && ( ( numbers [ 0 ] [ 0 ] - numbers [ 0 ] [ 1 ] ) == ( numbers [ 2 ] [ 0 ] - numbers [ 2 ] [ 1 ] ) ) && ( ( numbers [ 0 ] [ 1 ] - numbers [ 0 ] [ 2 ] ) == ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) ) && ( ( numbers [ 0 ] [ 1 ] - numbers [ 0 ] [ 2 ] ) == ( numbers [ 2 ] [ 1 ] - numbers [ 2 ] [ 2 ] ) ) && ( ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) == ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) && ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) == ( numbers [ 2 ] [ 0 ] - numbers [ 2 ] [ 1 ] ) ) && ( ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) == ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) && ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) == ( numbers [ 2 ] [ 1 ] - numbers [ 2 ] [ 2 ] ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int c3 = sc . nextInt ( ) ; int c4 = sc . nextInt ( ) ; int c5 = sc . nextInt ( ) ; int c6 = sc . nextInt ( ) ; int c7 = sc . nextInt ( ) ; int c8 = sc . nextInt ( ) ; int c9 = sc . nextInt ( ) ; int flag = 0 ; ArrayList < Integer > Aarray = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { Aarray . add ( 0 ) ; } ArrayList < Integer > Barray = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { Barray . add ( 0 ) ; } loop : for ( int i = 0 ; i < 100 ; i ++ ) { Aarray . set ( 0 , i ) ; Barray . set ( 0 , c1 - Aarray . get ( 0 ) ) ; Barray . set ( 1 , c2 - Aarray . get ( 0 ) ) ; Barray . set ( 2 , c3 - Aarray . get ( 0 ) ) ; for ( int j = 0 ; j < 2 ; j ++ ) { Aarray . set ( 1 , c4 - Barray . get ( j ) ) ; for ( int k = 0 ; k < 2 ; k ++ ) { Aarray . set ( 2 , c7 - Barray . get ( k ) ) ; if ( Aarray . get ( 1 ) + Barray . get ( 1 ) == c5 && Aarray . get ( 1 ) + Barray . get ( 2 ) == c6 && Aarray . get ( 2 ) + Barray . get ( 1 ) == c8 && Aarray . get ( 2 ) + Barray . get ( 2 ) == c9 ) { flag ++ ; break loop ; } } } } if ( flag == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z < 0 || z > k ) continue ; res ++ ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; int [ ] A = new int [ 3 ] ; int [ ] B = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = gi ( ) ; } } for ( A [ 0 ] = 0 ; A [ 0 ] <= C [ 0 ] [ 0 ] ; A [ 0 ] ++ ) { B [ 0 ] = C [ 0 ] [ 0 ] - A [ 0 ] ; for ( A [ 1 ] = 0 ; A [ 1 ] <= C [ 1 ] [ 1 ] ; A [ 1 ] ++ ) { B [ 1 ] = C [ 1 ] [ 1 ] - A [ 1 ] ; for ( A [ 2 ] = 0 ; A [ 2 ] <= C [ 2 ] [ 2 ] ; A [ 2 ] ++ ) { B [ 2 ] = C [ 2 ] [ 2 ] - A [ 2 ] ; boolean f = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( A [ i ] + B [ j ] != C [ i ] [ j ] ) { f = false ; break ; } } } if ( f ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( lines [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) A = inp . shift ( ) * 1 B = inp . shift ( ) * 1 C = inp . shift ( ) * 1 D = inp . shift ( ) * 1 console . log ( A * B > C * D ? A * B : C * D )
" use strict " ; function Main ( input ) { const args = input . split ( ' ' ) . map ( m => parseInt ( m ) ) ; const A = args . shift ( ) ; const B = args . shift ( ) ; let price = B ; if ( A <= 5 ) { price = 0 ; } else if ( A <= 12 ) { price /= 2 ; } console . log ( price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( x ) { return Math . pow ( x , 3 ) ; } ( parseInt ( inputs [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { var a = parseInt ( input ) ; console . log ( a * a * a ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; const a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; const b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; const h = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; const m = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; let angS = 360 * m / 60 let angL = 360 * 5 * h / 60 + 360 / 12 * m / 60 const diff = angS > angL ? angS - angL : angL - angS const rad = diff * Math . PI / 180 let x = Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) console . log ( x ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) . map ( n => parseInt ( n , 10 ) ) ; const a = args [ 0 ] , e = args [ 4 ] , k = args [ 5 ] ; if ( e - a <= k ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; let stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; let a = 0 , b = 0 ; for ( let x of stdin . split ( ' ' ) ) { x = parseInt ( x ) ; if ( x == 5 ) { a ++ ; } else if ( x == 7 ) { b ++ ; } } console . log ( a == 2 && b == 1 ? " YES " : " NO " ) ;
" use strict " const fs = require ( " fs " ) ; function main ( input ) { const tmp = input . split ( " \n " ) ; const n = tmp [ 0 ] ; const xs = tmp [ 1 ] . split ( " " ) . map ( v => parseInt ( v ) ) ; console . log ( process ( n , xs ) ) ; } function process ( n , xs ) { let ret = 100000000 ; const min = Math . min ( ... xs ) ; const max = Math . max ( ... xs ) ; for ( let p = min ; p <= max ; ++ p ) { const sum = xs . reduce ( ( a , c ) => a + Math . pow ( ( c - p ) , 2 ) , 0 ) ; if ( ret > sum ) ret = sum ; } return ret ; } main ( fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var words = lines [ 0 ] . split ( " " ) ; var ans1 = [ 5 , 5 , 7 ] var ans2 = [ 5 , 7 , 5 ] var ans3 = [ 7 , 5 , 5 ] console . log ( words . join ( ' ' ) === ans1 . join ( ' ' ) || words . join ( ' ' ) === ans2 . join ( ' ' ) || words . join ( ' ' ) === ans3 . join ( ' ' ) ? ' YES ' : ' NO ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { const ary = input . split ( ' ' ) . sort ( ) . map ( n => parseInt ( n , 10 ) ) ; console . log ( Math . abs ( ary [ 0 ] - ary [ 1 ] ) + Math . abs ( ary [ 1 ] - ary [ 2 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_string = " " ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { input_string = line ; } ) ; reader . on ( ' close ' , ( ) => { var x = input_string ; console . log ( x * x * x ) ; } ) ;
" use strict " ; function main ( input ) { var lines = input . split ( ' \n ' ) ; var N = parseInt ( lines [ 0 ] ) ; var A = splitNum ( lines [ 1 ] ) . slice ( 0 , N ) ; var B = splitNum ( lines [ 2 ] ) . slice ( 0 , N ) ; var diffs = A . map ( function ( a , i ) { return a - B [ i ] ; } ) ; diffs . sort ( function ( x , y ) { return y - x ; } ) ; var changed = diffs . map ( function ( _ ) { return false ; } ) ; var source = 0 ; var target = N - 1 ; while ( source < target ) { var diff = diffs [ target ] ; if ( diff >= 0 ) { break ; } if ( diffs [ source ] >= - diff ) { changed [ source ] = true ; changed [ target ] = true ; diffs [ source ] += diff ; diffs [ target ] = 0 ; target -- ; } else { if ( diffs [ source ] > 0 ) { changed [ source ] = true ; changed [ target ] = true ; } diffs [ target ] += diffs [ source ] ; diffs [ source ] = 0 ; source ++ ; } } if ( diffs [ target ] < 0 ) { console . log ( - 1 ) ; } else { console . log ( changed . reduce ( function ( acc , v ) { return acc + v ; } , 0 ) ) ; } return ; } function gcd ( a , b ) { if ( a < b ) return gcd ( a , b ) ; if ( b === 0 ) return a ; var r = a % b ; return gcd ( b , r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function splitNum ( line ) { return line . split ( / \s+ / ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) ; const a = n * n * n ; console . log ( a ) ; } ) ;
function Main ( input ) { var inputs = input . split ( ' ' ) ; var K = Number ( inputs [ 0 ] ) ; var S = Number ( inputs [ 1 ] ) ; var count = 0 ; for ( var X = 0 ; X <= K ; X ++ ) { for ( var Y = 0 ; Y <= K ; Y ++ ) { var Z = ( S - X - Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const A = args [ 0 ] . map ( arg => parseInt ( arg , 10 ) ) . sort ( ( a , b ) => a - b ) let sum = 0 sum += A [ 1 ] - A [ 0 ] sum += A [ 2 ] - A [ 1 ] console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " " ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const h = parseInt ( input [ 2 ] , 10 ) ; const m = parseInt ( input [ 3 ] , 10 ) ; const ratioH = 30 * h + ( 1 / 2 ) * m ; const ratioM = 6 * m ; const rad = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) / 360 ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 ; let count7 = 0 ; arr . forEach ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; if ( count5 == 2 && count7 == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var max = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; var success = true ; for ( var i = 0 ; i < array . length ; i ++ ) { for ( var j = 0 ; j < array . length ; j ++ ) { if ( i >= j ) continue ; var dist = array [ j ] - array [ i ] ; if ( max < dist ) { success = false ; break ; } } } console . log ( success ? " Yay! " : " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code , result = " " ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; result += String . fromCharCode ( code ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; result += " a " ; } else { result += s [ j ] ; } } } console . log ( result ) ;
function main ( input ) { const nums = input . split ( " " ) . map ( num => parseInt ( num , 10 ) ) console . log ( nums [ 0 ] >= 13 ? nums [ 1 ] : nums [ 0 ] >= 6 ? nums [ 1 ] / 2 : 0 ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { var N = parseInt ( input [ 0 ] . split ( / \s / ) [ 0 ] , 10 ) ; var D = parseInt ( input [ 0 ] . split ( / \s / ) [ 1 ] , 10 ) ; var X = input . slice ( 1 ) . map ( x => { return x . split ( / \s / ) . map ( num => parseInt ( num , 10 ) ) ; } ) ; var result = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var dist = 0 ; var distSum = 0 ; for ( var d = 0 ; d < D ; d ++ ) { distSum += Math . pow ( ( X [ j ] [ d ] - X [ i ] [ d ] ) , 2 ) ; } dist = Math . sqrt ( distSum ) ; if ( Number . isInteger ( dist ) ) { result ++ ; } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n / ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; input = input [ 0 ] . split ( " " ) ; let a = parseInt ( input [ 0 ] , 10 ) ; let b = parseInt ( input [ 1 ] , 10 ) ; let h = parseInt ( input [ 2 ] , 10 ) ; let m = parseInt ( input [ 3 ] , 10 ) ; console . log ( Math . sqrt ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) - 2 * a * b * Math . cos ( 2 * Math . PI * Math . abs ( h / 12 + m / 60 / 12 - m / 60 ) ) ) . toFixed ( 20 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const N = parseInt ( input [ 0 ] , 10 ) ; let count = 0 ; let max_count = 0 ; let ans = 1 ; for ( var n = 1 ; n <= N ; n ++ ) { let work_n = n ; count = 0 ; while ( work_n % 2 === 0 && work_n > 0 ) { work_n = work_n / 2 ; count ++ ; } if ( max_count < count ) { ans = n ; max_count = count ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] . split ( " " ) . map ( function ( i ) { return parseInt ( i ) ; } ) ; var sortedA = a . slice ( ) . sort ( function ( a , b ) { return a - b ; } ) ; var med1 = sortedA [ N / 2 - 1 ] ; var med2 = sortedA [ N / 2 ] ; a . forEach ( function ( i ) { console . log ( i <= med1 ? med2 : med1 ) ; } ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var si = process . stdin ; si . resume ( ) ; si . setEncoding ( ' utf8 ' ) ; si . on ( ' data ' , function ( chunk ) { var x = Number ( chunk . toString ( ) . trim ( ) ) ; console . log ( x * x * x ) ; } ) ;
' use strict ' function Main ( input ) { input = input . split ( ' ' ) ; let age = parseInt ( input [ 0 ] , 10 ) ; let value = parseInt ( input [ 1 ] , 10 ) ; let price = 0 ; if ( age > 5 && age < 13 ) { price = value / 2 } else if ( age >= 13 ) { price = value } console . log ( ' %d ' , price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( Math . pow ( x , 3 ) ) } )
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { var num = parseInt ( input ) ; var answer = num * num * num ; console . log ( answer ) ; }
" use strict " ; const main = arg => { const rectangles = arg . split ( " \n " ) [ 0 ] . split ( " " ) ; const A = rectangles [ 0 ] * rectangles [ 1 ] ; const B = rectangles [ 2 ] * rectangles [ 3 ] ; console . log ( Math . max ( A , B ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function myin ( ) { return require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; } function myout ( t ) { console . log ( t ) ; } function myconv ( i , no ) { switch ( no ) { case 0 : return i ; case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 3 : return i . split ( " \n " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 5 : return i . split ( " \n " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; } } function Main ( input ) { input = myconv ( input , 1 ) ; if ( input % 2 == 0 ) { myout ( input + " " + input + " " + input / 2 ) ; return ; } else { for ( var i = 1 ; i <= 3500 ; i ++ ) { for ( var j = 1 ; j <= 3500 ; j ++ ) { var a = input * i * j / ( 4 * i * j - input * ( i + j ) ) ; if ( Number . isInteger ( a ) && a >= 1 && a != Infinity ) { myout ( a + " " + i + " " + j ) ; return ; } } } } } Main ( myin ( ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) in put_lines . map ( i => { if ( i == 5 ) { count5 ++ } if ( i == 7 ) { count7 ++ } } ) if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
const Main = ( input ) => { input = input . split ( " \n " ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var flg = false ; var i , j ; for ( i = 0 ; i < input . length ; i ++ ) { for ( j = i + 1 ; j < input . length ; j ++ ) { if ( parseInt ( input [ j ] , 10 ) - parseInt ( input [ i ] , 10 ) > k ) { flg = true ; break ; } } } console . log ( ( flg ) ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var n = parseInt ( input [ 0 ] , 10 ) ; var x = input [ 1 ] . split ( " " ) ; var min = 0 ; var maxx = 0 ; for ( var i = 0 ; i < n ; i ++ ) { if ( maxx < x [ i ] ) { maxx = x [ i ] ; } } for ( var j = 1 ; j <= maxx ; j ++ ) { var s = 0 ; for ( var k = 0 ; k < n ; k ++ ) { s = s + ( ( x [ k ] - j ) * ( x [ k ] - j ) ) ; } if ( min == 0 || min > s ) { min = s ; } } console . log ( ' %d ' , min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; i = 0 ; x = [ ] ; counter = 0 ; N = 1000000 ; D = 0 ; for ( i = 0 ; i <= N ; i ++ ) { num = input [ i ] . split ( / \s+ / ) ; littleX = [ ] ; if ( i == 0 ) { N = num [ 0 ] ; D = num [ 1 ] ; } else { for ( j = 0 ; j < D ; j ++ ) { littleX . push ( num [ j ] ) ; } x . push ( littleX ) ; } } for ( i = 0 ; i < N ; i ++ ) { for ( k = i + 1 ; k < N ; k ++ ) { sum = 0 ; for ( j = 0 ; j < D ; j ++ ) { sum += Math . abs ( ( x [ i ] [ j ] - x [ k ] [ j ] ) * ( x [ i ] [ j ] - x [ k ] [ j ] ) ) ; } if ( Number . isInteger ( Math . sqrt ( sum ) ) === true ) { counter ++ ; } } } console . log ( counter ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( input ) { var args = input . split ( ' \n ' ) ; var N = parseInt ( args [ 0 ] , 10 ) ; var a = args [ 1 ] . split ( ' ' ) . map ( a => parseInt ( a , 10 ) ) . sort ( ( a , b ) => ( a < b ? - 1 : 1 ) ) ; console . log ( a [ N - 1 ] - a [ 0 ] ) ; }
' use strict ' ; function Main ( input ) { const tmp = input . split ( " \n " ) [ 0 ] . split ( " " ) ; const one = tmp [ 0 ] * tmp [ 1 ] ; const two = tmp [ 2 ] * tmp [ 3 ] ; if ( one < two ) { console . log ( two ) ; } else { console . log ( one ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { var num = input ; console . log ( num * num * num ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; process . stdin . on ( " data " , function ( chunk ) { var datas = chunk . trim ( ) . split ( " \n " ) ; for ( var i = 0 ; i < datas . length ; i ++ ) { var ab = datas [ i ] . trim ( ) . split ( " " ) ; var a = parseInt ( ab [ 0 ] ) ; var b = parseInt ( ab [ 1 ] ) ; console . log ( a + b ) ; } } ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const X = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = Number . MAX_SAFE_INTEGER for ( let i = 1 ; i <= 100 ; i ++ ) { let sum = 0 for ( let j = 0 ; j < N ; j ++ ) { sum += Math . pow ( X [ j ] - i , 2 ) } if ( sum < min ) min = sum } console . log ( min ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var array = input . split ( ' \n ' ) ; var limit = array [ 5 ] ; var max = array [ 4 ] ; var min = array [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) ; var nidan = input [ 1 ] . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a < b ? - 1 : 1 ) ; console . log ( nidan [ nidan . length - 1 ] - nidan [ 0 ] ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' ) ; var x = parseInt ( input ) ; console . log ( Math . pow ( x , 3 ) )
" use strict " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; var lines = [ ] ; var reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( " line " , line => { lines . push ( line . split ( / \s / ) . map ( x => parseInt ( x ) ) ) ; } ) ; reader . on ( " close " , ( ) => { let n = lines . shift ( ) ; let a = lines . shift ( ) ; let b = lines . shift ( ) ; let aSum = a . reduce ( ( a , i ) => a + i ) ; let bSum = b . reduce ( ( a , i ) => a + i ) ; if ( aSum < bSum ) { console . log ( - 1 ) ; return ; } let count = 0 ; let positiveArr = [ ] ; let positiveSum = 0 ; let negativeSum = 0 ; let index = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let tmp = a [ i ] - b [ i ] ; if ( tmp > 0 ) positiveArr . push ( tmp ) ; else if ( tmp < 0 ) { count += 1 ; negativeSum += tmp ; } } positiveArr . sort ( ( a , b ) => b - a ) ; while ( positiveSum + negativeSum < 0 ) { positiveSum += positiveArr [ index ] ; index ++ ; } console . log ( count + index ) ; } ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; input . sort ( function ( a , b ) { return b - a ; } ) ; var output = 0 ; output += Math . abs ( input [ 0 ] - input [ 1 ] ) ; output += Math . abs ( input [ 2 ] - input [ 1 ] ) ; console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) console . log ( Math . max ( args [ 0 ] * args [ 1 ] , args [ 2 ] * args [ 3 ] ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
const fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { const data = input const x = Number ( data [ 0 ] ) console . log ( x * x * x ) }
function Main ( input ) { input = input . split ( " \n " ) ; var house_num = Number ( input [ 0 ] ) ; var houses = input [ 1 ] . split ( ' ' ) ; var smallest = houses [ 0 ] ; var largest = 0 ; for ( var i = 0 ; i < houses . length ; i ++ ) { if ( houses [ i ] > largest ) { largest = houses [ i ] ; } if ( houses [ i ] < smallest ) { smallest = houses [ i ] ; } } var answer = largest - smallest ; console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var ans = " " ; if ( a === 5 && b === 5 && c === 7 ) { ans = " YES " ; } else if ( a === 5 && b === 7 && c === 5 ) { ans = " YES " ; } else if ( a === 7 && b === 5 && c === 5 ) { ans = " YES " ; } else { ans = " NO " ; } console . log ( ' %s ' , ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var [ h , w ] = arr . shift ( ) . split ( " " ) . map ( Number ) ; var yx = arr . map ( v => v . split ( " " ) . map ( Number ) ) ; var min = Infinity ; for ( var i = 0 ; i < h ; i ++ ) { for ( var j = 0 ; j < w ; j ++ ) { var sum = 0 ; for ( y = 0 ; y < h ; y ++ ) { for ( x = 0 ; x < w ; x ++ ) { sum += yx [ y ] [ x ] * Math . min ( Math . abs ( y - i ) , Math . abs ( x - j ) ) ; } } min = Math . min ( min , sum ) ; } } console . log ( min ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , num => { console . log ( num * num * num ) ; } ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var total = a + b + c ; if ( a > 4 && b > 4 && c > 4 && total === 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return Math . pow ( x , 3 ) ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
" use strict " ; function Main ( input ) { const lines = input . split ( " \n " ) ; var x = parseInt ( lines [ 0 ] ) ; console . log ( Math . pow ( x , 3 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; let Alice = Number ( input [ 0 ] . split ( ' ' ) [ 0 ] ) let Bob = Number ( input [ 0 ] . split ( ' ' ) [ 1 ] ) let cards = [ ] for ( let i = 2 ; i <= 13 ; i ++ ) { cards . push ( i ) } cards . push ( 1 ) if ( cards . indexOf ( Alice ) > cards . indexOf ( Bob ) ) { console . log ( ' Alice ' ) } else if ( cards . indexOf ( Alice ) < cards . indexOf ( Bob ) ) { console . log ( ' Bob ' ) } else { console . log ( ' Draw ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function calcDistance ( I , J , D ) { let dist = 0 ; for ( let d = 0 ; d < D ; d ++ ) { dist += Math . pow ( I [ d ] - J [ d ] , 2 ) ; } dist = Math . sqrt ( dist ) ; return dist ; } function main ( input ) { const tmp = Array . from ( input . split ( ' \n ' ) ) ; const ND = tmp . shift ( ) . split ( ' ' ) ; const N = parseInt ( ND [ 0 ] , 10 ) ; const D = parseInt ( ND [ 1 ] , 10 ) ; const X = tmp . map ( ( line ) => line . split ( ' ' ) . map ( ( x ) => parseInt ( x , 10 ) ) ) ; let count = 0 ; for ( let i = 0 ; i < N - 1 ; i ++ ) { for ( let k = i + 1 ; k < N ; k ++ ) { if ( Number . isInteger ( calcDistance ( X [ i ] , X [ k ] , D ) ) ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; Arr . forEach ( function ( v ) { var arr = v . split ( " , " ) . map ( Number ) ; var d = arr [ 1 ] / Math . pow ( arr [ 2 ] , 2 ) ; if ( d >= 25 ) console . log ( arr [ 0 ] ) } ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " \n " ) . map ( Number ) ; var N = input [ 5 ] ; input . pop ( ) ; function compareFunc ( a , b ) { return a - b ; } input . sort ( compareFunc ) ; if ( input [ 4 ] - input [ 0 ] <= N ) console . log ( " Yay! " ) ; else console . log ( " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { inputs = input . split ( / \n / ) ; var firstLine = inputs [ 0 ] var firstLines = firstLine . split ( / \s / ) var n = Number ( firstLines [ 0 ] ) var m = Number ( firstLines [ 1 ] ) var prefs = { } var prefLineLength = inputs . length - 1 - 1 for ( var i = 0 ; i < prefLineLength ; i ++ ) { var prefLine = inputs [ i + 1 ] var prefLines = prefLine . split ( / \s / ) var p = Number ( prefLines [ 0 ] ) var y = Number ( prefLines [ 1 ] ) if ( ! prefs [ p ] ) { prefs [ p ] = [ ] } prefs [ p ] . push ( { i : i , pref : p , year : y } ) } var cities = [ ] for ( var i = 0 ; i <= n ; i ++ ) { var pref = prefs [ i ] if ( ! pref ) continue ; pref . sort ( function ( a , b ) { return a . year - b . year ; } ) for ( var j = 0 ; j < pref . length ; j ++ ) { pref [ j ] . ID = ( " 00000 " + pref [ j ] . pref ) . slice ( - 6 ) + ( " 00000 " + ( j + 1 ) ) . slice ( - 6 ) cities . push ( pref [ j ] ) } } cities . sort ( function ( a , b ) { return a . i - b . i } ) console . log ( cities . map ( a => a . ID ) . join ( " \n " ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var N = Number ( input ) ; if ( N == 1 ) { var record = [ 1 , 0 ] ; } else { var record = [ 0 , 0 ] ; } for ( var i = 1 ; i <= N ; i ++ ) { var count = 0 ; count = check ( i , count ) ; if ( record [ 1 ] < count ) { record = [ i , count ] ; } } function check ( i , t ) { if ( i % 2 == 0 ) { ++ t ; return check ( i / 2 , t ) ; } else { return t ; } } console . log ( record [ 0 ] ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = parseInt ( input . trim ( ) ) ; var output = 1 ; var maxCount = 0 ; for ( var i = 1 ; i <= input ; i ++ ) { var tmp = i ; var count = 0 ; while ( tmp % 2 != 1 ) { tmp = tmp / 2 ; count ++ ; } if ( maxCount < count ) { output = i ; maxCount = count ; } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( x * x * x ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function * main ( ) { const N = + ( yield ) ; const P = ( yield ) . split ( " " ) . map ( s => + s ) ; let m = 200001 , ans = 0 ; for ( let p of P ) { if ( p < m ) ans ++ ; m = Math . min ( m , p ) ; } console . log ( ans ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( " line " , line => iter . next ( line ) ) ;
function Main ( input ) { var tmp = input . split ( " \n " ) ; var a = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { a . push ( parseInt ( tmp [ i ] ) ) ; } var k = parseInt ( tmp [ 5 ] ) ; var max = Math . max ( ... a ) ; var min = Math . min ( ... a ) ; if ( max - min > k ) { console . log ( " :( " ) } else { console . log ( " Yay! " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] console . log ( Math . pow ( parseInt ( next ( ) ) , 3 ) )
let buf = [ ] ; process . stdin . on ( ' data ' , function ( chunk ) { let x = parseInt ( chunk ) ; console . log ( x * x * x ) ; } )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) . trim ( ) . split ( ' \n ' ) ; console . log ( n * n * n ) ; } ) ;
' use strict ' ; let equalAll = ( a , b , c ) => { return a === b && a === c ; } ; let equalSome = ( a , b , c ) => { return a === b || b === c || a === c ; } ; let permutationSize = pattern => { if ( equalAll ( pattern [ 0 ] , pattern [ 1 ] , pattern [ 2 ] ) ) { return 1 ; } if ( equalSome ( pattern [ 0 ] , pattern [ 1 ] , pattern [ 2 ] ) ) { return 3 ; } return 6 ; } ; function Main ( input ) { const line = input . split ( ' ' ) . map ( el => + el ) ; let patterns = [ ] ; for ( let x = 0 ; x <= line [ 0 ] ; x ++ ) { if ( x > line [ 1 ] ) continue ; for ( let y = x ; y <= line [ 0 ] ; y ++ ) { if ( y > line [ 1 ] ) continue ; const z = line [ 1 ] - x - y ; if ( z < 0 || z > line [ 0 ] ) continue ; if ( z < x || z < y ) continue ; patterns . push ( [ x , y , z ] ) ; } } let result = 0 ; for ( let i = 0 ; i < patterns . length ; i ++ ) { result += permutationSize ( patterns [ i ] ) ; } console . log ( result ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( ) { const num = parseInt ( input [ 0 ] , 10 ) ; console . log ( num * num * num ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
" use strict " function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; let h = input [ 0 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let m = input [ 1 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let l = input [ 2 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let x = [ m [ 0 ] - h [ 0 ] , m [ 1 ] - h [ 1 ] , m [ 2 ] - h [ 2 ] ] let y = [ l [ 0 ] - m [ 0 ] , l [ 1 ] - m [ 1 ] , l [ 2 ] - m [ 2 ] ] if ( x [ 0 ] === x [ 1 ] && x [ 1 ] === x [ 2 ] ) { if ( y [ 0 ] === y [ 1 ] && y [ 1 ] === y [ 2 ] ) { console . log ( ' Yes ' ) ; return ; } } console . log ( ' No ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const lines = input . split ( ' \n ' ) const [ N , M ] = lines [ 0 ] . split ( ' ' ) . map ( Number ) const C = [ ] for ( let i = 0 ; i < M ; i ++ ) { C [ i ] = [ ... lines [ i + 1 ] . split ( ' ' ) . map ( Number ) , i ] } C . sort ( ( a , b ) => { if ( a [ 0 ] === b [ 0 ] ) { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } else { return a [ 0 ] > b [ 0 ] ? 1 : - 1 } } ) let ans = [ ] let p = 0 let x = 0 for ( let i = 0 ; i < M ; i ++ ) { if ( p === C [ i ] [ 0 ] ) { x ++ } else { p = C [ i ] [ 0 ] x = 1 } ans . push ( [ ( ' 000000 ' + C [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + x ) . slice ( - 6 ) , C [ i ] [ 2 ] ] ) } ans . sort ( ( a , b ) => { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } ) for ( let i = 0 ; i < M ; i ++ ) { ans [ i ] = ans [ i ] [ 0 ] } console . log ( ans . join ( ' \n ' ) ) } ) ( input )
' use strict ' function Main ( input ) { input = input . split ( " \n " ) [ 0 ] . split ( ' ' ) . map ( str => parseInt ( str ) ) const A = input [ 0 ] const B = input [ 1 ] let result = 0 if ( A >= 13 ) { result = B } else if ( A >= 6 ) { result = B / 2 } console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { var N = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var M = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; var list = [ ] ; for ( var i = 1 ; i <= M ; i ++ ) { list . push ( input [ i ] . split ( " " ) . map ( v => v - 0 ) ) ; } list = list . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] ) || ( a [ 1 ] - b [ 1 ] ) ) ; var map = { } ; list . forEach ( ( v , i ) => { var c = v [ 0 ] ; var y = v [ 1 ] ; if ( ! map [ c ] ) { map [ c ] = { len : 0 } ; } map [ c ] [ y ] = ++ map [ c ] . len ; } ) ; for ( var i = 1 ; i <= M ; i ++ ) { var c = input [ i ] . split ( " " ) [ 0 ] ; var y = input [ i ] . split ( " " ) [ 1 ] ; var num = map [ c ] [ y ] ; console . log ( ( " 000000 " + c ) . slice ( - 6 ) + ( " 000000 " + num ) . slice ( - 6 ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
for ( t in l = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) , c = { 0 : { } , 1 : { } } , l [ 1 ] . split ( " " ) . forEach ( ( s , e ) => { t = c [ 1 & e ] , t [ s ] = t [ s ] ? t [ s ] + 1 : 1 } ) , s = { } , c ) s [ t ] = Object . keys ( c [ t ] ) . sort ( ( s , e ) => c [ t ] [ e ] - c [ t ] [ s ] ) ; g = ( ( t , e ) => s [ t ] [ e ] ? c [ t ] [ s [ t ] [ e ] ] : 0 ) , s [ 0 ] [ 0 ] != s [ 1 ] [ 0 ] && ( s [ 1 ] [ 1 ] = s [ 1 ] [ 0 ] ) , console . log ( l [ 0 ] - Math . max ( g ( 0 , 0 ) + g ( 1 , 1 ) , g ( 0 , 1 ) + g ( 1 , 0 ) ) ) ;
' use strict ' function main ( s ) { const table = s . split ( ' \n ' ) . slice ( 0 , - 1 ) . map ( el => el . split ( ' ' ) . map ( x => Number ( x ) ) ) ; let ans = ' Yes ' ; for ( let i = 0 ; i < 2 ; i ++ ) { for ( let j = 0 ; j < 2 ; j ++ ) { const col_diff = ( ( table [ i ] [ j ] - table [ i ] [ j + 1 ] ) === ( table [ i + 1 ] [ j ] - table [ i + 1 ] [ j + 1 ] ) ) ; const row_diff = ( ( table [ i ] [ j ] - table [ i + 1 ] [ j ] ) === ( table [ i ] [ j + 1 ] - table [ i + 1 ] [ j + 1 ] ) ) ; if ( ! ( col_diff && row_diff ) ) { ans = ' No ' ; break ; } } } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) var C = Number ( lines [ 0 ] . split ( " " ) [ 2 ] ) var a = Math . abs ( A - B ) + Math . abs ( B - C ) var b = Math . abs ( A - C ) + Math . abs ( B - C ) var c = Math . abs ( A - B ) + Math . abs ( A - C ) var d = Math . abs ( C - B ) + Math . abs ( A - C ) var e = Math . abs ( C - A ) + Math . abs ( A - B ) var f = Math . abs ( C - B ) + Math . abs ( A - B ) console . log ( Math . min ( a , b , c , e , f ) ) ; } ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) const [ A , B , H , M ] = input [ 0 ] . split ( ' ' ) . map ( Number ) const degA = ( H * 30 ) + ( M / 60 * 30 ) const degB = M * 6 const deg = Math . abs ( degA - degB ) const rad = deg * ( Math . PI / 180 ) const height = A * Math . sin ( rad ) const width = A * Math . cos ( rad ) - B const ans = Math . sqrt ( Math . pow ( height , 2 ) + Math . pow ( width , 2 ) ) console . log ( ans )
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var limit = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; console . log ( array [ array . length - 1 ] - array [ 0 ] <= limit ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var nums = lines [ 0 ] . replace ( / \s / g , ' ' ) console . log ( nums . replace ( ' 5 ' , ' ' ) . replace ( ' 5 ' , ' ' ) . replace ( ' 7 ' , ' ' ) . length === 0 ? ' YES ' : ' NO ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var five = ( input . match ( / 5 / g ) || [ ] ) . length ; var seven = ( input . match ( / 7 / g ) || [ ] ) . length ; ( five == 2 && seven == 1 ) ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var c = parseInt ( tmp [ 2 ] , 10 ) ; if ( ( a > 4 && b > 4 && c > 4 ) && ( a < 8 && b < 8 && c < 8 ) ) { if ( a + b + c == 17 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . map ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var min = Number . MAX_VALUE , max = Number . MIN_VALUE ; var arr = input . split ( " " ) . map ( v => parseInt ( v ) ) . forEach ( v => { min = Math . min ( min , v ) ; max = Math . max ( max , v ) ; } ) ; console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var max = Number ( input [ 0 ] ) ; var sum = Number ( input [ 1 ] ) ; var result = 0 ; var average = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= average ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( j <= k && k <= max ) { if ( i === j && i === k ) { result ++ ; } else if ( i === j || i === k || k === j ) { result = result + 3 ; } else { result = result + 6 ; } } } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( inputData ) { init ( inputData ) ; var a = inI ( ) ; var b = inI ( ) ; var c = inI ( ) ; var d = inI ( ) ; out ( Math . max ( a * b , c * d ) ) ; } var input , inputCnt ; function debug ( ) { Main ( document . getElementById ( " input " ) . value ) ; } function init ( inputData ) { input = inputData . replace ( / \n / g , " " ) ; input = input . split ( " " ) ; inputCnt = 0 ; } const out = ( output ) => { console . log ( output ) } const outln = ( output ) => { console . log ( output + " \n " ) } const inS = ( ) => { return input [ inputCnt ++ ] } ; const inI = ( ) => { return parseInt ( inS ( ) , 10 ) } ; const inF = ( ) => { return parseFloat ( inS ( ) ) } ; Array . prototype . rsort = function ( ) { return this . sort ( function ( a , b ) { return ( a < b ? 1 : - 1 ) ; } ) ; } Array . prototype . max = function ( ) { return Math . max . apply ( null , this ) ; } Array . prototype . min = function ( ) { return Math . min . apply ( null , this ) ; } function values ( array ) { var values = [ ] ; if ( array ) for ( var key in array ) values . push ( array [ key ] ) ; return values ; } ; function keys ( array ) { var keys = [ ] ; if ( array ) for ( var key in array ) keys . push ( key ) ; return keys ; } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' ; const receive = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \s / ) ; const main = input => { const N = Number ( input [ 0 ] ) ; var arr = [ ... Array ( N ) . keys ( ) ] . map ( x => ++ x ) ; var counter = 0 ; while ( arr . length > 1 ) { var arr = arr . filter ( x => x % 2 === 0 ) . map ( x => x / 2 ) ; counter ++ ; } const ans = arr [ 0 ] * Math . pow ( 2 , counter ) ; console . log ( ans ) ; } ; main ( receive ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
function Main ( input ) { var A = input . split ( ' ' ) ; var cost = 0 ; A = A . map ( ( s ) => parseInt ( s ) ) ; A = A . sort ( ) ; for ( var i = 0 ; i < A . length - 1 ; ++ i ) { cost += Math . abs ( A [ i ] - A [ i + 1 ] ) ; } console . log ( cost ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
' use strict ' let input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; input = input . trim ( ) . split ( ' \n ' ) . map ( x => x * 1 ) ; let ans = " Yay! " ; let amount = input . pop ( ) ; for ( let i = 0 ; i < input . length ; i ++ ) { for ( let j = 0 ; j < input . length ; j ++ ) { if ( i == j ) { continue } else if ( Math . abs ( input [ i ] - input [ j ] ) > amount ) { ans = " :( " ; break ; } ; } } console . log ( ans ) ;
function Main ( input ) { var str = input ; var tmp = str . split ( " \n " ) ; var k = tmp [ 5 ] ; tmp . pop ( ) ; var max = Math . max . apply ( null , tmp ) ; var min = Math . min . apply ( null , tmp ) ; if ( max - min > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) [ 1 ] . split ( / \s / g ) ; var min = Math . min . apply ( null , input ) ; var max = Math . max . apply ( null , input ) ; console . log ( max - min ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( Arr . length != 0 ) { var result = [ ] ; var NT = ( Arr . shift ( ) ) . split ( " " ) . map ( Number ) ; for ( var i = 0 ; i < NT [ 0 ] ; i ++ ) { var arr = ( Arr . shift ( ) ) . split ( " " ) ; var a = arr [ 0 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; if ( i > 0 ) { var A = a [ 0 ] * 60 + a [ 1 ] ; var B = b [ 0 ] * 60 + b [ 1 ] ; if ( A - B >= NT [ 1 ] ) result . push ( c + " " + ( A - B ) ) ; } var b = arr [ 2 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; var c = arr [ 3 ] ; } console . log ( result . length ) ; result . forEach ( function ( v ) { console . log ( v ) ; } ) ; }
function Main ( input ) { var ans = " Three " ; if ( input . match ( / Y / ) ) ans = " Four " ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const Ant = input . split ( " \n " ) . map ( Number ) ; Ant . pop ( ) ; let dist = Ant [ 5 ] ; Ant . pop ( ) ; let result = true ; if ( Ant [ 4 ] - Ant [ 0 ] > dist ) { result = false ; } console . log ( result ? ' Yay! ' : ' :( ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk . trim ( ) , 3 ) ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const S = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; let answer = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { let X = i ; let Y = j ; if ( i + j > S ) continue ; if ( S - ( i + j ) <= K ) { answer ++ ; } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function length_plus ( moji ) { moji = String ( moji ) ; while ( moji . length < 6 ) { moji = " 0 " + moji ; } return ( moji ) ; } function Main ( input ) { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; N = parseInt ( tmp1 [ 0 ] ) ; M = parseInt ( tmp1 [ 1 ] ) ; var hairetu = [ ] ; for ( i = 1 ; i < M + 1 ; i ++ ) { i_nojyoho = input [ i ] . split ( " " ) hairetu . push ( { kuni : parseInt ( i_nojyoho [ 0 ] ) , shi : i , nen : parseInt ( i_nojyoho [ 1 ] ) } ) ; } hairetu . sort ( function ( a , b ) { if ( a . kuni < b . kuni ) return - 1 ; if ( a . kuni > b . kuni ) return 1 ; if ( a . nen < b . nen ) return - 1 ; if ( a . nen > b . nen ) return 1 ; return 0 ; } ) ; for ( i = 0 ; i < hairetu . length ; i ++ ) { if ( i === 0 || hairetu [ i ] . kuni !== hairetu [ i - 1 ] . kuni ) { hairetu [ i ] . jyun = 1 ; } else { hairetu [ i ] . jyun = hairetu [ i - 1 ] . jyun + 1 ; } } for ( i = 0 ; i < hairetu . length ; i ++ ) { bangou = length_plus ( hairetu [ i ] . kuni ) + length_plus ( hairetu [ i ] . jyun ) ; hairetu [ i ] . bangou = bangou ; } hairetu . sort ( function ( a , b ) { if ( a . shi < b . shi ) return - 1 ; if ( a . shi > b . shi ) return 1 ; return 0 ; } ) ; for ( i = 0 ; i < hairetu . length ; i ++ ) { console . log ( hairetu [ i ] . bangou ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { const a = Number ( input . split ( " \n " ) [ 0 ] ) const e = Number ( input . split ( " \n " ) [ 4 ] ) const k = Number ( input . split ( " \n " ) [ 5 ] ) if ( e - a <= k ) { console . log ( " Yay! " ) } else { console . log ( " :( " ) } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
" use strict " ; function main ( input ) { input = input . split ( / \n / ) ; const n = input [ 0 ] ; input = input [ 1 ] . split ( " " ) ; let ans = " Three " ; for ( let v in input ) { if ( input [ v ] == " Y " ) { ans = " Four " ; break ; } } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
function Scanner ( input ) { var self = this ; self . itemNo = 0 ; self . orgStr = input ; self . splitedStrs = ( function ( target ) { var result = [ ] ; var target = target . replace ( / [\n \t]+ / g , " " ) ; var strs = target . split ( " " ) ; for ( var i = 0 , len = strs . length ; i < len ; i ++ ) { result . push ( strs [ i ] ) ; } return result ; } ( input ) ) ; self . next = function ( ) { var result = self . splitedStrs [ self . itemNo ] ; self . itemNo ++ ; return ( result != null ) ? result : null ; } self . nextInt = function ( ) { var result = self . splitedStrs [ self . itemNo ] ; self . itemNo ++ ; return ( result != null ) ? parseInt ( result ) : null ; } self . nextBigDecimal = function ( ) { var result = self . splitedStrs [ self . itemNo ] ; self . itemNo ++ ; return ( result != null ) ? parseFloat ( result ) : null ; } self . nextByte = function ( ) { var result = self . splitedStrs [ self . itemNo ] ; self . itemNo ++ ; return ( result != null ) ? new Int8Array ( result ) : null ; } } function Main ( sc ) { var A = sc . nextInt ( ) ; var B = sc . nextInt ( ) ; var H = sc . nextInt ( ) ; var M = sc . nextInt ( ) ; var radH = H * 30 + M * 0.5 ; var radM = M * 6 ; var radC = radH - radM ; if ( radC < 0 ) radC = - 1 * radC ; C2 = Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( radC * ( Math . PI / 180 ) ) ; C = Math . sqrt ( C2 ) ; console . log ( C ) ; } Main ( new Scanner ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; console . log ( K === 1 ? 0 : N - K ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { const n = parseInt ( input , 10 ) ; const nums = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; const ans = nums . find ( v => n >= v ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = arg [ 0 ] . split ( " " ) . map ( n => ~ ~ n ) ; console . log ( ~ ~ N . sort ( ( a , b ) => a - b ) . join ( " " ) === 1479 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var N , M ; input = input . split ( " \n " ) ; input = input [ 0 ] . split ( " " ) ; N = input [ 0 ] ; M = input [ 1 ] ; var mod = 1000000000 + 7 ; var result = 1 ; if ( Math . abs ( N - M ) >= 2 ) { console . log ( 0 ) ; } else if ( Math . abs ( N - M ) == 1 ) { for ( var i = 1 ; i <= N ; i ++ ) { result *= i ; result %= mod ; } for ( var i = 1 ; i <= M ; i ++ ) { result *= i ; result %= mod ; } console . log ( result ) ; } else if ( Math . abs ( N - M ) == 0 ) { result = 1 ; for ( var i = 1 ; i <= N ; i ++ ) { result *= i ; result %= mod ; } for ( var i = 1 ; i <= M ; i ++ ) { result *= i ; result %= mod ; } result *= 2 ; result %= mod ; console . log ( result ) ; } } function factorial ( n ) { var result = 1 ; for ( var i = 1 ; i <= n ; i ++ ) { result = ( result * i ) % 1000000007 ; } return result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( " fs " ) . readFileSync ( 0 , " utf8 " ) ; var a = input . match ( / \d+ / g ) . map ( Number ) ; var x = Math . abs ( a [ 0 ] - a [ 1 ] ) , y = Math . abs ( a [ 1 ] - a [ 2 ] ) , z = Math . abs ( a [ 2 ] - a [ 0 ] ) ; var ans = x + y + z - Math . max ( x , y , z ) ; console . log ( ans ) ;
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , result = 0 , avg = function ( data ) { var sum = 0 , len = data . length ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < X . length ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( ( args => { const [ [ N , M ] , ... tmp ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; const p = Array . from ( { length : N } , _ => [ ] ) ; for ( let i = 0 ; i < M ; i ++ ) { const [ P , Y ] = tmp [ i ] ; p [ P - 1 ] . push ( [ i , Y ] ) ; } p . forEach ( r => r . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ) ; const a = Array . from ( tmp , ( [ p ] ) => ` ${ p } ` . padStart ( 6 , 0 ) ) ; p . forEach ( r => r . forEach ( ( [ i ] , j ) => a [ i ] += ` ${ j + 1 } ` . padStart ( 6 , 0 ) ) ) return a . join ` \n ` ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function parse ( input ) { return input . trim ( ) . split ( " " ) . map ( item => parseInt ( item , 10 ) ) } function f ( arr ) { return arr . sort ( ( a , b ) => b - a ) . reduce ( ( acc , n , i , arr ) => acc + ( i === 0 ? 0 : arr [ i - 1 ] - arr [ i ] ) , 0 ) } module . exports = { parse , f , } function Main ( input ) { const arr = parse ( input ) console . log ( f ( arr ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; var args = input [ 0 ] . split ( " " ) ; var sum = 0 ; args . forEach ( function ( a ) { sum = sum + Number ( a ) ; } ) ; sum == 17 ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( x * x * x ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const [ A , B ] = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) if ( A <= 5 ) { console . log ( 0 ) } else if ( A <= 12 ) { console . log ( B / 2 ) } else { console . log ( B ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; let A = xs [ 0 ] * xs [ 1 ] ; let B = xs [ 2 ] * xs [ 3 ] ; if ( A >= B ) { console . log ( A ) ; } else if ( A <= B ) { console . log ( B ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var ans = 0 ; if ( A >= 13 ) { ans = B ; } else if ( A >= 6 ) { ans = B / 2 ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const NM = input [ 0 ] . split ( ' ' ) . map ( Number ) ; const N = NM [ 0 ] ; const M = NM [ 1 ] ; const As = input . slice ( 1 , N + 1 ) ; const Bs = input . slice ( N + 1 , N + M + 1 ) ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { let flag = true ; for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] !== Bs [ bx ] [ by ] ) { flag = false ; break ; } } if ( ! flag ) break ; } if ( flag ) { console . log ( ' Yes ' ) ; process . exit ( 0 ) ; } } } console . log ( ' No ' ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; const inputs = input . split ( " \n " ) . map ( i => + i ) ; const exec = ( inputs ) => { const k = inputs . pop ( ) ; const yay = ( inputs [ inputs . length - 1 ] - inputs [ 0 ] ) <= k ; console . log ( yay ? " Yay! " : " :( " ) ; } exec ( inputs ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' \n ' ) const x = [ ] let cnt = 0 for ( let i = 1 ; i < args . length ; i ++ ) { x . push ( args [ i ] . split ( ' ' ) . map ( Number ) ) } for ( let i = 0 ; i < x . length ; i ++ ) { for ( let j = 0 ; j < x . length ; j ++ ) { if ( i >= j ) continue let sum = 0 for ( let k = 0 ; k < x [ i ] . length ; k ++ ) { sum += Math . pow ( x [ i ] [ k ] - x [ j ] [ k ] , 2 ) } if ( Math . sqrt ( sum ) % 1 === 0 ) cnt ++ } } console . log ( cnt ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { var N = input [ 0 ] - 0 ; var list = input [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var ans = 0 ; var min = Infinity ; for ( var i = 0 ; i < N ; i ++ ) { if ( min > list [ i ] ) { min = list [ i ] ; ans ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
( ( input ) => { const data = input . split ( ' \n ' ) ; const line1 = data [ 0 ] . split ( ' ' ) ; const N = + line1 [ 0 ] ; const D = + line1 [ 1 ] ; const coords = data . slice ( 1 , N + 1 ) . map ( ( line ) => line . replace ( / \s\s / g , ' ' ) . split ( ' ' ) . filter ( Boolean ) . map ( Number ) ) ; console . log ( coords . reduce ( ( total , coord1 , i ) => ( total + coords . slice ( i + 1 ) . reduce ( ( count , coord2 ) => ( Number . isInteger ( distance ( coord1 , coord2 , D ) ) ? count + 1 : count ) , 0 ) ) , 0 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function distance ( coords1 , coords2 , D ) { var sum = 0 ; for ( var i = 0 ; i < D ; i += 1 ) { sum += Math . pow ( coords1 [ i ] - coords2 [ i ] , 2 ) ; } return Math . sqrt ( sum ) ; }
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) . map ( v => v . split ( ' ' ) ) const N = parseInt ( input [ 0 ] [ 0 ] , 10 ) const D = parseInt ( input [ 0 ] [ 1 ] , 10 ) const p = input . slice ( 1 ) let count = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let sum = 0 for ( let k = 0 ; k < D ; k ++ ) { sum += Math . pow ( p [ i ] [ k ] - p [ j ] [ k ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( sum ) ) ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) ; Array . prototype . uniq = function ( ) { tmp = { } ; tmp_arr = [ ] ; for ( var i = 0 ; i < this . length ; i ++ ) { tmp [ this [ i ] ] = i ; } for ( i in tmp ) { tmp_arr . push ( i ) ; } return tmp_arr ; } var s = input [ 1 ] . split ( / \s / g ) . uniq ( ) ; console . log ( s . length === 3 ? " Three " : " Four " ) ;
function Main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( x => parseFloat ( x ) ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var h = input [ 2 ] ; var m = input [ 3 ] ; var angle = ( ( h + m / 60.0 ) / 12.0 - m / 60.0 ) * 2.0 * Math . PI ; var cos = Math . cos ( angle ) ; var ans = Math . sqrt ( a ** 2.0 + b ** 2.0 - 2.0 * a * b * cos ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var a = input . trim ( ) . split ( / \s+ / ) . map ( ( e ) => { return Number ( e ) } ) . sort ( ) ; console . log ( a [ 0 ] == 5 && a [ 1 ] == 5 && a [ 2 ] == 7 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var arr = input . split ( ' \n ' ) ; var c = [ ] ; c . push ( arr [ 0 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 1 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 2 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; if ( ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) ) { console . log ( ' Yes ' ) ; } else { console . log ( ' No ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) let ans = input [ 0 ] - input [ 1 ] if ( input [ 1 ] === 1 ) ans = 0 console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( s ) { s = s . split ( " " ) ; for ( var i = 0 ; i < 4 ; i ++ ) s [ i ] = parseInt ( s [ i ] ) ; console . log ( ( s [ 0 ] * s [ 1 ] > s [ 2 ] * s [ 3 ] ) ? ( s [ 0 ] * s [ 1 ] ) : ( s [ 2 ] * s [ 3 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var NM = input [ 0 ] . split ( " " ) ; var N = NM [ 0 ] * 1 ; var M = NM [ 1 ] * 1 ; var prefs = [ ] ; var cities = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var a = input [ i + 1 ] ; var P = a . split ( " " ) [ 0 ] * 1 ; var Y = a . split ( " " ) [ 1 ] * 1 ; if ( prefs [ P ] === undefined ) prefs [ P ] = [ ] ; prefs [ P ] . push ( { i : i , pref : P , year : Y } ) ; } for ( var i = 0 ; i <= N ; i ++ ) { var pref = prefs [ i ] ; if ( ! pref ) continue ; pref . sort ( function ( a , b ) { return a . year - b . year ; } ) for ( var j = 0 ; j < pref . length ; j ++ ) { pref [ j ] . ID = ( " 00000 " + pref [ j ] . pref ) . slice ( - 6 ) + ( " 00000 " + ( j + 1 ) ) . slice ( - 6 ) ; cities . push ( pref [ j ] ) ; } } cities . sort ( function ( a , b ) { return a . i - b . i ; } ) return cities . map ( a => a . ID ) . join ( " \n " ) ; } console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const N = parseInt ( input [ 0 ] ) const p = input [ 1 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) let count = 0 let min = Infinity for ( let i = 0 ; i < N ; ++ i ) { if ( p [ i ] < min ) { min = p [ i ] count ++ } } console . log ( count ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg [ 5 ] ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const M = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const PY = arg . slice ( 1 , M + 1 ) . map ( n => n . split ( " " ) . map ( l => parseInt ( l ) ) ) ; const list = [ ] ; for ( let i in PY ) { let map = { p : PY [ i ] [ 0 ] , y : PY [ i ] [ 1 ] , originIdx : i } ; list . push ( map ) ; } list . sort ( ( a , b ) => ( a . p - b . p ) || ( a . y - b . y ) ) ; const addZero = n => { const zeros = [ ] ; for ( let i = 0 ; i < 6 - String ( n ) . length ; i ++ ) { zeros . push ( " 0 " ) ; } return zeros . join ( " " ) + String ( n ) ; } let temp = [ ] ; let oldness = 1 ; for ( let i in list ) { if ( list [ i - 1 ] && list [ i - 1 ] . p !== list [ i ] . p ) { oldness = 1 ; } let first = addZero ( list [ i ] . p ) ; let last = addZero ( oldness ) ; let map = { id : first + last , originIdx : list [ i ] . originIdx } temp . push ( map ) ; oldness ++ ; } temp . sort ( ( a , b ) => a . originIdx - b . originIdx ) ; let answer = [ ] ; for ( let i in temp ) { answer . push ( temp [ i ] . id ) ; } console . log ( answer . join ( " \n " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
" use strict " ; function Main ( input ) { let at = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let k = at [ 5 ] ; let d = at [ 4 ] - at [ 0 ] ; console . log ( ( d > k ) ? ' :( ' : ' Yay! ' ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const make6digit = num => { num = String ( num ) ; let digit = num . split ( " " ) . length ; if ( digit < 6 ) { for ( let i = 0 ; i < 6 - digit ; i ++ ) { num = " 0 " + num ; } } return num ; } const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const M = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const cities = arg . slice ( 1 , M + 1 ) ; let data = [ ] ; for ( let i in cities ) { let tempPrefecture = parseInt ( cities [ i ] . split ( " " ) [ 0 ] ) ; let tempBirth = parseInt ( cities [ i ] . split ( " " ) [ 1 ] ) ; data . push ( { prefecture : tempPrefecture , birth : tempBirth , index : i } ) } data . sort ( ( a , b ) => { if ( a . prefecture < b . prefecture ) { return - 1 ; } if ( a . prefecture > b . prefecture ) { return 1 ; } if ( a . birth < b . birth ) { return - 1 ; } if ( a . birth > b . birth ) { return 1 ; } } ) ; let num = 1 ; for ( let i in data ) { if ( data [ i - 1 ] ) { if ( data [ i ] . prefecture !== data [ i - 1 ] . prefecture ) { num = 1 ; } } let firstHalf = make6digit ( data [ i ] . prefecture ) ; let lastHalf = make6digit ( num ) ; const id = firstHalf + lastHalf ; data [ i ] . id = id ; num ++ ; } data . sort ( ( a , b ) => a . index - b . index ) ; for ( let i in data ) { console . log ( data [ i ] . id ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { console . log ( Math . pow ( input [ 0 ] , 3 ) ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' ' ) ; main ( input ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var K = parseInt ( line [ 0 ] ) ; var S = parseInt ( line [ 1 ] ) ; var roop = Math . min ( K , S ) ; var ans = 0 ; for ( var A = 0 ; A <= roop ; A ++ ) { if ( S - K - A >= 0 && 2 * K - S + A + 1 > 0 ) { ans += 2 * K - S + A + 1 ; } else if ( S - K - A < 0 && S - A + 1 > 0 ) { ans += S - A + 1 ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const Number = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const X = parseInt ( inputs [ 0 ] , 10 ) console . log ( Number ( X ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function main ( input ) { const args = input . split ( " " ) ; const A = parseInt ( args [ 0 ] ) ; const B = parseInt ( args [ 1 ] ) ; let ans = ' ' ; if ( A < 6 ) { ans = 0 ; } else if ( A <= 12 ) { ans = B / 2 ; } else { ans = B ; } console . log ( ans ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function combination ( input ) { var max = parseInt ( input . split ( " " ) [ 0 ] ) ; var sum = parseInt ( input . split ( " " ) [ 1 ] ) ; var count = 0 ; if ( sum <= max ) { for ( var x = 0 ; x < sum + 1 ; x ++ ) { for ( var y = 0 ; y < sum + 1 - x ; y ++ ) { count ++ ; } } } else if ( sum > max ) { for ( var x = 0 ; x < max + 1 ; x ++ ) { if ( sum - x <= max ) { for ( var y = 0 ; y < sum + 1 - x ; y ++ ) { count ++ ; } } else if ( sum - x > max ) { for ( var y = 0 ; y < max + 1 ; y ++ ) { if ( sum - x - y <= max ) { count ++ ; } else if ( sum - x - y > max ) { } } } } } console . log ( count ) ; } combination ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function Main ( input ) { const args = input . trim ( ) . split ( ' \n ' ) ; const n = args [ 0 ] ; const p = args [ 1 ] . split ( ' ' ) . map ( Number ) ; let max = 1e10 ; let cnt = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( p [ i ] < max ) cnt ++ , max = p [ i ] ; } console . log ( cnt ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( args ) { const input = args . trim ( ) . split ( " " ) ; const [ A , B , H , M ] = input ; const c = ( H / 12 + M / ( 12 * 60 ) - M / 60 ) * Math . PI * 2 ; const ans = ( A ** 2 + B ** 2 - 2 * A * B * Math . cos ( c ) ) ** 0.5 ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( input ) => { input = input . trim ( ) . split ( " \n " ) ; var p = input . filter ( ( v , i ) => i < 5 ) ; var k = input [ 5 ] ; var ans = true ; for ( var i = 0 ; i <= 4 ; i ++ ) { for ( var j = i + 1 ; j <= 4 ; j ++ ) { if ( Math . abs ( p [ i ] - p [ j ] ) > k ) ans = false ; } } console . log ( ans ? " Yay! " : " :( " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
function Main ( input ) { var n = Number ( input ) var ans = 1 ; while ( ans <= n ) { ans *= 2 ; } ans /= 2 ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . split ( " " ) var a = input [ 0 ] var b = input [ 1 ] var h = input [ 2 ] var m = input [ 3 ] var c = h * 30 + m * 30 / 60 ; var d = m * 6 ; if ( Math . abs ( c - d ) < 180 ) { var theta = Math . abs ( c - d ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } else { var theta = ( 360 - Math . abs ( c - d ) ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . forEach ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputArray = input . split ( ' ' ) ; var a = inputArray [ 0 ] ; var b = inputArray [ 1 ] ; var c = inputArray [ 2 ] ; var d = inputArray [ 3 ] ; var result = ( a * b > c * d ) ? a * b : c * d ; console . log ( result ) ;
" use strict " ; function Main ( input ) { const params = input . split ( " " ) . map ( Number ) ; const K = params [ 0 ] ; const S = params [ 1 ] ; let count = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { const z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; for ( var cnt = 0 ; cnt < input . length ; cnt ++ ) { input [ cnt ] = parseFloat ( input [ cnt ] ) ; } var degH = ( input [ 2 ] / 12.0 + input [ 3 ] / ( 12.0 * 60.0 ) - input [ 3 ] / 60.0 ) * Math . PI * 2 ; var ans = Math . pow ( input [ 0 ] , 2 ) + Math . pow ( input [ 1 ] , 2 ) - ( 2 * input [ 0 ] * input [ 1 ] ) * Math . cos ( degH ) ; var ans = Math . sqrt ( ans ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( var i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var testValue = i ; while ( testValue >= 2 && testValue % 2 == 0 ) { divideCount += 1 ; testValue /= 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( inputString ) { let input = inputString . split ( " \n " ) ; let string = input [ 0 ] ; let point = parseInt ( input [ 1 ] ) ; let which = 0 ; while ( point ) { if ( string . length - 1 == which ) { point = point % 26 ; var code = ( string [ which ] . charCodeAt ( 0 ) + point ) ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } var lastLetter = String . fromCharCode ( code ) ; point = 0 ; string = string . slice ( 0 , which ) + lastLetter + string . slice ( which + 1 ) ; } else { if ( ( 27 - ( string [ which ] . charCodeAt ( 0 ) - 97 + 1 ) ) <= point && ! ( string [ which ] == " a " ) ) { point = point - ( 27 - ( string [ which ] . charCodeAt ( 0 ) - 97 + 1 ) ) ; string = string . slice ( 0 , which ) + " a " + string . slice ( which + 1 ) ; } ++ which ; } } console . log ( string ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] >= 13 ? a [ 1 ] : a [ 0 ] >= 6 ? a [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var max = parseInt ( tmp [ 0 ] , 10 ) ; var sum = parseInt ( tmp [ 1 ] , 10 ) ; var count = 0 ; if ( sum - 2 * max >= 0 ) { for ( i = sum - 2 * max ; i <= max ; i ++ ) { if ( sum - max - i >= 0 ) { count += 2 * max - sum + i + 1 ; } else { count += sum - i + 1 ; } } } else if ( sum >= max ) { for ( i = 0 ; i <= max ; i ++ ) { if ( sum - max - i >= 0 ) { count += 2 * max - sum + i + 1 ; } else { count += sum - i + 1 ; } } } else { for ( i = 0 ; i <= sum ; i ++ ) { count += sum - i + 1 ; } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var main = function main ( input ) { var K = input . split ( ' ' ) [ 0 ] ; var S = input . split ( ' ' ) [ 1 ] ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { var amari = S - i - j ; if ( amari <= K && amari >= 0 ) { count ++ ; } } } console . log ( count ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; while ( true ) { var [ n , m ] = arr . shift ( ) . split ( " " ) . map ( Number ) ; if ( n == 0 && m == 0 ) break ; var x = m / n ; var sum = 0 ; var a = arr . shift ( ) . split ( " " ) . map ( Number ) ; a . forEach ( v => { if ( v >= x ) sum += x ; else sum += v ; } ) ; console . log ( sum ) ; }
function main ( input ) { var val = input . split ( ' ' ) ; var K = parseInt ( val [ 0 ] ) ; var S = parseInt ( val [ 1 ] ) ; var sum = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var value = S - ( i + j ) ; if ( value >= 0 && value <= K ) { sum ++ ; } } } console . log ( sum ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( args ) { input = args . split ( " \n " ) ; const N = parseInt ( input [ 0 ] ) ; var count = 0 ; var maxCount = 0 ; var result = 1 ; for ( var i = 1 ; i <= N ; i ++ ) { count = 0 ; var j = i ; while ( true ) { if ( j % 2 == 0 ) { count ++ ; j /= 2 ; } else { break ; } if ( maxCount < count ) { maxCount = count ; result = i ; } } } console . log ( result ) ; }
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; console . log ( cube ( input [ 0 ] ) ) ; } ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const a1 = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const a2 = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const a3 = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var arr = [ a1 , a2 , a3 ] var max = Math . max . apply ( null , arr ) ; var min = Math . min . apply ( null , arr ) ; console . log ( max - min ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; if ( a > 12 ) { console . log ( b ) ; } else if ( a <= 12 && a >= 6 ) { console . log ( b / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp [ 0 ] , 10 ) ; var D = parseInt ( tmp [ 1 ] , 10 ) ; var intInput = [ ] ; for ( var i = 1 ; i <= N ; i ++ ) { intInput [ i - 1 ] = toIntAll ( input [ i ] . split ( " " ) ) ; } var count = 0 ; for ( var i = 0 ; i < ( N - 1 ) ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var result = calcDistance ( intInput [ i ] , intInput [ j ] ) ; if ( Number . isInteger ( result ) ) { count ++ ; } } } console . log ( ' %d ' , count ) ; } function toIntAll ( input ) { var out = [ ] for ( var i = 0 ; i < input . length ; i ++ ) { out [ i ] = parseInt ( input [ i ] ) ; } return out ; } function calcDistance ( yArr , zArr ) { var sum = 0 ; for ( var i = 0 ; i < yArr . length ; i ++ ) { sum += Math . pow ( yArr [ i ] - zArr [ i ] , 2 ) ; } sum = Math . sqrt ( sum ) ; ; return sum ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
var Main = input => { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp1 [ 0 ] , 10 ) ; var D = parseInt ( tmp1 [ 1 ] , 10 ) ; var X = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { X [ i ] = input [ i + 1 ] . split ( " " ) ; } var count = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = 0 ; j < N ; j ++ ) { if ( i === j ) { break ; } else { var diff = [ ] ; var value = 0 ; for ( var k = 0 ; k < D ; k ++ ) { diff [ k ] = Math . pow ( X [ i ] [ k ] - X [ j ] [ k ] , 2 ) ; } value = Math . sqrt ( diff . reduce ( ( total , data ) => { return total + data } ) ) ; if ( Number . isInteger ( value ) ) { count ++ ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b , c , d ] = input . split ( " " ) . map ( Number ) ; if ( ( a * b ) > ( c * d ) ) { console . log ( a * b ) ; } else if ( ( a * b ) < ( c * d ) ) { console . log ( c * d ) ; } else { console . log ( a * b ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = arg => { arg = arg . trim ( ) . split ( " \n " ) const K = ~ ~ arg [ 0 ] . split ( " " ) [ 0 ] ; const S = ~ ~ arg [ 0 ] . split ( " " ) [ 1 ] ; let answer = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { let z = S - i - j ; if ( 0 <= z && z <= K ) { answer ++ ; } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var input = parseInt ( input , 10 ) ; const num = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; for ( var i = num . length - 1 ; - 1 < i ; i -- ) { if ( num [ i ] <= input ) { console . log ( num [ i ] ) ; break ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; C = new Array ( M ) ; P = new Array ( 0 ) ; for ( i = 0 ; i < M ; i ++ ) { tmp = input [ i + 1 ] . split ( " " ) ; Csub = [ parseInt ( tmp [ 0 ] ) , parseInt ( tmp [ 1 ] ) , i ] ; C [ i ] = Csub ; } C . sort ( function ( a , b ) { return ( a [ 0 ] - b [ 0 ] || a [ 1 ] - b [ 1 ] ) } ) ; for ( i = 0 ; i < M ; i ++ ) { var y = " " ; c = ` ${ C [ i ] [ 0 ] } ` . slice ( - 6 ) ; if ( i == 0 ) { var cnt = 1 ; } else if ( C [ i ] [ 0 ] != C [ i - 1 ] [ 0 ] ) { cnt = 1 ; } else { cnt ++ ; } y = ` ${ cnt } ` . slice ( - 6 ) ; P . push ( [ ` ${ c } ${ y } ` , C [ i ] [ 2 ] ] ) ; } P . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; var ans = " " ; for ( i = 0 ; i < M ; i ++ ) { if ( i != M - 1 ) { ans = ans + P [ i ] [ 0 ] + " \n " ; } else { ans = ans + P [ i ] [ 0 ] ; } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var kotae ; kotae = parseInt ( input , 10 ) ; kotae = kotae * kotae * kotae ; console . log ( kotae ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( Math . max ( a [ 0 ] , Math . max ( a [ 1 ] , a [ 2 ] ) ) - Math . min ( a [ 0 ] , Math . min ( a [ 1 ] , a [ 2 ] ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { let v = input . trim ( ) . split ( ' \n ' ) . map ( ( v ) => parseInt ( v ) ) ; if ( v [ 4 ] - v [ 0 ] > v [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const N = args [ 0 ] ; const ary = args [ 1 ] . split ( ' ' ) ; let ans = ' Three ' ; ary . forEach ( elm => { if ( elm === ' Y ' ) { ans = ' Four ' } ; } ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) [ 0 ] . split ( ' ' ) a = [ ] for ( i = 0 ; i < 3 ; i ++ ) { a [ inp [ i ] ] = ( a [ inp [ i ] ] || 0 ) + 1 } console . log ( a [ 5 ] == 2 && a [ 7 ] == 1 ? ' YES ' : ' NO ' )
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) if ( input [ 4 ] - input [ 0 ] <= input [ 5 ] ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
' use strict ' function main ( s ) { const houses = s . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const min = Math . min ( ... houses ) ; const max = Math . max ( ... houses ) ; const answer = max - min ; console . log ( answer ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input . trim ( ) ; input = input . split ( " \n " ) ; var N = input [ 0 ] ; var arr = input [ 1 ] . split ( " " ) . map ( Number ) ; var ans = 0 ; var low = 9999999999999999 ; for ( var i = 0 ; i < N ; i ++ ) { if ( low >= arr [ i ] ) { ans ++ ; low = arr [ i ] ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ; function arr1dto2d ( arr ) { for ( var i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = arr [ i ] . split ( " " ) . map ( Number ) ; } return arr ; }
function Main ( input ) { var an = input . split ( " \n " ) ; var k = an [ 5 ] ; an . pop ( ) ; for ( i = 0 ; i <= 4 ; i ++ ) { an [ i ] = parseInt ( an [ i ] , 10 ) ; } for ( j = 0 ; j <= 4 ; j ++ ) { for ( s = 0 ; s <= 4 ; s ++ ) { if ( j <= s ) { continue ; } else { var dist = Math . abs ( an [ j ] - an [ s ] ) ; var judge = dist <= k ; if ( judge == false ) { console . log ( " :( " ) ; break ; } if ( judge == true && j == 4 && s == 3 ) { console . log ( " Yay! " ) ; } } } if ( judge == false ) { break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { lines = input . split ( " \n " ) N = lines [ 0 ] . split ( ' ' ) [ 0 ] K = lines [ 0 ] . split ( ' ' ) [ 1 ] console . log ( K == 1 ? 0 : N - K ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function zero_padding_number ( num ) { return ( ' 000000 ' + num . toString ( ) ) . slice ( - 6 ) ; } function main ( input ) { const lines = input . split ( ' \n ' ) ; const N = parseInt ( lines [ 0 ] . split ( ' ' ) [ 0 ] ) ; const M = parseInt ( lines [ 0 ] . split ( ' ' ) [ 1 ] ) ; var pys = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var line = lines [ 1 + i ] . split ( ' ' ) . map ( x => parseInt ( x ) ) pys . push ( [ i , line [ 0 ] , line [ 1 ] ] ) ; } var p_y_sorted = pys . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) { return a [ 2 ] - b [ 2 ] ; } return a [ 1 ] - b [ 1 ] ; } ) var current_p = 0 ; var current_city_index = 1 ; for ( var i = 0 ; i < p_y_sorted . length ; i ++ ) { var current_city = p_y_sorted [ i ] ; if ( current_p != current_city [ 1 ] ) { current_p = current_city [ 1 ] current_city_index = 1 ; } var id = zero_padding_number ( current_city [ 1 ] ) + zero_padding_number ( current_city_index ) ; p_y_sorted [ i ] . push ( id ) ; current_city_index ++ ; } const stdin_sorted_cities = p_y_sorted . sort ( function ( a , b ) { return a [ 0 ] - b [ 0 ] ; } ) for ( var i = 0 ; i < M ; i ++ ) { console . log ( stdin_sorted_cities [ i ] [ 3 ] ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var abhm = lines [ 0 ] . split ( ' ' ) ; var a = Number ( abhm [ 0 ] ) ; var b = Number ( abhm [ 1 ] ) ; var h = Number ( abhm [ 2 ] ) ; var m = Number ( abhm [ 3 ] ) ; var hkaku = h * 30 + m * 0.5 ; var mkaku = m * 6 ; var kaku = Math . abs ( hkaku - mkaku ) ; var kaku2 = 360 - Math . abs ( hkaku - mkaku ) ; kaku = Math . min ( kaku2 , kaku ) ; kaku = Math . cos ( kaku * ( Math . PI / 180 ) ) ; var ans = ( a * a ) + ( b * b ) - ( 2 * a * b * kaku ) ; console . log ( Math . sqrt ( ans ) ) ; } ) ;
" use strict " ; function main ( input ) { input = input . split ( ' ' ) ; const K = parseInt ( input [ 0 ] ) ; const S = parseInt ( input [ 1 ] ) ; let count = 0 if ( S < 0 || S > 3 * K ) { } else if ( K < 2 || K > 2500 ) { } else if ( S === 3 * K ) { count = 1 } else { for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { const Z = S - ( i + j ) if ( Z >= 0 && Z <= K ) { count ++ } } } } console . log ( count ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
config = { input : ' /dev/stdin ' , newline : ' \n ' } ; n = Number ( require ( ' fs ' ) . readFileSync ( config . input , ' ascii ' ) ) ; console . log ( n * n * n ) ;
function Main ( input ) { input = parseInt ( input ) ; let x = input ; let y = Math . floor ( input / 2 ) ; let arr = { } ; for ( let i = y ; i <= x ; i ++ ) { let B = yakusu ( i ) ; arr [ i ] = B ; } var keys = [ ] ; for ( var key in arr ) keys . push ( key ) ; function Compare ( a , b ) { return arr [ a ] - arr [ b ] ; } keys . sort ( Compare ) ; console . log ( parseInt ( keys [ keys . length - 1 ] ) ) ; } function yakusu ( num ) { let result = 0 ; while ( num > 0 ) { if ( num % 2 === 0 ) { result ++ ; num = num / 2 ; } else { break ; } } return result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { const x = Number ( input ) console . log ( x * x * x ) } ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
const main = ( inputs ) => { var N = inputs [ 0 ] . split ( " " ) [ 0 ] ; var D = inputs [ 0 ] . split ( " " ) [ 1 ] ; var list = inputs . filter ( ( v , i ) => i > 0 ) . map ( v => v . split ( " " ) ) ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var dis = 0 ; for ( var k = 0 ; k < D ; k ++ ) { dis += Math . pow ( list [ i ] [ k ] - list [ j ] [ k ] , 2 ) ; } if ( Math . sqrt ( dis ) == ~ ~ Math . sqrt ( dis ) ) ans ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) . trim ( ) . split ( " \n " ) ) ;
' use strict ' const main = ( ) => { let arr2 = [ ] ; const arr = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; const a = arr . split ( " \n " ) ; const k = a [ 5 ] ; arr2 . push ( Math . abs ( a [ 0 ] - a [ 1 ] ) ) ; arr2 . push ( Math . abs ( a [ 0 ] - a [ 2 ] ) ) ; arr2 . push ( Math . abs ( a [ 0 ] - a [ 3 ] ) ) ; arr2 . push ( Math . abs ( a [ 0 ] - a [ 4 ] ) ) ; arr2 . push ( Math . abs ( a [ 1 ] - a [ 2 ] ) ) ; arr2 . push ( Math . abs ( a [ 1 ] - a [ 3 ] ) ) ; arr2 . push ( Math . abs ( a [ 1 ] - a [ 4 ] ) ) ; arr2 . push ( Math . abs ( a [ 2 ] - a [ 3 ] ) ) ; arr2 . push ( Math . abs ( a [ 2 ] - a [ 3 ] ) ) ; arr2 . push ( Math . abs ( a [ 3 ] - a [ 4 ] ) ) ; let c ; arr2 . map ( ( val ) => { if ( val > k ) { c = 0 ; } } ) ; if ( c == 0 ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } ; main ( ) ;
( stdin => { const getA = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const X = parseInt ( inputs [ 0 ] , 10 ) console . log ( getA ( X ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) let cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] const nexts = ( n ) => cin . slice ( cid , cid += n ) . map ( i => parseInt ( i ) ) const [ A , B , H , M ] = nexts ( 4 ) const long = M * 6.0 const short = ( H + M / 60 ) * 30.0 let angle = Math . abs ( long - short ) const result = Math . sqrt ( A ** 2 + B ** 2 - 2 * A * B * Math . cos ( angle * ( Math . PI / 180 ) ) ) console . log ( result )
function Main ( input ) { input = input . split ( " " ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { const A = parseInt ( input [ 0 ] ) ; const E = parseInt ( input [ 4 ] ) ; const K = parseInt ( input [ 5 ] ) ; console . log ( ( E - A > K ) ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
( function ( ) { ' use strict ' ; var fs = require ( ' fs ' ) ; var contents = fs . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ; var cubic = function ( s ) { var x = parseInt ( s ) ; return x * x * x ; } console . log ( cubic ( contents ) ) ; } ) ( ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var numbers = chunk . toString ( ) . split ( " " ) ; var S = parseInt ( numbers . pop ( ) ) , K = parseInt ( numbers . pop ( ) ) ; var c = 0 ; for ( var X = 0 ; X <= K ; X ++ ) for ( var Y = 0 ; Y <= K ; Y ++ ) { var Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { c ++ ; } } process . stdout . write ( c . toString ( ) ) ; process . exit ( ) ; } ) ;
const main = function ( input ) { let num = 3 ; let ans = input ; for ( let i = 0 ; i < num - 1 ; i ++ ) { ans *= input ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var jigen = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; var len = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; var output = 0 ; for ( var i = 1 ; i < len + 1 ; i ++ ) { for ( var j = i + 1 ; j < len + 1 ; j ++ ) { var tmpKyori = 0 ; var iZahyo = input . split ( " \n " ) [ i ] ; var jZahyo = input . split ( " \n " ) [ j ] ; for ( var k = 0 ; k < jigen ; k ++ ) { var iTmpZahyo = parseInt ( iZahyo . split ( " " ) [ k ] ) ; var jTmpZahyo = parseInt ( jZahyo . split ( " " ) [ k ] ) ; tmpKyori += Math . pow ( iTmpZahyo - jTmpZahyo , 2 ) ; } var kekka = Math . sqrt ( tmpKyori ) ; if ( kekka . toString ( ) . indexOf ( " . " ) == - 1 ) { output ++ ; } } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var lines = [ ] ; var result = [ ] ; var readline = require ( " readline " ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var N = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var M = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; lines . shift ( ) ; var array = lines . map ( value => value . split ( " " ) . map ( value => Number ( value ) ) ) ; for ( var i = 0 ; i < M ; i ++ ) { array [ i ] . push ( i ) ; } var city = array . concat ( ) . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; ite = Array ( N + 1 ) . fill ( 0 ) ; for ( var i = 0 ; i < M ; i ++ ) { var ken = city [ i ] [ 0 ] . toString ( ) ; var shi = ( ite [ city [ i ] [ 0 ] ] + 1 ) . toString ( ) ; len = ken . length for ( var x = 0 ; x < 6 - len ; x ++ ) { ken = " 0 " + ken ; } len = shi . length for ( var x = 0 ; x < 6 - len ; x ++ ) { shi = " 0 " + shi ; } city [ i ] . push ( ken + shi ) ; ite [ city [ i ] [ 0 ] ] ++ ; } city . sort ( ( a , b ) => a [ 2 ] - b [ 2 ] ) ; for ( var i = 0 ; i < M ; i ++ ) { console . log ( city [ i ] [ 3 ] ) ; } } ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( num => Number ( num ) ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var c = input [ 2 ] ; var d = input [ 3 ] ; var ab = a * b ; var cd = c * d ; if ( ab >= cd ) { console . log ( ab ) ; } else { console . log ( cd ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \s / g ) ; var a = input [ 0 ] - 0 ; var b = input [ 1 ] - 0 ; var c = input [ 2 ] - 0 ; var d = input [ 3 ] - 0 ; var x = a * b ; var y = c * d ; console . log ( Math . max ( x , y ) ) ;
function Main ( input ) { var values = input . split ( " " ) ; var A = parseInt ( values [ 0 ] , 10 ) ; var B = parseInt ( values [ 1 ] , 10 ) ; var H = parseInt ( values [ 2 ] , 10 ) ; var M = parseInt ( values [ 3 ] , 10 ) ; var hpos = [ A * Math . cos ( ( H + M / 60 ) * 30 * ( Math . PI / 180 ) ) , A * Math . sin ( ( H + M / 60 ) * 30 * ( Math . PI / 180 ) ) ] ; var mpos = [ B * Math . cos ( M * 6 * ( Math . PI / 180 ) ) , B * Math . sin ( M * 6 * ( Math . PI / 180 ) ) ] var dist = Math . sqrt ( Math . pow ( hpos [ 0 ] - mpos [ 0 ] , 2 ) + Math . pow ( hpos [ 1 ] - mpos [ 1 ] , 2 ) ) ; console . log ( ' %d ' , dist ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " \n " ) ; var s = input [ 0 ] ; var N = parseInt ( input [ 1 ] ) ; var sList = new Array ( s . length ) ; var conv = " abcdefghijklmnopqrstuvwxyz " . split ( " " ) ; var convList = { } ; for ( var i = 0 ; i < conv . length ; i ++ ) { convList [ conv [ i ] ] = i ; } for ( var i = 0 ; i < s . length ; i ++ ) { sList [ i ] = convList [ s . slice ( i , i + 1 ) ] ; } for ( var i = 0 ; i < s . length ; i ++ ) { if ( sList [ i ] == 0 && i != s . length - 1 ) { continue ; } if ( i == s . length - 1 ) { sList [ i ] = ( sList [ i ] + N ) % 26 ; continue ; } if ( N == 0 ) { break ; } else if ( N < ( 26 - sList [ i ] ) ) { continue ; } else { var add = 26 - sList [ i ] ; sList [ i ] = ( sList [ i ] + add ) % 26 ; N -= add ; } } var output = " " ; for ( var i = 0 ; i < s . length ; i ++ ) { output += conv [ sList [ i ] ] ; } myout ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) in p = inp . shift ( ) . split ( " " ) . map ( ( x ) => + x ) A = inp . shift ( ) B = inp . shift ( ) H = inp . shift ( ) M = inp . shift ( ) p = 10e10 h = H / 12 * 360 + M / 60 * 360 / 12 h = h * ( Math . PI / 180 ) m = M / 60 * 360 m = m * ( Math . PI / 180 ) t = function ( n ) { return Math . round ( n * p ) / p } ax = A * t ( Math . cos ( h ) ) ay = A * t ( Math . sin ( h ) ) bx = B * t ( Math . cos ( m ) ) by = B * t ( Math . sin ( m ) ) c = Math . sqrt ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) ) console . log ( c )
function Main ( input ) { input = input . split ( " \n " ) ; inputStr = input [ 0 ] . split ( " " ) ; var N = Number . parseInt ( inputStr [ 0 ] ) ; var D = Number . parseInt ( inputStr [ 1 ] ) ; var X_arr = [ ] ; var count = 0 ; for ( var i = 0 ; i < N ; i ++ ) { var tmp = input [ i + 1 ] . split ( " " ) ; X_arr . push ( tmp . map ( tmp => parseInt ( tmp ) ) ) ; } for ( var i1 = 0 ; i1 < N - 1 ; i1 ++ ) { var tmp1 = X_arr [ i1 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i2 = i1 + 1 ; i2 < N ; i2 ++ ) { var cul = 0 ; var tmp2 = X_arr [ i2 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i3 = 0 ; i3 < D ; i3 ++ ) { cul = cul + Math . pow ( tmp1 [ i3 ] - tmp2 [ i3 ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( cul ) ) ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
fs = require ( " fs " ) ; l = fs . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; x = [ ] ; for ( i = 0 ; i < 6 ; i ++ ) { x . push ( parseInt ( l [ i ] ) ) ; } if ( x [ 4 ] - x [ 0 ] <= x [ 5 ] ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; }
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; var k = input . pop ( ) ; var result = ( input . pop ( ) - input . shift ( ) <= k ) ; var ans = result ? ' Yay! ' : ' :( ' ; console . log ( ans ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) K = l [ 0 ] * 1 S = l [ 1 ] * 1 cnt = 0 for ( i = 0 ; i <= K ; i ++ ) { for ( j = 0 ; j <= K ; j ++ ) { t = S - ( i + j ) if ( t >= 0 && t <= K ) { cnt ++ } } } console . log ( cnt )
function main ( input ) { const args = input . split ( ' ' ) ; var arr = [ parseInt ( args [ 0 ] , 10 ) , parseInt ( args [ 1 ] , 10 ) , parseInt ( args [ 2 ] , 10 ) ] ; arr . sort ( ) ; if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const n = parseInt ( input . trim ( ) , 10 ) let maxNum = 0 let maxCnt = - 1 for ( let i = 1 ; i <= n ; i ++ ) { let tmpNum = i let tmpCnt = 0 while ( true ) { if ( tmpNum % 2 === 1 ) break tmpNum /= 2 tmpCnt ++ } if ( tmpCnt > maxCnt ) { maxNum = i maxCnt = tmpCnt } } console . log ( maxNum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
const main = i => { const input = i . split ( / \s / ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a - b ) console . log ( input [ 2 ] - input [ 0 ] ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var antena = [ ] ; for ( var i = 0 ; i < lines . length ; i ++ ) { antena . push ( Number ( lines [ i ] ) ) ; } if ( antena [ antena . length - 1 ] < Math . max . apply ( null , antena ) - Math . min . apply ( null , antena ) ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; S = input [ 1 ] . split ( " " ) ; o = { } ; for ( i of S ) o [ i ] = true ; console . log ( Object . keys ( o ) . length == 3 ? " Three " : " Four " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
Array . prototype . aggregate = function ( ) { return this . reduce ( ( a , b ) => ( a [ b ] = ( a [ b ] || 0 ) + 1 ) && a , { } ) ; } function Main ( input ) { input = input . split ( " \n " ) ; var a = input [ 1 ] . split ( " " ) ; var b = a . aggregate ( ) ; var cnt = 0 ; for ( var c in b ) { cnt ++ ; } return cnt == 3 ? " Three " : " Four " ; } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
function Main ( input ) { var x = parseInt ( input ) ; x = x * x * x ; console . log ( x ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const a = s [ 0 ] ; const b = s [ 1 ] ; const c = s [ 2 ] ; const d = s [ 3 ] ; const ans = Math . max ( a * b , c * d ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { for ( var i = 0 ; i < lines . length ; i ++ ) { console . log ( lines [ i ] * lines [ i ] * lines [ i ] ) ; } } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ; function calc ( x ) { parseInt ( x . trim ( ) , 10 ) return x * x * x ; }
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 1 ] != 1 ) console . log ( input [ 0 ] - input [ 1 ] ) ; else console . log ( 0 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function transTime ( t ) { var temp = t . split ( ' : ' ) ; return + temp [ 0 ] * 60 + + temp [ 1 ] ; } function main ( ) { var temp = input [ 0 ] . split ( ' ' ) , n = + temp [ 0 ] , t = + temp [ 1 ] ; temp = input [ 1 ] . split ( ' ' ) ; var time1 = transTime ( temp [ 0 ] ) , sta1 = temp [ 1 ] , time2 = transTime ( temp [ 2 ] ) , sta2 = temp [ 3 ] , ans = [ ] ; for ( var i = 2 ; i <= n ; i ++ ) { temp = input [ i ] . split ( ' ' ) ; time1 = transTime ( temp [ 0 ] ) ; if ( t <= time1 - time2 ) { ans . push ( [ sta2 , time1 - time2 ] ) ; } sta1 = temp [ 1 ] ; time2 = transTime ( temp [ 2 ] ) ; sta2 = temp [ 3 ] ; } console . log ( ans . length ) ; for ( i = 0 ; i < ans . length ; i ++ ) { console . log ( ans [ i ] [ 0 ] + ' ' + ans [ i ] [ 1 ] ) } }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' ascii ' ) ; var input_stdin = " " ; var input_stdin_array = " " ; var input_currentline = 0 ; process . stdin . on ( ' data ' , function ( data ) { input_stdin += data ; } ) ; process . stdin . on ( ' end ' , function ( ) { input_stdin_array = input_stdin . split ( " \n " ) ; main ( ) ; } ) ; function readLine ( ) { return input_stdin_array [ input_currentline ++ ] ; } function main ( ) { var s = readLine ( ) ; s = s . split ( " " ) ; var N = parseInt ( s [ 0 ] ) ; var M = parseInt ( s [ 1 ] ) ; var A = [ ] ; var B = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { s = readLine ( ) . substr ( 0 , N ) ; A . push ( s ) ; } for ( var i = 0 ; i < M ; i ++ ) { s = readLine ( ) . substr ( 0 , M ) ; B . push ( s ) ; } var ans = " No " ; for ( var i = 0 ; i < N - M + 1 ; i ++ ) { for ( var j = 0 ; j < N - M + 1 ; j ++ ) { var iguales = 1 ; for ( var k = 0 ; k < M ; k ++ ) { if ( A [ i + k ] . substr ( j , M ) . localeCompare ( B [ k ] ) != 0 ) { iguales = 0 ; break ; } } if ( iguales == 1 ) { process . stdout . write ( " Yes " ) ; process . exit ( ) ; } } } process . stdout . write ( " No " ) ; process . exit ( ) ; }
function Main ( input ) { input = input . trim ( ) ; if ( input . indexOf ( " 1 " ) != - 1 && input . indexOf ( " 9 " ) != - 1 && input . indexOf ( " 7 " ) != - 1 && input . indexOf ( " 4 " ) != - 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let num = input . trim ( ) . split ( " \n " ) [ 0 ] ; let row = input . trim ( ) . split ( " \n " ) [ 1 ] . split ( ' ' ) . map ( x => x - 0 ) ; let ans = 0 ; let min = Infinity ; for ( let i = 0 ; i < num ; i ++ ) { if ( row [ i ] < min ) { ans ++ ; min = row [ i ] ; } ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = Number ( input [ 0 ] ) ; let An = input [ 1 ] . split ( " " ) . map ( Number ) ; if ( gcd ( An ) !== 1 ) { console . log ( " not coprime " ) ; return ; } let freq = Array ( 1000001 ) . fill ( 0 ) ; for ( let A of An ) { if ( A === 1 ) continue ; freq [ A ] ++ ; } for ( let i = 2 ; i <= 1000001 ; i ++ ) { let tmp = 0 ; for ( let j = i ; j <= 1000001 ; j += i ) { tmp += freq [ j ] ; if ( tmp >= 2 ) { console . log ( " setwise coprime " ) ; return ; } } } console . log ( " pairwise coprime " ) ; } function gcd ( arg ) { let f = ( a , b ) => b ? f ( b , a % b ) : a let ans = arg [ 0 ] ; for ( let i = 1 ; i < arg . length ; i ++ ) { ans = f ( ans , arg [ i ] ) ; } return ans ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) . map ( Number ) ; arr . some ( function ( v ) { if ( v == 0 ) return true ; var cnt = 0 ; for ( var a = 1 ; a <= 181 ; a ++ ) { var A = a * a ; if ( v < A ) break ; if ( A == v ) cnt ++ ; for ( var b = a ; b <= 181 ; b ++ ) { var B = A + b * b ; if ( v < B ) break ; if ( B == v ) cnt ++ ; for ( var c = b ; c <= 181 ; c ++ ) { var C = B + c * c ; if ( v < C ) break ; if ( C == v ) cnt ++ ; for ( var d = c ; d <= 181 ; d ++ ) { var D = C + d * d ; if ( v < D ) break ; if ( D == v ) cnt ++ ; } } } } console . log ( cnt ) ; } ) ;
main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ; function main ( N ) { var T = N . trim ( ) ; var a = T . charAt ( 0 ) ; var b = T . charAt ( 2 ) ; var c = T . charAt ( 4 ) ; if ( ( a == " 7 " && b == " 5 " && c == " 5 " ) || ( a == " 5 " && b == " 7 " && c == " 5 " ) || ( a == " 5 " && b == " 5 " && c == " 7 " ) ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } }
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] ) ; var B = parseInt ( input . split ( " " ) [ 1 ] ) ; var C = parseInt ( input . split ( " " ) [ 2 ] ) ; var sevenCount = 0 ; var fiveCount = 0 ; if ( A == 5 ) { fiveCount ++ ; } else if ( A == 7 ) { sevenCount ++ ; } if ( B == 5 ) { fiveCount ++ ; } else if ( B == 7 ) { sevenCount ++ ; } if ( C == 5 ) { fiveCount ++ ; } else if ( C == 7 ) { sevenCount ++ ; } if ( fiveCount == 2 && sevenCount == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; ( function ( input ) { input = input . trim ( ) ; input = input . split ( / \n / ) . map ( str => str . split ( / \s+ / ) . map ( x => x - 0 ) ) ; const N = input [ 0 ] [ 0 ] , D = input [ 0 ] [ 1 ] ; let ans = 0 ; for ( let i = 1 ; i <= N ; i ++ ) { for ( let j = i + 1 ; j <= N ; j ++ ) { let dsquare = 0 , d = 0 ; for ( let k = 0 ; k < D ; k ++ ) { dsquare += ( input [ i ] [ k ] - input [ j ] [ k ] ) * ( input [ i ] [ k ] - input [ j ] [ k ] ) ; } d = Math . sqrt ( dsquare ) ; if ( Math . abs ( d - Math . round ( d ) ) < 0.00000001 ) ans ++ ; } } console . log ( ans ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( ) { var input = getInput ( ) ; var num = parseInt ( input ) ; console . log ( num * num * num ) ; } function getInput ( ) { if ( typeof require == " undefined " ) { return document . getElementById ( ' input ' ) . value ; } return require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' ) . toString ( ) ; } if ( typeof require != " undefined " ) { main ( ) ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk ) ; console . log ( x * x * x ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var total = a + b + c ; if ( total === 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var a = input . split ( " \n " ) ; var flag = true ; for ( var i = 0 ; i < 3 ; i ++ ) { a [ i ] = a [ i ] . split ( " " ) . map ( Number ) ; } if ( a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 2 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 2 ] && a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 2 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 2 ] [ 2 ] ) { flag = false ; } console . log ( flag ? " No " : " Yes " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = input . trim ( ) - 0 ; console . log ( x * x * x ) ;
" use strict " ; let myFunc = ( input ) => { input = input . split ( " \n " ) ; let S = input [ 1 ] . split ( " " ) ; let N = parseInt ( input [ 0 ] ) ; let P , W , G , Y ; P = W = G = Y = 0 ; for ( let i = 0 ; i < N ; i ++ ) { if ( S [ i ] === ' P ' ) P = 1 ; if ( S [ i ] === ' W ' ) W = 1 ; if ( S [ i ] === ' G ' ) G = 1 ; if ( S [ i ] === ' Y ' ) Y = 1 ; } if ( P + W + G + Y === 3 ) console . log ( " Three " ) ; if ( P + W + G + Y === 4 ) console . log ( " Four " ) ; } ; myFunc ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let _inputLines ; let _lineNumber = 0 ; let inputReader = _inputReader ( ) ; function _main ( ) { _inputLines = _inputData . trim ( ) . split ( ' \n ' ) . map ( ( string ) => { return string . trim ( ) ; } ) ; ; let [ a , b , c ] = inputReader . readArray ( ) ; a = parseInt ( a ) ; b = parseInt ( b ) ; c = parseInt ( c ) ; let obj = { } ; obj [ a ] = obj [ a ] + 1 || 1 ; obj [ b ] = obj [ b ] + 1 || 1 ; obj [ c ] = obj [ c ] + 1 || 1 ; if ( obj [ 5 ] === 2 && obj [ 7 ] === 1 ) console . log ( ' YES ' ) ; else console . log ( " NO " ) ; } var _inputData = ' ' ; function cacheInput ( data ) { _inputData += data ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , cacheInput ) . on ( ' end ' , _main ) ; function _inputReader ( ) { function readArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) ; } function readLine ( ) { return _inputLines [ _lineNumber ++ ] ; } function readNumberArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) . map ( val => Number ( val ) ) ; } return { readArray , readLine , readNumberArray , } }
function main ( a ) { a = a . split ( " " ) ; a = stn ( a ) ; function Actor ( name , card ) { this . name = name ; this . card = card ; } var Alice = new Actor ( " Alice " , a [ 0 ] ) ; var Bob = new Actor ( " Bob " , a [ 1 ] ) ; console . log ( poker ( Alice , Bob ) ) ; } function poker ( Alice , Bob ) { if ( Alice . card == Bob . card ) return " Draw " ; if ( Alice . card == 1 ) return Alice . name ; if ( Bob . card == 1 ) return Bob . name ; if ( Alice . card > Bob . card ) { return Alice . name ; } else { return Bob . name ; } } function stn ( a ) { return a . map ( function ( x ) { return parseInt ( x , 10 ) ; } ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var line = chunk . toString ( ) ; var output = line * line * line ; console . log ( output ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) [ 1 ] . split ( " " ) ; var max = 0 , min = Infinity ; for ( val in input ) { max = Math . max ( input [ val ] , max ) ; min = Math . min ( input [ val ] , min ) ; } console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var limit = input [ 5 ] ; var max = input [ 4 ] ; var min = input [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const Main = ( ) => { const n = nextInt ( ) let x = nextIntArray ( ) let min = Number . POSITIVE_INFINITY for ( let p = 1 ; p <= 100 ; p ++ ) { let curr = 0 for ( let i = 0 ; i < n ; i ++ ) { curr += ( x [ i ] - p ) * ( x [ i ] - p ) } min = Math . min ( min , curr ) } console . log ( min ) } Main ( )
" use strict " ; function main ( input ) { var line = input . split ( " " ) ; let a = parseInt ( line [ 0 ] ) ; let b = parseInt ( line [ 1 ] ) ; let h = parseInt ( line [ 2 ] ) ; let m = parseInt ( line [ 3 ] ) ; var angle = 0.5 * ( 60 * h - 11 * m ) ; if ( angle > 180 ) angle = angle - 360 ; angle = ( angle * 3.14159265359 ) / 180 ; var cost = Math . cos ( angle ) ; var sqs = ( a * a ) + ( b * b ) - ( 2 * a * b * ( cost ) ) ; var ans = Math . sqrt ( sqs ) ; console . log ( ans . toPrecision ( 20 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; const N = parseInt ( input [ 0 ] , 10 ) ; const K = parseInt ( input [ 1 ] , 10 ) ; if ( K === 1 ) { console . log ( 0 ) ; return ; } console . log ( N - K ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { var s = s . split ( " \n " ) ; var s = [ s [ 0 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 1 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 2 ] . split ( " " ) . map ( e => Number ( e ) ) ] ; var t , cnt , a2 , a3 , b1 , b2 , b3 ; for ( var a1 = 0 ; a1 <= s [ 0 ] [ 0 ] ; a1 ++ ) { cnt = 0 ; b1 = s [ 0 ] [ 0 ] - a1 ; b2 = s [ 0 ] [ 1 ] - a1 ; b3 = s [ 0 ] [ 2 ] - a1 ; a2 = s [ 1 ] [ 0 ] - b1 ; a3 = s [ 2 ] [ 0 ] - b1 ; t = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] ; for ( var i = 0 ; i < 3 ; i ++ ) { for ( var j = 0 ; j < 3 ; j ++ ) { if ( s [ i ] [ j ] === t [ i ] [ j ] ) cnt ++ ; } } if ( cnt === 9 ) { console . log ( " Yes " ) ; return ; } } console . log ( " No " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
function main ( input ) { var n , a = [ ] , tmp , size , sum = 0 , i ; n = parseInt ( input [ 0 ] , 10 ) ; tmp = input [ 1 ] . split ( " " ) ; size = tmp . length ; for ( i = 0 ; i < size ; i ++ ) { a . push ( parseInt ( tmp [ i ] , 10 ) ) ; } a . sort ( function ( self , other ) { if ( self < other ) { return - 1 ; } else if ( self > other ) { return 1 ; } else { return 0 ; } } ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { sum += a [ i + 1 ] - a [ i ] ; } console . log ( sum ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
function print ( data ) { process . stdout . write ( data + ' \n ' ) } const cube = x => x * x * x const readLine = require ( ' readline ' ) const rl = readLine . createInterface ( { input : process . stdin , output : process . stdout } ) rl . on ( ' line ' , ( line ) => { print ( cube ( parseInt ( line ) ) ) } )
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; var Main = function ( stdin ) { var line = stdin . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( line [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ; Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
( function Main ( input ) { var input = input . split ( ' \n ' ) , X = input [ 1 ] . split ( ' ' ) . map ( Number ) , len = X . length , result = 0 , avg = function ( data ) { var sum = 0 ; for ( var i = 0 ; i < len ; i ++ ) { sum += data [ i ] ; } return Math . round ( sum / len ) ; } ( X ) ; for ( var i = 0 ; i < len ; i ++ ) { result += Math . pow ( X [ i ] - avg , 2 ) ; } console . log ( result ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let h1 = + cin . shift ( ) ; let m1 = + cin . shift ( ) ; let h2 = + cin . shift ( ) ; let m2 = + cin . shift ( ) ; let k = + cin . shift ( ) ; let d = ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ; console . log ( d ) ; } main ( ) ;
' use strict ' const Main = ( input ) => { const [ A , B , H , M ] = input . trim ( ) . split ( ' ' ) . map ( Number ) const thetaH = ( ( H + M / 60 ) / 12 ) * Math . PI * 2 const thetaM = ( M / 60 ) * Math . PI * 2 const theta = thetaH - thetaM let result = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - ( 2 * A * B * Math . cos ( theta ) ) ) console . log ( result ) return result } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const x = Number . parseInt ( lines [ 0 ] ) ; console . log ( x * x * x ) ; } ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
function main ( arg ) { arg = arg . trim ( ) . split ( " \n " ) . map ( Number ) var k = arg . pop ( ) var data = arg for ( var i = 0 ; i < data . length ; i ++ ) { for ( var j = i + 1 ; j < data . length ; j ++ ) { var ans = Math . abs ( data [ i ] - data [ j ] ) if ( ans > k ) { console . log ( ' :( ' ) return } } } console . log ( ' Yay! ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { var i = Number ( input [ 0 ] ) ; console . log ( Math . pow ( i , 3 ) ) ; }
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
const main = i => console . log ( i . split ( ' ' ) . map ( n => parseInt ( n ) ) . map ( ( n , i , arr ) => Math . abs ( arr [ ( i + 1 ) % arr . length ] - n ) ) . sort ( ( a , b ) => a - b ) . slice ( 0 , 2 ) . reduce ( ( prev , curr ) => prev + curr , 0 ) ) main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' \n ' ) ; var x = lines [ 0 ] ; var kaitou = x * x * x ; console . log ( kaitou ) ; } ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { var inp = input . trim ( ) . split ( ' \n ' ) ; var N = parseInt ( inp [ 0 ] . trim ( ) ) ; var S = inp [ 1 ] . split ( ' ' ) ; var answer = ' Three ' ; for ( var i = 0 ; i < S . length ; i ++ ) { if ( S [ i ] === ' Y ' ) { answer = ' Four ' ; } } console . log ( answer ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var message = " Yay! " ; for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > k ) message = " :( " } } console . log ( message ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( ' \n ' ) var N = parseInt ( tmp [ 0 ] ) var Xarr = tmp [ 1 ] . split ( ' ' ) var Xsum = 0 for ( var i = 0 ; i < Xarr . length ; i ++ ) { Xsum += parseInt ( Xarr [ i ] ) } var avg = Math . floor ( Xsum / N ) var tmp = [ ] for ( var j = avg - 25 ; j <= avg + 25 ; j ++ ) { var sum = 0 for ( var i = 0 ; i < Xarr . length ; i ++ ) { sum = sum + Math . abs ( Math . pow ( j - parseInt ( Xarr [ i ] ) , 2 ) ) } tmp . push ( sum ) } var result = Math . min . apply ( null , tmp ) console . log ( result ) return result } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { let [ a , b , h , m ] = input [ 0 ] . trim ( ) . split ( " " ) . map ( i => parseInt ( i ) ) ; const p = [ ( h * 5 * 6 ) + 30 / 60 * m , m * 6 ] ; const diff = Math . max ( ... p ) - Math . min ( ... p ) ; const rad = Math . min ( diff , 360 - diff ) * Math . PI / 180 ; const cosine = Math . cos ( rad ) ; const result = a * a + b * b - ( 2 * a * b * cosine ) ; console . log ( Math . sqrt ( result ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
" use strict " ; function main ( input ) { const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; const rects = [ args [ 0 ] * args [ 1 ] , args [ 2 ] * args [ 3 ] ] . sort ( ( a , b ) => { return a - b ; } ) ; console . log ( rects [ 1 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi = ( xi + 1 ) | 0 ) { for ( let yi = 0 ; yi <= k ; yi = ( yi + 1 ) | 0 ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = ( input ) => { let tasks = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const ans = Math . max ( ... tasks ) - Math . min ( ... tasks ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { var str = input ; var ans = 0 ; var str = str . split ( " \n " ) [ 0 ] ; var num = str . split ( " " ) ; var a = Number ( num [ 0 ] ) ; var b = Number ( num [ 1 ] ) ; var h = Number ( num [ 2 ] ) ; var m = Number ( num [ 3 ] ) ; var dega = 0.5 * ( m + 60 * h ) ; var degb = 6 * m ; var rada = dega * ( Math . PI / 180 ) ; var radb = degb * ( Math . PI / 180 ) ; var ax = a * Math . sin ( rada ) ; var ay = a * Math . cos ( rada ) ; var bx = b * Math . sin ( radb ) ; var by = b * Math . cos ( radb ) ; ans = Math . sqrt ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) ) ; ans = Math . round ( ans * ( 10 ** 10 ) ) / ( 10 ** 10 ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
( stdin => { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs , 10 ) console . log ( Math . pow ( x , 3 ) ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; function Main ( input ) { const tmp = input . split ( ' ' ) ; let five = 0 ; let seven = 0 ; for ( let i = 0 ; i < tmp . length ; i ++ ) { if ( tmp [ i ] == 5 ) { five ++ ; } else if ( tmp [ i ] == 7 ) { seven ++ ; } } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var N = parseInt ( input [ 0 ] , 10 ) ; var K = parseInt ( input [ 1 ] , 10 ) ; if ( K == 1 ) { console . log ( 0 ) ; } else { console . log ( N - K ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
function main ( input ) { var a = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var b = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; var c = input [ 0 ] . split ( " " ) [ 2 ] - 0 ; console . log ( Math . max ( a , Math . max ( b , c ) ) - Math . min ( a , Math . min ( b , c ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 === 2 && count7 === 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; one = false ; nana = false ; nine = false ; four = false ; for ( i = 0 ; i < 4 ; i ++ ) { if ( Number ( input [ i ] ) === 1 ) one = true ; if ( parseInt ( input [ i ] ) == 7 ) nana = true ; if ( parseInt ( input [ i ] ) == 4 ) four = true ; if ( Number ( input [ i ] ) == 9 ) nine = true ; } if ( one && nana && nine && four ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function I ( s , f ) { this . _s = s . split ( " \n " ) ; this . _c = 0 ; this . _l = 0 ; this . _f = f || Number } I . prototype . a = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; var t = l . trim ( ) . split ( " " ) ; var a = t [ this . _c ] ; this . _c ++ ; if ( t . length === this . _c ) { this . _c = 0 ; this . _l ++ } return this . _f ( a ) } ; I . prototype . l = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; this . _c = 0 ; this . _l ++ ; return l . split ( " " ) . map ( this . _f ) } ; function main ( input ) { const o = new I ( input ) ; var arr = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { arr . push ( o . a ( ) ) ; } var k = o . a ( ) ; arr . sort ( ( a , b ) => a - b ) ; console . log ( arr [ 4 ] - arr [ 0 ] <= k ? " Yay! " : " :( " ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const lines = input . split ( / \n / ) ; console . log ( Number ( lines [ 4 ] ) - Number ( lines [ 0 ] ) <= Number ( lines [ 5 ] ) ? ' Yay! ' : ' :( ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var K = parseInt ( line [ 0 ] ) ; var S = parseInt ( line [ 1 ] ) ; var roop = Math . min ( K , S ) ; var ans = 0 ; for ( var A = 0 ; A <= roop ; A ++ ) { if ( S - K - A >= 0 ) { if ( 2 * K - S + A + 1 > 0 ) { ans += 2 * K - S + A + 1 ; } } else if ( S - K - A < 0 ) { if ( S - A + 1 > 0 ) { ans += S - A + 1 ; } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi = ( xi + 1 ) | 0 ) { for ( let yi = 0 ; yi <= k ; yi = ( yi + 1 ) | 0 ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] ) ; var b = parseInt ( tmp [ 1 ] ) ; var r = " " ; if ( a <= 5 ) { r = 0 ; } if ( a >= 6 && a <= 12 ) { r = b / 2 ; } if ( a >= 13 ) { r = b ; } console . log ( r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { let tasks = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) tasks = tasks . sort ( ( a , b ) => a - b ) let total = 0 for ( let i = 1 ; i < tasks . length ; i ++ ) { total += tasks [ i ] - tasks [ i - 1 ] } console . log ( total ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
" use strict " ; function main ( input ) { const line = input . split ( " \n " ) ; let arr = line [ 0 ] . split ( " " ) ; const N = parseInt ( arr [ 0 ] ) ; const D = parseInt ( arr [ 1 ] ) ; let X = [ ] ; for ( let i = 1 ; i < N + 1 ; i ++ ) X . push ( line [ i ] . split ( " " ) . map ( Number ) ) ; let ans = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let num = 0 ; for ( let k = 0 ; k < D ; k ++ ) num += Math . pow ( ( X [ j ] [ k ] - X [ i ] [ k ] ) , 2 ) ; if ( Number . isInteger ( Math . sqrt ( num ) ) ) ans ++ ; } } console . log ( ans ) ; return ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var ages = parseInt ( input [ 0 ] ) ; var price = parseInt ( input [ 1 ] ) ; var show = 0 ; if ( ages >= 13 ) { show = price ; } else if ( ages <= 12 && ages >= 6 ) { show = price / 2 ; } else { show = 0 ; } console . log ( show ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function I ( t , i ) { this . _s = t . split ( " \n " ) , this . _c = 0 , this . _l = 0 , this . _f = i || Number } I . prototype . a = function ( t ) { var i = this . _s [ this . _l ] ; if ( i ) { var s = i . trim ( ) . split ( " " ) , h = s [ this . _c ] ; return this . _c ++ , s . length === this . _c && ( this . _c = 0 , this . _l ++ ) , t ? t ( h ) : this . _f ( h ) } } , I . prototype . l = function ( t ) { var i = this . _s [ this . _l ] ; if ( i ) return this . _c = 0 , this . _l ++ , i . split ( " " ) . map ( t || this . _f ) } , module . exports = I ; function main ( input ) { var o = new I ( input ) ; var a = o . a ( ) ; var b = o . a ( ) ; if ( a >= 13 ) { console . log ( b ) ; } else if ( a <= 5 ) { console . log ( 0 ) ; } else { console . log ( b / 2 ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; var match = input . match ( / ^(\d+)\n / ) ; if ( match ) { var num = match [ 1 ] ; console . log ( num * num * num ) ; } } ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , data => { console . log ( data * data * data ) ; } ) ;
function Main ( input ) { inputs = input . split ( ' \n ' ) ; if ( inputs [ 4 ] - inputs [ 0 ] <= inputs [ 5 ] ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( ' ' ) ; var K = parseInt ( input [ 0 ] , 10 ) ; var S = parseInt ( input [ 1 ] , 10 ) ; var ans = 0 ; for ( var x = 0 ; x <= K ; x ++ ) for ( var y = 0 ; y <= K ; y ++ ) { z = S - ( x + y ) if ( z >= 0 && z <= K ) ans ++ } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { let [ A , B , H , M ] = input . split ( ' ' ) . map ( Number ) ; const minute = H * 60 + M ; const theata = ( 11 * minute ) / 360 * Math . PI const a = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theata ) ) ; console . log ( a ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ) ;
var output ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " next " : function ( ) { if ( ! this . hasNext ( ) ) { return null ; } var returnObj = this . list [ this . index ] ; this . index ++ ; return returnObj ; } , " hasNext " : function ( ) { return ( this . index < this . max ) ; } } Main ( ) ; function next ( ) { return obj . next ( ) ; } function hasNext ( ) { return obj . hasNext ( ) ; } function myout ( t ) { console . log ( t ) ; } function myerr ( t ) { console . error ( t ) ; } function myconv ( i , no ) { try { switch ( no ) { case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 8 : return i . join ( " " ) ; case 9 : return i . join ( " \n " ) ; case 0 : return i . join ( " " ) ; default : return i ; } } catch ( e ) { return " error " ; } } function Main ( ) { var N = myconv ( next ( ) , 1 ) ; var list = myconv ( next ( ) , 4 ) ; var output = 0 ; var last = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { output ++ ; last = list [ i ] ; } else { if ( last > list [ i ] ) { output ++ ; last = list [ i ] ; } } } myout ( output ) ; }
function main ( lines ) { const [ A , B , H , M ] = splitN ( lines [ 0 ] ) ; const hR = ( H / 12 + M / 60 / 12 ) * 2 * Math . PI , mR = M / 60 * 2 * Math . PI , r = Math . max ( hR , mR ) - Math . min ( hR , mR ) , res = Math . sqrt ( ( A ** 2 ) + ( B ** 2 ) - ( 2 * A * B * Math . cos ( r ) ) ) ; console . log ( res ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ) ; function splitN ( s ) { return s . split ( ' ' ) . map ( Number ) ; }
const main = ( input ) => { const args = input . split ( ' ' ) . map ( v => Number ( v ) ) const a = args [ 0 ] const b = args [ 1 ] const h = args [ 2 ] const m = args [ 3 ] const radA = ( 30.0 * h + m * 0.5 ) * Math . PI / 180.0 const radB = m * 6.0 * Math . PI / 180.0 const ax = a * Math . cos ( radA ) const ay = a * Math . sin ( radA ) const bx = b * Math . cos ( radB ) const by = b * Math . sin ( radB ) console . log ( Math . sqrt ( Math . pow ( ax - bx , 2 ) + Math . pow ( ay - by , 2 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( s ) { n = Number ( s . split ( " \n " ) [ 0 ] ) ; console . log ( n < 2 ? 1 : n < 4 ? 2 : n < 8 ? 4 : n < 16 ? 8 : n < 32 ? 16 : n < 64 ? 32 : 64 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( " 0 " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const n = Number ( input ) let ans = 0 let tmpmax = 0 if ( n == 1 ) { console . log ( 1 ) return } for ( let i = 1 ; i <= n ; i ++ ) { if ( i % 2 > 0 ) { continue } else { let j = i let cnt = 0 while ( j % 2 == 0 ) { cnt ++ j = j / 2 } if ( tmpmax < cnt ) { tmpmax = cnt ans = i } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 == 2 && count7 == 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) a = lines . shift ( ) * 1 b = lines . shift ( ) * 1 c = lines . shift ( ) * 1 d = lines . shift ( ) * 1 e = lines . shift ( ) * 1 k = lines . shift ( ) * 1 console . log ( e - a <= k ? ' Yay! ' : ' :( ' )
function Main ( input ) { var args = input . split ( " \n " ) ; var ret = parseInt ( args [ 4 ] ) - parseInt ( args [ 0 ] ) - parseInt ( args [ 5 ] ) ; console . log ( ret > 0 ? ' :( ' : ' Yay! ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) . map ( ( a ) => Number ( a ) ) ; myout ( Math . max . apply ( null , list ) - Math . min . apply ( null , list ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const NM = input [ 0 ] . split ( ' ' ) . map ( Number ) ; const N = NM [ 0 ] ; const M = NM [ 1 ] ; const As = input . slice ( 1 , N + 1 ) ; const Bs = input . slice ( N + 1 , N + M + 1 ) ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { let isMatch = true nextsearch : for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] != Bs [ bx ] [ by ] ) { isMatch = false ; break nextsearch ; } } } if ( isMatch ) { console . log ( " Yes " ) return ; } } } console . log ( ' No ' ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var k = Number ( inputs [ 0 ] ) ; var s = Number ( inputs [ 1 ] ) ; var cnt = 0 ; for ( var x = 0 ; x <= k ; x ++ ) for ( var y = 0 ; y <= k ; y ++ ) if ( s - ( x + y ) >= 0 && s - ( x + y ) <= k ) cnt ++ ; console . log ( cnt ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { input = input . split ( " " ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; let result = B ; if ( 6 <= A && A <= 12 ) result = B / 2 ; else if ( A <= 5 ) result = 0 console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function MainA ( input ) { input = input . split ( " \n " ) ; var a = input [ 0 ] ; var e = input [ 4 ] ; var k = input [ 5 ] ; var result = ( e - a > k ) ? " :( " : " Yay! " ; console . log ( ' %s ' , result ) ; } MainA ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) arr = inp . shift ( ) . split ( ' ' ) . map ( a => a * 1 ) . sort ( ( a , b ) => a - b ) console . log ( arr [ 2 ] - arr [ 0 ] )
function f ( x , y , z ) { return Math . abs ( y - x ) + Math . abs ( y - z ) ; } function main ( input ) { input = input . split ( ' ' ) . map ( Number ) ; a = input [ 0 ] , b = input [ 1 ] , c = input [ 2 ] , d = 1000001 ; if ( f ( a , b , c ) < d ) d = f ( a , b , c ) ; if ( f ( a , c , b ) < d ) d = f ( a , c , b ) ; if ( f ( b , a , c ) < d ) d = f ( b , a , c ) ; if ( f ( b , c , a ) < d ) d = f ( b , c , a ) ; if ( f ( c , a , b ) < d ) d = f ( c , a , b ) ; if ( f ( c , b , a ) < d ) d = f ( c , b , a ) ; console . log ( d ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( x ) { return Math . pow ( x , 3 ) ; } ( parseInt ( inputs [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' const main = input => { const line = input . split ( ' ' ) . map ( v => v - 0 ) const cost = Math . max ( ... line ) - Math . min ( ... line ) console . log ( cost ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var line = input . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var ans = 0 ; var maxover3 = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= maxover3 ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( k >= j && k <= max ) { if ( i === j && i === k ) { ans ++ ; } else if ( i === j || i === k || k === j ) { ans += 3 ; } else { ans += 6 ; } } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var arare = input [ 1 ] . slice ( ' ' ) ; if ( arare . indexOf ( ' Y ' ) != - 1 ) console . log ( ' Four ' ) ; else console . log ( ' Three ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const H1 = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const M1 = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const H2 = parseInt ( arg [ 0 ] . split ( " " ) [ 2 ] ) ; const M2 = parseInt ( arg [ 0 ] . split ( " " ) [ 3 ] ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 4 ] ) ; const first = 60 - M1 ; const time1 = H2 - ( H1 + 1 ) ; const rest = M2 ; let answer = first + ( 60 * time1 ) + M2 - K ; console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var n = parseInt ( input [ 0 ] , 10 ) ; var str = input [ 1 ] ; var suu = str . split ( " " ) ; for ( var i = 0 ; i < n ; i ++ ) { suu [ i ] = parseInt ( suu [ i ] , 10 ) ; } var count = 0 ; var min = 200001 ; for ( var i = 0 ; i < n ; i ++ ) { if ( suu [ i ] < min ) { count ++ ; min = suu [ i ] ; } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " next " : function ( ) { if ( ! this . hasNext ( ) ) { return null ; } var returnObj = this . list [ this . index ] ; this . index ++ ; return returnObj ; } , " hasNext " : function ( ) { return ( this . index < this . max ) ; } } function next ( ) { return obj . next ( ) ; } function hasNext ( ) { return obj . hasNext ( ) ; } function Main ( ) { var k = 1 * input [ 0 ] . split ( " " ) [ 0 ] var s = 1 * input [ 0 ] . split ( " " ) [ 1 ] var c = 0 ; for ( var i = 0 ; i <= k ; ++ i ) { for ( var j = 0 ; j <= ( s - i ) && j <= k ; ++ j ) { if ( ( s - i - j ) >= 0 && ( s - i - j ) <= k ) { ++ c } } } console . log ( c ) } Main ( ) ;
function Main ( input ) { const lines = input . split ( " \n " ) ; const params = lines [ 0 ] . split ( " " ) ; var a = parseInt ( params [ 0 ] , 10 ) ; var b = parseInt ( params [ 1 ] , 10 ) ; const result = ( a > 12 ) ? b : ( a > 5 ) ? b / 2 : 0 ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { main ( chunk . trim ( ) ) ; } ) ; function main ( chunk ) { var lines = chunk . split ( " \n " ) ; for ( var i in lines ) { console . log ( Number ( lines [ i ] . split ( " " ) [ 0 ] ) + Number ( lines [ i ] . split ( " " ) [ 1 ] ) ) ; } }
function Main ( input ) { console . log ( Math . pow ( parseInt ( input . split ( " \n " ) ) , 3 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b ] = input . split ( " " ) . map ( Number ) ; if ( a > b ) { if ( b == 1 ) { console . log ( " Bob " ) ; } else { console . log ( " Alice " ) ; } } else if ( a < b ) { if ( a == 1 ) { console . log ( " Alice " ) ; } else { console . log ( " Bob " ) ; } } else { console . log ( " Draw " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const lines = input . split ( ' \n ' ) const [ A , B , H , M ] = lines [ 0 ] . split ( ' ' ) . map ( Number ) const radH = ( H * 30 + M / 2 ) * ( Math . PI / 180 ) const radM = M * 6 * ( Math . PI / 180 ) const posHX = Math . cos ( radH ) * A const posHY = Math . sin ( radH ) * A const posMX = Math . cos ( radM ) * B const posMY = Math . sin ( radM ) * B const dist = Math . sqrt ( Math . pow ( posHX - posMX , 2 ) + Math . pow ( posHY - posMY , 2 ) ) console . log ( dist )
function main ( input ) { param = input . split ( " " ) ; var hour = param [ 2 ] - param [ 0 ] ; var min = param [ 3 ] - param [ 1 ] ; if ( min < 0 ) { hour -= 1 ; min = min * ( - 1 ) ; min = 60 - min ; } const limit = ( hour * 60 ) + min var result = limit - param [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const a = + ( ' ' + require ( ' fs ' ) . readFileSync ( 0 ) ) console . log ( a * a * a )
function Main ( input ) { var N = parseInt ( input [ 0 ] , 10 ) ; var P = input [ 1 ] . split ( / \s / ) . map ( p => parseInt ( p , 10 ) ) var min = P [ 0 ] ; var result = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { result ++ ; min = P [ i ] ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n / ) ) ;
function main ( input ) { const formatted_input = input . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; if ( formatted_input [ 4 ] - formatted_input [ 0 ] > formatted_input [ 5 ] ) { console . log ( ' :( ' ) } else { console . log ( ' Yay! ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { console . log ( " %d " , input * input * input ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let n = next ( ) ; let i ; for ( i = 1 ; i * 2 <= n ; i = i * 2 ) { } return i }
function Main ( input ) { var patternOne = " 5 7 5 " ; var patternTwo = " 5 5 7 " ; var patternThree = " 7 5 5 " ; input = input . split ( " " ) ; var fiveNum = 0 ; var sevenNum = 0 ; for ( var i = 0 ; i < input . length ; i ++ ) { if ( Number ( input [ i ] ) === 5 ) { fiveNum ++ ; } else if ( Number ( input [ i ] ) === 7 ) { sevenNum ++ ; } } if ( fiveNum === 2 && sevenNum === 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const N = input ; let n = 0 ; while ( true ) { if ( Math . pow ( 2 , n ) === N ) { n -- ; break ; } else if ( Math . pow ( 2 , n ) > N ) { n -- ; break ; } else { n ++ ; } } console . log ( Math . ceil ( Math . pow ( 2 , n ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " NoSuchElementException:次に要素は無いよ";} var returnOb j = thi .list[thi . ndex ] ; th i s.in d ex++; r turn retur nO b ; }, " asNext" : u n t ion(){r e u n (this. i n d ex < t i s.ma x );} } M in() ; fu n c t o nex t ( ) return o j.ne x t ( );} fu cti o n ne x t I n (){retur myconv ( n e xt(),1 ;} fun c tion n e x t S t Array(){ eturn myconv ( n e xt(),2 ;} fun c tion n e x t I n Array(){ eturn myconv ( n e xt(),4 ;} fun c tion n e x t C h rArray() return myconv ( n e xt(),6 ;} fun c tion h a s N e x (){retur obj.ha s N e xt();} fun c tion my o u t ( ){consol .log( t ) ; } functi o n m y e r r ( ){consol .erro r ( t ) ;} func t ion m y c o n v i,no){tr {switc h ( n o) { c ase 1:retu r n p a rseI t ( i);cas 2:retur n i . spli ( " ");ca e 4:ret u r n i . spli ( " ").ma ( ( a)=>N u m b e r ( a)) ; c a s e 6:retu r n i . spli ( " ");cas 7 :retu r n i . spli ( " ").map ( a )=>Nu m b e r ( a)) ; c a s e 8:retu r n i . join " ");cas 9 :ret u r n i . join " \ n");ca e 0:re t u rn i . join " " );defa l t :ret u r n i ;}}catc h (e){re u r n i;}} f u n c tion M i n ( ) var one = ne x t I tAr ay( ; var A = one[ 0 ] ; var B = one [ 1 ] ; if( = 13) { m y ut ( B ; el s e if(A < = 1 && A >= 6 { yo t( 2 ; } lse{ m y u ( 0 ) } }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const a = + lines [ 0 ] ; const e = + lines [ 4 ] ; const k = + lines [ 5 ] ; console . log ( e - a <= k ? " Yay! " : " :( " ) ; } ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const list = input . split ( ' ' ) ; const sortedList = list . sort ( ( a , b ) => a - b ) ; console . log ( sortedList [ 2 ] - sortedList [ 0 ] ) ;
a = ( " " + require ( " fs " ) . readFileSync ( 0 ) ) . split ` ` . sort ( ( a , b ) => a - b ) ; console . log ( a [ 2 ] - a [ 0 ] )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) ; const birth = Number ( input [ 0 ] ) ; const price = birth > 5 ? birth <= 12 ? Number ( input [ 1 ] ) / 2 : Number ( input [ 1 ] ) : 0 console . log ( price ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var square = function ( x ) { return Math . pow ( x , 3 ) ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var N = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var list = input [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var ans = Number . MAX_SAFE_INTEGER ; for ( var p = 0 ; p <= 100 ; p ++ ) { var sum = 0 ; for ( var i = 0 ; i < N ; i ++ ) { sum += ( list [ i ] - p ) * ( list [ i ] - p ) ; } ans = Math . min ( ans , sum ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
const readline = require ( " readline " ) ; const rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; totalMins = 0 ; let stratFrom = 0 ; rl . on ( ' line ' , function ( data ) { data = data . split ( ' ' ) ; let from = parseInt ( data [ 0 ] ) * 60 + parseInt ( data [ 1 ] ) ; let to = parseInt ( data [ 2 ] ) * 60 + parseInt ( data [ 3 ] ) ; totalMins = to - from ; stratFrom = totalMins - parseInt ( data [ 4 ] ) ; rl . close ( ) ; } ) ; rl . on ( ' close ' , function ( ) { console . log ( ` ${ stratFrom } ` ) ; } )
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function main ( input ) { const lines = input . split ( ' \n ' ) ; const c = [ ] ; for ( let i = 0 ; i < 3 ; i ++ ) { c . push ( lines [ i ] . split ( ' ' ) . map ( x => parseInt ( x ) ) ) } let result = ' Yes ' ; if ( c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ) { result = ' No ' ; } if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] ) { result = ' No ' ; } if ( c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] ) { result = ' No ' ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const data = input . split ( " \n " ) . map ( ( val ) => parseInt ( val , 10 ) ) ; const k = data [ 5 ] ; var result = " Yay! " ; for ( var i = 0 ; i < 4 ; i ++ ) { if ( k < data [ 4 ] - data [ i ] ) { result = " :( " ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) N = inp . shift ( ) * 1 A = inp . shift ( ) . split ( ' ' ) B = inp . shift ( ) . split ( ' ' ) sumA = 0 sumB = 0 s = 0 t = [ ] cnt = 0 for ( i = 0 ; i < N ; i ++ ) { a = A [ i ] * 1 b = B [ i ] * 1 d = a - b if ( d < 0 ) { cnt ++ s += d } else { t . push ( d ) } sumA += a sumB += b } if ( sumA >= sumB ) { t . sort ( ( a , b ) => b - a ) j = 0 while ( s < 0 ) { s += t [ j ] j ++ } console . log ( cnt + j ) } else { console . log ( - 1 ) }
" use strict " ; function main ( input ) { input = input . trim ( ) . split ( " " ) ; const H = parseInt ( input [ 2 ] ) - parseInt ( input [ 0 ] ) ; const M = parseInt ( input [ 3 ] ) - parseInt ( input [ 1 ] ) ; let minute = H * 60 ; minute = minute + M - parseInt ( input [ 4 ] ) ; console . log ( minute ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
function Main ( s ) { s = s . split ( " \n " ) ; const n = + s [ 0 ] ; var ans = 0 ; var m = 1e10 ; for ( var i = 0 ; i < n ; i ++ ) { var a = s [ i + 1 ] . split ( " " ) . map ( a => + a ) ; if ( a [ 0 ] > a [ 1 ] ) m = Math . min ( m , a [ 1 ] ) ; ans += a [ 0 ] ; } if ( m === 1e10 ) ans = 0 ; else ans -= m ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = parseInt ( input [ 0 ] ) ; A = new Array ( N ) ; B = new Array ( N ) ; C = new Array ( N ) ; tmpa = input [ 1 ] . split ( " " ) ; tmpb = input [ 2 ] . split ( " " ) ; list = new Array ( ) ; var s = 0 ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { A [ i ] = parseInt ( tmpa [ i ] ) ; B [ i ] = parseInt ( tmpb [ i ] ) ; if ( A [ i ] - B [ i ] > 0 ) { list . push ( A [ i ] - B [ i ] ) ; } else if ( A [ i ] - B [ i ] != 0 ) { s += Math . min ( 0 , A [ i ] - B [ i ] ) ; ans ++ ; } } s = - s ; list . sort ( function ( a , b ) { return ( b - a ) ; } ) ; var s2 = 0 ; if ( ans != 0 ) { for ( var i = 0 ; i < list . length ; i ++ ) { s2 += list [ i ] ; if ( s2 >= s ) { ans += i + 1 ; break ; } else if ( i == list . length - 1 ) { ans = - 1 ; } } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
const Main = input => { input = input [ 0 ] . split ( ' ' ) var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 && A <= 12 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 1 ] . split ( " " ) ; var max = 0 ; var min = 1000 ; for ( var i = 0 ; i < tmp . length ; i ++ ) { var a = parseInt ( tmp [ i ] , 10 ) ; if ( a > max ) max = a ; if ( a < min ) min = a ; } console . log ( ' %d ' , max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( Math . pow ( x , 3 ) ) } )
function main ( input ) { lines = input . split ( " " ) ; var N = Number ( lines [ 0 ] ) ; var P = Number ( lines [ 1 ] ) ; var i = 1 ; var ans = 1 ; if ( N == 1 ) { ans = P ; } else if ( P == 1 || N > P ) { ans = 1 ; } else { while ( true ) { var k = Math . pow ( i , N ) ; if ( k > P ) { break ; } if ( P % k == 0 ) { ans = i ; } i ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = Number ( input [ 0 ] ) ; var X = input [ 1 ] . split ( " " ) ; X = X . map ( x => Number ( x ) ) ; X . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; var totalSum = [ ] ; for ( var i = X [ 0 ] ; i <= X [ N - 1 ] ; i ++ ) { var total = X . map ( x => { return ( x - i ) * ( x - i ) ; } ) ; totalSum . push ( total . reduce ( function ( a , x ) { return a + x ; } ) ) ; } console . log ( Math . min . apply ( null , totalSum ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const [ num , array ] = input . split ( ' \n ' ) const newArray = array . split ( ' ' ) . map ( ( num ) => + num ) const distance = Math . max ( ... newArray ) - Math . min ( ... newArray ) console . log ( distance )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) in put . shift ( ) let count = [ ] let aMap = new Map in put = input . map ( c => { let arr = c . split ( ' ' ) . map ( w => w - 0 ) if ( count [ arr [ 0 ] ] === undefined ) count [ arr [ 0 ] ] = [ ] count [ arr [ 0 ] ] . push ( arr [ 1 ] ) aMap . set ( arr [ 1 ] , ' ' ) } ) count . forEach ( ( v , i ) => { v . sort ( ( a , b ) => a - b ) v . forEach ( ( y , j ) => { let id = ( ' 000000 ' + i ) . slice ( - 6 ) id += ( ' 000000 ' + ( j + 1 ) ) . slice ( - 6 ) aMap . set ( y , id ) } ) } ) aMap . forEach ( v => console . log ( v ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var n = parseInt ( input [ 0 ] ) ; var a = input [ 1 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) ; var b = input [ 2 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) ; if ( a . reduce ( ( n , sum ) => n + sum , 0 ) < b . reduce ( ( n , sum ) => n + sum , 0 ) ) { console . log ( - 1 ) ; return ; } var count = 0 ; var diff = 0 ; var arr = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { count ++ ; diff += b [ i ] - a [ i ] ; arr . push ( 0 ) ; } else { arr . push ( a [ i ] - b [ i ] ) ; } } arr = arr . sort ( ( k , j ) => j - k ) ; var aa = 0 ; var i = 0 ; while ( aa < diff ) { aa += arr [ i ++ ] ; count ++ ; } console . log ( count ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
" use strict " function Main ( input ) { let args = input . split ( " \n " ) ; let NM = args [ 0 ] . split ( " " ) ; let N = parseInt ( NM [ 0 ] , 10 ) ; let M = parseInt ( NM [ 1 ] , 10 ) ; args . shift ( ) ; args . pop ( ) ; let citys = args . map ( ( e , i ) => { let cityInfo = e . split ( " " ) . map ( e => parseInt ( e ) ) ; return [ i , cityInfo [ 0 ] , cityInfo [ 1 ] ] } ) ; citys . sort ( ( a , b ) => ( a [ 2 ] - b [ 2 ] ) ) ; let countryCount = Array ( N + 1 ) . fill ( 1 ) ; citys . forEach ( ( e ) => { e [ 3 ] = ( ' 000000 ' + e [ 1 ] ) . slice ( - 6 ) + ( ' 000000 ' + countryCount [ e [ 1 ] ] ) . slice ( - 6 ) ; countryCount [ e [ 1 ] ] ++ ; } ) ; citys . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] ) ) ; let result = ' ' ; citys . forEach ( e => result += ( e [ 3 ] + ' \n ' ) ) ; console . log ( result . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function I ( t , i ) { this . _s = t . split ( " \n " ) , this . _c = 0 , this . _l = 0 , this . _f = i || Number } I . prototype . a = function ( t ) { var i = this . _s [ this . _l ] ; if ( i ) { var s = i . trim ( ) . split ( " " ) , h = s [ this . _c ] ; return this . _c ++ , s . length === this . _c && ( this . _c = 0 , this . _l ++ ) , t ? t ( h ) : this . _f ( h ) } } , I . prototype . l = function ( t ) { var i = this . _s [ this . _l ] ; if ( i ) return this . _c = 0 , this . _l ++ , i . split ( " " ) . map ( t || this . _f ) } , module . exports = I ; function main ( input ) { var o = new I ( input ) ; var a = o . a ( ) ; var b = o . a ( ) ; if ( a >= 13 ) { console . log ( b ) ; } else if ( a <= 5 ) { console . log ( 0 ) ; } else { console . log ( b / 2 ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var output ; if ( A <= 5 ) { output = 0 ; } else if ( A <= 12 ) { output = B / 2 ; } else { output = B ; } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var t = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var a = t [ 0 ] var b = t [ 1 ] if ( a <= 5 ) { console . log ( 0 ) } else if ( a < 13 ) { console . log ( b / 2 ) } else { console . log ( b ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { var input = x console . log ( Math . pow ( input , 3 ) ) } )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( Arr . length != 0 ) { var result = [ ] ; var NT = ( Arr . shift ( ) ) . split ( " " ) . map ( Number ) ; for ( var i = 0 ; i < NT [ 0 ] ; i ++ ) { var arr = ( Arr . shift ( ) ) . split ( " " ) ; var a = arr [ 0 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; if ( i > 0 ) { var A = a [ 0 ] * 60 + a [ 1 ] ; var B = b [ 0 ] * 60 + b [ 1 ] ; if ( A - B >= NT [ 1 ] ) result . push ( c + " " + ( A - B ) ) ; } var b = arr [ 2 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; var c = arr [ 3 ] ; } if ( result . length == 0 ) { console . log ( 0 ) ; } else { console . log ( result . length ) ; result . forEach ( function ( v ) { console . log ( v ) ; } ) ; } }
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const N = parseInt ( input [ 0 ] ) let X = input [ 1 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) X = X . sort ( ) const MAX = 100 let result = Infinity for ( let i = 1 ; i <= MAX ; ++ i ) { let total = 0 for ( let j = 0 ; j < N ; ++ j ) { const n = X [ j ] - i total += n * n } result = Math . min ( result , total ) } if ( result === Infinity ) result = 1 console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' ' ) ; var k = parseInt ( lines [ 0 ] ) ; var s = parseInt ( lines [ 1 ] ) ; var value = 0 ; for ( var x = 0 ; x <= k ; x ++ ) { for ( var y = 0 ; y <= k ; y ++ ) { var z = s - x - y ; if ( z <= k && z >= 0 ) { ++ value ; } else { value = value + 0 ; } } } console . log ( value ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const ans = exec ( lines ) ; console . log ( ans ) ; } ) ; function exec ( lines ) { const x = parseInt ( lines [ 0 ] ) ; return ( x * x * x ) ; }
' use strict ' const INF = 900719925474099 ; function Main ( input ) { let temp = input . trim ( ) . split ( ' ' ) ; let a = parseInt ( temp [ 0 ] ) ; let b = parseInt ( temp [ 1 ] ) ; if ( a >= 13 ) { console . log ( b ) ; } else if ( a >= 6 ) { console . log ( b / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
function Main ( input ) { var N = input . split ( " \n " ) [ 0 ] ; var a = input . split ( " \n " ) [ 1 ] . split ( " " ) ; var as = a . sort ( ) ; var dev = parseInt ( as [ ( N - 1 ) ] , 10 ) - parseInt ( as [ 0 ] , 10 ) ; console . log ( dev ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function main ( arg ) { var data = arg . trim ( ) . split ( " \n " ) var tmp = data . shift ( ) . split ( ' ' ) . map ( Number ) var N = tmp [ 0 ] var D = tmp [ 1 ] data = data . map ( e => e . split ( ' ' ) . map ( Number ) ) var ans = 0 for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i ; j < N ; j ++ ) { if ( i === j ) continue var row1 = data [ i ] var row2 = data [ j ] var yz = 0 for ( var d = 0 ; d < D ; d ++ ) { var t = Math . abs ( row1 [ d ] - row2 [ d ] ) yz += t * t } var tAns = Math . sqrt ( yz ) if ( ! ( String ( tAns ) . split ( ' . ' ) . length > 1 ) ) { ans ++ } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ) ; function main ( input ) { input = input . trim ( ) . split ( " \n " ) ; const N = parseInt ( input . shift ( ) ) ; const permutation = input [ 0 ] . split ( " " ) . map ( Number ) ; let result = 0 ; let min = permutation [ 0 ] ; for ( let i = 0 ; i < N ; i ++ ) { if ( min >= permutation [ i ] ) { result ++ ; min = permutation [ i ] ; } } console . log ( result ) ; }
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] . split ( ' ' ) [ 0 ] ) , m = parseInt ( input [ 0 ] . split ( ' ' ) [ 1 ] ) ; input . shift ( ) ; let py = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { py [ i ] = new Array ( 4 ) . fill ( 0 ) ; input [ i ] = input [ i ] . split ( ' ' ) . map ( val => parseInt ( val , 10 ) ) ; py [ i ] = [ input [ i ] [ 0 ] , input [ i ] [ 1 ] , i , 0 ] ; } py . sort ( ( a , b ) => b [ 0 ] - a [ 0 ] > 0 ? - 1 : a [ 0 ] - b [ 0 ] > 0 ? 1 : b [ 1 ] - a [ 1 ] > 0 ? - 1 : a [ 1 ] - b [ 1 ] > 0 ? 1 : 0 ) ; let count = 1 ; for ( let i = 0 ; i < m - 1 ; i ++ ) { py [ i ] [ 3 ] = count ; if ( py [ i ] [ 0 ] == py [ i + 1 ] [ 0 ] ) { count ++ ; } else { count = 1 ; } } py [ m - 1 ] [ 3 ] = count ; py . sort ( ( a , b ) => b [ 2 ] - a [ 2 ] > 0 ? - 1 : a [ 2 ] - b [ 2 ] > 0 ? 1 : 0 ) ; for ( let i = 0 ; i < m ; i ++ ) { console . log ( ( " 000000 " + py [ i ] [ 0 ] ) . slice ( - 6 ) + ( " 000000 " + py [ i ] [ 3 ] ) . slice ( - 6 ) ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
( args => { const [ A , B , H , M ] = args . trim ( ) . split ( ' ' ) . map ( parseFloat ) ; const theta = ( ( H + M / 60 ) / 12.0 - M / 60.0 ) * Math . PI * 2.0 ; const CC = A * A + B * B - 2.0 * A * B * Math . cos ( theta ) ; console . log ( ( Math . sqrt ( CC ) ) . toString ( ) ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = ( input ) => { input = input . split ( ' \n ' ) . map ( i => Number ( i ) ) const k = input [ input . length - 2 ] const array = input . slice ( 0 , 5 ) const max = Math . max ( ... array ) const min = Math . min ( ... array ) if ( max - min <= k ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
console . log ( ( args => { const c = args . trim ( ) . split ` \n ` . map ( r => r . split ` ` . map ( v => v | 0 ) ) ; for ( let i = 1 ; i < 3 ; i ++ ) { for ( let j = 1 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] - c [ i ] [ j - 1 ] !== c [ i - 1 ] [ j ] - c [ i - 1 ] [ j - 1 ] ) return ' No ' ; if ( c [ j ] [ i ] - c [ j ] [ i - 1 ] !== c [ j - 1 ] [ i ] - c [ j - 1 ] [ i - 1 ] ) return ' No ' ; } } return ' Yes ' ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( ' ' ) ; var h1 = parseInt ( tmp [ 0 ] ) ; var m1 = parseInt ( tmp [ 1 ] ) ; var h2 = parseInt ( tmp [ 2 ] ) ; var m2 = parseInt ( tmp [ 3 ] ) ; var k = parseInt ( tmp [ 4 ] ) ; var min1 = 60 * h1 + m1 ; var min2 = 60 * h2 + m2 ; var a = min2 - min1 - k ; console . log ( a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const A = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const B = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( 13 > A && A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; var reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( " line " , line => { let arr = [ 1 , 4 , 7 , 9 ] ; let n = line . split ( / \s / ) . map ( x => parseInt ( x ) ) . sort ( ( a , b ) => a - b ) ; let ans = true ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] != n [ i ] ) { ans = false ; break ; } } if ( ans ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
" use strict " ; function _slicedToArray ( arr , i ) { return _arrayWithHoles ( arr ) || _iterableToArrayLimit ( arr , i ) || _nonIterableRest ( ) ; } function _nonIterableRest ( ) { throw new TypeError ( " Invalid attempt to destructure non-iterable instance " ) ; } function _iterableToArrayLimit ( arr , i ) { var _arr = [ ] ; var _n = true ; var _d = false ; var _e = undefined ; try { for ( var _i = arr [ Symbol . iterator ] ( ) , _s ; ! ( _n = ( _s = _i . next ( ) ) . done ) ; _n = true ) { _arr . push ( _s . value ) ; if ( i && _arr . length === i ) break ; } } catch ( err ) { _d = true ; _e = err ; } finally { try { if ( ! _n && _i [ " return " ] != null ) _i [ " return " ] ( ) ; } finally { if ( _d ) throw _e ; } } return _arr ; } function _arrayWithHoles ( arr ) { if ( Array . isArray ( arr ) ) return arr ; } ! function ( ) { function splitNum ( line ) { return ( Array . isArray ( line ) ? line : line . split ( / \s+ / ) ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; } ! function ( input ) { var lines = input . split ( " \n " ) ; var _splitNum = splitNum ( lines [ 0 ] ) , _splitNum2 = _slicedToArray ( _splitNum , 2 ) , A = _splitNum2 [ 0 ] , B = _splitNum2 [ 1 ] ; if ( A <= 5 ) console . log ( 0 ) ; else if ( A <= 12 ) console . log ( B / 2 ) ; else console . log ( B ) ; } ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; } ( ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { console . log ( Math . pow ( input [ 0 ] , 3 ) ) ; }
let [ a , b , c ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) . sort ( ( x , y ) => x - y ) ; console . log ( a == 5 && b == 5 && c == 7 ? " YES " : " NO " ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) m = index ; } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var [ h , r ] = input . trim ( ) . split ( " " ) . map ( Number ) ; if ( r + h == 0 ) console . log ( 0 ) ; else if ( r + h > 0 ) console . log ( 1 ) ; else console . log ( - 1 ) ;
const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; var k = parseInt ( arg . pop ( ) ) ; console . log ( arg . pop ( ) - arg . shift ( ) > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
function Main ( arg ) { var N = arg . split ( " \n " ) [ 0 ] - 0 ; var P = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var max = N ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( max >= P [ i ] ) { ans ++ ; max = P [ i ] ; } } console . log ( ans ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var a = parseInt ( input ) ; console . log ( a * a * a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 && A <= 12 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] ) ; var B = parseInt ( input . split ( " " ) [ 1 ] ) ; var C = parseInt ( input . split ( " " ) [ 2 ] ) ; var sevenCount = 0 ; var fiveCount = 0 ; if ( A == 5 ) { fiveCount ++ ; } else if ( A == 7 ) { sevenCount ++ ; } if ( B == 5 ) { fiveCount ++ ; } else if ( B == 7 ) { sevenCount ++ ; } if ( C == 5 ) { fiveCount ++ ; } else if ( C == 7 ) { sevenCount ++ ; } if ( fiveCount == 2 && sevenCount == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input ; var x = parseInt ( lines , 10 ) ; var kotae = x * x * x ; console . log ( kotae ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b , c ] = input . split ( ' ' ) . map ( Number ) ; console . log ( a * b * c == 175 ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let main = function ( standardInput ) { let lengthList = standardInput . split ( ' ' ) ; let varticalLength = Number . parseInt ( lengthList [ 0 ] ) ; console . log ( varticalLength * varticalLength * varticalLength ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; if ( input [ 0 ] <= 5 ) console . log ( 0 ) else if ( input [ 0 ] < 13 ) console . log ( input [ 1 ] / 2 ) else console . log ( input [ 1 ] ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( line ) { var x = parseInt ( line . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const input = Number ( chunk ) ; console . log ( input * input * input ) ; } ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) ; const n = Number ( s [ 0 ] . split ( ' ' ) [ 0 ] ) ; const m = Number ( s [ 0 ] . split ( ' ' ) [ 1 ] ) ; const a = s . slice ( 1 , 1 + n ) . map ( l => l . split ( ' ' ) ) ; const b = s . slice ( 1 + n , - 1 ) . map ( l => l . split ( ' ' ) ) ; const dx = [ ] ; const dy = [ ] ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { dx . push ( i ) ; dy . push ( j ) ; } } let ans = false ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { for ( let k = 0 , len = Math . pow ( m , 2 ) ; k < len ; k ++ ) { const ni = i + dx [ k ] ; const nj = j + dy [ k ] ; if ( ni < 0 || n <= ni ) break ; if ( nj < 0 || n <= nj ) break ; if ( a [ ni ] [ nj ] !== b [ dx [ k ] ] [ dy [ k ] ] ) break ; if ( k === ( len - 1 ) ) ans = true ; } } } console . log ( ans ? ' Yes ' : ' No ' ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
let input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; let Arr = ( input . trim ( ) ) . split ( " \n " ) ; let bmis = new Map ( ) while ( 1 ) { let n = Arr [ 0 ] ; if ( n == 0 ) break ; Arr . shift ( ) ; for ( var i = 0 ; i < n ; ++ i ) { var nums = Arr [ 0 ] . split ( " " ) . map ( Number ) ; var m = nums [ 1 ] / 100 var bmi = nums [ 2 ] / ( m * m ) ; var dif = Math . abs ( 22 - bmi ) bmis . set ( nums [ 0 ] . toString ( ) , dif ) ; Arr . shift ( ) ; } let sorted = new Map ( [ ... bmis . entries ( ) ] . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ) ; console . log ( sorted . keys ( ) . next ( ) . value ) ; }
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var num = parseInt ( line [ 0 ] ) ; var max = 0 ; var min = 10000 ; var data = input [ 1 ] . split ( " " ) ; for ( var i = 0 ; i < num ; i ++ ) { data [ i ] = parseInt ( data [ i ] ) ; } for ( var i = 0 ; i < num ; i ++ ) { if ( max < data [ i ] ) { max = data [ i ] ; } if ( min > data [ i ] ) { min = data [ i ] ; } } console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) const a = parseInt ( args [ 0 ] , 10 ) const b = parseInt ( args [ 1 ] , 10 ) if ( a >= 13 ) console . log ( b ) else if ( a >= 6 ) console . log ( b / 2 ) else console . log ( 0 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " " ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var c = input [ 2 ] ; var d = input [ 3 ] ; var answer = a * b ; var tmpA = c * d ; if ( answer < tmpA ) answer = tmpA ; console . log ( ' %s ' , answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( x * x * x ) ;
" use strict " function main ( input ) { let nums = input . split ( ' ' ) nums = nums . map ( x => + x ) nums . sort ( ) let num = 0 ; for ( let i = 0 ; i < nums . length ; i ++ ) { let red = ( i >= 1 ) ? nums [ i - 1 ] : 0 num += Math . abs ( nums [ i ] - red ) } num -= nums [ 0 ] console . log ( num ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var arr = chunk . split ( ' \n ' ) ; var x = parseInt ( arr [ 0 ] ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
' use strict ' const main = ( INPUT ) => { const N = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) let ans = ' NO ' if ( N . indexOf ( ' 1 ' ) >= 0 && N . indexOf ( ' 9 ' ) >= 0 && N . indexOf ( ' 7 ' ) >= 0 && N . indexOf ( ' 4 ' ) >= 0 ) { ans = ' YES ' } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var H = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; var hrad = Math . PI * 2 / ( 12 * 60 ) ; var mrad = Math . PI * 2 / 60 ; var ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( ( H * 60 + M ) * hrad - M * mrad ) ) ; console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function Main ( input ) { Array . prototype . max = function ( ) { return Math . max . apply ( null , this ) } Array . prototype . min = function ( ) { return Math . min . apply ( null , this ) } num = ( val ) => Array . isArray ( val ) ? val . map ( ( v ) => Number ( v ) ) : Number ( val ) print = console . log var line = input . split ( " \n " ) var n = num ( line [ 0 ] ) var a = num ( line [ 1 ] . split ( " " ) ) print ( a . max ( ) - a . min ( ) ) }
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( function ( x ) { return x . split ( " " ) } ) ; let T1 = parseInt ( input [ 0 ] [ 0 ] , 10 ) ; let T2 = parseInt ( input [ 0 ] [ 1 ] , 10 ) ; let A1 = parseInt ( input [ 1 ] [ 0 ] , 10 ) ; let A2 = parseInt ( input [ 1 ] [ 1 ] , 10 ) ; let B1 = parseInt ( input [ 2 ] [ 0 ] , 10 ) ; let B2 = parseInt ( input [ 2 ] [ 1 ] , 10 ) ; let d1 = BigInt ( A1 - B1 ) * BigInt ( T1 ) ; let d2 = BigInt ( A2 - B2 ) * BigInt ( T2 ) + d1 ; let ans = 0n ; let tmp ; if ( d2 === 0n ) ans = ' infinity ' ; else if ( d1 * d2 < 0n ) { d2 = d2 * - 1n ; tmp = ( d1 / d2 ) ; ans = ( tmp * d2 === d1 ) ? tmp * 2n : tmp * 2n + 1n ; } else ans = 0 ; console . log ( ans . toString ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . replace ( / \n / g , ' ' ) ; input = input . split ( " " ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; var C = input [ 2 ] ; var D = input [ 3 ] ; var ans = 0 ; var Sado = Math . abs ( C * 30 + D / 2 - D * 6 ) ; if ( Sado > 180 ) { Sado = 360 - Sado ; } var p = A * A + B * B ; var q = 2 * A * B ; ans = Math . sqrt ( p - q * Math . cos ( Sado * ( Math . PI / 180 ) ) ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const lines = input . trim ( ) . split ( ' \n ' ) ; while ( line = lines . shift ( ) ) { const x = parseInt ( line ) ; console . log ( x * x * x ) ; }
function * main ( ) { const N = parseInt ( ( yield ) , 10 ) ; const P = ( yield ) . split ( " " ) . map ( s => parseInt ( s , 10 ) ) ; let m = 200001 , ans = 0 ; for ( let p of P ) { if ( p < m ) ans ++ ; m = Math . min ( m , p ) ; } console . log ( ans ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( " line " , line => iter . next ( line ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var n = Number ( lines [ 0 ] ) ; var info = lines [ 1 ] . split ( ' ' ) ; var info = info . map ( function ( str ) { return Number ( str ) } ) ; var sum = 0 ; var ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += info [ i ] ; } var ave = Math . round ( sum / n ) ; for ( i = 0 ; i < n ; i ++ ) { var sa = ( info [ i ] - ave ) * ( info [ i ] - ave ) ; ans += sa } console . log ( ans ) ; } ) ;
function main ( ) { process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; var chunks = " " ; process . stdin . on ( " data " , function ( chunk ) { chunks += chunk ; } ) ; process . stdin . on ( " end " , function ( ) { var inputs = chunks . trim ( ) . split ( " \n " ) ; var nums = inputs [ 0 ] . split ( " " ) ; var go = 0 ; var shichi = 0 ; nums . forEach ( ( n ) => { if ( n === " 5 " ) { go += 1 ; } else if ( n === " 7 " ) { shichi += 1 ; } } ) ; go === 2 && shichi === 1 ? console . log ( " YES " ) : console . log ( " NO " ) ; } ) ; } main ( ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let a = + cin . shift ( ) ; let b = + cin . shift ( ) ; let h = + cin . shift ( ) ; let m = + cin . shift ( ) ; let theta = Math . PI * ( ( h / 6 + m / 360 ) - m / 30 ) ; let xx = a * a + b * b - 2 * a * b * Math . cos ( theta ) ; let x = Math . sqrt ( xx ) ; console . log ( x ) ; } main ( ) ;
function Main ( input ) { input = input . split ( " " ) . map ( e => Number ( e ) ) . sort ( ) ; console . log ( input [ 0 ] === 1 && input [ 1 ] === 4 && input [ 2 ] === 7 && input [ 3 ] === 9 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const nums = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( v => parseInt ( v ) ) . sort ( ( a , b ) => a - b ) console . log ( nums [ nums . length - 1 ] - nums [ 0 ] ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function main ( s ) { const set = new Set ( s . split ( ' \n ' ) [ 1 ] . split ( ' ' ) ) ; const ans = ( [ ... set ] . length === 4 ) ? ' Four ' : ' Three ' ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
log = console . log ; var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ; var lines = stdin . split ( " " ) . map ( Number ) ; var N = lines [ 0 ] var K = lines [ 1 ] var diff = N - K if ( K === 1 ) { log ( 0 ) } else { log ( diff ) }
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
line = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) , n = parseInt ( line [ 0 ] ) , v = line [ 1 ] . split ( " " ) ; for ( var odds = { } , even = { } , i = 0 ; i < v . length ; i ++ ) di = 1 & i ? even : odds , di [ v [ i ] ] = di [ v [ i ] ] ? di [ v [ i ] ] + 1 : 1 ; var a = [ ] , b = [ ] ; for ( var k in odds ) a . push ( { v : k , n : odds [ k ] } ) ; for ( var k in even ) b . push ( { v : k , n : even [ k ] } ) ; a . sort ( ( n , i ) => i . n - n . n ) , b . sort ( ( n , i ) => i . n - n . n ) , a [ 0 ] . v != b [ 0 ] . v && ( b [ 1 ] = b [ 0 ] ) , log = console . log , log ( n - Math . max ( a [ 0 ] . n + ( b [ 1 ] ? b [ 1 ] . n : 0 ) , ( a [ 1 ] ? a [ 1 ] . n : 0 ) + b [ 0 ] . n ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const n = input [ 0 ] . split ( " " ) [ 0 ] ; const d = input [ 0 ] . split ( " " ) [ 1 ] ; var array = [ ] ; for ( var i = 1 ; i <= n ; i ++ ) { array . push ( input [ i ] . split ( " " ) ) ; } var square = 0 ; var distance = [ ] ; for ( var i = 0 ; i <= n - 2 ; i ++ ) { for ( var j = i + 1 ; j <= n - 1 ; j ++ ) { for ( var k = 0 ; k <= d - 1 ; k ++ ) { square = square + Math . pow ( ( array [ i ] [ k ] - array [ j ] [ k ] ) , 2 ) ; } distance . push ( Math . pow ( square , 1 / 2 ) ) ; square = 0 ; } } var intDistance = distance . filter ( function ( value ) { return Number . isInteger ( value ) ; } ) console . log ( intDistance . length ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) . split ( " \n " ) ; n = parseInt ( input [ 0 ] ) ; x = input [ 1 ] . split ( " " ) . map ( p => Number ( p ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var c = Math . round ( total / n ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . pow ( Math . abs ( x [ i ] - c ) , 2 ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function main ( input ) { let nums = input . split ( ' ' ) nums = nums . map ( x => + x ) nums . sort ( ) . reverse ( ) let num = 0 ; for ( let i = 0 ; i < nums . length ; i ++ ) { let red = ( i >= 1 ) ? nums [ i - 1 ] : 0 num += Math . abs ( nums [ i ] - red ) } num -= nums [ 0 ] console . log ( num ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; nm = input [ 0 ] . split ( " " ) ; n = parseInt ( nm [ 0 ] ) ; m = parseInt ( nm [ 1 ] ) ; t = [ ] ; for ( var i = 0 ; i < m ; i ++ ) { r = [ ] ; for ( var j = 0 ; j < m ; j ++ ) { r . push ( input [ i + 1 + n ] [ j ] ) ; } t . push ( r ) ; } yes = false ; loop0 : for ( var i = 0 ; i < n - m + 1 ; i ++ ) { for ( var j = 0 ; j < n - m + 1 ; j ++ ) { loop1 : for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( input [ i + 1 + k ] [ j + l ] != t [ k ] [ l ] ) { break loop1 ; } } if ( k == m - 1 ) { yes = true ; break loop0 ; } } } } if ( yes ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function sum_arr ( arr ) { return arr . reduce ( function ( prev , current , i , arr ) { return prev + current ; } ) ; } ; function main ( arg ) { arg = arg . split ( " \n " ) var N = arg [ 0 ] . split ( " " ) [ 0 ] var A = arg [ 1 ] . split ( " " ) . map ( e => Number ( e ) ) var B = arg [ 2 ] . split ( " " ) . map ( e => Number ( e ) ) var diffs = [ ] var diff_m = 0 var counter = 0 for ( var i = 0 ; i < A . length ; i ++ ) { var tmp = A [ i ] - B [ i ] if ( tmp < 0 ) { diff_m += tmp counter ++ } else { diffs . push ( tmp ) } } if ( diff_m >= 0 ) { console . log ( 0 ) return } diffs . sort ( ( a , b ) => b - a ) for ( var i = 0 ; i < diffs . length ; i ++ ) { diff_m += diffs [ i ] counter ++ if ( diff_m > 0 ) { break } } if ( diff_m <= 0 ) { console . log ( - 1 ) return ; } console . log ( counter ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var kotae = input * input * input ; console . log ( kotae ) ;
" use strict " ; function main ( input ) { let output = input * input * input ; console . log ( output ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const a = parseInt ( input . split ( " \n " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " \n " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " \n " ) [ 2 ] , 10 ) ; const d = parseInt ( input . split ( " \n " ) [ 3 ] , 10 ) ; const e = parseInt ( input . split ( " \n " ) [ 4 ] , 10 ) ; const k = parseInt ( input . split ( " \n " ) [ 5 ] , 10 ) ; if ( e - a > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = input [ 0 ] ; var arr = input [ 1 ] . split ( " " ) . map ( Number ) ; var ans = Number . MAX_SAFE_INTEGER ; var max = Math . max . apply ( null , arr ) ; for ( var i = 1 ; i <= max ; i ++ ) { var sum = 0 ; for ( var j = 0 ; j < arr . length ; j ++ ) { sum += Math . pow ( Math . abs ( arr [ j ] - i ) , 2 ) ; } if ( sum < ans ) ans = sum ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' function main ( input ) { input = input . split ( / \n / ) const n = ~ ~ input [ 0 ] let houses = input [ 1 ] . split ( ' ' ) . map ( v => ~ ~ v ) . filter ( ( v , i , self ) => { return self . indexOf ( v ) === i } ) . sort ( ( a , b ) => a - b ) const ans = houses [ houses . length - 1 ] - houses [ 0 ] console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var ans = 0 ; var map = { } ; input [ 1 ] . split ( " " ) . forEach ( v => { if ( ! map [ v ] ) ans ++ ; map [ v ] = true ; } ) ; console . log ( ans == 3 ? " Three " : " Four " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
" use strict " ; const main = arg => { const S = arg . split ( " \n " ) [ 0 ] . split ( " " ) . map ( n => parseInt ( n ) ) . sort ( ) ; console . log ( S . join ( " " ) === " 557 " ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( num => Number ( num ) ) ; input . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; if ( input . toString ( ) === [ 5 , 5 , 7 ] . toString ( ) ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { for ( var i = 0 ; i <= 10 ; i ++ ) { if ( Math . pow ( 2 , i ) > input ) { i -- ; break ; } } console . log ( Math . pow ( 2 , i ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { var inputs = input . trim ( ) ; var items = input . split ( " " ) . map ( ( item ) => { return parseInt ( item ) ; } ) ; items . sort ( ) ; var target = [ 5 , 5 , 7 ] ; var flag = true ; for ( var i = 0 ; i < 3 ; ++ i ) { if ( items [ i ] != target [ i ] ) { flag = false ; break ; } } console . log ( flag ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var h1 = parseInt ( inputs [ 0 ] , 10 ) ; var m1 = parseInt ( inputs [ 1 ] , 10 ) ; var h2 = parseInt ( inputs [ 2 ] , 10 ) ; var m2 = parseInt ( inputs [ 3 ] , 10 ) ; var k = parseInt ( inputs [ 4 ] , 10 ) ; var minute1 = h1 * 60 + m1 ; var minute2 = h2 * 60 + m2 ; var difference = minute2 - minute1 ; console . log ( difference - k ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( String ( myOut ) ) ; function main ( ) { var n = next ( ) ; var ans = 0 , mn = 1 ; for ( var i = 0 ; i < n ; i ++ ) { var t = next ( ) - 1 ; if ( t < mn ) { mn = Math . max ( mn , t + 2 ) ; } else { ans += t / mn | 0 ; mn = Math . max ( 2 , mn ) ; } } return ans ; }
function Main ( input ) { const inputLines = input . split ( " \n " ) ; const line0 = inputLines [ 0 ] ; const line0vars = line0 . split ( " " ) ; const h1 = parseInt ( line0vars [ 0 ] , 10 ) const m1 = parseInt ( line0vars [ 1 ] , 10 ) const h2 = parseInt ( line0vars [ 2 ] , 10 ) const m2 = parseInt ( line0vars [ 3 ] , 10 ) const k = parseInt ( line0vars [ 4 ] , 10 ) const result = h2 * 60 + m2 - h1 * 60 - m1 - k ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' ' ) . map ( x => x * 1 ) ; let A = inp [ 0 ] ; let B = inp [ 1 ] ; let H = inp [ 2 ] ; let M = inp [ 3 ] ; let Hkaku = H * 30 + M * 0.5 ; let Mkaku = M * 6 ; let kaku = ( Mkaku - Hkaku ) * Math . PI / 180 ; let ans = 0 ; ans = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( kaku ) ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
( stdin => { const xCubic = x => x * x * x const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const n = parseInt ( inputs [ 0 ] , 10 ) console . log ( xCubic ( n ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function count ( n ) { var c = 0 ; while ( n % 2 === 0 ) { n = Math . floor ( n / 2 ) ; c += 1 ; } return c ; } function Main ( inp ) { var input = inp . split ( " \n " ) ; var n = Number ( input [ 0 ] ) ; var max = 0 ; var r = 1 ; for ( var i = 1 ; i <= n ; i ++ ) { var c = count ( i ) ; if ( c > max ) { max = c ; r = i ; } } console . log ( r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const n = ~ ~ ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const m = ~ ~ ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const a = arg . slice ( 1 , n + 1 ) . map ( n => n . split ( " " ) ) ; const b = arg . slice ( n + 1 , ( n + 1 ) + ( m + 1 ) ) . map ( n => n . split ( " " ) ) ; let answer = false ; const A = [ ] ; const B = [ ] ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { A . push ( i ) ; B . push ( j ) ; } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { for ( let k = 0 , len = Math . pow ( m , 2 ) ; k < len ; k ++ ) { const X = i + A [ k ] ; const Y = j + B [ k ] ; if ( X < 0 || n <= X ) break ; if ( Y < 0 || n <= Y ) break ; if ( a [ X ] [ Y ] !== b [ A [ k ] ] [ B [ k ] ] ) break ; if ( k === ( len - 1 ) ) answer = true ; } } } console . log ( answer ? " Yes " : " No " ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function longAngle ( m ) { return m * 6 } function shortAngle ( h , m ) { return 30 * ( h + m / 60 ) } function cosTheo ( a , b , A ) { return Math . sqrt ( Math . abs ( a * a + b * b - 2 * Math . cos ( A ) * a * b ) ) } function main ( input ) { const inputs = input . split ( ' ' ) const a = Number ( inputs [ 0 ] ) const b = Number ( inputs [ 1 ] ) const h = Number ( inputs [ 2 ] ) const m = Number ( inputs [ 3 ] ) let angle = ( Math . abs ( longAngle ( m ) - shortAngle ( h , m ) ) ) * Math . PI / 180 let rad = Math . PI * 2 * ( h / 12.0 + ( m / 60.0 ) / 12.0 - m / 60.0 ) console . log ( cosTheo ( a , b , angle ) ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
" use strict " function consume ( x , p ) { return Math . pow ( ( x - p ) , 2 ) ; } function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; const N = Number ( input [ 0 ] ) ; const X = input [ 1 ] . split ( ' ' ) . map ( Number ) ; const M = X . length ; let ret = [ ] ; for ( let p = 1 ; p <= 101 ; p ++ ) { let tmp = 0 ; for ( let i = 0 ; i < M ; i ++ ) { tmp += consume ( X [ i ] , p ) ; } ret . push ( tmp ) ; } console . log ( Math . min ( ... ret ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const a = input . split ( " " ) ; console . log ( Math . max ( a [ 0 ] * a [ 1 ] , a [ 2 ] * a [ 3 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp0 = input [ 0 ] . split ( " " ) ; N = Number ( tmp0 [ 0 ] ) D = Number ( tmp0 [ 1 ] ) num = [ ] for ( var i = 1 ; i <= N ; i ++ ) { tmp = input [ i ] . split ( " " ) x = [ ] for ( var j = 1 ; j <= D ; j ++ ) { x . push ( Number ( tmp [ j - 1 ] ) ) } num . push ( x ) } ans = 0 for ( var i = 1 ; i < N ; i ++ ) { for ( var j = i + 1 ; j <= N ; j ++ ) { var tmp = 0 for ( var k = 0 ; k < D ; k ++ ) { tmp += Math . pow ( Math . abs ( num [ i - 1 ] [ k ] - num [ j - 1 ] [ k ] ) , 2 ) } if ( Math . round ( Math . sqrt ( tmp ) ) === Math . sqrt ( tmp ) ) { ans ++ } } } console . log ( ans ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { let line = input . split ( ' ' ) . map ( x => Number ( x ) ) ; line . sort ( ) ; let answer = 0 ; answer = Math . abs ( line [ 1 ] - line [ 0 ] ) + Math . abs ( line [ 2 ] - line [ 1 ] ) ; console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; input = input [ 1 ] . split ( " " ) . map ( Number ) ; console . log ( Math . max . apply ( null , input ) - Math . min . apply ( null , input ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function main ( input ) { const nums = input . split ( " " ) const age = parseInt ( nums [ 0 ] , 10 ) const B = parseInt ( nums [ 1 ] , 10 ) if ( age >= 13 ) { console . log ( B ) } else if ( age >= 6 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { const list = input . split ( " " ) . map ( v => Number ( v ) ) ; const result = { true : " YES " , false : " NO " } ; const is575 = list => { const syllable575 = new Map ( ) ; syllable575 . set ( 5 , 2 ) ; syllable575 . set ( 7 , 1 ) ; for ( const syllable of syllable575 . keys ( ) ) { if ( list . filter ( v => v === syllable ? true : false ) . length !== syllable575 . get ( syllable ) ) { return ( false ) ; } } return ( true ) ; } console . log ( result [ is575 ( list ) ] ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; s = s . slice ( 0 , j ) + String . fromCharCode ( code ) + s . slice ( j + 1 ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; s = s . slice ( 0 , j ) + " a " + s . slice ( j + 1 ) ; } } } console . log ( s ) ;
function main ( lines ) { const input = parseInt ( lines . split ( ' \n ' ) [ 0 ] , 10 ) console . log ( input * input * input ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; if ( input [ input . length - 1 ] === ' ' ) { input . pop ( ) ; } const N = input [ 0 ] . split ( ' ' ) [ 0 ] - 0 ; const P = input [ 1 ] . split ( ' ' ) . map ( e => { return e - 0 ; } ) ; var min = Infinity ; var ret = 0 ; P . forEach ( e => { if ( min >= e ) { ret ++ ; min = e ; } } ) ; console . log ( ret ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) ; const a = n * n * n ; console . log ( a ) ; } ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
<?php fscanf ( STDIN , ' %d %d ' , $ year , $ cost ) ; if ( $ year < 6 ) { echo 0 ; } elseif ( $ year < 13 ) { echo ( int ) ( $ cost / 2 ) ; } else { echo $ cost ; }
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ num1 = ( $ h2 - $ h1 ) * 60 ; $ num2 = $ m2 - $ m1 ; $ num3 = $ num1 + $ num2 - $ k ; echo $ num3 ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { $ dist = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ dist += ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) ** 2 ; } if ( abs ( sqrt ( $ dist ) - round ( sqrt ( $ dist ) ) ) < 10 ** - 10 ) { $ c ++ ; } } } echo $ c ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; $ minutes = [ ' A ' => $ a , ' B ' => $ b , ' C ' => $ c , ' D ' => $ d , ' E ' => $ e ] ; $ minKey = null ; $ minVal = null ; foreach ( $ minutes as $ key => $ minute ) { $ mod = $ minute % 10 ; if ( $ mod === 0 ) { $ mod = 10 ; } if ( $ minKey === null || $ minVal > $ mod ) { $ minKey = $ key ; $ minVal = $ mod ; } } $ sum = 0 ; foreach ( $ minutes as $ key => $ minute ) { $ orderTime = toOrderTime ( $ minute ) ; if ( $ key === $ minKey ) { $ sum += $ minute ; } else { $ sum += $ orderTime ; } } echo $ sum ; function toOrderTime ( $ minute ) { $ mod = $ minute % 10 ; if ( $ mod === 0 ) { return $ minute ; } else { return $ minute + 10 - $ mod ; ; } } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ points = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ input = trim ( fgets ( STDIN ) ) ; $ points [ ] = explode ( ' ' , $ input ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ d ; ++ $ k ) { $ sum += pow ( $ points [ $ j ] [ $ k ] - $ points [ $ i ] [ $ k ] , 2 ) ; } if ( strpos ( sqrt ( $ sum ) , ' . ' ) === false ) { ++ $ count ; } } } echo $ count ;
<?php $ inp = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ sq1 = $ inp [ 0 ] * $ inp [ 1 ] ; $ sq2 = $ inp [ 2 ] * $ inp [ 3 ] ; if ( $ sq1 >= $ sq2 ) { echo $ sq1 ; } else { echo $ sq2 ; } ?>
<?php $ n = ints ( ) ; sort ( $ n ) ; echo $ n === [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = array ( ) ; $ y = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } $ k = 1 ; for ( $ i = $ n ; $ i > 0 ; $ i -- ) { $ k *= $ i ; } $ distance_array = array ( ) ; $ distance_total = 0 ; $ diff_pettern = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ distance_array [ $ diff_pettern ] = sqrt ( pow ( ( $ x [ $ i ] - $ x [ $ j ] ) , 2 ) + pow ( ( $ y [ $ i ] - $ y [ $ j ] ) , 2 ) ) ; $ distance_total += $ distance_array [ $ diff_pettern ] ; $ diff_pettern ++ ; } } $ cond_num = ( $ k * ( $ n - 1 ) ) / $ diff_pettern ; echo ( $ cond_num * $ distance_total / $ k ) ;
<?php list ( $ n ) = ints ( ) ; $ a = ints ( ) ; $ b = ints ( ) ; $ suma = array_sum ( $ a ) ; $ sumb = array_sum ( $ b ) ; if ( $ sumb > $ suma ) exit ( ' -1 ' ) ; $ md = $ pd = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ d = $ a [ $ i ] - $ b [ $ i ] ; if ( $ d < 0 ) $ md [ ] = $ d ; elseif ( $ d > 0 ) $ pd [ ] = $ d ; } if ( count ( $ md ) === 0 ) exit ( ' 0 ' ) ; $ ans = count ( $ md ) ; $ sum_md = array_sum ( $ md ) ; $ i = 0 ; rsort ( $ pd ) ; while ( $ sum_md < 0 ) { $ sum_md += $ pd [ $ i ] ; ++ $ i ; } $ ans += $ i ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ sum = array_sum ( $ x ) ; $ p = round ( $ sum / $ n ) ; $ ans = 0 ; foreach ( $ x as $ v ) { $ ans += ( $ v - $ p ) ** 2 ; } echo $ ans ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ A = $ a * $ b ; $ B = $ c * $ d ; echo $ A > $ B ? $ A : $ B ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a === 1 ) { $ a = 14 ; } if ( $ b === 1 ) { $ b = 14 ; } if ( $ a === $ b ) { echo ' Draw ' ; } elseif ( $ a > $ b ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ x = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ pos = round ( array_sum ( $ x ) / sizeof ( $ x ) ) ; $ i = 0 ; foreach ( $ x as $ val ) { $ i += pow ( $ val - $ pos , 2 ) ; } echo $ i . PHP_EOL ;
<?php $ in = ( fgets ( STDIN ) ) ; echo ( $ in * $ in * $ in ) ; ?>
<?php list ( $ K , $ S ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { if ( $ S - $ i - $ j >= 0 && $ S - $ i - $ j <= $ K ) { $ c ++ ; } } } echo $ c ;
<?php $ x = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ x * $ x * $ x . " \n " ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ x3 = pow ( $ x , 3 ) ; echo $ x3 ; ?>
<?php $ array = [ ] ; fscanf ( STDIN , " %d %d %d %d " , $ array [ ' A ' ] , $ array [ ' B ' ] , $ array [ ' C ' ] , $ array [ ' D ' ] ) ; $ ab = $ array [ ' A ' ] * $ array [ ' B ' ] ; $ cd = $ array [ ' C ' ] * $ array [ ' D ' ] ; echo max ( $ ab , $ cd ) ; ?>
<?php $ input = explode ( " " , fgets ( STDIN ) ) ; $ K = intval ( $ input [ 0 ] ) ; $ S = intval ( $ input [ 1 ] ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - ( $ x + $ y ) ; if ( $ z <= $ K && 0 <= $ z ) { if ( $ x + $ y + $ z == $ S ) { $ count ++ ; } } } } echo $ count ;
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= $ K && $ X <= $ S ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ K && $ Y <= $ S - $ X ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( ! $ N ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += $ n ; echo $ s , PHP_EOL ; }
<?php $ inputs = explode ( " " , file_get_contents ( " php: $ inputs = array_map(intval, $ inputs ); list( $ a , $ b , $ c , $ d ) = $ inputs ; echo max( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; $ memo = [ ] ; foreach ( $ pref as $ key => $ list ) { foreach ( $ pref [ $ key ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php $ a = fgets ( STDIN ) ; $ a *= $ a * $ a ; echo $ a . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ c = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) { $ c ++ ; } } } echo $ c . " \n " ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; printf ( " %d \n " , abs ( $ a [ 2 ] - $ a [ 1 ] ) + abs ( $ a [ 1 ] - $ a [ 0 ] ) ) ;
<?php $ x = fgets ( STDIN ) ; print ( $ x * $ x * $ x ) ; ?>
<?php $ inVal = trim ( fgets ( STDIN ) ) ; $ ans = $ inVal ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { $ ans = $ ans * $ inVal ; } echo $ ans . PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ hangle = $ h == 0 ? 360 : 360 / 12 * $ h ; if ( $ m !== 0 ) { $ mangle = $ m == 0 ? 360 : 360 / 60 * $ m ; $ hangle += 360 / 12 / 60 * $ m ; } if ( $ hangle == $ mangle ) { echo " 0 " . PHP_EOL ; exit ; } else if ( $ hangle > $ mangle ) { $ angle = $ hangle - $ mangle ; } else { $ angle = $ mangle - $ hangle ; } if ( $ angle == 90 ) { echo sqrt ( ( $ a ** 2 ) + ( $ b ** 2 ) ) . PHP_EOL ; } else { echo sqrt ( ( $ a ** 2 ) + ( $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ angle ) ) ) ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ max = 0 ; $ max_i = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ j = $ i ; $ count = 0 ; while ( $ j % 2 === 0 ) { $ j = $ j / 2 ; $ count ++ ; } if ( $ count >= $ max ) { $ max = $ count ; $ max_i = $ i ; } } print $ max_i ;
<?php list ( $ n , $ m ) = explode ( " " , fgets ( STDIN ) ) ; $ array = [ ] ; $ country_array = array_fill ( 1 , $ n , 1 ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ ar = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ array [ ] = $ ar ; } asort ( $ array ) ; foreach ( $ array as $ key => $ value ) { $ num1 = $ value [ 0 ] ; $ num2 = $ value [ 1 ] ; $ num3 = $ country_array [ $ num1 ] ; $ country_array [ $ num1 ] += 1 ; $ array [ $ key ] [ ] = make_ans_num ( $ num1 , $ num3 ) ; } ksort ( $ array ) ; foreach ( $ array as $ value ) { echo $ value [ 2 ] . " \n " ; } function make_ans_num ( $ num1 , $ num2 ) { $ leftnum = sprintf ( ' %06d ' , $ num1 ) ; $ rightnum = sprintf ( ' %06d ' , $ num2 ) ; return $ leftnum . $ rightnum ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ P = trim ( fgets ( STDIN ) ) ; $ PArray = explode ( ' ' , $ P ) ; $ count = 0 ; $ min = $ PArray [ 0 ] ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { if ( $ PArray [ $ i ] >= $ PArray [ $ i + 1 ] && $ min > $ PArray [ $ i + 1 ] ) { $ count ++ ; $ min = $ PArray [ $ i + 1 ] ; } } echo ( $ count + 1 ) ; ?>
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= min ( $ K , $ S ) ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= min ( $ K , $ S - $ X ) ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php list ( $ a , $ b ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ a >= 13 ) { echo $ b , PHP_EOL ; } elseif ( $ a <= 5 ) { echo 0 , PHP_EOL ; } else { echo $ b / 2 , PHP_EOL ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( " " , fgets ( STDIN ) ) ; $ ans = 999999999 ; for ( $ i = 0 ; $ i <= 100 ; $ i ++ ) { $ dist = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ dist += ( $ i - $ x [ $ j ] ) * ( $ i - $ x [ $ j ] ) ; } $ ans = min ( $ ans , $ dist ) ; } echo $ ans ; ?>
<?php #$a = explode(",", trim(fgets(STDIN))); #var_dump($a); while($line = trim(fgets(STDIN))) { $line = explode(",", $line); $bmi = $line[1] / ($line[2] * $line[2]); if ($bmi >= 25) { printf("%d\n", $line[0]); } }
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x ** 3 ; echo " \n " ;
<?php $ n = fgets ( STDIN ) ; for ( $ i = 1 ; $ i * 2 <= $ n ; $ i *= 2 ) ; echo $ i ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b . " \n " ; } elseif ( $ a > 5 ) { echo ( $ b / 2 ) . " \n " ; } else { echo " 0 " . " \n " ; } ?>
<?php $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; while ( $ n != 0 ) { $ m = intval ( $ numbers [ 1 ] ) ; $ money = [ ] ; $ total = 0 ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ money [ ] = intval ( $ numbers [ $ i ] ) ; if ( ( $ m / $ n ) <= $ numbers [ $ i ] ) { $ total += ( $ m / $ n ) ; } else { $ total += $ numbers [ $ i ] ; } } print $ total ; print " \n " ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; }
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a > $ b ) { print ' Alice ' ; } elseif ( $ a == $ b ) { print ' Draw ' ; } else { print ' Bob ' ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ rec1 = $ a * $ b ; $ rec2 = $ c * $ d ; if ( $ rec1 === $ rec2 ) { echo $ rec1 ; } elseif ( $ rec1 > $ rec2 ) { echo $ rec1 ; } else { echo $ rec2 ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ cities = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ prefecture , $ year ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ cities [ $ prefecture ] [ $ year ] = $ i ; } $ ans = [ ] ; foreach ( $ cities as $ prefecture => $ value ) { ksort ( $ value ) ; $ city = array_values ( $ value ) ; $ id = 1 ; foreach ( $ value as $ y => $ count ) { $ ans [ $ count ] [ ' prefecture ' ] = $ prefecture ; $ ans [ $ count ] [ ' id ' ] = $ id ; $ id ++ ; } } ksort ( $ ans ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { echo str_pad ( $ ans [ $ i ] [ ' prefecture ' ] , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( $ ans [ $ i ] [ ' id ' ] , 6 , " 0 " , STR_PAD_LEFT ) . " \n " ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; while ( 0 != $ input ) { $ list = str_split ( $ input ) ; $ sum = 0 ; foreach ( $ list as $ i ) { $ sum += ( int ) $ i ; } echo $ sum . " \n " ; $ input = trim ( fgets ( STDIN ) ) ; }
<?php $ in = fgets ( STDIN ) ; echo $ in * $ in * $ in . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ pow2 = [ ] ; for ( $ i = 0 ; 2 ** $ i <= 100 ; $ i ++ ) { $ pow2 [ ] = 2 ** $ i ; } rsort ( $ pow2 ) ; foreach ( $ pow2 as $ v ) { if ( $ v <= $ n ) { echo $ v . " \n " ; break ; } }
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ p , $ y ) ; $ c [ $ y ] [ $ p ] = $ i ; } ksort ( $ c ) ; $ x = array_fill ( 1 , $ n , 0 ) ; foreach ( $ c as $ y => $ z ) { foreach ( $ z as $ p => $ i ) { $ t [ $ i ] = sprintf ( " %06d%06d " , $ p , ++ $ x [ $ p ] ) ; } } ksort ( $ t ) ; echo implode ( " \n " , $ t ) ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ a , 3 ) ; echo $ result . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; $ result = $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? " YES " : " NO " ; echo ( $ result ) ;
<?php while ( true ) { fscanf ( STDIN , ' %s ' , $ num ) ; if ( $ num == 0 ) { break ; } $ result [ ] = array_sum ( str_split ( $ num ) ) ; } echo implode ( PHP_EOL , $ result ) , PHP_EOL ;
<?php $ N = fgets ( STDIN ) ; $ d = [ ] ; $ d [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= 7 ; $ i ++ ) { $ K = pow ( 2 , $ i ) ; $ d [ $ i ] = $ K ; } for ( $ i = 0 ; $ i <= 7 ; $ i ++ ) { if ( $ d [ $ i ] > $ N ) { echo $ d [ $ i - 1 ] ; break ; } } ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; echo pow ( $ a , 3 ) ; echo " \n " ;
<?php list ( $ a , $ v ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; list ( $ b , $ w ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ t = trim ( fgets ( STDIN ) ) ; if ( $ v <= $ w ) { echo " NO \n " ; exit ; } echo ( abs ( $ a - $ b ) / ( $ v - $ w ) ) <= $ t ? " YES \n " : " NO \n " ;
<?php fscanf ( STDIN , ' %d ' , $ num ) ; echo pow ( $ num , 3 ) ; ?>
<?php while ( true ) { $ x = fgets ( STDIN ) ; if ( $ x == 0 ) break ; $ x = str_split ( $ x ) ; $ sum = 0 ; foreach ( $ x as $ num ) { $ sum += $ num ; } print " $ sum \n " ; }
<?php while ( true ) { $ stdin = preg_split ( ' if ($stdin[1] == 0) return; print(array_sum($stdin) . "\n"); }
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php do { $ input = preg_split ( ' if(0 == $input[0]) { break; } $cnt = count($input); $sum = 0; for($loop_cnt = 0; $loop_cnt < $cnt; $loop_cnt++) { $sum += $input[$loop_cnt]; } echo $sum . "\n"; }while(1); ?>
<?php $ a = [ ] ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = 10 ; for ( $ i = 0 ; $ i < count ( $ a ) ; $ i ++ ) { if ( $ a [ $ i ] % 10 != 0 ) { $ min = min ( $ min , $ a [ $ i ] % 10 ) ; } } $ ans = 0 ; for ( $ i = 0 ; $ i < count ( $ a ) ; $ i ++ ) { $ ans += intdiv ( $ a [ $ i ] + 9 , 10 ) * 10 ; } if ( $ min != 10 ) { $ ans -= 10 ; $ ans += $ min ; } echo $ ans ;
<?php $ input = trim ( fgets ( STDIN ) ) ; if ( $ input === ' 5 7 5 ' ) { echo " YES \n " ; } elseif ( $ input === ' 5 5 7 ' ) { echo " YES \n " ; } elseif ( $ input === ' 7 5 5 ' ) { echo " YES \n " ; } else echo " NO \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arr = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ arr ) ; $ min = 0 ; $ total = 0 ; for ( $ i = $ arr [ 0 ] ; $ i <= $ arr [ $ n - 1 ] ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ total += ( $ arr [ $ j ] - $ i ) * ( $ arr [ $ j ] - $ i ) ; } if ( $ i == $ arr [ 0 ] ) { $ min = $ total ; } elseif ( $ min > $ total ) { $ min = $ total ; } $ total = 0 ; } echo $ min ; ?>
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ a [ $ i ] = ( int ) $ a [ $ i ] ; } sort ( $ a ) ; echo ( $ a [ 2 ] - $ a [ 1 ] ) + ( $ a [ 1 ] - $ a [ 0 ] ) . PHP_EOL ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ n > $ m ) { if ( $ n == " 13 " && $ m == " 1 " ) { echo " Bob " ; } else { echo " Alice " ; } } else if ( $ n == $ m ) { echo " Draw " ; } else { if ( $ m == " 13 " && $ n == " 1 " ) { echo " Alice " ; } else { echo " Bob " ; } }
<?php fscanf ( STDIN , " %d%d " , $ alice , $ bob ) ; if ( $ alice == 1 && $ bob !== 1 ) { echo " Alice " ; } elseif ( $ alice !== 1 && $ bob == 1 ) { echo " Bob " ; } elseif ( $ alice == $ bob ) { echo " Draw " ; } elseif ( $ alice > $ bob ) { echo ' Alice ' ; } else { echo ' Bob ' ; }
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ f = 0 ; $ s = 0 ; foreach ( $ a as $ value ) { if ( $ value == 5 ) { $ f += 1 ; } elseif ( $ value == 7 ) { $ s += 1 ; } } if ( $ f == 2 && $ s == 1 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ average = ( $ a + $ b ) / 2 ; echo ceil ( $ average ) ; echo " \n " ; ?>
<?php if ( basename ( __FILE__ ) == basename ( $ _SERVER [ ' PHP_SELF ' ] ) ) { while ( $ line = fgets ( STDIN ) ) { echo $ line * $ line * $ line ; } } ?>
<?php $ stdin = fgets ( STDIN ) ; $ x = ( int ) trim ( $ stdin ) ; echo pow ( $ x , 3 ) . PHP_EOL ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo ( $ stdin * $ stdin * $ stdin ) ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input ** 3 . " \n " ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ c11 , $ c12 , $ c13 ) ; fscanf ( STDIN , " %d %d %d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d %d %d " , $ c31 , $ c32 , $ c33 ) ; $ k1 = $ c11 + $ c12 + $ c13 ; $ k2 = $ c21 + $ c22 + $ c23 ; $ k3 = $ c31 + $ c32 + $ c33 ; $ m1 = $ c11 + $ c21 + $ c31 ; $ m2 = $ c12 + $ c22 + $ c32 ; $ m3 = $ c13 + $ c23 + $ c33 ; if ( ( ( $ k1 - $ k2 ) % 3 !== 0 ) || ( ( $ k2 - $ k3 ) % 3 !== 0 ) || ( ( $ m1 - $ m2 ) % 3 !== 0 ) || ( ( $ m2 - $ m3 ) % 3 !== 0 ) ) { echo " No " ; return ; } ; echo " Yes " ; return ;
<?php $ single_line_input = fgets ( STDIN ) ; $ input = explode ( " " , $ single_line_input ) ; $ a_ = $ input [ 0 ] * $ input [ 1 ] ; $ b_ = $ input [ 2 ] * $ input [ 3 ] ; if ( $ a_ > $ b_ ) { echo $ a_ ; } else if ( $ b_ > $ a_ ) { echo $ b_ ; } else { echo $ a_ ; }
<?php fscanf ( STDIN , " %d%d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } elseif ( $ A >= 6 ) { echo intdiv ( $ B , 2 ) ; } else { echo " 0 " ; } ?>
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; define ( ' DEBUG ' , false ) ; define ( ' MOD ' , pow ( 10 , 9 ) + 7 ) ; fscanf ( STDIN , " %d %d " , $ N , $ M ) ; if ( $ N == $ M ) { $ ans = 1 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ ans *= $ N - $ i ; $ ans %= MOD ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ ans *= $ N - $ i ; $ ans %= MOD ; } $ ans *= 2 ; $ ans %= MOD ; } elseif ( $ N - 1 == $ M || $ N + 1 == $ M ) { $ ans = 1 ; $ mmax = max ( $ N , $ M ) ; $ mmin = min ( $ N , $ M ) ; for ( $ i = 0 ; $ i < $ mmax ; $ i ++ ) { $ ans *= $ mmax - $ i ; $ ans %= MOD ; } for ( $ i = 0 ; $ i < $ mmin ; $ i ++ ) { $ ans *= $ mmin - $ i ; $ ans %= MOD ; } } else { echo " 0 \n " ; exit ; } echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , ' %d%d%d ' , $ a [ ] , $ a [ ] , $ a [ ] ) ; sort ( $ a ) ; $ cost = 0 ; $ total = 0 ; foreach ( $ a as $ value ) { if ( $ cost == 0 ) { $ total += 0 ; } else { $ total += abs ( $ value - $ cost ) ; } $ cost = $ value ; } echo $ total ;
<?php $ is_honban = 1 ; if ( $ is_honban ) { $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ c = $ sc -> nextInt ( ) ; $ d = $ sc -> nextInt ( ) ; $ e = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; } else { error_reporting ( E_ERROR | E_WARNING | E_PARSE ) ; $ n = 8 ; $ q = 3 ; $ s = ' AABCBDBA ' ; $ t = array ( ' A ' , ' B ' , ' A ' ) ; $ d = array ( ' L ' , ' R ' , ' R ' ) ; } $ ans = 0 ; $ ans = ( $ e - $ a <= $ k ? " Yay! " : " :( " ) ; out :: println ( $ ans ) ; class Scanner { private $ arr = array ( ) ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ areas [ 0 ] = $ nums [ 0 ] * $ nums [ 1 ] ; $ areas [ 1 ] = $ nums [ 2 ] * $ nums [ 3 ] ; echo $ areas [ 0 ] > $ areas [ 1 ] ? $ areas [ 0 ] : $ areas [ 1 ] ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ alice = [ ' alice ' => $ a ] ; $ bob = [ ' bob ' => $ b ] ; if ( $ alice [ ' alice ' ] === $ bob [ ' bob ' ] ) { echo ' Draw ' ; } elseif ( $ bob [ ' bob ' ] == 1 ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] == 1 ) { echo ' Alice ' ; } elseif ( $ alice [ ' alice ' ] < $ bob [ ' bob ' ] ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] > $ bob [ ' bob ' ] ) { echo ' Alice ' ; }
<?php $ string = trim ( fgets ( STDIN ) ) ; $ parts = explode ( " " , $ string ) ; $ dogs = $ parts [ 0 ] ; $ monkeys = $ parts [ 1 ] ; if ( abs ( $ dogs - $ monkeys ) > 1 ) { echo " 0 \n " ; die ( ) ; } if ( $ dogs == $ monkeys ) { $ result = ( ( mod_fact ( $ dogs ) * mod_fact ( $ monkeys ) ) * 2 ) % 1000000007 ; } else { $ result = ( ( mod_fact ( $ dogs ) * mod_fact ( $ monkeys ) ) ) % 1000000007 ; } function mod_fact ( $ num ) { $ ans = 1 ; $ mod = 1000000007 ; for ( $ i = 1 ; $ i <= $ num ; $ i ++ ) { $ ans = ( $ ans * $ i ) % $ mod ; } return $ ans ; } echo $ result . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a1 , $ a2 , $ a3 ) ; $ max = max ( $ a1 , $ a2 , $ a3 ) ; $ min = min ( $ a1 , $ a2 , $ a3 ) ; echo $ max - $ min ;
<?php list ( $ n ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ p_list = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ counter = 0 ; $ min = $ n ; foreach ( $ p_list as $ p ) { if ( $ p > $ min ) { continue ; } ++ $ counter ; $ min = $ p ; } echo $ counter ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ data [ " a " ] = $ a ; $ data [ " b " ] = $ b ; $ data [ " c " ] = $ c ; $ data [ " d " ] = $ d ; $ data [ " e " ] = $ e ; $ sort [ " a " ] = $ a % 10 ; $ sort [ " b " ] = $ b % 10 ; $ sort [ " c " ] = $ c % 10 ; $ sort [ " d " ] = $ d % 10 ; $ sort [ " e " ] = $ e % 10 ; asort ( $ sort ) ; foreach ( $ sort as $ key => $ val ) { if ( $ val != 0 ) { $ min = $ data [ $ key ] ; unset ( $ data [ $ key ] ) ; break ; } } $ sum = 0 ; foreach ( $ data as $ key => $ val ) { $ add = 0 ; if ( $ sort [ $ key ] != 0 ) { $ add = 10 - $ sort [ $ key ] ; } $ sum += $ val + $ add ; } $ sum += $ min ; echo $ sum ; ?>
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function arrayIn ( ) { $ buf = explode ( " " , fgets ( STDIN ) ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ t = $ this -> arrayIn ( ) ; sort ( $ t ) ; $ ans = 0 ; $ ans = $ t [ 2 ] - $ t [ 1 ] ; $ ans += $ t [ 1 ] - $ t [ 0 ] ; echo $ ans . " \n " ; } } ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ map = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = PHP_INT_MAX ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { $ temp = 0 ; foreach ( $ map as $ item ) { $ temp += pow ( $ item - $ i , 2 ) ; } $ ans = min ( $ ans , $ temp ) ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] === 5 && $ a [ 1 ] === 5 && $ a [ 2 ] === 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A === $ B ) { echo ' Draw ' ; } else if ( $ A === 1 || $ A > $ B && $ B !== 1 ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php function getKyori ( $ a , $ b , $ d ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ d ; $ i ++ ) { $ sum += ( $ a [ $ i ] - $ b [ $ i ] ) ** 2 ; } return sqrt ( $ sum ) ; } $ tmp = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ n = $ tmp [ 0 ] ; $ d = $ tmp [ 1 ] ; $ data = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ data [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ kyori = getKyori ( $ data [ $ i ] , $ data [ $ j ] , $ d ) ; if ( ceil ( $ kyori ) !== $ kyori ) { } else { $ count ++ ; } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( ( $ e - $ a ) > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ A == $ B ) { echo " Draw " ; } elseif ( $ A == 1 ) { echo " Alice " ; } elseif ( $ B == 1 ) { echo " Bob " ; } elseif ( $ A < $ B ) { echo " Bob " ; } else { echo " Alice " ; } ?>
<?php $ x = ( int ) fgets ( STDIN ) ; echo $ x * $ x * $ x ; ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) ; ?>
<?php $ bunsetus = trim ( fgets ( STDIN ) ) ; $ bunsetu = explode ( " " , $ bunsetus ) ; $ seven_count = 0 ; $ five_count = 0 ; for ( $ i = 0 ; $ i < count ( $ bunsetu ) ; $ i ++ ) { if ( $ bunsetu [ $ i ] == 7 ) { $ seven_count += 1 ; } } for ( $ j = 0 ; $ j < count ( $ bunsetu ) ; $ j ++ ) { if ( $ bunsetu [ $ j ] == 5 ) { $ five_count += 1 ; } } if ( $ five_count == 2 && $ seven_count == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ nums = explode ( " " , $ stdin ) ; $ count_5 = 0 ; $ count_7 = 0 ; foreach ( $ nums as $ num ) { if ( $ num == 5 ) { $ count_5 += 1 ; } elseif ( $ num == 7 ) { $ count_7 += 1 ; } } if ( $ count_5 == 2 && $ count_7 == 1 ) { echo " YES " . PHP_EOL ; } else { echo " NO " . PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b ; } elseif ( $ a > 5 ) { echo $ b / 2 ; } else { echo 0 ; }
<?php fscanf ( STDIN , " %s " , $ hinaArareNum ) ; $ HinaArares = trim ( fgets ( STDIN ) ) ; $ oneHinaArare = explode ( " " , $ HinaArares ) ; $ result = array_unique ( $ oneHinaArare ) ; if ( count ( $ result ) == 3 ) { echo ' Three ' ; } else { echo ' Four ' ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { list ( $ x [ ] , $ y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ t = 0.0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i ; $ j < $ N ; $ j ++ ) { if ( $ j == $ i ) continue ; $ t = sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ; $ tot += $ t ; } } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i ; $ j < $ N ; $ j ++ ) { if ( $ j == $ i ) continue ; $ t = sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; $ tot += $ t ; } } printf ( " %f \n " , $ tot / $ N ) ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ list [ $ i ] = explode ( " " , $ input ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ sum += ( $ list [ $ i ] [ $ k ] - $ list [ $ j ] [ $ k ] ) ** 2 ; } if ( floor ( sqrt ( $ sum ) ) == sqrt ( $ sum ) ) $ cnt ++ ; } } echo $ cnt ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; $ N_img = " " ; $ M_img = " " ; $ ans = " No " ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ N_img [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { $ M_img [ $ j ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ N - $ M ; $ j ++ ) { $ count = 0 ; for ( $ k = 0 ; $ k < $ M ; $ k ++ ) { for ( $ l = 0 ; $ l < $ M ; $ l ++ ) { if ( $ N_img [ $ i + $ k ] [ $ j + $ l ] == $ M_img [ $ k ] [ $ l ] ) { $ count ++ ; } } } if ( $ count == $ M * $ M ) $ ans = " Yes " ; } } echo $ ans ; ?>
<?PHP $ num = trim ( fgets ( STDIN ) ) ; echo pow ( $ num , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ dH = ( $ h * 30 ) + ( $ m * 0.5 ) ; $ dM = $ m * 6 ; $ d = abs ( $ dH - $ dM ) ; if ( $ d > 180 ) { $ d = 360 - $ d ; } $ c2 = ( $ a ** 2 ) + ( $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ d ) ) ) ; $ c = sqrt ( $ c2 ) ; echo " { $ c } \n " ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ e = preg_split ( ' /\s/ ' , fgets ( STDIN ) ) ; $ en = [ $ e [ 0 ] ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ en [ $ i ] = min ( $ en [ $ i - 1 ] , $ e [ $ i ] ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ ii = $ e [ $ i ] ; $ ij = $ en [ $ i ] ; if ( $ ii <= $ ij ) $ cnt ++ ; } echo $ cnt ;
<?php $ input = trim ( fgets ( STDIN ) ) ; list ( $ n , $ m ) = explode ( ' ' , $ input ) ; $ inputs = [ ] ; $ count = 0 ; while ( $ count < $ m ) { $ input = trim ( fgets ( STDIN ) ) ; list ( $ p , $ y ) = explode ( ' ' , $ input ) ; $ inputs [ $ p ] [ $ y ] = $ count ; $ count ++ ; } $ results = [ ] ; foreach ( $ inputs as $ p => $ input ) { ksort ( $ input ) ; $ cities = array_values ( $ input ) ; $ id = 1 ; foreach ( $ cities as $ i => $ count ) { $ results [ $ count ] [ ' p ' ] = $ p ; $ results [ $ count ] [ ' c ' ] = $ id ; $ id ++ ; } } ksort ( $ results ) ; foreach ( $ results as $ result ) { echo str_pad ( ( string ) $ result [ ' p ' ] , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( ( string ) $ result [ ' c ' ] , 6 , " 0 " , STR_PAD_LEFT ) . " \n " ; }
<?php $ input = trim ( file_get_contents ( ' php: echo $input ** 3, PHP_EOL;
<?php $ numbers = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = array_count_values ( $ numbers ) ; if ( $ count [ 5 ] == 2 && $ count [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ arr = [ $ a , $ b , $ c ] ; $ z = 0 ; foreach ( $ arr as $ ar ) switch ( $ ar ) { case ( 5 ) : $ z += 1 ; break ; case ( 7 ) : $ z += 10 ; break ; default : break ; } if ( $ z == 12 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; echo ( $ a * $ b >= $ c * $ d ) ? $ a * $ b : $ c * $ d , PHP_EOL ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ nums = explode ( " " , $ stdin ) ; $ count_5 = 0 ; $ count_7 = 0 ; foreach ( $ nums as $ num ) { if ( $ num == 5 ) { $ count_5 += 1 ; } elseif ( $ num == 7 ) { $ count_7 += 1 ; } } if ( $ count_5 == 2 && $ count_7 == 1 ) { echo " YES " . PHP_EOL ; } else { echo " NO " . PHP_EOL ; }
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ p = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ min = 10 ** 9 + 7 ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ min = min ( $ p [ $ i ] , $ min ) ; if ( $ p [ $ i ] === $ min ) $ ans ++ ; } echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a <= 12 && $ a >= 6 ) { echo $ b / 2 ; } elseif ( $ a <= 5 ) { echo 0 ; } else { echo $ b ; } echo PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d " , $ A , $ B , $ C ) ; if ( $ A == 7 and $ B == 5 and $ C == 5 ) { echo " YES " ; } elseif ( $ A == 5 and $ B == 7 and $ C == 5 ) { echo " YES " ; } elseif ( $ A == 5 and $ B == 5 and $ C == 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ num = ( int ) trim ( fgets ( STDIN ) ) ; echo ( $ num * $ num * $ num ) . PHP_EOL ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input ** 3 ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d %d ' , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; echo ( $ h2 * 60 + $ m2 ) - $ k - ( $ h1 * 60 + $ m1 ) ;
<?php while ( $ stdin = fgets ( STDIN ) ) { $ line [ ] = trim ( $ stdin ) ; } foreach ( $ line as $ key => $ value ) { $ data [ ] = explode ( ' ' , $ value ) ; } foreach ( $ data as & $ line ) { $ line = array_map ( function ( $ val ) { return ( int ) $ val ; } , $ line ) ; } $ A = $ data [ 0 ] [ 0 ] ; $ B = $ data [ 0 ] [ 1 ] ; $ C = $ data [ 0 ] [ 2 ] ; $ arr = [ $ A , $ B , $ C ] ; sort ( $ arr ) ; $ is = $ arr [ 0 ] === 5 && $ arr [ 1 ] === 5 && $ arr [ 2 ] === 7 ; $ ans = $ is ? ' YES ' : ' NO ' ; printf ( ' %s ' , $ ans ) ;
<?php declare ( strict_types = 1 ) ; fscanf ( STDIN , " %i %i " , $ a , $ b ) ; $ eval = function ( $ x ) { return ( $ x + 11 ) % 13 ; } ; $ a = $ eval ( $ a ) ; $ b = $ eval ( $ b ) ; if ( $ a > $ b ) { echo " Alice " . PHP_EOL ; } else if ( $ a < $ b ) { echo " Bob " . PHP_EOL ; } else { echo " Draw " . PHP_EOL ; }
<?php $ arr = explode ( ' ' , fgets ( STDIN ) ) ; $ age = ( int ) $ arr [ 0 ] ; $ price = ( int ) $ arr [ 1 ] ; if ( $ age <= 5 ) { echo 0 . PHP_EOL ; exit ; } elseif ( 6 <= $ age && $ age <= 12 ) { echo ( $ price / 2 ) . PHP_EOL ; exit ; } else { echo $ price . PHP_EOL ; exit ; }
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ listA = [ ] ; $ listB = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ var = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ listA [ $ i ] = intval ( $ var [ 0 ] ) ; $ listB [ $ i ] = intval ( $ var [ 1 ] ) ; } $ sum = 0 ; $ min = null ; foreach ( $ listA as $ i => $ a ) { if ( $ a > $ listB [ $ i ] ) { if ( is_null ( $ min ) ) { $ min = $ listB [ $ i ] ; } else { $ min = min ( $ min , $ listB [ $ i ] ) ; } } $ sum += $ listB [ $ i ] ; } if ( is_null ( $ min ) ) { echo 0 ; } else { echo $ sum - $ min ; }
<?php # B - Good Distance fscanf(STDIN, "%d %d", $N, $D); $array = []; for ($i=0;$i<$N;$i++) { $array[] = explode(' ', fgets(STDIN)); } $count = 0; for ($i=0;$i<$N-1;$i++) { for ($j=$i+1;$j<$N;$j++) { $sum = 0; for ($k=0;$k<$D;$k++) { $sum += abs(intval($array[$i][$k]) - intval($array[$j][$k])) * abs(intval($array[$i][$k]) - intval($array[$j][$k])); } if (is_decimal(sqrt($sum)) && $sum != 0) { $count++; } } } echo $count . PHP_EOL; function is_decimal($value) { return filter_var($value, FILTER_VALIDATE_INT) !== false; }
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 1 ; $ max = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { $ div2 = 0 ; $ x = $ i ; while ( $ x % 2 == 0 && $ x > 1 ) { $ div2 ++ ; $ x = $ x / 2 ; } if ( $ max < $ div2 ) { $ ans = $ i ; $ max = $ div2 ; } } echo $ ans ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a == $ b ) { echo " Draw " ; } elseif ( $ a > $ b ) { echo " Alice " ; } else { echo " Bob " ; }
<?php function dfs ( $ first , $ last ) { if ( count ( $ last ) === 0 ) { return [ $ first ] ; } $ res = [ ] ; foreach ( $ last as $ key => $ val ) { $ next_f = $ first ; $ next_l = $ last ; $ next_f [ ] = $ val ; array_splice ( $ next_l , $ key , 1 ) ; $ res = array_merge ( $ res , dfs ( $ next_f , $ next_l ) ) ; } return $ res ; } function next_permutation ( $ start , $ end ) { return dfs ( [ ] , range ( $ start , $ end ) ) ; } fscanf ( STDIN , " %d " , $ n ) ; $ x_arr = [ ] ; $ y_arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ x_arr [ ] = $ inputs [ 0 ] ; $ y_arr [ ] = $ inputs [ 1 ] ; } $ perms = next_permutation ( 1 , $ n ) ; $ sum = 0 ; foreach ( $ perms as $ perm ) { for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ a = $ perm [ $ i ] - 1 ; $ b = $ perm [ $ i + 1 ] - 1 ; $ sum += sqrt ( pow ( $ x_arr [ $ a ] - $ x_arr [ $ b ] , 2 ) + pow ( $ y_arr [ $ a ] - $ y_arr [ $ b ] , 2 ) ) ; } } function factorial ( $ n ) { if ( $ n === 1 ) { return 1 ; } return $ n * factorial ( $ n - 1 ) ; } echo $ sum / factorial ( $ n ) ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ c = 0 ; $ min = max ( 0 , $ s - $ k * 2 ) ; for ( $ x = $ min ; $ x <= $ k ; $ x ++ ) { $ s1 = $ s - $ x ; if ( $ s1 < 0 ) break ; $ c += $ s1 - max ( 0 , $ s1 - $ k ) * 2 + 1 ; } echo $ c ;
<?php const ROW_NUM = 3 ; const COL_NUM = 3 ; $ input = [ ] ; for ( $ i = 0 ; $ i < ROW_NUM ; $ i ++ ) { $ input [ $ i ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } $ result = true ; $ a00 = ( int ) $ input [ 0 ] [ 0 ] ; $ a01 = ( int ) $ input [ 0 ] [ 1 ] ; $ a02 = ( int ) $ input [ 0 ] [ 2 ] ; $ a10 = ( int ) $ input [ 1 ] [ 0 ] ; $ diff = $ a00 - $ a10 ; $ a11 = ( int ) $ input [ 1 ] [ 1 ] ; $ result = $ result && ( $ a01 - $ a11 === $ diff ) ; $ a12 = ( int ) $ input [ 1 ] [ 2 ] ; $ result = $ result && ( $ a02 - $ a12 === $ diff ) ; $ a20 = ( int ) $ input [ 2 ] [ 0 ] ; $ diff = $ a00 - $ a20 ; $ a21 = ( int ) $ input [ 2 ] [ 1 ] ; $ result = $ result && ( $ a01 - $ a21 === $ diff ) ; $ a22 = ( int ) $ input [ 2 ] [ 2 ] ; $ result = $ result && ( $ a02 - $ a22 === $ diff ) ; $ diff = $ a00 - $ a01 ; $ result = $ result && ( $ a10 - $ a11 === $ diff ) ; $ result = $ result && ( $ a20 - $ a21 === $ diff ) ; $ diff = $ a00 - $ a02 ; $ result = $ result && ( $ a10 - $ a12 === $ diff ) ; $ result = $ result && ( $ a20 - $ a22 === $ diff ) ; echo ( $ result ) ? ' Yes ' : ' No ' ;
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ m = [ ] ; array_push ( $ m , abs ( $ s [ 0 ] - $ s [ 1 ] ) , abs ( $ s [ 0 ] - $ s [ 2 ] ) , abs ( $ s [ 1 ] - $ s [ 2 ] ) ) ; rsort ( $ m ) ; echo 0 + $ m [ 1 ] + $ m [ 2 ] ; ?>
<?php $ sum = 0 ; while ( true ) { $ s = rtrim ( fgets ( STDIN ) ) ; if ( feof ( STDIN ) ) { break ; } if ( preg_match_all ( ' /[0-9]+/ ' , $ s , $ a ) ) { foreach ( $ a [ 0 ] as $ v ) { $ sum += ( int ) $ v ; } } } echo $ sum . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ k >= ( $ e - $ a ) ) { echo " Yay! " ; } else { echo " :( " ; }
<?php $ x = intval ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ s [ 0 ] <= 5 ) { echo 0 ; } else if ( $ s [ 0 ] >= 6 && $ s [ 0 ] <= 12 ) { echo $ s [ 1 ] / 2 ; } else { echo $ s [ 1 ] ; } ?>
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ D [ $ f ] + $ dist ; if ( $ D [ $ t ] > $ new ) { $ D [ $ t ] = $ new ; $ pq -> insert ( $ t , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . PHP_EOL ;
<?php $ max = trim ( fgets ( STDIN ) ) ; if ( $ max == 1 ) { echo $ max . " \n " ; } else { for ( $ i = $ max ; $ i >= 2 ; $ i -- ) { if ( ( $ i & ( $ i - 1 ) ) == 0 ) { echo $ i . " \n " ; break ; } } }
<?php list ( $ N , $ K ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ amari = $ N - $ K ; if ( $ K == 1 ) $ amari = 0 ; printf ( " %d \n " , $ amari ) ;
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ from = max ( 0 , $ S - $ K - $ K ) ; $ to = min ( $ K , $ S ) ; for ( $ i = $ from ; $ i <= $ to ; $ i ++ ) { $ rest = $ S - $ i ; if ( 0 <= $ rest && $ rest <= $ K + $ K ) { $ ans += min ( $ rest , $ K + $ K - $ rest ) + 1 ; } } echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ x = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ x_max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x_max = max ( $ x [ $ i ] , $ x_max ) ; } $ hp_min = ( 100 ** 2 ) * 100 ; for ( $ p = 1 ; $ p <= $ x_max ; $ p ++ ) { $ hp = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ hp += ( $ x [ $ i ] - $ p ) ** 2 ; } $ hp_min = min ( $ hp , $ hp_min ) ; } echo $ hp_min . PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ P = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = $ P [ 0 ] ; $ ans = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ P [ $ i ] < $ min ) { $ ans ++ ; $ min = $ P [ $ i ] ; } } echo $ ans ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ input = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ input ) ; $ array = explode ( " " , $ input ) ; $ result1 = $ array [ 0 ] * $ array [ 1 ] ; $ result2 = $ array [ 2 ] * $ array [ 3 ] ; if ( $ result1 > $ result2 ) { echo $ result1 . " \n " ; } else { echo $ result2 . " \n " ; } ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ d = fgets ( STDIN ) ; $ e = fgets ( STDIN ) ; $ k = fgets ( STDIN ) ; if ( $ e - $ a > $ k ) { echo " :( " ; } else { echo " Yay! " ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A === $ B ) { echo " Draw " ; } else if ( $ A == 1 && $ B <= 13 ) { echo " Alice " ; } else if ( $ B == 1 && $ A <= 13 ) { echo " Bob " ; } else if ( $ A > $ B ) { echo " Alice " ; } else { echo " Bob " ; } ?>
<?php $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ map [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ flag = true ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { if ( $ map [ $ i ] [ 1 ] - $ map [ $ i ] [ 0 ] != $ map [ $ i + 1 ] [ 1 ] - $ map [ $ i + 1 ] [ 0 ] ) $ flag = false ; if ( $ map [ $ i ] [ 2 ] - $ map [ $ i ] [ 1 ] != $ map [ $ i + 1 ] [ 2 ] - $ map [ $ i + 1 ] [ 1 ] ) $ flag = false ; if ( $ map [ 1 ] [ $ i ] - $ map [ 0 ] [ $ i ] != $ map [ 1 ] [ $ i + 1 ] - $ map [ 0 ] [ $ i + 1 ] ) $ flag = false ; if ( $ map [ 2 ] [ $ i ] - $ map [ 1 ] [ $ i ] != $ map [ 2 ] [ $ i + 1 ] - $ map [ 1 ] [ $ i + 1 ] ) $ flag = false ; } echo $ flag ? " Yes " : " No " ;
<?php list ( $ n , $ m ) = Util :: input ( 1 ) ; $ cityMap = [ ] ; $ inputList = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ p , $ y ) = Util :: input ( 1 ) ; $ inputList [ ] = $ p . ' _ ' . $ y ; if ( empty ( $ cityMap [ $ p ] ) ) { $ cityMap [ $ p ] = [ ] ; } $ cityMap [ $ p ] [ $ y ] = 1 ; } foreach ( $ cityMap as $ key => $ m ) { ksort ( $ cityMap [ $ key ] ) ; $ c = 1 ; foreach ( $ cityMap [ $ key ] as $ k => $ v ) { $ cityMap [ $ key ] [ $ k ] = $ c ; $ c += 1 ; } } foreach ( $ inputList as $ input ) { list ( $ p , $ y ) = explode ( ' _ ' , $ input ) ; echo sprintf ( " %06d%06d " , $ p , $ cityMap [ $ p ] [ $ y ] ) . PHP_EOL ; } class Util { public static function input ( $ isSplitSpace = false ) { $ input = trim ( fgets ( STDIN ) ) ; if ( ! $ isSplitSpace ) { return $ input ; } return explode ( ' ' , $ input ) ; } public static function arrToStr ( $ arr ) { return implode ( " , " , $ arr ) ; } }
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ aaa = [ $ a , $ b , $ c ] ; $ counter = array_count_values ( $ aaa ) ; if ( $ counter [ 5 ] === 2 && $ counter [ 7 ] === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } echo PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ min = $ arr [ 0 ] ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ min >= $ arr [ $ i ] ) { $ min = $ arr [ $ i ] ; $ count ++ ; } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ A , $ B , $ C , $ D ) ; $ AB = $ A * $ B ; $ CD = $ C * $ D ; $ ans = max ( $ AB , $ CD ) ; echo $ ans . PHP_EOL ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ aa = array_count_values ( $ a ) ; if ( $ aa [ 5 ] == 2 && $ aa [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ tc , $ ac ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { list ( $ t , $ a ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b1 = intdiv ( $ tc + $ t - 1 , $ t ) ; $ b2 = intdiv ( $ ac + $ a - 1 , $ a ) ; $ tc = $ t * max ( $ b1 , $ b2 ) ; $ ac = $ a * max ( $ b1 , $ b2 ) ; } echo $ tc + $ ac ;
<?php fscanf ( STDIN , " %d " , $ n ) ; printf ( " %d \n " , $ n ** 3 ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ na = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ na as $ v ) { if ( $ v == " Y " ) { echo " Four " ; return ; } } echo " Three " ;
<?php $ a = fgets ( STDIN ) ; $ aaa = $ a * $ a * $ a ; echo $ aaa ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; print ( $ n * $ n * $ n ) ; ?>
<?php $ a = [ ] ; for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { array_push ( $ a , intval ( trim ( fgets ( STDIN ) ) ) ) ; } if ( $ a [ 4 ] - $ a [ 0 ] <= $ a [ 5 ] ) { echo ' Yay! ' ; } else { echo ' :( ' ; } echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ step = trim ( fgets ( STDIN ) ) ; $ rows = [ ] ; while ( ( $ row = trim ( fgets ( STDIN ) ) ) !== ' ' ) { $ rows [ ] = explode ( ' ' , $ row ) ; } for ( $ i = 0 ; $ i < $ n * 4 ; $ i ++ ) { if ( $ step [ $ i ] == " Y " ) { $ ans = " Four " ; break ; } else { $ ans = " Three " ; } } echo $ ans ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ w as $ j => $ s ) { if ( $ s != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } foreach ( $ h as $ j => $ s ) { if ( $ s != $ c [ $ j ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php $ x = fgets ( STDIN ) ; $ x = $ x * $ x * $ x ; echo $ x . " \n " ;
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b , PHP_EOL ; } elseif ( $ a >= 6 && $ a <= 12 ) { echo $ b / 2 , PHP_EOL ; } else { echo 0 , PHP_EOL ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } list ( $ N , $ D ) = sscanf ( trim ( fgets ( STDIN ) ) , " %d %d " ) ; $ X = array ( ) ; for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) { $ sc = new Scanner ( ) ; for ( $ i = 1 ; $ i <= $ D ; $ i ++ ) { $ X [ $ j ] [ $ i ] = $ sc -> nextInt ( ) ; } } $ sum = 0 ; $ cnt = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= $ N ; $ j ++ ) { for ( $ k = 1 ; $ k <= $ D ; $ k ++ ) { $ sum += pow ( ( $ X [ $ i ] [ $ k ] - $ X [ $ j ] [ $ k ] ) , 2 ) ; } $ sum = sqrt ( $ sum ) ; if ( preg_match ( ' /^[0-9]+$/ ' , $ sum ) ) { $ cnt ++ ; } $ sum = 0 ; } } printf ( $ cnt ) ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ exists = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) { $ exists ++ ; } } } printf ( " %d \n " , $ exists ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; pow ( 2 , $ i ) <= $ n ; $ i ++ ) { } echo pow ( 2 , $ i - 1 ) ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ ] , $ y [ ] ) ; } $ route = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ route = $ route * $ i ; } $ pair = 0 ; for ( $ i = 1 ; $ i <= $ n - 1 ; $ i ++ ) { $ pair = $ pair + $ i ; } $ move = $ route * ( $ n - 1 ) / $ pair ; $ totalLength = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ totalLength += $ pairLength = sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + ( pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ) ; } } $ totalLength = $ totalLength * $ move ; $ averageLength = $ totalLength / $ route ; echo $ averageLength ; ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ b == 1 ) { echo 0 ; } elseif ( $ a < $ b ) { echo 1 ; } else { echo $ a - $ b ; }
<?php while ( true ) { $ input = trim ( fgets ( STDIN ) ) ; $ input = explode ( " " , $ input ) ; foreach ( $ input as $ value ) { $ args [ ] = $ value ; if ( count ( $ args ) >= 3 ) { break ; } } if ( count ( $ args ) >= 3 ) { break ; } } $ t1 = $ args [ 0 ] ; $ t2 = $ args [ 1 ] ; $ t3 = $ args [ 2 ] ; $ cost12 = abs ( $ t1 - $ t2 ) ; $ cost23 = abs ( $ t2 - $ t3 ) ; $ cost31 = abs ( $ t3 - $ t1 ) ; $ cost1 = 0 + $ cost12 + $ cost23 ; $ cost2 = 0 + $ cost23 + $ cost31 ; $ cost3 = 0 + $ cost31 + $ cost12 ; if ( $ cost1 < $ cost2 ) { if ( $ cost1 < $ cost3 ) { $ result = $ cost1 ; } else { $ result = $ cost3 ; } } else { if ( $ cost2 < $ cost3 ) { $ result = $ cost2 ; } else { $ result = $ cost3 ; } } out ( $ result ) ; function out ( $ var ) { echo $ var , PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } else if ( $ A >= 6 && $ A <= 12 ) { echo $ B / 2 ; } else { echo " 0 " ; }
<?php fscanf ( STDIN , ' %d ' , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) fscanf ( STDIN , ' %d %d ' , $ x [ ] , $ y [ ] ) ; $ sum = 0.0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ sum += sqrt ( ( $ x [ $ i ] - $ x [ $ j ] ) ** 2 + ( $ y [ $ i ] - $ y [ $ j ] ) ** 2 ) ; } } echo $ sum * ( $ n - 1 ) / nCr ( $ n , 2 ) ; function fac ( $ n ) { if ( $ n === 1 ) return 1 ; return $ n * fac ( $ n - 1 ) ; } function nPr ( $ n , $ r ) { if ( $ r === 0 ) return 1 ; return fac ( $ n ) / fac ( $ n - $ r ) ; } function nCr ( $ n , $ r ) { $ r = min ( $ r , $ n - $ r ) ; if ( $ r === 0 ) return 1 ; return nPr ( $ n , $ r ) / fac ( $ r ) ; }
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] === 5 && $ a [ 1 ] === 5 && $ a [ 2 ] === 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ t = new temp ( ) ; $ t -> stdin ( ) ; unset ( $ t ) ; class temp { public function stdin ( ) { $ line1 = explode ( " " , fgets ( STDIN ) ) ; $ line2 = explode ( " " , fgets ( STDIN ) ) ; $ line3 = explode ( " " , fgets ( STDIN ) ) ; $ f = true ; $ con1 = $ line1 [ 0 ] - $ line1 [ 1 ] ; $ con2 = $ line2 [ 0 ] - $ line2 [ 1 ] ; $ con3 = $ line3 [ 0 ] - $ line3 [ 1 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line1 [ 1 ] - $ line1 [ 2 ] ; $ con2 = $ line2 [ 1 ] - $ line2 [ 2 ] ; $ con3 = $ line3 [ 1 ] - $ line3 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line1 [ 0 ] - $ line2 [ 0 ] ; $ con2 = $ line1 [ 1 ] - $ line2 [ 1 ] ; $ con3 = $ line1 [ 2 ] - $ line2 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line2 [ 0 ] - $ line3 [ 0 ] ; $ con2 = $ line2 [ 1 ] - $ line3 [ 1 ] ; $ con3 = $ line2 [ 2 ] - $ line3 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } if ( $ f ) { echo " Yes " ; } else { echo " No " ; } } } ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k == 1 ) { echo ' 0 ' ; } else { $ ans = $ n - $ k ; echo $ ans ; }
<?php fscanf ( STDIN , ' %d ' , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ z ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ k ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ k ; $ b ++ ) { $ c = $ z - ( $ a + $ b ) ; if ( 0 <= $ c && $ c <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; echo ( $ a + $ b + $ c == 17 ) ? ' YES ' : ' NO ' , PHP_EOL ;
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ n [ 0 ] * $ n [ 1 ] , $ n [ 2 ] * $ n [ 3 ] ) ;
<?php $ line = trim ( fgets ( STDIN ) ) ; if ( in_array ( $ line , [ ' 5 5 7 ' , ' 5 7 5 ' , ' 7 5 5 ' , ] , true , ) ) { echo " YES " ; } else { echo " NO " ; }
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $a =$key->A[0]; $b =$key->A[1]; if ($a == $b) { printf("Draw\n"); exit; } if ($a == 1) $a = 14; if ($b == 1) $b = 14; if ($a > $b) { printf("Alice\n"); } else { printf("Bob\n"); }
<?php $ n = trim ( fgets ( STDIN ) ) ; printf ( " %d \n " , pow ( $ n , 3 ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A == 1 ) $ A += 13 ; if ( $ B == 1 ) $ B += 13 ; if ( $ A == $ B ) { echo " Draw \n " ; } elseif ( $ A > $ B ) { echo " Alice \n " ; } else { echo " Bob \n " ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ca = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ c = 0 ; $ t = $ i ; while ( $ t > 0 ) { if ( $ t % 2 !== 0 ) { break ; } else if ( $ t % 2 == 0 ) { $ c ++ ; $ t = $ t / 2 ; } } $ ca = $ ca + array ( $ i => $ c ) ; } $ max = max ( $ ca ) ; echo array_keys ( $ ca , $ max ) [ 0 ] ; ?>
<?php error_reporting ( 0 ) ; list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; printf ( " %d \n " , ceil ( ( $ A + $ B ) / 2 ) ) ;
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ n ) ; $ ans = $ n [ 0 ] . $ n [ 3 ] . $ n [ 2 ] . $ n [ 1 ] ; echo ( $ ans == 1974 ) ? ' YES ' : ' NO ' ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo $ a >= 13 ? $ b : ( $ a >= 6 ? $ b / 2 : 0 ) ;
<?php $ arr = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , ' %d ' , $ d ) ; $ arr [ ] = $ d ; } rsort ( $ arr ) ; fscanf ( STDIN , ' %d ' , $ k ) ; for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { for ( $ h = 1 ; $ h < 5 ; $ h ++ ) { if ( $ arr [ $ j ] - $ arr [ $ h ] > $ k ) { echo ' :( ' , PHP_EOL ; exit ; } } } echo ' Yay! ' , PHP_EOL ;
<?php $ a = fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ start = $ h1 * 60 + $ m1 ; $ end = $ h2 * 60 + $ m2 ; echo ( $ end - $ start - $ k ) ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; echo max ( $ a ) - min ( $ a ) , " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ cost = explode ( " " , fgets ( STDIN ) ) ; sort ( $ cost ) ; $ answer [ ] = $ cost [ 1 ] + $ cost [ 2 ] - $ cost [ 0 ] * 2 ; $ answer [ ] = $ cost [ 2 ] - $ cost [ 0 ] ; $ answer [ ] = $ cost [ 2 ] * 2 - $ cost [ 1 ] - $ cost [ 0 ] ; sort ( $ answer ) ; if ( $ answer [ 0 ] < 0 ) { $ answer [ 0 ] = - $ answer [ 0 ] ; } echo $ answer [ 0 ] ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ max = max ( $ inputs ) ; $ decs = [ ] ; for ( $ i = 1 ; $ max >= $ i ; $ i ++ ) { $ tmp = 0 ; foreach ( $ inputs as $ input ) { $ x = $ input - $ i ; $ y = pow ( $ x , 2 ) ; #echo join(", ", [$input, $i, $n, $x, $y]) . "\n"; $tmp += $y; } #echo "=" . $tmp . "\n"; $decs[] = $tmp; } #echo join(",", $decs) . "\n"; echo min($decs);
<?php $ input_num = intval ( fgets ( STDIN ) ) ; echo $ input_num * $ input_num * $ input_num . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ arg = [ ] ; $ minuscount ; $ minus = 0 ; $ plus = 0 ; foreach ( $ a as $ key => $ value ) { $ arg [ $ key ] = $ a [ $ key ] - $ b [ $ key ] ; if ( $ arg [ $ key ] < 0 ) { $ minus += $ arg [ $ key ] ; $ minuscount ++ ; } else { $ plus += $ arg [ $ key ] ; } } if ( $ plus + $ minus < 0 ) { echo " -1 " ; exit ; } rsort ( $ arg ) ; for ( $ i = 0 ; $ minus < 0 ; $ i ++ ) { $ minus += $ arg [ $ i ] ; } echo $ i + $ minuscount ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ pref = array_fill ( 1 , $ n , [ ] ) ; $ ans = [ ] ; while ( $ m -- ) { fscanf ( STDIN , " %d%d " , $ p , $ c ) ; $ pref [ $ p ] [ $ c ] = 0 ; $ ans [ ] = [ $ p , $ c ] ; } foreach ( $ pref as $ p => $ ps ) { ksort ( $ ps ) ; $ j = 1 ; foreach ( $ ps as $ city => $ zero ) { $ pref [ $ p ] [ $ city ] = $ j ; $ j ++ ; } } foreach ( $ ans as $ data ) { printf ( " %06d%06d " . PHP_EOL , $ data [ 0 ] , $ pref [ $ data [ 0 ] ] [ $ data [ 1 ] ] ) ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ e - $ a > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; } ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; $ five = 0 ; $ seven = 0 ; for ( $ tmp = 0 ; $ tmp < 3 ; $ tmp ++ ) { if ( $ array [ $ tmp ] == 5 ) { $ five += 1 ; } if ( $ array [ $ tmp ] == 7 ) { $ seven += 1 ; } } if ( $ five == 2 and $ seven == 1 ) { print ( " YES \n " ) ; } else { print ( " NO \n " ) ; } ?>
<?php $ n = explode ( ' ' , fgets ( STDIN ) ) ; $ seven = 0 ; $ five = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ n [ $ i ] == 5 ) { $ five ++ ; continue ; } if ( $ n [ $ i ] == 7 ) { $ seven ++ ; continue ; } } if ( $ seven === 1 && $ five === 2 ) { echo ' YES ' . PHP_EOL ; } else { echo ' NO ' . PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php $ n = ( int ) trim ( fgets ( STDIN ) ) ; $ points = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ps = [ ] ; foreach ( $ input as $ v ) { $ ps [ ] = ( int ) $ v ; } $ points [ ] = $ ps ; } if ( $ n === 2 ) { echo dist ( $ points [ 0 ] , $ points [ 1 ] ) ; exit ( ) ; } $ sum = 0 ; foreach ( $ points as $ k1 => $ p1 ) { foreach ( $ points as $ k2 => $ p2 ) { if ( $ k1 === $ k2 ) { continue ; } $ sum += dist ( $ p1 , $ p2 ) * fact ( $ n - 1 ) ; } } echo $ sum / fact ( $ n ) ; function dist ( $ p1 , $ p2 ) { return sqrt ( pow ( $ p1 [ 0 ] - $ p2 [ 0 ] , 2 ) + pow ( $ p1 [ 1 ] - $ p2 [ 1 ] , 2 ) ) ; } function fact ( $ n ) { $ result = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ result *= $ i ; } return $ result ; }
<?php $ n = intval ( fgets ( STDIN ) ) ; $ A = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { echo " -1 \n " ; } else { $ count = 0 ; $ minus = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ minus += $ B [ $ i ] - $ A [ $ i ] ; $ count ++ ; } else { $ plus [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } sort ( $ plus ) ; while ( $ minus > 0 ) { $ best = array_pop ( $ plus ) ; $ minus -= $ best ; $ count ++ ; } echo $ count ; }
<?php $ number = trim ( fgets ( STDIN ) ) ; print sub_func ( $ number ) ; function sub_func ( $ a ) { return $ a * $ a * $ a ; } ?>
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' ' ) { if ( $ line === ' 0 ' ) { break ; } $ arr = str_split ( $ line ) ; echo array_sum ( $ arr ) , PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ arg_h = $ h * - 2 * M_PI / 12 + $ m * - 2 * M_PI / 12 / 60 ; $ arg_m = $ m * - 2 * M_PI / 60 ; function crd ( $ r , $ arg ) { return [ $ r * cos ( $ arg ) , $ r * sin ( $ arg ) ] ; } ; $ arr_h = crd ( $ a , $ arg_h ) ; $ arr_m = crd ( $ b , $ arg_m ) ; $ x = $ arr_h [ 0 ] - $ arr_m [ 0 ] ; $ y = $ arr_h [ 1 ] - $ arr_m [ 1 ] ; echo sqrt ( $ x ** 2 + $ y ** 2 ) ; ?>
<?php $ arr = explode ( ' ' , fgets ( STDIN ) ) ; $ five = 0 ; $ seven = 0 ; foreach ( $ arr as $ key => $ value ) { $ arr [ $ key ] = intval ( $ value ) ; if ( $ arr [ $ key ] === 5 ) { $ five ++ ; continue ; } if ( $ arr [ $ key ] === 7 ) { $ seven ++ ; continue ; } } if ( $ five === 2 && $ seven === 1 ) { echo ' YES ' ; return ; } echo ' NO ' ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] + 1 ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php $ i = trim ( fgets ( STDIN ) ) ; $ s = $ i * $ i * $ i ; echo $ s ; ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ mod = 1000000007 ; $ ans = 0 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ zero = 0 ; $ one = 0 ; $ bit = pow ( 2 , $ i ) ; for ( $ j = 0 ; $ j < count ( $ a ) ; $ j ++ ) { $ xor = $ a [ $ j ] & $ bit ; if ( $ xor == 0 ) { $ zero ++ ; } else { $ one ++ ; } } $ bit = $ bit % $ mod ; $ bit = $ bit * $ zero % $ mod ; $ bit = $ bit * $ one % $ mod ; $ ans = $ ans + $ bit % $ mod ; } echo $ ans % $ mod ;
<?php $ input = fgets ( STDIN ) ; echo $ output = pow ( $ input , 3 ) ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a >= 13 ) $ ans = $ b ; elseif ( $ a >= 6 ) $ ans = $ b / 2 ; else $ ans = 0 ; echo $ ans . PHP_EOL ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ line = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ cnt = 1 ; $ min = $ line [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ line [ $ i ] < $ min ) { $ cnt ++ ; $ min = $ line [ $ i ] ; } } echo $ cnt ;
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( $ i + $ j <= $ s && $ k >= $ s - $ i - $ j ) { $ ans ++ ; } } } echo $ ans ;
<?php $ N = fgets ( STDIN ) ; $ Xs = fgets ( STDIN ) ; $ X = array ( ) ; $ format = " %d " ; $ formated = " " ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ formated = $ formated . ' ' . $ format ; } $ X = sscanf ( $ Xs , $ formated ) ; $ min = 50000000000 ; $ sum = 0 ; for ( $ p = 0 ; $ p <= 100 ; $ p ++ ) { for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ sum += ( ( ( int ) $ X [ $ i ] - $ p ) ** 2 ) ; } if ( ( $ min > $ sum ) && ( $ sum >= 0 ) ) { $ min = $ sum ; } $ sum = 0 ; } echo $ min ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ L = strlen ( $ N ) ; $ s = 0 ; for ( $ i = 0 ; $ i < $ L ; $ i ++ ) $ s += $ N [ $ i ] ; echo $ s , PHP_EOL ; }
<?php $ sum = 0 ; $ min = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { list ( $ t ) = fscanf ( STDIN , ' %d ' ) ; if ( $ t % 10 === 0 ) $ sum += $ t ; else if ( substr ( $ t , - 1 ) < $ min ) { $ sum += ceil ( $ t / 10 ) * 10 ; $ min = substr ( $ t , - 1 ) ; } else $ sum += ceil ( $ t / 10 ) * 10 ; } $ sum -= ( 10 - $ min ) ; echo $ sum ;
<?php while ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ dis = ( ( int ) $ stdin [ 4 ] - ( int ) $ stdin [ 0 ] ) ; if ( $ dis > ( int ) $ stdin [ 5 ] ) { print " :( " ; } else { print " Yay! " ; }
<?php fscanf ( STDIN , " %d%d " , $ t1 , $ t2 ) ; fscanf ( STDIN , " %d%d " , $ a1 , $ a2 ) ; fscanf ( STDIN , " %d%d " , $ b1 , $ b2 ) ; $ a1 -= $ b1 ; $ a2 -= $ b2 ; $ a1 *= $ t1 ; $ a2 *= $ t2 ; if ( $ a1 < 0 ) { $ a1 = - $ a1 ; $ a2 = - $ a2 ; } if ( $ a1 + $ a2 == 0 ) echo " infinity \n " ; elseif ( $ a1 + $ a2 > 0 ) echo " 0 \n " ; else { $ a2 = - $ a2 ; $ a1 *= 2 ; $ a2 *= 2 ; echo intdiv ( $ a1 , ( $ a2 - $ a1 ) ) + intdiv ( ( $ a1 - 1 ) , ( $ a2 - $ a1 ) ) + 1 ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = fgets ( STDIN ) ; if ( strchr ( $ s , ' Y ' ) === false ) { echo " Three " ; return ; } echo " Four " ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ c %= $ mod ; $ c *= $ n - $ c ; $ c %= $ mod ; $ c *= ( 1 << $ i ) % $ mod ; $ c %= $ mod ; $ sum += $ c ; $ sum %= $ mod ; } echo $ sum ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; printf ( $ res ) ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == 1 ) $ a = 100 ; if ( $ b == 1 ) $ b = 100 ; if ( $ a > $ b ) { echo " Alice " ; } elseif ( $ a < $ b ) { echo " Bob " ; } else { echo " Draw " ; }
<?php $ number = trim ( fgets ( STDIN ) ) ; $ log = log ( $ number , 2 ) ; $ log = ( int ) $ log ; echo pow ( 2 , $ log ) ; echo " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo count ( array_unique ( $ s ) ) == 3 ? ' Three ' : ' Four ' ;
<?php while ( true ) { $ stdin = trim ( fgets ( STDIN ) ) ; if ( $ stdin === ' ' ) { break ; } $ val = explode ( ' , ' , $ stdin ) ; $ number = $ val [ 0 ] ; $ weight = $ val [ 1 ] ; $ height = $ val [ 2 ] ; $ bmi = $ weight / ( $ height * $ height ) ; if ( $ bmi >= 25 ) { printf ( " %d \n " , $ number ) ; } }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ a == 5 && $ b == 5 && $ c == 7 || $ a == 5 && $ b == 7 && $ c == 5 || $ a == 7 && $ b == 5 && $ c == 5 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ d = fgets ( STDIN ) ; $ e = fgets ( STDIN ) ; $ k = fgets ( STDIN ) ; if ( ( $ e - $ a ) > $ k ) { echo " :( " ; } else { echo " Yay! " ; }
<?php $ x = fgets ( STDIN ) ; $ x = intval ( $ x ) ; print ( $ x * $ x * $ x . " \n " ) ; ?>
<?php list ( $ a [ 0 ] ) = fscanf ( STDIN , ' %d ' ) ; list ( $ a [ 1 ] ) = fscanf ( STDIN , ' %d ' ) ; list ( $ a [ 2 ] ) = fscanf ( STDIN , ' %d ' ) ; list ( $ a [ 3 ] ) = fscanf ( STDIN , ' %d ' ) ; list ( $ a [ 4 ] ) = fscanf ( STDIN , ' %d ' ) ; list ( $ k ) = fscanf ( STDIN , ' %d ' ) ; $ flg = true ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( $ a [ $ j ] - $ a [ $ i ] > $ k ) { $ flg = false ; break ; } } } echo $ flg ? " Yay! " : " :( " ?>
<?php $ num = 0 ; while ( $ line = fgets ( STDIN ) ) { $ num += ceil ( ( int ) trim ( $ line ) / 10 ) * 10 ; if ( substr ( trim ( $ line ) , - 1 ) != ' 0 ' ) { $ rest [ ] = substr ( trim ( $ line ) , - 1 ) ; } } $ d = min ( $ rest ) ; $ t = 10 ; if ( $ d == 0 ) { $ t = 0 ; } echo $ num - $ t + $ d ;
<?php list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ A <= 5 ) { $ B = 0 ; } else if ( $ A <= 12 ) { $ B = $ B / 2 ; } printf ( " %d \n " , $ B ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ numbers = fgets ( STDIN ) ; $ exploded_numbers = explode ( ' ' , $ numbers ) ; $ count = 0 ; $ min = $ exploded_numbers [ 0 ] ; foreach ( $ exploded_numbers as $ key => $ val ) { if ( $ key - 1 >= 0 ) { if ( $ val <= $ min ) { $ min = $ val ; $ count ++ ; } } else { $ count ++ ; } } echo $ count ;
<?php fscanf ( STDIN , ' %d%d%d ' , $ a , $ b , $ c ) ; echo max ( $ a , $ b , $ c ) - min ( $ a , $ b , $ c ) ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ X = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ mx = max ( $ X ) ; $ mi = min ( $ X ) ; $ res = 10 ** 9 ; for ( $ i = $ mi ; $ i <= $ mx ; $ i ++ ) { $ sum = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ sum += ( $ X [ $ j ] - $ i ) ** 2 ; } $ res = min ( $ res , $ sum ) ; } printf ( " %d \n " , $ res ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { if ( $ z + $ x + $ y == $ s ) { $ count ++ ; } } } } echo $ count ;
<?php $ str = readline ( ) ; echo pow ( $ str , 3 ) ; ?>
<?php fscanf ( STDIN , " %s " , $ s ) ; fscanf ( STDIN , " %d " , $ K ) ; $ arr = str_split ( $ s ) ; $ len = strlen ( $ s ) ; $ num = array ( ) ; foreach ( $ arr as $ key => $ val ) { $ num [ $ key ] = 123 - ord ( $ val ) ; if ( $ num [ $ key ] == 26 ) $ num [ $ key ] = 0 ; } $ allA = true ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ num [ $ i ] <= $ K ) { $ arr [ $ i ] = ' a ' ; $ K -= $ num [ $ i ] ; } else { $ allA = false ; } } if ( $ allA === true ) { $ K %= 26 ; } $ arr [ $ len - 1 ] = chr ( ord ( $ arr [ $ len - 1 ] ) + $ K ) ; $ K -= $ K ; if ( ord ( $ arr [ $ len - 1 ] ) >= 123 ) { $ arr [ $ len - 1 ] = chr ( ord ( $ arr [ $ len - 1 ] ) - 26 ) ; } ; echo implode ( " " , $ arr ) . PHP_EOL ;
<?php $ number = trim ( fgets ( STDIN ) ) ; $ times = $ number * $ number * $ number ; print $ times ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; echo ( $ e - $ a <= $ k ) ? ' Yay! ' : ' :( ' ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo in_array ( " Y " , $ S ) ? " Four \n " : " Three \n " ;
<?php $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ s ) ; $ ret = $ s [ 0 ] . $ s [ 3 ] . $ s [ 2 ] . $ s [ 1 ] ; echo ( $ ret == 1974 ) ? ' YES ' : ' NO ' ;
<?php $ inputs = [ ] ; for ( $ i = 0 ; $ i < 5 ; ++ $ i ) { $ inputs [ ] = trim ( fgets ( STDIN ) ) ; } $ min1 = substr ( $ inputs [ 0 ] , - 1 ) ; $ min_index = 0 ; for ( $ i = 1 ; $ i < 5 ; ++ $ i ) { $ last = substr ( $ inputs [ $ i ] , - 1 ) ; if ( $ last != 0 && $ last < $ min1 ) { $ min1 = $ last ; $ min_index = $ i ; } } $ result = 0 ; for ( $ i = 0 ; $ i < 5 ; ++ $ i ) { if ( $ i === $ min_index ) { continue ; } $ result += ceil ( $ inputs [ $ i ] / 10 ) * 10 ; } $ result += $ inputs [ $ min_index ] ; echo $ result ;
<?php while ( true ) { $ received_num = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ received_num [ 0 ] == 0 ) { break ; } echo array_sum ( $ received_num ) . PHP_EOL ; }
<?php class Line { protected $ lineData ; protected $ pointer ; public function __construct ( array $ line ) { $ this -> lineData = $ line ; $ this -> pointer = 0 ; $ this -> count = count ( $ line ) ; } public function next ( ) { if ( $ this -> count > $ this -> pointer ) { return $ this -> lineData [ $ this -> pointer ++ ] ; } return false ; } } class IOW { public static function nl ( ) { $ str = trim ( fgets ( STDIN ) ) ; return new Line ( explode ( ' ' , $ str ) ) ; } public static function out ( $ data ) { print_r ( $ data . PHP_EOL ) ; } } $ line = IOW :: nl ( ) ; $ birth = $ line -> next ( ) ; $ money = $ line -> next ( ) ; switch ( true ) { case $ birth >= 13 : IOW :: out ( $ money ) ; break ; case $ birth < 6 : IOW :: out ( 0 ) ; break ; default : IOW :: out ( $ money / 2 ) ; }
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ hFrom , $ mFrom , $ hTo , $ mTo , $ kMin ) ; echo ( ( $ hTo * 60 + $ mTo ) - ( $ hFrom * 60 + $ mFrom ) - $ kMin ) . " \n " ; ?>
<?php class main { var $ arr = array ( ) ; var $ img1 = array ( ) ; var $ img2 = array ( ) ; function run ( ) { $ line = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ line ) ; for ( $ i = 0 ; $ i < $ this -> arr [ 0 ] ; $ i ++ ) { fscanf ( STDIN , " %s " , $ s ) ; $ this -> img1 [ $ i ] = str_split ( $ s ) ; } for ( $ j = 0 ; $ j < $ this -> arr [ 1 ] ; $ j ++ ) { fscanf ( STDIN , " %s " , $ s ) ; $ this -> img2 [ $ j ] = str_split ( $ s ) ; } for ( $ h = 0 ; $ h <= ( $ this -> arr [ 0 ] - $ this -> arr [ 1 ] ) ; $ h ++ ) { for ( $ w = 0 ; $ w <= ( $ this -> arr [ 0 ] - $ this -> arr [ 1 ] ) ; $ w ++ ) { if ( $ this -> img1 [ $ h ] [ $ w ] == $ this -> img2 [ 0 ] [ 0 ] ) { $ this -> check ( $ h , $ w ) ; } } } echo " No " ; } function check ( $ h , $ w ) { for ( $ n = 0 ; $ n < $ this -> arr [ 1 ] ; $ n ++ ) { for ( $ m = 0 ; $ m < $ this -> arr [ 1 ] ; $ m ++ ) { if ( $ this -> img1 [ $ h + $ n ] [ $ w + $ m ] != $ this -> img2 [ $ n ] [ $ m ] ) { return false ; } } } echo " Yes " ; exit ; } } $ object = new main ( ) ; $ object -> run ( ) ;
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ numbers = [ ] ; $ answer = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ numbers [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ n - 1 ; $ j > $ i ; $ j -- ) { $ number = 0 ; for ( $ s = 0 ; $ s < $ d ; $ s ++ ) { $ number += pow ( $ numbers [ $ i ] [ $ s ] - $ numbers [ $ j ] [ $ s ] , 2 ) ; } if ( is_seisuu ( $ number ) ) { $ answer += 1 ; } } } function is_seisuu ( $ number ) { $ heihoukon = ( string ) sqrt ( $ number ) ; return ctype_digit ( $ heihoukon ) ? true : false ; } echo $ answer ; echo " \n " ; ?>
<?php $ antennas = array ( ) ; for ( $ i = 0 ; $ i <= 5 ; $ i ++ ) { $ antennas [ $ i ] = trim ( fgets ( STDIN ) ) ; } $ k = $ antennas [ 5 ] ; if ( delta ( $ antennas [ 0 ] , $ antennas [ 1 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 0 ] , $ antennas [ 2 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 0 ] , $ antennas [ 3 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 0 ] , $ antennas [ 4 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 1 ] , $ antennas [ 2 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 1 ] , $ antennas [ 3 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 1 ] , $ antennas [ 4 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 2 ] , $ antennas [ 3 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 2 ] , $ antennas [ 4 ] ) > $ k ) { echo " :( " ; exit ( ) ; } if ( delta ( $ antennas [ 3 ] , $ antennas [ 4 ] ) > $ k ) { echo " :( " ; exit ( ) ; } echo " Yay! " ; exit ( ) ; function delta ( $ a , $ b ) { if ( $ a > $ b ) { return $ a - $ b ; } else if ( $ a < $ b ) { return $ b - $ a ; } }
<?php list ( $ a , $ v ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ b , $ w ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ t = trim ( fgets ( STDIN ) ) ; if ( $ a < $ b ) { echo ( $ a + ( $ v * $ t ) >= $ b + ( $ w * $ t ) ) ? " YES " : " NO " ; } else { echo ( $ a - ( $ v * $ t ) <= $ b - ( $ w * $ t ) ) ? " YES " : " NO " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ hun = 0 ; if ( $ m2 < $ m1 ) { $ h2 = $ h2 - 1 ; $ hun = ( $ m2 + 60 ) - $ m1 ; } else { $ hun = $ m2 - $ m1 ; } $ zikan = ( ( $ h2 - $ h1 ) * 60 ) ; echo ( $ zikan + $ hun ) - $ k ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) . " \n " ;
<?php $ last_i = 0 ; $ last_1 = 9 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; $ d_1 = $ d [ $ i ] % 10 ; if ( $ d_1 !== 0 and $ d_1 < $ last_1 ) { $ last_i = $ i ; $ last_1 = $ d_1 ; } } $ time = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ last_i ) { $ time += $ d [ $ i ] ; } else { $ time += ceil ( $ d [ $ i ] / 10 ) * 10 ; } } echo $ time , PHP_EOL ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; echo $ k >= ( $ e - $ a ) ? " Yay! " : " :( " ; ?>
<?php list ( $ A , $ V ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ B , $ W ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ T ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sa = abs ( $ A - $ B ) ; $ sokudo = $ V - $ W ; if ( $ T * $ sokudo >= $ sa ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , ' %d %d ' , $ dot_num , $ dim_num ) ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { $ input_line = rtrim ( fgets ( STDIN ) ) ; $ dots [ ] = explode ( ' ' , $ input_line ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ dot_num ; $ j ++ ) { if ( distZ ( $ dots [ $ i ] , $ dots [ $ j ] ) ) { $ cnt ++ ; } } } echo $ cnt ; function distZ ( $ x , $ y ) { $ pdt = 0 ; foreach ( $ x as $ key => $ value ) { $ pdt += ( $ value - $ y [ $ key ] ) ** 2 ; } $ sqrt = $ pdt ** ( 1 / 2 ) ; if ( $ sqrt - ( int ) $ sqrt == 0 ) { return true ; } else { return false ; } }
<?php $ stdin = fgets ( STDIN ) ; $ cube = ( $ stdin * $ stdin * $ stdin ) ; echo $ cube ; echo " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ p_list = array ( ) ; $ p_list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = $ p_list [ 0 ] ; $ count = 1 ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ max >= $ p_list [ $ i ] ) { $ count ++ ; $ max = $ p_list [ $ i ] ; } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ li = array ( ) ; $ count = 0 ; $ max = 0 ; $ max_i = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ i_update = $ i ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { if ( $ i_update % 2 == 0 ) { $ i_update /= 2 ; $ count ++ ; } } if ( $ max < $ count ) { $ max = $ count ; $ max_i = $ i ; } $ count = 0 ; } echo $ max_i . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ X = [ ] ; $ Y = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { fscanf ( STDIN , " %d %d " , $ p , $ y ) ; $ X [ ] = [ $ p , $ y ] ; $ Y [ $ p ] [ ] = $ y ; } foreach ( $ Y as $ key => $ arr ) { sort ( $ arr ) ; $ Y [ $ key ] = $ arr ; } for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { $ p = $ X [ $ i ] [ 0 ] ; $ y = $ X [ $ i ] [ 1 ] ; $ ty = $ Y [ $ p ] ; $ l = 0 ; $ r = count ( $ ty ) ; while ( $ r - $ l >= 1 ) { $ mid = intdiv ( $ l + $ r , 2 ) ; if ( $ ty [ $ mid ] >= $ y ) { $ r = $ mid ; } else { $ l = $ mid + 1 ; } } echo sprintf ( " %06d%06d \n " , $ p , $ r + 1 ) ; }
<?php namespace Track ; function main ( $ lines ) { $ sum = 0 ; $ ans = [ ] ; foreach ( $ lines as $ index => $ value ) { if ( $ value == " 0 " ) { break ; } for ( $ i = 0 ; $ i < strlen ( $ value ) ; $ i ++ ) { $ sum += $ value [ $ i ] ; } $ ans [ ] = $ sum ; $ sum = 0 ; } echo implode ( PHP_EOL , $ ans ) ; } $ array = array ( ) ; while ( true ) { $ stdin = fgets ( STDIN ) ; if ( $ stdin == " " ) { break ; } $ array [ ] = rtrim ( $ stdin ) ; } main ( $ array ) ; echo PHP_EOL ;
<?php print ( strval ( cubic ( read_num ( ) ) ) . " \n " ) ; function read_num ( ) { if ( fscanf ( STDIN , " %d " , $ num ) != 1 ) { exit ( " invalid input " ) ; } return $ num ; } function cubic ( $ num ) { return $ num * $ num * $ num ; }
<?php $ line = fgets ( STDIN ) ; if ( in_array ( $ line , [ " 5 5 7 \n " , " 5 7 5 \n " , " 7 5 5 \n " , ] , true , ) ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a != $ b && $ a == 1 ) { echo " Alice \n " ; } elseif ( $ a != $ b && $ b == 1 ) { echo " Bob \n " ; } elseif ( $ a > $ b ) { echo " Alice \n " ; } elseif ( $ b > $ a ) { echo " Bob \n " ; } else { echo " Draw \n " ; }
<?php define ( ' DEBUG_FILENAME ' , ' input.txt ' ) ; if ( file_exists ( DEBUG_FILENAME ) ) { $ inputs = explode ( " \n --- \n " , file_get_contents ( DEBUG_FILENAME ) ) ; define ( ' DEBUG ' , TRUE ) ; } else { $ inputs = array ( file_get_contents ( ' php: define( ' DEBUG ' , FALSE ) ; } foreach ( $ inputs as $ i => $ input ) { if ( DEBUG ) { echo " \n ----- { $ i } ----- \n " ; $ time_start = microtime ( true ) ; } solve ( $ input ) ; if ( DEBUG ) { $ time_end = microtime ( true ) ; $ time = $ time_end - $ time_start ; echo sprintf ( " \n [%.5fms] " , $ time * 1000 ) ; } } function solve ( $ input ) { echo ( $ input * $ input * $ input ) . PHP_EOL ; }
<?php $ ans = 0 ; $ memo = [ ] ; $ mod = 10 ** 9 + 7 ; fscanf ( STDIN , ' %d ' , $ cnt ) ; $ nums = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ tmp = 0 ; foreach ( $ nums as $ num ) { $ tmp += ( $ num >> $ i ) & 1 ; } $ ans += ( ( ( $ tmp % $ mod ) * ( $ cnt - $ tmp ) ) % $ mod ) * ( ( 1 << $ i ) % $ mod ) ; $ ans %= $ mod ; } echo $ ans . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b ; } elseif ( $ a < 13 && $ a >= 6 ) { echo 0.5 * $ b ; } else { echo 0 ; }
<?php $ input_line = fgets ( STDIN ) ; $ array = explode ( " " , $ input_line ) ; $ age = $ array [ 0 ] ; $ price = $ array [ 1 ] ; if ( $ age >= 13 ) { echo $ price ; } else if ( $ age <= 12 && $ age >= 6 ) { echo $ price / 2 ; } else { echo 0 ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ x ) ; $ i = $ x [ 0 ] ; $ ans = pow ( 10 , 10 ) ; while ( $ i <= $ x [ $ n - 1 ] ) { $ sum = 0 ; $ j = 0 ; while ( $ j < $ n ) { $ sum += pow ( ( $ x [ $ j ] - $ i ) , 2 ) ; ++ $ j ; } if ( $ sum < $ ans ) { $ ans = $ sum ; } ++ $ i ; } echo $ ans ;
<?php $ input = preg_split ( ' /[\s,]+/ ' , trim ( fgets ( STDIN ) ) ) ; $ a = $ input [ 0 ] ; $ b = $ input [ 1 ] ; if ( $ a == $ b ) { echo " Draw \n " ; } else if ( $ b == 1 ) { echo " Bob \n " ; } else if ( $ a > $ b || $ a == 1 ) { echo " Alice \n " ; } else echo " Bob \n " ; ?>
<?php $ n = intval ( fgets ( STDIN ) ) ; $ A = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ low = 10 ** 10 ; $ count = 0 ; foreach ( $ A as $ a ) { if ( $ a < $ low ) { $ count ++ ; $ low = $ a ; } } echo $ count ;
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = array ( ) ; for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { $ s [ ] = $ this -> lineIn ( ) ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { if ( $ i == $ j ) { continue ; } else { $ buf = abs ( $ s [ $ i ] - $ s [ $ j ] ) ; if ( $ buf > $ s [ 5 ] ) { echo " :( \n " ; return false ; } } } } echo " Yay! \n " ; return true ; } } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ max_cnt = 0 ; $ ans = $ n ; for ( $ i = $ n ; $ i > 1 ; $ i -- ) { $ cnt = 0 ; $ m = $ i ; while ( true ) { if ( $ m % 2 == 0 ) { $ m = $ m / 2 ; $ cnt ++ ; } else { if ( $ max_cnt < $ cnt ) { $ ans = $ i ; $ max_cnt = $ cnt ; } break ; } } } echo $ ans ;
<?php $ str = trim ( fgets ( STDIN ) ) ; $ k = intval ( fgets ( STDIN ) ) ; $ abc = " " ; for ( $ a = " a " ; $ a != " aa " ; $ a ++ ) { $ abc .= $ a ; } for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] <> " a " ) { $ left = 26 - strpos ( $ abc , $ str [ $ i ] ) ; if ( $ left <= $ k ) { $ k -= $ left ; $ str [ $ i ] = " a " ; } } } for ( $ i = 0 ; $ i < $ k % 26 ; $ i ++ ) { $ aa = $ str [ strlen ( $ str ) - 1 ] ; $ aa ++ ; $ str [ strlen ( $ str ) - 1 ] = $ aa ; } echo $ str , " \n " ;
<?php fscanf ( STDIN , ' %d %d ' , $ num , $ goal ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ num ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ num ; $ j ++ ) { $ k = $ goal - $ i - $ j ; if ( $ k >= 0 && $ k <= $ num ) { $ ans ++ ; } } } echo $ ans . " \n " ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ a >= 13 ) echo $ b ; else if ( $ a >= 6 ) echo $ b / 2 ; else echo " 0 " ;
<?php fscanf ( STDIN , ' %d%d ' , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ b [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i <= $ n - $ m ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n - $ m ; $ j ++ ) { $ f = 1 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ a [ $ i + $ k ] [ $ j + $ l ] != $ b [ $ k ] [ $ l ] ) { $ f = 0 ; } } $ s += $ f ; } echo $ s ? Yes : No ;
<?php $ server = " php: $ handle = fopen( $ server , " r " ) ; $ t = trim ( fgets ( $ handle ) ) ; $ a = trim ( fgets ( $ handle ) ) ; $ a = explode ( ' ' , $ a ) ; $ i = 100 ; $ last = 1000000009 ; $ num = 0 ; while ( $ i > 0 ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ t ; $ k ++ ) { $ sum += pow ( ( $ a [ $ k ] - $ i ) , 2 ) ; } if ( $ sum < $ last ) { $ last = $ sum ; } $ i -- ; } echo $ last . " \n " ;
<?php function getCost ( $ p , $ x ) { return ( $ p - $ x ) ** 2 ; } $ n = intval ( fgets ( STDIN ) ) ; $ tmp = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = min ( $ tmp ) ; $ max = max ( $ tmp ) ; $ minCost = - 1 ; for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) { $ cost = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ cost += getCost ( $ i , $ tmp [ $ j ] ) ; } if ( $ minCost == - 1 || $ cost < $ minCost ) { $ minCost = $ cost ; } } echo $ minCost . " \n " ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] + 1 ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ V ) ; fscanf ( STDIN , " %d %d " , $ B , $ W ) ; fscanf ( STDIN , " %d " , $ T ) ; $ D = abs ( $ A - $ B ) ; $ S = $ V - $ W ; if ( $ D <= $ S * $ T ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php while ( fscanf ( STDIN , " %d %d " , $ a , $ b ) > 0 ) { print ( $ a + $ b ) . " \n " ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php $ array = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( $ array [ $ i ] === $ array [ $ j ] ) { continue ; } else if ( $ array [ $ j ] - $ array [ $ i ] > $ k ) { echo ' :( ' , PHP_EOL ; exit ( ) ; } } } echo ' Yay! ' , PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ old , $ yen ) ; if ( 5 < $ old && $ old < 13 ) { echo $ yen / 2 ; } elseif ( $ old < 6 ) { echo 0 ; } else { echo $ yen ; }
<?php $ output = array ( ) ; while ( true ) { $ data = trim ( fgets ( STDIN ) ) ; if ( " 0 " == $ data ) { break ; } $ n = strlen ( $ data ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ num = intval ( $ data [ $ i ] ) ; $ sum += $ num ; } array_push ( $ output , $ sum ) ; } print implode ( " \n " , $ output ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( ( $ z >= 0 ) && ( $ z <= $ k ) ) { $ cnt ++ ; } } } echo $ cnt ;
<?php $ a = fgets ( STDIN ) ; $ a = explode ( " " , $ a ) ; $ k = intval ( $ a [ 0 ] ) ; $ s = intval ( $ a [ 1 ] ) ; $ count = 0 ; $ z = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php $ server = " php: $ local = " input . txt " ; $ handle = fopen ( $ server , " r " ) ; $ t = trim ( fgets ( $ handle ) ) ; $ x = trim ( fgets ( $ handle ) ) ; $ a = explode ( ' ' , $ x ) ; $ count = 0 ; $ j = 0 ; if ( $ t == 1 ) echo " 1 " ; else { $ count = 1 ; $ te = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ t ; $ i ++ ) { if ( $ a [ $ i ] <= $ te ) { $ te = $ a [ $ i ] ; $ count ++ ; } } echo $ count ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a <= 5 ) { $ result = 0 ; } elseif ( $ a <= 12 ) { $ result = $ b / 2 ; } else { $ result = $ b ; } echo $ result , PHP_EOL ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ s = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ s [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ t = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ t [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ sa = $ n - $ m ; for ( $ i = 0 ; $ i <= $ sa ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ sa ; $ j ++ ) { $ icchi = true ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) { for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ t [ $ k ] [ $ l ] != $ s [ $ k + $ i ] [ $ l + $ j ] ) { $ icchi = false ; } } } if ( $ icchi ) { echo " Yes " ; exit ; } } } echo " No " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = trim ( fgets ( STDIN ) ) ; $ x = array_map ( " intval " , explode ( " " , $ inputs ) ) ; $ sum_min = 0 ; for ( $ p = 1 ; $ p < 100 ; $ p ++ ) { $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ x ) ; $ i ++ ) { $ sum += pow ( $ x [ $ i ] - $ p , 2 ) ; } if ( $ p == 1 || $ sum_min > $ sum ) { $ sum_min = $ sum ; } } echo $ sum_min . " \n " ;
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $A=$key->A[0]; $B=$key->A[1]; $C=$key->A[2]; $D=$key->A[3]; printf("%d\n",max($A*$B,$C*$D));
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } elseif ( $ A >= 6 && $ A <= 12 ) { echo $ B / 2 ; } elseif ( $ A <= 5 ) { echo 0 ; } ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo implode ( " " , $ a ) == 1479 ? " YES " : " NO " ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab >= $ cd ) { echo $ ab ; } else { echo $ cd ; } ?>
<?php $ N = fgets ( STDIN ) ; $ A = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = max ( $ A ) ; $ min = min ( $ A ) ; echo $ max - $ min ; ?>
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ m = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ m [ ] = $ this -> lineIn ( ) ; } $ aa = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ buf = $ m [ $ i ] % 10 ; $ buf = 0 == $ buf ? 0 : abs ( 10 - $ buf ) ; $ aa [ ] = $ buf ; } $ lf = min ( $ aa ) ; $ hf = max ( $ aa ) ; $ sp = false ; if ( $ lf == $ hf ) { $ sp = true ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ sp ) { $ m [ $ i ] += $ aa [ $ i ] ; } else { if ( $ hf != $ aa [ $ i ] ) { $ m [ $ i ] += $ aa [ $ i ] ; } } } if ( $ sp ) { $ m [ 0 ] -= $ aa [ 0 ] ; } $ ans = array_sum ( $ m ) ; echo $ ans . " \n " ; } } ?>
<?php $ calcAnswer = trim ( fgets ( STDIN ) ) ; echo calc ( $ calcAnswer ) ; echo " \n " ; function calc ( $ x ) { $ answer = $ x * $ x * $ x ; return $ answer ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; echo " \n " ;
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; $ X_array = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = INF ; for ( $ X = 1 ; $ X <= 100 ; $ X ++ ) { $ ans = 0 ; for ( $ i = 0 ; $ i < count ( $ X_array ) ; $ i ++ ) { $ ans = $ ans + ( $ X_array [ $ i ] - $ X ) ** 2 ; } if ( $ sum > $ ans ) { $ sum = $ ans ; } } echo $ sum . " \n " ; ?>
<?php list ( $ n , $ k ) = ints ( ) ; echo $ k > 1 ? $ n - $ k : 0 ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; echo max ( $ a , $ b , $ c ) - min ( $ a , $ b , $ c ) ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ w ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d%d " , $ W [ ] , $ V [ ] ) ; } $ offset = $ W [ 0 ] ; array_unshift ( $ V , null ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ W [ $ i ] -= $ offset ; } array_unshift ( $ W , null ) ; $ dp [ 0 ] [ 0 ] = array_fill ( 0 , 301 , 0 ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ dp [ $ i ] = $ dp [ $ i - 1 ] ; $ dp [ $ i ] [ $ i ] = $ dp [ $ i ] [ $ i - 1 ] ; for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) { for ( $ k = 0 ; $ k <= 3 * $ n ; $ k ++ ) { if ( $ k - $ W [ $ i ] >= 0 ) $ dp [ $ i ] [ $ j ] [ $ k ] = max ( $ dp [ $ i ] [ $ j ] [ $ k ] , $ dp [ $ i - 1 ] [ $ j - 1 ] [ $ k - $ W [ $ i ] ] + $ V [ $ i ] ) ; } } } $ max = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { if ( $ w - $ i * $ offset >= 0 ) { $ max = max ( $ max , $ dp [ $ n ] [ $ i ] [ min ( $ w - $ i * $ offset , 3 * $ n ) ] ) ; } } echo $ max ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ i = 0 ; while ( $ i < $ n ) { list ( $ x [ ] , $ y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; ++ $ i ; } $ ans = 0 ; $ i = 0 ; while ( $ i < $ n ) { $ j = $ i + 1 ; while ( $ j < $ n ) { $ ans += 2 * ( sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ) ; ++ $ j ; } ++ $ i ; } echo sprintf ( ' %.7f ' , $ ans / $ n ) , PHP_EOL ;
<?php for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { $ arr [ ] = trim ( fgets ( STDIN ) ) ; } for ( $ i = 0 ; $ i < count ( $ arr ) - 1 ; $ i ++ ) { for ( $ s = $ i + 1 ; $ s < count ( $ arr ) - 1 ; $ s ++ ) { if ( $ arr [ 5 ] < abs ( $ arr [ $ i ] - $ arr [ $ s ] ) ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; echo max ( $ a * $ b , $ c * $ d ) ; echo PHP_EOL ;
<?php list ( $ A , $ V ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; list ( $ B , $ W ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ T = ( int ) trim ( fgets ( STDIN ) ) ; $ p = abs ( $ B - $ A ) ; $ d = $ V - $ W ; if ( $ T * $ d >= $ p ) { printf ( " YES \n " ) ; } else { printf ( " NO \n " ) ; }
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ log = ( int ) floor ( log ( $ N , 2 ) ) ; echo pow ( 2 , $ log ) . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ arr_2 = [ ] ; $ result = [ ] ; $ count = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ s = $ i + 1 ; $ s < $ n ; $ s ++ ) { for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ arr_2 [ ] = ( abs ( ( $ arr [ $ i ] [ $ j ] ) - ( $ arr [ $ s ] [ $ j ] ) ) ) ** 2 ; } } } for ( $ l = 0 ; $ l < ( count ( $ arr_2 ) / $ d ) ; $ l ++ ) { $ k = $ l * $ d ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ d ; $ i ++ ) { $ sum = $ sum + $ arr_2 [ $ k + $ i ] ; $ result [ $ l ] = sqrt ( $ sum ) ; } } for ( $ i = 0 ; $ i < count ( $ result ) ; $ i ++ ) { if ( preg_match ( ' /^[0-9]+$/ ' , $ result [ $ i ] ) ) { $ count ++ ; } } echo $ count ; ?>
<?php list ( $ N , $ W ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; While ( $ str = trim ( fgets ( STDIN ) ) ) { $ wv [ ] = explode ( " " , $ str ) ; } $ memo = [ ] ; $ max = 0 ; function dp ( $ i , $ maxW ) { global $ N , $ wv , $ memo ; if ( isset ( $ memo [ $ i ] [ $ maxW ] ) ) { return $ memo [ $ i ] [ $ maxW ] ; } if ( $ i == $ N ) { $ max = 0 ; } else if ( $ maxW < $ wv [ $ i ] [ 0 ] ) { $ max = dp ( $ i + 1 , $ maxW ) ; } else { $ max = max ( dp ( $ i + 1 , $ maxW ) , dp ( $ i + 1 , $ maxW - $ wv [ $ i ] [ 0 ] ) + $ wv [ $ i ] [ 1 ] ) ; } $ memo [ $ i ] [ $ maxW ] = $ max ; return $ max ; } echo dp ( 0 , $ W ) ;
<?php fscanf ( STDIN , " %d %d " , $ t , $ b ) ; if ( $ t <= 5 ) { echo 0 ; } elseif ( $ t >= 6 && $ t <= 12 ) { echo $ b / 2 ; } else { echo $ b ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo $ a < 6 ? 0 : ( $ a < 13 ? $ b / 2 : $ b ) ;
<?php $ h = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ h ) ; if ( implode ( " " , $ h ) == " 1479 " ) { printf ( " YES \n " ) ; } else { printf ( " NO \n " ) ; }
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a [ 0 ] == 1 ) { $ a [ 0 ] += 13 ; } if ( $ a [ 1 ] == 1 ) { $ a [ 1 ] += 13 ; } if ( $ a [ 0 ] > $ a [ 1 ] ) { echo ' Alice ' ; } elseif ( $ a [ 0 ] == $ a [ 1 ] ) { echo ' Draw ' ; } else { echo ' Bob ' ; }
<?php list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di = new Di ( $ n ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di -> connect ( $ from , $ to , $ d ) ; } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ di -> connect ( $ i , $ i - 1 , 0 ) ; } $ distance = $ di -> solve ( 1 ) [ $ n ] ; if ( $ distance == $ di -> inf ) { echo - 1 ; } else { echo $ distance ; } class Di { public $ pq ; public $ distance ; public $ G ; public $ inf = 10 ** 18 ; function __construct ( $ n ) { $ this -> pq = new SplPriorityQueue ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ this -> distance [ $ i ] = $ this -> inf ; } } function connect ( $ from , $ to , $ cost ) { $ this -> G [ $ from ] [ ] = [ $ to , $ cost ] ; } function solve ( $ from ) { $ this -> pq -> insert ( $ from , 0 ) ; $ this -> distance [ $ from ] = 0 ; while ( $ this -> pq -> count ( ) ) { $ f = $ this -> pq -> extract ( ) ; if ( ! isset ( $ this -> G [ $ f ] ) ) continue ; foreach ( $ this -> G [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ this -> distance [ $ f ] + $ dist ; if ( $ this -> distance [ $ t ] > $ new ) { $ this -> distance [ $ t ] = $ new ; $ this -> pq -> insert ( $ t , - $ new ) ; } } } return $ this -> distance ; } }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ b - $ a > $ k ) { echo " :( \n " ; } elseif ( $ c - $ a > $ k ) { echo " :( \n " ; } elseif ( $ d - $ a > $ k ) { echo " :( \n " ; } elseif ( $ e - $ a > $ k ) { echo " :( \n " ; } elseif ( $ c - $ b > $ k ) { echo " :( \n " ; } elseif ( $ d - $ b > $ k ) { echo " :( \n " ; } elseif ( $ e - $ b > $ k ) { echo " :( \n " ; } elseif ( $ d - $ c > $ k ) { echo " :( \n " ; } elseif ( $ e - $ c > $ k ) { echo " :( \n " ; } elseif ( $ e - $ d > $ k ) { echo " :( \n " ; } else { echo " Yay! \n " ; } ?>
<?php $ result = array ( ) ; while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' ' ) { sscanf ( $ line , ' %d,%f,%f ' , $ n , $ kg , $ m ) ; if ( $ kg / pow ( $ m , 2 ) >= 25.0 ) { $ result [ ] = $ n ; } } echo count ( $ result ) > 0 ? implode ( PHP_EOL , $ result ) : ' 該当なし', PHP_E O L
<?php list ( $ n ) = ints ( ) ; $ s = strs ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] === ' Y ' ) exit ( ' Four ' ) ; } echo ' Three ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ xList = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ave = round ( array_sum ( $ xList ) / $ n ) ; $ totalHp = 0 ; foreach ( $ xList as $ x ) { $ totalHp += pow ( ( $ x - $ ave ) , 2 ) ; } echo $ totalHp ; echo PHP_EOL ; ?>
<?php $ inp = fgets ( STDIN ) ; $ n = ( int ) $ inp ; $ inp = fgets ( STDIN ) ; $ t = explode ( " " , $ inp ) ; $ t = array_map ( function ( $ a ) { return ( int ) $ a ; } , $ t ) ; $ ans = 1e20 ; for ( $ int = 0 ; $ int <= 100 ; $ int ++ ) { $ score = 0 ; foreach ( $ t as $ x ) { $ score += pow ( ( $ int - $ x ) , 2 ) ; } $ ans = min ( $ score , $ ans ) ; } echo ( $ ans ) ; ?>
<?php fgets ( STDIN ) ; $ data = [ ] ; while ( $ line = fgets ( STDIN ) ) { $ data [ ] = explode ( " " , trim ( $ line ) ) ; } $ ans = 0 ; $ cnt = count ( $ data ) ; for ( $ i = 0 ; $ i < $ cnt - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ cnt ; $ j ++ ) { $ tmp = 0 ; foreach ( $ data [ $ i ] as $ k => $ v ) { $ tmp += pow ( $ v - $ data [ $ j ] [ $ k ] , 2 ) ; } if ( sqrt ( $ tmp ) == intdiv ( sqrt ( $ tmp ) , 1 ) ) { $ ans ++ ; } } } echo $ ans ;
<?php function mygets ( ) { return array_map ( intval , split ( ' ' , fgets ( STDIN ) ) ) ; } list ( $ n , $ x ) = mygets ( ) ; $ a = mygets ( ) ; $ b1 = $ a ; $ b2 = $ a ; $ ans = array_sum ( $ a ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ b2 [ $ j ] = min ( $ b1 [ ( $ j + $ n - 1 ) % $ n ] , $ a [ $ j ] ) ; } $ ans = min ( $ ans , $ i * $ x + array_sum ( $ b2 ) ) ; $ sw = & $ b1 ; $ b1 = & $ b2 ; $ b2 = & $ sw ; } echo $ ans , PHP_EOL ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ order = [ $ a , $ b , $ c , $ d , $ e ] ; $ wait = [ ] ; for ( $ i = 0 ; $ i < count ( $ order ) ; $ i ++ ) { $ wait [ $ i ] = ceil ( $ order [ $ i ] / 10 ) * 10 - $ order [ $ i ] ; } arsort ( $ wait ) ; $ last = key ( $ wait ) ; asort ( $ wait ) ; $ time = 0 ; foreach ( $ wait as $ w => $ t ) { if ( $ w != $ last ) { $ time += ceil ( $ order [ $ w ] / 10 ) * 10 ; } else { $ time += $ order [ $ w ] ; } } echo $ time . " \n " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a >= 13 ) { echo $ b ; } else if ( $ a >= 6 ) { echo $ b / 2 ; } else { echo 0 ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ca = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ c = 0 ; $ t = $ i ; while ( $ t > 0 ) { if ( $ t % 2 !== 0 ) { break ; } else if ( $ t % 2 == 0 ) { $ c ++ ; $ t = $ t / 2 ; } } $ ca = $ ca + array ( $ i => $ c ) ; } $ max = max ( $ ca ) ; echo array_keys ( $ ca , $ max ) [ 0 ] ; ?>
<?php $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; $ count = count ( $ s ) ; $ a = array ( " a " => 1 , " b " => 2 , " c " => 3 , " d " => 4 , " e " => 5 , " f " => 6 , " g " => 7 , " h " => 8 , " i " => 9 , " j " => 10 , " k " => 11 , " l " => 12 , " m " => 13 , " n " => 14 , " o " => 15 , " p " => 16 , " q " => 17 , " r " => 18 , " s " => 19 , " t " => 20 , " u " => 21 , " v " => 22 , " w " => 23 , " x " => 24 , " y " => 25 , " z " => 26 ) ; $ i = 0 ; while ( $ i < $ count ) { $ num [ $ i ] = strtr ( $ s [ $ i ] , $ a ) ; $ d [ $ i ] = 27 - $ num [ $ i ] ; ++ $ i ; } $ i = 0 ; $ K = trim ( fgets ( STDIN ) ) ; $ n = 0 ; while ( $ i < $ count ) { if ( $ d [ $ i ] != 26 && $ d [ $ i ] <= $ K - $ n ) { $ num [ $ i ] = 1 ; $ n += $ d [ $ i ] ; } ++ $ i ; } if ( $ n != $ K ) { $ num [ $ count - 1 ] += $ K - $ n ; $ num [ $ count - 1 ] %= 26 ; if ( $ num [ $ count - 1 ] == 0 ) { $ num [ $ count - 1 ] = 26 ; } } $ i = 0 ; while ( $ i < $ count ) { echo array_search ( $ num [ $ i ] , $ a ) ; ++ $ i ; } echo PHP_EOL ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ s_arr = explode ( ' ' , $ s ) ; $ s_arr = array_unique ( $ s_arr ) ; echo ( count ( $ s_arr ) === 3 ) ? ' Three ' : ' Four ' ;
<?php list ( $ s ) = strs ( ) ; list ( $ k ) = ints ( ) ; for ( $ i = 0 ; $ i < 26 ; ++ $ i ) $ a2n [ chr ( 97 + $ i ) ] = $ i ; $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ x = $ a2n [ $ s [ $ i ] ] ; if ( $ x === 0 ) continue ; if ( $ k >= 26 - $ x ) { $ s [ $ i ] = ' a ' ; $ k -= 26 - $ x ; } } if ( $ k > 0 ) $ s [ $ n - 1 ] = chr ( 97 + ( $ a2n [ $ s [ $ n - 1 ] ] + $ k ) % 26 ) ; echo $ s . PHP_EOL ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php $ array = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } $ k = trim ( fgets ( STDIN ) ) ; echo ( $ array [ 4 ] - $ array [ 0 ] > $ k ? ' :( ' : ' Yay! ' ) , PHP_EOL ;
<?php $ array = explode ( " " , fgets ( STDIN ) ) ; $ count5 = 0 ; $ count7 = 0 ; foreach ( $ array as $ num ) { switch ( $ num ) { case 5 : $ count5 ++ ; break ; case 7 : $ count7 ++ ; break ; } } if ( $ count5 == 2 && $ count7 == 1 ) { echo ( " YES \n " ) ; } else { echo ( " NO \n " ) ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) , PHP_EOL ;
<?php $ A = explode ( ' ' , fgets ( STDIN ) ) ; $ B = explode ( ' ' , fgets ( STDIN ) ) ; $ C = explode ( ' ' , fgets ( STDIN ) ) ; $ c = 0 ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { if ( $ A [ $ i + 1 ] - $ A [ $ i ] == $ B [ $ i + 1 ] - $ B [ $ i ] && $ B [ $ i + 1 ] - $ B [ $ i ] == $ C [ $ i + 1 ] - $ C [ $ i ] ) { $ c ++ ; } } echo $ c == 2 ? " Yes " : " No " , " \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sumA = 0 ; foreach ( $ a as $ val ) { $ sumA += $ val ; } $ sumB = 0 ; foreach ( $ b as $ val ) { $ sumB += $ val ; } if ( $ sumA < $ sumB ) { echo " -1 " ; exit ; } $ lessThanNum = 0 ; $ differenceMinusSum = 0 ; $ differencePlusArr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] < $ b [ $ i ] ) { $ lessThanNum ++ ; $ differenceMinusSum += ( $ b [ $ i ] - $ a [ $ i ] ) ; } else { $ differencePlusArr [ $ i ] = $ a [ $ i ] - $ b [ $ i ] ; } } $ echoNum = $ lessThanNum ; if ( $ echoNum == 0 ) { echo $ echoNum ; exit ; } rsort ( $ differencePlusArr ) ; foreach ( $ differencePlusArr as $ val ) { $ echoNum ++ ; if ( $ val >= $ differenceMinusSum ) { break ; } else { $ differenceMinusSum -= $ val ; } } echo $ echoNum ; exit ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ x = pow ( $ x , 3 ) ; echo $ x ; ?>
<?php list ( $ n ) = ints ( ) ; $ p = [ 1 , 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a = ints ( ) ; if ( $ a [ 0 ] >= $ p [ 0 ] && $ a [ 1 ] >= $ p [ 1 ] ) { $ p = $ a ; continue ; } $ m [ 0 ] = $ p [ 0 ] % $ a [ 0 ] ? intdiv ( $ p [ 0 ] , $ a [ 0 ] ) + 1 : intdiv ( $ p [ 0 ] , $ a [ 0 ] ) ; $ m [ 1 ] = $ p [ 1 ] % $ a [ 1 ] ? intdiv ( $ p [ 1 ] , $ a [ 1 ] ) + 1 : intdiv ( $ p [ 1 ] , $ a [ 1 ] ) ; $ p = [ $ a [ 0 ] * max ( $ m ) , $ a [ 1 ] * max ( $ m ) ] ; } echo array_sum ( $ p ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ K = $ inputs [ 0 ] ; $ S = $ inputs [ 1 ] ; $ ans = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( 0 <= $ z && $ z <= $ K ) $ ans ++ ; } } echo $ ans ; ?>
<?php list ( $ n ) = ints ( ) ; for ( $ a = 1 ; $ a <= 3500 ; ++ $ a ) { for ( $ b = $ a ; $ b <= 3500 ; ++ $ b ) { $ x = $ n * $ a * $ b ; $ y = 4 * $ a * $ b - $ n * ( $ a + $ b ) ; if ( $ y > 0 && $ x % $ y === 0 ) { $ c = intdiv ( $ x , $ y ) ; break 2 ; } } } echo implode ( ' ' , [ $ a , $ b , $ c ] ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ ans = 0 ; $ array = [ ] ; function cmp ( $ a , $ b ) { $ a = $ a % 10 ; $ b = $ b % 10 ; $ a = $ a == 0 ? 10 : $ a ; $ b = $ b == 0 ? 10 : $ b ; return $ b <=> $ a ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } usort ( $ array , " cmp " ) ; function calc ( $ num ) { $ plus = $ num % 10 ; $ plus = $ plus == 0 ? 0 : 10 - $ plus ; return $ num + $ plus ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i < 4 ) { $ ans += calc ( $ array [ $ i ] ) ; } else { $ ans += $ array [ $ i ] ; } } echo $ ans . " \n " ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ input = preg_split ( " / / " , trim ( fgets ( STDIN ) ) ) ; for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ x [ $ i ] [ $ j ] = $ input [ $ j ] ; } } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ score = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ score += ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) * ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) ; } if ( ctype_digit ( strval ( sqrt ( $ score ) ) ) ) { $ count ++ ; } } } echo ( $ count ) ;
<?php $ output = array ( ) ; while ( true ) { $ data = trim ( fgets ( STDIN ) ) ; if ( " 0 " == $ data ) { break ; } $ nums = str_split ( $ data ) ; array_push ( $ output , array_sum ( $ nums ) ) ; } print implode ( " \n " , $ output ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ b = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' ' , $ b ) ; $ unique = array_unique ( $ array ) ; echo ( count ( $ unique ) == 3 ) ? ' Three ' : ' Four ' ;
<?php const INPUT_DELIMITER = " " ; $ input = fgets ( STDIN ) ; list ( $ N , $ D ) = array_map ( ' intval ' , explode ( INPUT_DELIMITER , $ input ) ) ; $ points = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ points [ ] = array_map ( ' intval ' , explode ( INPUT_DELIMITER , $ input ) ) ; } $ count = 0 ; foreach ( $ points as $ index => $ point ) { if ( $ index + 1 == count ( $ points ) ) { break ; } for ( $ i = $ index + 1 ; $ i < count ( $ points ) ; $ i ++ ) { $ powSum = 0 ; for ( $ j = 0 ; $ j < $ D ; $ j ++ ) { $ powSum += pow ( $ point [ $ j ] - $ points [ $ i ] [ $ j ] , 2 ) ; } $ diff = sqrt ( $ powSum ) - floor ( sqrt ( $ powSum ) ) ; if ( $ diff == 0 ) { $ count ++ ; } } } echo $ count ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ answer = [ 1 , 9 , 7 , 4 ] ; foreach ( $ input as $ val ) { $ key = array_search ( $ val , $ answer ) ; if ( $ key === FALSE ) { echo " NO " ; exit ; } unset ( $ answer [ $ key ] ) ; } echo " YES " ; exit ;
<?php $ n = fgets ( STDIN ) ; $ ans = 0 ; for ( $ i = 0 ; pow ( 2 , $ i ) <= $ n ; $ i ++ ) { $ ans = max ( pow ( 2 , $ i ) , $ ans ) ; } echo ( $ ans ) ?>
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ E - $ A > $ k ) { echo ' :( ' . PHP_EOL ; } else { echo ' Yay! ' . PHP_EOL ; }
<?php list ( $ a , $ b , $ h , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ hr = $ h * 30 + $ m * 0.5 ; $ mr = $ m * 6 ; $ r = abs ( $ hr - $ mr ) ; $ r = min ( 360 - $ r , $ r ) ; $ ans = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( deg2rad ( $ r ) ) ; echo sprintf ( " %.12f " , sqrt ( $ ans ) ) ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; } fscanf ( STDIN , " %d " , $ k ) ; if ( $ d [ 4 ] - $ d [ 0 ] > $ k ) { echo ' :( ' , PHP_EOL ; exit ; } echo ' Yay! ' , PHP_EOL ;
<?php while ( true ) { $ val = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ val [ 0 ] == 0 ) { break ; } echo array_sum ( $ val ) . PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b . PHP_EOL ; } elseif ( $ a >= 6 && $ a <= 12 ) { echo ( $ b / 2 ) . PHP_EOL ; } else { echo ( 0 ) . PHP_EOL ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; if ( $ n >= 64 ) { echo 64 ; } elseif ( $ n >= 32 ) { echo 32 ; } elseif ( $ n >= 16 ) { echo 16 ; } elseif ( $ n >= 8 ) { echo 8 ; } elseif ( $ n >= 4 ) { echo 4 ; } elseif ( $ n >= 2 ) { echo 2 ; } else { echo 1 ; }
<?php $ line = fgets ( STDIN ) ; $ line = str_replace ( array ( " " , " " ) , " " , $ line ) ; if ( $ line == 557 || $ line == 575 || $ line == 755 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ p = round ( array_sum ( $ x ) / count ( $ x ) , 0 ) ; $ i = 0 ; foreach ( $ x as $ a ) { $ i += ( $ a - $ p ) ** 2 ; } echo $ i . PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ n , 3 ) ; print ( $ ans . " \n " ) ;
<?php while ( fscanf ( STDIN , " %d %d " , $ a , $ b ) > 0 ) { echo $ a + $ b . " \n " ; } ?>
<?php [ $ H1 , $ M1 , $ H2 , $ M2 , $ K ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; printf ( " %d " , $ H2 * 60 + $ M2 - ( $ H1 * 60 + $ M1 ) - $ K ) ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ s [ 1 ] , $ s [ 2 ] , $ s [ 3 ] , $ s [ 4 ] ) ; if ( in_array ( 1 , $ s ) && in_array ( 9 , $ s ) && in_array ( 7 , $ s ) && in_array ( 4 , $ s ) ) echo " YES " ; else echo " NO " ;
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; $ answer = " Yes " ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ c [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ mmin = min ( $ c [ $ i ] ) ; foreach ( $ c [ $ i ] as $ k => $ v ) { $ c [ $ i ] [ $ k ] -= $ mmin ; } } for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ c [ 0 ] [ $ i ] != $ c [ 1 ] [ $ i ] || $ c [ 1 ] [ $ i ] != $ c [ 2 ] [ $ i ] ) { $ answer = " No " ; } } echo $ answer . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b . " \n " ; } elseif ( $ a <= 12 && $ a >= 6 ) { echo ( $ b / 2 ) . " \n " ; } else { echo ( 0 ) . " \n " ; } ?>
<?php $ input = readline ( ) ; $ parts = explode ( " " , $ input ) ; $ K = $ parts [ 0 ] ; $ S = $ parts [ 1 ] ; if ( $ S == 3 * $ K ) { echo " 1 " . " \n " ; die ( ) ; } $ total = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { $ balance = $ S - $ i ; for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { $ balance_2 = $ balance - $ j ; if ( $ balance - $ j < 0 ) break ; else if ( $ balance_2 > $ K ) { continue ; } else { $ total ++ ; } } } echo $ total . " \n " ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function be_able_to_reach ( $ from , $ to ) { $ time = $ to [ 0 ] - $ from [ 0 ] ; $ distance = abs ( $ to [ 1 ] - $ from [ 1 ] ) + abs ( $ to [ 2 ] - $ from [ 2 ] ) ; #var_dump($time,$distance); if($distance > $time) return false; if($distance % 2 == 0 && $time % 2 == 0) return true; if($distance % 2 == 1 && $time % 2 == 1) return true; return false; } $scan = new Scanner(); $A = $scan->nextInt(); $B = $scan->nextInt(); $cost = 0; if($A >= 13) $cost = $B; elseif($A >= 6) $cost = $B/2; else $cost = 0; print($cost);
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { $ rest = $ S - $ i ; if ( 0 <= $ rest && $ rest <= $ K + $ K ) { $ ans += min ( $ rest , $ K + $ K - $ rest ) + 1 ; } } echo $ ans . PHP_EOL ;
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; $ P_array = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; if ( $ N == 1 ) { echo $ P_array [ 0 ] ; exit ; } $ count = 0 ; $ min = $ P_array [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ P_array [ $ i ] < $ min ) { $ count ++ ; $ min = $ P_array [ $ i ] ; } } echo $ count + 1 ; ?>
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += ( int ) $ n ; echo $ s , PHP_EOL ; }
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; $ sum = $ A + $ B ; echo ceil ( $ sum / 2 ) ; ?>
<?php fscanf ( STDIN , ' %d%d%d ' , $ A , $ B , $ C ) ; $ S = [ $ A , $ B , $ C ] ; rsort ( $ S ) ; if ( $ S [ 0 ] == 7 && $ S [ 1 ] == 5 && $ S [ 2 ] == 5 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php list ( $ N , $ D ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ diff = 0 ; foreach ( $ x [ $ i ] as $ k => $ v ) { $ diff += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; } $ diff_int = sqrt ( $ diff ) ; if ( $ diff_int == intval ( $ diff_int ) ) { $ ans ++ ; } } } printf ( " %d \n " , $ ans ) ;
<?php $ m = [ ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ m [ $ i ] = array_map ( ' intval ' , explode ( ' ' , fgets ( STDIN ) ) ) ; } $ a [ 0 ] = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) $ b [ $ i ] = $ m [ 0 ] [ $ i ] - $ a [ 0 ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) $ a [ $ i ] = $ m [ $ i ] [ 0 ] - $ b [ 0 ] ; $ jdge = ' Yes ' ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { if ( $ a [ $ i ] + $ b [ $ j ] != $ m [ $ i ] [ $ j ] ) $ jdge = ' No ' ; } } echo $ jdge ;
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = $ a [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ lcm = lcm ( $ lcm , $ a [ $ i ] ) ; if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function gcdAll ( $ arr ) { $ gcd = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ gcd = gcd ( $ gcd , $ arr [ $ i ] ) ; } return $ gcd ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; } function lcmAll ( $ arr ) { $ lcm = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ arr [ $ i ] ) ; } return $ lcm ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ map = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; $ min = PHP_INT_MAX ; foreach ( $ map as $ value ) { if ( $ value < $ min ) { $ ans ++ ; $ min = $ value ; } } echo $ ans ;
<?php while ( true ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) break ; $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ x ) ; $ i ++ ) { $ sum += $ x [ $ i ] ; } echo $ sum . " \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ diff = 0 ; foreach ( $ X [ $ i ] as $ k => $ z ) { $ diff += pow ( $ X [ $ i ] [ $ k ] - $ X [ $ j ] [ $ k ] , 2 ) ; } $ diff_int = sqrt ( $ diff ) ; if ( $ diff_int == intval ( $ diff_int ) ) { $ ans ++ ; } } } echo $ ans ;
<?php $ n = ( int ) ( fgets ( STDIN ) ) ; $ towns = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ towns [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ sum = [ ] ; for ( $ mask = 0 ; $ mask < ( 1 << $ n ) ; $ mask ++ ) { if ( substr_count ( decbin ( $ mask ) , " 1 " ) !== 2 ) continue ; $ tmp = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ mask >> $ i ) & 1 ) { $ tmp [ ] = $ i ; } } $ sum [ ] = sqrt ( pow ( ( $ towns [ $ tmp [ 0 ] ] [ 0 ] - $ towns [ $ tmp [ 1 ] ] [ 0 ] ) , 2 ) + pow ( ( $ towns [ $ tmp [ 0 ] ] [ 1 ] - $ towns [ $ tmp [ 1 ] ] [ 1 ] ) , 2 ) ) ; } $ average = array_sum ( $ sum ) / count ( $ sum ) ; echo $ average * ( $ n - 1 ) ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ arr = explode ( ' ' , $ stdin ) ; $ rslt = ' NO ' ; $ five_cnt = 0 ; $ sevn_cnt = 0 ; foreach ( $ arr as $ val ) { if ( $ val === ' 5 ' ) { $ five_cnt ++ ; } if ( $ val === ' 7 ' ) { $ sevn_cnt ++ ; } } if ( $ five_cnt === 2 && $ sevn_cnt === 1 ) { $ rslt = ' YES ' ; } echo $ rslt ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a == 1 ) $ a = 14 ; if ( $ b == 1 ) $ b = 14 ; if ( $ a > $ b ) { echo " Alice " ; } elseif ( $ a == $ b ) { echo " Draw " ; } else { echo " Bob " ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ input_org = $ input_changed = explode ( " " , trim ( fgets ( STDIN ) ) ) ; asort ( $ input_changed ) ; for ( $ i = 0 ; $ i < $ N / 2 ; $ i ++ ) { $ n = current ( $ input_changed ) ; next ( $ input_changed ) ; } $ n_1 = current ( $ input_changed ) ; foreach ( $ input_org as $ elem ) { if ( $ elem <= $ n ) { echo " $ n_1 \n " ; } else { echo " $ n \n " ; } }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b ; } elseif ( 6 <= $ a && $ a <= 12 ) { echo $ b / 2 ; } else { echo 0 ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . PHP_EOL ;
<?php $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; sort ( $ a ) ; echo $ a [ 2 ] - $ a [ 0 ] ;
<?php While ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ v = explode ( " " , $ stdin [ 0 ] ) ; fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ v [ 0 ] ; $ i ++ ) { $ a = explode ( " " , $ stdin [ $ i + 1 ] ) ; for ( $ j = $ i + 1 ; $ j < $ v [ 0 ] ; $ j ++ ) { $ b = explode ( " " , $ stdin [ $ j + 1 ] ) ; $ r = 0 ; for ( $ k = 0 ; $ k < $ v [ 1 ] ; $ k ++ ) { $ r += pow ( ( $ a [ $ k ] - $ b [ $ k ] ) , 2 ) ; } if ( preg_match ( ' /^[0-9]+$/ ' , sqrt ( $ r ) ) ) { $ ans ++ ; } } } echo $ ans ;
<?php $ input = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = $ input [ 0 ] ; $ b = $ input [ 1 ] ; $ h = $ input [ 2 ] ; $ m = $ input [ 3 ] ; $ long = 6 * $ m ; $ short = 30 * $ h + $ m / 2 ; $ alpha = 0 ; if ( $ long > $ short ) { $ alpha = $ long - $ short ; } else { $ alpha = $ short - $ long ; } if ( $ alpha > 180 ) { $ alpha = 360 - $ alpha ; } $ powc = pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( deg2rad ( $ alpha ) ) ; $ c = sqrt ( $ powc ) ; echo $ c ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xy = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ x [ $ i ] = $ xy [ 0 ] ; $ y [ $ i ] = $ xy [ 1 ] ; } $ d = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ jj = ( $ i + $ j ) % $ n ; $ d += sqrt ( ( $ x [ $ i ] - $ x [ $ jj ] ) ** 2 + ( $ y [ $ i ] - $ y [ $ jj ] ) ** 2 ) ; } } echo $ d / $ n ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ b = array_map ( " divCount " , $ a ) ; if ( min ( $ b ) == max ( $ b ) ) { echo intdiv ( intdiv ( $ m , lcmAll ( $ a ) / 2 ) + 1 , 2 ) ; } else { echo 0 ; } function divCount ( $ n ) { for ( $ i = 0 ; $ i < 100 ; $ i ++ ) { if ( $ n >> $ i & 1 == 1 ) { return $ i ; } } } function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function lcmAll ( $ array ) { $ lcm = $ array [ 0 ] ; for ( $ i = 1 ; $ i < count ( $ array ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ array [ $ i ] ) ; } $ lcm = min ( $ lcm , 10 ** 10 ) ; return $ lcm ; } function lcm ( $ a , $ b ) { return $ a / gcd ( $ a , $ b ) * $ b ; }
<?php [ $ A , $ B ] = fscanf ( STDIN , " %d%d " ) ; if ( $ A === $ B ) { echo " Draw " ; exit ; } if ( $ A === 1 || ( $ A > $ B && $ B !== 1 ) ) { echo " Alice " ; exit ; } else { echo " Bob " ; exit ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; $ sa = ( $ N - $ K ) ; if ( $ K == 1 ) { $ sa = 0 ; } echo ( $ sa ) . " \n " ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php # -a+k = b-k # -a-b = -2k # k = (a+b)/2 # 入力部 fscanf(STDIN, "%d %d", $a, $b); # 処理部 if ($a <= 5) { $r = 0; } elseif ($a <= 12) { $r = $b / 2; } else { $r = $b; } # 出力部 echo $r . "\n";
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ ball , $ person ) ; if ( $ person == 1 ) { echo 0 ; } else { echo $ ball - $ person ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; $ ans = $ x * $ x * $ x ; echo $ ans ; ?>
<?php $ a = fgets ( STDIN ) ; echo ( pow ( $ a , 3 ) ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ; ?>
<?php while ( $ input = trim ( fgets ( STDIN ) ) ) { echo array_sum ( str_split ( $ input ) ) . PHP_EOL ; }
<?php list ( $ n ) = ints ( ) ; $ ans = 1 ; while ( $ ans * 2 <= $ n ) $ ans *= 2 ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ ns = explode ( ' ' , $ stdin ) ; for ( $ i = 0 ; $ i < 1000 ; ++ $ i ) { if ( shuffle ( $ ns ) ) if ( $ ns [ 0 ] == 1 && $ ns [ 1 ] == 9 && $ ns [ 2 ] == 7 && $ ns [ 3 ] == 4 ) { echo " YES " ; exit ; } } echo " NO " ;
<?php while ( true ) { $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( ! $ s [ 0 ] ) break ; echo array_sum ( $ s ) . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) ; echo " \n " ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ I = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ r = null ; $ min = min ( $ I ) ; $ max = max ( $ I ) + 1 ; for ( ; $ min < $ max ; ++ $ min ) { $ c = 0 ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) { $ c += pow ( $ I [ $ i ] - $ min , 2 ) ; } if ( $ r == null || $ r > $ c ) $ r = $ c ; } echo $ r ;
<?php define ( ' N ' , 3 ) ; $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , N ) . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ input = array ( $ a , $ b , $ c ) ; $ result = false ; $ target = array ( 5 , 5 , 7 ) ; foreach ( $ input as $ data ) { $ index = array_search ( $ data , $ target ) ; if ( $ index === false ) { echo ' NO ' ; exit ; } unset ( $ target [ $ index ] ) ; } if ( empty ( $ target ) ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) * 2 ; $ h = floor ( $ n / 60 ) ; $ m = $ n % 60 ; echo $ h . " " . $ m . PHP_EOL ; ?>
<?php $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; for ( $ a [ 0 ] = 0 ; $ a [ 0 ] <= 100 ; $ a [ 0 ] ++ ) { $ b [ 0 ] = $ c [ 0 ] [ 0 ] - $ a [ 0 ] ; $ b [ 1 ] = $ c [ 0 ] [ 1 ] - $ a [ 0 ] ; $ b [ 2 ] = $ c [ 0 ] [ 2 ] - $ a [ 0 ] ; $ a [ 1 ] = $ c [ 1 ] [ 0 ] - $ b [ 0 ] ; $ a [ 2 ] = $ c [ 2 ] [ 0 ] - $ b [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ $ i ] [ $ j ] !== $ a [ $ i ] + $ b [ $ j ] ) continue 3 ; } } exit ( ' Yes ' ) ; } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php while ( 1 ) { $ a = trim ( fgets ( STDIN ) ) ; if ( $ a == 0 ) break ; $ num = str_split ( $ a ) ; echo array_sum ( $ num ) , PHP_EOL ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = $ input * $ input * $ input ; echo $ ans . " \n " ; ?>
<?php while ( $ stdin = fgets ( STDIN ) ) { $ line [ ] = trim ( $ stdin ) ; } foreach ( $ line as $ key => $ value ) { $ data [ ] = explode ( ' ' , $ value ) ; } foreach ( $ data as & $ line ) { $ line = array_map ( function ( $ val ) { return ( int ) $ val ; } , $ line ) ; } $ A = $ data [ 0 ] [ 0 ] ; $ B = $ data [ 0 ] [ 1 ] ; $ H = $ data [ 0 ] [ 2 ] ; $ M = $ data [ 0 ] [ 3 ] ; $ short = ( $ H * 60 + $ M ) * 0.5 ; $ long = $ M * 6 ; $ sin = sin ( deg2rad ( $ long - $ short ) ) ; $ cos = cos ( deg2rad ( $ long - $ short ) ) ; $ tan = tan ( deg2rad ( $ long - $ short ) ) ; $ alpha = $ A * $ cos ; $ height = sqrt ( $ A * $ A - $ alpha * $ alpha ) ; $ beta = $ B - $ alpha ; $ ans = sqrt ( $ height * $ height + $ beta * $ beta ) ; echo $ ans ;
<?php $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ b = ( int ) trim ( fgets ( STDIN ) ) ; $ c = ( int ) trim ( fgets ( STDIN ) ) ; $ d = ( int ) trim ( fgets ( STDIN ) ) ; $ e = ( int ) trim ( fgets ( STDIN ) ) ; $ ary = [ $ a , $ b , $ c , $ d , $ e ] ; $ cand = [ ] ; $ sum = 0 ; foreach ( $ ary as $ k => $ v ) { if ( $ v % 10 === 0 ) { $ sum += $ v ; } else { $ cand [ $ k ] = $ v % 10 ; } } asort ( $ cand ) ; $ first = true ; foreach ( $ cand as $ k => $ v ) { if ( $ first ) { $ first = false ; $ sum += $ ary [ $ k ] ; } else { $ sum += ( int ) ( ceil ( $ ary [ $ k ] / 10 ) * 10 ) ; } } echo $ sum ;
<?php define ( ' MOD ' , pow ( 10 , 9 ) + 7 ) ; define ( ' BIT ' , 60 ) ; $ x [ 0 ] = 1 ; for ( $ i = 1 ; $ i < BIT ; $ i ++ ) { $ x [ $ i ] = $ x [ $ i - 1 ] * 2 ; $ x [ $ i ] %= MOD ; } fscanf ( STDIN , " %d " , $ N ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ k [ 0 ] = array_pad ( array ( ) , BIT , 0 ) ; $ k [ 1 ] = array_pad ( array ( ) , BIT , 0 ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ s = strrev ( str_pad ( decbin ( $ a [ $ i ] ) , BIT , ' 0 ' , STR_PAD_LEFT ) ) ; for ( $ j = 0 ; $ j < BIT ; $ j ++ ) { $ k [ $ s [ $ j ] ] [ $ j ] ++ ; } } for ( $ i = 0 ; $ i < BIT ; $ i ++ ) { $ tmp = $ k [ 0 ] [ $ i ] * $ k [ 1 ] [ $ i ] ; $ tmp %= MOD ; $ tmp *= $ x [ $ i ] ; $ tmp %= MOD ; $ ans += $ tmp ; } $ ans %= MOD ; printf ( " %d " , $ ans ) ;
<?php fscanf ( STDIN , ' %d%d%d%d ' , $ A , $ B , $ C , $ D ) ; echo max ( $ A * $ B , $ C * $ D ) ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ input , 3 ) ; echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo ( $ a >= 13 ) ? $ b : ( ( $ a <= 5 ) ? 0 : $ b / 2 ) ; ?>
<?php fscanf ( STDIN , ' %d%d ' , $ k , $ s ) ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { $ c = $ s - $ i ; if ( $ c > $ k ) $ a += max ( 0 , 2 * $ k - $ c + 1 ) ; elseif ( $ c >= 0 ) $ a += $ c + 1 ; } echo $ a ;
<?php # 整数の入力 fscanf(STDIN,"%d %d %d",$a,$b,$c); $arrat = [5 => 0,7=>0]; if($a === 5 || $a === 7){ $arrat[$a] = $arrat[$a] + 1; } if($b === 5 || $b === 7){ $arrat[$b] = $arrat[$b] + 1; } if($a === 5 || $a === 7){ $arrat[$c] = $arrat[$c] + 1; } if($arrat[5] === 2 &&$arrat[7] === 1){ echo 'YES'; }else{ echo 'NO'; }
<?php $ input = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ Ki = $ input [ 0 ] ; $ S = $ input [ 1 ] ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ Ki ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ Ki ; $ j ++ ) { if ( ( $ i + $ j ) > $ S ) { $ k = 0 ; } else { $ k = $ S - $ i - $ j ; if ( $ k > $ Ki ) { $ k = $ Ki ; } } if ( ( $ i + $ j + $ k ) === $ S ) { $ cnt ++ ; } } } print $ cnt ;
<?php $ N = fgets ( STDIN ) ; $ line = fgets ( STDIN ) ; $ X = explode ( " " , $ line ) ; $ syu = round ( array_sum ( $ X ) / $ N ) ; $ tai = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ tai += ( $ X [ $ i ] - $ syu ) * ( $ X [ $ i ] - $ syu ) ; } echo $ tai . " \n " ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ X = explode ( " " , fgets ( STDIN ) ) ; $ X = array_map ( ' intval ' , $ X ) ; $ mean_ceil = ceil ( array_sum ( $ X ) / count ( $ X ) ) ; $ mean_floor = floor ( array_sum ( $ X ) / count ( $ X ) ) ; $ ans_1 = 0 ; $ ans_2 = 0 ; for ( $ i = 0 ; $ i < count ( $ X ) ; $ i ++ ) { $ ans_1 += pow ( $ X [ $ i ] - $ mean_ceil , 2 ) ; $ ans_2 += pow ( $ X [ $ i ] - $ mean_floor , 2 ) ; } echo min ( $ ans_1 , $ ans_2 ) ;
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; if ( $ a == $ b ) { echo ' Draw ' ; } elseif ( $ a == 1 ) { echo ' Alice ' ; } elseif ( $ b == 1 ) { echo ' Bob ' ; } elseif ( $ a > $ b ) { echo ' Alice ' ; } else { echo ' Bob ' ; }
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' ' ) { $ card = array_fill ( 1 , 13 , 0 ) ; foreach ( explode ( ' , ' , $ line ) as $ c ) { $ card [ ( int ) $ c ] ++ ; } $ card = array_filter ( $ card , function ( $ n ) { return $ n ; } ) ; $ pair = max ( $ card ) ; $ cnt = count ( $ card ) ; if ( $ pair === 4 ) { echo " four card \n " ; } elseif ( $ pair === 3 && $ cnt === 2 ) { echo " full house \n " ; } elseif ( $ cnt === 5 ) { $ min = min ( array_keys ( $ card ) ) ; $ check = 0 ; for ( $ i = $ min + 1 ; $ i < $ min + 5 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } if ( $ check !== 4 && $ min === 1 ) { $ check = 0 ; for ( $ i = 10 ; $ i <= 13 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } } echo $ check === 4 ? " straight \n " : " null \n " ; } elseif ( $ pair === 3 ) { echo " three card \n " ; } elseif ( $ pair === 2 ) { echo $ cnt === 3 ? " two pair \n " : " one pair \n " ; } else { echo " null \n " ; } }
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; if ( $ e - $ a > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ alice = [ ' alice ' => $ a ] ; $ bob = [ ' bob ' => $ b ] ; if ( $ alice [ ' alice ' ] === $ bob [ ' bob ' ] ) { echo ' Draw ' ; } elseif ( $ bob [ ' bob ' ] == 1 ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] == 1 ) { echo ' Alice ' ; } elseif ( $ alice [ ' alice ' ] < $ bob [ ' bob ' ] ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] > $ bob [ ' bob ' ] ) { echo ' Alice ' ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ angvelh = ( 360 * ( pi ( ) / 180 ) ) / ( 12 * 60 ) ; $ angvelm = ( 360 * ( pi ( ) / 180 ) ) / 60 ; $ angh = $ angvelh * ( $ h * 60 + $ m ) ; $ angm = $ angvelm * $ m ; echo sqrt ( pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( abs ( $ angh - $ angm ) ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a <= 5 ) { echo 0 ; } else if ( $ a <= 12 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ count_list = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ count = 0 ; $ q = $ i ; while ( $ q > 0 && $ q % 2 == 0 ) { $ p = $ q / 2 ; $ count ++ ; $ q = $ p ; } $ count_list [ $ i ] = $ count ; } arsort ( $ count_list ) ; echo key ( $ count_list ) . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( $ s - $ i - $ j <= $ k && $ s - $ i - $ j >= 0 ) $ result ++ ; } } printf ( " %d \n " , $ result ) ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ a = 1 ; $ a <= 3500 ; $ a ++ ) { for ( $ b = 1 ; $ b <= 3500 ; $ b ++ ) { $ c1 = $ n * $ a * $ b ; $ c2 = 4 * $ a * $ b - $ n * ( $ a + $ b ) ; if ( $ c2 > 0 && $ c1 % $ c2 == 0 ) { printf ( " %d %d %d \n " , $ a , $ b , $ c1 / $ c2 ) ; exit ; } } }
<?php class out { public static function println ( $ str = " " ) { echo ( $ str ) . PHP_EOL ; } } $ num = fgets ( STDIN ) ; $ ans = pow ( $ num , 3 ) ; echo out :: println ( $ ans ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ V ) ; fscanf ( STDIN , " %d %d " , $ B , $ W ) ; fscanf ( STDIN , " %d " , $ T ) ; echo ( ( $ W >= $ V ) || ( $ T < abs ( $ A - $ B ) / ( $ V - $ W ) ) ) ? " NO " : " YES " ;
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += $ n ; echo $ s , PHP_EOL ; }
<?php list ( $ a , $ b ) = ints ( ) ; echo ( int ) ceil ( ( $ a + $ b ) / 2 ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ array = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ five_count = 0 ; $ seven_count = 0 ; for ( $ i = 0 ; $ i < count ( $ array ) ; $ i ++ ) { if ( ( int ) $ array [ $ i ] === 5 ) { $ five_count ++ ; } elseif ( ( int ) $ array [ $ i ] === 7 ) { $ seven_count ++ ; } } if ( $ five_count === 2 && $ seven_count === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php while ( true ) { fscanf ( STDIN , " %d " , $ a ) ; if ( feof ( STDIN ) ) break ; echo $ a * $ a * $ a , PHP_EOL ; }
<?php $ a = ints ( ) ; echo array_sum ( $ a ) === 17 && max ( $ a ) === 7 && min ( $ a ) === 5 ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; if ( $ s [ 0 ] >= 13 ) { $ ans = $ s [ 1 ] ; } elseif ( $ s [ 0 ] <= 12 && $ s [ 0 ] >= 6 ) { $ ans = $ s [ 1 ] / 2 ; } elseif ( $ s [ 0 ] <= 5 ) { $ ans = 0 ; } echo $ ans ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ array_pos = explode ( " " , fgets ( STDIN ) ) ; $ sum_sqr = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum_sqr = $ sum_sqr + $ array_pos [ $ i ] ; } $ p1 = floor ( $ sum_sqr / $ n ) ; $ p2 = $ p1 + 1 ; $ cost1 = 0 ; $ cost2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ cost1 = $ cost1 + pow ( $ array_pos [ $ i ] - $ p1 , 2 ) ; $ cost2 = $ cost2 + pow ( $ array_pos [ $ i ] - $ p2 , 2 ) ; } echo $ cost1 > $ cost2 ? $ cost2 : $ cost1 ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' ' , $ stdin ) ; $ alice = $ array [ 0 ] ; $ bob = $ array [ 1 ] ; if ( $ alice == $ bob ) { echo " Draw " ; return ; } if ( $ alice == 1 ) { echo " Alice " ; return ; } if ( $ bob == 1 ) { echo " Bob " ; return ; } if ( $ alice < $ bob ) { echo " Bob " ; return ; } else { echo " Alice " ; return ; }
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ x [ $ i ] = intval ( trim ( fgets ( STDIN ) ) ) ; } $ k = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( $ x [ $ j ] - $ x [ $ i ] > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php fscanf ( STDIN , " %d " , $ A ) ; fscanf ( STDIN , " %d " , $ B ) ; fscanf ( STDIN , " %d " , $ C ) ; fscanf ( STDIN , " %d " , $ D ) ; fscanf ( STDIN , " %d " , $ E ) ; $ input_arr = array ( $ A , $ B , $ C , $ D , $ E ) ; $ flag = True ; foreach ( $ input_arr as $ value ) { if ( $ value % 10 != 0 ) { $ flag = False ; } } if ( $ flag ) { echo array_sum ( $ input_arr ) ; die ( ) ; } $ minimum = 9 ; $ ans = 0 ; foreach ( $ input_arr as $ value ) { if ( $ minimum % 10 > ( $ value % 10 ) ) { if ( ( $ value % 10 ) > 0 ) { $ minimum = $ value ; } } } #echo $minimum; foreach($input_arr as $value){ $ans += ceil($value / 10) * 10; } $ans -= ceil($minimum / 10) * 10; $ans += $minimum; echo $ans;
<?php list ( $ a , $ b , $ c , $ d ) = ints ( ) ; echo max ( $ a * $ b , $ c * $ d ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d %d " , $ n , $ m ) ; define ( ' MOD ' , pow ( 10 , 9 ) + 7 ) ; $ ans = 0 ; $ xx = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ yy = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ bx = array ( ) ; $ by = array ( ) ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ bx [ $ i ] = ( $ i + 1 ) * ( $ n - $ i - 1 ) ; } for ( $ i = 0 ; $ i < $ m - 1 ; $ i ++ ) { $ by [ $ i ] = ( $ i + 1 ) * ( $ m - $ i - 1 ) ; } for ( $ x = 0 ; $ x < $ n - 1 ; $ x ++ ) { $ dx = $ xx [ $ x + 1 ] - $ xx [ $ x ] ; $ total_x += $ bx [ $ x ] * $ dx ; $ total_x %= MOD ; } for ( $ y = 0 ; $ y < $ m - 1 ; $ y ++ ) { $ dy = $ yy [ $ y + 1 ] - $ yy [ $ y ] ; $ total_y += $ by [ $ y ] * $ dy ; $ total_y %= MOD ; } $ ans = $ total_x * $ total_y % MOD ; echo $ ans . PHP_EOL ;
<?php $ a = fgets ( STDIN ) ; $ aaa = $ a * $ a * $ a ; echo $ aaa ; ?>
<?php function dfs ( $ first , $ last ) { if ( count ( $ last ) === 0 ) { return [ $ first ] ; } $ res = [ ] ; foreach ( $ last as $ key => $ val ) { $ next_f = $ first ; $ next_l = $ last ; $ next_f [ ] = $ val ; array_splice ( $ next_l , $ key , 1 ) ; $ res = array_merge ( $ res , dfs ( $ next_f , $ next_l ) ) ; } return $ res ; } function next_permutation ( $ start , $ end ) { return dfs ( [ ] , range ( $ start , $ end ) ) ; } fscanf ( STDIN , " %d " , $ n ) ; $ x_arr = [ ] ; $ y_arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { fscanf ( STDIN , " %d %d " , $ x , $ y ) ; $ x_arr [ ] = $ x ; $ y_arr [ ] = $ y ; } $ routes = next_permutation ( 1 , $ n ) ; $ sum = 0 ; foreach ( $ routes as $ route ) { for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ sum += sqrt ( pow ( $ x_arr [ $ route [ $ i ] - 1 ] - $ x_arr [ $ route [ $ i + 1 ] - 1 ] , 2 ) + pow ( $ y_arr [ $ route [ $ i ] - 1 ] - $ y_arr [ $ route [ $ i + 1 ] - 1 ] , 2 ) ) ; } } $ tmp = 1 ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) { $ tmp *= $ i ; } echo $ sum / $ tmp ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ factor = array_values ( array_unique ( $ s ) ) ; $ ans = count ( $ factor ) ; if ( $ ans == 4 ) { print ( " Four \n " ) ; } else { print ( " Three \n " ) ; } ?>
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ arg1 = 6 * $ m ; $ arg2 = ( 30 * $ h ) + ( 0.5 * $ m ) ; if ( $ arg1 != $ arg2 ) { $ arg = abs ( $ arg1 - $ arg2 ) ; if ( $ arg > 180 ) { $ arg = 360 - $ arg ; ; } else if ( $ arg == 180 ) { echo $ a + $ b ; exit ; } $ dis2 = ( $ a * $ a ) + ( $ b * $ b ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ arg ) ) ) ; echo sqrt ( $ dis2 ) ; } else { echo abs ( $ a - $ b ) ; }
<?php $ s = fgets ( STDIN ) ; function check ( $ input ) { $ s = explode ( " " , $ input ) ; sort ( $ s ) ; if ( intval ( $ s [ 0 ] ) === 5 && intval ( $ s [ 1 ] ) === 5 && intval ( $ s [ 2 ] ) === 7 ) { return true ; } else { return false ; } } if ( check ( $ s ) ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d%d%d " , $ a , $ b , $ c ) ; if ( $ a + $ b + $ c == 17 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php $ num = fgets ( STDIN ) ; echo pow ( $ num , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ v ) ; fscanf ( STDIN , " %d %d " , $ b , $ w ) ; fscanf ( STDIN , " %d " , $ t ) ; if ( $ b < 0 ) { $ bb = - 1 * $ t * $ w + $ b ; $ aa = - 1 * $ t * $ v + $ a ; } else { $ bb = $ t * $ w + $ b ; $ aa = $ t * $ v + $ a ; } if ( abs ( $ aa ) - abs ( $ bb ) >= 0 ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ point1 = abs ( $ a - $ b ) + abs ( $ b - $ c ) ; $ point2 = abs ( $ a - $ c ) + abs ( $ b - $ c ) ; $ point3 = abs ( $ a - $ b ) + abs ( $ a - $ c ) ; echo min ( $ point1 , $ point2 , $ point3 ) . PHP_EOL ;
<?php list ( $ H1 , $ M1 , $ H2 , $ M2 , $ K ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ wu = 0 ; if ( $ H1 === $ H2 ) { $ wu = $ M2 - $ M1 ; } else { $ wu = ( $ H2 - $ H1 - 1 ) * 60 ; $ wu += 60 - $ M1 ; $ wu += $ M2 ; } echo $ wu - $ K ; ?>
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $K = $key->A[0]; $S = $key->A[1]; $res = array(); $ret = 0; for($i=0;$i<=$K;$i++) { for($j=0;$j<=$K;$j++) { $chk = $S-$i-$j; if ($chk >= 0 && $chk <= $K) $ret++; } } printf("%d\n",$ret);
<?php $ line = fgets ( STDIN ) ; $ data = explode ( ' ' , $ line ) ; $ a = $ data [ 0 ] ; $ b = $ data [ 1 ] ; print ceil ( ( $ a + $ b ) / 2 ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ a + $ b + $ c == 17 && $ a * $ b * $ c == 175 ) { echo ( " YES " ) ; } else { echo ( " NO " ) ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; if ( $ K == 1 ) { echo " 0 \n " ; return ; } echo ( $ N - $ K ) . " \n " ;
<?php while ( true ) { $ str = trim ( fgets ( STDIN ) ) ; if ( $ str == 0 ) { return ; } $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ sum += $ str [ $ i ] ; } print ( $ sum . " \n " ) ; } ?>
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ ans = ceil ( ( $ a + $ b ) / 2 ) ; echo $ ans ; ?>
<?php $ times = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ times [ ] = trim ( fgets ( STDIN ) ) ; } $ allOnePlaces = [ ] ; $ onesPlaces = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ allOnePlaces [ ] = $ times [ $ i ] % 10 ; if ( $ times [ $ i ] % 10 === 0 ) { continue ; } $ onesPlaces [ ] = $ times [ $ i ] % 10 ; } $ minOnesPlaces = min ( $ onesPlaces ) ; $ minOnesPlacesTime = array_keys ( $ allOnePlaces , $ minOnesPlaces , true ) ; $ result = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ minOnesPlacesTime [ 0 ] ) { $ result += $ times [ $ i ] ; continue ; } $ result += ceil ( $ times [ $ i ] / 10 ) * 10 ; } echo $ result , PHP_EOL ;
<?php $ input = file_get_contents ( ' php: $inarr = explode("\n", $input); $n = $inarr[0]; $xList = explode(" ", $inarr[1]); $xList = array_map( ' intval ' , $ xList ) ; $ min = PHP_INT_MAX ; for ( $ party = min ( $ xList ) ; $ party <= max ( $ xList ) ; $ party ++ ) { $ total_hp = 0 ; foreach ( $ xList as $ x ) { $ hp = ( $ x - $ party ) * ( $ x - $ party ) ; $ total_hp = $ total_hp + $ hp ; } if ( $ total_hp < $ min ) { $ min = $ total_hp ; } } echo $ min ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; $ y = $ x * $ x * $ x ; echo $ y . " \n " ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ p , $ y ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ data [ ] = [ $ p , $ y ] ; $ map [ $ p ] [ $ i ] = $ y ; } foreach ( $ map as $ p => & $ m ) { sort ( $ m ) ; $ map2 [ $ p ] = array_flip ( $ m ) ; } foreach ( $ data as $ row ) { printf ( " %06d%06d \n " , $ row [ 0 ] , 1 + $ map2 [ $ row [ 0 ] ] [ $ row [ 1 ] ] ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = 1 ; for ( $ i = 1 ; $ a <= $ n / 2 ; $ i ++ ) { $ a = $ a * 2 ; } echo pow ( 2 , $ i - 1 ) ; ?>
<?php fscanf ( STDIN , ' %s %s %s ' , $ s [ 0 ] , $ s [ 1 ] , $ s [ 2 ] ) ; $ five_flag = 0 ; $ seven_flag = 0 ; foreach ( $ s as $ value ) { if ( $ value === " 5 " ) $ five_flag ++ ; if ( $ value === " 7 " ) $ seven_flag ++ ; } if ( $ seven_flag === 1 && $ five_flag === 2 ) echo ' YES ' ; else echo ' NO ' ; ?>
<?php $ input = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ n = ( int ) $ input [ 0 ] ; $ m = ( int ) $ input [ 1 ] ; $ args = [ ] ; $ count = 0 ; while ( true ) { $ input = trim ( fgets ( STDIN ) ) ; $ input = explode ( " " , $ input ) ; $ args [ ( int ) $ input [ 0 ] ] [ $ count ] = ( int ) $ input [ 1 ] ; ++ $ count ; if ( $ count >= $ m ) { break ; } } $ result = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( ! empty ( $ args [ $ i ] ) ) { $ p = $ args [ $ i ] ; asort ( $ p ) ; $ city = 1 ; foreach ( $ p as $ idx => $ year ) { $ result [ $ idx ] = str_pad ( ( string ) $ i , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( ( string ) $ city , 6 , " 0 " , STR_PAD_LEFT ) ; ++ $ city ; } } } for ( $ k = 0 ; $ k < $ m ; $ k ++ ) { echo $ result [ $ k ] . " \n " ; }
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == ' 7 ' && $ b == ' 5 ' && $ c == ' 5 ' ) { echo " YES " ; } else if ( $ a == ' 5 ' && $ b == ' 7 ' && $ c == ' 5 ' ) { echo " YES " ; } else if ( $ a == ' 5 ' && $ b == ' 5 ' && $ c == ' 7 ' ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d%d%d%d " , $ A , $ B , $ H , $ M ) ; $ argH = ( $ H / 12 + $ M / 12 / 60 ) * 2 * pi ( ) ; $ argM = $ M / 60 * 2 * pi ( ) ; $ dx = $ A * cos ( $ argH ) - $ B * cos ( $ argM ) ; $ dy = $ A * sin ( $ argH ) - $ B * sin ( $ argM ) ; echo ( $ dx ** 2 + $ dy ** 2 ) ** 0.5 ;
<?php $ stdin = file_get_contents ( ' php: print($stdin*$stdin*$stdin); ?>
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php $ n = readline ( ) ; $ sor = readline ( ) ; $ ex = explode ( " " , $ sor ) ; $ avg = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ ex [ $ i ] ; } $ avg = $ sum / $ n ; $ fel = ceil ( $ avg ) ; $ le = floor ( $ avg ) ; $ pFel = 0 ; $ pLe = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ pFel = $ pFel + ( ( $ ex [ $ i ] - $ fel ) * ( $ ex [ $ i ] - $ fel ) ) ; $ pLe = $ pLe + ( ( $ ex [ $ i ] - $ le ) * ( $ ex [ $ i ] - $ le ) ) ; } if ( $ pLe < $ pFel ) { echo $ pLe ; } else { echo $ pFel ; }
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ d = $ c * ( $ n - $ c ) % $ mod ; $ d *= ( 1 << $ i ) % $ mod ; $ sum += $ d % $ mod ; $ sum %= $ mod ; } echo $ sum ;
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php # 入力 list($n, $d) = array_map('intval', explode(' ', trim(fgets(STDIN)))); for ($i = 0; $i < $n; $i++) { $x[] = array_map('intval', explode(' ', trim(fgets(STDIN)))); } $cnt = 0; for ($i = 0; $i < $n; $i++) { for ($j = $i + 1; $j < $n; $j++) { if (is_decimal(distance($x[$i], $x[$j]))) { $cnt++; } } } echo $cnt.PHP_EOL; function distance($yi, $zi) { $sum = 0; foreach ($yi as $j => $v) { $sum += ($yi[$j] - $zi[$j]) ** 2; } return sqrt($sum); } function is_decimal($v){ return (string)(int)$v === (string)$v; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; if ( $ n === 1 ) echo 1 ; else if ( $ n < 4 ) echo 2 ; else if ( $ n < 8 ) echo 4 ; else if ( $ n < 16 ) echo 8 ; else if ( $ n < 32 ) echo 16 ; else if ( $ n < 64 ) echo 32 ; else echo 64 ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ w = 0 ; $ x = 0 ; $ y = 0 ; $ z = 0 ; foreach ( $ a as $ value ) { if ( $ value == 1 ) { $ w = 1 ; } elseif ( $ value == 4 ) { $ x = 1 ; } elseif ( $ value == 7 ) { $ y = 1 ; } elseif ( $ value == 9 ) { $ z = 1 ; } } if ( $ w + $ x + $ y + $ z == 4 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; $ x = 0 ; $ m = 1 ; for ( $ n = 1 ; $ n <= $ a ; $ n ++ ) { $ d = $ n ; $ i = 0 ; while ( ( $ d % 2 ) == 0 ) { $ i ++ ; if ( $ i > $ x ) { $ x = $ i ; $ m = $ n ; } $ d = intval ( $ d / 2 ) ; } } echo $ m ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ k ; ++ $ i ) { if ( ( $ s - $ i ) / 2 > $ k ) { continue ; } else { $ start = ( $ s - $ i - $ k ) < 0 ? 0 : ( $ s - $ i - $ k ) ; for ( $ j = $ start ; $ j <= $ k ; $ j ++ ) { if ( ( $ i + $ j ) > $ s ) { break ; } else { $ count ++ ; } } } } echo $ count ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ p1 = abs ( $ b - $ a ) + abs ( $ c - $ b ) ; $ p2 = abs ( $ c - $ a ) + abs ( $ b - $ c ) ; $ p3 = abs ( $ a - $ b ) + abs ( $ c - $ a ) ; $ p4 = abs ( $ c - $ b ) + abs ( $ a - $ c ) ; $ p5 = abs ( $ a - $ c ) + abs ( $ b - $ a ) ; $ p6 = abs ( $ b - $ c ) + abs ( $ a - $ b ) ; echo min ( $ p1 , $ p2 , $ p3 , $ p4 , $ p5 , $ p6 ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ x_list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ flag = true ; $ sum_distance_list = array ( ) ; $ sum_distance = 0 ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ sum_distance += ( $ x_list [ $ j ] - $ i ) ** 2 ; } $ sum_distance_list [ ] = $ sum_distance ; $ sum_distance = 0 ; } echo min ( $ sum_distance_list ) . " \n " ;
<?php $ i = fgets ( STDIN ) ; print pow ( $ i , 3 ) ; print " \n " ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ c *= $ n - $ c ; $ c %= $ mod ; $ c *= ( 1 << $ i ) % $ mod ; $ c %= $ mod ; $ sum += $ c ; $ sum %= $ mod ; } echo $ sum ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab > $ cd ) { echo $ ab ; } else { echo $ cd ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ As = explode ( ' ' , $ input ) ; rsort ( $ As ) ; $ cost1 = abs ( $ As [ 1 ] - $ As [ 0 ] ) ; $ cost1 += abs ( $ As [ 2 ] - $ As [ 1 ] ) ; echo $ cost1 ;
<?php fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ ] , $ y [ ] ) ; } $ d = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ d = $ d * $ i ; } $ pair = 0 ; for ( $ i = 1 ; $ i <= $ n - 1 ; $ i ++ ) { $ pair = $ pair + $ i ; } $ move = $ d * ( $ n - 1 ) / $ pair ; $ totalLength = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ totalLength += $ pairLength = sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + ( pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ) ; } } $ totalLength = $ totalLength * $ move ; $ averageLength = $ totalLength / $ d ; echo $ averageLength ; ?>
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ line = trim ( fgets ( STDIN ) ) ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ map [ $ i ] [ $ j ] = $ line [ $ j ] ; } } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ line = trim ( fgets ( STDIN ) ) ; for ( $ j = 0 ; $ j < $ m ; $ j ++ ) { $ map2 [ $ i ] [ $ j ] = $ line [ $ j ] ; } } for ( $ X = 0 ; $ X <= $ n - $ m ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ n - $ m ; $ Y ++ ) { $ flag = true ; for ( $ x = 0 ; $ x < $ m ; $ x ++ ) { for ( $ y = 0 ; $ y < $ m ; $ y ++ ) { if ( $ map [ $ X + $ x ] [ $ Y + $ y ] != $ map2 [ $ x ] [ $ y ] ) { $ flag = false ; } } } if ( $ flag == true ) { echo " Yes " ; exit ; } } } echo " No " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ e - $ a > $ k ) { print ( " :( \n " ) ; } else { print ( " Yay! \n " ) ; } ?>
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %d %d %d " , $ A , $ B , $ C ) ; if ( $ A + $ B + $ C === 17 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ data = fgets ( STDIN ) ; if ( strpos ( $ data , ' 5 ' ) === false || strpos ( $ data , ' 7 ' ) === false ) { echo " NO " ; return ; } $ data = count_chars ( $ data , 1 ) ; if ( $ data [ ' 53 ' ] == 2 && $ data [ ' 55 ' ] == 1 ) echo " YES " ; else echo " NO " ; ?>
<?php list ( $ k , $ s ) = explode ( " " , fgets ( STDIN ) ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( 0 <= $ z && $ z <= $ k ) { $ cnt ++ ; } } } echo $ cnt ; ?>
<?php $ number = trim ( fgets ( STDIN ) ) ; $ maxNumber = 1 ; while ( $ number > $ maxNumber ) { $ maxNumber *= 2 ; } if ( $ number < $ maxNumber ) { $ maxNumber /= 2 ; } echo $ maxNumber ; ?>
<?php while ( false !== ( $ line = fgets ( STDIN ) ) ) { $ line = trim ( $ line ) ; if ( ' 0 ' === $ line ) { break ; } $ nums = preg_split ( ' $sum = array_reduce($nums, function ($carry, $item) { return $carry + intval($item); }, 0); echo "$sum\n"; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ n_arr = array ( ) ; $ n_arr = explode ( " " , fgets ( STDIN ) ) ; $ ans = 0 ; $ CurMin = INF ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ CurMin = min ( $ CurMin , $ n_arr [ $ i ] ) ; if ( $ CurMin == $ n_arr [ $ i ] ) { $ ans ++ ; } } echo $ ans ; ?>
<?php define ( ' N ' , 3 ) ; $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , N ) . " \n " ;
<?php $ s = trim ( fgets ( STDIN ) ) ; $ i = intVal ( $ s ) ; echo pow ( $ i , 3 ) . PHP_EOL ; exit ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ min = PHP_INT_MAX ; for ( $ i = 1 ; $ i <= 100 ; ++ $ i ) { $ sum = 0 ; foreach ( $ x_arr as $ x ) { $ sum += pow ( $ x - $ i , 2 ) ; } if ( $ sum < $ min ) { $ min = $ sum ; } } echo $ min ;
<?php $ line = readline ( ) ; readline_add_history ( $ line ) ; $ x = intval ( $ line ) ; $ x = $ x * $ x * $ x ; echo $ x ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo $ stdin * $ stdin * $ stdin . " \n " ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ;
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 double := 0 triple := 0 for x := 0 ; x <= k ; x ++ { for y := x ; y <= k ; y ++ { for z := y ; z <= k ; z ++ { if x + y + z == s { count ++ if x == y && y == z { triple ++ } else if x == y || y == z || z == x { double ++ } } } } } count = ( count - ( double + triple ) ) * 6 + double * 3 + triple fmt . Println ( count ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans <= n { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) n := 1 var m int for i := 2 ; i <= N ; i ++ { for j := 1 ; ; j ++ { if i % ( pow ( 2 , j ) ) != 0 { if j > m { n , m = i , j - 1 } break } } } fmt . Println ( n ) } func pow ( n int , p int ) int { r := n for i := 1 ; i < p ; i ++ { r = r * n } return r }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if b - a > k { fmt . Println ( " " ) } else if c - a > k { fmt . Println ( " " ) } else if d - a > k { fmt . Println ( " " ) } else if e - a > k { fmt . Println ( " " ) } else if c - b > k { fmt . Println ( " " ) } else if d - b > k { fmt . Println ( " " ) } else if e - b > k { fmt . Println ( " " ) } else if d - c > k { fmt . Println ( " " ) } else if e - c > k { fmt . Println ( " " ) } else if e - d > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " YES " " NO "
package main import ( " " " fmt " " os " " math " " % v % v % v % v \n " , & a , & b , & h , & m ) x : = float64 ( 360 ) / float64 ( 12 * 60 ) * float64 ( h * 60 + m ) y := float64 ( 360 / 60 * m ) delta := math . Abs ( x - y ) degrees := delta if delta == 180 { printf ( " \n " , a + b ) return } else if delta > 180 { degrees = 360 - delta } ans := math . Sqrt ( math . Pow ( float64 ( a ) , 2 ) + math . Pow ( float64 ( b ) , 2 ) - float64 ( 2 ) * ( float64 ( a ) * float64 ( b ) * math . Cos ( degrees * math . Pi / 180 ) ) ) printf ( " \n " , ans ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { pi := p [ i ] if pi <= min { ans + + } if pi < min { min = pi } } fmt . Println ( ans ) }
package main import " " import " " func main ( ) { var A , B , H , M int fmt . Scanf ( " % d % d % d % d "
package main import ( " " " os " " strconv " " strings " " bufio " " "
package main import ( " " " sort " " NO " " YES "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 0 for _ , n := range [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 } { if n <= N { ans = n } } fmt . Println ( ans ) }
package main import ( " " " sort " " NO " " YES "
package main import ( " " " fmt " " io " " log " " os " " strconv " " Yes " " No " " Scan failed " " Scan failed "
package main import " " func main ( ) { a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } var k int fmt . Scan ( & k ) for i := 0 ; i < 4 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { if v := a [ j ] - a [ i ] ; v > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ar := make ( [ ] int , 11 ) ar [ a ] + + ar [ b ] + + ar [ c ] + + if ar [ 5 ] == 2 && ar [ 7 ] == 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c int five := 0 seven := 0 fmt . Scanf ( " % d " " % d " " % d " " NO " if five == 2 && seven == 1 { ans = " " } fmt . Printf ( " " , ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { tmp := p [ i ] if tmp <= min { ans + + } if tmp < min { min = tmp } } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " sort " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " os " " strconv " " sort " " fmt " " failed scan string " " failed scan int "
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " scan error " " text to int error "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func intsMax : zero length slice " " func intsMaxIdx : zero length slice " " func intsMin : zero length slice " " func intsMinIdx : zero length slice " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " ) var a , b , c int func main ( ) { fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 7 ] == 1 && m [ 5 ] == 2 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ret := k < e - a if ret { fmt . Println ( " : ( " ) } else { fmt . Println ( " Yay ! " ) } }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Println ( check ( a , b , c ) ) } func check ( a , b , c int ) string { if a + b + c != 17 { return " " } else { if is7or5 ( a ) && is7or5 ( b ) && is7or5 ( c ) { return " " } else { return " " } } } func is7or5 ( i int ) bool { return ( i == 7 ) || ( i == 5 ) }
package main import ( " " " fmt " " io " " math " " os " " sort " " strconv " " strings " \n
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { m := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & m [ i ] ) } var k int fmt . Scan ( & k ) if m [ 4 ] - m [ 0 ] <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func abs ( n int ) int { if n < 0 { return - n } return n } func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Sort ( sort . Reverse ( sort . IntSlice ( a ) ) ) fmt . Println ( abs ( a [ 1 ] - a [ 0 ] ) + abs ( a [ 2 ] - a [ 1 ] ) ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) a := make ( [ ] int , N + 1 ) i := 1 maxn := 1 for ; i <= N ; i ++ { n := i for { if n % 2 == 1 { break } else { a [ i ] + + n / = 2 if a [ i ] > a [ maxn ] { maxn = i } } } } fmt . Println ( maxn ) }
package main import ( " " " fmt " " os " " strconv " " strings " " Three " " Four " " scan string failed " " scan string failed " " "
package main import " " import " " func main ( ) { var a , b , h , m int fmt . Scanf ( " % d % d % d % d "
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) HH := H * 30.0 + M * 0.5 MM := M * 6.0 rad := ( max ( HH , MM ) - min ( HH , MM ) ) * math . Pi / 180.0 ans := math . Sqrt ( math . Pow ( A , 2 ) + math . Pow ( B , 2 ) - 2 * A * B * math . Cos ( rad ) ) fmt . Println ( ans ) } func max ( a , b float64 ) float64 { if a < b { return b } return a } func min ( a , b float64 ) float64 { if a < b { return a } return b }
package main import " " import " " func main ( ) { var A , B , H , M float64 var ans float64 ; var kakudo float64 ; fmt . Scan ( & A , & B , & H , & M ) ; if H * 30 + M * 0.5 - M * 6 < 180 { kakudo = H * 30 + M * 0.5 - M * 6 ; } else { kakudo = 360 - ( H * 30 + M * 0.5 - M * 6 ) ; } kakudo = kakudo / 180 * math . Pi ; kakudo = math . Cos ( kakudo ) ; ans = ( A * A ) + ( B * B ) - ( 2 * A * B * kakudo ) ; fmt . Println ( math . Sqrt ( ans ) ) ; }
package main import ( " " " io " " os " " strconv " " infinity "
package main import ( " " " strings " " % s % s % s " " 5 " ) = = 2 && strings . Count ( abc , " " ) == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scanf ( " % d % d % d "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) hDeg := h * 30 + m * 0.5 mDeg := m * 6 ang := math . Abs ( hDeg - mDeg ) fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( ang * math . Pi / 180 ) ) ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r , fm t . printl ( r ter , "YES") }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a * b * c == 5 * 7 * 5 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " % d "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { if 0 <= s - i - j && s - i - j <= k { ans ++ } } } fmt . Println ( ans ) }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " debug " " . / test / sample - 2.i n " " Error : There is no testfile . "
package main import ( " " " math " " % d % d % d % d "
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) P = make ( [ ] int , N ) for i := range P { fmt . Scan ( & P [ i ] ) } min := N + 100 ans := 0 for i := range P { if min > P [ i ] { ans + + min = P [ i ] } } fmt . Println ( ans ) }
package main import ( " " " fmt " " log " " math " " os " " sort " " strconv " " YES " " NO "
package main import . " " import . " " func main ( ) { var n int var l [ ] int l = [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 } Scan ( & n ) for i := 0 ; i < 7 ; i ++ { if l [ i ] <= n && n < l [ i + 1 ] { Println ( l [ i ] ) Exit ( 0 ) } } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) count := 0 pow := 1 for pow << 1 <= n { count ++ pow = pow << 1 } fmt . Println ( pow ) }
package main import ( " " " sort " " Yay ! " } return " " }
package main import " " func main ( ) { var i int ; var num5 , num7 int ; num5 = 2 ; num7 = 1 ; for a := 0 ; a < 3 ; a ++ { fmt . Scan ( & i ) ; if ( i == 5 ) { num5 -- ; } else if ( i == 7 ) { num7 -- ; } else { continue ; } } if ( num5 == 0 && num7 == 0 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d \n " , ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " os " " YES " " NO " " % d % d % d "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " sort " " strings " " : ( " " Yay ! " " " " "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " \t \t There is a FALSE not to want . " " \t \t Error : Failed to convert text to int , " ) } return value } func IntArray ( s * bufio . Scanner , size int ) [ ] int { deepArray := make ( [ ] int , size ) for i := range deepArray { deepArray [ i ] = Int ( s ) } return deepArray } func GraphSetByEdge ( s * bufio . Scanner , v int ) [ ] [ ] int { g := make ( [ ] [ ] int , v ) for i := range g { g [ i ] = make ( [ ] int , 0 ) } for xxNonUsedInLoopI := 0 ; xxNonUsedInLoopI < v - 1 ; xxNonUsedInLoopI ++ { a , b := Int ( s ) - 1 , Int ( s ) - 1 g [ a ] = append ( g [ a ] , b ) g [ b ] = append ( g [ b ] , a ) } return g }
package main import ( " " " " ) func main ( ) { tasks := make ( [ ] int , 3 , 3 ) fmt . Scan ( & tasks [ 0 ] , & tasks [ 1 ] , & tasks [ 2 ] ) sort . Ints ( tasks ) answer := ( tasks [ 2 ] - tasks [ 1 ] ) + ( tasks [ 1 ] - tasks [ 0 ] ) fmt . Println ( answer ) }
package main import " " func main ( ) { var K , S , cnt int fmt . Scanf ( " % d % d "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " var C [ ] [ ] int func main ( ) { C = make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { C [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scanf ( " " , & C [ i ] [ j ] ) } } ans := true for i := 0 ; i < 2 ; i ++ { for j := 0 ; j < 2 ; j ++ { ans = ans && ( C [ i ] [ j ] - C [ i + 1 ] [ j ] + C [ i + 1 ] [ j + 1 ] == C [ i ] [ j + 1 ] ) } } if ans { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) val := [ ] int { a , b , c } sort . Sort ( sort . IntSlice ( val ) ) fmt . Println ( val [ 2 ] - val [ 0 ] ) }
package main import ( " " ) func abs ( n int ) int { if n < 0 { return - n } return n } func checkGrid ( g [ ] [ ] int , a , b [ ] int ) bool { for i , ai := range a { for j , bi := range b { if g [ i ] [ j ] != ai + bi { return false } } } return true } func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { r := make ( [ ] int , 3 ) fmt . Scanf ( " " , & r [ 0 ] , & r [ 1 ] , & r [ 2 ] ) c [ i ] = r } for a1 := 0 ; a1 <= 100 ; a1 ++ { for a2 := 0 ; a2 <= 100 ; a2 ++ { for a3 := 0 ; a3 <= 100 ; a3 ++ { b1 := abs ( a1 - c [ 0 ] [ 0 ] ) b2 := abs ( a2 - c [ 1 ] [ 1 ] ) b3 := abs ( a3 - c [ 2 ] [ 2 ] ) a := [ ] int { a1 , a2 , a3 } b := [ ] int { b1 , b2 , b3 } if checkGrid ( c , a , b ) { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .20 f " " % .20 f " " % .20 f " " \n " ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { str := getStdin ( ) rtn , _ := strconv . Atoi ( str ) return rtn } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " fmt " " os " " reflect " " strconv " " Yes " " No " " % v " " % s " " orz " " orz "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " fmt " " io " " math " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " bufio " " os " " strconv "
package main import ( " " ) func main ( ) { var k int var anntenas [ 5 ] int for i := 0 ; i < 5 ; i + + { fmt . Scan ( & anntenas [ i ] ) } fmt . Scan ( & k ) if anntenas [ 4 ] - anntenas [ 0 ] <= k { fmt . Println ( " Yay ! " " : ( "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var k int var s int fmt . Scan ( & k ) fmt . Scan ( & s ) count := 0 for i := 0 ; i <= k ; i ++ { c := k if s - i < k { c = s - i } for j := 0 ; j <= c ; j ++ { if s - i - j <= k { count ++ } } } fmt . Println ( count ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d \n " , count ) } func scanIntSlice ( size int ) [ ] int { input := [ ] int { } for i := 0 ; i < size ; i ++ { var in int fmt . Scanf ( " " , & in ) input = append ( input , in ) } return input }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 5 && b == 5 && c == 7 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " bufio " " strconv " " os " " Yay ! " " : ( "
package main import " " func main ( ) { var n , t , min int c := 1 fmt . Scan ( & n ) fmt . Scan ( & min ) for i := 1 ; i < n ; i ++ { fmt . Scan ( & t ) if t < min { c + + min = t } } fmt . Println ( c ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max_n , max_cnt := 1 , 0 for i := n ; i > 0 ; i -- { num := i cnt := 0 for num % 2 == 0 { cnt ++ num /= 2 } if cnt > max_cnt { max_cnt = cnt max_n = i } } fmt . Println ( max_n ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ret := k < e - d || k < e - c || k < e - b || k < e - a || k < d - c || k < d - b || k < d - a || k < c - b || k < c - a || k < b - a if ret { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " infinity "
package main import ( " " " fmt " " io / ioutil " " os " \n
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for i := 0 ; i <= K ; i ++ { for j := max ( S - i - K , 0 ) ; j <= min ( K , S - i ) ; j ++ { r ++ } } fmt . Println ( r ) } func max ( a , b int ) int { if a > b { return a } return b } func min ( a , b int ) int { if a > b { return b } return a }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := " Three " " Y " { ans = " " break } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max := 0 maxcnt := 0 if n == 1 { fmt . Println ( 1 ) return } for i := n ; i >= 1 ; i -- { temp := i cnt := 0 for temp % 2 == 0 { temp /= 2 cnt + + } if maxcnt < cnt { max = i maxcnt = cnt } } fmt . Println ( max ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func solution ( a [ ] int ) string { k := a [ 5 ] for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 5 ; j ++ { if i == j { continue } if a [ i ] - a [ j ] > k { return " " } } } return " " } func main ( ) { a := make ( [ ] int , 0 , 6 ) for i := 0 ; i < 6 ; i ++ { t := 0 fmt . Scan ( & t ) a = append ( a , t ) } fmt . Println ( solution ( a ) ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } for _ , v := range s { if v == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if k >= ( e - a ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " os " " bufio " " strings " " strconv " " math " " " " " " " " " " Yes " " No " " No " " No "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " ) func main ( ) { var N , P int fmt . Scan ( & N , & P ) if N == 1 { fmt . Println ( P ) } else { m := map [ int ] int { } for i := 2 ; i * i <= P ; i ++ { for P % i == 0 { m [ i ] ++ P /= i } } ans := 1 for key , value := range m { q := value / N ans *= pow ( key , q ) } fmt . Println ( ans ) } } func pow ( a , b int ) int { if b == 0 { return 1 } else if b == 1 { return a } else { return a * pow ( a , b - 1 ) } }
package main import ( " " " " ) func main ( ) { A := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & A [ i ] ) } sort . Ints ( A ) ans := ( A [ 2 ] - A [ 1 ] ) + ( A [ 1 ] - A [ 0 ] ) fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " Yes " " No " " "
package main import ( " " " fmt " " os " " math " " % v % v % v % v "
package main import ( " " ) func main ( ) { var a [ 5 ] int var k int for i := 0 ; i < 5 ; i ++ { fmt . Scanf ( " " , & a [ i ] ) } fmt . Scanf ( " " , & k ) var f bool f = true for i := 0 ; i < 5 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { f = f && ( ( a [ j ] - a [ i ] ) <= k ) } } if f { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s , m int fmt . Scan ( & k , & s ) for x := 0 ; x < k + 1 ; x ++ { for y := 0 ; y < k + 1 ; y ++ { z := s - x - y if 0 <= z && z <= k { m + + } } } fmt . Println ( m ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " % d \n " , ABC051B ( K , S ) ) } func ABC051B ( K , S int ) ( res int ) { for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { res + + } } } return }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) count := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) res := 2 for res <= n { res *= 2 } fmt . Println ( res / 2 ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " hoge " " " " Yes " " No " " YES " " NO " " yes " " no "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Print ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import ( " " " " ) func main ( ) { A := make ( [ ] int , 3 ) fmt . Scan ( & A [ 0 ] , & A [ 1 ] , & A [ 2 ] ) sort . Ints ( A ) ans := A [ 2 ] - A [ 0 ] fmt . Println ( ans ) }
package main import ( " " " sort " " % d % d % d " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { if p [ i ] < min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) } i P Y") == " " { wfp, _ = os. C U S10")) } scanner :=
package main import ( " " " reflect " " sort " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) dic := map [ string ] bool { } for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) dic [ s ] = true } switch len ( dic ) { case 3 : fmt . Println ( " " ) case 4 : fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { ct := 0 length := 0 for i := 0 ; i < 3 ; i ++ { var tmp int fmt . Scan ( & tmp ) if tmp == 5 || tmp == 7 { ct ++ } length += tmp } if ct == 3 && length == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * n * h - N * n - N * h > 0 && ( n * h * N ) % ( 4 * n * h - N * n - N * h ) == 0 { w := ( n * h * N ) / ( 4 * n * h - N * n - N * h ) fmt . Println ( h , w , n ) return } } } }
package main import " " func main ( ) { var m [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & m [ i ] [ j ] ) } } var diff [ 3 ] [ 4 ] int for i := 0 ; i < 3 ; i ++ { diff [ i ] [ 0 ] = m [ i ] [ 1 ] - m [ i ] [ 0 ] diff [ i ] [ 1 ] = m [ i ] [ 2 ] - m [ i ] [ 1 ] diff [ i ] [ 2 ] = m [ 1 ] [ i ] - m [ 0 ] [ i ] diff [ i ] [ 3 ] = m [ 2 ] [ i ] - m [ 1 ] [ i ] } for i := range diff [ 0 ] { if diff [ 0 ] [ i ] != diff [ 0 ] [ i ] || diff [ 1 ] [ i ] != diff [ 2 ] [ i ] { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " math " " % f % f % f % f "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := range arr { arr [ i ] = make ( [ ] int , 3 ) for j := range arr [ i ] { fmt . Scan ( & arr [ i ] [ j ] ) } } t1 := arr [ 0 ] [ 1 ] - arr [ 0 ] [ 0 ] t2 := arr [ 0 ] [ 2 ] - arr [ 0 ] [ 1 ] s1 := arr [ 1 ] [ 0 ] - arr [ 0 ] [ 0 ] s2 := arr [ 2 ] [ 0 ] - arr [ 1 ] [ 0 ] for i := range arr { if arr [ i ] [ 1 ] - arr [ i ] [ 0 ] != t1 || arr [ i ] [ 2 ] - arr [ i ] [ 1 ] != t2 { fmt . Println ( " " ) return } if arr [ 1 ] [ i ] - arr [ 0 ] [ i ] != s1 || arr [ 2 ] [ i ] - arr [ 1 ] [ i ] != s2 { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f " " % .19 f " " \n " ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k || e - b > k || e - c > k || e - d > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n , m int fmt . Scan ( & n , & m ) board := make ( [ ] string , n ) target := make ( [ ] string , m ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & board [ i ] ) } for i := 0 ; i < m ; i ++ { fmt . Scan ( & target [ i ] ) } for i := 0 ; i < n - m + 1 ; i ++ { for j := 0 ; j < n - m + 1 ; j ++ { flag := false for dy := 0 ; dy < m ; dy ++ { for dx := 0 ; dx < m ; dx ++ { if board [ i + dy ] [ j + dx ] != target [ dy ] [ dx ] { flag = true break } } if flag { break } } if flag { continue } fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " % 0.15 f "
package main import ( " " ) func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) var flg5 , flg7 int for _ , v := range a { if v == 5 { flg5 ++ } else if v == 7 { flg7 ++ } } if flg5 == 2 && flg7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } return }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) n := a * b * c if n == 5 * 5 * 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func min32 ( a , b int ) int { if a >= b { return b } return a } func max32 ( a , b int ) int { if a >= b { return a } return b } func min64 ( a , b int64 ) int64 { if a >= b { return b } return a } func max64 ( a , b int64 ) int64 { if a >= b { return a } return b } func gcd ( a , b int64 ) int64 { if a % b == 0 { return b } else { return gcd ( b , a % b ) } } func lcm ( a , b int64 ) int64 { return a / gcd ( a , b ) * b }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { r + + } } } fmt . Println ( r ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 v := 2 for v <= n { ans = v v *= 2 } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Print ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " Yes " " No " " "
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scanf ( " % d % d % d " " % d \n " , ans ) }
package main import ( " " ) var table = make ( [ ] [ ] int , 3 ) func main ( ) { for i := 0 ; i < 3 ; i ++ { column := make ( [ ] int , 3 ) var a , b , c int fmt . Scan ( & a , & b , & c ) column [ 0 ] , column [ 1 ] , column [ 2 ] = a , b , c table [ i ] = column } var a1 , a2 , a3 , b1 , b2 , b3 int ans := false for ; a1 <= 100 ; a1 ++ { b1 = table [ 0 ] [ 0 ] - a1 b2 = table [ 0 ] [ 1 ] - a1 b3 = table [ 0 ] [ 2 ] - a1 a2 = table [ 1 ] [ 0 ] - b1 a3 = table [ 2 ] [ 0 ] - b1 if a2 + b2 == table [ 1 ] [ 1 ] && a2 + b3 == table [ 1 ] [ 2 ] && a3 + b2 == table [ 2 ] [ 1 ] && a3 + b3 == table [ 2 ] [ 2 ] { ans = true break } } if ans { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { fives := 0 sevens := 0 n := 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & n ) if n == 5 { fives ++ } if n == 7 { sevens ++ } } if fives == 2 && sevens == 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " scan string failed " " scan string failed " " "
package main import ( " " " fmt " " log " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var h [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & h [ i ] [ 0 ] , & h [ i ] [ 1 ] , & h [ i ] [ 2 ] ) } for i := 0 ; i <= 100 ; i ++ { b1 := h [ 0 ] [ 0 ] - i b2 := h [ 0 ] [ 1 ] - i b3 := h [ 0 ] [ 2 ] - i for j := 0 ; j <= 100 ; j ++ { if h [ 1 ] [ 0 ] - j == b1 && h [ 1 ] [ 1 ] - j == b2 && h [ 1 ] [ 2 ] - j == b3 { for k := 0 ; k <= 100 ; k ++ { if h [ 2 ] [ 0 ] - k == b1 && h [ 2 ] [ 1 ] - k == b2 && h [ 2 ] [ 2 ] - k == b3 { fmt . Println ( " " ) return } } } } } fmt . Println ( " " ) }
package main import " " var ( k , x int ) func main ( ) { fmt . Scan ( & k , & x ) res := 0 for i := 0 ; i <= k ; i ++ { if x - i <= 2 * k && x - i >= 0 { for j := 0 ; j <= k ; j ++ { if x - i - j <= k && x - i - j >= 0 { res += 1 } } } } fmt . Println ( res ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var ( k int ) array := make ( [ ] int , 5 ) fmt . Scan ( & array [ 0 ] , & array [ 1 ] , & array [ 2 ] , & array [ 3 ] , & array [ 4 ] , & k ) var isEnabed bool = true for i := 0 ; i < 5 ; i + + { for j := i + 1 ; j < 5 ; j + + { d := array [ j ] - array [ i ] if d > k { isEnabed = false } } } if isEnabed { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import ( " " ) func solution ( c [ 3 ] [ 3 ] int ) string { var a , b [ 3 ] int a [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] } for i := 1 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := range c { for j := range c [ i ] { if c [ i ] [ j ] != a [ i ] + b [ j ] { return " " } } } return " " } func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } fmt . Println ( solution ( c ) ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " Scan failed "
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " math " " : ( " " Yay ! "
package main import ( " " " " ) var A , B , H , M float64 func main ( ) { fmt . Scan ( & A , & B , & H , & M ) rad := func ( ) float64 { return math . Pi * ( ( 2.0 / 720.0 * ( 60.0 * H + M ) ) - 2.0 / 60.0 * M ) } fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * math . Cos ( rad ( ) ) ) ) }
package main import ( " " " math " " % .10 f \n " , ans ) }
package main import " " func main ( ) { var used [ 10 ] int var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N = 5 at := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & at [ i ] ) } var K int fmt . Scan ( & K ) var can = true for i := N - 1 ; i > 0 ; i -- { for j := 0 ; j < N ; j ++ { if at [ i ] - at [ j ] > K { can = false break } } } if can { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv " " NO " " YES "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n float64 fmt . Scan ( & n ) fmt . Println ( math . Pow ( 2 , math . Floor ( math . Log2 ( n ) ) ) ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 0 for _ , n := range [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 } { if n <= N { ans = n } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " math " " sort " " % g "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " " " "
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " " fmt " " os " " sort " " strconv " " stack is empty " " stack is empty "
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) min := int ( 10e7 ) ans := 0 for i := 0 ; i < N ; i ++ { var n int fmt . Scan ( & n ) if min >= n { min = n ans + + } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var n , m , ans int mod := 1000000007 fmt . Scan ( & n , & m ) ans = 1 if math . Abs ( float64 ( n - m ) ) >= 2 { ans = 0 } else { for i := 1 ; i <= n ; i ++ { ans *= i ans % = mod } for i := 1 ; i <= m ; i ++ { ans *= i ans % = mod } } if n == m { ans *= 2 ans %= mod } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) s := " Yay ! " if e - a > k { s = " " } fmt . Println ( s ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " os " " strconv " " fmt " " Yay ! " " : ( "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var s string for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { cs := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { cs [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & cs [ i ] [ j ] ) } } var ng = false for i := 0 ; i < 2 ; i ++ { d1 := cs [ i + 1 ] [ 0 ] - cs [ i ] [ 0 ] d2 := cs [ i + 1 ] [ 1 ] - cs [ i ] [ 1 ] d3 := cs [ i + 1 ] [ 2 ] - cs [ i ] [ 2 ] if d1 != d2 || d2 != d3 { ng = true } d1 = cs [ 0 ] [ i + 1 ] - cs [ 0 ] [ i ] d2 = cs [ 1 ] [ i + 1 ] - cs [ 1 ] [ i ] d3 = cs [ 2 ] [ i + 1 ] - cs [ 2 ] [ i ] if d1 != d2 || d2 != d3 { ng = true } } if ng { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES \n " ) } else { fmt . Printf ( " \n " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) m := make ( map [ string ] int ) for i := 0 ; i < N ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 4 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " sort " " Yay ! " " : ( "
package main import ( " " " fmt " " os " " sort " " strconv " " YES " " NO "
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } var m , ans int for i , v := range p { if i == 0 || v < m { m = v } if p [ i ] == m { ans ++ } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { a := ( N * h * n ) b := ( 4 * h * n - N * n - N * h ) if b < 0 || a * b <= 0 || a % b != 0 { continue } w := a / b if w <= 3500 { fmt . Println ( h , n , w ) return } } } }
package main import ( " " " fmt " " io " " os "
package main import " " func main ( ) { var c [ 4 ] [ 4 ] int for i := 1 ; i < 4 ; i ++ { for j := 1 ; j < 4 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } if ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) && ( c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 1 ] [ 3 ] - c [ 2 ] [ 3 ] ) && ( c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] ) && ( c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] == c [ 2 ] [ 3 ] - c [ 3 ] [ 3 ] ) && ( c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 1 ] [ 2 ] ) && ( c [ 3 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 3 ] [ 3 ] - c [ 1 ] [ 3 ] ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " Yes " " No "
package main import " " func main ( ) { var k , s , z int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z = s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import " " func main ( ) { a := make ( [ ] int , 3 ) for i := range a { fmt . Scan ( & a [ i ] ) } cnt := make ( map [ int ] int ) for _ , v := range a { cnt [ v ] + = 1 } if cnt [ 5 ] == 2 && cnt [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i , _ := range p { fmt . Scan ( & p [ i ] ) } ans := 0 min := 9999999999999 for i := 0 ; i < n ; i ++ { min = Min ( min , p [ i ] ) if p [ i ] <= min { ans + + } } fmt . Println ( ans ) } func Min ( a , b int ) int { if a > b { return b } return a }
package main import " " func main ( ) { var ( a , b , c int ) fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) if ( a == 5 && b == 5 && c == 7 ) | | ( a == 5 && b == 7 && c == 5 ) | | ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " YES " " NO " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { if k := S - i - j ; 0 <= k && k <= K { cnt ++ } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int32 , n ) for i := range ps { fmt . Scan ( & ps [ i ] ) } var cnt int32 tmpMin := ps [ 0 ] for _ , p := range ps { if tmpMin >= p { tmpMin = p cnt + + } } fmt . Print ( cnt ) }
package main import ( " " " " ) type BreakCount map [ int ] int func main ( ) { var N int fmt . Scan ( & N ) result := 0 count := 0 for { if float64 ( N ) < math . Pow ( 2.0 , float64 ( count ) ) { result = int ( math . Pow ( 2.0 , float64 ( count - 1 ) ) ) break } count ++ } fmt . Println ( result ) }
package main import " " func main ( ) { var num [ 6 ] int for i := 0 ; i < 6 ; i ++ { fmt . Scan ( & num [ i ] ) } if num [ 4 ] - num [ 0 ] > num [ 5 ] { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var cnt int min := int ( 2e5 + 1 ) for i := 0 ; i < n ; i ++ { var p int fmt . Scan ( & p ) if p <= min { cnt ++ min = p } } fmt . Println ( cnt ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scanln ( & a ) fmt . Scanln ( & b ) fmt . Scanln ( & c ) fmt . Scanln ( & d ) fmt . Scanln ( & e ) fmt . Scanln ( & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " math / cmplx " " os " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import ( " " " " ) func main ( ) { arr := make ( [ ] int , 3 ) fmt . Scan ( & arr [ 0 ] , & arr [ 1 ] , & arr [ 2 ] ) sort . Ints ( arr ) ans := 0 for i := range arr { if i + 1 < len ( arr ) { ans + = arr [ i + 1 ] - arr [ i ] } } fmt . Println ( ans ) }
package main import " " func main ( ) { s := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & s [ i ] ) } var five int var seven int for _ , v := range s { if v == 5 { five ++ } else if v == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " bufio " " os " " strconv " " "
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " " Three " " Four " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " math " " math / cmplx " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import " " func main ( ) { var n_5 int var n_7 int t := make ( [ ] int , 3 ) fmt . Scan ( & t [ 0 ] , & t [ 1 ] , & t [ 2 ] ) for i := 0 ; i < 3 ; i ++ { if t [ i ] == 5 { n_5 ++ } else if t [ i ] == 7 { n_7 ++ } } if n_5 == 2 && n_7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var ku [ 3 ] int fmt . Scanf ( " % d % d % d " , & ku [ 0 ] , & ku [ 1 ] , & ku [ 2 ] ) five := 0 seven := 0 for _ , v := range ku { if v == 5 { five ++ } else if v == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { r := s - x - y if r >= 0 && r <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) ha := 30 * h + 0.5 * m ma := 6 * m switch { case math . Abs ( ha - ma ) == 180 : fmt . Println ( a + b ) case ha == ma : fmt . Println ( math . Abs ( a - b ) ) default : ang := math . Max ( ha - ma , ma - ha ) if ang > 180 { ang = 360 - ang } ans := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - ( 2 * a * b * ( math . Cos ( ang * math . Pi / 180 ) ) ) fmt . Println ( math . Sqrt ( ans ) ) } }
package main import " " func main ( ) { var m int64 fmt . Scan ( & m ) for n := int64 ( 1 ) ; n <= 3500 ; n ++ { for w := int64 ( 1 ) ; w <= 3500 ; w ++ { d := 4 * n * w - m * ( w + n ) if d != 0 && m * n * w % d == 0 { h := m * n * w / d if h > 0 { fmt . Println ( h , n , w ) return } } } } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) c := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { t := s - ( x + y ) if 0 <= t && t <= k { c + + } } } fmt . Println ( c ) }
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) ans := exec ( A , B , H , M ) fmt . Println ( ans ) } func exec ( A , B , H , M float64 ) float64 { ang := math . Abs ( H * 30 + 0.5 * M - M * 6 ) v := A * A + B * B - ( 2 * A * B * math . Cos ( ang * math . Pi / 180 ) ) return math . Sqrt ( v ) }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " io " " math " " os " " strconv " " % .10 f \n " , math . Sqrt ( d ) ) return 0 } func main ( ) { sc := newScanner ( os . Stdin ) wr := bufio . NewWriter ( os . Stdout ) ret := solve ( sc , wr ) wr . Flush ( ) os . Exit ( ret ) } type scanner struct { sc * bufio . Scanner } func newScanner ( input io . Reader ) * scanner { sc := bufio . NewScanner ( input ) sc . Split ( bufio . ScanWords ) sc . Buffer ( make ( [ ] byte , 1024 ) , int ( 1e+9 ) ) return & scanner { sc } } func ( s * scanner ) s ( ) string { s . sc . Scan ( ) return s . sc . Text ( ) } func ( s * scanner ) i ( ) int { i , e := strconv . Atoi ( s . s ( ) ) if e != nil { panic ( e ) } return i } func ( s * scanner ) f ( ) float64 { f , e := strconv . ParseFloat ( s . s ( ) , 64 ) if e != nil { panic ( e ) } return f } func ( s * scanner ) bs ( ) [ ] byte { return [ ] byte ( s . s ( ) ) } func ( s * scanner ) is ( n int ) [ ] int { res := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . i ( ) } return res } func ( s * scanner ) fs ( n int ) [ ] float64 { res := make ( [ ] float64 , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . f ( ) } return res }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 7 && b == 5 && c == 5 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 5 && b == 5 && c == 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k int A := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & A [ i ] ) } fmt . Scan ( & k ) for i := 4 ; i > 1 ; i -- { if A [ i ] - A [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Yes " ) } else { fmt . Println ( " No " " "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max := 0 ans := 1 for i := 1 ; i <= n ; i ++ { a := i var cnt int for a > 0 { if a % 2 != 0 { break } a /= 2 cnt + + } if cnt > max { max = cnt ans = i } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var s string bucket := make ( map [ string ] int , 4 ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) bucket [ s ] ++ } switch len ( bucket ) { case 3 : fmt . Println ( " " ) default : fmt . Println ( " " ) } }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv "
package main import " " func imin ( a ... int ) ( int ) { min := a [ 0 ] for _ , v := range a { if v < min { min = v } } return min } func imax ( a ... int ) ( int ) { max := a [ 0 ] for _ , v := range a { if v > max { max = v } } return max } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) fmt . Println ( imax ( a , b , c ) - imin ( a , b , c ) ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 7 && b == 5 && c == 5 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 5 && b == 5 && c == 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func solution ( n int ) int { l := uint ( len ( fmt . Sprintf ( " " , n ) ) - 1 ) return 0 | ( 1 << l ) } func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( solution ( n ) ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " Yay ! " " : ( "
package main import " " func main ( ) { var k , s , count int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { var K , S , ans int fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main ; import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } fmt . Println ( solver ( n , s ) ) } func solver ( n int , s [ ] string ) string { var tmp int ; var ans string ; var arare map [ string ] int = map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } for i := 0 ; i < len ( s ) - 1 ; i ++ { arare [ s [ i ] ] = 1 } tmp = arare [ " " ] + arare [ " " ] + arare [ " " ] + arare [ " " ] if tmp == 3 { ans = " " } else if tmp == 4 { ans = " " } else if tmp == 1 { ans = " " } else if tmp == 2 { ans = " " } else { ans = " " } return ans }
package main import ( " " ) var K , S int func main ( ) { fmt . Scan ( & K , & S ) var count int64 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { count + + } } } fmt . Println ( count ) }
package main import ( " " " fmt " " io " " os " " Yes " " No "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " ) func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if 0 <= s - ( x + y ) && s - ( x + y ) <= k { ans ++ } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { l := make ( [ ] int , 5 ) var k int for i := range l { fmt . Scan ( & l [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < 5 ; i ++ { if l [ i ] - l [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " var k , s int func main ( ) { fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if z < 0 || k < z { continue } ans += 1 } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { nums := make ( [ ] [ ] int , 3 ) for i := range nums { nums [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & nums [ i ] [ j ] ) } } var x [ 3 ] int var y [ 3 ] int x [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { y [ i ] = nums [ 0 ] [ i ] - x [ 0 ] } for i := 1 ; i < 3 ; i ++ { x [ i ] = nums [ i ] [ 0 ] - y [ 0 ] } judge := true for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if nums [ i ] [ j ] != x [ i ] + y [ j ] { judge = false break } } } if judge { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os "
package main import " " func main ( ) { var k int a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) if a [ 4 ] - a [ 0 ] > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " " fmt " " log " " math " " os " " strconv "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var numOfSatisfied int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { rest := s - ( x + y ) if rest >= 0 && rest <= k { numOfSatisfied + + } } } fmt . Printf ( " \n " , numOfSatisfied ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " "
package main import " " func main ( ) { C := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { C [ i ] = make ( [ ] int , 3 ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & C [ i ] [ j ] ) } } for i := 0 ; i < 3 ; i ++ { p := C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] q := C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] if C [ i ] [ 1 ] - C [ i ] [ 0 ] != p { fmt . Println ( " " ) return } if C [ i ] [ 2 ] - C [ i ] [ 1 ] != q { fmt . Println ( " " ) return } } for i := 0 ; i < 3 ; i ++ { p := C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] q := C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 1 ] [ i ] - C [ 0 ] [ i ] != p { fmt . Println ( " " ) return } if C [ 2 ] [ i ] - C [ 1 ] [ i ] != q { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " % d "
package main import ( " " " math " " strconv " " % g "
package main import ( " " ) func main ( ) { k := 0 X := make ( [ ] int , 5 ) fmt . Scan ( & X [ 0 ] , & X [ 1 ] , & X [ 2 ] , & X [ 3 ] , & X [ 4 ] , & k ) f1 := true for i := 1 ; i < 5 ; i ++ { if X [ i ] - X [ 0 ] > k { f1 = false break } } if f1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { a := make ( [ ] int , 3 ) c := make ( [ ] [ ] int , 3 ) for i := range c { c [ i ] = make ( [ ] int , 3 ) fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } for a [ 0 ] = 0 ; a [ 0 ] <= 100 ; a [ 0 ] ++ { for a [ 1 ] = 0 ; a [ 1 ] <= 100 ; a [ 1 ] ++ { for a [ 2 ] = 0 ; a [ 2 ] <= 100 ; a [ 2 ] ++ { if c [ 0 ] [ 0 ] - a [ 0 ] == c [ 0 ] [ 1 ] - a [ 1 ] && c [ 0 ] [ 0 ] - a [ 0 ] == c [ 0 ] [ 2 ] - a [ 2 ] && c [ 1 ] [ 0 ] - a [ 0 ] == c [ 1 ] [ 1 ] - a [ 1 ] && c [ 1 ] [ 0 ] - a [ 0 ] == c [ 1 ] [ 2 ] - a [ 2 ] && c [ 2 ] [ 0 ] - a [ 0 ] == c [ 2 ] [ 1 ] - a [ 1 ] && c [ 2 ] [ 0 ] - a [ 0 ] == c [ 2 ] [ 2 ] - a [ 2 ] { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 0 min := 2000000 for i := 0 ; i < n ; i ++ { if min > p [ i ] { min = p [ i ] ans + + } } fmt . Println ( ans ) }
package main import ( " " " math " " % d % d % d % d \n " , & a , & b , & H , & M ) sin1 , cos1 : = math . Sincos ( 2 * math . Pi * ( float64 ( H ) / 12.0 + float64 ( M ) / 60.0 / 12.0 ) ) sin2 , cos2 := math . Sincos ( 2 * math . Pi * float64 ( M ) / 60.0 ) A , B := float64 ( a ) , float64 ( b ) r := math . Sqrt ( ( A * cos1 - B * cos2 ) * ( A * cos1 - B * cos2 ) + ( A * sin1 - B * sin2 ) * ( A * sin1 - B * sin2 ) ) fmt . Println ( r ) }
package main import ( " " " fmt " " log " " os " " strconv "
package main import ( " " ) func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var in int fmt . Scan ( & in ) ans := 1 for ans * 2 <= in { ans = ans * 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K ) fmt . Scan ( & S ) var cnt int for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if 0 <= Z && Z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " bytes " " fmt " " io " " os " " sort " " strconv " " strings " " EOF " " % d " " % d " " " " " " " " % d \n " , result [ j ] ) } }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) var counter [ 10 ] int counter [ a ] + + counter [ b ] ++ counter [ c ] ++ if counter [ 5 ] == 2 && counter [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " math " " os " " strconv " " % .16 f \n " , math . Sqrt ( float64 ( A * A + B * B ) - math . Cos ( absf ( thm - thh ) ) * float64 ( 2 * A * B ) ) ) } } func abs ( a int ) int { if a > 0 { return a } return - a } func absf ( a float64 ) float64 { if a > 0 { return a } return - a } var stdin = initStdin ( ) func initStdin ( ) * bufio . Scanner { bufsize := 1 * 1024 * 1024 var stdin = bufio . NewScanner ( os . Stdin ) stdin . Buffer ( make ( [ ] byte , bufsize ) , bufsize ) stdin . Split ( bufio . ScanWords ) return stdin } func nextString ( ) string { stdin . Scan ( ) return stdin . Text ( ) } func nextBytes ( ) [ ] byte { stdin . Scan ( ) return stdin . Bytes ( ) } func nextInt ( ) int { i , _ := strconv . Atoi ( nextString ( ) ) return i } func nextInt64 ( ) int64 { i , _ := strconv . ParseInt ( nextString ( ) , 10 , 64 ) return i }
package main import ( " " " bufio " " os " " strconv " " " " : ( " " Yay ! " ) }
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " strconv " " fmt "
package main import " " func main ( ) { var c11 , c12 , c13 , c21 , c22 , c23 , c31 , c32 , c33 int fmt . Scan ( & c11 , & c12 , & c13 ) fmt . Scan ( & c21 , & c22 , & c23 ) fmt . Scan ( & c31 , & c32 , & c33 ) if c12 - c11 != c22 - c21 || c12 - c11 != c32 - c31 || c13 - c11 != c23 - c21 || c13 - c11 != c33 - c31 || c21 - c11 != c22 - c12 || c21 - c11 != c23 - c13 || c31 - c11 != c32 - c12 || c31 - c11 != c33 - c13 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " math / cmplx " " math "
package main import ( " " " fmt " " os "
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { arr [ i ] = make ( [ ] int , 3 ) } fmt . Scan ( & arr [ 0 ] [ 0 ] , & arr [ 0 ] [ 1 ] , & arr [ 0 ] [ 2 ] ) fmt . Scan ( & arr [ 1 ] [ 0 ] , & arr [ 1 ] [ 1 ] , & arr [ 1 ] [ 2 ] ) fmt . Scan ( & arr [ 2 ] [ 0 ] , & arr [ 2 ] [ 1 ] , & arr [ 2 ] [ 2 ] ) line1 := make ( [ ] int , 3 ) line2 := make ( [ ] int , 3 ) line3 := make ( [ ] int , 3 ) line4 := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { line1 [ i ] = arr [ 0 ] [ i ] - arr [ 1 ] [ i ] line2 [ i ] = arr [ 1 ] [ i ] - arr [ 2 ] [ i ] } for i := 0 ; i < 3 ; i ++ { line3 [ i ] = arr [ i ] [ 0 ] - arr [ i ] [ 1 ] line4 [ i ] = arr [ i ] [ 1 ] - arr [ i ] [ 2 ] } result := 1 val1 := line1 [ 0 ] val2 := line2 [ 0 ] val3 := line3 [ 0 ] val4 := line4 [ 0 ] for i := 0 ; i < 3 ; i ++ { if line1 [ i ] != val1 { result = 0 } if line2 [ i ] != val2 { result = 0 } if line3 [ i ] != val3 { result = 0 } if line4 [ i ] != val4 { result = 0 } } if result == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " strings " " " " Three " " Four "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " math " " os " " strconv " " Scan failed " " Scan failed "
package main import " " func solve ( ) { var N int fmt . Scan ( & N ) po := 1 for po <= N { po *= 2 } fmt . Println ( po / 2 ) } func main ( ) { solve ( ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " " " "
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) ra := math . Pi / 6 / 60 * ( 60 * H + M ) rb := math . Pi / 30 * M diff := ra - rb ans := math . Sqrt ( math . Pow ( A , 2 ) + math . Pow ( B , 2 ) - 2 * A * B * math . Cos ( diff ) ) fmt . Println ( ans ) }
package main import ( " " " math " " math / cmplx "
package main import ( " " ) func main ( ) { var t1 , t2 int64 var a1 , a2 int64 var b1 , b2 int64 fmt . Scan ( & t1 , & t2 ) fmt . Scan ( & a1 , & a2 ) fmt . Scan ( & b1 , & b2 ) p := ( a1 - b1 ) * t1 q := ( a2 - b2 ) * t2 if p > 0 { p *= - 1 q *= - 1 } if p + q == 0 { fmt . Println ( " " ) return } ans := int64 ( 0 ) if p + q < 0 { ans = 0 } else { s := ( - p ) / ( p + q ) t := ( - p ) % ( p + q ) if t != 0 { ans = s * 2 + 1 } else { ans = s * 2 } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a int count := 0 result := 1 fmt . Scan ( & a ) for i := 1 ; i <= a ; i ++ { countInternal := 0 numberStore := i for numberStore % 2 == 0 { countInternal ++ numberStore /= 2 } if countInternal > count { count = countInternal result = i } } fmt . Println ( result ) }
package main import ( " " ) func maxInt ( a ... int ) int { m := a [ 0 ] ; for _ , x := range a { if x > m { m = x } } ; return m } func minInt ( a ... int ) int { m := a [ 0 ] ; for _ , x := range a { if x < m { m = x } } ; return m } func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= minInt ( k , s ) ; x ++ { t := s - x if t <= k { cnt + = t + 1 } else if t <= k * 2 { cnt += k - ( t - k ) + 1 } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " " " 7 " ) = = 1 && strings . Count ( s , " " ) == 2 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func nextInt ( ) int { sc . Scan ( ) nextI , err := strconv . Atoi ( sc . Text ( ) ) if err != nil { panic ( err ) } return nextI } func readLine ( ) string { buf := make ( [ ] byte , 0 , 1000000 ) for { line , isPrefix , err := rdr . ReadLine ( ) if err != nil { panic ( err ) } buf = append ( buf , line ... ) if ! isPrefix { break } } return string ( buf ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k && x + y + z == s { count + + } } } fmt . Println ( count ) }
package main import ( " " ) func DivideBy2 ( i int ) int { cnt := 0 num := i for num % 2 == 0 { cnt ++ num /= 2 } return cnt } func main ( ) { var n int fmt . Scan ( & n ) max_num := 0 max_cnt := - 1 for i := 1 ; i <= n ; i ++ { if DivideBy2 ( i ) > max_cnt { max_cnt = DivideBy2 ( i ) max_num = i } } fmt . Println ( max_num ) }
package main import " " func main ( ) { var num1 , num2 , num3 , num4 int var ans = " " fmt . Scanf ( " \n " , & num1 , & num2 , & num3 , & num4 ) if num1 == 1 || num2 == 1 || num3 == 1 || num4 == 1 { if num1 == 9 || num2 == 9 || num3 == 9 || num4 == 9 { if num1 == 7 || num2 == 7 || num3 == 7 || num4 == 7 { if num1 == 4 || num2 == 4 || num3 == 4 || num4 == 4 { ans = " " } } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " % .11 f "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) if h >= 12 { h -= 12 } l := 360 * ( float64 ( m ) / 60 ) s := 30 * float64 ( h ) + 30 * ( float64 ( m ) / 60 ) var ang float64 if l > s { ang = l - s } else { ang = s - l } if ang >= 180 { ang = 360 - ang } fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
package main import " " func main ( ) { var c1_1 , c1_2 , c1_3 , c2_1 , c2_2 , c2_3 , c3_1 , c3_2 , c3_3 int fmt . Scan ( & c1_1 , & c1_2 , & c1_3 , & c2_1 , & c2_2 , & c2_3 , & c3_1 , & c3_2 , & c3_3 ) d1 := c2_1 - c1_1 d2 := c2_2 - c1_2 d3 := c2_3 - c1_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c3_1 - c2_1 d2 = c3_2 - c2_2 d3 = c3_3 - c2_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c1_1 - c3_1 d2 = c1_2 - c3_2 d3 = c1_3 - c3_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k && ( x + y + z ) <= 3 * k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " sort " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " strings " \n " \ t \n " ) slice := strings . Split ( s , " " ) a1 := string ( slice [ 0 ] ) a2 := string ( slice [ 1 ] ) a3 := string ( slice [ 2 ] ) A1 , _ := strconv . Atoi ( a1 ) A2 , _ := strconv . Atoi ( a2 ) A3 , _ := strconv . Atoi ( a3 ) a1a2a3 := abs ( A2 - A1 ) + abs ( A3 - A2 ) a1a3a2 := abs ( A3 - A1 ) + abs ( A2 - A3 ) a2a1a3 := abs ( A1 - A2 ) + abs ( A3 - A1 ) a2a3a1 := abs ( A3 - A2 ) + abs ( A1 - A3 ) a3a1a2 := abs ( A1 - A3 ) + abs ( A2 - A1 ) a3a2a1 := abs ( A2 - A3 ) + abs ( A1 - A2 ) answer := math . MaxInt64 answer = min ( a1a2a3 , a1a3a2 ) answer = min ( answer , a2a1a3 ) answer = min ( answer , a2a3a1 ) answer = min ( answer , a3a1a2 ) answer = min ( answer , a3a2a1 ) fmt . Println ( answer ) }
package main import ( " " " fmt " " os " " strconv " " NO " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) m := make ( [ ] string , n ) for i := range m { fmt . Scan ( & m [ i ] ) } hinaArare := make ( map [ string ] struct { } ) for _ , v := range m { hinaArare [ v ] = struct { } { } } if len ( hinaArare ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - d > k || e - c > k || e - b > k || e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " sort " " % d " " % d " " % d "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " : ( " ) return } println ( " Yay ! " ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k && d - a <= k && c - a <= k && b - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { a := make ( [ ] int , 3 ) for i := range a { fmt . Scan ( & a [ i ] ) } mincost := abs ( a [ 1 ] - a [ 0 ] ) + abs ( a [ 2 ] - a [ 1 ] ) for i := 0 ; i < 6 ; i ++ { b := [ ] int { a [ i / 2 ] , a [ ( i / 2 + i % 2 + 1 ) % 3 ] , a [ ( i / 2 + ( i + 1 ) % 2 + 1 ) % 3 ] , } cost := abs ( b [ 1 ] - b [ 0 ] ) + abs ( b [ 2 ] - b [ 1 ] ) if cost < mincost { mincost = cost } } fmt . Println ( mincost ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " " fmt " " os " " strings " " Three " " Four " " "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) i := 1 for i <= N { i *= 2 } fmt . Println ( i / 2 ) }
package main import " " func main ( ) { var a [ 3 ] int var c5 , c7 int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) for _ , v := range a { switch v { case 5 : c5 ++ case 7 : c7 ++ } } if c5 == 2 && c7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var ant [ 5 ] int var k int for i := 0 ; i < 5 ; i ++ { fmt . Scanf ( " " , & ant [ i ] ) } fmt . Scanf ( " " , & k ) ans := " " for i := 0 ; i < 5 ; i ++ { for j := i ; j < 5 ; j ++ { if ant [ j ] - ant [ i ] > k { ans = " " } } } fmt . Printf ( " \n " , ans ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 var mr , hr , r , c float64 fmt . Scan ( & a , & b , & h , & m ) mr = m * 6 hr = h * 30 + m / 2 if mr - hr > hr - mr { r = hr - mr } else { r = mr - hr } if r < 0 { r += 360 } rn := ( r / 180 ) * math . Pi c = math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( rn ) ) fmt . Print ( c ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := range c { for j := 0 ; j < 3 ; j ++ { var tmp int fmt . Scan ( & tmp ) c [ i ] = append ( c [ i ] , tmp ) } } var a1 , a2 , a3 , b1 , b2 , b3 int a1 = 0 b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 a := [ ] int { a1 , a2 , a3 } b := [ ] int { b1 , b2 , b3 } ans := " " LABEL : for i := range c { for j := range c { if c [ i ] [ j ] != a [ i ] + b [ j ] { ans = " " break LABEL } } } fmt . Println ( ans ) }
package main import ( " " " " ) func square ( x float64 ) float64 { return x * x } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) var m_theta , h_theta float64 m_theta = math . Pi * float64 ( m ) / 30.0 h_theta = math . Pi * ( float64 ( h ) / 6.0 + float64 ( m ) / 360.0 ) dist := math . Sqrt ( square ( float64 ( a ) * math . Sin ( h_theta ) - float64 ( b ) * math . Sin ( m_theta ) ) + square ( float64 ( a ) * math . Cos ( h_theta ) - float64 ( b ) * math . Cos ( m_theta ) ) ) fmt . Print ( dist ) }
package main import " " func main ( ) { var n , min , count int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) if i == 0 { min = p [ i ] count + + } else if min >= p [ i ] { count + + min = p [ i ] } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import " " func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var ( k , s , count int ) fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { kk := s - i - j if 0 <= kk && kk <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var ( d [ 5 ] int k int ) for i := 0 ; i < 5 ; i ++ { fmt . Scanln ( & d [ i ] ) } fmt . Scanln ( & k ) if d [ 4 ] - d [ 0 ] > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var ( n int color string ) fmt . Scan ( & n ) table := make ( map [ string ] int ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & color ) table [ color ] + = 1 } if len ( table ) = = 3 { fmt . Println ( " " ) } else { fmt . Println ( " Four " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * n * h > N * h + N * n && N * h * n % ( 4 * n * h - N * h - N * n ) == 0 { w := N * h * n / ( 4 * n * h - N * h - N * n ) if w > 0 { fmt . Println ( h , n , w ) return } } } } }
package main import ( " " " fmt " " os " " Four " " Three "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( num ( n ) ) } func num ( n int ) int { var max int key := 1 for ; n > 0 ; n -- { var c int for t := n ; t % 2 == 0 ; t /= 2 { c ++ } if c > max { max = c key = n } } return key }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import . " " import . " " func main ( ) { var n int var s string Scan ( & n ) for i := 0 ; i < n ; i ++ { Scanf ( " " , & s ) if s == " " { Println ( " " ) Exit ( 0 ) } } Println ( " " ) }
package main import ( " " " " ) func main ( ) { var N int var min , ans = math . MaxInt32 , 0 fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { var tmp int fmt . Scan ( & tmp ) if min > tmp { ans ++ min = tmp } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " math " " os " " reflect " " strconv " " % v is not slice " " % v "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans <= n { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " bufio " " strconv " " os " " : ( " " Yay ! " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] bool , n ) var x string for i := 0 ; i < n ; i ++ { fmt . Scan ( & x ) m [ x ] = true } c := 0 for _ , v := range m { if v { c + + } } if c == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) count , prev := 0 , math . MaxInt64 for i := 0 ; i < n ; i ++ { var p int fmt . Scan ( & p ) if p < prev { prev = p count + + } } fmt . Println ( count ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import " " func min ( a int , b int ) int { if a > b { return b } else { return a } } func zet ( a int ) int { if a < 0 { return a * ( - 1 ) } else { return a } } func main ( ) { var n , m int fmt . Scan ( & n , & m ) ans := 0 for i := 0 ; i <= n ; i += 1 { for j := 0 ; j <= n ; j += 1 { x := m - i - j if x <= n && x >= 0 { ans += 1 } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " log " " os " " strconv " " YES " " NO "
package main import ( " " " os " " NO " " YES " " NO "
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) "
package main import ( " " " math " " % d " " % d " " % d \n " , count ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " : ( " ) return } } } fmt . Println ( " Yay ! " " "
package main import ( " " " sort " " % d % d % d % d \n " , & a , & b , & c , & d ) arr : = [ ] int { a , b , c , d } sort . Ints ( arr ) if arr [ 0 ] == 1 && arr [ 1 ] == 4 && arr [ 2 ] == 7 && arr [ 3 ] == 9 { fmt . Println ( " YES " " NO "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " No " " No " " Yes "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var answerN int = n var answerCnt int = 0 for i := 1 ; i <= n ; i ++ { var val = i var cnt = 0 for val % 2 == 0 { cnt = cnt + 1 val = val / 2 } if answerCnt < cnt { answerN = i answerCnt = cnt } } fmt . Println ( answerN ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) col := make ( map [ string ] struct { } ) for i := 0 ; i < n ; i ++ { var c string fmt . Scan ( & c ) col [ c ] = struct { } { } } if len ( col ) == 3 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } }
package main import ( " " " os " " Yay ! " " : ( "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) a := make ( [ ] int , N ) amap := make ( map [ int ] int ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & a [ i ] ) amap [ i ] = a [ i ] } first := a [ 0 ] cnt := 1 for i := 0 ; i < N ; i ++ { if a [ i ] < first { cnt ++ first = a [ i ] } } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { var N , P int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) } i P Y") == " " { wfp, _ = os. C U S10")) } scanner := r n } if a 1 a 1 b1 && a < b2 { fm .P in l (" " re t urn } i f 1 = b1 | 2 = 2 f t. ri tl (" " re t urn } i f 1 * 1+a2*t b *t 1 +b 2 *t 2 { i a 1 > b1 { m .P in l (" " re t urn } p e r i f := (a * 1 + a2* 2) - ( b 1* 1 + b 2* t ) a ns := ( 1 - a 1 * 1 pe d ff i (b1-a1) t ) pe d i ff > 0 { a n s++ } f t P i tln (a s re t urn } i f a1 b1 { m .P in l (" " re t urn } p e r i f := (b * 1 + b2* 2) - ( a 1* 1 + a 2* t ) a ns := ( 1 - b 1 * 1 pe d ff i (a1-b1) t ) pe d i ff > 0 { a n s++ } f t P i tln (a s wr i ter.Flu s h()
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) list := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & list [ i ] ) } count := 0 min := list [ 0 ] for i := 0 ; i < n ; i ++ { if min >= list [ i ] { min = list [ i ] count + + } } fmt . Println ( count ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " os " " strconv " " strings " " fmt " " " " infinity "
package main import ( " " " fmt " " io " " os " " sort " " strconv " " YES " " NO " \n \r \t
package main import ( " " " fmt " " io " " math " " os " " strconv " " % 0.15 f "
package main import ( " " " math " " sort " " funciton getMin ( ) requires at least one argument . " ) } min := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if min > nums [ i ] { min = nums [ i ] pos = i } } return min , pos } func getMax ( nums ... int ) ( int , int ) { if len ( nums ) == 0 { panic ( " " ) } max := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if max < nums [ i ] { max = nums [ i ] pos = i } } return max , pos } type sortType struct { a int b int } type byA [ ] sortType func ( s byA ) Len ( ) int { return len ( s ) } func ( s byA ) Swap ( i , j int ) { s [ i ] , s [ j ] = s [ j ] , s [ i ] } func ( s byA ) Less ( i , j int ) bool { return s [ i ] . a < s [ j ] . a }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a <= k ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " reflect " " sort " " 1 " , " " , " " , " " } fmt . Scan ( & s [ 0 ] , & s [ 1 ] , & s [ 2 ] , & s [ 3 ] ) sort . Strings ( s ) if reflect . DeepEqual ( s , t ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { v := s - x - y if 0 <= v && v <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " log " " math " " os " " strconv " " Scan failed " " Scan failed "
package main import ( " " " fmt " " os " " sort " " strconv " " strings "
package main import ( " " " fmt " " os " " strconv " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! "
package main import ( " " " " ) func main ( ) { temp := 0 a := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Sort ( sort . Reverse ( sort . IntSlice ( a ) ) ) for i := 1 ; i < 3 ; i ++ { temp += a [ i - 1 ] - a [ i ] } fmt . Println ( temp ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " no values " " no values "
package main import " " func prmFac ( x int ) map [ int ] int { pfm := make ( map [ int ] int ) for i := 2 ; i * i <= x ; i ++ { for x % i == 0 { x /= i pfm [ i ] + + } } if x > 1 { pfm [ x ] ++ } return pfm } func main ( ) { var n , p int fmt . Scan ( & n , & p ) ans := 1 for pn , cnt := range prmFac ( p ) { for i := 0 ; i < cnt ; i ++ { x := 1 for j := 0 ; j < n ; j ++ { x *= pn if x > p { break } else if j == n - 1 && p % x == 0 { ans *= pn p /= x } } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice "
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } } else if a == 5 { if b == 7 && c == 5 { fmt . Println ( " " ) } else if b == 5 && c == 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var k int a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < 4 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { if a [ j ] - a [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " sort " " % d % d % d % d " " YES " " NO "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string " " diff : % d \n " , ( a1 * t1 + a2 * t2 ) - ( b1 * t1 + b2 * t2 ) ) if AbsInt ( ( a1 * t1 + a2 * t2 ) - ( b1 * t1 + b2 * t2 ) ) == 0 { fmt . Println ( " " ) return } if a1 > b1 && a2 > b2 { fmt . Println ( 0 ) return } if a1 < b1 && a2 < b2 { fmt . Println ( 0 ) return } if a1 < b1 { a1 , b1 = b1 , a1 a2 , b2 = b2 , a2 } diff1 , diff2 := a1 - b1 , a2 - b2 dist1 , dist2 := diff1 * t1 , diff2 * t2 if dist1 + dist2 > 0 { fmt . Println ( 0 ) return } ans := 1 delta := dist1 + dist2 absDelta := AbsInt ( delta ) i := dist1 / absDelta ans += i * 2 if dist1 % absDelta == 0 { ans += 1 - 2 } fmt . Println ( ans ) } func AbsInt ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " " ) func main ( ) { as := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & as [ i ] ) } sort . Ints ( as ) result := as [ 2 ] - as [ 0 ] fmt . Println ( result ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " "
package main import ( " " " " ) var N int var ans , ans_c int func main ( ) { fmt . Scan ( & N ) if N == 1 { fmt . Println ( 1 ) } else { for i := 1 ; i <= N ; i ++ { var cnt int var t int = i for t % 2 == 0 { cnt ++ t /= 2 } if ans_c < cnt { ans = i ans_c = cnt } } fmt . Println ( ans ) } } func max ( x , y int ) int { return int ( math . Max ( float64 ( x ) , float64 ( y ) ) ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ps [ i ] ) } cnt := 0 min := ps [ 0 ] for i , p := range ps { if i == 0 { continue } if p > min { cnt + + } if min > p { min = p } } fmt . Println ( n - cnt ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if 0 <= Z && Z <= K && X + Y + Z == S { ans + + } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { A := 4 * n * h - ( n * N + h * N ) B := h * n * N if A > 0 && B % A == 0 { w := B / A fmt . Println ( h , n , w ) return } } } }
package main import " " func diff ( a , b int ) int { if a > b { return a - b } return b - a } func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if diff ( a , b ) > k || diff ( a , c ) > k || diff ( a , d ) > k || diff ( a , e ) > k || diff ( b , c ) > k || diff ( b , d ) > k || diff ( b , e ) > k || diff ( c , d ) > k || diff ( c , e ) > k || diff ( d , e ) > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N , M int fmt . Scan ( & N , & M ) A := make ( [ ] [ ] byte , N ) for i := range A { A [ i ] = make ( [ ] byte , N ) fmt . Scan ( & A [ i ] ) } B := make ( [ ] [ ] byte , M ) for i := range B { B [ i ] = make ( [ ] byte , M ) fmt . Scan ( & B [ i ] ) } for i := 0 ; i + M <= N ; i ++ { for j := 0 ; j + M <= N ; j ++ { ok := true for k := 0 ; k < M ; k ++ { for l := 0 ; l < M ; l ++ { if A [ i + k ] [ j + l ] != B [ k ] [ l ] { ok = false } } } if ok { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " " sort " " strings " " " " "
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " fmt " " math " " os " " strconv " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv " " % d % d % d % d " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " strconv " " strings " " " " "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) A := [ ] int { } fmt . Scan ( & A ) for n := 0 ; n < N ; n ++ { var tmp int fmt . Scanf ( " % d "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 3 ] int var b [ 3 ] int for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] } for i := 0 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " import " " import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " 5 " ) ) == 2 { if ( strings . Count ( sabc , " " ) ) == 1 { fmt . Println ( " " ) } } else { fmt . Println ( " " ) } }
package main import ( " " " os " " bufio " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv " " % s \n " , ABC054B ( A , B ) ) } func ABC054B ( A , B [ ] string ) string { if len ( A ) == len ( B ) { if checkUnderRect ( A , B , 0 , 0 ) { return " " } } else { for i := 0 ; i < len ( A ) - len ( B ) ; i ++ { for j := 0 ; j < len ( A [ i ] ) - len ( B ) ; j ++ { if A [ i ] [ j : j + len ( B ) ] == B [ 0 ] { if checkUnderRect ( A , B , i , j ) { return " " } } } } } return " " } func checkUnderRect ( A , B [ ] string , i , j int ) bool { for k := 1 ; k < len ( B ) ; k ++ { ak := k + i if A [ ak ] [ j : j + len ( B ) ] != B [ k ] { return false } } return true }
package main import ( " " " fmt " " math " " os " " % d % d \n " , & n , & p ) if n == 1 { fmt . Println ( p ) return } result : = 1 for value , count : = range Factoring ( p , 2 ) { result *= int ( math . Pow ( float64 ( value ) , float64 ( count / n ) ) ) } fmt . Println ( result ) } func Factoring ( num , pnum int ) map [ int ] int { result := make ( map [ int ] int ) if pnum * pnum > num { if num != 1 { result [ num ] + = 1 } return result } if num % pnum == 0 { num /= pnum result [ pnum ] + + } else { pnum + + } return merge ( result , Factoring ( num , pnum ) ) } func merge ( m1 , m2 map [ int ] int ) map [ int ] int { ans := map [ int ] int { } for k , v := range m1 { ans [ k ] + = v } for k , v := range m2 { ans [ k ] + = v } return ans }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] bool , n ) var x string for i := 0 ; i < n ; i ++ { fmt . Scan ( & x ) m [ x ] = true } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) nums := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & nums [ i ] ) } var count int var min int for i := 0 ; i < n ; i ++ { if i == 0 { min = nums [ i ] count + + } else { if min > nums [ i ] { min = nums [ i ] count + + } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var n , p , w , g , y int var s string fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { p = 1 } else if s == " " { w = 1 } else if s == " " { g = 1 } else if s == " " { y = 1 } } an := p + w + g + y if an == 3 { fmt . Println ( " " ) } else if an == 4 { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { as := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & as [ i ] ) } sort . Sort ( sort . Reverse ( sort . IntSlice ( as ) ) ) var sum int for i := 1 ; i < len ( as ) ; i ++ { sum += as [ i - 1 ] - as [ i ] } fmt . Println ( sum ) }
package main import ( " " " fmt " " os " " strings " " " " 7 " { cnt7 + + } if arr [ i ] == " " { cnt5 + + } } if cnt7 == 1 && cnt5 == 2 { fmt . Println ( " YES " " NO "
package main import ( " " " " ) func main ( ) { var a , b float64 var h , m float64 fmt . Scan ( & a , & b , & h , & m ) mc := m * 6.0 hc := ( 360 / 12 ) * h + mc / 12 if mc == hc { fmt . Println ( math . Abs ( b - a ) ) return } ang := math . Abs ( mc - hc ) if ang > 180 { ang = 360 - ang } c2 := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) r := math . Sqrt ( c2 ) fmt . Println ( r ) }
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scan ( & a1 , & a2 , & a3 ) if a1 <= a2 && a2 <= a3 { fmt . Println ( a2 - a1 + a3 - a2 ) } else if a2 <= a1 && a1 <= a3 { fmt . Println ( a1 - a2 + a3 - a1 ) } else if a1 <= a3 && a3 <= a2 { fmt . Println ( a3 - a1 + a2 - a3 ) } else if a2 <= a3 && a3 <= a1 { fmt . Println ( a3 - a2 + a1 - a3 ) } else if a3 <= a1 && a1 <= a2 { fmt . Println ( a1 - a3 + a2 - a1 ) } else if a3 <= a2 && a2 <= a1 { fmt . Println ( a2 - a3 + a1 - a2 ) } }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " - 1 " ) return } sort . Sort ( sort . IntSlice ( arr ) ) idx , cur , count := n - 1 , 0 , 0 for i := 0 ; i < n ; i ++ { a := arr [ i ] if a >= 0 { break } cur += a for cur < 0 { aa := arr [ idx ] if aa < 0 { panic ( " " ) } cur += aa count + + idx - - } count + + } fmt . Println ( count ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { var char string fmt . Scan ( & char ) if char == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) pi := math . Acos ( - 1 ) th := ( h * 60 + m ) / 720 * 2 * pi tm := ( h * 60 + m ) / 60 * 2 * pi xh := a * math . Cos ( th ) yh := a * math . Sin ( th ) xm := b * math . Cos ( tm ) ym := b * math . Sin ( tm ) dx := xh - xm dy := yh - ym fmt . Println ( math . Sqrt ( dx * dx + dy * dy ) ) }
package main import ( " " ) func main ( ) { var n int var a string mame := map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a ) mame [ a ] ++ } if mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 { fmt . Print ( " \n " ) } else { fmt . Print ( " \n " ) } }
package main import ( " " " sort " " strings " " Four " " Three " " " " "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { s , k , an := 0 , 0 , 0 fmt . Scanf ( " " , & k , & s ) for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { if 0 <= ( s - i - j ) && ( s - i - j ) <= k { an ++ } } } fmt . Println ( an ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := range P { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] res := 0 for i := range P { if min >= P [ i ] { res ++ } if min > P [ i ] { min = P [ i ] } } fmt . Println ( res ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) count := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var k , s int64 num := 0 fmt . Scan ( & k , & s ) var x , y , z int64 for x = 0 ; x <= k ; x ++ { for y = x ; y <= k ; y ++ { for z = y ; z <= k ; z ++ { if x + y + z == s { num += getNum ( x , y , z ) } } } } fmt . Println ( num ) } func getNum ( x , y , z int64 ) int { num := 0 if x == y && y == z { num = 1 } else if ( x == y && x != z ) || ( x == z && x != y ) || ( y == z && x != y ) { num = 3 } else { num = 6 } return num }
package main import ( " " " fmt " " os " " strconv " " strings " \n " \n " ) ant [ i ] , _ = strconv . Atoi ( tmp ) } tmp , _ := reader . ReadString ( '\n' ) tmp = strings . Trim ( tmp , " \n " ) k , _ := strconv . Atoi ( tmp ) min := ant [ 0 ] max := ant [ 0 ] for i := 0 ; i < 5 ; i ++ { if min > ant [ i ] { min = ant [ i ] } if max < ant [ i ] { max = ant [ i ] } } if ( max - min ) > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { arr [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { var tmp int fmt . Scan ( & tmp ) arr [ i ] [ j ] = tmp } } for i := 0 ; i < 101 ; i ++ { for j := 0 ; j < 101 ; j ++ { for k := 0 ; k < 101 ; k ++ { x1 , y1 , z1 := arr [ 0 ] [ 0 ] - i , arr [ 0 ] [ 1 ] - i , arr [ 0 ] [ 2 ] - i x2 , y2 , z2 := arr [ 1 ] [ 0 ] - j , arr [ 1 ] [ 1 ] - j , arr [ 1 ] [ 2 ] - j x3 , y3 , z3 := arr [ 2 ] [ 0 ] - k , arr [ 2 ] [ 1 ] - k , arr [ 2 ] [ 2 ] - k if x1 == x2 && x2 == x3 && y1 == y2 && y2 == y3 && z1 == z2 && z2 == z3 { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " " os " " bufio " " strings " " strconv " " "
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r , } } f m .Fprin l ( r ter , "No") } func e q a i , j int, a, b [ ] s r ng) o o m := le n b) f r k := 0; k < m; + { f o = ; l < m; + { i f a i k ] j +l = [ k ] [ l ] { r e ur f a l s e } ret rn tr e }
package main import ( " " " sort " " NO " " YES "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) r := math . Abs ( m * 360.0 / 60 - ( h * 60.0 + m ) * 360.0 / ( 60.0 * 12.0 ) ) * math . Pi / 180.0 x := a * a + b * b - 2 * a * b * math . Cos ( r ) fmt . Println ( math . Sqrt ( x ) ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " Yes " " No "
package main import " " func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { if 0 <= s - ( i + j ) && s - ( i + j ) <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ok := a * b * c == 5 * 5 * 7 && a + b + c == 5 + 5 + 7 if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) S := make ( [ ] string , N ) result := " " for i := 0 ; i < N ; i ++ { fmt . Scan ( & S [ i ] ) } for i := 0 ; i < N ; i ++ { if S [ i ] == " " { result = " " } } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " bufio " " os " " strings " " strconv " " " " YES " " NO "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mx := b * math . Cos ( 6 * m * math . Pi / 180 ) my := b * math . Sin ( 6 * m * math . Pi / 180 ) hrad := 360 * ( h / 12 ) + 30 * ( m / 60 ) hx := a * math . Cos ( hrad * math . Pi / 180 ) hy := a * math . Sin ( hrad * math . Pi / 180 ) calc := ( mx - hx ) * ( mx - hx ) + ( my - hy ) * ( my - hy ) fmt . Println ( math . Sqrt ( calc ) ) }
package main import ( " " " fmt " " os " " sort " " strconv " " Yes " " No "
package main import ( " " " sort " " % d " " % d " " % d " " % d " " % d " " % d " " Yay ! " " : ( "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " YES " ) } else { println ( " NO " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var s string for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) const intMax = 2147483647 func main ( ) { var n int _ , _ = fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { var p int _ , _ = fmt . Scan ( & p ) ps [ i ] = p } min := intMax res := 0 for _ , v := range ps { if min > v { min = v } if v <= min { res ++ } } fmt . Println ( res ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " "
package main import ( " " ) func main ( ) { var s_1 , s_2 , s_3 int fmt . Scanf ( " % d % d % d " " NO " ) } else if s_2 != 5 && s_2 != 7 { fmt . Println ( " " ) } else if s_3 != 5 && s_3 != 7 { fmt . Println ( " " ) } fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var N , M int fmt . Scan ( & N , & M ) As := make ( [ ] string , N ) Bs := make ( [ ] string , M ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & As [ i ] ) } for i := 0 ; i < M ; i ++ { fmt . Scan ( & Bs [ i ] ) } for sy := 0 ; sy < N - M + 1 ; sy ++ { for sx := 0 ; sx < N - M + 1 ; sx ++ { if match ( As , Bs , sx , sy ) { fmt . Println ( " " ) return } } } fmt . Println ( " " ) } func match ( As , Bs [ ] string , sx , sy int ) bool { M := len ( Bs ) for y := 0 ; y < len ( Bs ) ; y ++ { if As [ sy + y ] [ sx : sx + M ] != Bs [ y ] { return false } } return true }
package main import ( " " " fmt " " os " " Yay ! " " : ( "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var num1 , num2 , num3 , num4 int var ans string fmt . Scanf ( " % d % d % d % d \n " , & num1 , & num2 , & num3 , & num4 ) if num1 == 1 || num2 == 1 || num3 == 1 || num4 == 1 { if num1 == 9 || num2 == 9 || num3 == 9 || num4 == 9 { if num1 == 7 || num2 == 7 || num3 == 7 || num4 == 7 { if num1 == 4 || num2 == 4 || num3 == 4 || num4 == 4 { ans = " " } else { ans = " " } } else { ans = " " } } else { ans = " " } } else { ans = " " } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " log " " math " " os " " strconv " " : ( " " Yay ! "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 3 ] int var b [ 3 ] int a [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] } for i := 0 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) Adeg := h * 30 + m / 60 * 30 Bdeg := m / 5 * 30 Deg := math . Abs ( Adeg - Bdeg ) if Deg > 180 { Deg = 360 - Deg } X := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( Deg / 180 * math . Pi ) fmt . Println ( math . Sqrt ( X ) ) }
package main import " " func main ( ) { var c [ 4 ] [ 4 ] int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 4 ] int var b [ 4 ] int a [ 1 ] = 0 for i := 1 ; i <= 3 ; i ++ { b [ i ] = c [ 1 ] [ i ] - a [ 1 ] } for i := 2 ; i <= 3 ; i ++ { a [ i ] = c [ i ] [ 1 ] - b [ 1 ] } var flag int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { if c [ i ] [ j ] != a [ i ] + b [ j ] { flag ++ } } } if flag == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " Three " " Four "
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d "
package main import ( " " " " ) func abs ( x float64 ) float64 { if x < 0 { return - x } return x } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) l := 360 * ( m / 60 ) s := 30 * h + 30 * ( m / 60 ) ang := abs ( l - s ) if ang >= 180 { ang = 360 - ang } fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
a = gets . chomp . split ( " " ) . map ( & :to_i ) ; if a . include? ( 1 ) && a . include? ( 9 ) && a . include? ( 7 ) && a . include? ( 4 ) puts " YES " else puts " NO " end
K , S = gets . split . map ( & :to_i ) p ( 0 .. K ) . map { | x | ( 0 .. K ) . map { | y | z = S - x - y ; 0 <= z && z <= K ? 1 : 0 } . inject ( :+ ) } . inject ( :+ )
puts ( gets . chomp . split . map ( & :to_i ) . sort! == [ 1 , 4 , 7 , 9 ] ) ? " YES " : " NO "
input = STDIN . read . chomp . split ( " " ) . map { | a | a . to_i } puts ( input . include? ( 1 ) && input . include? ( 7 ) && input . include? ( 9 ) && input . include? ( 4 ) ) ? " YES " : " NO "
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && k >= z count += 1 end end end puts count
c = 3 . times . map { gets . split . map ( & :to_i ) } total_sum = c . map { | r | r . inject ( :+ ) } . inject ( :+ ) daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ i ] } . inject ( :+ ) skew_daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ 2 - i ] } . inject ( :+ ) flag1 = total_sum == 3 * daig_sum flag2 = daig_sum == skew_daig_sum puts flag1 && flag2 ? " Yes " : " No "
antenas = 5 . times . map { STDIN . gets . strip . to_i } k = STDIN . gets . strip . to_i puts antenas [ 4 ] - antenas [ 0 ] > k ? ' :( ' : ' Yay! '
N = gets . to_i P = gets . split . map ( & :to_i ) checker = N count = 0 P . each { | n | if checker >= n count += 1 checker = n end } puts count
y , r = gets . split . map ( & :to_i ) puts y > - r ? 1 : y < - r ? - 1 : 0
a = [ gets . to_i ] a << gets . to_i a << gets . to_i a << gets . to_i a << gets . to_i k = gets . to_i puts a . combination ( 2 ) . to_a . all? { | ( x , y ) | ( x - y ) . abs <= k } ? ' Yay! ' : ' :( '
s = gets . chomp . split ( " " ) if s . include? ( " 1 " ) && s . include? ( " 9 " ) && s . include? ( " 7 " ) && s . include? ( " 4 " ) puts ( " YES " ) else puts ( " NO " ) end
k , s = gets . chomp . split ( ' ' ) . map { | n | n . to_i } ans = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if z >= 0 && z <= k ans = ans + 1 end end end puts ans
k , s = gets . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | cnt += 1 if s - x - y <= k && s - x - y >= 0 end end puts cnt
gets puts gets . split . include? ( ' Y ' ) ? :Four : :Three
k , s = gets . split . map ( & :to_i ) a = 0 ( k + 1 ) . times { | i | ( k + 1 ) . times { | j | a += 1 if s - i - j >= 0 && s - i - j <= k } } p a
a = 6 . times . map { gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
k , s = gets . split . map & :to_i ; v = 0 ; ( g = ( 0 .. k ) ) . each { | x | g . each { | y | r = s - x - y ; k >= r && r >= 0 && v += 1 } } ; p v
arr = [ ] arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i k = gets . to_i check = 0 ( arr . size - 1 ) . times do | i | ( 1 ... 5 ) . each do | j | co = arr [ j ] - arr [ i ] check = 1 if co > k end end puts check . zero? ? :Yay! : ' :( '
n = gets . chomp . to_i ary = gets . split ( " " ) . map ( & :to_s ) if ary . uniq . size == 3 puts " Three " else puts " Four " end
n = gets . split . map ( & :to_i ) data = gets . split ( ' ' ) . map ( & :to_i ) c = 0 ; min = nil ; data . each_with_index { | v , i | if min == nil || min > v then min = v end if min >= v then c += 1 end } p c
N = gets . to_i puts ( gets . chomp . split . uniq . length == 3 ? ' Three ' : ' Four ' )
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y ans += 1 if z . between? ( 0 , k ) end end puts ans
k , s = gets . split . map { | i | i . to_i } res = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if 0 <= z && z <= k then res += 1 end end end puts res
moji = " abcdefghi " . split ( " " ) numbers = gets . chomp . split . map ( & :to_i ) missing = ( 1 .. 9 ) . to_a h = { } unknown = [ ] moji . zip ( numbers ) { | m , n | if n != - 1 h [ m ] = n missing . delete n else unknown << m end } answer = 0 missing . permutation ( missing . length ) { | arr | unknown . zip ( arr ) { | m , n | h [ m ] = n } answer += 1 if h [ " a " ] + h [ " c " ] + h [ " f " ] + 10 * ( h [ " b " ] + h [ " e " ] ) + 100 * h [ " d " ] == 100 * h [ " g " ] + 10 * h [ " h " ] + h [ " i " ] } puts answer
gets puts gets . chomp . split . include? ( ' Y ' ) ? ' Four ' : ' Three '
n = gets . chomp . to_i p_arr = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 min = 9999999999 p_arr . each do | p | if p < min then min = p count += 1 end end puts count
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) x = ( b [ 0 ] - a [ 0 ] ) * t [ 0 ] y = ( b [ 1 ] - a [ 1 ] ) * t [ 1 ] if x + y == 0 puts x == y ? 0 : " infinity " elsif x == 0 || y == 0 || ( x > 0 && x + y > 0 ) || ( x < 0 && x + y < 0 ) puts 0 else s , t = x . abs . divmod ( ( x + y ) . abs ) puts t != 0 ? s * 2 + 1 : s * 2 end
puts $< . read . index ( " Y " ) ? :Four : :Three
s = gets . split puts s . include? ( ' 1 ' ) && s . include? ( ' 9 ' ) && s . include? ( ' 7 ' ) && s . include? ( ' 4 ' ) ? " YES " : " NO "
array = readlines . map ( & :to_i ) if array [ 4 ] - array [ 0 ] > array [ 5 ] puts ' :( ' else puts ' Yay! ' end
gets puts gets . count ( ' Y ' ) != 0 ? ' Four ' : ' Three '
k , s = gets . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
a = gets . split ( " " ) . map! { | i | i . to_i } n1 = 0 n2 = 0 n3 = 0 n4 = 0 4 . times do | i | if a [ i ] == 1 then n1 += 1 elsif a [ i ] == 7 then n2 += 1 elsif a [ i ] == 9 then n3 += 1 elsif a [ i ] == 4 then n4 += 1 end end if n1 == 1 and n2 == 1 and n3 == 1 and n4 == 1 puts " YES " else puts " NO " end
n = gets . to_i puts gets . split . uniq . length == 3 ? " Three " : " Four "
n = gets . to_i a = gets . split . map ( & :to_i ) min = a [ 0 ] + 1 sum = 0 a . each do | i | if i <= min sum += 1 min = i end end p sum
N = gets . strip . to_i P = gets . strip . split . map ( & :to_i ) mn = N + 1 count = 0 P . each do | i | if i < mn then mn = i count += 1 end end puts count
class StdinGetter def initialize ( has_header = false ) @stdin = initialized_stdin ( readlines ) @header = initialized_header ( has_header ) @body = initialized_body ( has_header ) end def header ( ) @header end def body ( ) @body end def splited_body ( splitter ) @body . map { | line | line . split ( splitter ) } end private def initialized_stdin ( lines ) lines . nil? ? [ ] : lines . map { | line | line . chomp } end def initialized_header ( has_header ) has_header ? @stdin [ 0 ] : [ ] end def initialized_body ( has_header ) has_header ? @stdin . slice ( 1 .. - 1 ) : @stdin end end class HinaArare @@arare_colors = [ " P " , " W " , " G " , " Y " ] @@count_messages = { 3 => " Three " , 4 => " Four " } def initialize ( arares ) @arares = arares end def arare_valiation ( ) @@arare_colors . select { | color | @arares . uniq . include? ( color ) } . length end def print_arere_counts ( ) if @@count_messages . has_key? ( arare_valiation ) puts @@count_messages [ arare_valiation ] else puts " Invalid Arare Select " end end end stdin_getter = StdinGetter . new ( true ) arares = stdin_getter . splited_body ( " " ) [ 0 ] hina_arare = HinaArare . new ( arares ) hina_arare . print_arere_counts
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y count += 1 if 0 <= z && z <= K end end puts count
def ina gets . split ( ' ' ) . map ( & :to_i ) end t1 , t2 = ina a1 , a2 = ina b1 , b2 = ina k1 = t1 * ( a1 - b1 ) k2 = t2 * ( a2 - b2 ) stride = k1 + k2 if stride . zero? puts ' infinity ' elsif ( k1 * stride ) . positive? puts 0 else ceil = ( k1 . abs + ( stride . abs - 1 ) ) / stride . abs bent = k1 % stride == 0 res = ( ceil - 1 ) + ceil + ( bent ? 1 : 0 ) p res end
ary = [ ] 3 . times do ary << gets . chomp . split . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] flag = nil ( ary [ 0 ] . min + 1 ) . times do | n | a [ 0 ] = n b [ 0 ] = ary [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = ary [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = ary [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = ary [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = ary [ 2 ] [ 0 ] - b [ 0 ] isCorrect = 0 3 . times do | na | 3 . times do | nb | if ary [ na ] [ nb ] != a [ na ] + b [ nb ] then isCorrect = nil end end end if isCorrect then flag = 0 end end print "
N = gets . to_i data = gets . split if data . uniq . size == 3 puts ' Three ' else puts ' Four ' end
a = 6 . times . map { gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
a , b , c , d = gets . chomp . split ( ' ' ) . map ( & :to_i ) array = [ a , b , c , d ] . sort if array == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
array = gets . chomp . split ( ' ' ) . map ( & :to_i ) a , b , c , d = false , false , false , false array . each do | i | if i == 1 a = true end if i == 9 b = true end if i == 7 c = true end if i == 4 d = true end end if a && b && c && d puts " YES " else puts " NO " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | e | z = s - i - e if z >= 0 && i + e + z == s && z <= k count += 1 end end end puts count
k , s = gets . split . map ( & :to_i ) x = 0 y = 0 z = 0 ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | break if x + y > s ans += 1 if x + y + k >= s end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ar = [ a , b , c , d , e ] ar . sort if ar [ 4 ] - ar [ 0 ] > k puts " :( " else puts " Yay! " end
def solution k , s = gets . split ( ' ' ) . map ( & :to_i ) answer = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y answer += 1 if ( 0 .. k ) . include? ( z ) end end answer end puts solution
n = gets . to_i lists = gets . split . map ( & :to_i ) count = 1 ans = lists [ 0 ] ( 1 .. n - 1 ) . each do | i | if ans > lists [ i ] count += 1 ans = lists [ i ] end end puts count
K , S = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each { | x | ( 0 .. K ) . each { | y | if ( S - x - y ) . between? ( 0 , K ) cnt += 1 end } } p cnt
n = gets . to_i ary = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 1 min = ary [ 0 ] 1 . upto ( ary . size - 1 ) do | i | if ary [ i ] <= min ans += 1 min = ary [ i ] end end puts ans
N = gets . to_i P = gets . split . map & :to_i min = 1.0 / 0 p ( 1 .. P . size ) . select { | _i | i = _i - 1 min = [ min , P [ i ] ] . min P [ i ] <= min } . size
ary = [ ] 5 . times { ary << gets . to_i } a , b , c , d , e , f = ary k = gets . to_i flag = false ary . each do | i | ary . each do | j | flag = true if i - j > k end end puts flag ? ' :( ' : ' Yay! '
eval " K,S= " + ` tr ' ' , ` ; K += 1 ; p ( 0 ... K * K ) . count { | i | z = S - i % K - i / K ; z >= 0 && z < K }
arr = [ ] 6 . times do arr . push ( gets . to_i ) end if arr [ 4 ] - arr [ 0 ] > arr [ 5 ] puts " :( " else puts " Yay! " end
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | i | ( 0 .. [ s - i , k ] . min ) . each do | j | count += 1 if s - i - j <= k end end puts count
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = 1 ) if size2 == 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end N = gets . to_i S = get . uniq! puts yn_judge ( S . size == 4 , " Four " , " Three " )
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a . max + 1 a . each_with_index do | v , i | min >= v && ( min = v and cnt += 1 ) end puts cnt
n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) min = p [ 0 ] ans = 1 1 . upto ( n - 1 ) do | i | if min >= p [ i ] ans += 1 end min = [ min , p [ i ] ] . min end p ans
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) x1 = ( a1 - b1 ) * t1 x2 = ( a2 - b2 ) * t2 if ( x1 > 0 ) ^ ( x2 > 0 ) then x1 , x2 = - x1 , - x2 if x1 < 0 sub = - ( x1 + x2 ) if sub == 0 then puts " infinity " elsif sub < 0 puts 0 else ans = ( x1 / sub ) * 2 ans += ( x1 % sub == 0 ) ? 0 : 1 puts ans end else puts 0 end
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && z <= k then count += 1 end end end puts count
require ' set ' ; require ' prime ' INF = Float :: INFINITY n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) mini = INF ans = [ ] n . times do | i | if p [ i ] <= mini ans . push ( i + 1 ) mini = p [ i ] end end puts ans . count
ks = gets . strip k , s = ks . split ( ' ' ) . map ( & :to_i ) count = 0 Array ( 0 .. k ) . repeated_permutation ( 2 ) { | x , y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) } puts count
ary = [ ] 3 . times do | i | ary << gets . split . map ( & :to_i ) end for a0 in 0 .. 100 b0 = ary [ 0 ] [ 0 ] - a0 b1 = ary [ 0 ] [ 1 ] - a0 b2 = ary [ 0 ] [ 2 ] - a0 if b0 < 0 || b1 < 0 || b2 < 0 then next end a1 = ary [ 1 ] [ 0 ] - b0 a2 = ary [ 2 ] [ 0 ] - b0 if a1 < 0 || a2 < 0 then next end if ary [ 1 ] [ 1 ] != a1 + b1 then next end if ary [ 1 ] [ 2 ] != a1 + b2 then next end if ary [ 2 ] [ 1 ] != a2 + b1 then next end if ary [ 2 ] [ 2 ] != a2 + b2 then next end puts :Yes exit end puts : No
n = gets . to_i pp = gets . split . map ( & :to_i ) hoge = [ ] min = Float :: INFINITY pp . each do | num | min = [ min , num ] . min hoge << min end res = 0 n . times do | i | if hoge [ i ] >= pp [ i ] res += 1 end end p res
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } p ans
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | ans += 1 if 0 <= s - x - y && s - x - y <= k end end puts ans
K , S = gets . split . map & :to_i count = 0 0 . upto ( [ K , S ] . min ) do | x | 0 . upto ( [ K , S - x ] . min ) do | y | if S - x - y <= K count += 1 end end end puts count
r = [ ] res = " Yay! " 5 . times do | i | r << gets . to_i end k = gets . to_i for i in 0 .. 4 for j in 0 .. 4 if ( r [ i ] - r [ j ] ) . abs > k res = " :( " end end end puts res
puts gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO "
a = gets . to_i 3 . times { _ = gets } e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
n = gets . to_i pn = gets . strip . split . map ( & :to_i ) min = n + 1 count = 0 pn . each do | p | min = [ min , p ] . min count += 1 if p > min end puts n - count
gets puts gets . split . uniq . size == 4 ? :Four : :Three
c = 3 . times . map { gets . split . map ( & :to_i ) } all = c . map { | e | e . inject ( :+ ) } . inject ( :+ ) % 3 == 0 al2 = 2 . times . all? { | i | c [ i .. i + 1 ] . map { | e | e [ i .. i + 1 ] . inject ( :+ ) } . inject ( :+ ) % 2 == 0 } puts all && al2 ? :Yes : :No
number = gets . split . map ( & :to_i ) . sort . join if number == " 1479 " then puts " YES " else puts " NO " end
A = gets . to_i gets . to_i gets . to_i gets . to_i E = gets . to_i puts ( E - A ) <= gets . to_i ? ' Yay! ' : ' :( '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i mi , mx = [ a , b , c , d , e ] . minmax puts mx - mi > k ? ' :( ' : ' Yay! '
c = 3 . times . map { gets . split . map ( & :to_i ) } heIsRight = false a = Array . new ( 3 ) b = Array . new ( 3 ) ( 0 .. 100 ) . each do | n | isOut = false a [ 0 ] = n ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] isOut = true break end end next if isOut a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] isOut = true break end end unless isOut heIsRight = true break end end if heIsRight puts ' Yes ' else puts ' No ' end
n = gets . to_i s = gets . chomp arr = [ 0 , 0 ] s . each_char { | c | if c < " a " if c < " N " arr [ 0 ] += 1 else arr [ 0 ] -= 1 end else if c < " n " arr [ 1 ] += 1 else arr [ 1 ] -= 1 end end } puts arr . map { | x | x . abs } . inject ( :+ ) crypt = " " if arr [ 0 ] >= 0 crypt += ( " A " * arr [ 0 ] ) else crypt += ( " N " * ( - arr [ 0 ] ) ) end if arr [ 1 ] >= 0 crypt += ( " a " * arr [ 1 ] ) else crypt += ( " n " * ( - arr [ 1 ] ) ) end puts crypt
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | t = s - i - j ans += 1 if 0 <= t && t <= k end end puts ans
H , R = gets . split . map & :to_i p 0 if H + R == 0 p 1 if H + R > 0 p - 1 if H + R < 0
c = [ ] 3 . times { c << gets . split . map ( & :to_i ) } ( 0 .. 100 ) . any? do | a1 | a = [ ] b = [ ] 3 . times do | n | b [ n ] = c [ 0 ] [ n ] - a1 end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] [ 1 , 2 ] . all? { | i | [ 1 , 2 ] . all? { | j | c [ i ] [ j ] == a [ i ] + b [ j ] } } end . tap { | ans | puts ans ? ' Yes ' : ' No ' }
n = gets . to_i s = gets . chomp . split . uniq puts s . size == 3 ? " Three " : " Four "
$/ = ' ' ; k , s = $< . map & :to_i ; r = 0 ; k += 1 ; ( k * k ) . times { | x | z = s - x / k - x % k ; z < 0 || z < k && r += 1 } ; p r
k , s = gets . split . map ( & :to_i ) cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | f . upto ( k ) do | y | cnt += 1 if 0 <= s - x - y && s - x - y <= k end end p cnt
k , s = gets . split ( ' ' ) . map ( & :to_i ) a = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y a += 1 if z . between? ( 0 , k ) end end puts a
twod_array = [ ] twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) sa1 = ( twod_array [ 0 ] [ 0 ] - twod_array [ 0 ] [ 1 ] ) . abs sa2 = ( twod_array [ 0 ] [ 0 ] - twod_array [ 0 ] [ 2 ] ) . abs result = ' Yes ' result = ' No ' if ( ( twod_array [ 1 ] [ 0 ] - twod_array [ 1 ] [ 1 ] ) . abs != sa1 || ( twod_array [ 1 ] [ 0 ] - twod_array [ 1 ] [ 2 ] ) . abs != sa2 ) result = ' No ' if ( ( twod_array [ 2 ] [ 0 ] - twod_array [ 2 ] [ 1 ] ) . abs != sa1 || ( twod_array [ 2 ] [ 0 ] - twod_array [ 2 ] [ 2 ] ) . abs != sa2 ) puts result
n = gets . chomp . to_i p_arr = gets . chomp . split ( " " ) . map ( & :to_i ) min = p_arr [ 0 ] count = 0 0 . upto ( n - 1 ) do | i | if p_arr [ i ] > min then next else min = p_arr [ i ] count += 1 end end print ( "
grids = 3 . times . map { gets . split ( ' ' ) . map ( & :to_i ) } flag = false ( 0 .. grids . max . max ) . each do | i | a1 = i b1 = grids [ 0 ] [ 0 ] - a1 a2 = grids [ 1 ] [ 0 ] - b1 a3 = grids [ 2 ] [ 0 ] - b1 b2 = grids [ 0 ] [ 1 ] - a1 b3 = grids [ 0 ] [ 2 ] - a1 if a1 >= 0 && a2 >= 0 && a3 >= 0 && b1 >= 0 && b2 >= 0 && b3 >= 0 && grids [ 1 ] [ 1 ] == a2 + b2 && grids [ 1 ] [ 2 ] == a2 + b3 && grids [ 2 ] [ 1 ] == a3 + b2 && grids [ 2 ] [ 2 ] == a3 + b3 flag = true puts " Yes " break end end puts " No " unless flag
n = gets . to_i if gets . split . uniq . size == 3 puts ' Three ' else puts ' Four ' end
K , S = gets . split . map ( & :to_i ) ans = 0 for i in 0 .. K do for j in 0 .. K do if S - ( i + j ) >= 0 && S - ( i + j ) <= K ans += 1 end end end puts ans
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if ( 0 <= z && z <= k ) end end puts ans
N = gets . to_i a = gets puts a . count ( ?Y ) > 0 ? " Four " : " Three "
as = 5 . times . map { gets . to_i } k = gets . to_i puts as [ 4 ] - as [ 0 ] > k ? " :( " : " Yay! "
n = gets . to_i strings = gets . chomp . split puts strings . include? ( " Y " ) ? " Four " : " Three "
c = 3 . times . map { gets . split . map ( & :to_i ) } if [ 1 , 2 ] . repeated_permutation ( 2 ) . all? { | i , j | c [ i ] [ 0 ] + c [ 0 ] [ j ] == c [ i ] [ j ] + c [ 0 ] [ 0 ] } puts " Yes " else puts " No " end
ns = gets . split . map ( & :to_i ) . sort . join puts ns == ' 1479 ' ? ' YES ' : ' NO '
N = gets . to_i P = gets . split . map ( & :to_i ) min = 1 << 60 ans = 0 P . each do | n | if n <= min ans += 1 end min = n if n < min end puts ans
K , S = gets . chomp . split . map ( & :to_i ) count = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y if 0 <= z && z <= K count += 1 end end end print count
k , s = gets . split . map & :to_i puts [ * 0 .. k ] . repeated_permutation ( 2 ) . map { | a , b | a + b } . select { | i | i <= s } . count { | xy | ( z = s - xy ) >= 0 && z <= k }
puts $< . map { | s | eval " [%d-c=%d,c-%d] " % s . split } . uniq [ 1 ] ? :No : :Yes
N = gets . to_i num = gets . strip . split . map ( & :to_i ) ary = Array . new ( N , 0 ) ary [ 0 ] = num [ 0 ] for i in 1 .. N - 1 if ary [ i - 1 ] > num [ i ] ary [ i ] = num [ i ] else ary [ i ] = ary [ i - 1 ] end end s = 0 for i in 0 .. N - 1 if ary [ i ] == num [ i ] s += 1 end end puts s
N = gets . chomp . to_i S = gets . chomp . split print "
io = STDIN n = io . gets . to_i P = io . gets . split . map ( & :to_i ) cnt = 0 rm = [ ] min = P [ 0 ] n . times do | i | min = [ min , P [ i ] ] . min rm [ i ] = min end n . times do | i | cnt += 1 if P [ i ] <= rm [ i ] end p cnt
x = ` dd ` . split . map & :to_i puts ( x [ 4 ] - x [ 0 ] ) . abs > x [ 5 ] ? " :( " : :Yay!
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end h . delete ( " " ) if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) x = ( b [ 0 ] - a [ 0 ] ) * t [ 0 ] y = ( b [ 1 ] - a [ 1 ] ) * t [ 1 ] if x + y == 0 puts x == y ? 0 : " infinity " elsif x == 0 || y == 0 || ( x > 0 && x + y > 0 ) || ( x < 0 && x + y < 0 ) puts 0 elsif x + y > 0 s , t = x . abs . divmod ( x + y ) puts t != 0 ? s * 2 + 1 : s * 2 else s , t = x . divmod ( ( x + y ) . abs ) puts t != 0 ? s * 2 + 1 : s * 2 end
a = 5 . times . map { gets . to_i } k = gets . to_i puts a [ 4 ] - a [ 0 ] > k ? ' :( ' : ' Yay! '
a = [ ] b = [ ] c = [ ] c [ 0 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } c [ 1 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } c [ 2 ] = gets . chomp . split ( " " ) . map { | s | s . to_i } a [ 0 ] = 0 for j in 0 .. 2 b [ j ] = c [ 0 ] [ j ] end for i in 0 .. 2 a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end f = true for i in 0 .. 2 for j in 0 .. 2 f = false unless c [ i ] [ j ] == a [ i ] + b [ j ] end end if f puts " Yes " else puts " No " end
n = gets . chomp . to_i s = gets . chomp . split ( " " ) . map { | e | e . to_s } . uniq if s . length == 3 puts " Three " else puts " Four " end
n , s = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. n ) . each do | i | ( 0 .. n ) . each do | j | k = s - ( i + j ) count += 1 if k >= 0 && k <= n end end puts count
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a [ 0 ] + 1 a . each_with_index do | v , i | min >= v && ( min = v and cnt += 1 ) end puts cnt
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ret = 0 ( 0 .. k ) . each do | z | ( 0 .. k ) . each do | x | y = s - z - x if y >= 0 && y <= k then ret += 1 end end end puts ret
grids = Array . new ( 3 , Array . new ( 3 ) ) 3 . times do | i | grids [ i ] = STDIN . gets . split ( ' ' ) . map ( & :to_i ) end correct = false 0 . upto ( 100 ) do | a1 | 0 . upto ( 100 ) do | a2 | 0 . upto ( 100 ) do | a3 | b1_1 = grids [ 0 ] [ 0 ] - a1 b1_2 = grids [ 1 ] [ 0 ] - a2 b1_3 = grids [ 2 ] [ 0 ] - a3 b2_1 = grids [ 0 ] [ 1 ] - a1 b2_2 = grids [ 1 ] [ 1 ] - a2 b2_3 = grids [ 2 ] [ 1 ] - a3 b3_1 = grids [ 0 ] [ 2 ] - a1 b3_2 = grids [ 1 ] [ 2 ] - a2 b3_3 = grids [ 2 ] [ 2 ] - a3 if ( ( b1_1 == b1_2 && b1_2 == b1_3 ) && ( b2_1 == b2_2 && b2_2 == b2_3 ) && ( b3_1 == b3_2 && b3_2 == b3_3 ) ) correct = true break end end end end if correct puts ' Yes ' else puts ' No ' end
n = gets . strip . to_i array = gets . strip . split . map ( & :to_i ) res = [ ] sum = 0 min = 2000000 array . each do | ar | min = ar if min > ar if min == ar sum += 1 end end puts sum
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size , n = 1 , init = nil ) if n == 1 return Array . new ( size ) { init } else return Array . new ( n ) . map { Array . new ( size ) { init } } end end k , s = get_i ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | if s >= x + y and s - x - y <= k ans += 1 end end end puts ans
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && z <= k if x + y + z == s count += 1 end end end end puts count
n = gets . to_i a = gets . split . map ( & :to_i ) c = 0 mn = a [ 0 ] for i in ( 0 .. n - 1 ) if a [ i ] <= mn c += 1 mn = a [ i ] end end puts c
gets puts gets . split . uniq . size == 3 ? ' Three ' : ' Four '
k , s = gets . split . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if z . between? ( 0 , k ) count += 1 end end end puts count
n = gets . to_i m = 2 ans = gets . to_i - 1 ( n - 1 ) . times do a = gets . to_i if a > m ans += ( a - 1 ) / m elsif a == m m += 1 end end puts ans
n = gets . to_i p = gets . split . map ( & :to_i ) . first ( n ) min = ( 2 * 10 ** 5 ) + 1 ans = 0 n . times do | i | next if p [ i ] > min min = p [ i ] ans += 1 end puts ans
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) cnt = 0 for x in 0 .. k for y in 0 .. k cnt += 1 if s - x - y <= k && s - x - y >= 0 end end puts cnt
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) min_num = n + 1 count = 0 n . times do | i | if array [ i ] < min_num count += 1 min_num = array [ i ] end end puts count
n = gets . to_i ps = gets . chomp . split . map ( & :to_i ) current = 10 ** 9 cnt = 0 ps . each do | p | if p < current cnt += 1 current = p end end puts cnt
a = gets . chomp . to_i b = gets . chomp . split . map ( & :to_i ) c = 0 d = 0 f = b [ 0 ] b . each do | x | if f >= x d += 1 f = x end end puts d
N = gets . chomp . to_i P = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 min = Float :: INFINITY P . each_with_index do | p_i , i | min = [ min , p_i ] . min count += 1 if min == p_i end puts count
puts gets . chomp . split . sort . join == " 1479 " ? " YES " : " NO "
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) x = 0 y = 0 z = 0 count = 0 if k <= s then 0 . upto ( k ) do | i | x = i 0 . upto ( k ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end else 0 . upto ( s ) do | i | x = i 0 . upto ( s ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end end print ( "
puts gets ( p ) =~ / Y / ? " Four " : " Three "
K , S = gets . split . map ( & :to_i ) ans = 0 min = ( S / 3.0 ) . ceil ( min .. K ) . each do | a | rest = S - a next if rest > K * 2 minb = ( rest / 2.0 ) . ceil maxb = [ rest , K , a ] . min ( minb .. maxb ) . each do | b | c = rest - b if a == b if b == c ans += 1 else ans += 3 end elsif b == c ans += 3 else ans += 6 end end end p ans
C = ( 0 ... 3 ) . map { gets . split . map ( & :to_i ) } puts ( 0 ... 3 ) . all? { | a | ( 0 ... 3 ) . map { | b | C [ b ] [ ( a + 1 ) % 3 ] - C [ b ] [ a ] } . uniq . size == 1 && ( 0 ... 3 ) . map { | b | C [ ( a + 1 ) % 3 ] [ b ] - C [ a ] [ b ] } . uniq . size == 1 } ? " Yes " : " No "
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
ns = gets . split . map ( & :to_i ) if ns . include? ( 1 ) && ns . include? ( 9 ) && ns . include? ( 7 ) && ns . include? ( 4 ) puts ' YES ' else puts ' NO ' end
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if z . between? ( 0 , k ) end end puts cnt
require ' pp ' n = gets . chomp! . to_i p_n = gets . chomp! . split . map ( & :to_i ) count = 0 min = p_n [ 0 ] p_n . each do | a | if a <= min count += 1 min = a end end puts count
k , s = gets . split . map & :to_i h = { } ( k + 1 ) . times do | i | h [ i ] = 1 end hh = Array . new ( k ** 2 + 1 , 0 ) ( k + 1 ) . times do | i | h . each do | e | hh [ e [ 0 ] + i ] += e [ 1 ] end end if 3 * k >= s g = s - k g = 0 if g < 0 p hh [ g .. [ k * 2 , s ] . min ] . inject ( 0 ) { | s , i | s + i } else p 0 end
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) cnt = 0 if k * 3 < s cnt = 0 elsif k * 3 == s cnt = 1 else 0 . upto ( k ) do | a | 0 . upto ( s - a ) do | b | next if b > k || ( a + b ) > s cnt += 1 if s - a - b <= k end end end puts cnt
d = [ ] 5 . times do | i | d [ i ] = gets . strip . to_i end k = gets . to_i d . combination ( 2 ) do | a | if ( a [ 0 ] - a [ 1 ] ) . abs > k puts ' :( ' exit end end puts ' Yay! '
c = readlines . map { | line | line . chomp . split . map ( & :to_i ) } b = c [ 0 ] . map { | i | i - c [ 0 ] [ 0 ] } a = ( 0 .. 2 ) . map { | j | c [ j ] [ 0 ] - b [ 0 ] } d = ( 0 .. 2 ) . map { | i | ( 0 .. 2 ) . map { | j | a [ i ] + b [ j ] } } puts c == d ? :Yes : :No
C = [ ] 3 . times { C << gets . split . map ( & :to_i ) } if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] && C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] && C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] && C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] && C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] && C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] && C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] && C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] puts " Yes " else puts " No " end
n = gets . chomp . to_i arr = gets . chomp . split ( " " ) . map ( & :to_i ) sum = 0 min = 114514810 n . times do | i | if min > arr [ i ] then min = arr [ i ] sum += 1 end end puts sum
C = 3 . times . map { [ ] } 3 . times do | i | C [ i ] = gets . split . map ( & :to_i ) end N = 100 ans = ' No ' 0 . step 100 do | a1 | b1 = C [ 0 ] [ 0 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if [ C [ 0 ] [ 1 ] - a1 , C [ 1 ] [ 1 ] - a2 , C [ 2 ] [ 1 ] - a3 ] . uniq . size == 1 if [ C [ 0 ] [ 2 ] - a1 , C [ 1 ] [ 2 ] - a2 , C [ 2 ] [ 2 ] - a3 ] . uniq . size == 1 ans = ' Yes ' break end end end puts ans
c = Array . new ( 3 ) { Array . new ( 3 ) } 3 . times do | i | c [ i ] = gets . chomp . split ( " " ) . map ( & :to_i ) end a = [ ] b = [ ] a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] equal_c = true 3 . times do | i | 3 . times do | j | equal_c = false if a [ i ] + b [ j ] != c [ i ] [ j ] end end if equal_c puts " Yes " else puts " No " end
n = gets . chomp . to_i s = gets . chomp . split puts s . uniq . size == 4 ? ' Four ' : ' Three '
n = gets . to_i s = gets . strip . split puts s . uniq . length == 4 ? " Four " : " Three "
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) res = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && z <= k res += 1 end end end print ( "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( a - b ) . abs <= k && ( a - c ) . abs <= k && ( a - d ) . abs <= k && ( a - e ) . abs <= k && ( b - c ) . abs <= k && ( b - d ) . abs <= k && ( b - e ) . abs <= k && ( c - d ) . abs <= k && ( c - e ) . abs <= k && ( d - e ) . abs <= k ? ' Yay! ' : ' :( '
n = gets . to_i p = gets . chomp . split ( " " , n ) . map ( & :to_i ) ans = 0 min = p [ 0 ] p . each . with_index do | pp , i | if min >= pp ans += 1 end if min > pp min = pp end end p ans
r = 1 << 30 H , W = gets . split . map & :to_i M = H . times . map { gets . split . map & :to_i } H . times { | h | W . times { | w | s = 0 ; H . times { | i | W . times { | j | s += M [ i ] [ j ] * [ ( h - i ) . abs , ( w - j ) . abs ] . min } } ; r = [ r , s ] . min } } p r
n = gets . to_i puts gets . split . uniq . size == 3 ? :Three : :Four
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans , mn = 0 , 10 ** 6 Ps . each do | p | next if p > mn ans += 1 mn = p end puts ans
def ascan ; gets . split . map ( & :to_i ) ; end field = ( 0 .. 2 ) . map { ascan } ok = true 2 . times do | y | 2 . times do | x | ok &= field [ y ] [ x + 1 ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y + 1 ] [ x ] end end 2 . times do | x | 2 . times do | y | ok &= field [ y + 1 ] [ x ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y ] [ x + 1 ] end end puts ok ? " Yes " : " No "
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
puts ` dd ` . split . uniq . size > 4 ? :Four : :Three
require ' set ' ; require ' prime ' INF = Float :: INFINITY a = gets . chomp . split if a . sort . join ( ' ' ) == ' 1479 ' puts ' YES ' else puts ' NO ' end
k , s = gets . split . map & :to_i cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | ( [ s - x - k , f ] . max ) . upto ( k ) do | y | z = s - x - y cnt += 1 if z <= k && 0 <= z end end p cnt
n = gets . to_i s = gets . chomp . split cnt = 0 cl = Hash . new ( 0 ) s . each { | c | cl [ c ] += 1 } cl . each { | v | cnt += 1 } ( cnt == 3 ) ? ( puts " Three " ) : ( puts " Four " )
K , S = gets . split . map ( & :to_i ) a , b = if S <= K [ 0 , S ] elsif S <= 2 * K [ 0 , K ] else [ S - 2 * K , K ] end ans = ( a .. b ) . reduce ( 0 ) do | x , i | t = S - i x + ( t <= K ? t + 1 : 2 * K - t + 1 ) end puts ans
C = 3 . times . map { gets . split . map ( & :to_i ) } S = C . map { | row | row . inject ( 0 , & :+ ) } . inject ( 0 , & :+ ) r , m = S . divmod ( 3 ) if m == 0 && [ 0 , 1 , 2 ] . permutation . all? { | i , j , k | C [ 0 ] [ i ] + C [ 1 ] [ j ] + C [ 2 ] [ k ] == r } puts " Yes " else puts " No " end
bef = gets . split . map ( & :to_i ) 1 . upto ( 2 ) do aft = gets . split . map ( & :to_i ) d = aft [ 0 ] - bef [ 0 ] 1 . upto ( 2 ) do | j | if aft [ j ] - bef [ j ] != d puts " No " exit end end bef = aft end puts " Yes "
cc = 3 . times . map { gets . split . map ( & :to_i ) } cc . each do | c | mi = c . min 3 . times do | i | c [ i ] -= mi end end puts cc [ 0 ] == cc [ 1 ] && cc [ 1 ] == cc [ 2 ] ? ' Yes ' : ' No '
ARGF . each { | l | l . chomp . split ( ' ' ) . permutation ( 4 ) . to_a . each { | e | if e . join == ' 1974 ' puts ' YES ' exit end } } puts ' NO '
require ' pp ' N , d = gets . chomp . split ( ' ' ) . map { | n | n . to_i } S = gets . chomp . split ( ' ' ) . map { | n | n } if ( S . any? { | s | s == " Y " } ) puts " Four " else puts " Three " end
d , n = gets . split ( " " ) . map ( & :to_i ) t = Array . new ( d ) for i in 0 ... d t [ i ] = gets . to_i end a = Array . new ( n ) b = Array . new ( n ) c = Array . new ( n ) for i in 0 ... n a [ i ] , b [ i ] , c [ i ] = gets . split ( " " ) . map ( & :to_i ) end dp = Array . new ( n ) for i in 0 ... n if a [ i ] <= t [ 0 ] && t [ 0 ] <= b [ i ] dp [ i ] = 0 else dp [ i ] = - 1 end end for i in 1 ... d dpw = Array . new ( n , 0 ) for j in 0 ... n if a [ j ] <= t [ i ] && t [ i ] <= b [ j ] dpw [ j ] = 0 for k in 0 ... n if dp [ k ] >= 0 dpw [ j ] = [ dpw [ j ] , dp [ k ] + ( c [ k ] - c [ j ] ) . abs ] . max end end else dpw [ j ] = - 1 end end for j in 0 ... n dp [ j ] = dpw [ j ] end end all = 0 for i in 0 ... n all = [ all , dp [ i ] ] . max end print ( all , " \n " )
k , s = gets . split . map ( & :to_i ) puts ( [ 0 , s - 2 * k ] . max .. [ k , s ] . min ) . map { | x | [ k , s - x ] . min - [ 0 , s - x - k ] . max + 1 } . reduce ( :+ )
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end a1 = 0 b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 a2 = ary [ 1 ] [ 0 ] - b1 a3 = ary [ 2 ] [ 0 ] - b1 if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' else puts ' No ' end
grid = Array . new ( 3 ) 3 . times do | i | grid [ i ] = gets . split . map ( & :to_i ) end flag = false 0 . upto ( 100 ) do | a1 | b1 , b2 , b3 = grid [ 0 ] [ 0 ] - a1 , grid [ 0 ] [ 1 ] - a1 , grid [ 0 ] [ 2 ] - a1 if [ b1 , b2 , b3 ] . any? { | b | b < 0 } then next end if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 && grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 && grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 && grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 then flag = true break end end puts flag ? ' Yes ' : ' No '
antennas = 5 . times . map { gets . chomp . to_i } k = gets . chomp . to_i ( 0 .. 3 ) . each do | i | ( i + 1 .. 4 ) . each do | j | if antennas [ j ] - antennas [ i ] > k puts ' :( ' exit end end end puts ' Yay! '
ns = gets . chomp! . split ( " " ) ns = ns . map { | item | item = item . to_i } if ns . sort == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
eval " T,U,A,X,B,Y= " + ` dd ` . split * ?, x = ( A - B ) * T y = x + ( X - Y ) * U puts y == 0 ? :infinity : [ 0 , - x / y * 2 + ( x % y != 0 ? 1 : 0 ) ] . max
k , s = gets . split ( ' ' ) . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( z >= 0 && z <= k ) ans += 1 end end end puts ans
def saiki ( sumn , count ) if ( count == 3 ) if ( ( ( $s - sumn ) <= $k ) and ( ( $s - sumn ) >= 0 ) ) $ans += 1 end return end ( 0 .. $k ) . each do | d | sum = sumn + d saiki ( sum , ( count + 1 ) ) end end $k , $s = gets . chomp . split ( " " ) . map ( & :to_i ) $ans = 0 saiki ( 0 , 1 ) puts $ans
eval " K,S= " + gets . split * ?, ; p ( 0 .. K ) . map { | i | [ 0 , [ 2 * K - S + i , S - i ] . min + 1 ] . max } . inject ( :+ )
n = gets . to_i a = gets . split . map & :to_i res = 0 minv = 10 ** 9 a . each { | e | if e < minv res += 1 minv = e end } puts res
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if 0 <= z and z <= k count += 1 end end end puts count
require ' pp ' n = gets . to_i d = gets . split . map ( & :to_i ) cnt = 0 min = d . max + 1 d . each do | dd | if dd <= min min = dd cnt += 1 else end end p cnt
n = gets . chomp . to_i s = gets . chomp . split ( " " ) s . each do | item | if item == " Y " then puts " Four " exit end end puts " Three "
c = 3 . times . map { gets . split . map ( & :to_i ) } heIsRight = false a = Array . new ( 3 ) b = Array . new ( 3 ) isOut = false a [ 0 ] = 0 ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] isOut = true end end a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] isOut = true end end if ! isOut puts ' Yes ' else puts ' No ' end
module HinaArare def solve ( s ) for i in 1 .. s . size do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare gets s = gets . split ( " " ) puts solve ( s )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i output = " Yay! " antennas = [ a , b , c , d , e ] antennas_combi = antennas . combination ( 2 ) antennas_combi . each do | antenna_combi | if ( antenna_combi [ 0 ] - antenna_combi [ 1 ] ) . abs > k output = " :( " break end end puts output
c = 3 . times . map { gets . split . map ( & :to_i ) } a = [ ] b = [ ] ans = [ ] a [ 0 ] = 0 3 . times do | j | b [ j ] = c [ 0 ] [ j ] . to_i end ( 1 .. 2 ) . each { | i | a [ i ] = c [ i ] [ 0 ] . to_i - b [ 0 ] . to_i } a . each { | i | num = [ ] b . each { | j | num << i + j } ans << num } puts ( ans == c ) ? " Yes " : " No "
n = gets . to_i p = gets . split . map ( & :to_i ) m = 1 / 0.0 c = 0 n . times do | i | if p [ i ] <= m c += 1 m = p [ i ] end end puts c
( a , b , c , d , e ) = 5 . times . map { | _ | gets . to_i } k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
k , s = gets . split . map ( & :to_i ) count = 0 l = [ ] 0 . upto ( k ) do | x | unless ( x * 3 > s or 2 * k < s - x ) x . upto ( k ) do | y | unless ( x + y * 2 > s or k < s - x - y ) l << [ x , y , ( s - x - y ) ] . uniq end end end end l . each do | a | count += ( 0 .. a . size ) . inject ( :+ ) end puts count
n = gets . to_i a = gets . split . map ( & :to_i ) min = 10 ** 6 cnt = 0 a . each { | x | if x < min min = x cnt += 1 end } p cnt
N = gets . to_i P = gets . chomp . split ( ) . map ( & :to_i ) min = 0 answer = 0 N . times do | n | if n == 0 || min > P [ n ] min = P [ n ] answer = answer + 1 end end puts answer
ns = gets . split puts ns . sort . join == " 1479 " ? " YES " : " NO "
eval " T,U,A,X,B,Y= " + ` dd ` . split * ?, x , y = ( A - B ) * T , ( X - Y ) * U x , y = - x , - y if x > 0 puts x + y == 0 ? :infinity : ( s = - x / y += x ; s < 0 ? 0 : s * 2 + ( x % y > 0 ? 1 : 0 ) )
a = [ ] for i in 0 .. 5 a << gets . chomp . to_i end puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
a = [ ] ( 0 .. 5 ) . each do b = gets . chomp a <<b . to_i end a . combination ( 2 ) do | c | if c [ 1 ] - c [ 0 ] > a [ 5 ] puts ' :( ' exit end end puts ' Yay! '
C = readlines . map { | l | l . split . map ( & :to_i ) } require ' matrix ' a = Array . new ( 9 ) { Array . new ( 9 , 0 ) } b = Array . new ( 9 , 0 ) C . flatten . each_with_index do | c , i | x , y = i . divmod ( 3 ) y += 3 a [ i ] [ x ] = 1 a [ i ] [ y ] = 1 b [ i ] = c end m = Matrix [ * a ] em = m . hstack ( Matrix . column_vector ( b ) ) puts m . rank == em . rank ? ' Yes ' : ' No '
def array_sub ( left , right ) res = [ ] left . each_with_index do | num , i | res << num - right [ i ] end res end def contains_one ( array ) array . all? { | num | num == array [ 0 ] } end c1 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c2 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c3 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c_1 = [ c1 [ 0 ] , c2 [ 0 ] , c3 [ 0 ] ] c_2 = [ c1 [ 1 ] , c2 [ 1 ] , c3 [ 1 ] ] c_3 = [ c1 [ 2 ] , c2 [ 2 ] , c3 [ 2 ] ] subs = [ ] subs << array_sub ( c1 , c2 ) subs << array_sub ( c2 , c3 ) subs << array_sub ( c_1 , c_2 ) subs << array_sub ( c_2 , c_3 ) if subs . all? { | array | contains_one ( array ) } puts ' Yes ' else puts ' No ' end
k , s = STDIN . readline . strip . split ( ' ' ) . map ( & :to_i ) sum = 0 ( 0 .. k ) . each do | a | rest_a = s - a ( 0 .. k ) . each do | b | rest_b = rest_a - b next if rest_b < 0 or rest_b > k c = rest_b sum += 1 end end puts sum
N = gets . to_i p = [ ] p = gets . split . map ( & :to_i ) min = p [ 0 ] ans = 0 N . times do | i | if p [ i ] <= min ans += 1 end min = [ min , p [ i ] ] . min end puts ans
K , S = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. K for y in 0 .. K z = S - ( x + y ) if 0 <= z && z <= K count += 1 end end end print ( count )
gets a , c = 0 , 1 $< . each { | s | i = s . to_i a += ( i - 1 ) / c c += 1 if c == 1 || i == c } p a
antennas = [ ] 5 . times do | i | antennas . push ( gets . to_i ) end K = gets . to_i if antennas [ 4 ] - antennas [ 0 ] > K puts " :( " else puts " Yay! " end
c = readlines . map { | m | m . split . map ( & :to_i ) } a = [ 0 ] * 3 b = [ 0 ] * 3 ans = true 0 . upto ( 100 ) do | n | a [ 0 ] = n b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] 3 . times do | i | 3 . times do | j | ans = false if c [ i ] [ j ] != a [ i ] + b [ j ] end end break if ans == true end puts ans == true ? " Yes " : " No "
n = gets . to_i size = gets . split . uniq . size puts size == 4 ? ' Four ' : ' Three '
n = gets . chomp! . to_i p_n = gets . chomp! . split . map ( & :to_i ) count = 0 min = p_n [ 0 ] p_n . each do | a | if a <= min count += 1 min = a end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z <= k && z >= 0 ans += 1 end end end puts ans
n = gets . chomp . to_i ary_p = gets . split ( " " ) . map ( & :to_i ) min = ary_p [ 0 ] ans = 1 n . times do | i | if min > ary_p [ i ] ans += 1 min = ary_p [ i ] end end puts ans
puts $< . read . include? ( ' Y ' ) ? :Four : :Three
cs = $< . read . split . map ( & :to_i ) cs = cs . each_slice ( 3 ) . to_a i = 0 while i < 3 cs [ i ] = cs [ i ] . map { | c | c - cs [ i ] . min } i += 1 end cs = cs . transpose i = 0 while i < 3 cs [ i ] = cs [ i ] . map { | c | c - cs [ i ] . min } i += 1 end b = cs . flatten . inject ( & :+ ) == 0 puts ( b ? ' Yes ' : ' No ' )
puts gets . split . sort . join == ' 1479 ' ? ' YES ' : ' NO '
k , s = gets . chomp . split . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) if 0 <= z && z <= k cnt += 1 end end end puts cnt
n = gets . to_i s = gets . chomp . split h = Hash . new { 0 } n . times do | i | h [ s [ i ] ] += 1 end puts h . size == 3 ? " Three " : " Four "
a , b = gets . chomp . split ( " " ) . map ( & :to_i ) num = 0 ( a + 1 ) . times do | k | ( a + 1 ) . times do | j | res = b - k - j if 0 <= res && res <= a num += 1 end end end puts num
n = gets . to_i p = gets . split . map ( & :to_i ) arr = p . map . with_index { | pi , i | [ i , pi ] } . sort { | a , b | a [ 1 ] <=> b [ 1 ] } . map { | a | a [ 0 ] } tmp = arr [ 0 ] ans = 1 i = 1 until tmp == 0 if tmp > arr [ i ] ans += 1 tmp = arr [ i ] end i += 1 end p ans
input = gets . chomp . to_i hina = gets . chomp . split . map ( & :to_s ) sum = hina . uniq if sum . count == 3 puts " Three " else puts " Four " end
ary_1 = gets . split ( " " ) . map ( & :to_i ) ary_2 = gets . split ( " " ) . map ( & :to_i ) ary_3 = gets . split ( " " ) . map ( & :to_i ) if ary_1 [ 1 ] - ary_1 [ 0 ] == ary_2 [ 1 ] - ary_2 [ 0 ] && ary_1 [ 1 ] - ary_1 [ 0 ] == ary_3 [ 1 ] - ary_3 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_2 [ 2 ] - ary_2 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_3 [ 2 ] - ary_3 [ 0 ] puts " Yes " else puts " No " end
k , s = gets . split . map ( & :to_i ) ret = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | ret += 1 if s - x - y >= 0 && s - x - y <= k end end puts ret
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if z >= 0 && z <= k ans += 1 end y += 1 end x += 1 end puts ans
n = gets . to_i p = gets . split ( " " ) . map ( & :to_i ) dp = Array . new ( n ) dp [ 0 ] = p . first ( 0 .. ( n - 2 ) ) . each do | i | dp [ i + 1 ] = [ p [ i + 1 ] , dp [ i ] ] . min end count = 1 ( 1 .. ( n - 1 ) ) . each do | i | count += 1 if dp [ i - 1 ] >= p [ i ] end puts count
n = gets . chomp . to_i s_arr = gets . chomp . split ( " " ) if s_arr . any? { | s | s == " Y " } then puts " Four " else puts " Three " end
arrays = [ ] 3 . times { | i | arrays << gets . chomp . split ( ' ' ) . map ( & :to_i ) } a = Array . new ( 3 , nil ) b = Array . new ( 3 , nil ) 101 . times do | i | a [ 0 ] = i b [ 0 ] = arrays [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = arrays [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = arrays [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = arrays [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = arrays [ 2 ] [ 2 ] - b [ 2 ] next if a . any? { | t | t < 0 } || b . any? { | t | t < 0 } corrects = [ ] 3 . times do | j | 3 . times do | k | corrects << ( arrays [ j ] [ k ] == ( a [ j ] + b [ k ] ) ) end end if corrects . all? puts ' Yes ' exit end end puts ' No '
k , s = gets . split . map ( & :to_i ) sum = 0 ( 0 .. k ) . each do | num1 | ( 0 .. k ) . each do | num2 | if num1 + num2 <= s && num1 + num2 + k >= s sum += 1 end end end puts sum
K , S = gets . split . map ( & :to_i ) cnt = 0 min_x = [ 0 , S - 2 * K ] . max max_x = [ K , S ] . min min_x . upto ( max_x ) do | i | rest = S - i if rest <= K cnt += rest + 1 else cnt += K - ( rest - K ) + 1 end end puts cnt
n , m , a , b = gets . chomp . split . map ( & :to_i ) arr = gets . chomp . split . map ( & :to_i ) keep , drop = [ ] , [ ] k = false arr . each { | x | k = true if x < a if k keep << x else drop << x end } if keep . length < m while ! drop . empty? && drop . last <= b drop . pop end end puts drop . length
def get_nums gets . split . map ( & :to_i ) end def init_matrix ( row_num , row_length , default = nil ) Array . new ( row_num ) . map { Array . new ( row_length , default ) } end n = gets . to_i nums = get_nums current_min = 10 ** 6 res = 0 nums . each do | i | if current_min >= i res += 1 current_min = i end end puts res
n = gets . to_i p = gets . split . map ( & :to_i ) vmin = n cnt = 0 n . times do | i | vmin = [ vmin , p [ i ] ] . min cnt += 1 if p [ i ] <= vmin end puts cnt
puts ` dd ` [ ?Y ] ? :Four : :Three
n , m , a , b , * d = $< . read . split . map ( & :to_i ) d = d . take_while { | e | e >= a } . reverse d = d . drop_while { | e | e <= b } if n - d . size < m p d . size
n = gets . to_i s = gets . chomp . split puts s . include? ( ' Y ' ) ? ' Four ' : ' Three '
N = gets . to_i P = gets . split . map & :to_i m = P [ 0 ] cnt = 0 N . times { | i | if P [ i ] <= m cnt += 1 m = P [ i ] end } p cnt
n = gets . to_i s = [ ] s = gets . split ( " " ) ycnt = 0 n . times do | i | if s [ i ] == " Y " ycnt += 1 end end if ycnt != 0 print ( " Four \n " ) else print ( " Three \n " ) end
puts gets ( p ) [ ?Y ] ? :Four : :Three
a = 3 . times . map { gets . chomp . split . map ( & :to_i ) } d = Array . new ( 2 ) { Array . new ( 3 ) } ( 0 .. 2 ) . each do | i | d [ 0 ] [ i ] = a [ i ] [ 0 ] - a [ i ] [ 1 ] d [ 1 ] [ i ] = a [ i ] [ 0 ] - a [ i ] [ 2 ] end key = 1 ( 0 .. 1 ) . each do | i | if d [ i ] . min != d [ i ] . max key = 0 end end puts key == 1 ? " Yes " : " No "
puts ( { true => ' YES ' , false => ' NO ' } [ gets . chomp . split ( ' ' ) . sort . join == ' 1479 ' ] )
def f ( a , t ) s = 0 xs = a . map ( & :first ) a . each do | x , y | s += y * ( xs - [ x ] ) . map { | u | ( t - u ) . to_f / ( x - u ) } . inject ( :* ) end s end loop do d = gets . to_i break if d == 0 points = ( 0 .. d + 2 ) . map { | x | [ x , gets . to_f ] } ( 0 .. d + 2 ) . each do | i | a = points . dup a . delete_at ( i ) x_c , y_c = a . pop d = ( y_c - f ( a , x_c ) ) . abs if d < 0.001 puts i break end end end
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) min = 2 * 10 ** 6 count = 0 ps . each do | p | if min >= p count += 1 end min = [ min , p ] . min end puts count
n = gets . chomp . split . map ( & :to_i ) ans = true [ 1 , 9 , 7 , 4 ] . each do | e | ans = false unless n . include? ( e ) end puts ans ? " YES " : " NO "
n = gets . chomp . split ( ' ' ) . map ( & :to_i ) a = [ 0 , 0 , 0 , 0 ] 4 . times do | i | if n [ i ] == 1 a [ 0 ] += 1 elsif n [ i ] == 9 a [ 1 ] += 1 elsif n [ i ] == 7 a [ 2 ] += 1 elsif n [ i ] == 4 a [ 3 ] += 1 end end if a [ 0 ] == 1 && a [ 1 ] == 1 && a [ 2 ] == 1 && a [ 3 ] == 1 puts " YES " else puts " NO " end
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] && c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] puts " Yes " else puts " No " end
puts gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? :YES : :NO
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z . between? ( 0 , k ) end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? " :( " : " Yay! "
n = gets . to_i ps = gets . chomp . split . map ( & :to_i ) m = [ ] n . times do | i | if i != 0 m << [ m [ - 1 ] , ps [ i ] ] . min else m << ps [ i ] end end puts ( 0 ... n ) . to_a . count { | i | ps [ i ] == m [ i ] }
INF = 1 << 29 def contain ( names ) contained = [ ] names . permutation ( 2 ) . each do | s , t | contained << t if s . include? ( t ) end contained . each { | name | names . delete ( name ) } names end def overlap ( names , size ) mapping = size . times . map { [ 0 ] * size } ( 0 ... size ) . to_a . permutation ( 2 ) . each do | i , j | k = [ @len [ i ] , @len [ j ] ] . min loop do if names [ i ] [ @len [ i ] - k .. - 1 ] == names [ j ] [ 0 , k ] mapping [ i ] [ j ] = k break end k -= 1 end end mapping end while n = gets . to_i break if n == 0 s = n . times . map { gets . chomp } s = contain ( s ) m = s . size @len = s . map { | name | name . size } dp_table = overlap ( s , m ) dp_cache = ( 1 << m ) . times . map { [ INF ] * m } m . times { | i | dp_cache [ 1 << i ] [ i ] = @len [ i ] } ( 1 << m ) . times do | bits | m . times do | i | next if dp_cache [ bits ] [ i ] == INF pre = dp_cache [ bits ] [ i ] m . times do | j | next if i == j || ( bits | ( 1 << j ) ) == bits if dp_cache [ bits | ( 1 << j ) ] [ j ] > pre + @len [ j ] - dp_table [ i ] [ j ] dp_cache [ bits | ( 1 << j ) ] [ j ] = pre + @len [ j ] - dp_table [ i ] [ j ] end end end end p dp_cache [ ( 1 << m ) - 1 ] . min end
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) i = 0 c = 0 while i <= k j = 0 while j <= k l = s - i - j c += 1 if l >= 0 && l <= k j += 1 end i += 1 end p c
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = 0 Ps . each_with_index do | n , i | min = n if ( min == 0 || n <= min ) ans += 1 if min >= n end puts ans
gets ; puts gets . split . uniq . size == 3 ? :Three : :Four
res = 0 k , n = gets . split . map ( & :to_i ) 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | res += 1 if n - ( x + y ) <= k && 0 <= n - ( x + y ) end end puts res
N = gets . to_i P = gets . split . map ( & :to_i ) ans = 0 min = 200001 N . times do | i | if P [ i ] < min min = P [ i ] ans = ans + 1 end end puts ans
K , S = gets . chomp . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | if 0 <= S - x - y && S - x - y <= K cnt += 1 end end end puts cnt
N = gets . to_i A = N . times . map { gets . to_i } ans = A [ 0 ] - 1 cur = 2 1 . upto ( N - 1 ) do | i | a = A [ i ] if cur == a cur += 1 ans += a / cur elsif a % cur == 0 ans += ( a - ( 2 * cur ) ) / cur + 1 else ans += a / cur end end puts ans
i = gets . chomp . split ( " " ) . map ( & :to_i ) one , nine , seven , four = false i . each do | hoge | one = true if hoge == 1 nine = true if hoge == 9 seven = true if hoge == 7 four = true if hoge == 4 end if one and nine and seven and four then puts " YES " else puts " NO " end
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY N = get_i . sort . join ( " " ) puts yn_judge ( N == " 1479 " , " YES " , " NO " )
gets puts gets . split . uniq . size == 3 ? " Three " : " Four "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
require ' pp ' def gets_i_list ( ) gets . chomp . split ( " " ) . map ( & :to_i ) end b = [ ] b . push ( gets_i_list ) b . push ( gets_i_list ) b . push ( gets_i_list ) b . each_with_index do | row , i | b1 , b2 , b3 = row bb1 , bb2 , bb3 = b [ i - 1 ] if b1 - bb1 == b2 - bb2 && b2 - bb2 == b3 - bb3 && b1 - bb1 == b3 - bb3 else puts " No " exit end end puts " Yes "
N = gets . to_i P = gets . split . map ( & :to_i ) cnt = 0 min = 999999999 ( 0 .. ( N - 1 ) ) . each do | i | if P [ i ] <= min min = P [ i ] end if ! ( P [ i ] > min ) cnt += 1 end end puts cnt
n = gets . to_i p = gets . split . map ( & :to_i ) min = 2 * ( 10 ** 5 ) count = 0 n . times do | i | count += 1 if min >= p [ i ] min = p [ i ] if min > p [ i ] end puts count
c11 , c12 , c13 = gets . split . map ( & :to_i ) c21 , c22 , c23 = gets . split . map ( & :to_i ) c31 , c32 , c33 = gets . split . map ( & :to_i ) if c21 - c11 == c22 - c12 && c22 - c12 == c23 - c13 && c31 - c21 == c32 - c22 && c32 - c22 == c33 - c23 && c12 - c11 == c22 - c21 && c22 - c21 == c32 - c31 && c13 - c12 == c23 - c22 && c23 - c22 == c33 - c32 puts " Yes " else puts " No " end
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | i | c1 = i break if c1 > s next if s > 2 * k + c1 ( [ s - c1 , k ] . min + 1 ) . times do | j | c2 = c1 + j break if c2 > s next if s > k + c2 ans += 1 if s - c2 <= k end end p ans
c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) c3 = gets . split . map ( & :to_i ) b1 = 1000 b2 = 1000 b3 = 1000 ans = 0 ( 0 .. 100 ) . each do | a1 | a2 = a1 - ( c1 [ 0 ] - c2 [ 0 ] ) a3 = a1 + ( c3 [ 0 ] - c1 [ 0 ] ) if a2 < 0 || a3 < 0 || a2 > 100 || a3 > 100 next else b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if b1 < 0 || b2 < 0 || b3 < 0 || b1 > 100 || b2 > 100 || b3 > 100 next else score = [ [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ] c22 = c2 [ 1 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 1 ] c32 = c3 [ 1 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 1 ] c23 = c2 [ 2 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 2 ] c33 = c3 [ 2 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 2 ] if c22 && c32 && c23 && c33 ans += 1 end end end end if ans > 0 then puts ' Yes ' else puts ' No ' end
K , S = gets . split ( " " ) . map ( & :to_i ) c = 0 for i in 0 .. K do for j in 0 .. K do if S - ( i + j ) <= K && 0 <= S - ( i + j ) then c += 1 end end end puts c
a = [ ] 5 . times do | i | a [ i ] = gets . to_i end k = gets . to_i dis = [ ] 5 . times do | i | 5 . times do | j | dis . push ( ( a [ i ] - a [ j ] ) . abs ) end end success = true dis . each do | d | if d > k then puts " :( " success = false break end end puts ' Yay! ' if success
INF = 1 << 29 def contain ( names ) contained = [ ] names . permutation ( 2 ) . each do | s , t | contained << t if s . include? ( t ) end contained . each { | name | names . delete ( name ) } names end def overlap ( names , size ) overlap_size = size . times . map { [ 0 ] * size } ( 0 ... size ) . to_a . permutation ( 2 ) . each do | i , j | k = [ @len [ i ] , @len [ j ] ] . min loop do if names [ i ] [ @len [ i ] - k .. - 1 ] == names [ j ] [ 0 , k ] overlap_size [ i ] [ j ] = k break end k -= 1 end end overlap_size end while n = gets . to_i break if n == 0 s = n . times . map { gets . chomp } s = contain ( s ) m = s . size @len = s . map { | name | name . size } overlap_size = overlap ( s , m ) dp = ( 1 << m ) . times . map { [ INF ] * m } m . times { | i | dp [ 1 << i ] [ i ] = @len [ i ] } ( 1 << m ) . times do | bits | m . times do | i | if ( bits & ( 1 << i ) ) != 0 pre = dp [ bits ] [ i ] m . times do | j | bit = 1 << j if ( bits & bit ) == 0 if dp [ bits | bit ] [ j ] > pre + @len [ j ] - overlap_size [ i ] [ j ] dp [ bits | bit ] [ j ] = pre + @len [ j ] - overlap_size [ i ] [ j ] end end end end end end p dp [ ( 1 << m ) - 1 ] . min end
a , b , c = gets . split . map ( & :to_i ) d , e , f = gets . split . map ( & :to_i ) g , h , i = gets . split . map ( & :to_i ) ok = true if ! ( a - d == b - e && b - e == c - f ) ok = false elsif ! ( d - g == e - h && e - h == f - i ) ok = false elsif ! ( a - b == d - e && d - e == g - h ) ok = false elsif ! ( b - c == e - f && e - f == h - i ) ok = false end puts ok ? " Yes " : " No "
n = gets . chomp . to_i s = gets . chomp . split puts s . uniq . size == 3 ? ' Three ' : ' Four '
K , S = gets . chomp . split . map ( & :to_i ) count = 0 for i in 0 .. K do for j in 0 .. K do rem = S - i - j count += 1 if rem >= 0 && rem <= K end end puts count
k , s = gets . split . map ( & :to_i ) cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | f . upto ( k ) do | y | z = s - x - y next if k < z || z < 0 cnt += 1 end end p cnt
grid = 3 . times . map { gets . split . map ( & :to_i ) } 0 . upto ( grid [ 0 ] [ 0 ] ) do | b1 | a1 = grid [ 0 ] [ 0 ] - b1 0 . upto ( grid [ 1 ] [ 1 ] ) do | b2 | a2 = grid [ 1 ] [ 1 ] - b2 next if a1 + b2 != grid [ 0 ] [ 1 ] next if a2 + b1 != grid [ 1 ] [ 0 ] 0 . upto ( grid [ 2 ] [ 2 ] ) do | b3 | a3 = grid [ 2 ] [ 2 ] - b3 next if a1 + b3 != grid [ 0 ] [ 2 ] next if a2 + b3 != grid [ 1 ] [ 2 ] next if a3 + b1 != grid [ 2 ] [ 0 ] next if a3 + b2 != grid [ 2 ] [ 1 ] puts ' Yes ' exit end end end puts ' No '
n = gets . split ( ' ' ) if n . include? ( ' 1 ' ) && n . include? ( ' 9 ' ) && n . include? ( ' 7 ' ) && n . include? ( ' 4 ' ) puts ' YES ' else puts ' NO ' end
s = $stdin . gets s = s . split for e in 0 ... s . length s [ e ] = s [ e ] . to_i end counter = 0 for i in 0 .. s [ 0 ] max = s [ 1 ] - i <= s [ 0 ] ? s [ 1 ] - i : s [ 0 ] for j in 0 .. max k = s [ 1 ] - i - j if k >= 0 && k <= s [ 0 ] then counter += 1 end end end print counter
a = gets . split ; puts $< . all? { | s | s . split . zip ( a ) . map { | t | eval t * " - " } . uniq . size < 2 } ? :Yes : :No
require ' matrix ' cs = 3 . times . map { gets . chomp . split . map ( & :to_i ) } d1 = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d2 = [ [ 0 , 2 ] , [ 1 , 1 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d3 = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d4 = [ [ 0 , 2 ] , [ 1 , 0 ] , [ 2 , 1 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) if [ d1 , d2 , d3 , d4 ] . uniq . size == 1 puts " Yes " else puts " No " end
ks = gets . chomp . split k = ks [ 0 ] . to_i s = ks [ 1 ] . to_i count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - ( x + y ) count += 1 if 0 <= z && z <= k end end puts count
gets ; puts gets . split . include? ( ' Y ' ) ? " Four " : " Three "
line = readlines numlines = line [ 1 ] nums = numlines . split ( ' ' ) ans = 1 if nums . length == 1 else min = nums [ 0 ] . to_i nums . each do | num | if num . to_i < min ans += 1 min = num . to_i end end end puts ans
table = 3 . times . map { gets . split . map ( & :to_i ) } table2 = table . transpose diffs = table [ 0 ] . each_cons ( 2 ) . map { | a , b | a - b } diffs2 = table2 [ 0 ] . each_cons ( 2 ) . map { | a , b | a - b } if table . all? { | row | row . each_cons ( 2 ) . map { | a , b | a - b } == diffs } && table2 . all? { | row | row . each_cons ( 2 ) . map { | a , b | a - b } == diffs2 } puts ' Yes ' else puts ' No ' end
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = Ps . max N . times do | i | min = [ Ps [ i ] , min ] . min if Ps [ i ] > min then next else ans += 1 end end puts ans
k , s = gets . chomp . split . map ( & :to_i ) ans = 0 for i in 0 .. k for j in 0 .. k z = s - i - j if z >= 0 and z <= k ans += 1 end end end p ans
h , w = gets . split . map ( & :to_i ) a = ( 1 .. h ) . map { gets . split . map ( & :to_i ) } p ( 0 .. h - 1 ) . to_a . product ( ( 0 .. w - 1 ) . to_a ) . map { | i , j | ( 0 .. h - 1 ) . to_a . product ( ( 0 .. w - 1 ) . to_a ) . map { | y , x | a [ y ] [ x ] * [ ( i - y ) . abs , ( j - x ) . abs ] . min } . inject ( :+ ) } . min
n = gets . to_i s = gets . split p_flag = false w_flag = false g_flag = false y_flag = false ( 0 .. n - 1 ) . each do | i | case s [ i ] when ' P ' then p_flag = true when ' W ' then w_flag = true when ' G ' then g_flag = true when ' Y ' then y_flag = true end end cnt = 0 [ p_flag , w_flag , g_flag , y_flag ] . each do | i | if i == true cnt += 1 end end if cnt == 3 puts " Three " else puts " Four " end
ns = gets . split . map ( & :to_i ) ans = ' NO ' if ns . include? ( 1 ) && ns . include? ( 9 ) && ns . include? ( 7 ) && ns . include? ( 4 ) ans = ' YES ' end puts ans
arr_1 = gets . split . map ( & :to_i ) arr_2 = gets . split . map ( & :to_i ) arr_3 = gets . split . map ( & :to_i ) a1 , a2 , a3 = 0 , 0 , 0 while a1 <= arr_1 [ 0 ] b1 = arr_1 [ 0 ] - a1 while a2 <= arr_1 [ 1 ] b2 = arr_2 [ 1 ] - a2 if a1 + b2 == arr_2 [ 0 ] && a2 + b1 == arr_1 [ 1 ] while a3 <= arr_1 [ 2 ] b3 = arr_3 [ 2 ] - a3 if a1 + b3 == arr_3 [ 0 ] && a3 + b1 == arr_1 [ 2 ] if a2 + b3 == arr_3 [ 1 ] && a3 + b2 == arr_2 [ 2 ] print ( " Yes \n " ) exit end end a3 += 1 end end a3 = 0 a2 += 1 end a2 = 0 a1 += 1 end print ( " No \n " )
gets ; puts gets . count ( " Y " ) > 0 ? :Four : :Three
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y ans += 1 if z >= 0 && z <= K end end puts ans
cs = 3 . times . map { gets . chomp . split . map ( & :to_i ) } a = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } b = [ [ 0 , 2 ] , [ 1 , 1 ] , [ 2 , 0 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } c = [ [ 0 , 0 ] , [ 1 , 2 ] , [ 2 , 1 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } d = [ [ 0 , 1 ] , [ 1 , 0 ] , [ 2 , 2 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } puts [ a , b , c , d ] . uniq . size == 1 ? " Yes " : " No "
gets . to_i puts gets . split ( " " ) . uniq . size == 4 ? " Four " : " Three "
puts $< . map { | s | s . split . map ( & :to_i ) } . map { | a , b , c | [ a - b , b - c ] } . uniq . length == 1 ? " Yes " : " No "
_ = gets puts gets . chomp . split . uniq . size == 3 ? " Three " : " Four "
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x break if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
nums = gets . split . map ( & :to_i ) nums = nums . sort x = nums [ 0 ] * 1000 + nums [ 1 ] * 100 + nums [ 2 ] * 10 + nums [ 3 ] if x == 1479 puts " YES " else puts " NO " end
c0 = gets . split . map ( & :to_i ) c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) a0 = 0 b0 = c0 [ 0 ] b1 = c0 [ 1 ] b2 = c0 [ 2 ] a1 = c1 [ 0 ] - b0 a2 = c2 [ 0 ] - b0 if a1 + b1 == c1 [ 1 ] && a1 + b2 == c1 [ 2 ] && a2 + b1 == c2 [ 1 ] && a2 + b2 == c2 [ 2 ] puts ' Yes ' else puts ' No ' end
str = gets . split T1 , T2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split a1 , a2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split b1 , b2 = str [ 0 ] . to_i , str [ 1 ] . to_i if T1 * a1 + T2 * a2 == T1 * b1 + T2 * b2 puts " infinity " exit end if ( a1 - b1 ) * ( a2 - b2 ) > 0 puts 0 exit end if a1 < b1 swap = a1 a1 = b1 b1 = swap swap = a2 a2 = b2 b2 = swap end if a1 * T1 + a2 * T2 > T1 * b1 + T2 * b2 puts 0 exit end dif1 = T1 * a1 - b1 * T1 dif2 = T1 * b1 + T2 * b2 - a1 * T1 - a2 * T2 answer = ( dif1 / dif2 ) * 2 + 1 if dif1 % dif2 == 0 answer -= 1 end puts answer
MOD = 10 ** 9 + 7 cnt = 0 ; sum = 0 ; prev = nil ; can = true ; h = Hash . new ( 0 ) def gs ( ) gets . chomp end def gi ( ) gets . chomp . to_i end def gsmi ( ) gets . chomp . split . map ( & :to_i ) end def desc ( ar ) ar . sort! { | x , y | y <=> x } end def min ( a , b ) a <= b ? a : b end def max ( a , b ) a >= b ? a : b end def sum ( ar ) ar . inject ( :+ ) end def C ( a , b ) b == 0 || a == b ? 1 : ( b = a - b if a / 2 < b ; ( a - b + 1 .. a ) . inject ( :* ) / ( 1 .. b ) . inject ( :* ) ) end def rui ( ar ) s = [ 0 ] ; ar . size . times { | i | s <<s [ - 1 ] + ar [ i ] } ; s end def rev_rui ( ar ) s = [ 0 ] ; ar . size . times . reverse_each { | i | s <<s [ - 1 ] + ar [ i ] } ; s end def puts_yesno ( b ) puts ( b ? ' Yes ' : ' No ' ) end def putsend ( s ) puts s ; exit end def debug ( k , v ) puts " n = gi pp = gsmi prevmin = 2 * 10 ** 5 + 1 n . times do | i | cnt += 1 if prevmin >= pp [ i ] prevmin = pp [ i ] if prevmin > pp [ i ] end puts cnt
k , s = gets . split . map & :to_i cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i [ a , b , c , d , e ] . each do | p | [ a , b , c , d , e ] . each do | q | if q - p > k then puts " :( " exit end end end puts " Yay! "
N = gets . to_i P = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 P . each do | n | if min > n min = n ans += 1 end end puts ans
n = gets . to_i a = gets . split . map ( & :to_i ) num = 0 min = 200000 ( 0 ... n ) . each do | i | if a [ i ] <= min num += 1 min = a [ i ] end end puts num
c = [ ] 3 . times do c << gets . chomp . split . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in 0 .. 2 for j in 0 .. 2 if c [ i ] [ j ] != a [ i ] + b [ j ] puts ' No ' exit end end end puts ' Yes '
arr = [ ] 5 . times do arr . push gets . strip . to_i end k = gets . strip . to_i r = ' Yay! ' 4 . downto ( 1 ) do | i | i . downto ( 0 ) do | j | if ( arr [ i ] - arr [ j ] ) > k r = ' :( ' break end end end puts r
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts [ a , b , c , d , e ] . combination ( 2 ) . find { | i , j | k < ( i - j ) . abs } ? ' :( ' : ' Yay! '
n = gets . to_i p = gets . split ( ) . map ( & :to_i ) num = 1000000 ans = 0 p . each do | i | num = [ num , i ] . min next if i != num ans += 1 end puts ans
a = 5 . times . map { gets . to_i } k = gets . to_i puts a . max - a . min > k ? " :( " : " Yay! "
board = 3 . times . map { gets . split . map ( & :to_i ) } horizontal_diff_list = [ board [ 0 ] [ 0 ] - board [ 0 ] [ 1 ] , board [ 0 ] [ 1 ] - board [ 0 ] [ 2 ] ] vertical_diff_list = [ board [ 0 ] [ 0 ] - board [ 1 ] [ 0 ] , board [ 1 ] [ 0 ] - board [ 2 ] [ 0 ] ] horizontal_ok = ( 1 .. 2 ) . all? do | i | [ board [ i ] [ 0 ] - board [ i ] [ 1 ] , board [ i ] [ 1 ] - board [ i ] [ 2 ] ] == horizontal_diff_list end vertical_ok = ( 1 .. 2 ) . all? do | j | [ board [ 0 ] [ j ] - board [ 1 ] [ j ] , board [ 1 ] [ j ] - board [ 2 ] [ j ] ] == vertical_diff_list end ans = horizontal_ok && vertical_ok ? ' Yes ' : ' No ' puts ans
c = [ ] 3 . times { c << gets . split . map ( & :to_i ) } if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] puts " Yes " else puts " No " end
def doit ( str , min , cnt ) p = str . to_i if p < min cnt += 1 min = p end [ min , cnt ] end n = gets . to_i str = ' ' nums = [ ] min = 9999999 cnt = 0 while true c = $stdin . getc if 48 <= c . ord && c . ord <= 57 str << c else min , cnt = doit ( str , min , cnt ) if c == ' ' str = ' ' else break end end end puts cnt
puts [ C = $< . map { | s | s . split . map & :to_i } , C . transpose ] . any? { | x | x . map { | a , b , c | [ a - b , b - c ] } . uniq [ 1 ] } ? :No : :Yes
gets puts gets =~ / Y / ? " Four " : " Three "
X = gets . to_i ans = 2 X . times do ans = 2 * ( ans + 1 ) end puts ans
n = gets . to_i p = gets . split . map ( & :to_i ) min = Float :: INFINITY count = 0 for i in 0 .. n - 1 if p [ i ] <= min min = p [ i ] count += 1 end end puts count
input = readlines ( ) a = input . shift ( ) . chomp . to_i b = input . shift ( ) . chomp . to_i c = input . shift ( ) . chomp . to_i d = input . shift ( ) . chomp . to_i e = input . shift ( ) . chomp . to_i k = input . shift ( ) . chomp . to_i res = ' Yay! ' [ a , b , c , d , e ] . each_with_index do | a1 , i1 | [ a , b , c , d , e ] . each_with_index do | a2 , i2 | next if i1 >= i2 res = ' :( ' if ( a2 - a1 ) . abs > k end end puts res
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( x + y <= s && s - x - y <= k ) end end puts cnt
N = gets . to_i nums = gets . split . map ( & :to_i ) min = Float :: INFINITY cnt = 0 nums . each do | pi | if pi < min min = pi cnt += 1 end end p cnt
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } b = [ c [ 0 ] [ 0 ] , c [ 1 ] [ 0 ] , c [ 2 ] [ 0 ] ] if c [ 0 ] [ 1 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] && c [ 1 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 1 ] - b [ 2 ] && c [ 0 ] [ 2 ] - b [ 0 ] == c [ 1 ] [ 2 ] - b [ 1 ] && c [ 1 ] [ 2 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] puts " Yes " else puts " No " end
n = gets . to_i puts gets . chomp . split ( " " ) . include? ( " Y " ) ? :Four : :Three
c = [ ] x , y = [ 0 ] , [ ] 3 . times do | i | c << gets . chomp . split . map ( & :to_i ) end 3 . times do | i | y [ i ] = c [ 0 ] [ i ] - x [ 0 ] end 3 . times do | i | x [ i ] = c [ i ] [ 0 ] - y [ 0 ] end 3 . times do | i | 3 . times do | j | if x [ i ] + y [ j ] != c [ i ] [ j ] puts " No " exit end end end puts " Yes "
Q = ' ?+??+???==??? ' q0 = Q . size . times . select { | i | Q [ i ] == ' ? ' } a = gets . split . map ( & :to_i ) a . each_with_index { | e , i | Q [ q0 [ i ] ] = e . to_s if e != - 1 } q1 = Q . size . times . select { | i | Q [ i ] == ' ? ' } p ( [ * 1 .. 9 ] - a ) . permutation . count { | a | s = Q . dup a . each_with_index { | e , i | s [ q1 [ i ] ] = e . to_s } eval s }
n = gets . to_i nums = gets . split . map ( & :to_i ) res = 0 min = n + 1 n . times do | i | if min > nums [ i ] res += 1 min = nums [ i ] end end puts res
k , s = gets . split . map ( & :to_i ) cnt = 0 for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if z >= 0 && z <= k && s == x + y + z cnt += 1 end end end puts cnt
n = [ ] for i in 1 .. 5 do n << gets . to_i end k = gets . to_i puts n . max - n . min > k ? ' :( ' : ' Yay! '
n = gets . to_i num = gets . strip . split . map ( & :to_s ) if num . include? ( " Y " ) puts " Four " else puts " Three " end
K , S = gets . split . map ( & :to_i ) cnt = 0 z = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y cnt = cnt + 1 if ( z >= 0 ) && ( z <= K ) end end puts cnt
n = gets . to_i arr = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 min = n + 1 i = 0 while i < arr . size if arr [ i ] <= min count += 1 min = arr [ i ] end i += 1 end puts count
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | x | y_z = S - x next if y_z < 0 next if K * 2 < y_z ( 0 .. K ) . each do | y | z = y_z - y next if z < 0 next if K < z ans += 1 end end p ans
ae = [ ] 5 . times { | i | ae << gets . to_i } k = gets . to_i ae . each do | i | ae . each do | j | if ( i - j ) . abs > k puts ' :( ' exit 0 end end end puts ' Yay! '
n = gets . to_i p_input = gets . chomp . split n . times do | i | p_input [ i ] = p_input [ i ] . to_i end count = 0 min = p_input [ 0 ] n . times do | i | result = true min = p_input [ i ] if p_input [ i ] < min result = false if ! ( p_input [ i ] <= min ) count += 1 if result end puts count
m = gets . to_i n = gets . chomp . split . map ( & :to_i ) ans = 0 min = 10 ** 10 for i in 0 .. m - 1 if n [ i ] <= min ans += 1 min = n [ i ] end end puts ans
AR = [ ] 5 . times { AR << gets . to_i } k = gets . to_i if AR [ 4 ] - AR [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
n = gets . to_i numbers = gets . split . map ( & :to_i ) maximum = numbers [ 0 ] count = 0 numbers . each do | number | if number <= maximum count += 1 maximum = number end end puts count
n = gets . to_i p = gets . split . map ( & :to_i ) min_p = 1000000 count = 0 for i in 0 ... n do if p [ i ] <= min_p count += 1 min_p = p [ i ] end end puts count
n = gets . to_i a = gets . chomp . split if a . include? ' Y ' puts " Four " else puts " Three " end
n = gets . to_i s = gets puts ( s . index ( ?Y ) ) ? ' Four ' : ' Three '
k , s = gets . strip . split ( ' ' ) . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) if z >= 0 && z <= k count += 1 end end end puts count
n = gets arr = gets . chomp . split puts ( arr . include? " Y " ) ? " Four " : " Three "
N = gets . to_i Ss = gets . chomp . split if Ss . uniq . length == 3 then puts ( " Three " ) elsif Ss . uniq . length == 4 then puts ( " Four " ) end
N = gets . to_i AS = N . times . map { gets . to_i } x = 1 num = 0 AS . each do | a | if x == 1 num += a - 1 a = 1 elsif x < a if a % x == 0 num += ( a - 1 ) / x a = x - 1 else num += a / x a %= x end end if x == a x += 1 end end puts num
k , s = gets . split . map ( & :to_i ) puts ( 0 .. [ k , s ] . min ) . inject ( 0 ) { | t , x | t + ( 0 .. [ k , s - x ] . min ) . count { | y | s - x - y <= k } }
number = gets . split ( ' ' ) k = number [ 0 ] . to_i s = number [ 1 ] . to_i count = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if z <= k and z >= 0 then count = count + 1 end end end puts count
$> << [ :Three , :Four ] [ $< . read . index ( " Y " ) ? 1 : 0 ]
a = gets . chomp . to_i nums = gets . chomp . split ( " " ) . map ( & :to_i ) min = 200000 count = 0 ( 0 ... a ) . each do | i | if nums [ i ] <= min min = nums [ i ] count += 1 end end puts count
gets s = gets . chomp . split puts s . uniq . size == 3 ? ' Three ' : ' Four '
K , S = gets . split . map ( & :to_i ) k = K + 1 way = 0 k . times do | x | k . times do | y | xy = x + y z = S - xy way += 1 if z >= 0 && z <= K end end p way
n = gets . to_i variation = gets . split . uniq . length if variation == 3 puts ' Three ' else puts ' Four ' end
x = Array . new ( 3 , 0 ) y = Array . new ( 3 , 0 ) ary = 3 . times . map { gets . split . map ( & :to_i ) } 3 . times { | i | y [ i ] = ary [ 0 ] [ i ] - x [ 0 ] } 3 . times { | i | x [ i ] = ary [ i ] [ 0 ] - y [ 0 ] } flg = true 3 . times do | i | 3 . times do | j | flg = false if x [ i ] + y [ j ] != ary [ i ] [ j ] end end puts flg ? ' Yes ' : ' No '
g = Array . new ( 3 ) do t = gets . strip . split ( " " ) . map ( & :to_i ) [ t [ 0 ] - t [ 1 ] , t [ 0 ] - t [ 2 ] ] end if g [ 0 ] == g [ 1 ] && g [ 1 ] == g [ 2 ] puts " Yes " else puts " No " end
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . chomp . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end a = get_int b = get_int c = get_int d = get_int e = get_int k = get_int if e - a > k puts ' :( ' else puts ' Yay! ' end
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a <= k puts " Yay! " else puts " :( " end
c = [ ] 3 . times do c . push gets . split . map ( & :to_i ) end diff_raw = Array . new ( 3 ) . map { | e | [ ] } diff_column = Array . new ( 3 ) . map { | e | [ ] } 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_raw [ i ] . push ( c [ i ] [ j ] - c [ i - 1 ] [ j ] ) end end 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_column [ j ] . push ( c [ i ] [ j ] - c [ i ] [ j - 1 ] ) end end if diff_raw . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] && diff_column . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] puts ' Yes ' else puts ' No ' end
input = $stdin . read . split ( " \n " ) n = input . shift . to_i as = input . map ( & :to_i ) stepcount = as . shift - 1 minvalue = 2 as . each do | currency | if currency == minvalue minvalue = minvalue + 1 else currency > minvalue stepcount = stepcount + ( ( currency - 1 ) / minvalue ) end end puts stepcount
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if k < e - a puts " :( " else puts " Yay! " end
module Memoizable def memoize ( name ) original = " __original_ ([Class, Module].include?(self.class) ? self : self.class).class_eval { alias_method(original, name) private(original) cache = {} define_method(name){|*args| cache[args] ||= send(original, *args) } } end end def addition(s1, s2) match_len = s2.size-1 match_len -= 1 until match_len == 0 || s1 =~ / s2.size - match_len end include Memoizable memoize :addition loop { n = gets.to_i break if n == 0 names = (1..n).map{gets.chomp} trivial = [] names.combination(2){|a, b| trivial << b if a =~ / trivial << a if b =~ / } trivial.uniq! n -= trivial.size names -= trivial names << " " a = { } ( 0 .. n ) . to_a . permutation ( 2 ) { | i , j | a [ [ i , j ] ] = addition ( names [ i ] , names [ j ] ) } table = [ { n => 0 } ] ( 1 .. ( 1 << n ) - 1 ) . each { | x | table [ x ] = Hash . new ( Float :: INFINITY ) t = table [ x ] is = ( 0 .. n - 1 ) . select { | i | x [ i ] == 1 } is . each { | i | y = x - ( 1 << i ) last_name = names [ i ] table [ y ] . each { | k , len | l = len + a [ [ k , i ] ] t [ i ] = l if l < t [ i ] } } } p table [ ( 1 << n ) - 1 ] . values . min }
n = gets . to_i P_arr = gets . chomp . split . map ( & :to_i ) counter = 0 P_max = P_arr . max n . times do | i | if P_max >= P_arr [ i ] counter += 1 P_max = P_arr [ i ] end end p counter
n = gets . chomp . split . sort puts ( n == ' 1974 ' . split ( " " ) . sort ) ? " YES " : " NO "
n = gets . to_i ss = gets . chomp . split x = ss . uniq . size if x == 3 puts ( " Three " ) else puts ( " Four " ) end
k , s = gets . split . map & :to_i c = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | next unless ( 0 .. k ) . include? ( s - x - y ) c += 1 end end p c
k , s = gets . strip . split . map ( & :to_i ) result = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | result += 1 if s - ( x + y ) <= k && s - ( x + y ) >= 0 end end puts result
K , S = gets . split . map ( & :to_i ) c = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = ( S - ( x + y ) ) if 0 <= z && z <= K c += 1 end end end puts c
n = gets . to_i s = gets . chomp . split ( " " ) a = s . count { | color | color == " Y " } if a != 0 puts " Four " else puts " Three " end
K , S = gets . split ( " " ) . map ( & :to_i ) cnt = 0 for i in 0 .. K do for j in 0 .. K do k = S - i - j if k >= 0 && k <= K then cnt = cnt + 1 end end end puts ( cnt )
N = gets . to_i P = gets . split . map ( & :to_i ) count = 1 P . inject { | min , i | count += 1 if i < min ; [ min , i ] . min } puts count
gets r = gets . to_i - 1 x = 2 $< . each { | _ | e = _ . to_i r += ( e - 1 ) / x if e == x x += 1 end } p r
gets puts gets . chomp . split . uniq . size == 4 ? " Four " : " Three "
def sub_a ( x , y ) ret = [ ] 3 . times { | i | ret << x [ i ] - y [ i ] } ret end def eq3 ( x , y , z ) x == y && y == z && x == z ? true : false end c = [ ] comp = [ ] 3 . times { c << gets . split . map ( & :to_i ) } comp << sub_a ( c [ 0 ] , c [ 1 ] ) comp << sub_a ( c [ 0 ] , c [ 2 ] ) comp << sub_a ( c [ 1 ] , c [ 2 ] ) d = c . transpose comp << sub_a ( d [ 0 ] , d [ 1 ] ) comp << sub_a ( d [ 0 ] , d [ 2 ] ) comp << sub_a ( d [ 1 ] , d [ 2 ] ) comp . each do | x | unless eq3 ( x [ 0 ] , x [ 1 ] , x [ 2 ] ) puts " No " exit end end puts " Yes "
require ' set ' def s ( ) gets ( ) end def i ( ) gets . to_i end def li ( ) gets . split . map ( & :to_i ) end def ili ( ) n = gets . to_i as = gets . split . map ( & :to_i ) [ n , as ] end cs = [ ] 3 . times { cs << li ( ) } cs_t = cs . transpose res = true 2 . times { | i | res &&= Set . new ( cs [ 0 ] . zip ( cs [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 res &&= Set . new ( cs_t [ 0 ] . zip ( cs_t [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 } if res puts " Yes " else puts " No " end
ns = gets . split . map ( & :to_i ) if ns . sort == [ 1 , 4 , 7 , 9 ] puts ' YES ' else puts ' NO ' end
k , s = gets . split . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | break if x > s 0 . upto ( k ) do | y | break if x + y > s next if x + y + k < s cnt += 1 end end puts cnt
a = [ ] 3 . times do a << gets . split . map ( & :to_i ) end m = Array . new ( 2 ) { Array . new ( 3 , 0 ) } mm = Array . new ( 2 ) { Array . new ( 3 , 0 ) } 2 . times do | i | 3 . times do | j | m [ i ] [ j ] = a [ j ] [ i + 1 ] - a [ j ] [ i + 1 ] mm [ i ] [ j ] = a [ i ] [ j ] - a [ i + 1 ] [ j ] end end 2 . times do | i | if ( 1 < m [ i ] . uniq . size or 1 < mm [ i ] . uniq . size ) puts " No " exit end end puts " Yes "
k , s = gets . strip . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } puts ans
n = gets . to_i p = gets . split . map ( & :to_i ) min = 10 ** 6 count = 0 n . times do | i | if min > p [ i ] count += 1 min = p [ i ] end end puts count
ca = Array . new ( 5 ) { gets . to_i } k = gets . to_i puts ( ca [ 4 ] - ca [ 0 ] > k ) ? " :( " : " Yay! "
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - ( x + y ) count += 1 if 0 <= z && z <= K end end puts count
l1 = gets . split . map ( & :to_i ) l2 = gets . split . map ( & :to_i ) l3 = gets . split . map ( & :to_i ) f1 = false f2 = false ( - 100 .. 100 ) . each do | i | lb1 = l1 . map { | v | v - i } ( - 100 .. 100 ) . each do | j | lb2 = l2 . map { | v | v - j } lb3 = l3 . map { | v | v - j } f1 = true if lb2 == lb1 f2 = true if lb3 == lb1 end end if f1 && f2 puts ' Yes ' else puts ' No ' end
def can_communication ( x , y , k ) ( y - x ) . abs <= k end a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i res = can_communication ( b , a , k ) res = res && can_communication ( c , a , k ) res = res && can_communication ( d , a , k ) res = res && can_communication ( e , a , k ) res = res && can_communication ( c , b , k ) res = res && can_communication ( d , b , k ) res = res && can_communication ( e , b , k ) res = res && can_communication ( d , c , k ) res = res && can_communication ( e , c , k ) res = res && can_communication ( e , d , k ) puts res ? " Yay! " : " :( "
n = gets . chop . to_i arr = gets . chop . split . map ( & :to_i ) result = 0 min = arr [ 0 ] for i in 0 .. arr . size - 1 back_row = i == 0 ? i : i - 1 back_number = arr [ back_row ] if arr [ i ] <= min result += 1 min = arr [ i ] end end print result
K , S = gets . split . map ( & :to_i ) tot = 0 ( 0 .. K ) . each do | a | ( 0 .. K ) . each do | b | c = S - a - b tot += 1 if 0 <= c && c <= K end end puts tot
n = gets . split . map ( & :to_i ) for i in 0 .. 3 if n [ i ] == 1 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 9 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 7 break end if i == 3 puts " NO " exit end end for i in 0 .. 3 if n [ i ] == 4 break end if i == 3 puts " NO " exit end end puts " YES "
n = gets . chomp . split ( " " ) . map { | a | a . to_i } answer = " NO " if n . include? ( 1 ) if n . include? ( 7 ) if n . include? ( 9 ) if n . include? ( 4 ) answer = " YES " end end end end puts answer
ks = gets . strip k , s = ks . split ( ' ' ) . map ( & :to_i ) count = 0 combs = Array ( 0 .. k ) . repeated_permutation ( 2 ) combs . each do | x , y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) end puts count
n = STDIN . gets . split . map ( & :to_i ) . sort if n == [ 1 , 4 , 7 , 9 ] puts ' YES ' else puts ' NO ' end
d , n = gets . strip . split ( ' ' ) . map { | s | s . to_i } ts = d . times . map { gets . strip . to_i } wears = n . times . map { gets . strip . split ( ' ' ) . map { | s | s . to_i } } max_dc = [ ] for i in ( 0 ... n ) if wears [ i ] [ 0 ] <= ts [ 0 ] && ts [ 0 ] <= wears [ i ] [ 1 ] max_dc << [ wears [ i ] [ 2 ] , 0 ] end end for j in ( 1 ... d ) p_max_dc = max_dc max_dc = [ ] for i in ( 0 ... n ) if wears [ i ] [ 0 ] <= ts [ j ] && ts [ j ] <= wears [ i ] [ 1 ] ci = wears [ i ] [ 2 ] sdc = 0 for pmdc in p_max_dc pci , psdc = pmdc dc = ( ci - pci ) . abs + psdc sdc = dc if sdc < dc end max_dc << [ ci , sdc ] end end end puts max_dc . map { | mdc | mdc [ 1 ] } . max
i = gets . to_i ary = gets . chomp . split ( " " ) puts [ " P " , " W " , " G " , " Y " ] . all? { | n | ary . include? ( n ) } ? " Four " : " Three "
n = gets . split ( " " ) . map ( & :to_i ) puts n . sort . join == ' 1479 ' ? ' YES ' : ' NO '
N = gets . to_i P = gets . split . map ( & :to_i ) min = Float :: INFINITY count = 0 N . times do | i | unless P [ i ] > min count += 1 min = P [ i ] end end puts count
gets ; puts ( gets . chomp . split . uniq . size == 3 ) ? " Three " : " Four "
n = gets . to_i array = gets . chop . split . map ( & :to_i ) count = 0 tmp = array [ 0 ] array . each do | num | if tmp > num tmp = num end if tmp >= num count += 1 end end puts count
ary = $stdin . read . lines . map ( & :to_i ) 5 . times do | i | 5 . times do | j | if ( ary [ i ] - ary [ j ] ) > ary [ 5 ] puts " :( " exit end end end puts " Yay! "
puts ( gets . split . sort * ' ' == " 1479 " ? " YES " : " NO " )
n = gets . to_i ps = gets . split . map ( & :to_i ) max = ps . first count = 0 ps . each do | p0 | if p0 <= max count += 1 max = p0 end end puts count
c = 3 . times . map { gets . split . map ( & :to_i ) } x = [ ] ; y = [ ] x [ 0 ] = 0 3 . times { | i | y [ i ] = c [ 0 ] [ i ] - x [ 0 ] } 3 . times { | i | x [ i ] = c [ i ] [ 0 ] - y [ 0 ] } res = ' Yes ' ( 0 .. 2 ) . each do | i | ( 0 .. 2 ) . each do | j | res = ' No ' if x [ i ] + y [ j ] != c [ i ] [ j ] end end puts res
k , s = gets . split ( " " ) . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
k , s = gets . split . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) cnt += 1 if 0 <= z && z <= k end end puts cnt
input_lines = [ ] 5 . times do input_lines << gets . chomp . to_i end k = gets . chomp . to_i if ( input_lines [ 4 ] - input_lines [ 0 ] ) > k print " :( " else print " Yay! " end
a = gets . to_i gets gets gets e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
n = gets . to_i pontas = gets . split . map ( & :to_i ) answer = 0 minimum = pontas [ 0 ] pontas . each do | ponta | answer += 1 if ponta <= minimum minimum = ponta if minimum > ponta end puts answer
k , s = gets . chomp . split . map ( & :to_i ) answer = 0 arr = [ ] for a in 0 .. k break if a > s for b in 0 .. k break if a + b > s c = s - a - b answer += 1 if c <= k end end puts answer
s = 5 . times . map { gets . split . map ( & :to_i ) } k = gets . to_i puts s . combination ( 2 ) . count { | i | ( i [ 0 ] [ 0 ] - i [ 1 ] [ 0 ] ) . abs > k } > 0 ? " :( " : " Yay! "
K , S = gets . chomp . split . map { | v | v . to_i } x = y = z = ( 0 .. K ) . to_a c = 0 ( 0 .. K ) . to_a . each do | xv | xs = S - xv break if xs < 0 next if 0 < xs - K - K ( 0 .. K ) . to_a . each do | yv | break if xs - yv < 0 ys = xs - yv next if 0 < ys - K c += 1 end end puts c
c = Array . new ( 3 ) 3 . times do | i | c [ i ] = gets . split . map ( & :to_i ) end d = [ 0 , c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ] e = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] truth = true 3 . times do | i | 3 . times do | j | truth &= ( c [ 0 ] [ 0 ] + d [ j ] + e [ i ] == c [ i ] [ j ] ) end end if truth puts " Yes " else puts " No " end
c = 3 . times . map { gets . split . map ( & :to_i ) } if ( c [ 0 ] . map { | ci | ci - c [ 0 ] [ 0 ] } == c [ 1 ] . map { | ci | ci - c [ 1 ] [ 0 ] } ) && ( c [ 0 ] . map { | ci | ci - c [ 0 ] [ 0 ] } == c [ 2 ] . map { | ci | ci - c [ 2 ] [ 0 ] } ) && ( c . transpose [ 0 ] . map { | ci | ci - c . transpose [ 0 ] [ 0 ] } == c . transpose [ 1 ] . map { | ci | ci - c . transpose [ 1 ] [ 0 ] } ) && ( c . transpose [ 0 ] . map { | ci | ci - c . transpose [ 0 ] [ 0 ] } == c . transpose [ 2 ] . map { | ci | ci - c . transpose [ 2 ] [ 0 ] } ) puts ' Yes ' else puts ' No ' end
c1 = gets . split . map ( & :to_i ) ; c2 = gets . split . map ( & :to_i ) ; c3 = gets . split . map ( & :to_i ) ; if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] and c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] if c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] and c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] if c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] and c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] if c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] and c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] and c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] puts " Yes " exit end end end end end end puts " No "
arr = [ ] a = [ 0 ] b = [ ] 3 . times do arr << gets . split ( " " ) . map ( & :to_i ) end for i in 0 .. 2 do b << arr [ 0 ] [ i ] - a [ 0 ] end for i in 1 .. 2 do a << arr [ i ] [ 0 ] - b [ 0 ] end for i in 0 .. 2 do for j in 0 .. 2 do unless arr [ i ] [ j ] == a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
N = gets . to_i S = gets . split puts S . include? ( " Y " ) ? " Four " : " Three "
N = gets . to_i P = gets . split . map ( & :to_i ) ans = 0 min = P [ 0 ] P . each do | pi | if pi <= min ans += 1 min = pi end end puts ans
N = gets . to_i a = gets . split . uniq . count puts ' Four ' if a === 4 ; puts ' Three ' if a === 3 ;
k , s = gets . split ( " " ) . map { | v | v . to_i } if k >= s then puts ( s + 2 ) * ( s + 1 ) / 2 exit end if s >= 2 * k then t = 3 * k - s puts ( t + 2 ) * ( t + 1 ) / 2 exit end puts ( s + 2 ) * ( s + 1 ) / 2 - ( s - k ) * ( s - k + 1 ) / 2 * 3
row_1_ary = STDIN . gets . split . map ( & :to_i ) row_2_ary = STDIN . gets . split . map ( & :to_i ) row_3_ary = STDIN . gets . split . map ( & :to_i ) all_ary = [ row_1_ary , row_2_ary , row_3_ary ] bol = true 0 . upto ( 1 ) { | i | 0 . upto ( 1 ) { | j | if all_ary [ i ] [ j ] - all_ary [ i ] [ j + 1 ] != all_ary [ i + 1 ] [ j ] - all_ary [ i + 1 ] [ j + 1 ] bol = false end } } puts bol == true ? ' Yes ' : ' No '
n = gets puts gets . split . uniq . size == 3 ? " Three " : " Four "
K , S = gets . split . map & :to_i ans = 0 mn = [ 0 , S - K * 2 ] . max mx = [ K , S ] . min for x in mn .. mx rest = S - x if rest <= K a = rest + 1 else d = rest - K a = K - d + 1 end ans += a end p ans
points = 5 . times . map { gets . to_i } n = gets . to_i puts points . product ( points ) . all? { | a , b | ( a - b ) . abs <= n } ? ' Yay! ' : ' :( '
n = gets . to_i nums = gets . split . map ( & :to_i ) min = nums [ 0 ] count = 0 n . times do | i | if min >= nums [ i ] count += 1 min = nums [ i ] end end puts count
a = 3 . times . map { gets . split . map ( & :to_i ) } . sort . transpose . sort . transpose yes = 2 . times . all? do a = a . transpose 2 . times . all? do | i | a [ i ] [ 1 ] - a [ i ] [ 0 ] == a [ i + 1 ] [ 1 ] - a [ i + 1 ] [ 0 ] && a [ i ] [ 2 ] - a [ i ] [ 1 ] == a [ i + 1 ] [ 2 ] - a [ i + 1 ] [ 1 ] end end puts yes ? " Yes " : " No "
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | ans += 1 if s - ( x + y ) >= 0 && s - ( x + y ) <= k end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? " Yay! " : " :( "
gets p = gets . split . map ( & :to_i ) c = Float :: INFINITY ans = 0 p . each do | n | if n < c c = n ans += 1 end end puts ans
k , s = gets . split . map & :to_i count = 0 for x in 0 .. k do for y in 0 .. k do z = s - ( x + y ) if z >= 0 && z <= k && x + y + z == s count += 1 end end end puts count
max , ans = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. max ) . each do | x | ( 0 .. max ) . each do | y | z = ans - x - y count += 1 if x + y + z == ans && z <= max && z >= 0 end end puts count
antena = [ ] 5 . times do antena << gets . to_i end k = gets . to_i antena . combination ( 2 ) . to_a . each do | i , j | if ( i - j ) . abs > k puts " :( " exit end end puts " Yay! "
k , s = gets . chomp . split . map ( & :to_i ) arr = ( 0 .. k ) counter = 0 arr . each do | x | arr . each do | y | z = s - ( x + y ) counter += 1 if 0 <= z && z <= k end end puts counter
towers = [ ] 5 . times do towers . push ( gets . to_i ) end k = gets . to_i if towers [ 4 ] - towers [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
n = gets . split . map ( & :to_i ) . sort puts n == [ 1 , 4 , 7 , 9 ] ? :YES : :NO
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) ; min = 10 ** 6 + 1 count = 0 ps . each do | p | if min > p min = p count += 1 end end puts count
k , s = gets . split . map & :to_i ; p ( 0 ... ( k += 1 ) * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
C = ( 1 .. 3 ) . map { gets . split . map & :to_i } a = [ 0 , nil , nil ] b = ( 0 ... 3 ) . map { | i | C [ 0 ] [ i ] - a [ 0 ] } for i in 1 .. 2 a [ i ] = C [ i ] [ 0 ] - b [ 0 ] end for i in 0 ... 3 for j in 0 ... 3 if C [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
n = gets . to_i ps = gets . split . map ( & :to_i ) ans = 1 min = ps . shift ps . each do | p | if min >= p ans += 1 min = p end end puts ans
N = gets . to_i nums = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 nums . each_with_index do | ai | if ai < min min = ai ans += 1 end end p ans
/ n,a,b=gets.split.map(&:to_i) / / . sort / / S = gets.chomp.chars / a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i count = 0 if ( e - a > k || e - b > k || e - c > k || e - d > k ) puts " :( " else puts " Yay! " end
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) min_list = [ ] min = Float :: INFINITY P . each do | n | min = [ n , min ] . min min_list << min end cnt = 0 P . each . with_index do | n , i | cnt += 1 if P [ i ] <= min_list [ i ] end puts cnt
N = gets . to_i Ss = gets . split puts Ss . any? { | s | s == ' Y ' } ? ' Four ' : ' Three '
n = gets . to_i size = gets . split . uniq . size puts size == 4 ? ' Four ' : ' Three '
k , s = gets . split . map ( & :to_i ) count = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | z = s - i - j count += 1 if 0 <= z && z <= k end end puts count
k , s = gets . split . map ( & :to_i ) p ( [ 0 , s - k * 2 ] . max .. [ s , k ] . min ) . reduce ( 0 ) { | t , x | yz = s - x ; t + 1 + ( yz < k ? yz : k * 2 - yz ) }
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) da1 = t1 * a1 db1 = t1 * b1 df1 = da1 - db1 da2 = t2 * a2 db2 = t2 * b2 df2 = da2 - db2 if df1 > 0 df1 *= - 1 df2 *= - 1 end if df1 + df2 == 0 puts " infinity " elsif df1 + df2 < 0 puts 0 else s = - 1 * df1 / ( df1 + df2 ) t = ( - 1 * df1 ) % ( df1 + df2 ) if t == 0 ans = s * 2 else ans = s * 2 + 1 end end puts ans
n = gets . to_i ary = gets . split . map ( & :to_i ) min = ary . first ans = 1 ( 1 .. n - 1 ) . each do | i | if ary [ i ] < min ans += 1 min = ary [ i ] end end puts ans
def test ( k , s ) cnt = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if 0 <= z and z <= k cnt += 1 end end end puts cnt end input = gets k , s = input . split ( ' ' ) . map { | n | n . to_i } test ( k , s )
puts ` dd ` . split . uniq . size > 4 ? ' Four ' : ' Three '
n = gets . chomp . to_i a = [ ] n . times { a . push ( gets . chomp . to_i ) } ans = a [ 0 ] - 1 a [ 0 ] = 1 th = 2 ( 1 ... n ) . each { | i | if a [ i ] == th th += 1 else ans += ( a [ i ] - th - 1 ) / th + 1 end } puts ans
k , s = gets . split . map & :to_i l = k + 1 a = 0 l . times do | x | l . times do | y | z = s - x - y a += 1 if z >= 0 && z <= k end end puts a
i = readlines . map ( & :chomp ) v = i . map ( & :to_i ) if v [ 4 ] - v [ 0 ] <= v [ 5 ] puts " Yay! " else puts " :( " end
n = gets . to_i p = gets . split . map ( & :to_i ) min = 200001 count = 1 min = p [ 0 ] ( n - 1 ) . times do | i | if min > p [ i + 1 ] min = p [ i + 1 ] end if min >= p [ i + 1 ] count += 1 end end print count
input_lines = readlines length = input_lines . length i = 0 while i < length input_lines [ i ] = input_lines [ i ] . chomp . to_i i += 1 end if ( input_lines [ 4 ] - input_lines [ 0 ] ) > input_lines [ 5 ] print " :( " else print " Yay! " end
c = [ ] 3 . times { c << gets . split ( ) . map ( & :to_i ) } d = Array . new ( 3 ) . map { Array . new ( 3 , 0 ) } ( 0 .. 2 ) . each do | i | ( 0 .. 2 ) . each do | j | d [ i ] [ j ] = c [ i ] [ 0 ] + c [ 0 ] [ j ] - c [ 0 ] [ 0 ] end end puts c == d ? :Yes : :No
MOD = 10 ** 9 + 7 cnt = 0 ; sum = 0 ; prev = nil ; can = true ; h = Hash . new ( 0 ) def gs ( ) gets . chomp end def gi ( ) gets . to_i end def gsmi ( ) gets . chomp . split . map ( & :to_i ) end def desc ( ar ) ar . sort { | x , y | y <=> x } end def min ( a , b ) a <= b ? a : b end def max ( a , b ) a >= b ? a : b end def sum ( ar ) ar . inject ( :+ ) end def C ( a , b ) b == 0 || a == b ? 1 : ( b = a - b if a / 2 < b ; ( a - b + 1 .. a ) . inject ( :* ) / ( 1 .. b ) . inject ( :* ) ) end def puts_yesno ( can ) puts ( can ? ' Yes ' : ' No ' ) end def putsend ( s ) puts s ; exit end def debug ( k , v ) puts " t1 , t2 = gsmi gcd = t1 . gcd ( t2 ) t1 /= gcd t2 /= gcd a1 , a2 = gsmi b1 , b2 = gsmi da1 = t1 * a1 da2 = t2 * a2 db1 = t1 * b1 db2 = t2 * b2 da = da1 + da2 db = db1 + db2 diff = ( da - db ) . abs putsend ' infinity ' if diff == 0 putsend 0 if da > db && da1 >= db1 || da < db && da1 <= db1 d = ( da1 - db1 ) . abs cnt = ( d / diff . to_f ) . ceil * 2 cnt += 1 if d % diff == 0 cnt -= 1 puts cnt
_ = gets print gets . split . uniq . size == 3 ? " Three " : " Four "
ns = gets . split . map ( & :to_i ) . sort if ns == [ 1 , 4 , 7 , 9 ] puts ( ' YES ' ) else puts ( ' NO ' ) end
N = gets . to_i ary = gets . split ( " " ) . map ( & :to_i ) ary_min = ary . min min = 2000000 count = 0 ary . each do | i | if min > i count += 1 min = i end break if i == ary_min end puts count
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end max_n = ary . flatten . max 0 . upto ( max_n ) do | a1 | b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 0 . upto ( max_n ) do | a2 | 0 . upto ( max_n ) do | a3 | if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' exit end end end end puts ' No '
n = gets . to_i arr = gets . chop . split . map ( & :to_i ) min = arr . first cnt = 0 for i in 0 .. n - 1 do if min >= arr [ i ] cnt += 1 min = arr [ i ] end end puts cnt
N = gets . chomp . to_i S = gets . chomp puts S . include? ( ' Y ' ) ? " Four " : " Three "
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | z = s - i - j if 0 <= z && z <= k cnt += 1 end end end puts cnt
K , S = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y cnt += 1 if z >= 0 && z <= K end end p cnt
a = [ ] 6 . times { | i | a [ i ] = gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
N = gets . to_i Ss = gets . chomp . split puts Ss . include? ( ' Y ' ) ? ' Four ' : ' Three '
gets s = gets . chomp . split ( " " ) if s . count { | c | c == " Y " } > 0 then puts " Four " else puts " Three " end
k , s = gets . split . map { | s | s . to_i } ans = 0 ( k + 1 ) . times do | x | sx = s - x ( k + 1 ) . times do | y | z = sx - y if z > k or 0 > z next else ans += 1 end end end puts ans
arr = Array . new ( 5 ) 5 . times do | i | arr [ i ] = gets . chomp . to_i end k = gets . chomp . to_i puts arr . max - arr . min > k ? " :( " : " Yay! "
gets ; puts gets . split ( ' ' ) . uniq . size == 3 ? " Three " : " Four "
n = gets . to_i arr = [ ] min = 1000000 count = 0 arr = gets . chomp . split ( " " ) . map ( & :to_i ) arr . each do | x | if min > x min = x count = count + 1 end end print ( "
K , S = gets . split . map ( & :to_i ) ans = 0 0 . upto K do | i | 0 . upto K do | j | h = S - i - j ans += 1 if 0 <= h and h <= K end end puts ans
n = gets . to_i s = gets . chomp . split a = s . uniq . count if a == 3 puts " Three " else puts " Four " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if ( b - a <= k ) && ( c - a <= k ) && ( d - a <= k ) && ( e - a <= k ) && ( c - b <= k ) && ( d - b <= k ) && ( e - b <= k ) && ( d - c <= k ) && ( e - c <= k ) && ( e - d <= k ) puts " Yay! " else puts " :( " end
k , s = gets . chomp . split . map ( & :to_i ) ans = 0 for i in 0 .. k for j in 0 .. k ans += 1 if s - i - j <= k && s - i - j >= 0 end end puts ans
_n , * hinaarare = $stdin . read . split ans = hinaarare . uniq . size == 4 ? " Four " : " Three " puts ans
ARG_N = gets . to_i ARG_P = gets . split . map ( & :to_i ) smallest = 2 * ( 10 ** 5 ) + 1 result = 0 ARG_P . each do | x | if x <= smallest smallest = x result += 1 end end puts result
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
d = gets . chomp . split . map ( & :to_i ) if d . include? ( 1 ) && d . include? ( 9 ) && d . include? ( 7 ) && d . include? ( 4 ) puts ' YES ' else puts ' NO ' end
require ' set ' while 1 n , m = gets . split . map ( & :to_i ) break if n == 0 && m == 0 g = { } ( 1 .. n ) . each { | i | g [ i ] = [ ] } m . times do i , j = gets . split . map ( & :to_i ) g [ i ] << j g [ j ] << i end color = { 1 => 0 } queue = [ 1 ] until queue . empty? i = queue . shift c = color [ i ] g [ i ] . each do | j | if color [ j ] && color [ j ] != 1 - c queue = [ ] color = nil break elsif ! color [ j ] color [ j ] = 1 - c queue << j end end end ans = Set . new if color k = color . values . count ( 0 ) if k . even? ans << k / 2 end if ( n - k ) . even? ans << ( n - k ) / 2 end end p ans . size puts ans . sort end
n = gets . chomp s = gets . chomp . split if s . include? ( ' Y ' ) puts ' Four ' else puts ' Three ' end
k , s = gets . split . map ( & :to_i ) sum = 0 ( 0 .. k ) . each do | num | rest = s - num sum += [ [ ( k * 2 ) - rest + 1 , rest + 1 ] . min , 0 ] . max end puts sum
N = STDIN . gets . to_i s = STDIN . gets . split ( ' ' ) . uniq . size puts s == 3 ? ' Three ' : ' Four '
inputs = [ ] 5 . times { inputs << gets . to_i } k = gets . to_i puts inputs . combination ( 2 ) . map { | e | e [ 1 ] - e [ 0 ] } . any? { | e | e > k } ? ' :( ' : ' Yay! '
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 xStart = ( s - 2 * k < 0 ) ? 0 : ( s - 2 * k ) xEnd = ( s < k ) ? s : k for x in xStart .. xEnd do yStart = ( s - x - k < 0 ) ? 0 : ( s - x - k ) yEnd = ( s < x + k ) ? ( s - x ) : k for y in yStart .. yEnd do z = s - x - y count += 1 if 0 <= z && z <= k end end puts count
gets puts gets . index ( ' Y ' ) ? " Four " : " Three "
c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) c3 = gets . split . map ( & :to_i ) ans = ' No ' 100 . times do | i | a1 = i b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if ( c2 [ 0 ] - b1 == c2 [ 1 ] - b2 ) && ( c2 [ 1 ] - b2 == c2 [ 2 ] - b3 ) if ( c3 [ 0 ] - b1 == c3 [ 1 ] - b2 ) && ( c3 [ 1 ] - b2 == c3 [ 2 ] - b3 ) ans = ' Yes ' isBreak = true end end break if isBreak end puts ans
n = gets . to_i p_n = gets . chomp . split ( " " ) . map ( & :to_i ) min = p_n [ 0 ] res = 0 n . times do | i | if p_n [ i ] <= min res += 1 end if p_n [ i ] < min min = p_n [ i ] end end puts ( res )
_n = gets . to_i puts gets . chomp . split . uniq . length == 4 ? " Four " : " Three "
char = gets arr = char . split ( ' ' ) arr . sort! if arr [ 0 ] . to_i == 1 && arr [ 1 ] . to_i == 4 && arr [ 2 ] . to_i == 7 && arr [ 3 ] . to_i == 9 puts ' YES ' else puts ' NO ' end
c = ( 1 .. 3 ) . map { gets . split . map & :to_i } b0 , b1 , b2 = ( 0 .. 2 ) . map { | i | c [ 0 ] [ i ] } puts ( 1 .. 2 ) . any? { | i | x , y , z = b0 - c [ i ] [ 0 ] , b1 - c [ i ] [ 1 ] , b2 - c [ i ] [ 2 ] x != y || y != z || z != x } ? :No : :Yes
gets . to_i nums = gets . split ( ' ' ) . map ( & :to_i ) c = 0 min = nums [ 0 ] nums . each do | n | c += 1 if min >= n min = n if min >= n end puts c
K , S = gets . split . map ( & :to_i ) puts [ * 0 .. K ] . repeated_permutation ( 2 ) . count { | x , y | ( S - x - y ) . between? ( 0 , K ) }
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end N = get_int P = get_ints min = P [ 0 ] count = 1 P [ 1 .. ] . each do | p | if p <= min min = p count += 1 end end puts count
grid = [ ] 3 . times do grid << gets . split ( " " ) . map ( & :to_i ) end ans = " Yes " 2 . times do | i | row = grid [ i ] nextrow = grid [ i + 1 ] tmp1 = row [ 0 ] - nextrow [ 0 ] tmp2 = row [ 1 ] - nextrow [ 1 ] tmp3 = row [ 2 ] - nextrow [ 2 ] if ! ( tmp1 == tmp2 && tmp1 == tmp3 ) ans = " No " break end end 2 . times do | i | grid = grid . transpose row = grid [ i ] nextrow = grid [ i + 1 ] tmp1 = row [ 0 ] - nextrow [ 0 ] tmp2 = row [ 1 ] - nextrow [ 1 ] tmp3 = row [ 2 ] - nextrow [ 2 ] if ! ( tmp1 == tmp2 && tmp1 == tmp3 ) ans = " No " break end end puts ans
ant = [ ] while a = gets do ant . push ( a ) end k = ant . last . to_i ant . delete_at ( ant . length - 1 ) connect = " Yay! " last = ant [ 0 ] . to_i ant . each do | a | distance = a . to_i - last . to_i if distance . to_i > k connect = " :( " end end puts connect
i = gets . split . map ( & :to_i ) j = gets . split . map ( & :to_i ) k = gets . split . map ( & :to_i ) def checker ( i , j , k ) ( 0 .. 100 ) . each do | x | a1 = x b1 = i [ 0 ] - a1 b2 = i [ 1 ] - a1 b3 = i [ 2 ] - a1 a2 = j [ 0 ] - b1 a3 = k [ 0 ] - b1 if ( j [ 1 ] == a2 + b2 && j [ 2 ] == a2 + b3 && k [ 1 ] == a3 + b2 && k [ 2 ] == a3 + b3 ) return true end end return false end puts checker ( i , j , k ) ? " Yes " : " No "
k , s = gets . split . map ( & :to_i ) num = 0 ( 0 .. k ) . each do | i | a = s - i break if a < 0 ( 0 .. k ) . each do | j | b = a - j num += 1 if b >= 0 && b <= k end end puts num
C = 3 . times . map { gets . split . map ( & :to_i ) } r , m = C . flatten . inject ( 0 , & :+ ) . divmod ( 3 ) puts ( m == 0 && [ 0 , 1 , 2 ] . permutation . all? { | i , j , k | C [ 0 ] [ i ] + C [ 1 ] [ j ] + C [ 2 ] [ k ] == r } ) ? " Yes " : " No "
n = gets . to_i a = gets . split . map & :to_i m = a [ 0 ] p a . count { | x | t = x <= m m = x if x < m t }
N = gets puts gets . split . uniq . length == 3 ? ' Three ' : ' Four '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if ( 0 .. k ) . include? ( z ) end end puts cnt
input = gets . split ( " " ) if input . include? ( " 1 " ) && input . include? ( " 9 " ) && input . include? ( " 7 " ) && input . include? ( " 4 " ) then puts ( " YES " ) else puts ( " NO " ) end
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - x - y >= 0 && s - x - y <= k count += 1 if s == x + y + ( s - x - y ) end end end puts count
require ' pp ' $DEBUG ? define_method ( :dpp ) { | e | pp e } : define_method ( :dpp ) { | e | } def min ( a , b ) return a < b ? a : b end def gets_n_and_i_list ( ) return gets . chomp . to_i , gets . chomp . split ( " " ) . map ( & :to_i ) end N , p_list = gets_n_and_i_list count = 0 min = N + 1 p_list . each do | p | if p < min count += 1 min = min ( p , min ) end end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) ans += 1 if ( z >= 0 && z <= k ) && x + y + z == s end end puts ans
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) ans = ' No ' if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) c . transpose if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) ans = ' Yes ' end end end end puts ans
x = gets . to_i r = 6 ( x - 1 ) . times do r = r * 2 + 2 end puts r
k , s = gets . chomp . split . map ( & :to_i ) count = 0 for i in 0 .. k for j in 0 .. k l = s - ( i + j ) if l >= 0 && l <= k count += 1 end end end puts count
$/ = ' ' ; k , s = $< . map & :to_i ; p ( 0 ... ( k += 1 ) * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
K , S = gets . split . map ( & :to_i ) sum = 0 for x in 0 .. K for y in 0 .. K z = S - x - y if 0 <= z && z <= K then sum = sum + 1 end end end puts sum
k , s = gets . chomp . split . map ( & :to_i ) res = 0 ( 0 .. [ k , s ] . min ) . each do | x | ( 0 .. [ k , s - x ] . min ) . each do | y | res += 1 if s - x - y <= k end end puts res
cs = [ ] 3 . times do | i | cs [ i ] = gets . split . map ( & :to_i ) end [ 1 , 2 ] . each do | i | diff1 = [ 0 , 1 , 2 ] . map do | j | cs [ i ] [ j ] - cs [ 0 ] [ j ] end diff2 = [ 0 , 1 , 2 ] . map do | j | cs [ j ] [ i ] - cs [ j ] [ 0 ] end if diff1 . uniq . length > 1 || diff2 . uniq . length > 1 puts ' No ' exit end end puts ' Yes '
