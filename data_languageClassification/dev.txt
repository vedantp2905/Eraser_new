from itertools import product c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , None , None ] b = [ c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] f = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : f = False break if f : print ( ' Yes ' ) else : print ( ' No ' )
A = [ 0 ] B = [ ] C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) B . append ( C [ 0 ] [ 0 ] ) B . append ( C [ 0 ] [ 1 ] ) B . append ( C [ 0 ] [ 2 ] ) A . append ( C [ 1 ] [ 0 ] - B [ 0 ] ) A . append ( C [ 2 ] [ 0 ] - B [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if ( C [ i ] [ j ] != A [ i ] + B [ j ] and C [ i ] [ j ] != B [ i ] + A [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
[ C11 , C12 , C13 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C21 , C22 , C23 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C31 , C32 , C33 ] = [ int ( i ) for i in input ( ) . split ( ) ] b1 = C11 b2 = C12 b3 = C13 flag_a2 = False if ( C21 - b1 ) == ( C22 - b2 ) and ( C21 - b1 ) == ( C23 - b3 ) : flag_a2 = True flag_a3 = False if ( C31 - b1 ) == ( C32 - b2 ) and ( C31 - b1 ) == ( C33 - b3 ) : flag_a3 = True if flag_a2 is True and flag_a3 is True : print ( ' Yes ' ) else : print ( ' No ' )
C = list ( list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ) for a in range ( 3 ) : if ( C [ a ] [ 0 ] - C [ a ] [ 1 ] != C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] or C [ a ] [ 1 ] - C [ a ] [ 2 ] != C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) for b in range ( 3 ) : if ( C [ 0 ] [ b ] - C [ 1 ] [ b ] != C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] or C [ 1 ] [ b ] - C [ 2 ] [ b ] != C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) D1 = [ ] stp = 0 for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( j + 1 , 3 ) : D1 . append ( c [ i ] [ j ] - c [ i ] [ k ] ) for i in range ( 6 ) : if D1 [ i ] != D1 [ i + 3 ] : stp += 1 D2 = [ ] for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( j + 1 , 3 ) : D2 . append ( c [ j ] [ i ] - c [ k ] [ i ] ) for i in range ( 6 ) : if D2 [ i ] != D2 [ i + 3 ] : stp += 1 if stp == 0 : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) sw = 1 b1 = min ( c1 ) a = [ c1 [ 0 ] - b1 , c1 [ 1 ] - b1 , c1 [ 2 ] - b1 ] if not ( c2 [ 0 ] - a [ 0 ] == c2 [ 1 ] - a [ 1 ] == c2 [ 2 ] - a [ 2 ] ) : sw = 0 if not ( c3 [ 0 ] - a [ 0 ] == c3 [ 1 ] - a [ 1 ] == c3 [ 2 ] - a [ 2 ] ) : sw = 0 print ( [ " No " , " Yes " ] [ sw ] )
c = [ list ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 b = [ - 1 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = False break if ans == True : print ( ' Yes ' ) else : print ( ' No ' )
cr = list ( ) for i in range ( 3 ) : cw = list ( map ( int , input ( ) . split ( ) ) ) cr . append ( cw ) a = list ( ) b = list ( ) a . append ( 0 ) b . append ( cr [ 0 ] [ 0 ] - a [ 0 ] ) a . append ( cr [ 1 ] [ 0 ] - b [ 0 ] ) b . append ( cr [ 0 ] [ 1 ] - a [ 0 ] ) a . append ( cr [ 2 ] [ 0 ] - b [ 0 ] ) b . append ( cr [ 0 ] [ 2 ] - a [ 0 ] ) wkans = list ( ) for i in range ( 3 ) : wkrow = list ( ) for j in range ( 3 ) : wkrow . append ( cr [ i ] [ j ] - ( a [ i ] + b [ j ] ) ) wkans . append ( wkrow ) if min ( wkans ) == max ( wkans ) : ans = ' Yes ' else : ans = ' No ' print ( ans )
k = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( k [ 0 ] [ 0 ] - a1 ) == ( k [ 0 ] [ 1 ] - a2 ) == ( k [ 0 ] [ 2 ] - a3 ) : if ( k [ 1 ] [ 0 ] - a1 ) == ( k [ 1 ] [ 1 ] - a2 ) == ( k [ 1 ] [ 2 ] - a3 ) : if ( k [ 2 ] [ 0 ] - a1 ) == ( k [ 2 ] [ 1 ] - a2 ) == ( k [ 2 ] [ 2 ] - a3 ) : if k [ 0 ] [ 0 ] - a1 >= 0 and k [ 0 ] [ 1 ] - a2 >= 0 and k [ 0 ] [ 2 ] - a3 >= 0 : if ( k [ 1 ] [ 0 ] - a1 ) >= 0 and ( k [ 1 ] [ 1 ] - a2 ) >= 0 and ( k [ 1 ] [ 2 ] - a3 ) >= 0 : if ( k [ 2 ] [ 0 ] - a1 ) >= 0 and ( k [ 2 ] [ 1 ] - a2 ) >= 0 and ( k [ 2 ] [ 2 ] - a3 ) >= 0 : print ( " Yes " ) exit ( ) print ( " No " )
def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def m ( ) : return map ( int , input ( ) . split ( ) ) def main ( ) : c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = l ( ) for i in range ( 2 ) : x = c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != x : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c0 = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ] c1 = [ c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ] c2 = [ c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] , c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] if c0 == c1 == c2 : print ( " Yes " ) else : print ( " No " )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if ( a1 + b1 == c [ 0 ] [ 0 ] and a2 + b1 == c [ 1 ] [ 0 ] and a3 + b1 == c [ 2 ] [ 0 ] and a1 + b2 == c [ 0 ] [ 1 ] and a2 + b2 == c [ 1 ] [ 1 ] and a3 + b2 == c [ 2 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b3 == c [ 2 ] [ 2 ] ) : print ( YES ) exit ( ) print ( NO ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
def LIHW ( h ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] masu = LIHW ( 3 ) ans = " Yes " for i in range ( 2 ) : if masu [ i + 1 ] [ 1 ] - masu [ i + 1 ] [ 0 ] != masu [ 0 ] [ 1 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ i + 1 ] [ 2 ] - masu [ i + 1 ] [ 1 ] != masu [ 0 ] [ 2 ] - masu [ 0 ] [ 1 ] : ans = " No " for i in range ( 2 ) : if masu [ 1 ] [ i + 1 ] - masu [ 0 ] [ i + 1 ] != masu [ 1 ] [ 0 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ 2 ] [ i + 1 ] - masu [ 1 ] [ i + 1 ] != masu [ 2 ] [ 0 ] - masu [ 1 ] [ 0 ] : ans = " No " print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] list_a = [ 0 , C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] , C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] ] list_b = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != list_a [ i ] + list_b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys C11 , C12 , C13 = map ( int , input ( ) . split ( ) ) C21 , C22 , C23 = map ( int , input ( ) . split ( ) ) C31 , C32 , C33 = map ( int , input ( ) . split ( ) ) if ( C11 + C22 == C12 + C21 ) and ( C12 + C23 == C13 + C22 ) and ( C21 + C32 == C22 + C31 ) and ( C22 + C33 == C23 + C32 ) : print ( ' Yes ' ) sys . exit ( ) print ( " No " )
from sys import stdin if __name__ == " __main__ " : _in = [ _ . rstrip ( ) for _ in stdin . readlines ( ) ] c_arr = [ ] for i in range ( 3 ) : _ = list ( map ( int , _in [ i ] . split ( ' ' ) ) ) c_arr . append ( _ ) sum_c_arr = sum ( [ sum ( c ) for c in c_arr ] ) if ( c_arr [ 0 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 1 ] + c_arr [ 1 ] [ 2 ] + c_arr [ 2 ] [ 0 ] ) == sum_c_arr / 3 and \ ( c_arr [ 2 ] [ 0 ] + c_arr [ 1 ] [ 1 ] + c_arr [ 0 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 1 ] [ 0 ] + c_arr [ 0 ] [ 1 ] + c_arr [ 2 ] [ 2 ] ) == sum_c_arr / 3 and \ ( c_arr [ 0 ] [ 0 ] + c_arr [ 2 ] [ 1 ] + c_arr [ 1 ] [ 2 ] ) == sum_c_arr / 3 : TF = ' Yes ' else : TF = ' No ' print ( TF )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for j in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] or c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] != c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
a , b = [ 0 ] * 3 , [ 10 ] * 3 c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( c [ 0 ] [ 0 ] + 1 ) : a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - i for j in range ( 1 , 3 ) : a [ j ] = c [ j ] [ 0 ] - b [ 0 ] b [ j ] = c [ 0 ] [ j ] - a [ 0 ] flag = True for k in range ( 3 ) : for l in range ( 3 ) : if c [ k ] [ l ] != a [ k ] + b [ l ] : flag = False if flag : print ( " Yes " ) exit ( ) print ( " No " )
def solve ( c1_list , c2_list , c3_list ) : a1 = 0 ans = " No " while a1 <= 100 : b_list = [ c - a1 for c in c1_list ] a2 = len ( set ( [ c - b for c , b in zip ( c2_list , b_list ) ] ) ) a3 = len ( set ( [ c - b for c , b in zip ( c3_list , b_list ) ] ) ) if a2 == 1 and a3 == 1 : ans = " Yes " break else : a1 + = 1 return ans if __name__ == " __main__ " : c1_list = [ int ( i ) for i in input ( ) . split ( ) ] c2_list = [ int ( i ) for i in input ( ) . split ( ) ] c3_list = [ int ( i ) for i in input ( ) . split ( ) ] print ( solve ( c1_list , c2_list , c3_list ) )
import sys check_ary = [ [ 0 for i in range ( 3 ) ] for i in range ( 2 ) ] num_ary = [ [ 0 for i in range ( 3 ) ] for i in range ( 3 ) ] check_minus = False for i in range ( 3 ) : num_ary [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( num_ary [ 0 ] [ 0 ] + 1 ) : for x in range ( 3 ) : check_ary [ 1 ] [ x ] = num_ary [ 0 ] [ x ] - i for a in range ( 3 ) : check_ary [ 0 ] [ a ] = num_ary [ a ] [ 0 ] - check_ary [ 1 ] [ 0 ] for x in range ( 3 ) : for y in range ( 3 ) : if not check_ary [ 0 ] [ x ] + check_ary [ 1 ] [ y ] == num_ary [ x ] [ y ] : break else : continue break else : print ( " Yes " ) sys . exit ( ) print ( " No " )
grid = [ [ ] , [ ] , [ ] ] for i in range ( 3 ) : grid [ i ] = [ int ( i ) for i in input ( ) . split ( ) ] x = [ 0 ] * 3 y = [ ] ret = True for i in range ( 3 ) : y . append ( grid [ 0 ] [ i ] - x [ 0 ] ) for i in range ( 3 ) : x [ i ] = grid [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if not x [ i ] + y [ j ] == grid [ i ] [ j ] : ret = False else : continue break print ( " Yes " if ret else " No " )
import sys sys . setrecursionlimit ( 10 ** 6 ) input = sys . stdin . readline int1 = lambda x : int ( x ) - 1 p2D = lambda x : print ( * x , sep = " \n " ) def main ( ) : t = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not t [ i ] [ 0 ] - t [ i + 1 ] [ 0 ] == t [ i ] [ 1 ] - t [ i + 1 ] [ 1 ] == t [ i ] [ 2 ] - t [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for j in range ( 2 ) : if not t [ 0 ] [ j ] - t [ 0 ] [ j + 1 ] == t [ 1 ] [ j ] - t [ 1 ] [ j + 1 ] == t [ 2 ] [ j ] - t [ 2 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " ) main ( )
import numpy as np import sys def validation ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) return sys . exit ( ) print ( ' Yes ' ) return sys . exit ( ) c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] ) for i in range ( np . max ( c ) + 1 ) : a = [ ] b = [ ] a . append ( i ) b . append ( c [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( c [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) validation ( c , a , b )
def mod3 ( num ) : if num % 3 == 0 : return True else : return False cList = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] row = [ sum ( cList [ 0 ] ) , sum ( cList [ 1 ] ) , sum ( cList [ 2 ] ) ] col = [ cList [ 0 ] [ i ] + cList [ 1 ] [ i ] + cList [ 2 ] [ i ] for i in range ( 3 ) ] differenceRow = [ row [ i - 1 ] - row [ i ] for i in range ( 3 ) ] differenceCol = [ col [ i - 1 ] - col [ i ] for i in range ( 3 ) ] difference = [ sum ( row ) ] + differenceRow + differenceCol if list ( filter ( mod3 , difference ) ) != difference : print ( " No " ) else : print ( " Yes " )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] fin = False for a1 in range ( 101 ) : if fin : break for a2 in range ( 101 ) : if fin : break for a3 in range ( 101 ) : if ( grid [ 0 ] [ 0 ] - a1 == grid [ 1 ] [ 0 ] - a2 and grid [ 1 ] [ 0 ] - a2 == grid [ 2 ] [ 0 ] - a3 ) and ( grid [ 0 ] [ 1 ] - a1 == grid [ 1 ] [ 1 ] - a2 and grid [ 1 ] [ 1 ] - a2 == grid [ 2 ] [ 1 ] - a3 ) and ( grid [ 0 ] [ 2 ] - a1 == grid [ 1 ] [ 2 ] - a2 and grid [ 1 ] [ 2 ] - a2 == grid [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) fin = True break if not fin : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 if a1 != c [ 1 ] [ 1 ] - b1 or a1 != c [ 1 ] [ 2 ] - b2 : continue a2 = c [ 2 ] [ 0 ] - b0 if a2 != c [ 2 ] [ 1 ] - b1 or a2 != c [ 2 ] [ 2 ] - b2 : continue print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] yoko = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] tate = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] flag = 1 for i in range ( 1 , 3 ) : if not ( ( c [ i ] [ 1 ] - c [ i ] [ 0 ] == yoko [ 0 ] ) and ( c [ i ] [ 2 ] - c [ i ] [ 1 ] == yoko [ 1 ] ) ) : flag = 0 if not ( ( c [ 1 ] [ i ] - c [ 0 ] [ i ] == tate [ 0 ] ) and ( c [ 2 ] [ i ] - c [ 1 ] [ i ] == tate [ 1 ] ) ) : flag = 0 if flag == 1 : print ( " Yes " ) else : print ( " No " )
r1 = list ( map ( int , input ( ) . split ( ) ) ) r2 = list ( map ( int , input ( ) . split ( ) ) ) r3 = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i for j in range ( 3 ) : b [ j ] = r1 [ j ] - a [ 0 ] a [ 1 ] = r2 [ 0 ] - b [ 0 ] a [ 2 ] = r3 [ 0 ] - b [ 0 ] flag = False for j in range ( 3 ) : if r1 [ j ] == a [ 0 ] + b [ j ] and r2 [ j ] == a [ 1 ] + b [ j ] and r3 [ j ] == a [ 2 ] + b [ j ] : flag = True else : flag = False break if flag : break print ( " Yes " ) if flag else print ( " No " )
s = [ ] ; for i in range ( 3 ) : s . append ( list ( map ( int , input ( ) . split ( ) ) ) ) sum = 0 for i in range ( 3 ) : for j in range ( 3 ) : sum += s [ i ] [ j ] c1 = s [ 0 ] [ 0 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 2 ] c2 = s [ 0 ] [ 2 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 0 ] print ( ' Yes ' if sum == c1 * 3 and sum == c2 * 3 else ' No ' )
import math import numpy as np from fractions import gcd import collections C = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] C = np . array ( C ) cross1 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] cross2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] if ( cross1 == cross2 and np . sum ( C ) / 6 == cross1 / 2 ) : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] is_able = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : is_able = False break if is_able : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
import collections import math import numpy as np is_true = True field = [ ] for i in range ( 3 ) : field . append ( list ( map ( int , input ( ) . split ( ) ) ) ) field = np . array ( field ) for i in range ( 3 ) : field [ i ] -= min ( field [ i ] ) is_true = np . where ( field == field [ 0 ] , True , False ) . all ( ) field = np . array ( field ) . T for i in range ( 3 ) : field [ i ] -= min ( field [ i ] ) is_true2 = np . where ( field == field [ 0 ] , True , False ) . all ( ) print ( ' Yes ' if is_true * is_true2 else ' No ' )
with open ( 0 ) as f : C = [ list ( map ( int , line . split ( ) ) ) for line in f . readlines ( ) ] b = [ ( C [ i ] [ 1 ] - C [ i ] [ 0 ] , C [ i ] [ 2 ] - C [ i ] [ 1 ] ) for i in range ( 3 ) ] a = [ ( C [ 1 ] [ j ] - C [ 0 ] [ j ] , C [ 2 ] [ j ] - C [ 1 ] [ j ] ) for j in range ( 3 ) ] print ( ' Yes ' if a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] else ' No ' )
grid = [ list ( map ( int , input ( ) . split ( " " ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = grid [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = grid [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = grid [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = grid [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = grid [ 2 ] [ 0 ] - b [ 0 ] ans_date = [ ] for i in a : date = [ ] for j in b : num = i + j date . append ( num ) ans_date . append ( date ) if grid == ans_date : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for row in range ( 3 ) : for col in range ( 3 ) : if C [ row ] [ col ] - C [ ( row + 1 ) % 3 ] [ col ] != C [ row ] [ ( col + 1 ) % 3 ] - C [ ( row + 1 ) % 3 ] [ ( col + 1 ) % 3 ] : print ( ' No ' ) exit ( ) for col in range ( 3 ) : for row in range ( 3 ) : if C [ row ] [ col ] - C [ row ] [ ( col + 1 ) % 3 ] != C [ ( row + 1 ) % 3 ] [ col ] - C [ ( row + 1 ) % 3 ] [ ( col + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
b = list ( map ( int , input ( ) . split ( ) ) ) a2 = list ( map ( int , input ( ) . split ( ) ) ) a3 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( max ( 0 , b [ 0 ] - 100 , b [ 1 ] - 100 , b [ 2 ] - 100 ) , min ( 100 , b [ 0 ] , b [ 1 ] , b [ 2 ] ) + 1 ) : t1 = set ( ) t2 = set ( ) for j in range ( 3 ) : t1 . add ( a2 [ j ] - ( b [ j ] - i ) ) t2 . add ( a3 [ j ] - ( b [ j ] - i ) ) if len ( t1 ) == 1 and len ( t2 ) == 1 and list ( t1 ) [ 0 ] >= 0 and list ( t2 ) [ 0 ] >= 0 : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] d = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] if ( a == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) and ( a == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : if ( b == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( b == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : if ( d == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) and ( d == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
A = [ ] for i in range ( 3 ) : A . append ( list ( map ( int , input ( ) . split ( ) ) ) ) t = 0 if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 0 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 0 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 2 ] [ 0 ] - A [ 1 ] [ 0 ] == A [ 2 ] [ 1 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 1 ] [ 2 ] : if A [ 0 ] [ 0 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 0 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 0 ] - A [ 2 ] [ 1 ] : if A [ 0 ] [ 2 ] - A [ 0 ] [ 1 ] == A [ 1 ] [ 2 ] - A [ 1 ] [ 1 ] == A [ 2 ] [ 2 ] - A [ 2 ] [ 1 ] : t = 1 if t == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def solve ( ) : c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if not c [ i ] [ j ] - c [ i + 1 ] [ j ] == c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : return ' No ' for i in range ( 2 ) : for j in range ( 2 ) : if not c [ j ] [ i ] - c [ j ] [ i + 1 ] == c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] : return ' No ' return ' Yes ' if __name__ == ' __main__ ' : print ( solve ( ) )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = l [ 0 ] [ 0 ] y = l [ 0 ] [ 1 ] z = l [ 0 ] [ 2 ] a = 0 b = l [ 1 ] [ 0 ] - x c = l [ 2 ] [ 0 ] - x if b + y == l [ 1 ] [ 1 ] and b + z == l [ 1 ] [ 2 ] and c + y == l [ 2 ] [ 1 ] and c + z == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
M = [ ] for i in range ( 3 ) : row = list ( map ( int , input ( ) . split ( ) ) ) M . append ( row ) flg = True for i in range ( 3 ) : if M [ 0 ] [ i ] - M [ 0 ] [ i - 1 ] == M [ 1 ] [ i ] - M [ 1 ] [ i - 1 ] == M [ 2 ] [ i ] - M [ 2 ] [ i - 1 ] : continue else : flg = False if M [ i ] [ 0 ] - M [ i - 1 ] [ 0 ] == M [ i ] [ 1 ] - M [ i - 1 ] [ 1 ] == M [ i ] [ 2 ] - M [ i - 1 ] [ 2 ] : continue else : flg = False if flg : print ( " Yes " ) else : print ( " No " )
def solve ( ) : if not ( c11 - c21 == c12 - c22 == c13 - c23 ) : return False if not ( c11 - c31 == c12 - c32 == c13 - c33 ) : return False if not ( c11 - c12 == c21 - c22 == c31 - c32 ) : return False if not ( c11 - c13 == c21 - c23 == c31 - c33 ) : return False return True c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) print ( ' Yes ' if solve ( ) else ' No ' )
xy = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = sum ( map ( sum , xy ) ) if result % 3 != 0 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 0 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 2 ] ) * 3 : print ( " No " ) exit ( ) if result != ( xy [ 0 ] [ 2 ] + xy [ 1 ] [ 1 ] + xy [ 2 ] [ 0 ] ) * 3 : print ( " No " ) exit ( ) else : print ( " Yes " )
a , b , c = [ int ( v ) for v in input ( ) . split ( ) ] d , e , f = [ int ( v ) for v in input ( ) . split ( ) ] g , h , i = [ int ( v ) for v in input ( ) . split ( ) ] if a + e + i == d + h + c and a + e + i == b + f + g : print ( " Yes " ) else : print ( " No " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for _ in range ( 3 ) ] print ( " Yes " if a - b == d - e == g - h and b - c == e - f == h - i else " No " )
C = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( " YNeos " [ not all ( C [ i ] [ j ] + C [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] == C [ ( i + 1 ) % 3 ] [ j ] + C [ i ] [ ( j + 1 ) % 3 ] for i in range ( 3 ) for j in range ( 3 ) ) : : 2 ] )
C = [ ] for i in range ( 0 , 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ' ' ) ] ) def sol ( ) : if ( sum ( C [ 0 ] ) - sum ( C [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 1 ] ) - sum ( C [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 2 ] ) - sum ( C [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] - ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] - ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] - ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) else : return ( ' Yes ' ) print ( sol ( ) )
cs = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] r_sum = [ sum ( l ) for l in cs ] total = sum ( r_sum ) ok = True for i in range ( 3 ) : diffs = [ cs [ i ] [ j ] - cs [ ( i + 1 ) % 3 ] [ j ] for j in range ( 3 ) ] d0 = diffs [ 0 ] for j in range ( 1 , 3 ) : if diffs [ j ] != d0 : ok = False break if not ok : break if ok : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c1 = list ( map ( int , input ( ) . split ( ) ) ) A = np . array ( c1 ) c1 = list ( map ( int , input ( ) . split ( ) ) ) B = np . array ( c1 ) c1 = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( c1 ) D = A - B D1 = list ( D ) D1 = set ( D1 ) if len ( D1 ) == 1 : pass else : print ( ' No ' ) exit ( ) E = B - C E1 = list ( E ) E1 = set ( E1 ) if len ( E1 ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import string import sys from itertools import chain , dropwhile , takewhile def read ( * shape , f = int , it = chain . from_iterable ( sys . stdin ) , whitespaces = set ( string . whitespace ) ) : def read_word ( ) : w = lambda c : c in whitespaces nw = lambda c : c not in whitespaces return f ( " " . join ( takewhile ( nw , dropwhile ( w , it ) ) ) ) if not shape : return read_word ( ) elif len ( shape ) == 1 : return [ read_word ( ) for _ in range ( shape [ 0 ] ) ] elif len ( shape ) == 2 : return [ [ read_word ( ) for _ in range ( shape [ 1 ] ) ] for _ in range ( shape [ 0 ] ) ] def readi ( * shape ) : return read ( * shape ) def readi1 ( * shape ) : return [ i - 1 for i in read ( * shape ) ] def readf ( * shape ) : return read ( * shape , f = float ) def reads ( * shape ) : return read ( * shape , f = str ) def arr ( * shape , fill_value = 0 ) : if len ( shape ) == 1 : return [ fill_value ] * shape [ fill_value ] elif len ( shape ) == 2 : return [ [ fill_value ] * shape [ 1 ] for _ in range ( shape [ 0 ] ) ] def dbg ( ** kwargs ) : print ( " , " . join ( " {} = {} " . format ( k , repr ( v ) ) for k , v in kwargs . items ( ) ) , file = sys . stderr , ) def main ( ) : c = readi ( 3 , 3 ) d = list ( zip ( * c ) ) print ( " Yes " if all ( len ( set ( i - j for i , j in zip ( e [ n ] , e [ m ] ) ) ) == 1 for e in [ c , d ] for n in range ( 3 ) for m in range ( n ) ) else " No " ) if __name__ == " __main__ " : main ( )
d = [ None ] * 3 for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) d [ i ] = [ c [ i ] - c [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( d [ i ] == d [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = [ 0 ] B = [ C [ 0 ] [ i ] - A [ 0 ] for i in range ( 3 ) ] for i in range ( 1 , 3 ) : A . append ( C [ i ] [ 0 ] - B [ 0 ] ) for i , a in enumerate ( A ) : for j , b in enumerate ( B ) : if a + b != C [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
points = [ [ None for j in range ( 3 ) ] for i in range ( 3 ) ] from itertools import product for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) points [ i ] [ 0 ] = c1 points [ i ] [ 1 ] = c2 points [ i ] [ 2 ] = c3 valid = False for a1 in range ( 101 ) : maxA1 = min ( points [ 0 ] ) if a1 > maxA1 : continue b1 = points [ 0 ] [ 0 ] - a1 b2 = points [ 0 ] [ 1 ] - a1 b3 = points [ 0 ] [ 2 ] - a1 a2 = points [ 1 ] [ 0 ] - b1 a3 = points [ 2 ] [ 0 ] - b1 A = { 0 : a1 , 1 : a2 , 2 : a3 } B = { 0 : b1 , 1 : b2 , 2 : b3 } for i in range ( 3 ) : for j in range ( 3 ) : if points [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) flag = False if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : flag = True if flag : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np A = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for I in range ( 3 ) ] ) for I in range ( 3 ) : j , k , l = A [ 1 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) j , k , l = A [ 2 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c1_2 = [ ] for i in range ( 3 ) : c1_1 = [ ] for j in range ( 2 ) : c1_1 . append ( c [ i ] [ j ] - c [ i ] [ j + 1 ] ) c1_2 . append ( c1_1 ) c1_1 = [ ] for i in range ( 3 ) : for j in range ( 1 ) : c1_1 . append ( c1_2 [ i ] [ j ] - c1_2 [ i ] [ j + 1 ] ) if ( len ( set ( c1_1 ) ) == 1 ) : print ( " Yes " ) else : print ( " No " )
import sys c_ls = [ ] for i in range ( 3 ) : c = [ int ( i ) for i in sys . stdin . readline ( ) . split ( ) ] c_ls . append ( c ) yoko = [ c_ls [ 0 ] [ i + 1 ] - c_ls [ 0 ] [ i ] for i in range ( 2 ) ] flg = True for i in range ( 3 ) : flg &= yoko == [ c_ls [ i ] [ j + 1 ] - c_ls [ i ] [ j ] for j in range ( 2 ) ] print ( " Yes " if flg else " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] f = True a , b = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ i ] [ 1 ] == a and c [ i ] [ 1 ] - c [ i ] [ 2 ] == b ) : f = False a , b = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if not ( c [ 0 ] [ i ] - c [ 1 ] [ i ] == a and c [ 1 ] [ i ] - c [ 2 ] [ i ] == b ) : f = False print ( " Yes " if f else " No " )
X = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( X [ 1 ] [ 0 ] - X [ 0 ] [ 0 ] == X [ 1 ] [ 1 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 2 ] - X [ 0 ] [ 2 ] and \ X [ 2 ] [ 0 ] - X [ 0 ] [ 0 ] == X [ 2 ] [ 1 ] - X [ 0 ] [ 1 ] == X [ 2 ] [ 2 ] - X [ 0 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 for _ in range ( 3 ) ] b = [ 0 for _ in range ( 3 ) ] A = [ sum ( c ) for c in C ] B = [ C [ 0 ] [ i ] + C [ 1 ] [ i ] + C [ 2 ] [ i ] for i in range ( 3 ) ] is_correct = True for i in range ( 3 ) : for j in range ( i , 3 ) : if abs ( A [ i ] - A [ j ] ) % 3 != 0 : is_correct = False if abs ( B [ i ] - B [ j ] ) % 3 != 0 : is_correct = False print ( " Yes " if is_correct else " No " )
ls = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cnt = 0 for i in range ( 3 ) : for j in range ( 3 ) : if ls [ i % 3 ] [ j % 3 ] - ls [ i % 3 ] [ ( j + 1 ) % 3 ] == ls [ ( i + 1 ) % 3 ] [ j % 3 ] - ls [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : cnt += 1 print ( ' Yes ' if cnt == 9 else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ' ' for _ in range ( 3 ) ] c [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 2 ) : line = [ 0 for _ in range ( 3 ) ] column = [ 0 for _ in range ( 3 ) ] for j in range ( 3 ) : line [ j ] = c [ i + 1 ] [ j ] - c [ i ] [ j ] column [ j ] = c [ i + 1 ] [ j ] - c [ i ] [ j ] if len ( set ( line ) ) != 1 or len ( set ( column ) ) != 1 : ans = ' No ' break print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] == ( a [ i ] + b [ j ] ) : pass else : ans = " No " break print ( ans )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
A1 = 0 B1 , B2 , B3 = map ( int , input ( ) . split ( ) ) C1 , C2 , C3 = map ( int , input ( ) . split ( ) ) D1 , D2 , D3 = map ( int , input ( ) . split ( ) ) flag = 0 if not ( C2 - B2 == C1 - B1 and C3 - B3 == C1 - B1 and C2 - B2 == C3 - B3 ) : flag = 1 if not ( D2 - B2 == D1 - B1 and D3 - B3 == D1 - B1 and D2 - B2 == D3 - B3 ) : flag = 1 print ( " Yes " if flag == 0 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if ( a2 + b2 ) == c [ 1 ] [ 1 ] and ( a2 + b3 ) == c [ 1 ] [ 2 ] and ( a3 + b2 ) == c [ 2 ] [ 1 ] and ( a3 + b3 ) == c [ 2 ] [ 2 ] : print ( " Yes " ) break else : print ( " No " )
N = 3 C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] f = True for i in range ( N - 1 ) : a = C [ i ] [ 0 ] - C [ i + 1 ] [ 0 ] b = C [ i ] [ 1 ] - C [ i + 1 ] [ 1 ] c = C [ i ] [ 2 ] - C [ i + 1 ] [ 2 ] if a == b == c : continue else : f = False for j in range ( N - 1 ) : a = C [ 0 ] [ j ] - C [ 0 ] [ j + 1 ] b = C [ 1 ] [ j ] - C [ 1 ] [ j + 1 ] c = C [ 2 ] [ j ] - C [ 2 ] [ j + 1 ] if a == b == c : continue else : f = False if f : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for h in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for n in range ( 1 , 3 ) : for h in range ( 1 , 3 ) : if c [ h ] [ n ] != a [ h ] + b [ n ] : print ( " No " ) exit ( ) print ( " Yes " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : if ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ) == ( c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ) == ( c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : continue else : print ( ' No ' ) exit ( 0 ) for j in range ( 2 ) : if ( c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ) == ( c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ) == ( c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ) : continue else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 1 , 3 ) : if C [ i ] [ 0 ] - C [ 0 ] [ 0 ] == C [ i ] [ 1 ] - C [ 0 ] [ 1 ] and C [ i ] [ 0 ] - C [ 0 ] [ 0 ] == C [ i ] [ 2 ] - C [ 0 ] [ 2 ] : pass else : print ( " No " ) exit ( ) print ( " Yes " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = " No " if l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] == l [ 1 ] [ 1 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 2 ] [ 0 ] : if l [ 0 ] [ 2 ] - l [ 0 ] [ 1 ] == l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 2 ] [ 1 ] : flag = " Yes " print ( flag )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True if not C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : flag = False if not C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : flag = False print ( " Yes " if flag is True else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if C [ i + 1 ] [ j ] - C [ i ] [ j ] != C [ i + 1 ] [ j + 1 ] - C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = C [ i ] [ 0 ] - b [ 0 ] ans = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : ans = False print ( ' Yes ' if ans else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import sys a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] min_1 = min ( c [ 0 ] ) for j in range ( 0 , min_1 + 1 ) : a [ 0 ] = j b [ 0 ] = c [ 0 ] [ 0 ] - j b [ 1 ] = c [ 0 ] [ 1 ] - j b [ 2 ] = c [ 0 ] [ 2 ] - j a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if a [ 1 ] < 0 or a [ 2 ] < 0 : continue for i in [ 1 , 2 ] : for k in [ 1 , 2 ] : if c [ i ] [ k ] != a [ i ] + b [ k ] : break else : if i == 2 and k == 2 : print ( " Yes " ) sys . exit ( ) else : continue break print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : pass else : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
g = [ ] for i in range ( 3 ) : g . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : offset = g [ i ] [ 0 ] - g [ 0 ] [ 0 ] if not ( ( g [ i ] [ 1 ] - g [ 0 ] [ 1 ] == offset ) and ( g [ i ] [ 2 ] - g [ 0 ] [ 2 ] == offset ) ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = 0 for col in c : for v in col : m = max ( m , v ) for a1 in range ( m + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a2 + b2 != c [ 1 ] [ 1 ] : continue elif a2 + b3 != c [ 1 ] [ 2 ] : continue elif a3 + b2 != c [ 2 ] [ 1 ] : continue elif a3 + b3 != c [ 2 ] [ 2 ] : continue else : print ( ' Yes ' ) break else : print ( ' No ' )
l = [ ] for i in range ( 3 ) : ll = [ int ( x ) for x in input ( ) . split ( ) ] l . append ( ll ) if l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] != l [ 1 ] [ 0 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 0 ] - l [ 2 ] [ 1 ] != l [ 1 ] [ 0 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 0 ] [ 2 ] - l [ 0 ] [ 1 ] != l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 2 ] - l [ 2 ] [ 1 ] != l [ 1 ] [ 2 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 0 ] [ 0 ] - l [ 1 ] [ 0 ] != l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] or l [ 0 ] [ 2 ] - l [ 1 ] [ 2 ] != l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if l [ 2 ] [ 0 ] - l [ 1 ] [ 0 ] != l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] or l [ 2 ] [ 2 ] - l [ 1 ] [ 2 ] != l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
a , b , c = map ( int , input ( ) . split ( ) ) aa , bb , cc = map ( int , input ( ) . split ( ) ) aaa , bbb , ccc = map ( int , input ( ) . split ( ) ) ans = " No " if a - aa == b - bb and b - bb == c - cc : if aa - aaa == bb - bbb and bb - bbb == cc - ccc : if a - b == aa - bb and aa - bb == aaa - bbb : if b - c == bb - cc and bb - cc == bbb - ccc : ans = " Yes " print ( ans )
import numpy as np X = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) T = True if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False X = X . T if X [ 0 ] [ 0 ] - X [ 0 ] [ 1 ] == X [ 1 ] [ 0 ] - X [ 1 ] [ 1 ] == X [ 2 ] [ 0 ] - X [ 2 ] [ 1 ] \ and X [ 0 ] [ 1 ] - X [ 0 ] [ 2 ] == X [ 1 ] [ 1 ] - X [ 1 ] [ 2 ] == X [ 2 ] [ 1 ] - X [ 2 ] [ 2 ] : pass else : T = False print ( " Yes " if T else " No " )
def myAnswer ( C : list ) -> int : return " Yes " if ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] ) else " No " def modelAnswer ( ) : return def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( myAnswer ( C [ : ] ) ) if __name__ == ' __main__ ' : main ( )
r = range M = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in r ( 3 ) ] for i in r ( 2 ) : x = M [ 0 ] [ i ] - M [ 0 ] [ i + 1 ] y = M [ i ] [ 0 ] - M [ i + 1 ] [ 0 ] for j in r ( 3 ) : if x != M [ j ] [ i ] - M [ j ] [ i + 1 ] or y != M [ i ] [ j ] - M [ i + 1 ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c_ = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_ ) if c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] and c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] ans = False for a_1 in range ( 101 ) : b_1 = c [ 0 ] [ 0 ] - a_1 b_2 = c [ 0 ] [ 1 ] - a_1 b_3 = c [ 0 ] [ 2 ] - a_1 a_2 = c [ 1 ] [ 0 ] - b_1 a_3 = c [ 2 ] [ 0 ] - b_1 if a_2 + b_2 == c [ 1 ] [ 1 ] and a_2 + b_3 == c [ 1 ] [ 2 ] and a_3 + b_2 == c [ 2 ] [ 1 ] and a_3 + b_3 == c [ 2 ] [ 2 ] : ans = True break if ans : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] \ == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] \ == c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c_i = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c_i ) h01 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] h12 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] v01 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] v12 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] buf = 1 for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != h01 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != h12 or c [ 1 ] [ i ] - c [ 0 ] [ i ] != v01 or c [ 2 ] [ i ] - c [ 1 ] [ i ] != v12 : buf = 0 break if buf == 1 : print ( " Yes " ) else : print ( " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] and a [ 0 ] [ 2 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] OK = False for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : a = [ a1 , a2 , a3 ] ok = True for j in range ( 3 ) : v = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 2 ) : if c [ i + 1 ] [ j ] - a [ i + 1 ] != v : ok = False if ok : OK = True if OK : print ( ' Yes ' ) else : print ( ' No ' )
def resolve ( ) : grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] is_flag = True for i in range ( 3 ) : A = grid [ 0 ] [ i - 1 ] - grid [ 0 ] [ i ] C = grid [ 2 ] [ i - 1 ] - grid [ 2 ] [ i ] B = grid [ 1 ] [ i - 1 ] - grid [ 1 ] [ i ] if A == B and B == C : pass else : is_flag = False print ( ' Yes ' ) if is_flag else print ( ' No ' ) if __name__ == " __main__ " : resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : print ( " No " ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np def main ( ) -> None : c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( [ c_1 , c_2 , c_3 ] , dtype = int ) a = np . empty ( 3 , dtype = int ) b = np . empty ( 3 , dtype = int ) a [ 0 ] = 0 range_3 = range ( 3 ) for j in range_3 : b [ j ] = c_1 [ j ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i , a_i in enumerate ( a ) : for j , b_j in enumerate ( b ) : if a_i + b_j != c [ i ] [ j ] : good = False if good : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 flag = 0 for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] x [ i ] = a [ i ] [ 0 ] - y [ 0 ] for j in range ( 3 ) : for k in range ( 3 ) : if not a [ j ] [ k ] == ( x [ j ] + y [ k ] ) : flag = 1 break if flag == 0 : print ( ' Yes ' ) else : print ( ' No ' )
X = list ( map ( int , input ( ) . split ( ) ) ) Y = list ( map ( int , input ( ) . split ( ) ) ) Z = list ( map ( int , input ( ) . split ( ) ) ) res = " Yes " for i in range ( 2 ) : if X [ i ] - X [ i + 1 ] == Y [ i ] - Y [ i + 1 ] and X [ i ] - X [ i + 1 ] == Z [ i ] - Z [ i + 1 ] : res = " No " break i if ( X [ 0 ] - X [ 1 ] == Y [ 0 ] - Y [ 1 ] and X [ 0 ] - X [ 1 ] == Z [ 0 ] - Z [ 1 ] and X [ 2 ] - X [ 1 ] == Y [ 2 ] - Y [ 1 ] and X [ 2 ] - X [ 1 ] == Z [ 2 ] - Z [ 1 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ ] ans = " No " for i in range ( 3 ) : nc = list ( map ( int , input ( ) . split ( ) ) ) c . append ( nc ) if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] and c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = " Yes " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( i + 1 , 3 ) : t = c [ i ] [ 0 ] - c [ j ] [ 0 ] for k in [ 1 , 2 ] : if t != c [ i ] [ k ] - c [ j ] [ k ] : print ( " No " ) exit ( 0 ) t = c [ 0 ] [ i ] - c [ 0 ] [ j ] for k in [ 1 , 2 ] : if t != c [ k ] [ i ] - c [ k ] [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : d = c [ i ] [ j ] - c [ i + 1 ] [ j ] e = c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] if d != e : print ( " No " ) exit ( 0 ) for i in range ( 2 ) : for j in range ( 2 ) : d = c [ i ] [ j ] - c [ i ] [ j + 1 ] e = c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] if d != e : print ( " No " ) exit ( 0 ) print ( " Yes " )
import sys cl = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) cl . append ( c ) if cl [ 0 ] [ 0 ] + cl [ 1 ] [ 1 ] != cl [ 1 ] [ 0 ] + cl [ 0 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 1 ] [ 1 ] + cl [ 2 ] [ 2 ] != cl [ 1 ] [ 2 ] + cl [ 2 ] [ 1 ] : print ( " No " ) sys . exit ( ) if cl [ 0 ] [ 0 ] + cl [ 2 ] [ 2 ] != cl [ 0 ] [ 2 ] + cl [ 2 ] [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
import numpy as np def test ( ) : c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) a = c - np . min ( c , axis = 0 ) if a [ 0 ] [ 0 ] == a [ 0 ] [ 1 ] == a [ 0 ] [ 2 ] and a [ 1 ] [ 0 ] == a [ 1 ] [ 1 ] == a [ 1 ] [ 2 ] and a [ 2 ] [ 0 ] == a [ 2 ] [ 1 ] == a [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : test ( )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) flg = True for i in range ( 2 ) : if not c [ 0 , i ] - c [ 0 , i + 1 ] == c [ 1 , i ] - c [ 1 , i + 1 ] == c [ 2 , i ] - c [ 2 , i + 1 ] : flg = False break if not c [ i , 0 ] - c [ i + 1 , 0 ] == c [ i , 1 ] - c [ i + 1 , 1 ] == c [ i , 2 ] - c [ i + 1 , 2 ] : flg = False break print ( ' Yes ' ) if flg else print ( ' No ' )
mat = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( a ) ans = False if mat [ 1 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 0 ] [ 2 ] : if mat [ 2 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] and mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 2 ] [ 2 ] - mat [ 0 ] [ 2 ] : ans = True if ans : print ( " Yes " ) else : print ( " No " )
import sys , math , itertools , heapq , collections , bisect input = lambda : sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf-8 ' ) sys . setrecursionlimit ( 10 ** 8 ) inf = float ( ' inf ' ) ans = count = 0 B = list ( map ( int , input ( ) . split ( ) ) ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) A2 = list ( map ( int , input ( ) . split ( ) ) ) tmp = A2 [ 0 ] - B [ 0 ] for i in range ( 3 ) : if not tmp == A2 [ i ] - B [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] Bs = [ C [ 0 ] [ i ] for i in range ( 3 ) ] As = [ 0 , C [ 1 ] [ 0 ] - Bs [ 0 ] , C [ 2 ] [ 0 ] - Bs [ 0 ] ] if all ( As [ i ] + Bs [ j ] == C [ i ] [ j ] for i in range ( 3 ) for j in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) std = l [ i ] [ 0 ] for j in range ( 3 ) : l [ i ] [ j ] -= std if l [ 0 ] == l [ 1 ] and l [ 0 ] == l [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 a3 = c [ 2 ] [ 0 ] - b1 b3 = c [ 0 ] [ 2 ] - a1 if a2 + b2 != c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if a2 + b3 != c [ 1 ] [ 2 ] : print ( " No " ) exit ( ) if a3 + b2 != c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) if a3 + b3 != c [ 2 ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and b [ 0 ] - c [ 0 ] == b [ 1 ] - c [ 1 ] == b [ 2 ] - c [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
a = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] def main ( ) : for i in range ( 1 , 3 ) : x = a [ 0 ] [ 0 ] - a [ 0 ] [ i ] == a [ 1 ] [ 0 ] - a [ 1 ] [ i ] == a [ 2 ] [ 0 ] - a [ 2 ] [ i ] y = a [ 0 ] [ 0 ] - a [ i ] [ 0 ] == a [ 0 ] [ 1 ] - a [ i ] [ 1 ] == a [ 0 ] [ 2 ] - a [ i ] [ 2 ] if x is False or y is False : return " No " return " Yes " if __name__ == " __main__ " : print ( main ( ) )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) a = [ 0 ] * 3 b = [ 0 ] * 3 x = 0 for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - x for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : x = a [ i ] + b [ j ] if x != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] def diff ( arr ) : return tuple ( [ pre_x - x for pre_x , x in zip ( arr [ : - 1 ] , arr [ 1 : ] ) ] ) diffs = [ diff ( row ) for row in c ] if diffs [ 0 ] == diffs [ 1 ] == diffs [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ input ( ) . split ( ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : c [ i ] [ j ] = int ( c [ i ] [ j ] ) for i in range ( 100 ) : for j in range ( 100 ) : if i + j == c [ 0 ] [ 0 ] : a0 , b0 = i , j a1 , b1 = c [ 1 ] [ 0 ] - b0 , c [ 0 ] [ 1 ] - a0 a2 , b2 = c [ 2 ] [ 0 ] - b0 , c [ 0 ] [ 2 ] - a0 if ( a1 + b1 == c [ 1 ] [ 1 ] ) and ( a1 + b2 == c [ 1 ] [ 2 ] ) and ( a2 + b1 == c [ 2 ] [ 1 ] ) and ( a2 + b2 == c [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] for a1 in range ( 100 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a21 = c2 [ 0 ] - b1 a22 = c2 [ 1 ] - b2 a23 = c2 [ 2 ] - b3 a31 = c3 [ 0 ] - b1 a32 = c3 [ 1 ] - b2 a33 = c3 [ 2 ] - b3 if ( a21 == a22 == a23 ) and ( a31 == a32 == a33 ) : print ( ' Yes ' ) break elif a1 == 99 : print ( ' No ' ) break else : continue
* m , = map ( int , open ( 0 ) . read ( ) . split ( ) ) b = m [ : 3 ] a = [ 0 , m [ 3 ] - b [ 0 ] , m [ 6 ] - b [ 0 ] ] for i in range ( 9 ) : if m [ i ] != a [ i // 3 ] + b [ i % 3 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) n1 = max ( c [ 0 ] ) n2 = max ( c [ 1 ] ) n3 = max ( c [ 2 ] ) ans = ' No ' for a1 in range ( n1 + 1 ) : for a2 in range ( n2 + 1 ) : for a3 in range ( n3 + 1 ) : if c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 : if c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 : if c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 : ans = ' Yes ' break print ( ans )
import sys c = [ list ( map ( int , l . split ( ) ) ) for l in sys . stdin . read ( ) . splitlines ( ) ] for i in range ( 2 ) : c [ 2 - i ] = [ x - y for x , y in zip ( c [ 2 - i ] , c [ 1 - i ] ) ] for i in range ( 2 ) : for j in range ( 3 ) : c [ j ] [ 2 - i ] -= c [ j ] [ 1 - i ] if c [ 1 ] [ 1 : ] == c [ 2 ] [ 1 : ] == [ 0 , 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
from itertools import permutations l = list ( range ( 3 ) ) l = list ( permutations ( l , 2 ) ) C = [ [ 0 ] * 3 for i in range ( 3 ) ] r = ' Yes ' for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in l : if not C [ 0 ] [ i [ 0 ] ] - C [ 0 ] [ i [ 1 ] ] == C [ 1 ] [ i [ 0 ] ] - C [ 1 ] [ i [ 1 ] ] == C [ 2 ] [ i [ 0 ] ] - C [ 2 ] [ i [ 1 ] ] : r = ' No ' break print ( r )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( min ( c11 , c12 , c13 ) + 1 ) : t1 = c11 - i t2 = c12 - i t3 = c13 - i if c21 - t1 == c22 - t2 and c21 - t1 == c23 - t3 and c31 - t1 == c32 - t2 and c31 - t1 == c33 - t3 : print ( " Yes " ) break else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( ' No ' ) elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) for a1 in range ( 101 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if ( c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 ) : print ( " Yes " ) break else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] x1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] x2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] x3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] x4 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] x5 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] x6 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) x1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] x2 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] x3 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] x4 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] x5 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] x6 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] if x1 == x2 and x2 == x3 : pass else : print ( ' No ' ) exit ( ) if x4 == x5 and x5 == x6 : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( c11 + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) def correct ( ) : if a1 + b2 != c12 : return False if a1 + b3 != c13 : return False if a2 + b1 != c21 : return False if a2 + b3 != c23 : return False if a3 + b1 != c31 : return False if a3 + b2 != c32 : return False return True for i in range ( c11 + 1 ) : for j in range ( c22 + 1 ) : for k in range ( c33 + 1 ) : a1 = i b1 = c11 - i a2 = j b2 = c22 - j a3 = k b3 = c33 - k if correct ( ) : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) d1 = [ c2 [ i ] - c1 [ i ] for i in range ( 3 ) ] d2 = [ c3 [ i ] - c1 [ i ] for i in range ( 3 ) ] if ( d1 [ 0 ] == d1 [ 1 ] and d1 [ 0 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] and d2 [ 0 ] == d2 [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
import sys c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) coldif = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] for i in range ( 1 , 3 ) : dif = [ c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 1 ] ] if dif != coldif : print ( ' No ' ) sys . exit ( ) rowdif = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] for i in range ( 1 , 3 ) : dif = [ c [ 1 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 1 ] [ i ] ] if dif != rowdif : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 == c22 - c12 == c23 - c13 and c31 - c21 == c32 - c22 == c33 - c23 : print ( " Yes " ) else : print ( " No " )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
def main ( ) : import sys sys . setrecursionlimit ( 10 ** 7 ) G = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def recursion ( ai = 0 , b0 = - 1 , b1 = - 1 , b2 = - 1 ) : if ai == 3 : return True if ai > 0 : d = G [ ai ] [ 0 ] - b0 if ( G [ ai ] [ 0 ] - b0 ) == ( G [ ai ] [ 1 ] - b1 ) == ( G [ ai ] [ 2 ] - b2 ) and 0 <= d <= 100 : return recursion ( ai + 1 , b0 , b1 , b2 ) else : return False for a in range ( 100 + 1 ) : d = G [ 0 ] [ 0 ] - a if d < 0 : break b0 = d d = G [ 0 ] [ 1 ] - a if d < 0 : break b1 = d d = G [ 0 ] [ 2 ] - a if d < 0 : break b2 = d if recursion ( ai + 1 , b0 , b1 , b2 ) : return True return False cond = recursion ( ) print ( ' Yes ' if cond else ' No ' ) if __name__ == ' __main__ ' : main ( )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_list = [ [ ] for i in range ( 3 ) ] b_list = [ [ ] for i in range ( 3 ) ] a_list [ 0 ] = 0 b_list [ 0 ] = c_list [ 0 ] [ 0 ] a_list [ 1 ] = c_list [ 0 ] [ 1 ] - b_list [ 0 ] a_list [ 2 ] = c_list [ 0 ] [ 2 ] - b_list [ 0 ] b_list [ 1 ] = c_list [ 1 ] [ 0 ] - a_list [ 0 ] b_list [ 2 ] = c_list [ 2 ] [ 0 ] - a_list [ 0 ] if ( ( ( a_list [ 1 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 2 ] ) and ( ( a_list [ 1 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) ans = ' No ' if a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] and a [ 2 ] - a [ 1 ] == b [ 2 ] - b [ 1 ] == c [ 2 ] - c [ 1 ] : if b [ 0 ] - a [ 0 ] == b [ 1 ] - a [ 1 ] == b [ 2 ] - a [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : ans = ' Yes ' print ( ans )
import sys from functools import reduce import copy import math from pprint import pprint sys . setrecursionlimit ( 4100000 ) def inputs ( num_of_input ) : ins = [ input ( ) for i in range ( num_of_input ) ] return ins def int_inputs ( num_of_input ) : ins = [ int ( input ( ) ) for i in range ( num_of_input ) ] return ins def solve ( inputs ) : grid = list ( map ( string_to_int , inputs ) ) for x in range ( 101 ) : a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] a [ 0 ] = x for j in range ( 3 ) : b [ j ] = grid [ 0 ] [ j ] - a [ 0 ] a [ 1 ] = grid [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = grid [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if grid [ i ] [ j ] != a [ i ] + b [ j ] : return ' No ' return ' Yes ' def string_to_int ( string ) : return list ( map ( int , string . split ( ) ) ) if __name__ == " __main__ " : ret = solve ( inputs ( 3 ) ) print ( ret )
from __future__ import print_function import sys sys . setrecursionlimit ( 500000 ) import re import array import copy import functools import operator import math import string import fractions from fractions import Fraction import collections import itertools import bisect import random import time import heapq from heapq import heappush from heapq import heappop from heapq import heappushpop from heapq import heapify from heapq import heapreplace from queue import PriorityQueue as pq from queue import Queue from itertools import accumulate from collections import deque from collections import Counter from operator import mul from functools import reduce input = sys . stdin . readline def eprint ( * args , ** kwargs ) : print ( * args , file = sys . stderr , ** kwargs ) return def combinations_count ( n , r ) : r = min ( r , n - r ) numer = reduce ( mul , range ( n , n - r , - 1 ) , 1 ) denom = reduce ( mul , range ( 1 , r + 1 ) , 1 ) return numer // denom def main ( ) : c = [ [ ] for _ in range ( 4 ) ] for i in range ( 1 , 4 ) : c [ i ] = [ 0 ] + list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) def diff ( i , j , k ) : return c [ k ] [ i ] - c [ k ] [ j ] if diff ( 3 , 2 , 1 ) == diff ( 3 , 2 , 2 ) == diff ( 3 , 2 , 3 ) and diff ( 2 , 1 , 1 ) == diff ( 2 , 1 , 2 ) == diff ( 2 , 1 , 3 ) : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : A = [ i , j , k ] B = [ C [ 0 ] [ 0 ] - A [ 0 ] , C [ 1 ] [ 1 ] - A [ 1 ] , C [ 2 ] [ 2 ] - A [ 2 ] ] count = 0 for l in range ( 3 ) : for m in range ( 3 ) : if C [ l ] [ m ] == A [ l ] + B [ m ] : count += 1 if count == 9 : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
mat = [ map ( int , raw_input ( ) . split ( ) ) for _ in range ( 3 ) ] def f ( m ) : return ( m [ 1 ] - m [ 0 ] , m [ 2 ] - m [ 1 ] ) b = True s = set ( [ ] ) for l in mat : s . add ( f ( l ) ) if len ( s ) > 1 : b = False s = set ( [ ] ) for j in range ( 3 ) : c = [ mat [ i ] [ j ] for i in range ( 3 ) ] s . add ( f ( c ) ) if len ( s ) > 1 : b = False print ' Yes ' if b else ' No '
c0 = list ( map ( int , input ( ) . split ( ) ) ) c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c0 , c1 , c2 ] judge = 0 if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : judge + = 1 if c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] and c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : judge + = 1 if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : judge + = 1 if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] and c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : judge + = 1 if judge == 4 : print ( " Yes " ) else : print ( " No " )
C = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) b0 = C [ 0 ] [ 0 ] b1 = C [ 0 ] [ 1 ] b2 = C [ 0 ] [ 2 ] a2_1 = C [ 1 ] [ 0 ] - b0 a2_2 = C [ 1 ] [ 1 ] - b1 a2_3 = C [ 1 ] [ 2 ] - b2 a3_1 = C [ 2 ] [ 0 ] - b0 a3_2 = C [ 2 ] [ 1 ] - b1 a3_3 = C [ 2 ] [ 2 ] - b2 if a2_1 == a2_2 and a2_2 == a2_3 : if a3_1 == a3_2 and a3_2 == a3_3 : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for k in range ( 3 ) ] tC = [ list ( k ) for k in zip ( * C ) ] for i in range ( 2 ) : p = [ C [ i ] [ k ] - C [ i + 1 ] [ k ] for k in range ( 3 ) ] tp = [ tC [ i ] [ k ] - tC [ i + 1 ] [ k ] for k in range ( 3 ) ] if p [ 0 ] == p [ 1 ] == p [ 2 ] and tp [ 0 ] == tp [ 1 ] == tp [ 2 ] : continue else : print ( " No " ) exit ( ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for M in range ( 3 ) ] ans = " No " for i in range ( min ( l [ 0 ] ) + 1 ) : for j in range ( min ( l [ 1 ] ) + 1 ) : for k in range ( min ( l [ 2 ] ) + 1 ) : if ( l [ 0 ] [ 0 ] - i ) == ( l [ 1 ] [ 0 ] - j ) and ( l [ 0 ] [ 0 ] - i ) == ( l [ 2 ] [ 0 ] - k ) and \ ( l [ 0 ] [ 1 ] - i ) == ( l [ 1 ] [ 1 ] - j ) and ( l [ 0 ] [ 1 ] - i ) == ( l [ 2 ] [ 1 ] - k ) and \ ( l [ 0 ] [ 2 ] - i ) == ( l [ 1 ] [ 2 ] - j ) and ( l [ 0 ] [ 2 ] - i ) == ( l [ 2 ] [ 2 ] - k ) : ans = " Yes " print ( ans )
S = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : if ( S [ 0 ] [ 0 ] - i == S [ 1 ] [ 0 ] - j and S [ 0 ] [ 1 ] - i == S [ 1 ] [ 1 ] - j ) and S [ 0 ] [ 2 ] - i == S [ 1 ] [ 2 ] - j : if ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 1 ] - S [ 0 ] [ 1 ] ) and ( S [ 2 ] [ 0 ] - S [ 0 ] [ 0 ] == S [ 2 ] [ 2 ] - S [ 0 ] [ 2 ] ) : check = True print ( ' Yes ' ) exit ( ) if check == False : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = min ( c [ 0 ] ) b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( " No " ) break else : continue break else : print ( " Yes " )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 B = np . array ( [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ) if len ( set ( np . array ( c [ 1 ] ) - B ) ) == 1 and len ( set ( np . array ( c [ 2 ] ) - B ) ) == 1 : print ( " Yes " ) else : print ( " No " )
l = list ( ) for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if l [ 0 ] [ 0 ] - l [ 1 ] [ 0 ] == l [ 0 ] [ 1 ] - l [ 1 ] [ 1 ] == l [ 0 ] [ 2 ] - l [ 1 ] [ 2 ] : if l [ 2 ] [ 0 ] - l [ 1 ] [ 0 ] == l [ 2 ] [ 1 ] - l [ 1 ] [ 1 ] == l [ 2 ] [ 2 ] - l [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
import sys c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : arr1 = c [ i ] arr2 = c [ i + 1 ] d = arr1 [ 2 ] - arr2 [ 2 ] for j in range ( 2 ) : if d != arr1 [ j ] - arr2 [ j ] : print ( ' No ' ) sys . exit ( 0 ) for i in range ( 2 ) : d = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] for j in range ( 2 ) : if d != c [ j ] [ i ] - c [ j ] [ i + 1 ] : print ( ' No ' ) sys . exit ( 0 ) print ( ' Yes ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = False for a1 in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if c [ 1 ] [ 1 ] - b2 == a2 and c [ 1 ] [ 2 ] - b3 == a2 : if c [ 2 ] [ 1 ] - b2 == a3 and c [ 2 ] [ 2 ] - b3 == a3 : ans = True break if ans == True : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : x , y , z = map ( int , input ( ) . split ( ) ) c . append ( x ) c . append ( y ) c . append ( z ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = c [ 0 ] - a1 b2 = c [ 1 ] - a1 b3 = c [ 2 ] - a1 if c [ 3 ] == a2 + b1 and c [ 4 ] == a2 + b2 and c [ 5 ] == a2 + b3 and c [ 6 ] == a3 + b1 and c [ 7 ] == a3 + b2 and c [ 8 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import io array = [ ] for i in range ( 3 ) : array . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( array [ 0 ] [ 0 ] + array [ 1 ] [ 1 ] + array [ 2 ] [ 2 ] ) * 3 == ( sum ( array [ 0 ] ) + sum ( array [ 1 ] ) + sum ( array [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) b1 , b2 , b3 = c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] if c2 [ 0 ] - b1 == c2 [ 1 ] - b2 == c2 [ 2 ] - b3 and c3 [ 0 ] - b1 == c3 [ 1 ] - b2 == c3 [ 2 ] - b3 : print ( ' Yes ' ) else : print ( ' No ' )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) s = 0 for i in range ( 0 , min ( l1 [ 0 ] , l1 [ 1 ] , l1 [ 2 ] , l2 [ 0 ] , l3 [ 0 ] ) + 1 ) : j = l1 [ 0 ] - i m = l1 [ 1 ] - i n = l1 [ 2 ] - i if l2 [ 0 ] - j == l2 [ 1 ] - m == l2 [ 2 ] - n and l3 [ 0 ] - j == l3 [ 1 ] - m == l3 [ 2 ] - n : s = 1 break print ( " Yes " if s == 1 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if [ [ i + b1 , i + b2 , i + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] == C : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] check = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : o = c [ 0 ] [ 0 ] - i p = c [ 1 ] [ 1 ] - j q = c [ 2 ] [ 2 ] - k if o < 0 or p < 0 or q < 0 : continue ls = [ [ i + o , i + p , i + q ] , [ j + o , j + p , j + q ] , [ k + o , k + p , k + q ] ] if ls == c : check = True break print ( " Yes " if check else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) * 2 == c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 2 ) : x = grid [ 0 ] [ 2 ] - grid [ 0 ] [ i ] y = grid [ 1 ] [ 2 ] - grid [ 1 ] [ i ] z = grid [ 2 ] [ 2 ] - grid [ 2 ] [ i ] if x != y or x != z : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( c ) : for a1 in range ( c [ 0 ] [ 0 ] ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] a = [ a1 ] + [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) ] for ai in range ( len ( a ) ) : for bi in range ( len ( b ) ) : if c [ ai ] [ bi ] != a [ ai ] + b [ bi ] : print ( ' No ' ) return print ( ' Yes ' ) check ( c )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) res = " No " for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : if c [ 0 ] [ 0 ] - i == c [ 1 ] [ 0 ] - j == c [ 2 ] [ 0 ] - k : if c [ 0 ] [ 1 ] - i == c [ 1 ] [ 1 ] - j == c [ 2 ] [ 1 ] - k : if c [ 0 ] [ 2 ] - i == c [ 1 ] [ 2 ] - j == c [ 2 ] [ 2 ] - k : res = " Yes " print ( res )
def solve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
A = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for x , y in zip ( A , A [ 1 : ] ) : if not ( y [ 0 ] - x [ 0 ] == y [ 1 ] - x [ 1 ] == y [ 2 ] - x [ 2 ] ) : print ( " No " ) exit ( ) for x in range ( 2 ) : if not ( A [ 0 ] [ x + 1 ] - A [ 0 ] [ x ] == A [ 1 ] [ x + 1 ] - A [ 1 ] [ x ] == A [ 2 ] [ x + 1 ] - A [ 2 ] [ x ] ) : print ( " No " ) exit ( ) if A [ 0 ] [ 0 ] + A [ 2 ] [ 2 ] != A [ 0 ] [ 2 ] + A [ 2 ] [ 0 ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys sys . setrecursionlimit ( 10 ** 9 ) INF = 10 ** 18 MOD = 10 ** 9 + 7 input = lambda : sys . stdin . readline ( ) . rstrip ( ) YesNo = lambda b : bool ( [ print ( ' Yes ' ) ] if b else print ( ' No ' ) ) YESNO = lambda b : bool ( [ print ( ' YES ' ) ] if b else print ( ' NO ' ) ) int1 = lambda x : int ( x ) - 1 def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ [ 0 ] * 3 for _ in range ( 3 ) ] b = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : a [ i ] [ j ] = c [ i ] [ j ] - min ( c [ i ] ) b [ j ] [ i ] = c [ i ] [ j ] - min ( c [ 0 ] [ j ] , c [ 1 ] [ j ] , c [ 2 ] [ j ] ) YesNo ( a [ 0 ] == a [ 1 ] == a [ 2 ] and b [ 0 ] == b [ 1 ] == b [ 2 ] ) if __name__ == ' __main__ ' : main ( )
import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) b = np . array ( [ ] , int ) for l in range ( 3 ) : buf = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) b = np . concatenate ( ( b , buf ) , axis = None ) b = np . reshape ( b , ( 9 , 1 ) ) Ab = np . concatenate ( ( A , b ) , axis = 1 ) rA = np . linalg . matrix_rank ( A ) rAb = np . linalg . matrix_rank ( Ab ) if rA == rAb : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] if ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) % 3 != 0 : print ( ' No ' ) exit ( ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c = [ ] S = 0 for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) S += sum ( c [ i ] ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : a [ i ] = sum ( c [ i ] [ 0 : 3 ] ) b [ i ] = sum ( c [ 0 : 3 ] [ i ] ) if S % 3 != 0 : ans = " No " if ( a [ 0 ] - a [ 1 ] ) % 3 != 0 or ( a [ 1 ] - a [ 2 ] ) % 3 != 0 or ( a [ 2 ] - a [ 0 ] ) % 3 != 0 : ans = " No " elif ( b [ 0 ] - b [ 1 ] ) % 3 != 0 or ( b [ 1 ] - b [ 2 ] ) % 3 != 0 or ( b [ 2 ] - b [ 0 ] ) % 3 != 0 : ans = " No " elif c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != S // 3 : ans = " No " else : ans = " Yes " print ( ans )
S = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] C1 = S [ 0 ] [ 0 ] C2 = S [ 0 ] [ 1 ] C3 = S [ 0 ] [ 2 ] C4 = S [ 1 ] [ 0 ] C5 = S [ 1 ] [ 1 ] C6 = S [ 1 ] [ 2 ] C7 = S [ 2 ] [ 0 ] C8 = S [ 2 ] [ 1 ] C9 = S [ 2 ] [ 2 ] if C4 - C1 == C6 - C3 and C6 - C3 == C5 - C2 and C7 - C1 == C8 - C2 and C8 - C2 == C9 - C3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : x = c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] y = c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] z = c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] p = c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] q = c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] r = c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] if x != y or y != z or x != z : flag = False break elif p != q or q != r or p != r : flag = False break if flag : print ( " Yes " ) else : print ( " No " )
c = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = ' No ' print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) ans = True a1 = 0 b = [ ] for i in range ( 3 ) : b . append ( c1 [ i ] - a1 ) a2 = c2 [ 0 ] - b [ 0 ] a3 = c3 [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : if a2 + b [ i ] != c2 [ i ] or a3 + b [ i ] != c3 [ i ] : ans = False break if ans == True : print ( " Yes " ) else : print ( " No " )
import math import heapq import bisect import numpy as np from collections import Counter C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 flg = 0 for i in range ( C [ 0 ] [ 0 ] + 1 ) : A [ 0 ] = i B [ 0 ] = C [ 0 ] [ 0 ] - i for j in range ( 1 , 3 ) : A [ j ] = C [ j ] [ 0 ] - B [ 0 ] B [ j ] = C [ 0 ] [ j ] - A [ 0 ] tmp = abs ( C [ 1 ] [ 1 ] - A [ 1 ] - B [ 1 ] ) + abs ( C [ 1 ] [ 2 ] - A [ 1 ] - B [ 2 ] ) + abs ( C [ 2 ] [ 1 ] - A [ 2 ] - B [ 1 ] ) + abs ( C [ 2 ] [ 2 ] - A [ 2 ] - B [ 2 ] ) if tmp == 0 : flg = 1 if flg : print ( " Yes " ) else : print ( " No " )
import numpy as np M = np . array ( list ( map ( int , open ( 0 ) . read ( ) . split ( ) ) ) ) . reshape ( 3 , 3 ) hSum = M . sum ( axis = 0 ) vSum = M . sum ( axis = 1 ) f = True for i in range ( 3 ) : if ( hSum [ i ] - hSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False for i in range ( 3 ) : if ( vSum [ i ] - vSum [ ( i + 1 ) % 3 ] ) % 3 != 0 : f = False print ( " Yes " if f else " No " )
from functools import reduce from itertools import * def read ( ) : return list ( map ( int , input ( ) . split ( ) ) ) l = [ read ( ) , read ( ) , read ( ) ] a = len ( list ( set ( [ l [ 1 ] [ i ] - l [ 0 ] [ i ] for i in range ( 3 ) ] ) ) ) b = len ( list ( set ( [ l [ 2 ] [ i ] - l [ 1 ] [ i ] for i in range ( 3 ) ] ) ) ) c = len ( list ( set ( [ l [ i ] [ 1 ] - l [ i ] [ 0 ] for i in range ( 3 ) ] ) ) ) d = len ( list ( set ( [ l [ i ] [ 2 ] - l [ i ] [ 1 ] for i in range ( 3 ) ] ) ) ) if a == 1 and b == 1 and c == 1 and d == 1 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) flag = True abs_a = [ ] for i in range ( 3 ) : abs_a . append ( abs ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) ) abs_a . append ( abs ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) ) abs_a . append ( abs ( c [ 0 ] [ i ] - c [ 2 ] [ i ] ) ) if abs_a [ 0 ] == abs_a [ 3 ] and abs_a [ 0 ] == abs_a [ 6 ] : pass else : flag = False if abs_a [ 1 ] == abs_a [ 4 ] and abs_a [ 1 ] == abs_a [ 7 ] : pass else : flag = False if abs_a [ 2 ] == abs_a [ 5 ] and abs_a [ 2 ] == abs_a [ 8 ] : pass else : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a0 = 0 b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a0 a1 = c [ 1 ] [ 0 ] - b [ 0 ] a2 = c [ 2 ] [ 0 ] - b [ 0 ] a = [ a0 , a1 , a2 ] is_ok = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : is_ok = False if is_ok : print ( " Yes " ) else : print ( " No " )
import sys C = [ ] A = [ 0 ] * 3 B = [ 0 ] * 3 for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 3 ) : A [ i ] = min ( C [ i ] ) for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] for i in range ( 3 ) : for j in range ( 1 , 3 ) : if B [ i ] + A [ j ] != C [ j ] [ i ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) b = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] print ( ' Yes ' if a == 3 * b else ' No ' )
a = [ ] for i in range ( 3 ) : a += [ list ( map ( int , input ( ) . split ( ) ) ) ] for i in range ( 3 ) : x = a [ i ] [ 0 ] - a [ ( i + 1 ) % 3 ] [ 0 ] y = a [ 0 ] [ i ] - a [ 0 ] [ ( i + 1 ) % 3 ] if x != a [ i ] [ 1 ] - a [ ( i + 1 ) % 3 ] [ 1 ] or x != a [ i ] [ 2 ] - a [ ( i + 1 ) % 3 ] [ 2 ] : print ( ' No ' ) exit ( ) if y != a [ 1 ] [ i ] - a [ 1 ] [ ( i + 1 ) % 3 ] or y != a [ 2 ] [ i ] - a [ 2 ] [ ( i + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def main ( ) : import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) C = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] C = np . array ( C ) C = C . reshape ( [ 9 , 1 ] ) ext_A = np . concatenate ( [ A , C ] , axis = 1 ) A_rank = np . linalg . matrix_rank ( A ) ext_A_rank = np . linalg . matrix_rank ( ext_A ) if A_rank == ext_A_rank : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) i = 0 flaga12 = True flaga23 = True flaga31 = True flagb12 = True flagb23 = True flagb31 = True b12 = c [ i ] [ 0 ] - c [ i ] [ 1 ] b23 = c [ i ] [ 1 ] - c [ i ] [ 2 ] b31 = c [ i ] [ 2 ] - c [ i ] [ 0 ] for i in range ( 3 ) : flagb12 = flagb12 and ( b12 == c [ i ] [ 0 ] - c [ i ] [ 1 ] ) flagb23 = flagb23 and ( b23 == c [ i ] [ 1 ] - c [ i ] [ 2 ] ) flagb31 = flagb31 and ( b31 == c [ i ] [ 2 ] - c [ i ] [ 0 ] ) j = 0 a12 = c [ 0 ] [ j ] - c [ 1 ] [ j ] a23 = c [ 1 ] [ j ] - c [ 2 ] [ j ] a31 = c [ 2 ] [ j ] - c [ 0 ] [ j ] for i in range ( 3 ) : a12 = c [ 0 ] [ j ] - c [ 1 ] [ j ] a23 = c [ 1 ] [ j ] - c [ 2 ] [ j ] a31 = c [ 2 ] [ j ] - c [ 0 ] [ j ] flaga12 = flaga12 and ( a12 == c [ 0 ] [ j ] - c [ 1 ] [ j ] ) flaga23 = flaga23 and ( a23 == c [ 1 ] [ j ] - c [ 2 ] [ j ] ) flaga31 = flaga31 and ( a31 == c [ 2 ] [ j ] - c [ 0 ] [ j ] ) judge = ( flaga12 and flaga23 and flaga31 and flagb12 and flagb23 and flagb31 ) if judge : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 0 , 3 ) : for j in range ( i , 3 ) : if a [ i ] + b [ j ] != a [ j ] + b [ i ] or a [ i ] + c [ j ] != a [ j ] + c [ i ] or b [ i ] + c [ j ] != b [ j ] + c [ i ] : print ( " No " ) quit ( 0 ) print ( " Yes " )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] if ( ans == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] and ans == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e : if d - e == g - h : if b - c == e - f : if e - f == h - i : if a - d == b - e : if b - e == c - f : if d - g == e - h : if e - h == f - i : print ( " Yes " ) exit ( ) print ( " No " )
import sys try : from typing import List except ImportError : pass YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : print ( YES if all ( c [ i ] [ j ] == c [ 0 ] [ j ] + c [ i ] [ 0 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) for j in range ( 1 , 3 ) ) else NO ) def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
import sys input = sys . stdin . readline a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] dx = [ 0 ] * 2 dy = [ 0 ] * 2 for i in range ( 2 ) : dx [ i ] = a [ 0 ] [ i + 1 ] - a [ 0 ] [ i ] for i in range ( 2 ) : dy [ i ] = a [ i + 1 ] [ 0 ] - a [ i ] [ 0 ] for i in range ( 3 ) : for j in range ( 2 ) : if a [ i ] [ j + 1 ] - a [ i ] [ j ] != dx [ j ] : print ( " No " ) exit ( 0 ) for i in range ( 3 ) : for j in range ( 2 ) : if a [ j + 1 ] [ i ] - a [ j ] [ i ] != dy [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
import sys C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 2 ) : for i in range ( 2 ) : if C [ i + 1 ] [ j + 1 ] - C [ i + 1 ] [ j ] != C [ i ] [ 1 + j ] - C [ i ] [ j ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a2 = l [ 0 ] [ 1 ] - l [ 0 ] [ 0 ] a3 = l [ 0 ] [ 2 ] - l [ 0 ] [ 0 ] b2 = l [ 1 ] [ 0 ] - l [ 0 ] [ 0 ] b3 = l [ 2 ] [ 0 ] - l [ 0 ] [ 0 ] is_takahashi_true = True for i in range ( 1 , 3 ) : ta2 = l [ i ] [ 1 ] - l [ i ] [ 0 ] ta3 = l [ i ] [ 2 ] - l [ i ] [ 0 ] tb2 = l [ 1 ] [ i ] - l [ 0 ] [ i ] tb3 = l [ 2 ] [ i ] - l [ 0 ] [ i ] if a2 != ta2 or a3 != ta3 or b2 != tb2 or b3 != tb3 : is_takahashi_true = False print ( " YNeos " [ not is_takahashi_true : : 2 ] )
hog1 = list ( map ( int , input ( ) . split ( ) ) ) hog2 = list ( map ( int , input ( ) . split ( ) ) ) hog3 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 100 ) : if ( hog1 [ 0 ] != 0 and hog1 [ 1 ] != 0 and hog1 [ 2 ] != 0 ) : hog1 [ 0 ] -= 1 hog1 [ 1 ] -= 1 hog1 [ 2 ] -= 1 if ( hog2 [ 0 ] != 0 and hog2 [ 1 ] != 0 and hog2 [ 2 ] != 0 ) : hog2 [ 0 ] - = 1 hog2 [ 1 ] - = 1 hog2 [ 2 ] - = 1 if ( hog3 [ 0 ] != 0 and hog3 [ 1 ] != 0 and hog3 [ 2 ] != 0 ) : hog3 [ 0 ] - = 1 hog3 [ 1 ] - = 1 hog3 [ 2 ] - = 1 if ( hog1 [ 0 ] != 0 and hog2 [ 0 ] != 0 and hog3 [ 0 ] != 0 ) : hog1 [ 0 ] - = 1 hog2 [ 0 ] - = 1 hog3 [ 0 ] - = 1 if ( hog1 [ 1 ] != 0 and hog2 [ 1 ] != 0 and hog3 [ 1 ] != 0 ) : hog1 [ 1 ] - = 1 hog2 [ 1 ] - = 1 hog3 [ 1 ] - = 1 if ( hog1 [ 2 ] != 0 and hog2 [ 2 ] != 0 and hog3 [ 2 ] != 0 ) : hog1 [ 2 ] - = 1 hog2 [ 2 ] - = 1 hog3 [ 2 ] - = 1 ans = sum ( hog1 ) + sum ( hog2 ) + sum ( hog3 ) if ( ans == 0 ) : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] A = [ 0 ] * ( 3 ) B = [ 0 ] * ( 3 ) for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True a1 = 0 b1 = C [ 0 ] [ 0 ] b2 = C [ 0 ] [ 1 ] b3 = C [ 0 ] [ 2 ] if not ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 and C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) : flg = False if not ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 and C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : flg = False if flg : print ( ' Yes ' ) else : print ( ' No ' )
data = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = data [ 0 ] [ 0 ] - a1 b2 = data [ 0 ] [ 1 ] - a1 b3 = data [ 0 ] [ 2 ] - a1 if ( b1 + a2 == data [ 1 ] [ 0 ] and b2 + a2 == data [ 1 ] [ 1 ] and b3 + a2 == data [ 1 ] [ 2 ] and b1 + a3 == data [ 2 ] [ 0 ] and b2 + a3 == data [ 2 ] [ 1 ] and b3 + a3 == data [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
C = [ ] for _ in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) tmp = [ c1 , c2 , c3 ] C . append ( tmp ) if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) if not ( C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] ) : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
c_list = [ ] for i in range ( 3 ) : c_list . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) c_11 = c_list [ 0 ] [ 0 ] ans = 0 for a_1 in range ( c_11 + 1 ) : b_1 = c_11 - a_1 b_2 = c_list [ 0 ] [ 1 ] - a_1 b_3 = c_list [ 0 ] [ 2 ] - a_1 if c_list [ 1 ] [ 0 ] - b_1 == c_list [ 1 ] [ 1 ] - b_2 == c_list [ 1 ] [ 2 ] - b_3 and c_list [ 2 ] [ 0 ] - b_1 == c_list [ 2 ] [ 1 ] - b_2 == c_list [ 2 ] [ 2 ] - b_3 : print ( " Yes " ) ans = 1 exit ( ) if ans == 0 : print ( " No " )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : m [ i ] [ j ] = l [ i ] [ j ] - l [ 0 ] [ j ] for i in range ( 3 ) : f = True for j in range ( 3 ) : if m [ i ] [ j ] != m [ i ] [ 0 ] : f = False break if not f : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ [ ] for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] . extend ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : if ( C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] ) and ( C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] == C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] ) : continue else : flag = False break for i in range ( 2 ) : if not flag : break if ( C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] ) and ( C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] == C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] ) : continue else : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 1 ] [ 0 ] == a2 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 0 ] == a3 + b1 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a in range ( 101 ) : for b in range ( 101 ) : for c in range ( 101 ) : d = C [ 0 ] [ 0 ] - a e = C [ 1 ] [ 1 ] - b f = C [ 2 ] [ 2 ] - c if all ( [ b + d == C [ 0 ] [ 1 ] , c + d == C [ 0 ] [ 2 ] , a + e == C [ 1 ] [ 0 ] , c + e == C [ 1 ] [ 2 ] , a + f == C [ 2 ] [ 0 ] , b + f == C [ 2 ] [ 1 ] ] ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def LIHW ( h ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] masu = LIHW ( 3 ) ans = " Yes " for i in range ( 2 ) : if masu [ i + 1 ] [ 1 ] - masu [ i + 1 ] [ 0 ] != masu [ 0 ] [ 1 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ i + 1 ] [ 2 ] - masu [ i + 1 ] [ 1 ] != masu [ 0 ] [ 2 ] - masu [ 0 ] [ 1 ] : ans = " No " for i in range ( 2 ) : if masu [ 1 ] [ i + 1 ] - masu [ 0 ] [ i + 1 ] != masu [ 1 ] [ 0 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ 2 ] [ i + 1 ] - masu [ 1 ] [ i + 1 ] != masu [ 2 ] [ 0 ] - masu [ 1 ] [ 0 ] : ans = " No " print ( ans )
C = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) C . append ( ci ) ans = " No " for a1 in range ( 0 , 101 ) : for a2 in range ( 0 , 101 ) : for a3 in range ( 0 , 101 ) : if ( C [ 0 ] [ 0 ] - a1 == C [ 1 ] [ 0 ] - a2 == C [ 2 ] [ 0 ] - a3 ) and ( C [ 0 ] [ 1 ] - a1 == C [ 1 ] [ 1 ] - a2 == C [ 2 ] [ 1 ] - a3 ) and ( C [ 0 ] [ 2 ] - a1 == C [ 1 ] [ 2 ] - a2 == C [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) quit ( ) print ( ans )
import numpy as np M = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) print ( ' Yes ' if ( np . all ( M [ 0 , : ] - M [ 0 , 0 ] == M [ 1 , : ] - M [ 1 , 0 ] ) and np . all ( M [ 0 , : ] - M [ 0 , 0 ] == M [ 2 , : ] - M [ 2 , 0 ] ) and np . all ( M [ : , 0 ] - M [ 0 , 0 ] == M [ : , 1 ] - M [ 0 , 1 ] ) and np . all ( M [ : , 0 ] - M [ 0 , 0 ] == M [ : , 2 ] - M [ 0 , 2 ] ) ) else ' No ' )
c = [ ] for _ in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c . append ( ( c1 , c2 , c3 ) ) a_test = [ [ 0 , 0 , 0 ] for _ in range ( 2 ) ] b = [ 0 , 0 , 0 ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : dec = [ True , True ] for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a1 for i in range ( 2 ) : for j in range ( 3 ) : a_test [ i ] [ j ] = c [ i + 1 ] [ j ] - b [ j ] a_set = set ( a_test [ i ] ) if len ( a_set ) != 1 : dec [ i ] = False if all ( dec ) : break if all ( dec ) : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] t1 = list ( map ( lambda x : x - min ( C [ 0 ] ) , C [ 0 ] ) ) t2 = list ( map ( lambda x : x - min ( C [ 1 ] ) , C [ 1 ] ) ) t3 = list ( map ( lambda x : x - min ( C [ 2 ] ) , C [ 2 ] ) ) s1 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] ] ) , [ C [ 0 ] [ 0 ] , C [ 1 ] [ 0 ] , C [ 2 ] [ 0 ] ] ) ) s2 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 1 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 1 ] ] ) , [ C [ 0 ] [ 1 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 1 ] ] ) ) s3 = list ( map ( lambda x : x - min ( [ C [ 0 ] [ 2 ] , C [ 1 ] [ 2 ] , C [ 2 ] [ 2 ] ] ) , [ C [ 0 ] [ 2 ] , C [ 1 ] [ 2 ] , C [ 2 ] [ 2 ] ] ) ) arr = [ ] for i , j , k in zip ( t1 + s1 , t2 + s2 , t3 + s3 ) : arr . append ( i == j == k ) print ( ' Yes ' if all ( arr ) else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = [ c [ i ] [ i ] for i in range ( 3 ) ] c2 = [ sum ( i ) for i in c ] print ( ' Yes ' if sum ( c1 ) * 3 == sum ( c2 ) else ' No ' )
H = 3 W = 3 C = [ ] for _ in range ( H ) : C . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) Hs = [ [ ] for _ in range ( H ) ] for i in range ( H ) : Hs [ i ] . append ( C [ i ] [ 0 ] - C [ i ] [ 1 ] ) Hs [ i ] . append ( C [ i ] [ 1 ] - C [ i ] [ 2 ] ) Hs [ i ] . append ( C [ i ] [ 2 ] - C [ i ] [ 0 ] ) Ws = [ [ ] for _ in range ( H ) ] for i in range ( H ) : Ws [ i ] . append ( C [ 0 ] [ i ] - C [ 1 ] [ i ] ) Ws [ i ] . append ( C [ 1 ] [ i ] - C [ 2 ] [ i ] ) Ws [ i ] . append ( C [ 2 ] [ i ] - C [ 0 ] [ i ] ) if all ( [ Hs [ 0 ] == h for h in Hs ] ) and all ( [ Ws [ 0 ] == w for w in Ws ] ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) ans = ' Yes ' diff_w = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] for i in range ( 3 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != diff_w [ j - 1 ] : ans = ' No ' break diff_h = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != diff_h [ i - 1 ] : ans = ' No ' break print ( ans )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flg = True b1 = grid [ 0 ] [ 0 ] b2 = grid [ 0 ] [ 1 ] b3 = grid [ 0 ] [ 2 ] if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 : a2 = grid [ 1 ] [ 0 ] - b1 else : flg = False if grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : a3 = grid [ 2 ] [ 0 ] - b1 else : flg = False if flg : print ( ' Yes ' ) else : print ( ' No ' )
a = [ 0 for i in range ( 3 ) ] b = [ 0 for i in range ( 3 ) ] c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : ans = ' No ' print ( ans )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ds = [ ] for c1 , c2 , c3 in grid : ds . append ( [ c1 - c2 , c2 - c3 , c3 - c1 ] ) count = 0 for i in range ( 3 ) : if ds [ 0 ] [ i ] == ds [ 1 ] [ i ] == ds [ 2 ] [ i ] : count += 1 print ( ' Yes ' if count == 3 else ' No ' )
grid = [ list ( int ( s ) for s in input ( ) . split ( ) ) for _ in range ( 3 ) ] flg = False if ( grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 1 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 1 ] [ 2 ] - grid [ 0 ] [ 2 ] ) \ and ( grid [ 2 ] [ 0 ] - grid [ 0 ] [ 0 ] == grid [ 2 ] [ 1 ] - grid [ 0 ] [ 1 ] == grid [ 2 ] [ 2 ] - grid [ 0 ] [ 2 ] ) : flg = True print ( " Yes " if flg == True else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( c [ 0 ] [ 0 ] + 1 ) : b = [ c [ 0 ] [ 0 ] - i , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i ] a = [ i , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] t = 1 for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != a [ j ] + b [ k ] : t = 0 break if t : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Flg = True if not ( C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] ) : Flg = False if not ( C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] ) : Flg = False print ( " Yes " if Flg else " No " )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = [ 10 , 0 , 0 ] y = [ 0 , 0 , 0 ] for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] [ j ] != x [ i ] + y [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
L = [ ] for i in range ( 3 ) : L . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if all ( L [ i ] [ 0 ] - L [ i + 1 ] [ 0 ] == L [ i ] [ 1 ] - L [ i + 1 ] [ 1 ] == L [ i ] [ 2 ] - L [ i + 1 ] [ 2 ] for i in range ( 2 ) ) and all ( L [ 0 ] [ i ] - L [ 0 ] [ i + 1 ] == L [ 1 ] [ i ] - L [ 1 ] [ i + 1 ] == L [ 2 ] [ i ] - L [ 2 ] [ i + 1 ] for i in range ( 2 ) ) : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline def main ( ) : while True : N , M = map ( int , input ( ) . split ( ) ) if N == 0 : break path = [ [ False ] * N for i in range ( N ) ] for i in range ( M ) : u , v = map ( int , input ( ) . split ( ) ) u -= 1 ; v - = 1 ; path [ u ] [ v ] = True path [ v ] [ u ] = True d = [ - 1 ] * N d [ 0 ] = 0 q = [ 0 ] while len ( q ) > 0 : now = q . pop ( 0 ) for i in range ( N ) : if path [ now ] [ i ] and d [ i ] == - 1 : q . append ( i ) d [ i ] = d [ now ] + 1 ok = True for i in range ( 1 , N ) : for j in range ( i + 1 , N ) : if path [ i ] [ j ] and d [ i ] == d [ j ] : ok = False break if not ok : break if not ok : print ( 0 ) else : num = 0 for i in range ( N ) : if d [ i ] & 1 : num + = 1 if N & 1 : print ( 1 ) if num & 1 : print ( ( N - num ) // 2 ) else : print ( num // 2 ) else : if num & 1 : print ( 0 ) else : if N // 2 == num : print ( 1 ) print ( num // 2 ) else : print ( 2 ) tmp = min ( num , N - num ) print ( tmp // 2 ) print ( ( N - tmp ) // 2 ) if __name__ == " __main__ " : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for b1 in range ( 101 ) : a1 = C [ 0 ] [ 0 ] - b1 a2 = C [ 0 ] [ 1 ] - b1 a3 = C [ 0 ] [ 2 ] - b1 for b2 in range ( 101 ) : aa1 = C [ 1 ] [ 0 ] - b2 aa2 = C [ 1 ] [ 1 ] - b2 aa3 = C [ 1 ] [ 2 ] - b2 for b3 in range ( 101 ) : aaa1 = C [ 2 ] [ 0 ] - b3 aaa2 = C [ 2 ] [ 1 ] - b3 aaa3 = C [ 2 ] [ 2 ] - b3 if ( a1 , a2 , a3 ) == ( aa1 , aa2 , aa3 ) == ( aaa1 , aaa2 , aaa3 ) : print ( " Yes " ) exit ( ) print ( " No " )
import sys input = lambda : sys . stdin . readline ( ) . rstrip ( ) def resolve ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] absum = [ ] def dfs ( depth , perm , s ) : if depth == 3 : absum . append ( s ) else : for i in range ( 3 ) : if not i in perm : dfs ( depth + 1 , perm + [ i ] , s + c [ depth ] [ i ] ) dfs ( 0 , [ ] , 0 ) if len ( set ( absum ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : resolve ( )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( " " ) ) ) for i in range ( 2 ) : if not ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : print ( " No " ) exit ( ) if not ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) diff = np . diff ( c , n = 1 ) for n in range ( 1 , diff . shape [ 0 ] ) : if not all ( diff [ n ] == diff [ 0 ] ) : print ( ' No ' ) break else : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b = C [ 0 ] a = [ C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) d1 , d2 , d3 , d4 , d5 , d6 = c2 - c1 , c3 - c2 , c5 - c4 , c6 - c5 , c8 - c7 , c9 - c8 if d1 == d3 and d3 == d5 and d2 == d4 and d4 == d6 : print ( " Yes " ) else : print ( " No " )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
def IL ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def SL ( ) : return input ( ) . split ( ) def I ( ) : return int ( input ( ) ) def S ( ) : return list ( input ( ) ) C = [ IL ( ) for i in range ( 3 ) ] A = [ 0 , 0 , 0 ] B = [ 0 , 0 , 0 ] for i in range ( 3 ) : B [ i ] = C [ 0 ] [ i ] - A [ 0 ] for i in range ( 1 , 3 ) : A [ i ] = C [ i ] [ 0 ] - B [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] != C [ i ] [ j ] : flag = False if flag : print ( " Yes " ) else : print ( " No " )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) a1 = l1 [ 0 ] b2 = l1 [ 1 ] - a1 b3 = l1 [ 2 ] - a1 a2 = l2 [ 0 ] a3 = l3 [ 0 ] if a2 + b2 == l2 [ 1 ] and a2 + b3 == l2 [ 2 ] and a3 + b2 == l3 [ 1 ] and a3 + b3 == l3 [ 2 ] : print ( " Yes " ) else : print ( " No " )
a0 , a1 , a2 = 0 , 0 , 0 b0 , b1 , b2 = 0 , 0 , 0 matrix = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b0 = matrix [ 0 ] [ 0 ] - a0 b1 = matrix [ 0 ] [ 1 ] - a0 b2 = matrix [ 0 ] [ 2 ] - a0 a1 = matrix [ 1 ] [ 0 ] - b0 a2 = matrix [ 2 ] [ 0 ] - b0 flag = True if matrix [ 1 ] [ 1 ] == a1 + b1 and matrix [ 1 ] [ 2 ] == a1 + b2 and matrix [ 2 ] [ 1 ] == a2 + b1 and matrix [ 2 ] [ 2 ] == a2 + b2 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( input_list ( ) ) ) for a1 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a1 + b1 == c [ 0 ] [ 0 ] and a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and \ a2 + b1 == c [ 1 ] [ 0 ] and a3 + b1 == c [ 2 ] [ 0 ] and a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and \ a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' ) def input_list ( ) : return map ( int , input ( ) . split ( ) ) def input_list_str ( ) : return map ( str , input ( ) . split ( ) ) def lcm_base ( x , y ) : return ( x * y ) // fractions . gcd ( x , y ) def lcm_list ( numbers ) : return reduce ( lcm_base , numbers , 1 ) def gcd ( * numbers ) : return reduce ( fractions . gcd , numbers ) def gcd_list ( numbers ) : return reduce ( fractions . gcd , numbers ) def divide_two ( arg ) : c = 0 while True : if c >= 2 : break if arg % 2 != 0 : break arg // = 2 c += 1 return c import math import fractions import collections from functools import reduce main ( )
s = [ ] yoko = [ ] ans = " Yes " for i in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) s . append ( [ a , b , c ] ) yoko . append ( [ a - b , b - c , c - a ] ) if yoko [ 0 ] != yoko [ 1 ] or yoko [ 1 ] != yoko [ 2 ] : ans = " No " tate = [ ] for i in range ( 3 ) : tate . append ( [ s [ i ] [ 0 ] - s [ i ] [ 1 ] , s [ i ] [ 1 ] - s [ i ] [ 2 ] , s [ i ] [ 2 ] - s [ i ] [ 0 ] ] ) if tate [ 0 ] != tate [ 1 ] or tate [ 1 ] != tate [ 2 ] : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] xd = [ [ c [ i ] [ 1 ] - c [ i ] [ 0 ] , c [ i ] [ 2 ] - c [ i ] [ 1 ] ] for i in range ( 3 ) ] yd = [ [ c [ 1 ] [ i ] - c [ 0 ] [ i ] , c [ 2 ] [ i ] - c [ 1 ] [ i ] ] for i in range ( 3 ) ] if ( xd [ 0 ] == xd [ 1 ] == xd [ 2 ] and yd [ 0 ] == yd [ 1 ] == yd [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
R = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) R . append ( [ c1 - c2 , c1 - c3 ] ) print ( ' Yes ' if R [ 0 ] == R [ 1 ] == R [ 2 ] else ' No ' )
import numpy as np list_ = [ np . array ( list ( map ( int , input ( ) . rstrip ( " \n " ) . split ( ) ) ) ) for _ in range ( 3 ) ] bool_ = ( len ( set ( list_ [ 1 ] - list_ [ 0 ] ) ) == len ( set ( list_ [ 2 ] - list_ [ 0 ] ) ) == 1 ) print ( " Yes " if bool_ else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] f = c [ 0 ] [ 0 ] s = c [ 0 ] [ 1 ] - f t = c [ 0 ] [ 2 ] - f for i in c : i_f = i [ 0 ] if i [ 1 ] != i_f + s or i [ 2 ] != i_f + t : print ( " No " ) exit ( ) print ( " Yes " )
from sys import exit , stdin C = [ list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 , a2 , a3 , b1 , b2 , b3 = 0 , 0 , 0 , 0 , 0 , 0 for i in range ( 0 , 101 ) : a1 = i b1 , b2 , b3 = C [ 0 ] [ 0 ] - a1 , C [ 0 ] [ 1 ] - a1 , C [ 0 ] [ 2 ] - a1 for j in range ( 0 , 101 ) : a2 = j j_flag = a2 + b1 == C [ 1 ] [ 0 ] and a2 + b2 == C [ 1 ] [ 1 ] and a2 + b3 == C [ 1 ] [ 2 ] for k in range ( 0 , 101 ) : a3 = k k_flag = a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] and a3 + b3 == C [ 2 ] [ 2 ] if j_flag == True and k_flag == True : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if C1 [ 0 ] - C1 [ 1 ] == C2 [ 0 ] - C2 [ 1 ] == C3 [ 0 ] - C3 [ 1 ] and C1 [ 1 ] - C1 [ 2 ] == C2 [ 1 ] - C2 [ 2 ] == C3 [ 1 ] - C3 [ 2 ] and C1 [ 0 ] - C2 [ 0 ] == C1 [ 1 ] - C2 [ 1 ] == C1 [ 2 ] - C2 [ 2 ] and C2 [ 0 ] - C3 [ 0 ] == C2 [ 1 ] - C3 [ 1 ] == C2 [ 2 ] - C3 [ 2 ] : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if not ( c12 - c11 == c22 - c21 == c32 - c31 ) : print ( " No " ) quit ( ) if not ( c13 - c12 == c23 - c22 == c33 - c32 ) : print ( " No " ) quit ( ) if not ( c21 - c11 == c22 - c12 == c23 - c13 ) : print ( " No " ) quit ( ) if not ( c31 - c21 == c32 - c22 == c33 - c23 ) : print ( " No " ) quit ( ) print ( " Yes " )
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False memo = [ ] for i in range ( 3 ) : i , j , k = arr [ 0 ] [ i ] , arr [ 1 ] [ i ] , arr [ 2 ] [ i ] memo += [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] ans = False for i in range ( 101 ) : flag = False a [ 0 ] = i for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for j in range ( 3 ) : a [ j ] = c [ j ] [ 0 ] - b [ 0 ] for j in range ( 3 ) : for k in range ( 3 ) : if a [ j ] + b [ k ] != c [ j ] [ k ] : flag = True break if flag : break else : ans = True break print ( ' Yes ' ) if ans else print ( ' No ' )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if grid [ 0 ] [ 0 ] == ( grid [ 0 ] [ 2 ] + grid [ 2 ] [ 0 ] ) - grid [ 2 ] [ 2 ] and grid [ 1 ] [ 1 ] == ( grid [ 0 ] [ 1 ] + grid [ 1 ] [ 0 ] ) - grid [ 0 ] [ 0 ] and grid [ 2 ] [ 2 ] == ( grid [ 1 ] [ 2 ] + grid [ 2 ] [ 1 ] ) - grid [ 1 ] [ 1 ] : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
mat = [ ] for i in range ( 3 ) : mat . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ 0 ] [ i ] != mat [ j ] [ 0 ] - mat [ j ] [ i ] : ans = ' No ' for i in range ( 3 ) : for j in range ( 3 ) : if mat [ 0 ] [ 0 ] - mat [ i ] [ 0 ] != mat [ 0 ] [ j ] - mat [ i ] [ j ] : ans = ' No ' print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l1 = C [ 0 ] l2 = C [ 1 ] if not ( l2 [ 0 ] - l1 [ 0 ] == l2 [ 1 ] - l1 [ 1 ] == l2 [ 2 ] - l1 [ 2 ] ) : print ( " No " ) exit ( ) l1 = C [ 0 ] l2 = C [ 2 ] if not ( l2 [ 0 ] - l1 [ 0 ] == l2 [ 1 ] - l1 [ 1 ] == l2 [ 2 ] - l1 [ 2 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : r = list ( map ( int , input ( ) . split ( ) ) ) c . append ( r ) d1 = set ( [ ] ) d2 = set ( [ ] ) d3 = set ( [ ] ) d4 = set ( [ ] ) for i in range ( 3 ) : d1 . add ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) d2 . add ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) d3 . add ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d4 . add ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) if len ( d1 ) == 1 and len ( d2 ) == 1 and len ( d3 ) == 1 and len ( d4 ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
b1 , b2 , b3 = 0 , 0 , 0 check = 0 for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if i == 0 : b1 , b2 , b3 = c1 , c2 , c3 if i == 1 : if not ( ( c1 - b1 ) == ( c2 - b2 ) == ( c3 - b3 ) ) : check = 1 if i == 2 : if not ( ( c1 - b1 ) == ( c2 - b2 ) == ( c3 - b3 ) ) : check = 1 print ( " Yes " if check == 0 else " No " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] K = C [ 0 ] [ 0 ] b1 , b2 = C [ 0 ] [ 1 ] - K , C [ 0 ] [ 2 ] - K a1 , a2 = C [ 1 ] [ 0 ] - K , C [ 2 ] [ 0 ] - K if C [ 1 ] [ 1 ] == K + a1 + b1 and C [ 1 ] [ 2 ] == K + a1 + b2 and C [ 2 ] [ 1 ] == K + a2 + b1 and C [ 2 ] [ 2 ] == K + a2 + b2 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ [ int ( i ) for i in input ( ) . split ( ) ] for k in range ( 3 ) ] tC = [ list ( k ) for k in zip ( * C ) ] for i in range ( 2 ) : p = [ C [ i ] [ k ] - C [ i + 1 ] [ k ] for k in range ( 3 ) ] tp = [ tC [ i ] [ k ] - tC [ i + 1 ] [ k ] for k in range ( 3 ) ] if p [ 0 ] == p [ 1 ] == p [ 2 ] and tp [ 0 ] == tp [ 1 ] == tp [ 2 ] : continue else : print ( " No " ) exit ( ) else : print ( " Yes " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) print ( ' Yes ' ) if a - d == b - e == c - f and d - g == e - h == f - i else print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] try : assert ( sum ( c [ 2 ] ) - sum ( c [ 1 ] ) ) % 3 == 0 assert ( sum ( c [ 1 ] ) - sum ( c [ 0 ] ) ) % 3 == 0 assert ( sum ( [ line [ 2 ] for line in c ] ) - sum ( [ line [ 1 ] for line in c ] ) ) % 3 == 0 assert ( sum ( [ line [ 1 ] for line in c ] ) - sum ( [ line [ 0 ] for line in c ] ) ) % 3 == 0 print ( " Yes " ) except AssertionError : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x = min ( c1 ) y = min ( c2 ) z = min ( c3 ) for i in range ( 3 ) : c1 [ i ] -= x c2 [ i ] -= y c3 [ i ] -= z print ( ' NYoe s ' [ c1 == c2 == c3 : : 2 ] )
c1 = [ int ( n ) for n in input ( ) . split ( ) ] c2 = [ int ( n ) for n in input ( ) . split ( ) ] c3 = [ int ( n ) for n in input ( ) . split ( ) ] if ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c2 [ 0 ] - c2 [ 1 ] ) ) and ( ( c1 [ 0 ] - c1 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) and ( ( c2 [ 0 ] - c2 [ 1 ] ) == ( c3 [ 0 ] - c3 [ 1 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c2 [ 1 ] - c2 [ 2 ] ) ) and ( ( c1 [ 1 ] - c1 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) and ( ( c2 [ 1 ] - c2 [ 2 ] ) == ( c3 [ 1 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) if ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c2 [ 0 ] - c2 [ 2 ] ) ) and ( ( c1 [ 0 ] - c1 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) and ( ( c2 [ 0 ] - c2 [ 2 ] ) == ( c3 [ 0 ] - c3 [ 2 ] ) ) : pass else : print ( " No " ) exit ( ) print ( " Yes " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) arr = [ [ c11 , c12 , c13 ] , [ c21 , c22 , c23 ] , [ c31 , c32 , c33 ] ] row_dis = [ ] col_dis = [ ] for i in range ( 3 ) : row_dis . append ( [ arr [ 0 ] [ i ] - arr [ 1 ] [ i ] , arr [ 0 ] [ i ] - arr [ 2 ] [ i ] , arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ] ) col_dis . append ( [ arr [ i ] [ 0 ] - arr [ i ] [ 1 ] , arr [ i ] [ 0 ] - arr [ i ] [ 2 ] , arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ] ) if row_dis [ 0 ] == row_dis [ 1 ] == row_dis [ 2 ] and col_dis [ 0 ] == col_dis [ 1 ] == col_dis [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = c [ 0 ] . copy ( ) b = [ 0 ] * 3 for i in range ( 1 , 3 ) : b [ i ] = c [ i ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : ans = " No " print ( ans )
import sys from statistics import * from collections import * from operator import itemgetter stdin = sys . stdin ni = lambda : int ( ns ( ) ) na = lambda : list ( map ( int , stdin . readline ( ) . split ( ) ) ) ns = lambda : stdin . readline ( ) ct = 0 li = [ ] for i in range ( 3 ) : li . append ( na ( ) ) bbb = li [ 0 ] aaa = [ 0 , li [ 1 ] [ 0 ] - li [ 0 ] [ 0 ] , li [ 2 ] [ 0 ] - li [ 0 ] [ 0 ] ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if li [ i ] [ j ] != aaa [ i ] + bbb [ j ] : ans = ' No ' break print ( ans )
c = [ [ ] , [ ] , [ ] ] c [ 0 ] = [ int ( x ) for x in input ( ) . split ( ) ] c [ 1 ] = [ int ( x ) for x in input ( ) . split ( ) ] c [ 2 ] = [ int ( x ) for x in input ( ) . split ( ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] != c [ ( i + 2 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 1 ) % 3 ] [ ( j + 2 ) % 3 ] : ans = " No " break if ans == " No " : break print ( ans )
c = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) sum_yoko = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : sum_yoko [ i ] = sum ( c [ i ] ) sum_tate = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : sum_tate [ i ] = c [ 0 ] [ i ] + c [ 1 ] [ i ] + c [ 2 ] [ i ] b1mb2 = ( sum_yoko [ 0 ] - sum_yoko [ 1 ] ) / 3 b2mb3 = ( sum_yoko [ 1 ] - sum_yoko [ 2 ] ) / 3 b3mb1 = ( sum_yoko [ 2 ] - sum_yoko [ 0 ] ) / 3 a1ma2 = ( sum_tate [ 0 ] - sum_tate [ 1 ] ) / 3 a2ma3 = ( sum_tate [ 1 ] - sum_tate [ 2 ] ) / 3 a3ma1 = ( sum_tate [ 2 ] - sum_tate [ 0 ] ) / 3 chk = [ b1mb2 , b2mb3 , b3mb1 , a1ma2 , a2ma3 , a3ma1 ] flg = 0 for i in chk : if ( i * 10 ) % 10 != 0 : flg = 1 if flg == 1 : print ( " No " ) else : print ( " Yes " )
c = [ ] for i in range ( 3 ) : C = list ( map ( int , input ( ) . split ( ) ) ) c . append ( C ) for i in range ( 3 ) : Min = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] -= Min for i in range ( 2 ) : if c [ i ] == c [ i + 1 ] : pass else : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] a = [ ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] a = [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys from collections import Counter from collections import deque def input ( ) : return sys . stdin . readline ( ) . strip ( ) def mp ( ) : return map ( int , input ( ) . split ( ) ) def lmp ( ) : return list ( map ( int , input ( ) . split ( ) ) ) l = [ lmp ( ) for i in range ( 3 ) ] n1 = l [ 0 ] [ 0 ] - l [ 0 ] [ 1 ] n2 = l [ 0 ] [ 0 ] - l [ 0 ] [ 2 ] for i in range ( 1 , 3 ) : if n1 != l [ i ] [ 0 ] - l [ i ] [ 1 ] or n2 != l [ i ] [ 0 ] - l [ i ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) if ( sum ( A ) + sum ( B ) + sum ( C ) ) / 3 == A [ 0 ] + B [ 1 ] + C [ 2 ] == A [ 2 ] + B [ 1 ] + C [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
a , b , c = list ( map ( int , input ( ) . split ( ) ) ) d , e , f = list ( map ( int , input ( ) . split ( ) ) ) g , h , i = list ( map ( int , input ( ) . split ( ) ) ) x = [ 0 ] y = [ ] ans = " No " y += [ a - x [ 0 ] , d - x [ 0 ] , g - x [ 0 ] ] x += [ b - y [ 0 ] , c - y [ 0 ] ] if x [ 1 ] + y [ 1 ] == e and x [ 2 ] + y [ 1 ] == f and x [ 1 ] + y [ 2 ] == h and x [ 2 ] + y [ 2 ] == i : ans = " Yes " print ( ans )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] YES = " Yes " NO = " No " def solver ( grid ) : result = NO a0 = 0 b0 = grid [ 0 ] [ 0 ] b1 = grid [ 0 ] [ 1 ] b2 = grid [ 0 ] [ 2 ] a1 = grid [ 1 ] [ 0 ] - b0 a2 = grid [ 2 ] [ 0 ] - b0 if a1 + b1 == grid [ 1 ] [ 1 ] and a1 + b2 == grid [ 1 ] [ 2 ] \ and a2 + b1 == grid [ 2 ] [ 1 ] and a2 + b2 == grid [ 2 ] [ 2 ] : result = YES return result if __name__ == " __main__ " : grid_c = [ [ 0 ] * 3 for j in range ( 0 , 3 ) ] for j in range ( 0 , 3 ) : grid_c [ j ] [ 0 ] , grid_c [ j ] [ 1 ] , grid_c [ j ] [ 2 ] = MI ( ) print ( " {} " . format ( solver ( grid_c ) ) )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] row = [ ] p1 = p2 = p3 = 0 for i in c : row . append ( sum ( i ) ) p1 += i [ 0 ] p2 += i [ 1 ] p3 += i [ 2 ] col = [ p1 , p2 , p3 ] con1 , con2 , con3 = row [ 0 ] - row [ 1 ] , row [ 0 ] - row [ 2 ] , row [ 1 ] - row [ 2 ] con4 , con5 , con6 = col [ 0 ] - col [ 1 ] , col [ 0 ] - col [ 2 ] , col [ 1 ] - col [ 2 ] con = [ con1 , con2 , con3 , con4 , con5 , con6 ] for j in con : if j % 3 != 0 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def solve ( ) : C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] diffr1 = C [ 0 ] [ 1 ] - C [ 0 ] [ 0 ] diffr2 = C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] diffc1 = C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] diffc2 = C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] if C [ 1 ] [ 1 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 0 ] == diffr1 : if C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] == diffr2 : if C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] == diffc1 : if C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] == diffc2 : return " Yes " return " No " if __name__ == " __main__ " : print ( solve ( ) )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] sum1 = li [ 0 ] [ 0 ] + li [ 1 ] [ 1 ] + li [ 2 ] [ 2 ] sum2 = li [ 1 ] [ 0 ] + li [ 2 ] [ 1 ] + li [ 0 ] [ 2 ] sum3 = li [ 2 ] [ 0 ] + li [ 0 ] [ 1 ] + li [ 1 ] [ 2 ] if sum1 == sum2 and sum2 == sum3 : print ( " Yes " ) else : print ( " No " )
def Infomation ( ) : if not ( c11 - c21 == c12 - c22 == c13 - c23 ) : return False if not ( c11 - c31 == c12 - c32 == c13 - c33 ) : return False if not ( c11 - c12 == c21 - c22 == c31 - c32 ) : return False if not ( c11 - c13 == c21 - c23 == c31 - c33 ) : return False return True c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) flag = Infomation ( ) if flag : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) d = [ ] for i in range ( 3 ) : sum = 0 d . append ( [ ] ) for j in range ( 3 ) : sum += c [ i ] [ j ] for j in range ( 3 ) : d [ i ] . append ( 3 * c [ i ] [ j ] - sum ) for i in range ( 3 ) : if d [ 0 ] [ i ] == d [ 1 ] [ i ] and d [ 0 ] [ i ] == d [ 2 ] [ i ] : pass else : print ( ' No ' ) break else : print ( ' Yes ' )
import itertools def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i , j , k in itertools . product ( range ( grid [ 0 ] [ 0 ] + 1 ) , range ( grid [ 1 ] [ 1 ] + 1 ) , range ( grid [ 2 ] [ 2 ] + 1 ) ) : a = [ i , j , k ] b = [ grid [ idx ] [ idx ] - v for idx , v in enumerate ( a ) ] if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D1 = [ [ ] for _ in range ( 3 ) ] D2 = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 2 ) : D1 [ i ] . append ( C [ i ] [ j ] - C [ i ] [ j + 1 ] ) for j in range ( 3 ) : for i in range ( 2 ) : D2 [ j ] . append ( C [ i ] [ j ] - C [ i + 1 ] [ j ] ) print ( ' Yes ' if D1 [ 0 ] == D1 [ 1 ] == D1 [ 2 ] and D2 [ 0 ] == D2 [ 1 ] == D2 [ 2 ] else ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a_1 in range ( min ( c [ 0 ] ) , max ( c [ 0 ] ) + 1 ) : for a_2 in range ( min ( c [ 1 ] ) , max ( c [ 1 ] ) + 1 ) : for a_3 in range ( min ( c [ 2 ] ) , max ( c [ 2 ] ) + 1 ) : b_1 , b_2 , b_3 = map ( lambda x : x - a_1 , c [ 0 ] ) if all ( [ a_2 + b_1 == c [ 1 ] [ 0 ] , a_2 + b_2 == c [ 1 ] [ 1 ] , a_2 + b_3 == c [ 1 ] [ 2 ] , a_3 + b_1 == c [ 2 ] [ 0 ] , a_3 + b_2 == c [ 2 ] [ 1 ] , a_3 + b_3 == c [ 2 ] [ 2 ] ] ) : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
a1 , a2 , a3 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = map ( int , input ( ) . split ( ) ) c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) if not ( a1 - a2 == b1 - b2 == c1 - c2 ) or not ( a2 - a3 == b2 - b3 == c2 - c3 ) : print ( ' No ' ) elif not ( a1 - b1 == a2 - b2 == a3 - b3 ) or not ( b1 - c1 == b2 - c2 == b3 - c3 ) : print ( ' No ' ) else : print ( ' Yes ' )
l = [ 0 ] * 3 for i in range ( 3 ) : l [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : if l [ 0 ] [ i ] - l [ 1 ] [ i ] != l [ 0 ] [ i + 1 ] - l [ 1 ] [ i + 1 ] : print ( ' No ' ) exit ( ) if l [ 1 ] [ i ] - l [ 2 ] [ i ] != l [ 1 ] [ i + 1 ] - l [ 2 ] [ i + 1 ] : print ( ' No ' ) exit ( ) else : print ( ' Yes ' )
c_array = [ ] for i in range ( 3 ) : c_list = [ int ( e ) for e in input ( ) . split ( ) ] c_array . append ( c_list ) c11 = c_array [ 0 ] [ 0 ] c12 = c_array [ 0 ] [ 1 ] c13 = c_array [ 0 ] [ 2 ] c21 = c_array [ 1 ] [ 0 ] c22 = c_array [ 1 ] [ 1 ] c23 = c_array [ 1 ] [ 2 ] c31 = c_array [ 2 ] [ 0 ] c32 = c_array [ 2 ] [ 1 ] c33 = c_array [ 2 ] [ 2 ] if ( c11 - c12 == c21 - c22 and c21 - c22 == c31 - c32 and c11 - c12 == c31 - c32 and c12 - c13 == c22 - c23 and c22 - c23 == c32 - c33 and c12 - c13 == c32 - c33 and c11 - c13 == c21 - c23 and c21 - c23 == c31 - c33 and c11 - c13 == c31 - c33 ) : print ( " Yes " ) else : print ( " No " )
import sys from collections import deque , defaultdict from math import sqrt , factorial def solve ( ) : c = [ ] ok = 1 for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) if i : if c [ i ] != c [ i - 1 ] : d = c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] c [ i ] = [ x - d for x in c [ i ] ] if c [ i ] != c [ i - 1 ] : ok = 0 if ok : print ( " Yes " ) else : print ( " No " ) t = 1 for case in range ( 1 , t + 1 ) : ans = solve ( )
import sys m = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a in range ( - 1000 , 1001 ) : b_1 = m [ 0 ] [ 0 ] - a b_2 = m [ 0 ] [ 1 ] - a b_3 = m [ 0 ] [ 2 ] - a if ( m [ 1 ] [ 0 ] - b_1 == m [ 1 ] [ 1 ] - b_2 == m [ 1 ] [ 2 ] - b_3 ) and \ ( m [ 2 ] [ 0 ] - b_1 == m [ 2 ] [ 1 ] - b_2 == m [ 2 ] [ 2 ] - b_3 ) : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
import sys from io import StringIO import unittest class TestClass ( unittest . TestCase ) : def assertIO ( self , input , output ) : stdout , stdin = sys . stdout , sys . stdin sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) resolve ( ) sys . stdout . seek ( 0 ) out = sys . stdout . read ( ) [ : - 1 ] sys . stdout , sys . stdin = stdout , stdin self . assertEqual ( out , output ) def test_入力例_1(self) : inp u t = out u = sel . sser t IO(input , outp u ) def t st_ 力例_2(self): inpu t = o u t ut = e f.asse t O(in p ut, outp u t) de f test_入 力 _3( elf): input = ou t put = elf.a s rtIO(i p t, o u tput) de f test _ 力例_4(s e f): input = output = self . a sertI ( nput, u put) def reso l ve(): = [] f r _ in rang e ( 3 : c a p end l st map(i n t , n p ut().s p lit( ) ))) a1 = 0 b1 = c [0][0 ] - a b [0 [ ] - a 1 3 = [0 [ ] - a 1 2 = [1 [ ] - b 1 3 = [2 [ ] - b 1 f a2 b2 = c [ 1 ] [ 1 nd a2 b3 == c[ ] [ 2 ] a n a3 b2 == c[ ] [ 1 ] a n a3 b3 == c[ ] [ 2 ] : p int "Y e s" e s e : p r i n ("No" ) if _ _ ame_ _ == "_ _ m ai n _ ": resolve(
c = [ ] for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) c . append ( x ) check = 0 for i in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - i b2 = c [ 0 ] [ 1 ] - i b3 = c [ 0 ] [ 2 ] - i if ( c [ 0 ] [ 0 ] - b1 == c [ 0 ] [ 1 ] - b2 == c [ 0 ] [ 2 ] - b3 and c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 and c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) : check = 1 break if check == 1 : print ( ' Yes ' ) else : print ( ' No ' )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if ( C1 [ 0 ] - C1 [ 1 ] == C2 [ 0 ] - C2 [ 1 ] and C2 [ 0 ] - C2 [ 1 ] == C3 [ 0 ] - C3 [ 1 ] ) and ( C1 [ 0 ] - C1 [ 2 ] == C2 [ 0 ] - C2 [ 2 ] and C2 [ 0 ] - C2 [ 2 ] == C3 [ 0 ] - C3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' if A [ 0 ] + C [ 2 ] != A [ 2 ] + C [ 0 ] : ans = ' No ' elif abs ( A [ 0 ] - A [ 1 ] ) != abs ( B [ 0 ] - B [ 1 ] ) or abs ( B [ 0 ] - B [ 1 ] ) != abs ( C [ 0 ] - C [ 1 ] ) : ans = ' No ' elif abs ( A [ 1 ] - A [ 2 ] ) != abs ( B [ 1 ] - B [ 2 ] ) or abs ( B [ 1 ] - B [ 2 ] ) != abs ( C [ 1 ] - C [ 2 ] ) : ans = ' No ' elif abs ( A [ 0 ] - B [ 0 ] ) != abs ( A [ 1 ] - B [ 1 ] ) or abs ( A [ 1 ] - B [ 1 ] ) != abs ( A [ 2 ] - B [ 2 ] ) : ans = ' No ' elif abs ( B [ 0 ] - C [ 0 ] ) != abs ( B [ 1 ] - C [ 1 ] ) or abs ( B [ 1 ] - C [ 1 ] ) != abs ( B [ 2 ] - C [ 2 ] ) : ans = ' No ' print ( ans )
stand = list ( map ( int , input ( ) . split ( ) ) ) flag = 1 for i in range ( 2 ) : now = list ( map ( int , input ( ) . split ( ) ) ) diff = now [ 0 ] - stand [ 0 ] for j in range ( 1 , 3 ) : if now [ j ] != stand [ j ] + diff : flag = 0 if flag == 1 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != c [ j + 1 ] [ i + 1 ] - c [ j + 1 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = c11 , c12 , c13 a2 = c21 - b1 a3 = c31 - b1 ans = " Yes " if ( a2 + b2 != c22 ) or ( a2 + b3 != c23 ) or ( a3 + b2 != c32 ) or ( a3 + b3 != c33 ) : ans = " No " print ( ans ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ None for _ in range ( 3 ) ] b = [ None for _ in range ( 3 ) ] b [ 0 ] , a [ 0 ] = 0 , c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for j in range ( 1 , 3 ) : b [ j ] = c [ j ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : ans = " No " break print ( ans )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
S1 = list ( map ( int , input ( ) . split ( ) ) ) S2 = list ( map ( int , input ( ) . split ( ) ) ) S3 = list ( map ( int , input ( ) . split ( ) ) ) List = [ ] if S3 [ 2 ] - S3 [ 1 ] == S2 [ 2 ] - S2 [ 1 ] == S1 [ 2 ] - S1 [ 1 ] : List . append ( 1 ) if S3 [ 1 ] - S3 [ 0 ] == S2 [ 1 ] - S2 [ 0 ] == S1 [ 1 ] - S1 [ 0 ] : List . append ( 1 ) if S2 [ 0 ] - S1 [ 0 ] == S2 [ 1 ] - S1 [ 1 ] == S2 [ 2 ] - S1 [ 2 ] : List . append ( 1 ) if S2 [ 0 ] - S3 [ 0 ] == S2 [ 1 ] - S3 [ 1 ] == S2 [ 2 ] - S3 [ 2 ] : List . append ( 1 ) print ( " Yes " if sum ( List ) == 4 else " No " )
import sys input = sys . stdin . readline import numpy as np c = [ ] for _ in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) c = np . array ( c ) c_t = c . T a = c [ 1 ] - c [ 0 ] b = c [ 2 ] - c [ 1 ] d = c [ 2 ] - c [ 0 ] e = c_t [ 1 ] - c_t [ 0 ] f = c_t [ 2 ] - c_t [ 1 ] g = c_t [ 2 ] - c_t [ 0 ] x = [ ] x . append ( a ) x . append ( b ) x . append ( d ) x . append ( e ) x . append ( f ) x . append ( g ) x = np . array ( x ) for i in x : if i [ 0 ] != i [ 1 ] or i [ 1 ] != i [ 2 ] or i [ 2 ] != i [ 0 ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c = [ [ int ( j ) for j in input ( ) . split ( ) ] for i in range ( 3 ) ] flag = True diffb21 = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] diffb32 = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != diffb21 or c [ i ] [ 2 ] - c [ i ] [ 1 ] != diffb32 : flag = False tc = list ( zip ( * c ) ) diffa21 = tc [ 0 ] [ 1 ] - tc [ 0 ] [ 0 ] diffa32 = tc [ 0 ] [ 2 ] - tc [ 0 ] [ 1 ] for i in range ( 1 , 3 ) : if tc [ i ] [ 1 ] - tc [ i ] [ 0 ] != diffa21 or tc [ i ] [ 2 ] - tc [ i ] [ 1 ] != diffa32 : flag = False print ( ' Yes ' if flag else ' No ' )
n = 3 rows = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] nums = rows [ 0 ] + rows [ 1 ] + rows [ 2 ] isTrue = False if nums [ 0 ] - nums [ 1 ] == nums [ 3 ] - nums [ 4 ] == nums [ 6 ] - nums [ 7 ] and nums [ 0 ] - nums [ 3 ] == nums [ 1 ] - nums [ 4 ] == nums [ 2 ] - nums [ 5 ] : isTrue = True else : isTrue = False if nums [ 1 ] - nums [ 2 ] == nums [ 4 ] - nums [ 5 ] == nums [ 7 ] - nums [ 8 ] and nums [ 3 ] - nums [ 6 ] == nums [ 4 ] - nums [ 7 ] == nums [ 5 ] - nums [ 8 ] : isTrue = True else : isTrue = False if isTrue : print ( " Yes " ) else : print ( " No " )
import sys from math import sqrt from collections import Counter input = sys . stdin . readline def I ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LI ( ) : return list ( MI ( ) ) inf = float ( " inf " ) mod = 10 ** 9 + 7 def main ( ) : c1 = LI ( ) c2 = LI ( ) c3 = LI ( ) if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : if c2 [ 1 ] - c2 [ 2 ] == c2 [ 1 ] - c2 [ 2 ] == c3 [ 1 ] - c3 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " ) pass if __name__ == " __main__ " : main ( )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) x = [ 0 ] * 3 y = [ 0 ] * 3 for i in range ( 3 ) : y [ i ] = c [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = c [ i ] [ 0 ] - y [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != c [ i ] [ j ] : flag = False print ( " Yes " if flag else " No " )
import numpy as np lst = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] arr = np . array ( lst ) if len ( set ( arr [ 1 , : ] - arr [ 0 , : ] ) ) == 1 and len ( set ( arr [ 2 , : ] - arr [ 0 , : ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import sys def solve ( ) : input = sys . stdin . readline C = [ [ int ( c ) for c in input ( ) . split ( ) ] for _ in range ( 3 ) ] possible = False for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : a11 = C [ 0 ] [ 0 ] - i a12 = C [ 0 ] [ 1 ] - j a13 = C [ 0 ] [ 2 ] - k a21 = C [ 1 ] [ 0 ] - i a22 = C [ 1 ] [ 1 ] - j a23 = C [ 1 ] [ 2 ] - k a31 = C [ 2 ] [ 0 ] - i a32 = C [ 2 ] [ 1 ] - j a33 = C [ 2 ] [ 2 ] - k if a11 == a12 == a13 and a21 == a22 == a23 and a31 == a32 == a33 : possible = True break if possible : break if possible : break print ( " Yes " if possible else " No " ) return 0 if __name__ == " __main__ " : solve ( )
import sys m = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a in range ( - 1000 , 1001 ) : b_1 = m [ 0 ] [ 0 ] - a b_2 = m [ 0 ] [ 1 ] - a b_3 = m [ 0 ] [ 2 ] - a if ( m [ 1 ] [ 0 ] - b_1 == m [ 1 ] [ 1 ] - b_2 == m [ 1 ] [ 2 ] - b_3 ) and \ ( m [ 2 ] [ 0 ] - b_1 == m [ 2 ] [ 1 ] - b_2 == m [ 2 ] [ 2 ] - b_3 ) : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = ' Yes ' if not sum ( c [ 0 ] ) % 3 == sum ( c [ 1 ] ) % 3 == sum ( c [ 2 ] ) % 3 : ans = ' No ' cc = [ 0 , 0 , 0 ] for ary in c : cc [ 0 ] + = ary [ 0 ] cc [ 1 ] + = ary [ 1 ] cc [ 2 ] + = ary [ 2 ] if not cc [ 0 ] % 3 == cc [ 1 ] % 3 == cc [ 2 ] % 3 : ans = ' No ' print ( ans )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) x = c [ 0 ] [ 0 ] * 2 - c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] y = c [ 0 ] [ 1 ] * 2 - c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] z = c [ 0 ] [ 2 ] * 2 - c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] o = c [ 0 ] [ 2 ] * 2 - c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] p = c [ 1 ] [ 2 ] * 2 - c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] q = c [ 2 ] [ 2 ] * 2 - c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] if x == y == z and o == p == q : print ( " Yes " ) else : print ( " No " )
import sys [ a , b , c ] = list ( map ( int , input ( ) . split ( ) ) ) [ d , e , f ] = list ( map ( int , input ( ) . split ( ) ) ) [ g , h , i ] = list ( map ( int , input ( ) . split ( ) ) ) if d - a == e - b and e - b == f - c and g - d == h - e and h - e == i - f : if b - a == e - d and e - d == h - g and c - b == f - e and f - e == i - h : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
import itertools import math import string import collections from collections import Counter from collections import deque from operator import itemgetter import sys sys . setrecursionlimit ( 2 * 10 ** 5 ) INF = 2 ** 60 def readints ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def nCr ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def has_duplicates2 ( seq ) : seen = [ ] for item in seq : if not ( item in seen ) : seen . append ( item ) return len ( seq ) != len ( seen ) def divisor ( n ) : divisor = [ ] for i in range ( 1 , n + 1 ) : if n % i == 0 : divisor . append ( i ) return divisor dx = [ - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 ] dy = [ - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 ] c = [ None ] * 3 for i in range ( 3 ) : c [ i ] = [ None ] * 3 for i in range ( 3 ) : c [ i ] = readints ( ) def func ( a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : continue return False break return True a = [ None ] * 3 b = [ None ] * 3 for i in range ( 101 ) : for j in range ( 101 ) : for k in range ( 101 ) : for l in range ( 3 ) : a [ 0 ] = i a [ 1 ] = j a [ 2 ] = k b [ 0 ] = c [ l ] [ 0 ] - a [ l ] b [ 1 ] = c [ l ] [ 1 ] - a [ l ] b [ 2 ] = c [ l ] [ 2 ] - a [ l ] if func ( a , b ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) flag = False for a1 in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 , 0 ] - a1 b2 = c [ 0 , 1 ] - a1 b3 = c [ 0 , 2 ] - a1 if c [ 1 , 0 ] - b1 == c [ 1 , 1 ] - b2 == c [ 1 , 2 ] - b3 and c [ 2 , 0 ] - b1 == c [ 2 , 1 ] - b2 == c [ 2 , 2 ] - b3 : print ( ' Yes ' ) flag = True break if not flag : print ( ' No ' )
s = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1_max = max ( s [ 0 ] ) for i in range ( 0 , a1_max + 1 ) : a1 = i b1 = s [ 0 ] [ 0 ] - a1 b2 = s [ 0 ] [ 1 ] - a1 b3 = s [ 0 ] [ 2 ] - a1 a2 = s [ 1 ] [ 0 ] - b1 a3 = s [ 2 ] [ 0 ] - b1 if b1 >= 0 and b2 >= 0 and b3 >= 0 and a2 >= 0 and a3 >= 0 : if s [ 1 ] [ 1 ] == a2 + b2 and s [ 1 ] [ 2 ] == a2 + b3 and s [ 2 ] [ 1 ] == a3 + b2 and s [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
lst = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( lst [ 1 ] [ 0 ] - lst [ 0 ] [ 0 ] == lst [ 1 ] [ 1 ] - lst [ 0 ] [ 1 ] == lst [ 1 ] [ 2 ] - lst [ 0 ] [ 2 ] and \ lst [ 2 ] [ 0 ] - lst [ 0 ] [ 0 ] == lst [ 2 ] [ 1 ] - lst [ 0 ] [ 1 ] == lst [ 2 ] [ 2 ] - lst [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
matrix = [ ] for i in range ( 3 ) : matrix . append ( list ( map ( int , input ( ) . split ( ) ) ) ) mat_dif = [ 0 , 0 , 0 ] for i in range ( 3 ) : mat_dif [ i ] = ( [ matrix [ i ] [ 0 ] - matrix [ i ] [ 1 ] ] , [ matrix [ i ] [ 1 ] - matrix [ i ] [ 2 ] ] ) if mat_dif [ 0 ] == mat_dif [ 1 ] == mat_dif [ 2 ] : print ( " Yes " ) else : print ( " No " )
import numpy as np a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = np . array ( a ) for i in range ( 3 ) : a [ i ] -= min ( a [ i ] ) print ( ' Yes ' if all ( a [ 0 ] == a [ 1 ] ) and all ( a [ 1 ] == a [ 2 ] ) else ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if ( c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] ) and \ ( c2 [ 2 ] - c2 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] ) and \ ( c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] ) and \ ( c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def solve ( ) : for i in range ( max ( grid [ 0 ] ) + 1 ) : b1 = grid [ 0 ] [ 0 ] - i b2 = grid [ 0 ] [ 1 ] - i b3 = grid [ 0 ] [ 2 ] - i if not b1 < 0 and not b2 < 0 and not b3 < 0 : if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 : if grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : print ( " Yes " ) return 0 print ( " No " ) return 0 if __name__ == " __main__ " : solve ( )
import sys input = sys . stdin . readline def main ( ) : C = [ ] for _ in range ( 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) is_yes = True for j in range ( 2 ) : tmp = 0 for i in range ( 3 ) : if i == 0 : tmp = C [ j + 1 ] [ i ] - C [ j ] [ i ] else : if tmp != C [ j + 1 ] [ i ] - C [ j ] [ i ] : is_yes = False break for i in range ( 2 ) : tmp = 0 for j in range ( 3 ) : if j == 0 : tmp = C [ j ] [ i + 1 ] - C [ j ] [ i ] else : if tmp != C [ j ] [ i + 1 ] - C [ j ] [ i ] : is_yes = False break if is_yes : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
lis1 = [ ] lis2 = [ ] lis3 = [ ] count = 0 flag = 0 for num in input ( ) . split ( ) : lis1 . append ( int ( num ) ) for num in input ( ) . split ( ) : lis2 . append ( int ( num ) ) for num in input ( ) . split ( ) : lis3 . append ( int ( num ) ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if lis1 [ 0 ] - a1 == lis2 [ 0 ] - a2 == lis3 [ 0 ] - a3 : if lis1 [ 1 ] - a1 == lis2 [ 1 ] - a2 == lis3 [ 1 ] - a3 : if lis1 [ 2 ] - a1 == lis2 [ 2 ] - a2 == lis3 [ 2 ] - a3 : print ( " Yes " ) flag = 1 break if flag == 1 : break if flag == 1 : break if a1 == 100 and flag == 0 : print ( " No " )
import numpy as np C = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( C ) answer = ' Yes ' S = C . sum ( ) trace = np . diag ( C ) . sum ( ) S_row0 = C [ 0 , : ] . sum ( ) S_row1 = C [ 1 , : ] . sum ( ) S_row2 = C [ 2 , : ] . sum ( ) S_col0 = C [ : , 0 ] . sum ( ) S_col1 = C [ : , 1 ] . sum ( ) S_col2 = C [ : , 2 ] . sum ( ) if S != 3 * trace : answer = ' No ' elif S_row0 - 3 * C [ 0 , 0 ] != trace - S_col0 : answer = ' No ' elif S_row1 - 3 * C [ 1 , 0 ] != trace - S_col0 : answer = ' No ' print ( answer )
mat = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( a ) ans = False if mat [ 1 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 0 ] [ 2 ] : if mat [ 2 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] and mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 2 ] [ 2 ] - mat [ 0 ] [ 2 ] : ans = True if ans : print ( " Yes " ) else : print ( " No " )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] b = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] f = True for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ i ] [ j + 1 ] - c [ i ] [ j ] ) if a != t : f = False for i in range ( 3 ) : t = [ ] for j in range ( 2 ) : t . append ( c [ j + 1 ] [ i ] - c [ j ] [ i ] ) if b != t : f = False if f : print ( " Yes " ) else : print ( " No " )
box = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = 1 for j in range ( 3 ) : checker = [ ] for i in range ( 3 ) : if j == 2 : a11 = box [ j ] [ i ] - box [ 0 ] [ i ] else : a11 = box [ j ] [ i ] - box [ j + 1 ] [ i ] checker . append ( a11 ) if checker . count ( checker [ 0 ] ) == 3 : continue else : flag = 0 break for j in range ( 3 ) : checker = [ ] for i in range ( 3 ) : if j == 2 : a11 = box [ i ] [ j ] - box [ i ] [ 0 ] else : a11 = box [ i ] [ j ] - box [ i ] [ j + 1 ] checker . append ( a11 ) if checker . count ( checker [ 0 ] ) == 3 : continue else : flag = 0 break if flag : print ( " Yes " ) else : print ( " No " )
import sys c = [ input ( ) . split ( ) for i in range ( 3 ) ] num = [ int ( c [ i ] [ j ] ) for i in range ( 3 ) for j in range ( 3 ) ] if num [ 0 ] + num [ 4 ] != num [ 1 ] + num [ 3 ] : print ( ' No ' ) sys . exit ( ) elif num [ 4 ] + num [ 8 ] != num [ 5 ] + num [ 7 ] : print ( ' No ' ) sys . exit ( ) elif num [ 0 ] + num [ 8 ] != num [ 2 ] + num [ 6 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c12 == c21 - c22 == c31 - c32 and c12 - c13 == c22 - c23 == c32 - c33 and c11 - c21 == c12 - c22 == c13 - c23 and c21 - c31 == c22 - c32 == c23 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
import sys def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) c = [ LI ( ) for _ in range ( 3 ) ] x , y , z = c [ 0 ] for x2 , y2 , z2 in c [ 1 : ] : d = x2 - x if not y + d == y2 or not z + d == z2 : print ( ' No ' ) break else : print ( ' Yes ' )
C = [ 0 ] * 3 A = [ 0 ] * 3 B = [ 0 ] * 3 for j in range ( 3 ) : C [ j ] = [ int ( x ) for x in input ( ) . split ( ) ] B [ 0 ] , B [ 1 ] , B [ 2 ] = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] A [ 1 ] , A [ 2 ] = C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] flag = 0 for i in range ( 3 ) : for k in range ( 3 ) : if C [ i ] [ k ] != A [ i ] + B [ k ] : flag = 1 break if flag == 1 : print ( " No " ) else : print ( " Yes " )
C = [ 0 ] * 3 for i in range ( 3 ) : l = input ( ) . split ( ) C [ i ] = [ int ( x ) for x in l ] A = [ 0 * 3 ] * 3 B = [ 0 ] * 3 B [ 0 ] = C [ 0 ] [ 0 ] B [ 1 ] = C [ 0 ] [ 1 ] B [ 2 ] = C [ 0 ] [ 2 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if A [ i ] + B [ j ] != C [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for i in range ( 3 ) ] if a - b == d - e == g - h and b - c == e - f == h - i : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) x = b [ 0 ] - a [ 0 ] y = c [ 0 ] - a [ 0 ] if ( ( b [ 1 ] - a [ 1 ] ) == x ) and ( ( b [ 2 ] - a [ 2 ] ) == x ) and ( ( c [ 1 ] - a [ 1 ] ) == y ) and ( ( c [ 2 ] - a [ 2 ] ) == y ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 1 , 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) A1 = - 1 A2 = - 1 A3 = - 1 B1 = - 1 B2 = - 2 B3 = - 1 flag = 0 for j in range ( a + 1 ) : A1 = j B1 = a - A1 B2 = b - A1 B3 = c - A1 if B1 < 0 or B2 < 0 or B3 < 0 : continue A2 = d - B1 A3 = g - B1 if A2 < 0 or A3 < 0 : continue if d - B1 == e - B2 and e - B2 == f - B3 and g - B1 == h - B2 and h - B2 == i - B3 : flag = 1 break print ( ' Yes ' if flag else ' No ' )
def check ( a , C ) : vertical = False horizonal = False d1 = C [ a [ 0 ] ] [ 0 ] - C [ a [ 1 ] ] [ 0 ] d2 = C [ a [ 0 ] ] [ 1 ] - C [ a [ 1 ] ] [ 1 ] d3 = C [ a [ 0 ] ] [ 2 ] - C [ a [ 1 ] ] [ 2 ] if d1 == d2 == d3 : vertical = True d4 = C [ 0 ] [ a [ 0 ] ] - C [ 0 ] [ a [ 1 ] ] d5 = C [ 1 ] [ a [ 0 ] ] - C [ 1 ] [ a [ 1 ] ] d6 = C [ 2 ] [ a [ 0 ] ] - C [ 2 ] [ a [ 1 ] ] if d4 == d5 == d6 : horizonal = True return vertical and horizonal def main ( ) : ans = True C = [ list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) for _ in range ( 3 ) ] x = ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) for e in x : if check ( e , C ) == False : ans = False break return " Yes " if ans else " No " if __name__ == " __main__ " : print ( main ( ) )
import sys input = sys . stdin . readline class AtCoder : def main ( self ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for b1 in range ( 101 - a1 ) : a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if c [ 0 ] [ 0 ] == a1 + b1 and c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : AtCoder ( ) . main ( )
from collections import deque C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 1 ) : q = deque ( [ C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i , C [ 0 ] [ 0 ] - i , C [ 0 ] [ 1 ] - i , C [ 0 ] [ 2 ] - i ] ) flag = 0 for j in range ( 1 , 3 ) : d = set ( ) for k in range ( 3 ) : d . add ( C [ j ] [ k ] - q . popleft ( ) ) if len ( d ) == 1 : flag += 1 if flag == 2 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def main ( ) : G = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] def is_ok ( rs , cs ) : for r , ri in enumerate ( rs , start = 1 ) : for c , ci in enumerate ( cs ) : if G [ r ] [ c ] != ri + ci : return False return True for r0 in range ( G [ 0 ] [ 0 ] + 1 ) : c0 = G [ 0 ] [ 0 ] - r0 c1 = G [ 0 ] [ 1 ] - r0 c2 = G [ 0 ] [ 2 ] - r0 r1 = G [ 1 ] [ 0 ] - c0 r2 = G [ 2 ] [ 0 ] - c0 rs = ( r1 , r2 ) cs = ( c0 , c1 , c2 ) if is_ok ( rs , cs ) : print ( ' Yes ' ) return print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c4 - c1 == c5 - c2 == c6 - c3 and \ c7 - c1 == c8 - c2 == c9 - c3 and \ c7 - c4 == c8 - c5 == c9 - c6 : print ( ' Yes ' ) else : print ( ' No ' )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) d , e , f = m ( ) g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
c = [ [ ] ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ans = 0 for i in range ( 3 ) : ans += sum ( c [ i ] ) if ans % 3 == 0 : arr = [ 0 ] * 3 sum = 0 for i in range ( 3 ) : arr [ 0 ] + = c [ i ] [ i ] for i in range ( 3 ) : if i + 1 < 3 : arr [ 1 ] + = c [ i ] [ i + 1 ] else : arr [ 1 ] + = c [ i ] [ 0 ] for i in range ( 3 ) : if i + 2 < 3 : arr [ 2 ] + = c [ i ] [ i + 2 ] else : arr [ 2 ] + = c [ i ] [ i - 1 ] if arr [ 0 ] != arr [ 1 ] or arr [ 0 ] != arr [ 2 ] : print ( " No " ) exit ( 0 ) print ( " Yes " ) exit ( 0 ) print ( " No " )
import sys input = sys . stdin . readline def main ( ) : mC = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] mD = [ [ mC [ i ] [ j ] - mC [ i ] [ j + 1 ] for j in range ( 2 ) ] for i in range ( 3 ) ] mE = [ [ mC [ i ] [ j ] - mC [ i + 1 ] [ j ] for i in range ( 2 ) ] for j in range ( 3 ) ] res = " Yes " if any ( vd != mD [ 0 ] for vd in mD [ 1 : ] ) \ or any ( ve != mE [ 0 ] for ve in mE [ 1 : ] ) : res = " No " print ( res ) main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ C [ 0 ] [ 0 ] - C [ 0 ] [ 0 ] ] b = [ C [ 0 ] [ 0 ] - a [ 0 ] ] for i in range ( 1 , 3 ) : a . append ( C [ i ] [ 0 ] - b [ 0 ] ) b . append ( C [ 0 ] [ i ] - a [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : num = a [ i ] + b [ j ] if num != C [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
def main ( ) : mat = [ ] for _ in range ( 3 ) : mat . append ( [ int ( c ) for c in input ( ) . split ( ) ] ) for j in range ( 2 ) : ref = mat [ 0 ] [ j + 1 ] - mat [ 0 ] [ j ] if ref != mat [ 1 ] [ j + 1 ] - mat [ 1 ] [ j ] or ref != mat [ 2 ] [ j + 1 ] - mat [ 2 ] [ j ] : return " No " for i in range ( 2 ) : ref = mat [ i + 1 ] [ 0 ] - mat [ i ] [ 0 ] if ref != mat [ i + 1 ] [ 1 ] - mat [ i ] [ 1 ] or ref != mat [ i + 1 ] [ 2 ] - mat [ i ] [ 2 ] : return " No " return " Yes " if __name__ == ' __main__ ' : print ( main ( ) )
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg = True if memo [ 0 ] == memo [ 1 ] and memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
def main ( ) : C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] res = ' No ' for i in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - i b2 = C [ 0 ] [ 1 ] - i b3 = C [ 0 ] [ 2 ] - i a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : res = ' Yes ' break print ( res ) if __name__ == ' __main__ ' : main ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 flg = True for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - a [ 0 ] for j in range ( 1 , 3 ) : a [ j ] = C [ j ] [ 0 ] - b [ 0 ] for j in range ( 3 ) : for k in range ( 3 ) : if C [ j ] [ k ] != a [ j ] + b [ k ] : flg = False break if flg : print ( ' Yes ' ) quit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] + c [ j ] [ i ] == c [ i ] [ i ] + c [ j ] [ j ] : count += 1 if count == 9 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = " No " for a1 in c [ 0 ] : for a2 in c [ 1 ] : for a3 in c [ 2 ] : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 if a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] : ans = " Yes " break print ( ans )
import sys grid = [ ] for i in range ( 3 ) : array = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) grid . append ( array ) point = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 1 ] ] for i , j in point : if grid [ i ] [ j ] != grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j ] - grid [ i + 1 ] [ j + 1 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
s = [ [ int ( i ) for i in input ( ) . split ( " " ) ] for _ in range ( 3 ) ] sum = s [ 0 ] [ 0 ] + s [ 1 ] [ 1 ] + s [ 2 ] [ 2 ] fail = 0 if s [ 0 ] [ 0 ] + s [ 1 ] [ 2 ] + s [ 2 ] [ 1 ] != sum : fail = 1 if s [ 1 ] [ 1 ] + s [ 0 ] [ 2 ] + s [ 2 ] [ 0 ] != sum : fail = 1 if s [ 2 ] [ 2 ] + s [ 0 ] [ 1 ] + s [ 1 ] [ 0 ] != sum : fail = 1 if fail == 0 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : good = False break else : continue break print ( ' Yes ' if good else ' No ' )
import numpy as np import sys sys . setrecursionlimit ( 10 ** 5 + 10 ) def resolve ( ) : G = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ) G [ 1 ] -= G [ 0 ] G [ 2 ] -= G [ 0 ] if len ( set ( G [ 1 ] ) ) == 1 and len ( set ( G [ 2 ] ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' ) resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s = 0 for i in range ( 3 ) : for j in range ( 3 ) : s += c [ i ] [ j ] if 3 * ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) == s : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) print ( ' Yes ' if c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] and c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] and c2 [ 0 ] - c3 [ 0 ] == c2 [ 1 ] - c3 [ 1 ] == c2 [ 2 ] - c3 [ 2 ] and c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] else ' No ' )
import sys import itertools sys . setrecursionlimit ( 10000 ) def resolve ( ) : C = [ list ( map ( int , input ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 for a2 in range ( 101 ) : b2 = C [ 1 ] [ 1 ] - a2 for a3 in range ( 101 ) : b3 = C [ 2 ] [ 2 ] - a3 if check ( C , [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ) : print ( " Yes " ) return print ( " No " ) def check ( C , A , B ) : for i in range ( len ( C ) ) : for j in range ( len ( C [ i ] ) ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : return False return True if ' __main__ ' == __name__ : resolve ( )
from sys import stdin data = [ ] for _ in range ( 3 ) : data . append ( [ int ( x ) for x in stdin . readline ( ) . rstrip ( ) . split ( ) ] ) flag = False for j in range ( 0 , 101 ) : b1 = data [ 0 ] [ 0 ] - j b2 = data [ 0 ] [ 1 ] - j b3 = data [ 0 ] [ 2 ] - j cnt = 0 for k in data [ 1 : ] : if ( k [ 0 ] - b1 ) == ( k [ 1 ] - b2 ) == ( k [ 2 ] - b3 ) : cnt += 1 if cnt == 2 : flag = True if flag : print ( " Yes " ) else : print ( " No " )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) x = a + e == b + d and b + f == c + e and d + h == e + g and e + i == f + h print ( ' YNeos ' [ 0 if x else 1 : : 2 ] )
import numpy as np grid = [ ] for i in range ( 3 ) : temp = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( temp ) db1 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 0 ] db2 = grid [ 0 ] [ 2 ] - grid [ 0 ] [ 1 ] flag = True for i in range ( 1 , 3 ) : d1 = grid [ i ] [ 1 ] - grid [ i ] [ 0 ] d2 = grid [ i ] [ 2 ] - grid [ i ] [ 1 ] if d1 == db1 and d2 == db2 : continue else : flag = False db1 = grid [ 1 ] [ 0 ] - grid [ 0 ] [ 0 ] db2 = grid [ 2 ] [ 0 ] - grid [ 1 ] [ 0 ] for i in range ( 1 , 3 ) : d1 = grid [ 1 ] [ i ] - grid [ 0 ] [ i ] d2 = grid [ 2 ] [ i ] - grid [ 1 ] [ i ] if d1 == db1 and d2 == db2 : continue else : flag = False if flag : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = [ ] for i in range ( 3 ) : d . append ( [ ] ) for j , k in zip ( [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] ) : d [ i ] . append ( c [ i ] [ j ] - c [ i ] [ k ] ) if d [ 0 ] == d [ 1 ] == d [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
lst = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) lst . append ( a ) F = False for i in range ( 100 ) : b1 = lst [ 0 ] [ 0 ] - i b2 = lst [ 0 ] [ 1 ] - i b3 = lst [ 0 ] [ 2 ] - i if lst [ 1 ] [ 0 ] - b1 == lst [ 1 ] [ 1 ] - b2 and + \ lst [ 1 ] [ 1 ] - b2 == lst [ 1 ] [ 2 ] - b3 and + \ lst [ 2 ] [ 0 ] - b1 == lst [ 2 ] [ 1 ] - b2 and + \ lst [ 2 ] [ 1 ] - b2 == lst [ 2 ] [ 2 ] - b3 : F = True if F == False : print ( " No " ) else : print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] : flag = False if C [ i ] [ j ] - C [ i ] [ j - 1 ] != C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] : flag = False print ( ' Yes ' if flag else ' No ' )
c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) diff = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] if c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == diff and c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == diff : diff = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] if c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == diff and c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == diff : diff = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] if c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == diff and c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] == diff : print ( " Yes " ) else : print ( " No " ) else : print ( " No " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cnd = True cnd &= C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] cnd &= C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] cnd &= C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] cnd &= C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] cnd &= C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] cnd &= C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] print ( ' Yes ' if cnd else ' No ' )
mtx = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff1 = mtx [ 0 ] [ 0 ] - mtx [ 1 ] [ 0 ] diff2 = mtx [ 0 ] [ 0 ] - mtx [ 2 ] [ 0 ] diff3 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 1 ] diff4 = mtx [ 0 ] [ 0 ] - mtx [ 0 ] [ 2 ] if mtx [ 0 ] [ 1 ] - mtx [ 1 ] [ 1 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 1 ] [ 2 ] != diff1 : print ( ' No ' ) elif mtx [ 0 ] [ 1 ] - mtx [ 2 ] [ 1 ] != diff2 : print ( ' No ' ) elif mtx [ 0 ] [ 2 ] - mtx [ 2 ] [ 2 ] != diff2 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 1 ] != diff3 : print ( ' No ' ) elif mtx [ 1 ] [ 0 ] - mtx [ 1 ] [ 2 ] != diff4 : print ( ' No ' ) elif mtx [ 2 ] [ 0 ] - mtx [ 2 ] [ 2 ] != diff4 : print ( ' No ' ) else : print ( ' Yes ' )
import sys read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines c = [ list ( map ( int , readline ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if not c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : ans = ' No ' if not c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : ans = ' No ' if not c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : ans = ' No ' if not c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = ' No ' print ( ans )
if __name__ == ' __main__ ' : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] answer = ' No ' for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] ) - ( a1 + a2 + a3 ) b2 = ( c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] ) - ( a1 + a2 + a3 ) b3 = ( c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] ) - ( a1 + a2 + a3 ) if b1 % 3 == 0 and b2 % 3 == 0 and b3 % 3 == 0 : answer = ' Yes ' break print ( answer )
def m ( a , b ) : n = 3 L = [ 0 ] * 3 for i in range ( n ) : L [ i ] = a [ i ] - b [ i ] return L def f ( L ) : return len ( set ( L ) ) == 1 C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) F = True for i , j in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : F &= f ( m ( C [ i ] , C [ j ] ) ) if F : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c1 ) a = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] b = [ 0 , c [ 1 ] [ 1 ] - a [ 1 ] , c [ 2 ] [ 2 ] - a [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] and c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : flg = 0 else : flg = 1 if flg == 0 : print ( " Yes " ) else : print ( " No " )
C = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] for i in range ( 3 ) : p = min ( C [ i ] ) for j in range ( 3 ) : C [ i ] [ j ] -= p ans = True for i in range ( 3 ) : if ( C [ i ] [ 0 ] == C [ i ] [ 1 ] == C [ i ] [ 2 ] ) : continue else : ans = False if ( not ans ) : ans = True for i in range ( 3 ) : if ( C [ 0 ] [ i ] == C [ 1 ] [ i ] == C [ 2 ] [ i ] ) : continue else : ans = False print ( " Yes " ) if ans else print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def f ( ) : for i in range ( 2 ) : for j in range ( 2 ) : if C [ i ] [ j ] - C [ i ] [ j + 1 ] != C [ i + 1 ] [ j ] - C [ i + 1 ] [ j + 1 ] : return False if C [ j ] [ i ] - C [ j + 1 ] [ i ] != C [ j ] [ i + 1 ] - C [ j + 1 ] [ i + 1 ] : return False return True if f ( ) : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] != c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = c [ 0 ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False print ( " Yes " if flag else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' No ' if C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] : if C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : ans = ' Yes ' print ( ans )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a + e == b + d : if b + f == c + e : if d + h == e + g : if e + i == f + h : print ( ' Yes ' ) exit ( ) print ( ' No ' )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) if a - b == d - e == g - h and b - c == e - f == h - i and a - c == d - f == g - i and a - d == b - e == c - f and d - g == e - h == f - i and a - g == b - h == c - i : print ( " Yes " ) else : print ( " No " )
P = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c_11 = P [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : P [ i ] [ j ] -= c_11 A_1 = 0 A_2 = P [ 1 ] [ 0 ] A_3 = P [ 2 ] [ 0 ] B_1 = 0 B_2 = P [ 0 ] [ 1 ] B_3 = P [ 0 ] [ 2 ] Flag = " Yes " if not A_2 + B_2 == P [ 1 ] [ 1 ] : Flag = " No " if not A_2 + B_3 == P [ 1 ] [ 2 ] : Flag = " No " if not A_3 + B_2 == P [ 2 ] [ 1 ] : Flag = " No " if not A_3 + B_3 == P [ 2 ] [ 2 ] : Flag = " No " print ( Flag )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] B = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] A = [ 0 , C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) quit ( ) print ( " Yes " )
def main ( * args , ** kwargs ) : grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 101 ) : b1_1 = grid [ 0 ] [ 0 ] - a1 b2_1 = grid [ 0 ] [ 1 ] - a1 b3_1 = grid [ 0 ] [ 2 ] - a1 for a2 in range ( 0 , 101 ) : b1_2 = grid [ 1 ] [ 0 ] - a2 b2_2 = grid [ 1 ] [ 1 ] - a2 b3_2 = grid [ 1 ] [ 2 ] - a2 for a3 in range ( 0 , 101 ) : b1_3 = grid [ 2 ] [ 0 ] - a3 b2_3 = grid [ 2 ] [ 1 ] - a3 b3_3 = grid [ 2 ] [ 2 ] - a3 if b1_1 == b1_2 == b1_3 and b2_1 == b2_2 == b2_3 and b3_1 == b3_2 == b3_3 : print ( ' Yes ' ) return print ( ' No ' ) return main ( )
def main ( ) : arr = [ list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] memo = [ ] for i , j , k in arr : memo + = [ ( i - j , j - k ) ] flg_1 = True if memo [ 0 ] == memo [ 1 ] == memo [ 2 ] else False memo = [ ] for i in range ( 3 ) : i , j , k = arr [ 0 ] [ i ] , arr [ 1 ] [ i ] , arr [ 2 ] [ i ] memo += [ ( i - j , j - k ) ] flg_2 = True if memo [ 0 ] == memo [ 1 ] == memo [ 2 ] else False print ( " Yes " if flg_1 and flg_2 else " No " ) if __name__ == " __main__ " : main ( )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A , B , C , D , E , F , G , H , I = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] , c [ 1 ] [ 0 ] , c [ 1 ] [ 1 ] , c [ 1 ] [ 2 ] , c [ 2 ] [ 0 ] , c [ 2 ] [ 1 ] , c [ 2 ] [ 2 ] if max ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) == min ( A + E + I , A + F + H , B + D + I , B + F + G , C + D + H , C + E + G ) : print ( " Yes " ) else : print ( " No " )
c = [ 0 for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( min ( c [ 0 ] ) + 1 ) : b = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] if c [ 1 ] [ 0 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] == c [ 1 ] [ 2 ] - b [ 2 ] : if c [ 2 ] [ 0 ] - b [ 0 ] == c [ 2 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] f = [ [ x [ 0 ] - x [ 1 ] , x [ 1 ] - x [ 2 ] , x [ 2 ] - x [ 0 ] ] for x in c ] g = f [ 0 ] == f [ 1 ] == f [ 2 ] print ( ' Yes ' if g else ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != ( a [ i ] + b [ j ] ) : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] flag = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a_1 = i b_1 = C [ 0 ] [ 0 ] - i b_2 = C [ 0 ] [ 1 ] - i b_3 = C [ 0 ] [ 2 ] - i a_2 = C [ 1 ] [ 0 ] - b_1 a_3 = C [ 2 ] [ 0 ] - b_1 if ( a_2 + b_2 ) == C [ 1 ] [ 1 ] and ( a_2 + b_3 ) == C [ 1 ] [ 2 ] and ( a_3 + b_2 ) == C [ 2 ] [ 1 ] and ( a_3 + b_3 ) == C [ 2 ] [ 2 ] : flag = True break if flag : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] if ( C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 ) and ( C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] f = True if not c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : f = False if not c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : f = False if not c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : f = False if not c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : f = False print ( ' Yes ' if f else ' No ' )
import sys if sys . platform == ' ios ' : sys . stdin = open ( ' input_file.txt ' ) c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = 0 for i in range ( max ( max ( c ) ) + 1 ) : a0 = i b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 a1 = c [ 1 ] [ 0 ] - b0 a2 = c [ 2 ] [ 0 ] - b0 if c [ 1 ] [ 1 ] == a1 + b1 and c [ 1 ] [ 2 ] == a1 + b2 and c [ 2 ] [ 1 ] == a2 + b1 and c [ 2 ] [ 2 ] == a2 + b2 : ans = ans + 1 break print ( ' Yes ' if ans != 0 else ' No ' )
g = [ [ * map ( int , input ( ) . split ( ) ) ] for _ in range ( 3 ) ] for h in [ 0 , 1 ] : for w in [ 0 , 1 ] : if g [ h ] [ w ] + g [ h + 1 ] [ w + 1 ] != g [ h + 1 ] [ w ] + g [ h ] [ w + 1 ] : exit ( print ( ' No ' ) ) print ( ' Yes ' )
c1 = [ int ( i ) for i in input ( ) . split ( ) ] c2 = [ int ( i ) for i in input ( ) . split ( ) ] c3 = [ int ( i ) for i in input ( ) . split ( ) ] flag = 0 for i in range ( 2 ) : if not ( c1 [ i + 1 ] - c1 [ i ] == c2 [ i + 1 ] - c2 [ i ] == c3 [ i + 1 ] - c3 [ i ] ) : flag = 1 print ( ' Yes ' if flag == 0 else ' No ' )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians from itertools import permutations , combinations , product , accumulate from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from fractions import gcd from bisect import bisect def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] a = [ - 1 , - 1 , - 1 ] b = [ - 1 , - 1 , - 1 ] a [ 0 ] = 0 for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] != - 1 : b [ i ] = c [ i ] [ j ] - a [ j ] else : a [ j ] = c [ i ] [ j ] - b [ i ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) sys . exit ( ) else : print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = " Yes " if not ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) : ans = " No " elif not ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) : ans = " No " elif not ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) : ans = " No " elif not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) : ans = " No " print ( ans )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) l = [ l1 , l2 , l3 ] c = l [ 0 ] [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : l [ i ] [ j ] -= c if ( l [ 1 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 1 ] == l [ 0 ] [ 1 ] + l [ 2 ] [ 0 ] ) and ( l [ 1 ] [ 2 ] == l [ 0 ] [ 2 ] + l [ 1 ] [ 0 ] ) and ( l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c . append ( [ c1 , c2 , c3 ] ) a1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] a2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] b1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] b2 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] ans = " No " if c [ 1 ] [ 1 ] + a1 == c [ 1 ] [ 0 ] and c [ 1 ] [ 1 ] + b1 == c [ 0 ] [ 1 ] : if c [ 1 ] [ 2 ] + a2 == c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] + b1 == c [ 0 ] [ 2 ] : if c [ 2 ] [ 1 ] + a1 == c [ 2 ] [ 0 ] and c [ 2 ] [ 1 ] + b2 == c [ 0 ] [ 1 ] : if c [ 2 ] [ 2 ] + a2 == c [ 2 ] [ 0 ] and c [ 2 ] [ 2 ] + b2 == c [ 0 ] [ 2 ] : ans = " Yes " print ( ans )
import math from math import gcd , pi , sqrt INF = float ( " inf " ) MOD = 10 ** 9 + 7 import sys sys . setrecursionlimit ( 10 ** 6 ) import itertools import bisect from collections import Counter , deque def i_input ( ) : return int ( input ( ) ) def i_map ( ) : return map ( int , input ( ) . split ( ) ) def i_list ( ) : return list ( i_map ( ) ) def i_row ( N ) : return [ i_input ( ) for _ in range ( N ) ] def i_row_list ( N ) : return [ i_list ( ) for _ in range ( N ) ] def s_input ( ) : return input ( ) def s_map ( ) : return input ( ) . split ( ) def s_list ( ) : return list ( s_map ( ) ) def s_row ( N ) : return [ s_input for _ in range ( N ) ] def s_row_str ( N ) : return [ s_list ( ) for _ in range ( N ) ] def s_row_list ( N ) : return [ list ( s_input ( ) ) for _ in range ( N ) ] def main ( ) : c = [ i_list ( ) for i in range ( 3 ) ] for i in range ( 1 , 3 ) : t = c [ i ] [ 0 ] - c [ 0 ] [ 0 ] if c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == t and c [ i ] [ 2 ] - c [ 0 ] [ 2 ] == t : pass else : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : t = c [ 0 ] [ i ] - c [ 0 ] [ 0 ] if c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == t and c [ 2 ] [ i ] - c [ 2 ] [ 0 ] == t : pass else : print ( " No " ) exit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( 0 ) print ( " Yes " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] \ and C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) d = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : d [ i ] [ j ] = C [ i + 1 ] [ j ] - C [ i ] [ j ] for i in range ( 2 ) : for j in range ( 2 ) : if d [ i ] [ j ] != d [ i ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
A = [ 0 , None , None ] B = [ None , None , None ] bl = True for i in range ( 3 ) : C = [ int ( x ) for x in input ( ) . split ( ) ] for j , c in enumerate ( C ) : if A [ i ] is None : A [ i ] = c - B [ j ] if B [ j ] is None : B [ j ] = c - A [ i ] if A [ i ] + B [ j ] != c : bl = False answer = ' Yes ' if bl else ' No ' print ( answer )
n = 3 e = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( n ) ] a = [ ] b = [ ] a . append ( 0 ) b . append ( e [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( e [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( e [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != e [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import copy def check ( l ) : return l [ 0 ] == l [ 1 ] == l [ 2 ] lst = [ ] for _ in range ( 3 ) : lst . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) for i in range ( 3 ) : l = copy . deepcopy ( lst ) l [ 0 ] [ 0 ] -= i l [ 0 ] [ 1 ] -= i l [ 0 ] [ 2 ] -= i if l [ 0 ] [ 0 ] < 0 or l [ 0 ] [ 1 ] < 0 or l [ 0 ] [ 2 ] < 0 : continue b1 = l [ 0 ] [ 0 ] b2 = l [ 0 ] [ 1 ] b3 = l [ 0 ] [ 2 ] l [ 1 ] [ 0 ] - = b1 l [ 1 ] [ 1 ] - = b2 l [ 1 ] [ 2 ] - = b3 l [ 2 ] [ 0 ] - = b1 l [ 2 ] [ 1 ] - = b2 l [ 2 ] [ 2 ] - = b3 if check ( l [ 1 ] ) and check ( l [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) diff1 = c21 - c11 diff2 = c31 - c21 if diff1 == ( c22 - c12 ) and diff2 == ( c32 - c22 ) and diff1 == ( c23 - c13 ) and diff2 == ( c33 - c23 ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ok = 0 for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ok = 1 break print ( " Yes " if ok == 0 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = True break if flag : print ( ' No ' ) else : print ( ' Yes ' )
def solve ( ) : import sys s = list ( map ( int , sys . stdin . read ( ) . split ( ) ) ) x , y , z = s [ 0 ] + s [ 4 ] + s [ 8 ] , s [ 1 ] + s [ 5 ] + s [ 6 ] , s [ 2 ] + s [ 3 ] + s [ 7 ] if x == y == z : print ( " Yes " ) else : print ( " No " ) solve ( )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' b1 = 0 a1 = grid [ 0 ] [ 0 ] a2 = grid [ 1 ] [ 0 ] a3 = grid [ 2 ] [ 0 ] b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 if b2 + a2 != grid [ 1 ] [ 1 ] : ans = ' No ' if b2 + a3 != grid [ 2 ] [ 1 ] : ans = ' No ' if b3 + a2 != grid [ 1 ] [ 2 ] : ans = ' No ' if b3 + a3 != grid [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
def main ( ) : num_list = [ ] for _ in range ( 3 ) : num_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a1 = 0 b1 = num_list [ 0 ] [ 0 ] - a1 b2 = num_list [ 0 ] [ 1 ] - a1 b3 = num_list [ 0 ] [ 2 ] - a1 a2 = num_list [ 1 ] [ 0 ] - b1 a3 = num_list [ 2 ] [ 0 ] - b1 isGood = True if a1 + b1 != num_list [ 0 ] [ 0 ] : isGood = False if a1 + b2 != num_list [ 0 ] [ 1 ] : isGood = False if a1 + b3 != num_list [ 0 ] [ 2 ] : isGood = False if a2 + b1 != num_list [ 1 ] [ 0 ] : isGood = False if a2 + b2 != num_list [ 1 ] [ 1 ] : isGood = False if a2 + b3 != num_list [ 1 ] [ 2 ] : isGood = False if a3 + b1 != num_list [ 2 ] [ 0 ] : isGood = False if a3 + b2 != num_list [ 2 ] [ 1 ] : isGood = False if a3 + b3 != num_list [ 2 ] [ 2 ] : isGood = False print ( ' Yes ' if isGood else ' No ' ) if __name__ == ' __main__ ' : main ( )
s = list ( map ( int , input ( ) . split ( ) ) ) t = list ( map ( int , input ( ) . split ( ) ) ) u = list ( map ( int , input ( ) . split ( ) ) ) a = s [ 0 ] + s [ 1 ] + s [ 2 ] + t [ 0 ] + t [ 1 ] + t [ 2 ] + u [ 0 ] + u [ 1 ] + u [ 2 ] b = s [ 1 ] + s [ 2 ] + t [ 0 ] + t [ 2 ] + u [ 0 ] + u [ 1 ] - 2 * s [ 0 ] - 2 * t [ 1 ] - 2 * u [ 2 ] if a % 3 == 0 and b == 0 : print ( ' Yes ' ) else : print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c3 - c2 == c6 - c5 and c6 - c5 == c9 - c8 and c2 - c1 == c5 - c4 and c5 - c4 == c8 - c7 and c4 - c1 == c5 - c2 and c5 - c2 == c6 - c3 and c7 - c4 == c8 - c5 and c8 - c5 == c9 - c6 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) def is_check ( a , b , c ) : for j in range ( 3 ) : for k in range ( 3 ) : if c [ j ] [ k ] != ( a [ j ] + b [ k ] ) : return False return True for i in range ( c [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if not ( b1 >= 0 and b1 <= 100 and b2 >= 0 and b2 <= 100 and b3 >= 0 and b3 <= 100 and a2 >= 0 and a2 <= 100 and a3 >= 0 and a3 <= 100 ) : continue a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] is_ok = is_check ( a , b , c ) if is_ok : print ( ' Yes ' ) break else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if 2 * c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] == 2 * c [ 0 ] [ 0 ] : if 2 * c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 1 ] == 2 * c [ 1 ] [ 1 ] : if 2 * c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] == 2 * c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if not ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) : print ( " No " ) exit ( ) if not ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) : print ( " No " ) exit ( ) print ( " Yes " )
def read_input ( ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) return [ c1 , c2 , c3 ] def get_v ( c , i ) : result = [ c [ j ] [ i ] for j in range ( 3 ) ] return result def get_h ( c , i ) : result = [ c [ i ] [ j ] for j in range ( 3 ) ] return result def check_diff ( a , b ) : diff = [ i - j for i , j in zip ( a , b ) ] d = diff [ 0 ] for e in diff [ 1 : ] : if d != e : return False return True def submit ( ) : c = read_input ( ) checkee = [ ( 0 , 1 ) , ( 1 , 2 ) , ( 0 , 2 ) ] result = [ ] for check in checkee : result . append ( check_diff ( get_v ( c , check [ 0 ] ) , get_v ( c , check [ 1 ] ) ) ) result . append ( check_diff ( get_h ( c , check [ 0 ] ) , get_h ( c , check [ 1 ] ) ) ) if all ( result ) : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : submit ( )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if C [ 1 ] [ 0 ] - C [ 0 ] [ 0 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 1 ] [ 2 ] - C [ 0 ] [ 2 ] != C [ 1 ] [ 1 ] - C [ 0 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' elif C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] != C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] : ans = ' No ' print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all_sum = 0 right_up = 0 right_down = 0 for c in C : all_sum += sum ( c ) right_up += ( C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] ) right_down += ( C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] ) if all_sum % 3 == 0 and right_up == all_sum // 3 and right_down == all_sum // 3 : print ( " Yes " ) else : print ( " No " )
from sys import exit c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ None ] * 3 b = [ None ] * 3 a [ 0 ] = 0 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if len ( set ( [ l [ i + 1 ] [ j ] - l [ i ] [ j ] for j in range ( 3 ) ] ) ) != 1 or len ( set ( [ l [ j ] [ i + 1 ] - l [ j ] [ i ] for j in range ( 3 ) ] ) ) != 1 : print ( ' No ' ) break else : print ( ' Yes ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] + c2 [ 1 ] + c3 [ 2 ] == c1 [ 1 ] + c2 [ 2 ] + c3 [ 0 ] == c1 [ 2 ] + c2 [ 0 ] + c3 [ 1 ] : print ( ' Yes ' ) else : print ( ' No ' )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_ans = [ 0 for i in range ( 3 ) ] b_ans = [ 0 for i in range ( 3 ) ] a_ans [ 0 ] = ( ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) + ( c_list [ 0 ] [ 1 ] - c_list [ 1 ] [ 1 ] ) ) // 2 a_ans [ 1 ] = a_ans [ 0 ] - ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) a_ans [ 2 ] = c_list [ 2 ] [ 0 ] - c_list [ 0 ] [ 0 ] + a_ans [ 0 ] b_ans [ 0 ] = c_list [ 0 ] [ 0 ] - a_ans [ 0 ] b_ans [ 1 ] = c_list [ 0 ] [ 1 ] - a_ans [ 0 ] b_ans [ 2 ] = c_list [ 0 ] [ 2 ] - a_ans [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c_list [ i ] [ j ] != a_ans [ i ] + b_ans [ j ] : ans = " No " break print ( ans )
import sys def main ( ) : c = [ [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ] for _ in range ( 3 ) ] n = 3 d = [ ] for i in range ( 1 , n ) : d0i = c [ 0 ] [ i ] - c [ 0 ] [ 0 ] d . append ( d0i ) for i in range ( 1 , n ) : for j in range ( 1 , n ) : if c [ i ] [ j ] - c [ i ] [ 0 ] == d [ j - 1 ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == " __main__ " : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : D [ i ] [ j ] = C [ i + 1 ] [ j ] - C [ i ] [ j ] flag = True if D [ 0 ] [ 0 ] == D [ 0 ] [ 1 ] and D [ 0 ] [ 1 ] == D [ 0 ] [ 2 ] and D [ 0 ] [ 2 ] == D [ 0 ] [ 0 ] : pass else : flag = False if D [ 1 ] [ 0 ] == D [ 1 ] [ 1 ] and D [ 1 ] [ 1 ] == D [ 1 ] [ 2 ] and D [ 1 ] [ 2 ] == D [ 1 ] [ 0 ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) ; d , e , f = m ( ) ; g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 for j in range ( 3 ) : B [ j ] = C [ 0 ] [ j ] - A [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for k in range ( 3 ) : for l in range ( 3 ) : if C [ k ] [ l ] != A [ k ] + B [ l ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
list1 = [ int ( s ) for s in input ( ) . split ( ) ] list2 = [ int ( s ) for s in input ( ) . split ( ) ] list3 = [ int ( s ) for s in input ( ) . split ( ) ] flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( list1 [ 0 ] - a1 ) == ( list2 [ 0 ] - a2 ) == ( list3 [ 0 ] - a3 ) : if ( list1 [ 1 ] - a1 ) == ( list2 [ 1 ] - a2 ) == ( list3 [ 1 ] - a3 ) : if ( list1 [ 2 ] - a1 ) == ( list2 [ 2 ] - a2 ) == ( list3 [ 2 ] - a3 ) : print ( ' Yes ' ) flag = 1 if flag == 1 : break if flag == 0 : print ( ' No ' )
def II ( ) : return int ( input ( ) ) def MI ( ) : return map ( int , input ( ) . split ( ) ) def LMI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def LIIN ( n ) : return list ( int ( input ( ) ) for _ in range ( n ) ) def LMIN ( n ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] def IS ( ) : return input ( ) def MS ( ) : return map ( str , input ( ) . split ( ) ) def LMS ( ) : return list ( map ( str , input ( ) . split ( ) ) ) def LISN ( n ) : return list ( input ( ) for _ in range ( n ) ) def LMSN ( n ) : return [ input ( ) . split ( ) for _ in range ( n ) ] MOD = 10 ** 9 + 7 INF = 10 ** 18 def main ( ) : x = [ 0 ] * 3 y = [ 0 ] * 3 a = LMIN ( 3 ) x [ 0 ] = 0 for i in range ( 3 ) : y [ i ] = a [ 0 ] [ i ] - x [ 0 ] for i in range ( 3 ) : x [ i ] = a [ i ] [ 0 ] - y [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if x [ i ] + y [ j ] != a [ i ] [ j ] : print ( ' No ' ) return 0 print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : flag = True a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for j in range ( 1 , 3 ) : for k in range ( 1 , 3 ) : if a [ j ] + b [ k ] != c [ j ] [ k ] : flag = False break else : continue break if flag : break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( c [ 0 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 for a2 in range ( c [ 1 ] [ 0 ] + 1 ) : if b1 != c [ 1 ] [ 0 ] - a2 : continue if b2 != c [ 1 ] [ 1 ] - a2 : continue if b3 != c [ 1 ] [ 2 ] - a2 : continue for a3 in range ( c [ 2 ] [ 0 ] + 1 ) : if b1 != c [ 2 ] [ 0 ] - a3 : continue if b2 != c [ 2 ] [ 1 ] - a3 : continue if b3 != c [ 2 ] [ 2 ] - a3 : continue print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = " No " if c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : if c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : result = " Yes " print ( result )
import sys import numpy as np def main ( ) : grid = np . array ( sys . stdin . read ( ) . split ( ) , dtype = np . int64 ) . reshape ( 3 , 3 ) grid = grid - grid [ 0 ] grid = grid . T grid = grid - grid [ 0 ] if np . all ( grid == 0 ) : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if not a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 2 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 2 ] [ 2 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] : print ( " No " ) ; exit ( ) if not a [ 0 ] [ 0 ] - a [ 0 ] [ 2 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 2 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 2 ] : print ( " No " ) ; exit ( ) print ( " Yes " )
import sys input_methods = [ ' clipboard ' , ' file ' , ' key ' ] using_method = 0 input_method = input_methods [ using_method ] tin = lambda : map ( int , input ( ) . split ( ) ) lin = lambda : list ( tin ( ) ) mod = 1000000007 def main ( ) : vl = [ lin ( ) for _ in range ( 3 ) ] for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ f ] [ i ] - vl [ t ] [ i ] ) if len ( is_same ) != 1 : return ' No ' for f , t in [ ( 0 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] : is_same = set ( ) for i in range ( 3 ) : is_same . add ( vl [ i ] [ f ] - vl [ i ] [ t ] ) if len ( is_same ) != 1 : return ' No ' return ' Yes ' isTest = False def pa ( v ) : if isTest : print ( v ) def input_clipboard ( ) : import clipboard input_text = clipboard . get ( ) input_l = input_text . splitlines ( ) for l in input_l : yield l if __name__ == " __main__ " : if sys . platform == ' ios ' : if input_method == input_methods [ 0 ] : ic = input_clipboard ( ) input = lambda : ic . __next__ ( ) elif input_method == input_methods [ 1 ] : sys . stdin = open ( ' inputFile.txt ' ) else : pass isTest = True else : pass ret = main ( ) if ret is not None : print ( ret )
c = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) c . append ( ci ) if all ( [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] ) : print ( " Yes " ) else : print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] N = 100 for i in range ( - N , N + 1 ) : for j in range ( - N , N + 1 ) : for k in range ( - N , N + 1 ) : if c [ 0 ] [ 0 ] - i == c [ 0 ] [ 1 ] - j == c [ 0 ] [ 2 ] - k : if c [ 1 ] [ 0 ] - i == c [ 1 ] [ 1 ] - j == c [ 1 ] [ 2 ] - k : if c [ 2 ] [ 0 ] - i == c [ 2 ] [ 1 ] - j == c [ 2 ] [ 2 ] - k : print ( ' Yes ' ) return print ( ' No ' ) main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] q1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] q2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] q3 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] q4 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] if q1 and q2 and q3 and q4 == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : continue else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys , re from collections import deque , defaultdict , Counter from math import ceil , sqrt , hypot , factorial , pi , sin , cos , tan , asin , acos , atan , radians , degrees , log2 from itertools import accumulate , permutations , combinations , combinations_with_replacement , product , groupby from operator import itemgetter , mul from copy import deepcopy from string import ascii_lowercase , ascii_uppercase , digits from bisect import bisect , bisect_left from fractions import gcd from heapq import heappush , heappop from functools import reduce def input ( ) : return sys . stdin . readline ( ) . strip ( ) def INT ( ) : return int ( input ( ) ) def MAP ( ) : return map ( int , input ( ) . split ( ) ) def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) sys . setrecursionlimit ( 10 ** 9 ) INF = float ( ' inf ' ) mod = 10 ** 9 + 7 c = [ LIST ( ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for i in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " print ( ans )
from pprint import pprint c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ' ' ) ) ) ) diff_v = [ [ 0 ] * 3 for i in range ( 3 ) ] diff_h = [ [ 0 ] * 3 for i in range ( 3 ) ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : if i > 0 : diff_v [ i ] [ j ] = c [ i ] [ j ] - c [ i - 1 ] [ j ] for j in range ( 0 , 3 ) : for i in range ( 0 , 3 ) : if j > 0 : diff_h [ j ] [ i ] = c [ i ] [ j ] - c [ i ] [ j - 1 ] def map_all ( es ) : return all ( [ e == es [ 0 ] for e in es [ 1 : ] ] ) if es else False eq_v = all ( [ map_all ( d ) for d in diff_v ] ) eq_h = all ( [ map_all ( d ) for d in diff_h ] ) if eq_v and eq_h : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] or c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] != c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) k = c2 - c1 failflag = 0 if ( c5 - c4 ) != k or ( c8 - c7 ) != k : failflag = 1 k = c3 - c2 if ( c6 - c5 ) != k or ( c9 - c8 ) != k : failflag = 1 k = c4 - c1 if ( c5 - c2 ) != k or ( c6 - c3 ) != k : failflag = 1 k = c7 - c4 if ( c8 - c5 ) != k or ( c9 - c6 ) != k : failflag = 1 if failflag == 0 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) and ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) and ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) == ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ) and ( c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) == ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ) : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a1 = 0 b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 != a2 + b2 : print ( " No " ) elif c23 != a2 + b3 : print ( " No " ) elif c32 != a3 + b2 : print ( " No " ) elif c33 != a3 + b3 : print ( " No " ) else : print ( " Yes " )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
x = [ ] y = [ ] z = [ ] for j in range ( 3 ) : x1 , y1 , z1 = [ int ( i ) for i in input ( ) . split ( ) ] x . append ( x1 ) y . append ( y1 ) z . append ( z1 ) for p in range ( 2 ) : if x [ p ] - x [ p + 1 ] != y [ p ] - y [ p + 1 ] or y [ p ] - y [ p + 1 ] != z [ p ] - z [ p + 1 ] : print ( " No " ) break if x [ 0 ] - y [ 0 ] != x [ 1 ] - y [ 1 ] or x [ 1 ] - y [ 1 ] != x [ 2 ] - y [ 2 ] : print ( " No " ) break if z [ 0 ] - y [ 0 ] != z [ 1 ] - y [ 1 ] or z [ 1 ] - y [ 1 ] != z [ 2 ] - y [ 2 ] : print ( " No " ) break if p == 1 : print ( " Yes " )
import sys import timeit def input ( ) : return sys . stdin . readline ( ) . strip ( ) def I ( ) : return int ( input ( ) ) def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def IR ( n ) : return [ I ( ) for i in range ( n ) ] def LIR ( n ) : return [ LI ( ) for i in range ( n ) ] def SR ( n ) : return [ S ( ) for i in range ( n ) ] def S ( ) : return input ( ) def LS ( ) : return input ( ) . split ( ) def main ( ) : c = LIR ( 3 ) a = [ 0 ] * 3 b = [ 0 ] * 3 ans = ' No ' for i in range ( 101 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] for j in range ( 101 ) : a [ 1 ] = j b [ 1 ] = c [ 1 ] [ 1 ] - a [ 1 ] for k in range ( 101 ) : a [ 2 ] = k b [ 2 ] = c [ 2 ] [ 2 ] - a [ 2 ] current = [ [ a [ i ] + b [ j ] for j in range ( 3 ) ] for i in range ( 3 ) ] if c == current : ans = ' Yes ' break print ( ans ) main ( )
c_one = list ( map ( int , input ( ) . split ( ) ) ) c_two = list ( map ( int , input ( ) . split ( ) ) ) c_thr = list ( map ( int , input ( ) . split ( ) ) ) a_b_ones = [ ( x , c_one [ 0 ] - x ) for x in range ( c_one [ 0 ] + 1 ) ] a_b_twos = [ ( x , c_two [ 1 ] - x ) for x in range ( c_two [ 1 ] + 1 ) ] a_b_thrs = [ ( x , c_thr [ 2 ] - x ) for x in range ( c_thr [ 2 ] + 1 ) ] ans = ' No ' for p in a_b_ones : for q in a_b_twos : for r in a_b_thrs : a1 , b1 = p [ 0 ] , p [ 1 ] a2 , b2 = q [ 0 ] , q [ 1 ] a3 , b3 = r [ 0 ] , r [ 1 ] if ( c_one [ 1 ] == a1 + b2 ) and ( c_one [ 2 ] == a1 + b3 ) and ( c_two [ 0 ] == a2 + b1 ) and ( c_two [ 2 ] == a2 + b3 ) and ( c_thr [ 0 ] == a3 + b1 ) and ( c_thr [ 1 ] == a3 + b2 ) : ans = ' Yes ' print ( ans )
cc = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] tc = [ x for c in cc for x in c ] if sum ( tc ) % 3 != 0 : print ( ' No ' ) else : cnt = 0 for i in range ( 3 ) : cnt += cc [ i ] [ i ] if cnt == sum ( tc ) // 3 : print ( ' Yes ' ) else : print ( ' No ' )
def taka ( A ) : t = 0 for a1 in range ( 101 ) : b1 = A [ 0 ] [ 0 ] - a1 b2 = A [ 0 ] [ 1 ] - a1 b3 = A [ 0 ] [ 2 ] - a1 a2 = A [ 1 ] [ 0 ] - b1 a3 = A [ 2 ] [ 0 ] - b1 if a2 + b2 != A [ 1 ] [ 1 ] : t = 1 if a2 + b3 != A [ 1 ] [ 2 ] : t = 1 if a3 + b2 != A [ 2 ] [ 1 ] : t = 1 if a3 + b3 != A [ 2 ] [ 2 ] : t = 1 if t == 0 : return " Yes " return " No " if __name__ == " __main__ " : C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) print ( taka ( C ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1b2 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] b1b3 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] b2b3 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if b1b2 and b1b3 and b2b3 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) a1 , a2 , a3 = [ 0 , c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] , c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] ] b1 , b2 , b3 = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] ans = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] if ans == c : print ( " Yes " ) else : print ( " No " )
import numpy as np arr = [ ] for i in range ( 3 ) : arr . append ( [ int ( s ) for s in input ( ) . split ( " " ) ] ) def calculate ( arr ) : arr = np . array ( arr ) minValPerRow = min ( arr [ 0 ] ) result = False for sa in range ( minValPerRow + 1 ) : mrr = arr [ 0 ] - sa mrr1 = arr [ 1 ] - mrr mrr2 = arr [ 2 ] - mrr s1 = mrr1 [ 0 ] == mrr1 [ 1 ] == mrr1 [ 2 ] s2 = mrr2 [ 0 ] == mrr2 [ 1 ] == mrr2 [ 2 ] if s1 == True and s2 == True : result = True break if result : print ( " Yes " ) else : print ( " No " ) calculate ( arr )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - c [ 0 ] [ 0 ] != c [ i ] [ 1 ] - c [ 0 ] [ 1 ] or c [ i ] [ 1 ] - c [ 0 ] [ 1 ] != c [ i ] [ 2 ] - c [ 0 ] [ 2 ] : ans = " No " print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( ' No ' ) break else : print ( ' Yes ' )
C = [ ] C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) res = False for a1 in range ( 0 , min ( C [ 0 ] ) + 1 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 if C [ 1 ] [ 0 ] - b1 == C [ 1 ] [ 1 ] - b2 == C [ 1 ] [ 2 ] - b3 : if C [ 2 ] [ 0 ] - b1 == C [ 2 ] [ 1 ] - b2 == C [ 2 ] [ 2 ] - b3 : res = True break if res : print ( " Yes " ) else : print ( " No " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = " Yes " for i in range ( 3 ) : a1 = c [ 1 ] [ i ] - c [ 0 ] [ i ] a2 = c [ 2 ] [ i ] - c [ 1 ] [ i ] a3 = c [ i ] [ 2 ] - c [ i ] [ 1 ] a4 = c [ i ] [ 1 ] - c [ i ] [ 0 ] l = [ a1 , a2 , a3 , a4 ] if i == 0 : p = l else : if p != l : ans = " No " print ( ans )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] A = [ 0 ] * 3 B = [ 0 ] * 3 ans = False for a1 in range ( C [ 0 ] [ 0 ] + 1 ) : tmp = True b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] != a2 + b2 : tmp = False if C [ 1 ] [ 2 ] != a2 + b3 : tmp = False if C [ 2 ] [ 1 ] != a3 + b2 : tmp = False if C [ 2 ] [ 2 ] != a3 + b3 : tmp = False if tmp == True : ans = True if ans : print ( " Yes " ) else : print ( " No " )
import bisect import os from collections import Counter , deque from fractions import gcd from functools import lru_cache from functools import reduce import functools import heapq import itertools import math import numpy as np import re import sys if os . getenv ( " LOCAL " ) : sys . stdin = open ( " _in.txt " , " r " ) sys . setrecursionlimit ( 2147483647 ) INF = float ( " inf " ) C = np . array ( list ( zip ( * [ map ( int , sys . stdin . readline ( ) . split ( ) ) for _ in range ( 3 ) ] ) ) ) ok = len ( set ( C [ 0 ] - C [ 1 ] ) ) == len ( set ( C [ 1 ] - C [ 2 ] ) ) == len ( set ( C [ : , 0 ] - C [ : , 1 ] ) ) == len ( set ( C [ : , 1 ] - C [ : , 2 ] ) ) == 1 if ok : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : for k in range ( 3 ) : for l in range ( 3 ) : if c [ i ] [ j ] + c [ k ] [ l ] != c [ i ] [ l ] + c [ k ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - \ c [ 2 ] [ 2 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c0 = c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 0 ] [ 2 ] c1 = c [ 1 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 1 ] [ 2 ] c2 = c [ 2 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 2 ] [ 2 ] for a0 in range ( 101 ) : b0 = c [ 0 ] [ 0 ] - a0 b1 = c [ 0 ] [ 1 ] - a0 b2 = c [ 0 ] [ 2 ] - a0 for a1 in range ( 101 ) : a2 = ( c2 - c0 + 3 * a0 ) / 3 if ( c [ 1 ] [ 0 ] - a1 == b0 and c [ 1 ] [ 1 ] - a1 == b1 and c [ 1 ] [ 2 ] - a1 == b2 and c [ 2 ] [ 0 ] - a2 == b0 and c [ 2 ] [ 1 ] - a2 == b1 and c [ 2 ] [ 2 ] - a2 == b2 ) : print ( " Yes " ) exit ( 0 ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ians = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] ] jans = [ c [ 0 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ] ok = True for i in range ( 1 , 3 ) : for j in range ( 3 ) : if ians [ j ] != c [ i ] [ j ] - c [ i ] [ 0 ] : ok = False for i in range ( 1 , 3 ) : for j in range ( 3 ) : if jans [ j ] != c [ j ] [ i ] - c [ 0 ] [ i ] : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( ' Yes ' if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] and C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] else ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 != c22 - c12 or c21 - c11 != c23 - c13 or c31 - c11 != c32 - c12 or c31 - c11 != c33 - c13 : print ( " No " ) else : print ( " Yes " )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 - c4 == c2 - c5 == c3 - c6 and \ c1 - c7 == c2 - c8 == c3 - c9 and \ c4 - c7 == c5 - c8 == c6 - c9 : print ( ' Yes ' ) else : print ( ' No ' )
def is_valid ( m , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if ( m [ i ] [ j ] != a [ i ] + b [ j ] ) : return 0 return 1 m = [ ] for a0 in range ( 3 ) : m . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a0 in range ( 101 ) : b0 = m [ 0 ] [ 0 ] - a0 b1 = m [ 0 ] [ 1 ] - a0 b2 = m [ 0 ] [ 2 ] - a0 a1 = m [ 1 ] [ 0 ] - b0 a2 = m [ 2 ] [ 0 ] - b0 if ( is_valid ( m , [ a0 , a1 , a2 ] , [ b0 , b1 , b2 ] ) ) : print ( " Yes " ) exit ( ) print ( " No " )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( grid [ 0 ] [ 0 ] - grid [ 1 ] [ 0 ] ) == ( grid [ 0 ] [ 1 ] - grid [ 1 ] [ 1 ] ) == ( grid [ 0 ] [ 2 ] - grid [ 1 ] [ 2 ] ) and ( grid [ 0 ] [ 0 ] - grid [ 0 ] [ 1 ] ) == ( grid [ 1 ] [ 0 ] - grid [ 1 ] [ 1 ] ) == ( grid [ 2 ] [ 0 ] - grid [ 2 ] [ 1 ] ) and ( grid [ 0 ] [ 0 ] - grid [ 2 ] [ 0 ] ) == ( grid [ 0 ] [ 1 ] - grid [ 2 ] [ 1 ] ) == ( grid [ 0 ] [ 2 ] - grid [ 2 ] [ 2 ] ) and ( grid [ 0 ] [ 0 ] - grid [ 0 ] [ 2 ] ) == ( grid [ 1 ] [ 0 ] - grid [ 1 ] [ 2 ] ) == ( grid [ 2 ] [ 0 ] - grid [ 2 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
mat = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( [ c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] , c [ 0 ] - c [ 2 ] ] ) for v in zip ( * mat ) : if v [ 0 ] != v [ 1 ] or v [ 1 ] != v [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - b [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import math , string , itertools , fractions , heapq , collections , re , array , bisect , sys , random , time , copy , functools from collections import deque sys . setrecursionlimit ( 10 ** 7 ) inf = 10 ** 20 mod = 10 ** 9 + 7 DR = [ 1 , - 1 , 0 , 0 ] DC = [ 0 , 0 , 1 , - 1 ] def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ] def LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ] def LS ( ) : return sys . stdin . readline ( ) . split ( ) def I ( ) : return int ( sys . stdin . readline ( ) ) def F ( ) : return float ( sys . stdin . readline ( ) ) def S ( ) : return input ( ) def main ( ) : c = [ ] csum = 0 for _ in range ( 3 ) : _c = LI ( ) csum += sum ( _c ) c . append ( _c ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == csum / 3 : print ( ' Yes ' ) else : print ( ' No ' ) main ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) count = 0 if c11 - c12 == c21 - c22 == c31 - c32 : count + = 1 if c12 - c13 == c22 - c23 == c32 - c33 : count + = 1 if c21 - c11 == c22 - c12 == c23 - c13 : count + = 1 if c21 - c31 == c22 - c32 == c23 - c33 : count + = 1 if count == 4 : print ( " Yes " ) else : print ( " No " )
r = [ None ] * 3 for i in range ( 3 ) : x = list ( map ( int , input ( ) . split ( ) ) ) r [ i ] = [ x [ i ] - x [ i + 1 ] for i in range ( 2 ) ] print ( ' Yes ' if all ( r [ i ] == r [ i + 1 ] for i in range ( 2 ) ) else ' No ' )
def main ( ) : A = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] from itertools import product for a1 , a2 , a3 in product ( range ( 101 ) , repeat = 3 ) : c1 = A [ 0 ] [ 0 ] - a1 == A [ 1 ] [ 0 ] - a2 == A [ 2 ] [ 0 ] - a3 c2 = A [ 0 ] [ 1 ] - a1 == A [ 1 ] [ 1 ] - a2 == A [ 2 ] [ 1 ] - a3 c3 = A [ 0 ] [ 2 ] - a1 == A [ 1 ] [ 2 ] - a2 == A [ 2 ] [ 2 ] - a3 if c1 and c2 and c3 : return print ( " Yes " ) print ( " No " ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] def check ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : return False return True for i in range ( 101 ) : b [ 0 ] = i a [ 0 ] = c [ 0 ] [ 0 ] - b [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] if check ( c , a , b ) : print ( " Yes " ) exit ( ) print ( " No " )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] total1 = 0 total2 = 0 for i in range ( 3 ) : total1 += sum ( l [ i ] ) total2 += l [ i ] [ i ] if total1 == total2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
a = input ( ) . split ( ) b = input ( ) . split ( ) c = input ( ) . split ( ) lista = [ int ( d ) for d in a ] listb = [ int ( e ) for e in b ] listc = [ int ( f ) for f in c ] b1 = lista [ 0 ] b2 = lista [ 1 ] b3 = lista [ 2 ] a2 = listb [ 0 ] - b1 a3 = listc [ 0 ] - b1 if a2 + b2 == listb [ 1 ] and a2 + b3 == listb [ 2 ] and a3 + b2 == listc [ 1 ] and a3 + b3 == listc [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
x = [ ] for i in range ( 3 ) : x . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = 1 for i in range ( 2 ) : if not ( x [ i + 1 ] [ 0 ] - x [ i ] [ 0 ] == x [ i + 1 ] [ 1 ] - x [ i ] [ 1 ] == x [ i + 1 ] [ 2 ] - x [ i ] [ 2 ] ) : flag = 0 break if flag == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 1 , 3 ) : if c [ i ] [ j ] - c [ i ] [ j - 1 ] != c [ i + 1 ] [ j ] - c [ i + 1 ] [ j - 1 ] : print ( ' No ' ) quit ( ) for i in range ( 1 , 3 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i - 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i - 1 ] [ j + 1 ] : print ( ' No ' ) quit ( ) print ( ' Yes ' )
import sys l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 def dfs ( a , b , i ) : if i > 2 : for j in range ( 3 ) : for k in range ( 3 ) : if j != k : if a [ j ] + b [ k ] != l [ j ] [ k ] : return print ( " Yes " ) sys . exit ( ) for a [ i ] in range ( l [ i ] [ i ] + 1 ) : b [ i ] = l [ i ] [ i ] - a [ i ] dfs ( a , b , i + 1 ) dfs ( a , b , 0 ) print ( " No " )
table = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = table [ 0 ] [ 0 ] - a1 b2 = table [ 1 ] [ 0 ] - a1 b3 = table [ 2 ] [ 0 ] - a1 a2 = table [ 0 ] [ 1 ] - b1 a3 = table [ 0 ] [ 2 ] - b1 if ( a2 + b2 == table [ 1 ] [ 1 ] and a3 + b2 == table [ 1 ] [ 2 ] and a2 + b3 == table [ 2 ] [ 1 ] and a3 + b3 == table [ 2 ] [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] m = 0 for i in range ( 3 ) : m += sum ( x [ i ] ) if m % 3 == 0 and ( x [ 0 ] [ 0 ] + x [ 1 ] [ 1 ] + x [ 2 ] [ 2 ] ) * 3 == m : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for j in range ( 100 ) : b1 = [ ] a1 = [ ] a = j for i in range ( 3 ) : b1 . append ( c [ 0 ] [ i ] - a ) a1 . append ( c [ i ] [ 0 ] - b1 [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a1 [ i ] + b1 [ j ] != c [ i ] [ j ] : count = 1 if count == 1 : print ( ' No ' ) else : print ( ' Yes ' )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) count = 0 if C [ 0 ] [ 0 ] + C [ 2 ] [ 2 ] != C [ 2 ] [ 0 ] + C [ 0 ] [ 2 ] : count + = 1 D = [ ] E = [ ] F = [ ] for i in range ( 3 ) : D . append ( C [ i ] [ 0 ] - C [ i ] [ 1 ] ) E . append ( C [ i ] [ 1 ] - C [ i ] [ 2 ] ) F . append ( C [ i ] [ 2 ] - C [ i ] [ 0 ] ) if len ( set ( D ) ) != 1 or len ( set ( E ) ) != 1 or len ( set ( F ) ) != 1 : count + = 1 G = [ ] H = [ ] I = [ ] for i in range ( 3 ) : G . append ( C [ 0 ] [ i ] - C [ 1 ] [ i ] ) H . append ( C [ 1 ] [ i ] - C [ 2 ] [ i ] ) I . append ( C [ 2 ] [ i ] - C [ 0 ] [ i ] ) if len ( set ( G ) ) != 1 or len ( set ( H ) ) != 1 or len ( set ( I ) ) != 1 : count + = 1 if count == 0 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) f = True for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False for i in range ( 2 ) : tmp = [ ] for j in range ( 3 ) : tmp . append ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) if ( tmp [ 0 ] == tmp [ 1 ] ) and ( tmp [ 1 ] == tmp [ 2 ] ) : pass else : f = False print ( " Yes " if f else " No " )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] [ 0 ] , c [ i ] [ 1 ] , c [ i ] [ 2 ] = map ( int , input ( ) . split ( " " ) ) success = False for a1 in range ( max ( [ max ( i ) for i in c ] ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if ( c [ 1 ] [ 0 ] - b1 ) == ( c [ 1 ] [ 1 ] - b2 ) and ( c [ 1 ] [ 1 ] - b2 ) == ( c [ 1 ] [ 2 ] - b3 ) : if ( c [ 2 ] [ 0 ] - b1 ) == ( c [ 2 ] [ 1 ] - b2 ) and ( c [ 2 ] [ 1 ] - b2 ) == ( c [ 2 ] [ 2 ] - b3 ) : success = True break if success : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i ] [ 1 ] != c [ i + 1 ] [ 0 ] - c [ i + 1 ] [ 1 ] : print ( ' No ' ) break if c [ i ] [ 1 ] - c [ i ] [ 2 ] != c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 2 ] : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i + 1 ] [ 0 ] : print ( ' No ' ) break else : print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i flg = True for j in range ( 3 ) : b [ j ] = C [ 0 ] [ j ] - i if b [ j ] < 0 : flg = False break if flg : for j in range ( 1 , 3 ) : a [ j ] = C [ j ] [ 0 ] - b [ 0 ] if a [ j ] < 0 : flg = False break if flg : for j in range ( 3 ) : for k in range ( 3 ) : if C [ j ] [ k ] != a [ j ] + b [ k ] : flg = False break if flg : print ( ' Yes ' ) quit ( ) print ( ' No ' )
import numpy as np nums = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) out = ' Yes ' a_1 = nums [ 1 , : ] - nums [ 0 , : ] if a_1 [ 0 ] != a_1 [ 1 ] or a_1 [ 0 ] != a_1 [ 2 ] : out = ' No ' a_2 = nums [ 2 , : ] - nums [ 1 , : ] if a_2 [ 0 ] != a_2 [ 1 ] or a_2 [ 0 ] != a_2 [ 2 ] : out = ' No ' b_1 = nums [ : , 1 ] - nums [ : , 0 ] if b_1 [ 0 ] != b_1 [ 1 ] or b_1 [ 0 ] != b_1 [ 2 ] : out = ' No ' b_2 = nums [ : , 2 ] - nums [ : , 1 ] if b_2 [ 0 ] != b_2 [ 1 ] or b_2 [ 0 ] != b_2 [ 2 ] : out = ' No ' print ( out )
import sys input = sys . stdin . readline def read ( ) : C = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . strip ( ) . split ( ) ) C . append ( ( c1 , c2 , c3 ) ) return C , def solve ( C ) : for b0 in range ( 101 ) : for b1 in range ( 101 ) : for b2 in range ( 101 ) : x = C [ 0 ] [ 0 ] - b0 y = C [ 0 ] [ 1 ] - b1 z = C [ 0 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 1 ] [ 0 ] - b0 y = C [ 1 ] [ 1 ] - b1 z = C [ 1 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 2 ] [ 0 ] - b0 y = C [ 2 ] [ 1 ] - b1 z = C [ 2 ] [ 2 ] - b2 if x != y or y != z : continue return " Yes " return " No " if __name__ == ' __main__ ' : inputs = read ( ) print ( solve ( * inputs ) )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
import collections import itertools def getint ( ) : return int ( input ( ) ) def getints ( ) : return list ( map ( int , input ( ) . split ( ) ) ) grid = [ getints ( ) for i in range ( 3 ) ] def normalize ( grid ) : if not grid : return line = grid [ 0 ] mx = min ( line ) for j in range ( 3 ) : line [ j ] -= mx normalize ( grid [ 1 : ] ) normalize ( grid ) ok = grid [ 0 ] == grid [ 1 ] and grid [ 1 ] == grid [ 2 ] print ( " Yes " if ok else " No " )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if A [ 0 ] [ 0 ] + A [ 1 ] [ 1 ] == A [ 0 ] [ 1 ] + A [ 1 ] [ 0 ] and A [ 1 ] [ 1 ] + A [ 2 ] [ 2 ] == A [ 1 ] [ 2 ] + A [ 2 ] [ 1 ] and A [ 0 ] [ 0 ] + A [ 2 ] [ 2 ] == A [ 0 ] [ 2 ] + A [ 2 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) s = 0 for i in range ( 3 ) : for j in range ( 3 ) : if i == j : s += c [ i ] [ j ] * 2 else : s - = c [ i ] [ j ] if s == 0 : print ( " Yes " ) else : print ( " No " )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = L [ 0 ] [ 2 ] + L [ 1 ] [ 1 ] + L [ 2 ] [ 0 ] c2 = L [ 0 ] [ 1 ] + L [ 1 ] [ 0 ] + L [ 2 ] [ 2 ] c3 = L [ 0 ] [ 0 ] + L [ 1 ] [ 2 ] + L [ 2 ] [ 1 ] if ( c1 == c2 and c2 == c3 ) : print ( ' Yes ' ) else : print ( ' No ' )
A = [ None , None , None ] B = [ 0 , None , None ] C = [ None , None , None ] for i in range ( 3 ) : A [ i ] = list ( map ( int , input ( ) . split ( ) ) ) flag = True for i in range ( 3 ) : for j in range ( 3 ) : if B [ i ] == None : B [ i ] = A [ i ] [ j ] - C [ j ] elif C [ j ] == None : C [ j ] = A [ i ] [ j ] - B [ i ] elif A [ i ] [ j ] != B [ i ] + C [ j ] : flag = False if flag == True : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] and c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] and C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] == C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : pass else : flag = False for i in range ( 2 ) : if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] and C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] == C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( [ c1 , c2 , c3 ] ) Ct = np . transpose ( C ) ans = C + Ct fact = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if not ( ans [ i , j ] == C [ i , i ] + C [ j , j ] ) : fact = " No " break print ( fact )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " No " for a_1 in range ( 101 ) : b_1 = c [ 0 ] [ 0 ] - a_1 b_2 = c [ 0 ] [ 1 ] - a_1 b_3 = c [ 0 ] [ 2 ] - a_1 a_2 = c [ 1 ] [ 0 ] - b_1 a_3 = c [ 2 ] [ 0 ] - b_1 if a_2 + b_2 == c [ 1 ] [ 1 ] and a_2 + b_3 == c [ 1 ] [ 2 ] and a_3 + b_2 == c [ 2 ] [ 1 ] and a_3 + b_3 == c [ 2 ] [ 2 ] : ans = " Yes " break print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( C ) : D = [ [ c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] ] for c in C ] if D [ 0 ] == D [ 1 ] == D [ 2 ] : return 0 else : print ( ' No ' ) exit ( ) check ( C ) C = [ list ( c ) for c in zip ( * C ) ] check ( C ) print ( ' Yes ' )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if abs ( a [ 0 ] - a [ 1 ] ) == abs ( b [ 0 ] - b [ 1 ] ) == abs ( c [ 0 ] - c [ 1 ] ) and abs ( a [ 1 ] - a [ 2 ] ) == abs ( b [ 1 ] - b [ 2 ] ) == abs ( c [ 1 ] - c [ 2 ] ) and abs ( a [ 0 ] - b [ 0 ] ) == abs ( a [ 1 ] - b [ 1 ] ) == abs ( a [ 2 ] - b [ 2 ] ) and abs ( b [ 0 ] - c [ 0 ] ) == abs ( b [ 1 ] - c [ 1 ] ) == abs ( b [ 2 ] - c [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] c_diff = [ ] for i in range ( 3 ) : c . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) for i in range ( 3 ) : c_diff . append ( [ c [ i ] [ j ] - c [ i ] [ 0 ] for j in range ( 3 ) ] ) if c_diff [ 0 ] == c_diff [ 1 ] == c_diff [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ ] for i in range ( 3 ) : C . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) ans = " Yes " A = [ 0 ] * 3 B = C [ 0 ] A [ 1 ] = C [ 1 ] [ 0 ] - B [ 0 ] A [ 2 ] = C [ 2 ] [ 0 ] - B [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cross_left = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] cross_right = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] total = 0 for i in range ( 3 ) : total += sum ( c [ i ] ) if total % 3 == 0 and total // 3 == cross_left and total // 3 == cross_right : print ( ' Yes ' ) else : print ( ' No ' )
matrix = [ 0 ] * 3 for i in range ( 3 ) : matrix [ i ] = [ int ( j ) for j in input ( ) . split ( ) ] for a1 in range ( 101 ) : for b1 in range ( 101 ) : a2 = matrix [ 1 ] [ 0 ] - b1 a3 = matrix [ 2 ] [ 0 ] - b1 b2 = matrix [ 0 ] [ 1 ] - a1 b3 = matrix [ 0 ] [ 2 ] - a1 if matrix [ 1 ] [ 1 ] == a2 + b2 and matrix [ 1 ] [ 2 ] == a2 + b3 and matrix [ 2 ] [ 1 ] == a3 + b2 and matrix [ 2 ] [ 2 ] == a3 + b3 : print ( " Yes " ) exit ( ) print ( " No " )
a1 , b1 , c1 = ( int ( i ) for i in input ( ) . split ( ) ) a2 , b2 , c2 = ( int ( i ) for i in input ( ) . split ( ) ) a3 , b3 , c3 = ( int ( i ) for i in input ( ) . split ( ) ) am = min ( a1 , a2 , a3 ) bm = min ( b1 , b2 , b3 ) cm = min ( c1 , c2 , c3 ) a = [ a1 - am , a2 - am , a3 - am ] b = [ b1 - bm , b2 - bm , b3 - bm ] c = [ c1 - cm , c2 - cm , c3 - cm ] if a == b == c : print ( " Yes " ) else : print ( " No " )
import numpy as np A = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for I in range ( 3 ) ] ) for I in range ( 2 ) : j , k , l = A [ 1 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) j , k , l = A [ 2 ] - A [ 0 ] if not ( j == k and k == l ) : print ( " No " ) quit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for k in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] or c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] != c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] or c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] != c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] : print ( " No " ) else : print ( " Yes " )
C_list = [ ] for _ in range ( 3 ) : C_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) from itertools import combinations ans = ' Yes ' for r in combinations ( range ( 3 ) , 2 ) : for c in combinations ( range ( 3 ) , 2 ) : if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 0 ] ] != C_list [ r [ 0 ] ] [ c [ 1 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break if C_list [ r [ 0 ] ] [ c [ 0 ] ] - C_list [ r [ 0 ] ] [ c [ 1 ] ] != C_list [ r [ 1 ] ] [ c [ 0 ] ] - C_list [ r [ 1 ] ] [ c [ 1 ] ] : ans = ' No ' break print ( ans )
from numpy import array a , b , c = array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) e , f , g = [ array ( i ) for i in zip ( a , b , c ) ] h = lambda x : list ( x ) == list ( set ( x ) ) * 3 print ( " YNeos " [ 1 ^ all ( [ h ( a - b ) , h ( b - c ) , h ( c - a ) , h ( e - f ) , h ( f - g ) , h ( g - e ) ] ) : : 2 ] )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] flag = False for i in range ( - 100 , 100 ) : for j in range ( - 100 , 100 ) : for k in range ( - 100 , 100 ) : a11 = c [ 0 ] [ 0 ] - i a12 = c [ 0 ] [ 1 ] - j a13 = c [ 0 ] [ 2 ] - k if a11 != a12 or a12 != a13 : continue a21 = c [ 1 ] [ 0 ] - i a22 = c [ 1 ] [ 1 ] - j a23 = c [ 1 ] [ 2 ] - k if a21 != a22 or a22 != a23 : continue a31 = c [ 2 ] [ 0 ] - i a32 = c [ 2 ] [ 1 ] - j a33 = c [ 2 ] [ 2 ] - k if a31 != a32 or a32 != a33 : continue flag = True print ( ' Yes ' if flag else ' No ' )
c = [ ] for i in range ( 3 ) : sub_list = list ( map ( int , input ( ) . split ( ) ) ) c . append ( sub_list ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 101 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - i b [ 1 ] = c [ 0 ] [ 1 ] - i b [ 2 ] = c [ 0 ] [ 2 ] - i a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] count = 0 for j in a : if not 0 <= j <= 100 : count = 1 for j in b : if not 0 <= j <= 100 : count = 1 if count == 1 : continue count = 0 for m in range ( 3 ) : for n in range ( 3 ) : if not c [ m ] [ n ] == a [ m ] + b [ n ] : count = 1 if count == 1 : continue else : print ( ' Yes ' ) import sys sys . exit ( ) print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
def resolve ( ) : g = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] m = max ( map ( max , g ) ) for a in range ( m + 1 ) : for b in range ( m + 1 ) : for c in range ( m + 1 ) : y = [ a , b , c ] x = [ g [ i ] [ i ] - y [ i ] for i in range ( 3 ) ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : v = y [ i ] + x [ j ] if g [ i ] [ j ] != v : ans = False if ans : print ( ' Yes ' ) return print ( ' No ' ) resolve ( )
J = lambda : map ( int , input ( ) . split ( ) ) ; A , B , C = J ( ) ; D , E , F = J ( ) ; G , H , I = J ( ) ; print ( " YNeos " [ any ( [ A - B - D + E , A - C - G + I , E - F - H + I ] ) : : 2 ] )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] for i in range ( 3 ) : b [ i ] = c [ i ] [ 0 ] - 0 for i in range ( 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
import sys import pprint as pp def II ( ) : return int ( sys . stdin . readline ( ) ) def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] MAXSIZE = ( 1 << 31 ) - 1 MINSIZE = - ( 1 << 31 ) + 1 yes = " Yes " no = " No " def solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) : result = no a0 = 0 b0 = line00 b1 = line01 - a0 b2 = line02 - a0 a1 = line10 - line00 a2 = line20 - line00 if ( ( a1 + b1 ) == line11 ) and ( ( a1 + b2 ) == line12 ) and ( ( a2 + b1 ) == line21 ) and ( ( a2 + b2 ) == line22 ) : result = yes return result if __name__ == " __main__ " : line00 , line01 , line02 = MI ( ) line10 , line11 , line12 = MI ( ) line20 , line21 , line22 = MI ( ) print ( " {} " . format ( solver ( line00 , line01 , line02 , line10 , line11 , line12 , line20 , line21 , line22 ) ) )
li = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] lia = li [ 0 ] lib = li [ 1 ] lic = li [ 2 ] if lia [ 0 ] - lia [ 1 ] == lib [ 0 ] - lib [ 1 ] == lic [ 0 ] - lic [ 1 ] and lia [ 1 ] - lia [ 2 ] == lib [ 1 ] - lib [ 2 ] == lic [ 1 ] - lic [ 2 ] \ and lia [ 0 ] - lib [ 0 ] == lia [ 1 ] - lib [ 1 ] == lia [ 2 ] - lib [ 2 ] and lib [ 0 ] - lic [ 0 ] == lib [ 1 ] - lic [ 1 ] == lib [ 2 ] - lic [ 2 ] : print ( " Yes " ) else : print ( " No " )
mycode = r import sys import os if sys . argv [ - 1 ] == ' ONLINE_JUDGE ' : with open ( ' mycode.pyx ' , ' w ' ) as f : f . write ( mycode ) os . system ( ' cythonize -i -3 -b mycode.pyx ' ) import mycode
c = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( - 500 , 500 ) : a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] and c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] and c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] and ( c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) : print ( " Yes " ) break if c [ 1 ] [ 1 ] != a [ 1 ] + b [ 1 ] or c [ 1 ] [ 2 ] != a [ 1 ] + b [ 2 ] or c [ 2 ] [ 1 ] != a [ 2 ] + b [ 1 ] or ( c [ 2 ] [ 2 ] != a [ 2 ] + b [ 2 ] ) : if i == 499 : print ( " No " )
L = [ ] for i in range ( 3 ) : S = list ( map ( int , input ( ) . split ( ) ) ) L . append ( S ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - i ] [ 2 - j ] - L [ 1 - i ] [ 2 - j ] != L [ 2 - i ] [ 1 - j ] - L [ 1 - i ] [ 1 - j ] : print ( " No " ) exit ( ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - j ] [ 2 - i ] - L [ 1 - j ] [ 2 - i ] != L [ 2 - j ] [ 1 - i ] - L [ 1 - j ] [ 1 - i ] : print ( " No " ) exit ( ) print ( " Yes " )
A = [ int ( x ) for x in input ( ) . split ( ) ] B = [ int ( x ) for x in input ( ) . split ( ) ] C = [ int ( x ) for x in input ( ) . split ( ) ] a , b = A [ 1 ] - A [ 0 ] , A [ 2 ] - A [ 0 ] c , d = B [ 1 ] - B [ 0 ] , B [ 2 ] - B [ 0 ] e , f = C [ 1 ] - C [ 0 ] , C [ 2 ] - C [ 0 ] if a == c == e and b == d == f : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] a3 = c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] b1 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] b2 = c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] b3 = c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] if a1 == a2 == a3 and b1 == b2 == b3 and a1 % 1 == 0 and a2 % 1 == 0 and a3 % 1 == 0 and b1 % 1 == 0 and b2 % 1 == 0 and b3 % 1 == 0 : print ( ' Yes ' ) else : print ( ' No ' )
c1 = [ int ( i ) for i in input ( ) . split ( ) ] c2 = [ int ( i ) for i in input ( ) . split ( ) ] c3 = [ int ( i ) for i in input ( ) . split ( ) ] flag = False if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] : if c1 [ 1 ] - c1 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c2 [ 2 ] - c2 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c3 [ 2 ] - c3 [ 0 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 2 ] - c2 [ 2 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 2 ] - c3 [ 2 ] : flag = True print ( ' Yes ' ) if not flag : print ( ' No ' )
def main ( ) : * C , = map ( int , open ( 0 ) . read ( ) . split ( ) ) memo = { ( i - j , j - k ) for i , j , k in zip ( * [ iter ( C ) ] * 3 ) } flg = len ( memo ) == 1 print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
import sys input = sys . stdin . readline c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 0 , 101 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if a2 + b2 == c22 and a3 + b2 == c32 and a2 + b3 == c23 and a3 + b3 == c33 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = l [ 0 ] a2 = l [ 1 ] [ 0 ] - b [ 0 ] a3 = l [ 2 ] [ 0 ] - b [ 0 ] if l [ 1 ] == [ a2 + b [ 0 ] , a2 + b [ 1 ] , a2 + b [ 2 ] ] and l [ 2 ] == [ a3 + b [ 0 ] , a3 + b [ 1 ] , a3 + b [ 2 ] ] : print ( ' Yes ' ) else : print ( ' No ' )
box = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) box . append ( a ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : a1_b1 = box [ 0 ] [ 0 ] - a1 a1_b2 = box [ 1 ] [ 0 ] - a1 a1_b3 = box [ 2 ] [ 0 ] - a1 a2_b1 = box [ 0 ] [ 1 ] - a2 a2_b2 = box [ 1 ] [ 1 ] - a2 a2_b3 = box [ 2 ] [ 1 ] - a2 f = True if a1_b1 != a2_b1 or a1_b2 != a2_b2 or a1_b3 != a2_b3 : f = False a1_b = [ a1_b1 , a1_b2 , a1_b3 ] a2_b = [ a2_b1 , a2_b2 , a2_b3 ] res = True a1_a3 = [ ] a2_a3 = [ ] for i in range ( 3 ) : if ( box [ i ] [ 2 ] - a1_b [ i ] ) != ( box [ i ] [ 2 ] - a2_b [ i ] ) : res = False a1_a3 . append ( box [ i ] [ 2 ] - a1_b [ i ] ) a2_a3 . append ( box [ i ] [ 2 ] - a2_b [ i ] ) a3 = a1_a3 [ 0 ] for i in range ( 1 , 3 ) : if a3 != a1_a3 [ i ] : res = False a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a = [ a1 , a2 , a3 ] b = a3_b for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False res = True for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False if res : print ( " Yes " ) exit ( ) print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] and c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( " Yes " ) else : print ( " No " )
if __name__ == " __main__ " : c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 , 0 , 0 ] b = [ c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] ] a [ 1 ] = c2 [ 1 ] - b [ 1 ] a [ 2 ] = c3 [ 1 ] - b [ 1 ] flg = True for i in range ( 3 ) : for j in range ( 3 ) : flg = flg & ( a [ i ] + b [ j ] == c [ i ] [ j ] ) if flg : print ( ' Yes ' ) else : print ( ' No ' )
def solve ( ) : c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if not c [ i ] [ j ] - c [ i + 1 ] [ j ] == c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : return ' No ' for i in range ( 2 ) : for j in range ( 2 ) : if not c [ i ] [ j ] - c [ i ] [ j + 1 ] == c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] : return ' No ' return ' Yes ' if __name__ == ' __main__ ' : print ( solve ( ) )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] != c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : ans = False break for i in range ( 3 ) : for j in range ( 3 ) : if c [ j ] [ i ] - c [ ( j + 1 ) % 3 ] [ i ] != c [ j ] [ ( i + 1 ) % 3 ] - c [ ( j + 1 ) % 3 ] [ ( i + 1 ) % 3 ] : ans = False break print ( " Yes " if ans else " No " )
from itertools import product as p c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 a [ 0 ] = 0 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , j in p ( range ( 3 ) , range ( 3 ) ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : print ( ' Yes ' )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : for b1 in range ( 0 , 101 ) : for b2 in range ( 0 , 101 ) : for b3 in range ( 0 , 101 ) : for i in range ( 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : break else : print ( YES ) return print ( NO ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
def is_right ( a0 , a1 , a2 ) : for j in range ( H ) : if grids [ j ] [ 0 ] - a0 == grids [ j ] [ 1 ] - a1 == grids [ j ] [ 2 ] - a2 : continue else : return False return True H = 3 grids = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( H ) ] for a0 in range ( 100 + 1 ) : for a1 in range ( 100 + 1 ) : for a2 in range ( 100 + 1 ) : if is_right ( a0 , a1 , a2 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : L = [ ] for i in range ( 3 ) : L . append ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) if len ( set ( L ) ) > 1 : print ( NO ) return R = [ ] for i in range ( 3 ) : R . append ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) if len ( set ( R ) ) > 1 : print ( NO ) return print ( YES ) return def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] for a1 in range ( 101 ) : b1 , b2 , b3 = c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : continue a2 , a3 = c [ 1 ] [ 0 ] - b1 , c [ 2 ] [ 0 ] - b1 if a2 < 0 or a3 < 0 : continue if a2 + b2 != c [ 1 ] [ 1 ] or a2 + b3 != c [ 1 ] [ 2 ] : continue if a3 + b2 != c [ 2 ] [ 1 ] or a3 + b3 != c [ 2 ] [ 2 ] : continue print ( " Yes " ) break else : print ( " No " )
[ a , b , c ] = [ int ( i ) for i in input ( ) . split ( ) ] [ d , e , f ] = [ int ( j ) for j in input ( ) . split ( ) ] [ g , h , i ] = [ int ( k ) for k in input ( ) . split ( ) ] t = 0 if d - a == e - b and e - b == f - c : t + = 1 if g - d == h - e and h - e == i - f : t + = 1 if b - a == e - d and e - d == h - g : t + = 1 if c - b == f - e and f - e == i - h : t + = 1 if t == 4 : print ( " Yes " ) else : print ( " No " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 0 , 2 ) : for j in range ( 0 , 2 ) : if C [ i ] [ j ] + C [ i + 1 ] [ j + 1 ] != C [ i + 1 ] [ j ] + C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) if C [ 0 ] [ 0 ] + C [ 2 ] [ 2 ] != C [ 0 ] [ 2 ] + C [ 2 ] [ 0 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] Y = [ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] , c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ] T = [ c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] , c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ] flg = 0 for i in range ( 1 , 3 ) : if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) != Y [ 0 ] or ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) != Y [ 1 ] : flg = 1 break if flg < 1 : for i in range ( 1 , 3 ) : if ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) != T [ 0 ] or ( c [ 2 ] [ i ] - c [ 1 ] [ i ] ) != T [ 1 ] : print ( " T " , i ) flg = 1 break print ( [ " Yes " , " No " ] [ flg ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != c [ i ] [ ( j + 1 ) % 3 ] + c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
x = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ax = x [ 0 ] [ 1 ] - x [ 0 ] [ 0 ] bx = x [ 0 ] [ 2 ] - x [ 0 ] [ 1 ] for i in range ( 3 ) : if ax != x [ i ] [ 1 ] - x [ i ] [ 0 ] or bx != x [ i ] [ 2 ] - x [ i ] [ 1 ] : print ( " No " ) break else : ay = x [ 1 ] [ 0 ] - x [ 0 ] [ 0 ] by = x [ 2 ] [ 0 ] - x [ 1 ] [ 0 ] for i in range ( 3 ) : if ay != x [ 1 ] [ i ] - x [ 0 ] [ i ] or by != x [ 2 ] [ i ] - x [ 1 ] [ i ] : print ( " No " ) break else : print ( " Yes " )
c1 = [ int ( elem ) for elem in input ( ) . split ( ) ] c2 = [ int ( elem ) for elem in input ( ) . split ( ) ] c3 = [ int ( elem ) for elem in input ( ) . split ( ) ] x1 = c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] x2 = c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] x3 = c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] x4 = c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] x5 = c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] x6 = c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] if x1 and x2 and x3 and x4 and x5 and x6 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 flag = c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 print ( ' Yes ' if flag else ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] \ and C [ 0 ] [ 2 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 1 ] \ and C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] \ and C [ 2 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 1 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] and \ c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ i [ 0 ] for i in c ] if len ( set ( [ i - j [ 1 ] for i , j in zip ( b , c ) ] ) ) == 1 and len ( set ( [ i - j [ 2 ] for i , j in zip ( b , c ) ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
numbertable = [ ] for i in range ( 0 , 3 ) : numbertable . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : if numbertable [ i ] [ j ] + numbertable [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] != numbertable [ i ] [ ( j + 1 ) % 3 ] + numbertable [ ( i + 1 ) % 3 ] [ j ] : flag = False break if not flag : break if flag : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] match = True for i in range ( 2 ) : d1 = grid [ 0 ] [ i + 1 ] - grid [ 0 ] [ i ] d2 = grid [ 1 ] [ i + 1 ] - grid [ 1 ] [ i ] d3 = grid [ 2 ] [ i + 1 ] - grid [ 2 ] [ i ] if ( d1 != d2 ) or ( d1 != d3 ) : match = False break for i in range ( 2 ) : d1 = grid [ i + 1 ] [ 0 ] - grid [ i ] [ 0 ] d2 = grid [ i + 1 ] [ 1 ] - grid [ i ] [ 1 ] d3 = grid [ i + 1 ] [ 2 ] - grid [ i ] [ 2 ] if ( d1 != d2 ) or ( d1 != d3 ) : match = False break if match : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 f = True if a2 + b2 != c [ 1 ] [ 1 ] : f = False if a2 + b3 != c [ 1 ] [ 2 ] : f = False if a3 + b2 != c [ 2 ] [ 1 ] : f = False if a3 + b3 != c [ 2 ] [ 2 ] : f = False if f : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cmax = 0 for i in c : for j in i : cmax = max ( cmax , j ) ck = 0 for i in range ( - cmax , cmax + 1 ) : a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] if c [ 1 ] [ 1 ] - b [ 1 ] != a [ 1 ] or c [ 1 ] [ 2 ] - b [ 2 ] != a [ 1 ] : continue a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] if a [ 2 ] != c [ 2 ] [ 1 ] - b [ 1 ] or a [ 2 ] != c [ 2 ] [ 2 ] - b [ 2 ] : continue ck = 1 break if ck : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] cii_sum = sum ( [ C [ i ] [ i ] for i in range ( 3 ) ] ) C_sum = sum ( list ( map ( sum , C ) ) ) print ( " Yes " if cii_sum == ( C_sum / 3 ) else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] d1 = [ ] d2 = [ ] for i in range ( 3 ) : d1 . append ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d2 . append ( c [ 2 ] [ i ] - c [ 0 ] [ i ] ) print ( ' Yes ' if ( d1 [ 0 ] == d1 [ 1 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] == d2 [ 2 ] ) else ' No ' )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l1 = [ ] for i in range ( 3 ) : l1 . append ( tuple ( j - min ( l [ i ] ) for j in l [ i ] ) ) if len ( set ( l1 ) ) != 1 : print ( ' No ' ) exit ( ) k = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : k [ j ] [ i ] = l [ i ] [ j ] k1 = [ ] for i in range ( 3 ) : k1 . append ( tuple ( j - min ( k [ i ] ) for j in k [ i ] ) ) if len ( set ( k1 ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ ] import numpy as np for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : ALL = [ ] for j in range ( 3 ) : a = C [ 0 ] [ j ] - C [ i ] [ j ] ALL . append ( a ) if len ( set ( ALL ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c_1_1 , c_1_2 , c_1_3 = map ( int , input ( ) . split ( ) ) c_2_1 , c_2_2 , c_2_3 = map ( int , input ( ) . split ( ) ) c_3_1 , c_3_2 , c_3_3 = map ( int , input ( ) . split ( ) ) ans = " No " for a_1 in range ( 101 ) : b_1 = c_1_1 - a_1 b_2 = c_1_2 - a_1 b_3 = c_1_3 - a_1 for a_2 in range ( 101 ) : if c_2_1 != a_2 + b_1 : continue if c_2_2 != a_2 + b_2 : continue if c_2_3 != a_2 + b_3 : continue for a_3 in range ( 101 ) : if c_3_1 != a_3 + b_1 : continue if c_3_2 != a_3 + b_2 : continue if c_3_3 != a_3 + b_3 : continue ans = " Yes " break if ans == " Yes " : break if ans == " Yes " : break print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] and \ c2 [ 0 ] - c3 [ 0 ] == c2 [ 1 ] - c3 [ 1 ] == c2 [ 2 ] - c3 [ 2 ] : print ( " Yes " ) else : print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c4 - c1 == c5 - c2 == c6 - c3 and c7 - c1 == c8 - c2 == c9 - c3 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff0 = [ x - y for x , y in zip ( c [ 0 ] , c [ 1 ] ) ] diff1 = [ x - y for x , y in zip ( c [ 0 ] , c [ 2 ] ) ] if diff0 [ 0 ] == diff0 [ 1 ] and diff0 [ 0 ] == diff0 [ 2 ] and diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 0 ] == diff1 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if ( c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] and c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] and c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] and c2 [ 1 ] - c2 [ 0 ] == c1 [ 1 ] - c1 [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * 3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ' ' for _ in range ( 3 ) ] c [ 0 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 1 ] = list ( map ( int , input ( ) . split ( ) ) ) c [ 2 ] = list ( map ( int , input ( ) . split ( ) ) ) ans = ' Yes ' for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] != c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] : ans = ' No ' break else : continue break print ( ans )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] R1 = [ A [ i ] [ 1 ] - A [ i ] [ 0 ] for i in range ( 3 ) ] R2 = [ A [ i ] [ 2 ] - A [ i ] [ 1 ] for i in range ( 3 ) ] C1 = [ A [ 1 ] [ i ] - A [ 0 ] [ i ] for i in range ( 3 ) ] C2 = [ A [ 2 ] [ i ] - A [ 1 ] [ i ] for i in range ( 3 ) ] ok = True for x in [ R1 , R2 , C1 , C2 ] : if len ( set ( x ) ) != 1 : ok = False break if not ok : print ( ' No ' ) else : print ( ' Yes ' )
import sys C = [ 0 for _ in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 2 ) : for j in range ( 2 ) : if C [ i ] [ j ] - C [ i ] [ j + 1 ] == C [ i + 1 ] [ j ] - C [ i + 1 ] [ j + 1 ] and \ C [ j ] [ i ] - C [ j + 1 ] [ i ] == C [ j ] [ i + 1 ] - C [ j + 1 ] [ i + 1 ] : continue else : print ( " No " ) sys . exit ( ) print ( " Yes " )
l = [ [ ] for _ in range ( 3 ) ] for i in range ( 0 , 3 ) : l [ i ] = [ int ( _ ) for _ in input ( ) . split ( ) ] t = [ 0 , 0 , 0 ] for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : t [ i ] += l [ j ] [ i ] p = ( t [ 0 ] - t [ 1 ] ) / 3 q = ( t [ 0 ] - t [ 2 ] ) / 3 if l [ 0 ] [ 0 ] - p == l [ 0 ] [ 1 ] and l [ 0 ] [ 0 ] - q == l [ 0 ] [ 2 ] and l [ 1 ] [ 0 ] - p == l [ 1 ] [ 1 ] and l [ 1 ] [ 0 ] - q == l [ 1 ] [ 2 ] and l [ 2 ] [ 0 ] - p == l [ 2 ] [ 1 ] and l [ 2 ] [ 0 ] - q == l [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and \ c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] and \ c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and \ c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) A = [ ] B = [ ] for i in range ( 3 ) : A . append ( sum ( C [ i ] ) ) B . append ( C [ 0 ] [ i ] + C [ 1 ] [ i ] + C [ 2 ] [ i ] ) if ( A [ 0 ] - A [ 1 ] ) % 3 == 0 and ( A [ 1 ] - A [ 2 ] ) % 3 == 0 and ( A [ 2 ] - A [ 0 ] ) % 3 == 0 : if ( B [ 0 ] - B [ 1 ] ) % 3 == 0 and ( B [ 1 ] - B [ 2 ] ) % 3 == 0 and ( B [ 2 ] - B [ 0 ] ) % 3 == 0 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
nums_ary = [ [ 0 for i in range ( 3 ) ] for i in range ( 3 ) ] check_ary = [ [ 0 for i in range ( 3 ) ] for i in range ( 2 ) ] good = True for i in range ( 3 ) : nums_ary [ i ] = list ( map ( int , input ( ) . split ( ) ) ) check_ary [ 0 ] [ 0 ] = 0 for x in range ( 3 ) : check_ary [ 1 ] [ x ] = nums_ary [ 0 ] [ x ] - check_ary [ 0 ] [ 0 ] for y in range ( 3 ) : check_ary [ 0 ] [ y ] = nums_ary [ y ] [ 0 ] - check_ary [ 1 ] [ 0 ] for x in range ( 3 ) : for y in range ( 3 ) : if not check_ary [ 0 ] [ x ] + check_ary [ 1 ] [ y ] == nums_ary [ x ] [ y ] : good = False if good : print ( " Yes " ) else : print ( " No " )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) d = [ 0 ] * 3 e = d for i in range ( 3 ) : d [ i ] = a [ i ] - b [ i ] e [ i ] = b [ i ] - c [ i ] f = [ a [ 0 ] - a [ 1 ] , b [ 0 ] - b [ 1 ] , c [ 0 ] - c [ 1 ] ] g = [ a [ 1 ] - a [ 2 ] , b [ 1 ] - b [ 2 ] , c [ 1 ] - c [ 2 ] ] d = len ( set ( d ) ) ; e = len ( set ( e ) ) ; f = len ( set ( f ) ) ; g = len ( set ( g ) ) if d == 1 and e == 1 and f == 1 and g == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = list ( map ( int , input ( ) . split ( ) ) ) diffa = c [ 1 ] - c [ 0 ] diffb = c [ 2 ] - c [ 1 ] c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) c = list ( map ( int , input ( ) . split ( ) ) ) if ( diffa != ( c [ 1 ] - c [ 0 ] ) or diffb != ( c [ 2 ] - c [ 1 ] ) ) : print ( " No " ) sys . exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = [ c1 , c2 , c3 ] f = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if a1 + b1 == C [ 0 ] [ 0 ] and a1 + b2 == C [ 0 ] [ 1 ] and a1 + b3 == C [ 0 ] [ 2 ] and a2 + b1 == C [ 1 ] [ 0 ] and a2 + b2 == C [ 1 ] [ 1 ] and a2 + b3 == C [ 1 ] [ 2 ] and a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] and a3 + b3 == C [ 2 ] [ 2 ] : f = True break if f == True : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] and c3 [ 0 ] - c1 [ 0 ] == c3 [ 1 ] - c1 [ 1 ] and c3 [ 1 ] - c1 [ 1 ] == c3 [ 2 ] - c1 [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
C = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) cnt = 0 if C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] : cnt + = 1 if C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 2 ] [ 0 ] - C [ 0 ] [ 0 ] == C [ 2 ] [ 1 ] - C [ 0 ] [ 1 ] == C [ 2 ] [ 2 ] - C [ 0 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : cnt + = 1 if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : cnt + = 1 if C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] : cnt + = 1 if cnt == 6 : print ( ' Yes ' ) else : print ( ' No ' )
def resolve ( ) : c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) return " No " print ( " Yes " ) return " Yes " if __name__ == " __main__ " : resolve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = False ans = " Yes " for i in range ( 3 ) : if flag : break for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " flag = True break print ( ans )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] != C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] : flag = False break elif C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] != C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : flag = False break if flag : for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] != C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] : flag = False break elif C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] != C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
L1 = list ( map ( int , input ( ) . split ( ) ) ) L2 = list ( map ( int , input ( ) . split ( ) ) ) L3 = list ( map ( int , input ( ) . split ( ) ) ) a1 = 0 b1 = L1 [ 0 ] b2 = L1 [ 1 ] b3 = L1 [ 2 ] a2 = L2 [ 1 ] - b2 a3 = L3 [ 2 ] - b3 if a1 + b1 == L1 [ 0 ] and a1 + b2 == L1 [ 1 ] and a1 + b3 == L1 [ 2 ] and a2 + b1 == L2 [ 0 ] and a2 + b2 == L2 [ 1 ] and a2 + b3 == L2 [ 2 ] and a3 + b1 == L3 [ 0 ] and a3 + b2 == L3 [ 1 ] and a3 + b3 == L3 [ 2 ] : print ( " Yes " ) else : print ( " No " )
* C , = map ( int , open ( 0 ) . read ( ) . split ( ) ) a1 = 0 a2 = C [ 3 ] - C [ 0 ] a3 = C [ 6 ] - C [ 0 ] b1 = C [ 0 ] b2 = C [ 1 ] b3 = C [ 2 ] A = [ a1 , a2 , a3 ] B = [ b1 , b2 , b3 ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i * 3 + j ] != A [ i ] + B [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c1 = list ( map ( int , input ( ) . split ( ' ' ) ) ) c2 = list ( map ( int , input ( ) . split ( ' ' ) ) ) c3 = list ( map ( int , input ( ) . split ( ' ' ) ) ) check_b12 = c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] check_b13 = c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] check_a12 = c1 [ 0 ] - c1 [ 1 ] == c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] check_a13 = c1 [ 0 ] - c1 [ 2 ] == c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] if check_a12 and check_a13 and check_b12 and check_b13 : print ( ' Yes ' ) else : print ( ' No ' )
grid = [ ] al = 0 cnt = 0 for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) al += sum ( a ) cnt += a [ i ] grid . append ( a ) if al == cnt * 3 : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( - 100 , 101 ) : b = [ c - a1 for c in C [ 0 ] ] for a2 in range ( - 100 , 101 ) : if b != [ c - a2 for c in C [ 1 ] ] : continue for a3 in range ( - 100 , 101 ) : if b == [ c - a3 for c in C [ 2 ] ] : print ( ' Yes ' ) quit ( ) print ( ' No ' )
li = [ ] flag = True for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) li . append ( c ) sum = li [ 0 ] [ 0 ] + li [ 1 ] [ 1 ] + li [ 2 ] [ 2 ] for i in range ( 3 ) : for j in range ( 3 ) : if li [ i ] [ j ] != sum - li [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] - li [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( min ( c [ 0 ] + [ 100 ] ) + 1 ) : for a2 in range ( min ( c [ 1 ] + [ 100 ] ) + 1 ) : for a3 in range ( min ( c [ 2 ] + [ 100 ] ) + 1 ) : x1 = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] x2 = [ c [ 1 ] [ 0 ] - a2 , c [ 1 ] [ 1 ] - a2 , c [ 1 ] [ 2 ] - a2 ] x3 = [ c [ 2 ] [ 0 ] - a3 , c [ 2 ] [ 1 ] - a3 , c [ 2 ] [ 2 ] - a3 ] if x1 == x2 == x3 : print ( " Yes " ) sys . exit ( ) print ( " No " )
tbl = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( 3 ) ] for a1 in range ( 100 ) : B = [ tbl [ 0 ] [ i ] - a1 for i in range ( 3 ) ] A = [ a1 , tbl [ 1 ] [ 0 ] - B [ 0 ] , tbl [ 2 ] [ 0 ] - B [ 0 ] ] flg = True for i in range ( 3 ) : for j in range ( 3 ) : if tbl [ i ] [ j ] != A [ i ] + B [ j ] : flg = False break if not flg : break if flg : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import math import calendar import fractions import itertools c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) for j in range ( 3 ) : c [ i ] [ j ] = a [ j ] x = min ( c [ 0 ] ) y = min ( c [ 1 ] ) z = min ( c [ 2 ] ) ans = 0 for a1 in range ( x + 1 ) : for a2 in range ( y + 1 ) : for a3 in range ( z + 1 ) : if a1 - c [ 0 ] [ 0 ] == a2 - c [ 1 ] [ 0 ] == a3 - c [ 2 ] [ 0 ] and a1 - c [ 0 ] [ 1 ] == a2 - c [ 1 ] [ 1 ] == a3 - c [ 2 ] [ 1 ] and a1 - c [ 0 ] [ 2 ] == a2 - c [ 1 ] [ 2 ] == a3 - c [ 2 ] [ 2 ] : ans = 1 break if ans == 1 : break if ans == 1 : break if ans == 1 : print ( " Yes " ) else : print ( " No " )
def main ( ) : l = list ( ) for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , l [ 0 ] [ 0 ] + 1 ) : b1 = l [ 0 ] [ 0 ] - a1 b2 = l [ 0 ] [ 1 ] - a1 b3 = l [ 0 ] [ 2 ] - a1 a2 = l [ 1 ] [ 0 ] - b1 a3 = l [ 2 ] [ 0 ] - b1 if b1 < 0 : continue if b2 < 0 : continue if b3 < 0 : continue if a2 < 0 : continue if a3 < 0 : continue if ( l [ 1 ] [ 1 ] == b2 + a2 and l [ 1 ] [ 2 ] == b3 + a2 and l [ 2 ] [ 1 ] == b2 + a3 and l [ 2 ] [ 2 ] == b3 + a3 ) : print ( " Yes " ) return print ( " No " ) if __name__ == " __main__ " : main ( )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) b = c [ 0 ] a1 = [ 0 ] * 3 a2 = c [ 1 ] - b a3 = c [ 2 ] - b if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
A = [ ] for i in range ( 3 ) : B = list ( map ( int , input ( ) . split ( ) ) ) A . append ( B ) if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] != A [ 0 ] [ 1 ] - A [ 1 ] [ 1 ] : print ( ' No ' ) exit ( 0 ) if A [ 0 ] [ 0 ] - A [ 1 ] [ 0 ] != A [ 0 ] [ 2 ] - A [ 1 ] [ 2 ] : print ( ' No ' ) exit ( 0 ) if A [ 1 ] [ 0 ] - A [ 2 ] [ 0 ] != A [ 1 ] [ 1 ] - A [ 2 ] [ 1 ] : print ( ' No ' ) exit ( 0 ) if A [ 1 ] [ 0 ] - A [ 2 ] [ 0 ] != A [ 1 ] [ 2 ] - A [ 2 ] [ 2 ] : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
nl = lambda : list ( map ( int , input ( ) . split ( ) ) ) sl = lambda : input ( ) . split ( ) n = lambda : int ( input ( ) ) s = lambda : input ( ) import sys C = [ nl ( ) , nl ( ) , nl ( ) ] d1 = C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] d2 = C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] d3 = C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] if d1 != d2 or d2 != d3 : print ( ' No ' ) sys . exit ( ) d4 = C [ 0 ] [ 0 ] - C [ 0 ] [ 2 ] d5 = C [ 1 ] [ 0 ] - C [ 1 ] [ 2 ] d6 = C [ 2 ] [ 0 ] - C [ 2 ] [ 2 ] if d4 != d5 or d5 != d6 : print ( ' No ' ) sys . exit ( ) e1 = C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] e2 = C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] e3 = C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] if e1 != e2 or e2 != e3 : print ( ' No ' ) sys . exit ( ) e4 = C [ 0 ] [ 0 ] - C [ 2 ] [ 0 ] e5 = C [ 0 ] [ 1 ] - C [ 2 ] [ 1 ] e6 = C [ 0 ] [ 2 ] - C [ 2 ] [ 2 ] if e4 != e5 or e5 != e6 : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] flag = True for i in range ( 1 , 3 ) : if not ( c [ i ] [ 0 ] - c [ 0 ] [ 0 ] == c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == c [ i ] [ 2 ] - c [ 0 ] [ 2 ] ) : flag = False if not ( c [ 0 ] [ i ] - c [ 0 ] [ 0 ] == c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == c [ 2 ] [ i ] - c [ 2 ] [ 0 ] ) : flag = False if flag : print ( " Yes " ) else : print ( " No " )
from itertools import product as p c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ - 1 ] * 3 a [ 0 ] = 0 b = c [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , j in p ( range ( 3 ) , range ( 3 ) ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( ' No ' ) break else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ok = True lis = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] d = [ [ c [ l [ 0 ] ] [ i ] - c [ l [ 1 ] ] [ i ] for i in range ( 3 ) ] for l in lis ] e = [ [ c [ i ] [ l [ 0 ] ] - c [ i ] [ l [ 1 ] ] for i in range ( 3 ) ] for l in lis ] for i in range ( 3 ) : if d [ i ] . count ( d [ i ] [ 0 ] ) != 3 : ok = False if e [ i ] . count ( e [ i ] [ 0 ] ) != 3 : ok = False if ok : print ( ' Yes ' ) else : print ( ' No ' )
p = [ ] for i in range ( 3 ) : p . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( p [ 0 ] [ 0 ] - p [ 0 ] [ 1 ] == p [ 1 ] [ 0 ] - p [ 1 ] [ 1 ] == p [ 2 ] [ 0 ] - p [ 2 ] [ 1 ] and p [ 0 ] [ 1 ] - p [ 0 ] [ 2 ] == p [ 1 ] [ 1 ] - p [ 1 ] [ 2 ] == p [ 2 ] [ 1 ] - p [ 2 ] [ 2 ] and p [ 0 ] [ 2 ] - p [ 0 ] [ 0 ] == p [ 1 ] [ 2 ] - p [ 1 ] [ 0 ] == p [ 2 ] [ 2 ] - p [ 2 ] [ 0 ] and p [ 0 ] [ 0 ] - p [ 1 ] [ 0 ] == p [ 0 ] [ 1 ] - p [ 1 ] [ 1 ] == p [ 0 ] [ 2 ] - p [ 1 ] [ 2 ] and p [ 1 ] [ 0 ] - p [ 2 ] [ 0 ] == p [ 1 ] [ 1 ] - p [ 2 ] [ 1 ] == p [ 1 ] [ 2 ] - p [ 2 ] [ 2 ] and p [ 2 ] [ 0 ] - p [ 0 ] [ 0 ] == p [ 2 ] [ 1 ] - p [ 0 ] [ 1 ] == p [ 2 ] [ 2 ] - p [ 0 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
listA = [ ] list_number = [ ] for i in range ( 3 ) : list_number . append ( list ( map ( int , input ( ) . split ( ) ) ) ) listA . append ( [ min ( list_number [ 0 ] ) , min ( list_number [ 1 ] ) , min ( list_number [ 2 ] ) ] ) b1 = min ( list_number [ 0 ] [ 0 ] , list_number [ 1 ] [ 0 ] , list_number [ 2 ] [ 0 ] ) b2 = min ( list_number [ 0 ] [ 1 ] , list_number [ 1 ] [ 1 ] , list_number [ 2 ] [ 1 ] ) b3 = min ( list_number [ 0 ] [ 2 ] , list_number [ 1 ] [ 2 ] , list_number [ 2 ] [ 2 ] ) listA . append ( [ b1 , b2 , b3 ] ) for i in range ( 3 ) : list_number [ i ] = list ( map ( lambda x : x - listA [ 0 ] [ i ] , list_number [ i ] ) ) for j in range ( 3 ) : B = set ( [ list_number [ 0 ] [ j ] , list_number [ 1 ] [ j ] , list_number [ 2 ] [ j ] ] ) if len ( B ) == 1 : pass else : print ( " No " ) exit ( ) print ( " Yes " )
C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) : D = [ 0 ] * 3 for j in range ( 3 ) : D [ j ] = C [ i ] [ j ] - C [ i - 1 ] [ j ] if D [ 0 ] != D [ 1 ] or D [ 1 ] != D [ 2 ] or D [ 2 ] != D [ 0 ] : print ( ' No ' ) exit ( ) for i in range ( 3 ) : D = [ 0 ] * 3 for j in range ( 3 ) : D [ j ] = C [ j ] [ i ] - C [ j ] [ i - 1 ] if D [ 0 ] != D [ 1 ] or D [ 1 ] != D [ 2 ] or D [ 2 ] != D [ 0 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] result = True perm = ( ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) ) for p in perm : x0 = c [ p [ 0 ] ] [ 0 ] - c [ p [ 1 ] ] [ 0 ] x1 = c [ p [ 0 ] ] [ 1 ] - c [ p [ 1 ] ] [ 1 ] x2 = c [ p [ 0 ] ] [ 2 ] - c [ p [ 1 ] ] [ 2 ] if not ( x0 == x1 and x1 == x2 ) : result = False break y0 = c [ 0 ] [ p [ 0 ] ] - c [ 0 ] [ p [ 1 ] ] y1 = c [ 1 ] [ p [ 0 ] ] - c [ 1 ] [ p [ 1 ] ] y2 = c [ 2 ] [ p [ 0 ] ] - c [ 2 ] [ p [ 1 ] ] if not ( y0 == y1 and y1 == y2 ) : result = False break if result : print ( ' Yes ' ) else : print ( ' No ' )
import sys lis_a = [ 0 ] * 3 for i in range ( 3 ) : lis_a [ i ] = list ( map ( int , input ( ) . split ( ) ) ) b = [ 0 ] * 3 for i in range ( min ( lis_a [ 0 ] ) + 1 ) : a_1 = i for k in range ( 3 ) : b [ k ] = lis_a [ 0 ] [ k ] - a_1 a_2 = lis_a [ 1 ] [ 0 ] - b [ 0 ] a_3 = lis_a [ 2 ] [ 0 ] - b [ 0 ] a = [ a_1 , a_2 , a_3 ] for l in range ( 3 ) : for m in range ( 3 ) : if a [ l ] + b [ m ] != lis_a [ l ] [ m ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
import sys input = sys . stdin . readline sys . setrecursionlimit ( 10 ** 7 ) c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 for a2 in range ( 0 , 101 ) : if not ( b1 == ( c [ 1 ] [ 0 ] - a2 ) and b2 == ( c [ 1 ] [ 1 ] - a2 ) and b3 == ( c [ 1 ] [ 2 ] - a2 ) ) : continue for a3 in range ( 0 , 101 ) : if ( b1 == ( c [ 2 ] [ 0 ] - a3 ) and b2 == ( c [ 2 ] [ 1 ] - a3 ) and b3 == ( c [ 2 ] [ 2 ] - a3 ) ) : print ( ' Yes ' ) sys . exit ( 0 ) print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) f = 0 for a1 in range ( min ( c1 ) + 1 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a2_1 = c2 [ 0 ] - b1 a2_2 = c2 [ 1 ] - b2 a2_3 = c2 [ 2 ] - b3 if not ( a2_1 == a2_2 and a2_2 == a2_3 ) : continue a3_1 = c3 [ 0 ] - b1 a3_2 = c3 [ 1 ] - b2 a3_3 = c3 [ 2 ] - b3 if not ( a3_1 == a3_2 and a3_2 == a3_3 ) : continue print ( " Yes " ) f = 1 break if not f : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] e = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] f = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] if any ( e != c [ x ] [ 1 ] - c [ x ] [ 0 ] for x in [ 1 , 2 ] ) or any ( f != c [ x ] [ 2 ] - c [ x ] [ 1 ] for x in [ 1 , 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
List = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] newlist = [ ] new = [ x - y for ( x , y ) in zip ( List [ 0 ] , List [ 1 ] ) ] new2 = [ x - y for ( x , y ) in zip ( List [ 2 ] , List [ 1 ] ) ] if new [ 0 ] == new [ 1 ] and new [ 1 ] == new [ 2 ] : pass else : print ( ' No ' ) exit ( ) if new2 [ 0 ] == new2 [ 1 ] and new2 [ 1 ] == new2 [ 2 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 1 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 1 ] : pass else : print ( ' No ' ) exit ( ) if List [ 0 ] [ 0 ] - List [ 0 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] and List [ 2 ] [ 0 ] - List [ 2 ] [ 2 ] == List [ 1 ] [ 0 ] - List [ 1 ] [ 2 ] : pass else : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = ' No ' for a1 in range ( 100 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : ans = ' Yes ' break print ( ans )
k = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( k [ 0 ] [ 0 ] - a1 ) == ( k [ 0 ] [ 1 ] - a2 ) == ( k [ 0 ] [ 2 ] - a3 ) : if ( k [ 1 ] [ 0 ] - a1 ) == ( k [ 1 ] [ 1 ] - a2 ) == ( k [ 1 ] [ 2 ] - a3 ) : if ( k [ 2 ] [ 0 ] - a1 ) == ( k [ 2 ] [ 1 ] - a2 ) == ( k [ 2 ] [ 2 ] - a3 ) : if k [ 0 ] [ 0 ] - a1 >= 0 and k [ 0 ] [ 1 ] - a2 >= 0 and k [ 0 ] [ 2 ] - a3 >= 0 : if ( k [ 1 ] [ 0 ] - a1 ) >= 0 and ( k [ 1 ] [ 1 ] - a2 ) >= 0 and ( k [ 1 ] [ 2 ] - a3 ) >= 0 : if ( k [ 2 ] [ 0 ] - a1 ) >= 0 and ( k [ 2 ] [ 1 ] - a2 ) >= 0 and ( k [ 2 ] [ 2 ] - a3 ) >= 0 : print ( " Yes " ) exit ( ) print ( " No " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) d1 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] d2 = C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] + C [ 0 ] [ 2 ] d3 = C [ 2 ] [ 0 ] + C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] if d1 == d2 == d3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
import sys read = sys . stdin . buffer . read input = sys . stdin . buffer . readline inputs = sys . stdin . buffer . readlines def main ( ) : data = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = " Yes " for i in range ( - 1 , 2 , 1 ) : s = set ( ) for j in range ( 3 ) : s . add ( data [ i ] [ j ] - data [ i + 1 ] [ j ] ) if len ( s ) != 1 : ans = " No " for i in range ( - 1 , 2 , 1 ) : s = set ( ) for j in range ( 3 ) : s . add ( data [ j ] [ i ] - data [ j ] [ i + 1 ] ) if len ( s ) != 1 : ans = " No " print ( ans ) if __name__ == " __main__ " : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = set ( ) e = set ( ) f = set ( ) g = set ( ) for i in range ( 3 ) : d . add ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) e . add ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) f . add ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) g . add ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) if len ( d ) == len ( e ) == len ( f ) == len ( g ) == 1 : print ( " Yes " ) else : print ( " No " )
def check ( a , b ) : for i in range ( 3 ) : diffc [ i ] = c [ i ] [ a ] - c [ i ] [ b ] diffr [ i ] = c [ a ] [ i ] - c [ b ] [ i ] if diffc [ 0 ] != diffc [ 1 ] or diffc [ 1 ] != diffc [ 2 ] or diffr [ 0 ] != diffr [ 1 ] or diffr [ 1 ] != diffr [ 2 ] : print ( " No " ) exit ( ) c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] diffr = [ 0 ] * 3 diffc = [ 0 ] * 3 check ( 0 , 1 ) check ( 1 , 2 ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] a . append ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] == c [ i ] [ j ] : continue else : print ( ' No ' ) quit ( ) print ( ' Yes ' )
import sys import itertools import time import math import heapq from collections import defaultdict sys . setrecursionlimit ( 10 ** 7 ) INF = 10 ** 18 MOD = 10 ** 9 + 7 read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 1 , 3 ) : x = C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != x : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : x = C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] for i in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i ] [ j - 1 ] != x : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np def main ( ) : c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) for i in range ( 3 ) : c [ i ] -= min ( c [ i ] ) for i in range ( 3 ) : c [ : , i ] -= min ( c [ : , i ] ) if np . sum ( c ) == 0 : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
apple = [ ] for _ in range ( 3 ) : apple . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = apple [ 0 ] b = apple [ 1 ] c = apple [ 2 ] if a [ 0 ] - a [ 1 ] == b [ 0 ] - b [ 1 ] == c [ 0 ] - c [ 1 ] and a [ 0 ] - a [ 2 ] == b [ 0 ] - b [ 2 ] == c [ 0 ] - c [ 2 ] and a [ 1 ] - a [ 2 ] == b [ 1 ] - b [ 2 ] == c [ 1 ] - c [ 2 ] : if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and a [ 0 ] - c [ 0 ] == a [ 1 ] - c [ 1 ] == a [ 2 ] - c [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
import sys read = sys . stdin . read readlines = sys . stdin . readlines def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( tuple ( map ( int , input ( ) . split ( ) ) ) ) for i1 in range ( 101 ) : for i2 in range ( 101 ) : if i1 - c [ 0 ] [ 0 ] == i2 - c [ 0 ] [ 1 ] : i3 = c [ 0 ] [ 2 ] - ( c [ 0 ] [ 0 ] - i1 ) if i1 - c [ 1 ] [ 0 ] == i2 - c [ 1 ] [ 1 ] == i3 - c [ 1 ] [ 2 ] : if i1 - c [ 2 ] [ 0 ] == i2 - c [ 2 ] [ 1 ] == i3 - c [ 2 ] [ 2 ] : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
def main ( ) : a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( a [ 1 ] [ 0 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 0 ] [ 2 ] ) \ and ( a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] ) \ and ( a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] ) \ and ( a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] ) \ and ( a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ) \ and ( a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] ) : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ [ int ( cn ) for cn in input ( ) . split ( ) ] for _ in range ( 3 ) ] max_val = max ( c [ 0 ] ) ans = ' No ' for a1 in range ( max_val + 1 ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] correct = True for i in range ( 2 ) : ai_cand = [ ] for j in range ( 3 ) : cand = c [ i + 1 ] [ j ] - b [ j ] correct = cand >= 0 if correct : ai_cand . append ( cand ) else : break if correct : correct = ai_cand [ 0 ] == ai_cand [ 1 ] and ai_cand [ 1 ] == ai_cand [ 2 ] if not correct : break else : break if correct : ans = ' Yes ' break print ( ans )
l = [ ] l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if l [ i ] [ 1 ] - l [ i ] [ 0 ] != l [ i + 1 ] [ 1 ] - l [ i + 1 ] [ 0 ] or l [ i ] [ 2 ] - l [ i ] [ 1 ] != l [ i + 1 ] [ 2 ] - l [ i + 1 ] [ 1 ] : print ( ' No ' ) break if i == 1 : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( " No " ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( " No " ) break else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] q1 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] q2 = c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] q3 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] q4 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] print ( " Yes " if q1 and q2 and q3 and q4 else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 , b2 , b3 = c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 check = [ ] check . append ( c [ 1 ] [ 1 ] == a2 + b2 ) check . append ( c [ 2 ] [ 1 ] == a3 + b2 ) check . append ( c [ 1 ] [ 2 ] == a2 + b3 ) check . append ( c [ 2 ] [ 2 ] == a3 + b3 ) if sum ( check ) == 4 : print ( " Yes " ) else : print ( " No " )
import copy def solve ( ) : c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) for a1 in range ( 0 , 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 if a2 != c [ 1 ] [ 1 ] - b2 or a2 != c [ 1 ] [ 2 ] - b3 : continue a3 = c [ 2 ] [ 0 ] - b1 if a3 != c [ 2 ] [ 1 ] - b2 or a3 != c [ 2 ] [ 2 ] - b3 : continue print ( ' Yes ' ) break else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
import sys import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for ii in range ( 3 ) ] a = np . empty ( 3 ) b = np . empty ( 3 ) c_n = np . array ( c ) for a1 in range ( 101 ) : a [ 0 ] = a1 b = c_n [ 0 , : ] - a1 a [ 1 : ] = c_n [ 1 : , 0 ] - b [ 0 ] if a . min ( ) < 0 or b . min ( ) < 0 : continue ab = a . reshape ( 3 , 1 ) + b . reshape ( 1 , 3 ) if np . all ( c_n == ab ) : print ( " Yes " ) break else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : print ( ' Yes ' ) exit ( ) print ( ' No ' )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] C = [ 0 , 0 , 0 ] for j in range ( 3 ) : for i in range ( 3 ) : C [ j ] += A [ i ] [ j ] R = [ 0 , 0 , 0 ] for i in range ( 3 ) : for j in range ( 3 ) : R [ i ] += A [ i ] [ j ] if ( C [ 0 ] - C [ 1 ] ) % 3 == 0 and ( C [ 1 ] - C [ 2 ] ) % 3 == 0 and ( R [ 0 ] - R [ 1 ] ) % 3 == 0 and ( R [ 1 ] - R [ 2 ] ) % 3 == 0 : print ( " Yes " ) else : print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ans = ' Yes ' for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] : if c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] : if c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] == c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] : if c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) exit ( ) print ( " No " )
c_1 = list ( map ( int , input ( ) . split ( ) ) ) c_2 = list ( map ( int , input ( ) . split ( ) ) ) c_3 = list ( map ( int , input ( ) . split ( ) ) ) c = c_1 + c_2 + c_3 if sum ( c ) == 3 * ( c_1 [ 0 ] + c_2 [ 1 ] + c_3 [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
C = [ ] for i in range ( 3 ) : Cs = list ( map ( int , input ( ) . split ( ) ) ) C . append ( Cs ) As = [ 0 ] * 3 Bs = [ 0 ] * 3 As [ 0 ] = 0 Bs [ 0 ] = C [ 0 ] [ 0 ] - As [ 0 ] for i in range ( 3 ) : As [ i ] = C [ i ] [ 0 ] - Bs [ 0 ] for j in range ( 3 ) : Bs [ j ] = C [ 0 ] [ j ] - As [ 0 ] ok = True for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != As [ i ] + Bs [ j ] : ok = False if ok : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] cii_sum = sum ( [ C [ i ] [ i ] for i in range ( 3 ) ] ) C_sum = sum ( list ( map ( sum , C ) ) ) print ( " Yes " if cii_sum == ( C_sum / 3 ) else " No " )
c = [ tuple ( map ( int , input ( ) . split ( ' ' ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2_1 = c [ 1 ] [ 0 ] - b1 a2_2 = c [ 1 ] [ 1 ] - b2 a2_3 = c [ 1 ] [ 2 ] - b3 a3_1 = c [ 2 ] [ 0 ] - b1 a3_2 = c [ 2 ] [ 1 ] - b2 a3_3 = c [ 2 ] [ 2 ] - b3 if a2_1 == a2_2 == a2_3 and a3_1 == a3_2 == a3_3 : print ( ' Yes ' ) break else : print ( ' No ' )
c = list ( list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ) for b1 in range ( 101 ) : a = [ ] b = [ ] a1 = c [ 0 ] [ 0 ] - b1 if a1 < 0 : break a . append ( a1 ) b . append ( b1 ) for b2 in range ( 101 ) : a2 = c [ 1 ] [ 1 ] - b2 if a2 < 0 : break a . append ( a2 ) b . append ( b2 ) for b3 in range ( 101 ) : a3 = c [ 2 ] [ 2 ] - b3 if a3 < 0 : break a . append ( a3 ) b . append ( b3 ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : break if i == 2 and j == 2 : print ( " Yes " ) exit ( ) if a [ j ] + b [ i ] != c [ i ] [ j ] : break b . pop ( ) a . pop ( ) a . pop ( ) b . pop ( ) print ( " No " )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( 0 , min ( [ c11 , c12 , c13 ] ) + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans ) if __name__ == ' __main__ ' : main ( )
import itertools c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = True for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ 0 ] [ a ] - c [ 0 ] [ b ] for j in range ( 1 , 3 ) : if x != c [ j ] [ a ] - c [ j ] [ b ] : ans = False for a , b in itertools . combinations ( range ( 3 ) , 2 ) : x = c [ a ] [ 0 ] - c [ b ] [ 0 ] for j in range ( 1 , 3 ) : if x != c [ a ] [ j ] - c [ b ] [ j ] : ans = False if ans : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] b = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] a . append ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( c [ 2 ] [ 0 ] - b [ 0 ] ) ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : continue else : ans = " No " print ( ans )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = C [ 0 ] [ 0 ] - a1 == C [ 1 ] [ 0 ] - a2 == C [ 2 ] [ 0 ] - a3 b2 = C [ 0 ] [ 1 ] - a1 == C [ 1 ] [ 1 ] - a2 == C [ 2 ] [ 1 ] - a3 b3 = C [ 0 ] [ 2 ] - a1 == C [ 1 ] [ 2 ] - a2 == C [ 2 ] [ 2 ] - a3 if b1 and b2 and b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys def input ( ) : return sys . stdin . readline ( ) [ : - 1 ] def mi ( ) : return map ( int , input ( ) . split ( ) ) def ii ( ) : return int ( input ( ) ) def main ( ) : c = [ list ( mi ( ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] \ and c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] \ and c [ 2 ] [ 2 ] + c [ 0 ] [ 0 ] == c [ 2 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) a2_a1 = c2 [ 0 ] - c1 [ 0 ] a3_a2 = c3 [ 0 ] - c2 [ 0 ] a1_a3 = c1 [ 0 ] - c3 [ 0 ] b2_b1 = c1 [ 1 ] - c1 [ 0 ] b3_b2 = c1 [ 2 ] - c1 [ 1 ] b1_b3 = c1 [ 0 ] - c1 [ 2 ] if a2_a1 != c2 [ 1 ] - c1 [ 1 ] or a2_a1 != c2 [ 2 ] - c1 [ 2 ] : print ( " No " ) elif a3_a2 != c3 [ 1 ] - c2 [ 1 ] or a3_a2 != c3 [ 2 ] - c2 [ 2 ] : print ( " No " ) elif a1_a3 != c1 [ 1 ] - c3 [ 1 ] or a1_a3 != c1 [ 2 ] - c3 [ 2 ] : print ( " No " ) elif b2_b1 != c2 [ 1 ] - c2 [ 0 ] or b2_b1 != c3 [ 1 ] - c3 [ 0 ] : print ( " No " ) elif b3_b2 != c2 [ 2 ] - c2 [ 1 ] or b3_b2 != c3 [ 2 ] - c3 [ 1 ] : print ( " No " ) elif b1_b3 != c2 [ 0 ] - c2 [ 2 ] or b1_b3 != c3 [ 0 ] - c3 [ 2 ] : print ( " No " ) else : print ( " Yes " )
import numpy as np c = [ [ 0 ] * 3 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) c = np . array ( c ) if len ( set ( c [ 0 ] - c [ 1 ] ) ) == 1 and len ( set ( c [ 1 ] - c [ 2 ] ) ) == 1 and len ( set ( c [ : , 0 ] - c [ : , 1 ] ) ) == 1 and len ( set ( c [ : , 1 ] - c [ : , 2 ] ) ) == 1 : print ( " Yes " ) else : print ( " No " )
Data = [ ] def yoko ( a , b ) : x1 = Data [ a ] [ 0 ] - Data [ b ] [ 0 ] x2 = Data [ a ] [ 1 ] - Data [ b ] [ 1 ] x3 = Data [ a ] [ 2 ] - Data [ b ] [ 2 ] if x1 == x2 and x2 == x3 : return 1 else : return 0 def tate ( a , b ) : x1 = Data [ 0 ] [ a ] - Data [ 0 ] [ b ] x2 = Data [ 1 ] [ a ] - Data [ 1 ] [ b ] x3 = Data [ 2 ] [ a ] - Data [ 2 ] [ b ] if x1 == x2 and x2 == x3 : return 1 else : return 0 for i in range ( 3 ) : data = list ( map ( int , input ( ) . split ( ) ) ) Data . append ( data ) ans = 1 ans &= yoko ( 0 , 1 ) ans &= yoko ( 1 , 2 ) ans &= yoko ( 2 , 1 ) ans &= tate ( 0 , 1 ) ans &= tate ( 1 , 2 ) ans &= tate ( 2 , 1 ) if ans == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import sys a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 1 ] - a [ 0 ] == b [ 1 ] - b [ 0 ] == c [ 1 ] - c [ 0 ] : if a [ 1 ] - a [ 2 ] == b [ 1 ] - b [ 2 ] == c [ 1 ] - c [ 2 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
import sys IS = lambda : sys . stdin . readline ( ) . rstrip ( ) II = lambda : int ( IS ( ) ) MII = lambda : list ( map ( int , IS ( ) . split ( ) ) ) MIIZ = lambda : list ( map ( lambda x : x - 1 , MII ( ) ) ) def main ( ) : cc = [ MII ( ) for _ in range ( 3 ) ] flag = True for i in range ( 2 ) : if cc [ i ] [ 0 ] - cc [ i + 1 ] [ 0 ] != cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] : flag = False if cc [ i ] [ 1 ] - cc [ i + 1 ] [ 1 ] != cc [ i ] [ 2 ] - cc [ i + 1 ] [ 2 ] : flag = False if cc [ 0 ] [ i ] - cc [ 0 ] [ i + 1 ] != cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] : flag = False if cc [ 1 ] [ i ] - cc [ 1 ] [ i + 1 ] != cc [ 2 ] [ i ] - cc [ 2 ] [ i + 1 ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) * 3 == ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for __ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] , b [ 1 ] , b [ 2 ] = C [ 0 ] a [ 0 ] , a [ 1 ] , a [ 2 ] = 0 , C [ 1 ] [ 0 ] - b [ 0 ] , C [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : if flag == False : break for j in range ( 3 ) : if C [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) flag = False break if flag == True : print ( " Yes " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 0 , c [ 0 ] [ 0 ] + 1 ) : for a2 in range ( 0 , c [ 1 ] [ 0 ] + 1 ) : for a3 in range ( 0 , c [ 2 ] [ 0 ] + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 1 ] [ 1 ] - a2 b3 = c [ 2 ] [ 2 ] - a3 if a1 + b2 == c [ 0 ] [ 1 ] and a1 + b3 == c [ 0 ] [ 2 ] and a2 + b1 == c [ 1 ] [ 0 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b1 == c [ 2 ] [ 0 ] and a3 + b2 == c [ 2 ] [ 1 ] : print ( " Yes " ) sys . exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] A = [ [ a1 , a1 , a1 ] , [ a2 , a2 , a2 ] , [ a3 , a3 , a3 ] ] B = [ [ b1 , b2 , b3 ] , [ b1 , b2 , b3 ] , [ b1 , b2 , b3 ] ] C = c ans = " Yes " for x in range ( 3 ) : for y in range ( 3 ) : if A [ x ] [ y ] + B [ x ] [ y ] != C [ x ] [ y ] : ans = " No " break print ( ans )
import sys def input ( ) : return sys . stdin . readline ( ) . strip ( ) def main ( ) : C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ C [ 0 ] [ i ] for i in range ( 3 ) ] a = [ C [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] ans = [ [ a [ i ] + b [ j ] for j in range ( 3 ) ] for i in range ( 3 ) ] if ans == C : print ( " Yes " ) else : print ( " No " ) if __name__ == " __main__ " : main ( )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] all = sum ( sum ( grid , [ ] ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i1 in range ( 0 , grid [ 0 ] [ 0 ] + 1 ) : a [ 0 ] = i1 b [ 0 ] = grid [ 0 ] [ 0 ] - i1 for j2 in range ( 0 , grid [ 1 ] [ 1 ] + 1 ) : a [ 1 ] = j2 b [ 1 ] = grid [ 1 ] [ 1 ] - j2 for k3 in range ( 0 , grid [ 2 ] [ 2 ] + 1 ) : a [ 2 ] = k3 b [ 2 ] = grid [ 2 ] [ 2 ] - k3 if ( sum ( a ) * 3 ) + ( sum ( b ) * 3 ) == all : print ( " Yes " ) exit ( ) print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if not c1 [ 0 ] - c1 [ 1 ] == c2 [ 0 ] - c2 [ 1 ] == c3 [ 0 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( ' No ' ) exit ( ) if not c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] == c1 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) if not c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = [ C [ i ] [ 0 ] - min ( C [ i ] ) , C [ i ] [ 1 ] - min ( C [ i ] ) , C [ i ] [ 2 ] - min ( C [ i ] ) ] for j in range ( 3 ) : tmp = min ( C [ 0 ] [ j ] , C [ 1 ] [ j ] , C [ 2 ] [ j ] ) C [ 0 ] [ j ] = C [ 0 ] [ j ] - tmp C [ 1 ] [ j ] = C [ 1 ] [ j ] - tmp C [ 2 ] [ j ] = C [ 2 ] [ j ] - tmp if C == [ [ 0 ] * 3 for i in range ( 3 ) ] : print ( " Yes " ) else : print ( " No " )
import sys import math from fractions import gcd def lcm ( a , b ) : return a * b // gcd ( a , b ) def combination_count ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) ) def permutations_count ( n , r ) : return math . factorial ( n ) // math . factorial ( n - r ) big_prime = 1000000007 L = [ list ( map ( int , list ( sys . stdin . readline ( ) . split ( ) ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : b1 = L [ 0 ] [ 0 ] - a1 b2 = L [ 0 ] [ 1 ] - a1 b3 = L [ 0 ] [ 2 ] - a1 a2 = L [ 1 ] [ 1 ] - b2 a3 = L [ 2 ] [ 2 ] - b3 if ( a2 + b1 ) == L [ 1 ] [ 0 ] and ( a3 + b1 ) == L [ 2 ] [ 0 ] and ( a3 + b2 ) == L [ 2 ] [ 1 ] and ( a2 + b3 ) == L [ 1 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) sum_mat = ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) / 3 print ( ' Yes ' if sum_mat == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] else ' No ' )
import sys C = [ list ( map ( int , sys . stdin . readline ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a0 in range ( 101 ) : b0 = C [ 0 ] [ 0 ] - a0 b1 = C [ 0 ] [ 1 ] - a0 b2 = C [ 0 ] [ 2 ] - a0 if ( C [ 1 ] [ 0 ] - b0 == C [ 1 ] [ 1 ] - b1 == C [ 1 ] [ 2 ] - b2 ) and ( C [ 2 ] [ 0 ] - b0 == C [ 2 ] [ 1 ] - b1 == C [ 2 ] [ 2 ] - b2 ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ ] c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : pass else : print ( ' No ' ) exit ( 0 ) for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : pass else : print ( ' No ' ) exit ( 0 ) print ( ' Yes ' )
* l , = map ( int , open ( 0 ) . read ( ) . split ( ) ) print ( " YNeos " [ 4 != sum ( sum ( l [ j ] - l [ 0 ] + l [ i ] == l [ i + j ] for i in [ 1 , 2 ] ) for j in [ 3 , 6 ] ) : : 2 ] )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] or c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] or c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) res = 0 for i in range ( 2 ) : if c [ i ] [ 0 ] - c [ i + 1 ] [ 0 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] and c [ i ] [ 2 ] - c [ i + 1 ] [ 2 ] == c [ i ] [ 1 ] - c [ i + 1 ] [ 1 ] : res += 1 for j in range ( 2 ) : if c [ 0 ] [ j ] - c [ 0 ] [ j + 1 ] == c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] and c [ 2 ] [ j ] - c [ 2 ] [ j + 1 ] == c [ 1 ] [ j ] - c [ 1 ] [ j + 1 ] : res += 1 print ( " Yes " if res == 4 else " No " )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for x in range ( 101 ) : for y in range ( 101 ) : for z in range ( 101 ) : if x - y == c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : if y - z == c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : if z - x == c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] ans = 0 if c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == b [ 0 ] - b [ 1 ] and c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == b [ 1 ] - b [ 2 ] : ans + = 1 if c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] == b [ 0 ] - b [ 1 ] and c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] == b [ 1 ] - b [ 2 ] : ans + = 1 if ans == 2 : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : c_lst = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] c2 = c_lst [ 1 ] [ 0 ] + c_lst [ 2 ] [ 1 ] + c_lst [ 0 ] [ 2 ] c3 = c_lst [ 2 ] [ 0 ] + c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 2 ] if c1 == c2 and c2 == c3 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] print ( " Yes " if c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] == c [ 2 ] [ 2 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] else " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s1 = sum ( c [ 0 ] ) s2 = sum ( c [ 1 ] ) s3 = sum ( c [ 2 ] ) s4 = c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] s5 = c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] s6 = c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] for x in [ s2 - s1 , s3 - s1 , s5 - s4 , s6 - s4 ] : if abs ( x ) % 3 != 0 : print ( ' No ' ) break else : print ( ' Yes ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c11 - c21 == c12 - c22 == c13 - c23 and c11 - c31 == c12 - c32 == c13 - c33 : print ( ' Yes ' ) else : print ( ' No ' )
import sys import heapq , math from itertools import zip_longest , permutations , combinations , combinations_with_replacement from itertools import accumulate , dropwhile , takewhile , groupby from functools import lru_cache from copy import deepcopy c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) def ok ( c ) : if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] \ and c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] \ and c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] \ and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : return True return False print ( " Yes " if ok ( [ c1 , c2 , c3 ] ) else " No " )
import sys stdin = sys . stdin def ns ( ) : return stdin . readline ( ) . rstrip ( ) def ni ( ) : return int ( ns ( ) ) def na ( ) : return list ( map ( int , stdin . readline ( ) . split ( ) ) ) def main ( ) : c = na ( ) dif1 , dif2 = c [ 1 ] - c [ 0 ] , c [ 2 ] - c [ 1 ] for i in range ( 2 ) : cn = na ( ) if cn [ 1 ] - cn [ 0 ] != dif1 or cn [ 2 ] - cn [ 1 ] != dif2 : print ( " No " ) quit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
C = [ ] for i in range ( 3 ) : C . append ( [ int ( c ) for c in input ( ) . split ( ) ] ) ans = " Yes " for i in range ( 3 ) : temp = C [ i ] [ 0 ] - C [ ( i + 1 ) % 3 ] [ 0 ] for j in range ( 3 ) : if C [ i ] [ j ] - C [ ( i + 1 ) % 3 ] [ j ] != temp : ans = " No " for j in range ( 3 ) : temp = C [ 0 ] [ j ] - C [ 0 ] [ ( j + 1 ) % 3 ] for i in range ( 3 ) : if C [ i ] [ j ] - C [ i ] [ ( j + 1 ) % 3 ] != temp : ans = " No " print ( ans )
c_ = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = 0 b1 = c_ [ 0 ] [ 0 ] - a1 a2 = c_ [ 1 ] [ 0 ] - b1 b2 = c_ [ 0 ] [ 1 ] - a1 a3 = c_ [ 2 ] [ 0 ] - b1 b3 = c_ [ 0 ] [ 2 ] - a1 a_ = [ a1 , a2 , a3 ] b_ = [ b1 , b2 , b3 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c_ [ i ] [ j ] != a_ [ i ] + b_ [ j ] : flag = False print ( ' Yes ' if flag else ' No ' )
vals = [ ] for line in range ( 3 ) : s = input ( ) . split ( ) val = [ ] for v in s : val . append ( int ( v ) ) vals . append ( val ) info = True a = [ 0 , ] b = vals [ 0 ] a . append ( vals [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( vals [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if vals [ i ] [ j ] != a [ i ] + b [ j ] : info = False print ( ' Yes ' if info else ' No ' )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] f = 1 for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : f = 0 if f == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l = [ ] for i in c : l += i if l [ 0 ] + l [ 4 ] == l [ 1 ] + l [ 3 ] and l [ 1 ] + l [ 5 ] == l [ 2 ] + l [ 4 ] and l [ 3 ] + l [ 7 ] == l [ 4 ] + l [ 6 ] and l [ 4 ] + l [ 8 ] == l [ 5 ] + l [ 7 ] : print ( ' Yes ' ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = ' No ' if c11 - c21 == c12 - c22 & c12 - c22 == c13 - c23 : if c21 - c31 == c22 - c32 & c22 - c32 == c23 - c33 : if c11 - c12 == c21 - c22 & c21 - c22 == c31 - c32 : if c12 - c13 == c22 - c23 & c22 - c23 == c32 - c33 : ans = ' Yes ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for j in range ( 3 ) : b [ j ] = c [ 0 ] [ j ] - a [ 0 ] for i in range ( 1 , 3 , 1 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not ( c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ) : print ( " No " ) break if not ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] ) : print ( " No " ) break else : print ( " Yes " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] for i in range ( 2 ) : if not c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) for i in range ( 2 ) : if not c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , list ( input ( ) . split ( ) ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : ans = " No " break print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == c [ i - 1 ] [ j ] + c [ i ] [ j - 1 ] - c [ i - 1 ] [ j - 1 ] : continue ans = " No " print ( ans )
a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) c = list ( map ( int , input ( ) . split ( ) ) ) if a [ 0 ] + b [ 1 ] == a [ 1 ] + b [ 0 ] and a [ 2 ] + c [ 0 ] == a [ 0 ] + c [ 2 ] and b [ 2 ] + c [ 1 ] == b [ 1 ] + c [ 2 ] : print ( " Yes " ) else : print ( " No " )
arr = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ ] b = [ ] for i in range ( 3 ) : b . append ( arr [ 0 ] [ i ] - 0 ) a . append ( arr [ i ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != arr [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] b = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] for i in range ( 3 ) : if a != c [ i ] [ 1 ] - c [ i ] [ 0 ] : print ( " No " ) break if b != c [ i ] [ 2 ] - c [ i ] [ 1 ] : print ( " No " ) break else : print ( " Yes " )
import sys from fractions import gcd import math from math import ceil , floor import collections from collections import Counter import itertools C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Dif_H = [ [ ] for _ in range ( 3 ) ] Dif_V = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : Dif_H [ i ] = [ C [ i ] [ 0 ] - C [ i ] [ 1 ] , C [ i ] [ 1 ] - C [ i ] [ 2 ] , C [ i ] [ 2 ] - C [ i ] [ 0 ] ] for i in range ( 3 ) : Dif_V [ i ] = [ C [ 0 ] [ i ] - C [ 1 ] [ i ] , C [ 1 ] [ i ] - C [ 2 ] [ i ] , C [ 2 ] [ i ] - C [ 0 ] [ i ] ] if Dif_H [ 0 ] == Dif_H [ 1 ] == Dif_H [ 2 ] and Dif_V [ 0 ] == Dif_V [ 1 ] == Dif_V [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) c4 , c5 , c6 = map ( int , input ( ) . split ( ) ) c7 , c8 , c9 = map ( int , input ( ) . split ( ) ) if c1 + c5 + c9 == c1 + c8 + c6 == c4 + c2 + c9 == c4 + c8 + c3 == c7 + c2 + c6 == c7 + c5 + c3 : print ( ' Yes ' ) else : print ( ' No ' )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) a = 1 b = 0 if A [ 0 ] - B [ 0 ] == A [ 1 ] - B [ 1 ] == A [ 2 ] - B [ 2 ] : b = 1 else : a = 0 if B [ 0 ] - C [ 0 ] == B [ 1 ] - C [ 1 ] == B [ 2 ] - C [ 2 ] : b = 1 else : a = 0 if A [ 0 ] - A [ 1 ] == B [ 0 ] - B [ 1 ] == C [ 0 ] - C [ 1 ] : b = 1 else : a = 0 if A [ 1 ] - A [ 2 ] == B [ 1 ] - B [ 2 ] == C [ 1 ] - C [ 2 ] : b = 1 else : a = 0 if a == 1 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if sum ( sum ( row ) for row in C ) == 3 * sum ( C [ i ] [ i ] for i in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
import numpy as np c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) ans = [ ] c = np . array ( c ) ch = np . diff ( c ) if np . all ( ch [ 0 ] == ch [ 1 ] ) & np . all ( ch [ 1 ] == ch [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) cw = np . diff ( c . T ) if np . all ( cw [ 0 ] == cw [ 1 ] ) & np . all ( cw [ 1 ] == cw [ 2 ] ) : ans . append ( True ) else : ans . append ( False ) ans = " Yes " if all ( ans ) else " No " print ( ans )
a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 2 ) : for j in range ( 2 ) : if a [ i ] [ j ] - a [ i ] [ j + 1 ] == a [ i + 1 ] [ j ] - a [ i + 1 ] [ j + 1 ] : continue else : print ( " No " ) ; exit ( ) print ( " Yes " )
from sys import exit c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l_1 = [ 0 , 1 , 2 ] l_2 = [ 1 , 2 , 0 ] for i in range ( 3 ) : if not c [ l_1 [ i ] ] [ 0 ] - c [ l_2 [ i ] ] [ 0 ] == c [ l_1 [ i ] ] [ 1 ] - c [ l_2 [ i ] ] [ 1 ] == c [ l_1 [ i ] ] [ 2 ] - c [ l_2 [ i ] ] [ 2 ] : print ( ' No ' ) exit ( ) if not c [ 0 ] [ l_1 [ i ] ] - c [ 0 ] [ l_2 [ i ] ] == c [ 1 ] [ l_1 [ i ] ] - c [ 1 ] [ l_2 [ i ] ] == c [ 2 ] [ l_1 [ i ] ] - c [ 2 ] [ l_2 [ i ] ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) and \ ( c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] ) == ( c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] ) and \ ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) == ( c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) and \ ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] ) == ( c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] ) == ( c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c += [ list ( map ( int , input ( ) . split ( ) ) ) ] a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] c1 = [ c [ 0 ] [ i ] + a1 for i in range ( 3 ) ] c2 = [ c [ 0 ] [ i ] + a2 for i in range ( 3 ) ] if c [ 1 ] == c1 and c [ 2 ] == c2 : print ( " Yes " ) else : print ( " No " )
c_lst = [ [ int ( c ) for c in input ( ) . split ( ) ] for i in range ( 3 ) ] if c_lst [ 0 ] [ 0 ] + c_lst [ 1 ] [ 1 ] == c_lst [ 0 ] [ 1 ] + c_lst [ 1 ] [ 0 ] and c_lst [ 1 ] [ 1 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 1 ] [ 2 ] + c_lst [ 2 ] [ 1 ] and c_lst [ 0 ] [ 0 ] + c_lst [ 2 ] [ 2 ] == c_lst [ 0 ] [ 2 ] + c_lst [ 2 ] [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] check = [ [ 0 ] * 3 ] * 3 flag = " True " while ( flag == " True " ) : flag = " false " for i in range ( 3 ) : if min ( C [ i ] [ 0 ] , C [ i ] [ 1 ] , C [ i ] [ 2 ] ) != 0 : C [ i ] [ 0 ] -= 1 C [ i ] [ 1 ] -= 1 C [ i ] [ 2 ] -= 1 flag = " True " break elif min ( C [ 0 ] [ i ] , C [ 1 ] [ i ] , C [ 2 ] [ i ] ) != 0 : C [ 0 ] [ i ] -= 1 C [ 1 ] [ i ] -= 1 C [ 2 ] [ i ] -= 1 flag = " True " break if C == check : print ( " Yes " ) else : print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) flag = True for a1 in range ( c . max ( ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 or c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 2 ] - b3 ) : flag = False if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 or c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 2 ] - b3 ) : flag = False print ( " Yes " if flag else " No " )
from sys import stdin input = stdin . readline c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 = c11 b2 = c12 b3 = c13 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 , b2 , b3 = c [ 0 ] flg = True for i in range ( 1 , 3 ) : if c [ i ] [ 0 ] - b1 == c [ i ] [ 1 ] - b2 == c [ i ] [ 2 ] - b3 : continue else : flg = False print ( ' Yes ' if flg else ' No ' )
N = 3 c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] ds = [ sum ( c [ j ] [ ( i + j ) % 3 ] for j in range ( N ) ) for i in range ( N ) ] if ds [ 0 ] == ds [ 1 ] == ds [ 2 ] : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ [ int ( zz ) for zz in input ( ) . split ( ) ] for _ in range ( 3 ) ] for j in range ( 3 ) : if j + 1 == 3 : p = 0 else : p = j + 1 tmp = C [ j ] [ 2 ] - C [ p ] [ 2 ] for i in range ( 2 ) : if C [ j ] [ i ] - C [ p ] [ i ] != tmp : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] : ans = ' No ' if c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] or c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] : ans = ' No ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] : ans = ' No ' if c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
import numpy as np from numpy . linalg import matrix_rank A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) Ac = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c11 ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c12 ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c13 ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c21 ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c22 ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c23 ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c31 ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c32 ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c33 ] ] ) if matrix_rank ( A ) == matrix_rank ( Ac ) : print ( " Yes " ) else : print ( " No " )
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; KEYENCE2019_A solver = new KEYENCE2019_A ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class KEYENCE2019_A { public void solve ( int testNumber , Scanner in , PrintWriter out ) { String [ ] c = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { c [ i ] = in . next ( ) ; } Arrays . sort ( c ) ; if ( String . join ( " " , c ) . equals ( " 1479 " ) ) { out . print ( " YES " ) ; } else { out . print ( " NO " ) ; } } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; int _1 = a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] ; int _2 = a [ 1 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] ; int _3 = a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] ; if ( _1 + _2 == 2 * _3 ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { int a = i ; int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; if ( c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 && c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 ) { if ( c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 && c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) { System . out . println ( " Yes " ) ; return ; } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { solve ( in ) ; } } private static void solve ( Scanner in ) { int K = in . nextInt ( ) , S = in . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x < K + 1 ; x ++ ) { for ( int y = 0 ; y < K + 1 ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n1 = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int n3 = sc . nextInt ( ) ; int n4 = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; list . add ( n1 ) ; list . add ( n2 ) ; list . add ( n3 ) ; list . add ( n4 ) ; if ( list . contains ( 1 ) ) { if ( list . contains ( 9 ) ) { if ( list . contains ( 7 ) ) { if ( list . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( in . readLine ( ) ) ; String [ ] str = in . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; int min = 100000 * 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( str [ i ] ) ; min = Math . min ( p [ i ] , min ) ; if ( p [ i ] > min ) count ++ ; } System . out . println ( n - count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int csum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; csum += c [ i ] [ j ] ; } } int [ ] threesum = new int [ 6 ] ; threesum [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; threesum [ 1 ] = c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 1 ] [ 2 ] ; threesum [ 2 ] = c [ 1 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 2 ] [ 2 ] ; threesum [ 3 ] = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] ; threesum [ 4 ] = c [ 2 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] ; threesum [ 5 ] = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] ; for ( int i = 1 ; i < 6 ; i ++ ) { if ( threesum [ 0 ] != threesum [ i ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { int z = s ; z = z - i - j ; if ( z >= 0 && z <= n ) counter ++ ; } } System . out . println ( counter ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver solver = new Solver ( ) ; solver . init ( ) ; solver . readHead ( in . readLine ( ) ) ; solver . readP ( in . readLine ( ) ) ; } } class Solver { int N ; int cnt ; public void init ( ) { N = 0 ; cnt = 0 ; } public void readHead ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; N = Integer . parseInt ( strArr [ 0 ] ) ; } public void readP ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; int min = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = Integer . parseInt ( strArr [ i ] ) ; if ( min > p ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; } public boolean hasNext ( ) { return cnt < N ; } public void readBody ( String str ) { cnt ++ ; } public void solve ( ) { } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) <= K && 0 <= ( S - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int answer = sc . nextInt ( ) ; int count = 0 ; for ( int a = 0 ; a <= max ; a ++ ) { for ( int b = 0 ; b <= max ; b ++ ) { if ( answer - a - b <= max && answer - a - b >= 0 ) count ++ ; } } System . out . println ( count ) ; ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( ( z <= k ) && ( z >= 0 ) ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { long n = sc . nextLong ( ) ; List < Long > an = new ArrayList < > ( ) ; for ( long i = 0 ; i < n ; i ++ ) { an . add ( sc . nextLong ( ) ) ; } long result = 0 ; long min = Integer . MAX_VALUE ; for ( long l : an ) { if ( min > l ) { result ++ ; min = l ; } } System . out . println ( result ) ; } } static long lcm ( long a , long b ) { long temp ; long c = a ; c *= b ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return c / b ; } static long gcd ( long a , long b ) { long temp ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return b ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; ; } } System . out . println ( " Three " ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = k ; x >= 0 ; x -- ) { for ( int y = Math . min ( s - x , k ) ; y >= 0 ; y -- ) { int z = s - x - y ; if ( z <= k ) { ans ++ ; } else { break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] temp = scanner . nextLine ( ) . split ( " " ) ; int tmp = 0 ; int count = 0 ; int min = Integer . parseInt ( temp [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { tmp = Integer . parseInt ( temp [ i ] ) ; if ( tmp == Math . min ( min , tmp ) ) { count ++ ; min = tmp ; } } System . out . println ( count + 1 ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static boolean debug = false ; private static boolean elapsed = false ; private static PrintWriter _out = new PrintWriter ( System . out ) ; private static PrintWriter _err = new PrintWriter ( System . err ) ; private void solve ( Scanner sc ) { int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; ++ x ) { for ( int y = 0 ; y <= K ; ++ y ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ++ cnt ; } } } _out . println ( cnt ) ; } private long C ( long n , long r ) { long res = 1 ; for ( long i = n ; i > n - r ; -- i ) { res *= i ; } for ( long i = r ; i > 1 ; -- i ) { res /= i ; } return res ; } private long P ( long n , long r ) { long res = 1 ; for ( long i = n ; i > n - r ; -- i ) { res *= i ; } return res ; } public static void main ( String [ ] args ) { long S = System . currentTimeMillis ( ) ; Scanner sc = new Scanner ( System . in ) ; new Main ( ) . solve ( sc ) ; _out . flush ( ) ; long G = System . currentTimeMillis ( ) ; if ( elapsed ) { _err . println ( ( G - S ) + " ms " ) ; } _err . flush ( ) ; } }
import java . util . Scanner ; class Main { static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int K = in . nextInt ( ) , S = in . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j >= S - K && i + j <= S ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } boolean bool = true ; if ( ! ( map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 1 ] [ 0 ] - map [ 1 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 1 ] [ 1 ] - map [ 1 ] [ 2 ] && map [ 0 ] [ 0 ] - map [ 0 ] [ 1 ] == map [ 2 ] [ 0 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 1 ] - map [ 0 ] [ 2 ] == map [ 2 ] [ 1 ] - map [ 2 ] [ 2 ] ) ) bool = false ; if ( ! ( map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 1 ] - map [ 1 ] [ 1 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 1 ] - map [ 2 ] [ 1 ] && map [ 0 ] [ 0 ] - map [ 1 ] [ 0 ] == map [ 0 ] [ 2 ] - map [ 1 ] [ 2 ] && map [ 1 ] [ 0 ] - map [ 2 ] [ 0 ] == map [ 1 ] [ 2 ] - map [ 2 ] [ 2 ] ) ) bool = false ; System . out . println ( bool ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { static int A , B ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; A = sc . nextInt ( ) ; B = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i < A + 1 ; i ++ ) { for ( int j = 0 ; j < A + 1 ; j ++ ) { if ( B - i - j <= A && B - i - j >= 0 ) { ans += 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] List = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { List [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = List [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = List [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( List [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int a [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int b [ ] = { 1 , 4 , 7 , 9 } ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] != b [ i ] ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = scan . nextInt ( ) ; } } boolean found = true ; int b1 = map [ 0 ] [ 0 ] ; int b2 = map [ 0 ] [ 1 ] ; int b3 = map [ 0 ] [ 2 ] ; int a1 = 0 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] != a2 + b2 || map [ 1 ] [ 2 ] != a2 + b3 || map [ 2 ] [ 1 ] != a3 + b2 || map [ 2 ] [ 2 ] != a3 + b3 ) { found = false ; } System . out . println ( found ? " Yes " : " No " ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { try ( Scanner sc = new Scanner ( System . in ) ) { int X = sc . nextInt ( ) ; long ans = 2 ; for ( int i = X ; i > 0 ; i -- ) { ans = ans * 2 + 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int c = 0 ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { c = s - a - b ; if ( c >= 0 && c <= k ) { ans ++ ; } } } System . out . println ( ans ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . PrintWriter ; import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; TreeSet < Character > ts = new TreeSet < > ( ) ; int n = Integer . valueOf ( sc . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) ts . add ( sc . next ( ) . charAt ( 0 ) ) ; if ( ts . size ( ) == 3 ) out . println ( " Three " ) ; else out . println ( " Four " ) ; out . flush ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int x , y , z ; int s , k ; int count = 0 ; Scanner sc = new Scanner ( System . in ) ; k = Integer . parseInt ( sc . next ( ) ) ; s = Integer . parseInt ( sc . next ( ) ) ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 ; for ( i = 0 ; i <= K ; i ++ ) { for ( j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && S - i - j >= 0 ) count ++ ; } } System . out . print ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int a1 , b1 , b2 , b3 ; a1 = 0 ; b1 = c [ 0 ] [ 0 ] ; b2 = c [ 0 ] [ 1 ] ; b3 = c [ 0 ] [ 2 ] ; if ( c [ 1 ] [ 0 ] - b1 == c [ 1 ] [ 1 ] - b2 && c [ 1 ] [ 1 ] - b2 == c [ 1 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } if ( c [ 2 ] [ 0 ] - b1 == c [ 2 ] [ 1 ] - b2 && c [ 2 ] [ 1 ] - b2 == c [ 2 ] [ 2 ] - b3 ) { } else { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] r = new int [ 3 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } outside : for ( int i = 0 ; i < 3 ; i ++ ) { int a = 101 ; for ( int j = 0 ; j < 3 ; j ++ ) { a = Math . min ( c [ i ] [ j ] , a ) ; } if ( i == 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { r [ j ] = c [ i ] [ j ] - a ; } } if ( i > 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( r [ j ] != c [ i ] [ j ] - a ) { flag = false ; System . out . println ( " No " ) ; break outside ; } } } } if ( flag == true ) { System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! ( ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) && ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) ) ) { ans = " No " ; } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] p = in . readIntArray ( n ) ; int answer = 0 ; for ( int i = 0 , min = Integer . MAX_VALUE ; i < n ; i ++ ) { if ( p [ i ] < min ) answer ++ ; min = Math . min ( min , p [ i ] ) ; } out . println ( answer ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] readIntArray ( int n ) { int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = nextInt ( ) ; } return x ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; } Arrays . sort ( num ) ; if ( num [ 0 ] == 1 && num [ 1 ] == 4 && num [ 2 ] == 7 && num [ 3 ] == 9 ) { System . out . println ( " YES " ) ; return ; } System . out . println ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 0 ; int b = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= b ) { a ++ ; b = P [ i ] ; } } System . out . println ( a ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] permutaion = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { permutaion [ i ] = in . nextInt ( ) ; } int min = permutaion [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( permutaion [ i ] <= min ) { ans ++ ; min = permutaion [ i ] ; } } System . out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { static int [ ] data ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - ( b + a ) ; if ( c <= k && c >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } static void num ( int n ) { int num = n ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { data [ i ] ++ ; n /= i ; i = 1 ; } } return ; } } class Pair implements Comparable { Character from ; int end ; @ Override public int compareTo ( Object other ) { Pair otherpair = ( Pair ) other ; return end - otherpair . end ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 200001 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { ans += 1 ; min = p ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z < 0 ) break ; if ( z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int g [ ] [ ] = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { g [ i ] [ j ] = sc . nextInt ( ) ; } } if ( ( g [ 0 ] [ 0 ] + g [ 1 ] [ 1 ] == g [ 0 ] [ 1 ] + g [ 1 ] [ 0 ] ) && ( g [ 0 ] [ 1 ] + g [ 1 ] [ 2 ] == g [ 0 ] [ 2 ] + g [ 1 ] [ 1 ] ) && ( g [ 1 ] [ 0 ] + g [ 2 ] [ 1 ] == g [ 1 ] [ 1 ] + g [ 2 ] [ 0 ] ) && ( g [ 1 ] [ 1 ] + g [ 2 ] [ 2 ] == g [ 1 ] [ 2 ] + g [ 2 ] [ 1 ] ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > p = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { p . add ( scanner . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( p ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( p . get ( i ) <= min ) { min = p . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { ans = " Four " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , a = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) a ++ ; } } System . out . println ( a ) ; } }
import java . util . Scanner ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Scanner sc ) { int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = grid [ 0 ] [ ( i + 2 ) % 3 ] - grid [ 0 ] [ ( i + 1 ) % 3 ] ; b [ i ] = grid [ ( i + 2 ) % 3 ] [ 0 ] - grid [ ( i + 1 ) % 3 ] [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] != grid [ j ] [ ( i + 2 ) % 3 ] - grid [ j ] [ ( i + 1 ) % 3 ] || b [ i ] != grid [ ( i + 2 ) % 3 ] [ j ] - grid [ ( i + 1 ) % 3 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } class Main { public static void main ( String ... args ) { Scanner in = new Scanner ( System . in ) ; Solver . INSTANCE . solve ( in ) ; in . close ( ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int n = ni ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = ni ( ) ; } int max = 1 ; long cnt = a [ 0 ] - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] == max + 1 ) { ++ max ; continue ; } long v = ( a [ i ] - 1 ) / ( max + 1 ) ; cnt += v ; } System . out . println ( cnt ) ; } int ni ( ) { return Integer . parseInt ( sc . next ( ) ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int count = 1 ; int min = P [ 0 ] ; if ( N == 1 ) { System . out . println ( 1 ) ; } else { for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( P [ i ] > P [ i + 1 ] && min >= P [ i + 1 ] ) { min = P [ i + 1 ] ; count += 1 ; } } System . out . println ( count ) ; } } } }
import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { list [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( list [ i ] , min ) ; if ( min < list [ i ] ) { continue ; } ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . lang . Integer ; import java . lang . Math ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String tokens1 [ ] = scanner . nextLine ( ) . split ( " " ) ; String tokens2 [ ] = scanner . nextLine ( ) . split ( " " ) ; int min = Integer . parseInt ( tokens2 [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < tokens2 . length ; i ++ ) { int val = Integer . parseInt ( tokens2 [ i ] ) ; if ( val <= min ) { count ++ ; } min = Math . min ( min , val ) ; } System . out . print ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; String moji = " " ; int flag = 0 ; for ( int i = 0 ; i < N ; i ++ ) { moji = in . next ( ) ; if ( moji . equals ( " Y " ) ) { flag = 1 ; } } if ( flag == 1 ) { System . out . print ( " Four " ) ; } else { System . out . print ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] numbers = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { numbers [ i ] [ j ] = sc . nextInt ( ) ; } } if ( ( ( numbers [ 0 ] [ 0 ] - numbers [ 0 ] [ 1 ] ) == ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) ) && ( ( numbers [ 0 ] [ 0 ] - numbers [ 0 ] [ 1 ] ) == ( numbers [ 2 ] [ 0 ] - numbers [ 2 ] [ 1 ] ) ) && ( ( numbers [ 0 ] [ 1 ] - numbers [ 0 ] [ 2 ] ) == ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) ) && ( ( numbers [ 0 ] [ 1 ] - numbers [ 0 ] [ 2 ] ) == ( numbers [ 2 ] [ 1 ] - numbers [ 2 ] [ 2 ] ) ) && ( ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) == ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) && ( numbers [ 1 ] [ 0 ] - numbers [ 1 ] [ 1 ] ) == ( numbers [ 2 ] [ 0 ] - numbers [ 2 ] [ 1 ] ) ) && ( ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) == ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) && ( numbers [ 1 ] [ 1 ] - numbers [ 1 ] [ 2 ] ) == ( numbers [ 2 ] [ 1 ] - numbers [ 2 ] [ 2 ] ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( num >= 0 && num <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int num = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) num ++ ; } } System . out . println ( num ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { MyReader r = new MyReader ( ) ; int K , S ; { int [ ] a = r . ii ( ) ; K = a [ 0 ] ; S = a [ 1 ] ; } int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) for ( int j = 0 , k ; j < K + 1 ; j ++ ) if ( 0 <= ( k = S - i - j ) && k <= K ) count ++ ; println ( count ) ; } static void print ( Object o ) { System . out . print ( o . toString ( ) ) ; } static void println ( Object o ) { System . out . println ( o . toString ( ) ) ; } static int Int ( String s ) { return Integer . parseInt ( s ) ; } static long Long ( String s ) { return Long . parseLong ( s ) ; } static class MyReader extends BufferedReader { MyReader ( ) { super ( new InputStreamReader ( System . in ) ) ; } String s ( ) throws IOException { return readLine ( ) ; } String [ ] ss ( ) throws IOException { return s ( ) . split ( " " ) ; } int i ( ) throws IOException { return Int ( s ( ) ) ; } int [ ] ii ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; int [ ] ii = new int [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ii [ j ] = Integer . parseInt ( ss [ j ] ) ; return ii ; } long l ( ) throws IOException { return Long ( s ( ) ) ; } long [ ] ll ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; long [ ] ll = new long [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ll [ j ] = Long . parseLong ( ss [ j ] ) ; return ll ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; int x = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { x = 1 ; } } } System . out . println ( x == 0 ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } out ( count ) ; } static long gcd ( long a , long b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static int gcd ( int a , int b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } static void out ( String info ) { System . out . println ( info ) ; } static void out ( int info ) { System . out . println ( info ) ; } static void out ( double info ) { System . out . println ( info ) ; } static void out ( long info ) { System . out . println ( info ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . nextLine ( ) ; StringTokenizer st = new StringTokenizer ( s ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; a ++ ; int original = ( b + 2 ) * ( b + 1 ) / 2 ; if ( b >= a ) { original -= ( b - a + 2 ) * ( b - a + 1 ) * 3 / 2 ; } if ( b >= 2 * a ) { original += ( b - 2 * a + 2 ) * ( b - 2 * a + 1 ) * 3 / 2 ; } System . out . println ( original ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int X = 0 , Y = 0 , Z = 0 ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { X = i ; Y = j ; Z = S - X - Y ; int total = X + Y + Z ; if ( total == S && Z >= 0 && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean find = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { a [ 0 ] = i ; for ( int j = 0 ; j < 3 ; j ++ ) { b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; } a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b1 = c [ 1 ] [ j ] - a [ 1 ] ; if ( b1 != b [ j ] ) { find = false ; } } if ( find == true ) { a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { int b2 = c [ 2 ] [ j ] - a [ 2 ] ; if ( b2 != b [ j ] ) { find = false ; } } } if ( find == true ) { System . out . println ( " Yes " ) ; return ; } find = true ; } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner keyboard = new Scanner ( System . in ) ; int K = keyboard . nextInt ( ) ; int S = keyboard . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; keyboard . close ( ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int ans = 0 ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ i ] [ 0 ] - c [ j ] [ 0 ] == c [ i ] [ 1 ] - c [ j ] [ 1 ] && c [ i ] [ 1 ] - c [ j ] [ 1 ] == c [ i ] [ 2 ] - c [ j ] [ 2 ] ) { } else { b = false ; break loop ; } } } loop : for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ j ] == c [ 1 ] [ i ] - c [ 1 ] [ j ] && c [ 1 ] [ i ] - c [ 1 ] [ j ] == c [ 2 ] [ i ] - c [ 2 ] [ j ] ) { } else { b = false ; break loop ; } } } if ( b ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; String [ ] s = new String [ n ] ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { ans = " Four " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = c [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = c [ 0 ] [ j ] - a [ 0 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int X = 0 ; X <= Math . min ( K , S ) ; X ++ ) { for ( int Y = 0 ; Y <= Math . min ( K , S - X ) ; Y ++ ) { int Z = S - X - Y ; if ( 0 <= Z && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . PriorityQueue ; import java . util . Scanner ; class Main { static final int MOD = 1000000007 ; static final int INF = 1 << 30 ; Main ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean ok = false ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) ok = true ; } System . out . println ( ok ? " Four " : " Three " ) ; } public static void main ( String [ ] args ) { new Main ( ) ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; Set < String > s = new HashSet < String > ( ) ; int N = sc . nextInt ( ) ; while ( N -- > 0 ) s . add ( sc . next ( ) ) ; System . out . println ( s . size ( ) == 4 ? " Four " : " Three " ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scan . nextInt ( ) ; } } int min = C [ 0 ] [ 0 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( C [ 0 ] [ i ] < min ) min = C [ 0 ] [ i ] ; } int check ; for ( int a1 = 0 ; a1 <= min ; a1 ++ ) { int c11 = C [ 0 ] [ 0 ] - a1 ; int a2 = C [ 1 ] [ 0 ] - c11 ; int a3 = C [ 2 ] [ 0 ] - c11 ; boolean flag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { check = C [ 0 ] [ i ] - a1 ; if ( C [ 1 ] [ i ] - a2 != check || C [ 2 ] [ i ] - a3 != check ) { flag = false ; break ; } } if ( flag == true ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } String ans = " No " ; for ( int i = 0 ; i <= 100 ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; if ( c [ 1 ] [ 1 ] == a [ 1 ] + b [ 1 ] && c [ 1 ] [ 2 ] == a [ 1 ] + b [ 2 ] && c [ 2 ] [ 1 ] == a [ 2 ] + b [ 1 ] && c [ 2 ] [ 2 ] == a [ 2 ] + b [ 2 ] ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; int max = 0 ; int min = 100000000 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int M = Integer . parseInt ( sc . next ( ) ) ; if ( M > max ) { max = M ; } if ( M <= min ) { min = M ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 1 ] [ i ] - c [ 1 ] [ i - 1 ] || c [ 0 ] [ i ] - c [ 0 ] [ i - 1 ] != c [ 2 ] [ i ] - c [ 2 ] [ i - 1 ] ) ok = false ; } for ( int i = 1 ; i <= 2 ; i ++ ) { if ( c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 1 ] - c [ i - 1 ] [ 1 ] || c [ i ] [ 0 ] - c [ i - 1 ] [ 0 ] != c [ i ] [ 2 ] - c [ i - 1 ] [ 2 ] ) ok = false ; } System . out . println ( ok ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = sc . nextLong ( ) - 1 ; long p = 2 ; for ( int i = 1 ; i < n ; i ++ ) { long a = sc . nextLong ( ) ; if ( a == p ) { p ++ ; } else { long r = ( a % p ) ; if ( r == 0 ) { if ( a > p ) { ans ++ ; a -= ( p + 1 ) ; r = ( a % p ) ; ans += ( ( a - r ) / p ) ; } } else { ans += ( ( a - r ) / p ) ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] intArray = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { intArray [ i ] = sc . nextInt ( ) ; } double curMin = 1e9 ; for ( int value : intArray ) { curMin = Math . min ( curMin , value ) ; if ( curMin == value ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { ans ++ ; min = a [ i ] ; } } System . out . println ( ans + 1 ) ; } }
import java . util . * ; import java . util . stream . Collectors ; import java . io . * ; import java . nio . charset . StandardCharsets ; public class Main { int N ; int [ ] P ; List < Integer > results = new ArrayList < > ( ) ; public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; Main ins = new Main ( in ) ; ins . calc ( ) ; ins . showResult ( ) ; } Main ( BufferedReader in ) throws IOException { N = Integer . parseInt ( in . readLine ( ) ) ; String [ ] tokens = in . readLine ( ) . split ( " " ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = Integer . parseInt ( tokens [ i ] ) ; } } void calc ( ) { results . add ( P [ 0 ] ) ; int prevMin = P [ 0 ] ; for ( int i = 1 ; i < N ; ++ i ) { if ( prevMin >= P [ i ] ) { results . add ( P [ i ] ) ; prevMin = P [ i ] ; } } } void showResult ( ) { System . out . println ( results . size ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && x + y + k >= s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; Integer [ ] c1 = new Integer [ 3 ] ; Integer [ ] c2 = new Integer [ 3 ] ; Integer [ ] c3 = new Integer [ 3 ] ; Arrays . setAll ( c1 , i -> Integer . parseInt ( sc . next ( ) ) ) ; Arrays . setAll ( c2 , i -> Integer . parseInt ( sc . next ( ) ) ) ; Arrays . setAll ( c3 , i -> Integer . parseInt ( sc . next ( ) ) ) ; sc . close ( ) ; Integer [ ] vertical = new Integer [ ] { c1 [ 0 ] - c1 [ 0 ] , c2 [ 0 ] - c1 [ 0 ] , c3 [ 0 ] - c1 [ 0 ] } ; Integer [ ] newC1 = new Integer [ ] { vertical [ 0 ] + c1 [ 0 ] , vertical [ 0 ] + c1 [ 1 ] , vertical [ 0 ] + c1 [ 2 ] } ; Integer [ ] newC2 = new Integer [ ] { vertical [ 1 ] + c1 [ 0 ] , vertical [ 1 ] + c1 [ 1 ] , vertical [ 1 ] + c1 [ 2 ] } ; Integer [ ] newC3 = new Integer [ ] { vertical [ 2 ] + c1 [ 0 ] , vertical [ 2 ] + c1 [ 1 ] , vertical [ 2 ] + c1 [ 2 ] } ; boolean judge1 = Arrays . equals ( c1 , newC1 ) ; boolean judge2 = Arrays . equals ( c2 , newC2 ) ; boolean judge3 = Arrays . equals ( c3 , newC3 ) ; boolean judge = judge1 && judge2 && judge3 ; String result = judge ? " Yes " : " No " ; System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int i = 0 , j = 0 ; int temp ; boolean flag = true ; for ( i = 0 ; i < 3 ; i ++ ) for ( j = 0 ; j < 3 ; j ++ ) { temp = stdin . nextInt ( ) ; c [ i ] [ j ] = temp ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { if ( ( c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] ) != ( c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] ) ) flag = false ; } } if ( flag ) System . out . println ( " Yes " ) ; else if ( ! flag ) System . out . println ( " No " ) ; } }
import java . util . * ; import static java . lang . System . * ; class Main { public static final int MOD = 1000000007 ; public static final int INF = 1000000000 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a , b ; a = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; b = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; String ans = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( a != c [ i ] [ 0 ] - c [ i ] [ 1 ] || b != c [ i ] [ 1 ] - c [ i ] [ 2 ] ) { ans = " No " ; break ; } } for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ j ] - c [ 1 ] [ j ] || c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ j ] - c [ 2 ] [ j ] ) { ans = " No " ; break ; } } out . println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] nums = new int [ k + 1 ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { nums [ i ] = i ; } int count = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) { int x = nums [ i ] ; for ( int j = 0 ; j < nums . length ; j ++ ) { int y = nums [ j ] ; int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ; int n = Integer . parseInt ( str ) ; int ans = 1 ; int min = 0 ; str = scan . nextLine ( ) ; String [ ] substr = str . split ( " " , 0 ) ; int [ ] array = new int [ 200000 ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = Integer . parseInt ( substr [ i ] ) ; } if ( array [ 1 ] == 0 ) { System . out . println ( ans ) ; return ; } if ( array [ 1 ] <= array [ 0 ] ) { min = array [ 1 ] ; ans ++ ; } else { min = array [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( min >= array [ i ] ) { min = array [ i ] ; ans ++ ; } } System . out . println ( ans ) ; scan . close ( ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - ( i + j ) >= 0 ) && ( S - ( i + j ) <= K ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . lang . * ; import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } } class TaskA { public void solve ( InputReader in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; int x , y , z ; int ans = 0 ; for ( x = 0 ; x <= k && x <= s ; ++ x ) { for ( y = 0 ; y <= k && x + y <= s ; ++ y ) { z = s - ( x + y ) ; if ( z >= 0 && z <= k ) ++ ans ; } } out . println ( ans ) ; } } class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int k = parseInt ( sc . next ( ) ) ; int s = parseInt ( sc . next ( ) ) ; sc . close ( ) ; int cnt = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) cnt ++ ; } } out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ sc . nextInt ( ) ] ++ ; } if ( n [ 1 ] == 1 && n [ 9 ] == 1 && n [ 7 ] == 1 && n [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . math . * ; import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws FileNotFoundException { new Main ( ) . run ( ) ; } class SegTree { int n = 1 ; int [ ] v ; public SegTree ( int n ) { while ( this . n < n ) this . n *= 2 ; v = new int [ 2 * this . n - 1 ] ; } void set ( int k ) { v [ k ] = 1 ; while ( k > 0 ) { k = ( k - 1 ) / 2 ; v [ k ] = v [ 2 * k + 1 ] + v [ 2 * k + 2 ] ; } } int query ( int a , int b ) { return query ( 0 , n , a , b , 0 ) ; } int query ( int l , int r , int a , int b , int k ) { if ( r <= a || b <= l ) return 0 ; else if ( a <= l && r <= b ) return v [ k ] ; else { int vl = query ( l , ( l + r ) / 2 , a , b , 2 * k + 1 ) ; int vr = query ( ( l + r ) / 2 , r , a , b , 2 * k + 2 ) ; return vl + vr ; } } } void run ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = Integer . MAX_VALUE / 3 ; int ans = 0 ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; -- P [ i ] ; if ( min >= P [ i ] ) ++ ans ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] [ ] b = new int [ 3 ] [ 3 ] ; for ( int x = 0 ; x < 3 ; x ++ ) { String [ ] foo = br . readLine ( ) . split ( " " ) ; for ( int y = 0 ; y < 3 ; y ++ ) { b [ x ] [ y ] = Integer . parseInt ( foo [ y ] ) ; } } int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( int a1 = 0 ; a1 < 100 ; a1 ++ ) { b1 = b [ 0 ] [ 0 ] - a1 ; b2 = b [ 0 ] [ 1 ] - a1 ; b3 = b [ 0 ] [ 2 ] - a1 ; int [ ] bls = { b1 , b2 , b3 } ; for ( int x = 0 ; x < 3 ; x ++ ) { if ( x == 0 ) { a2 = b [ 1 ] [ x ] - bls [ x ] ; a3 = b [ 2 ] [ x ] - bls [ x ] ; } else { if ( a2 != b [ 1 ] [ x ] - bls [ x ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } if ( a3 != b [ 2 ] [ x ] - bls [ x ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } a2 = b [ 1 ] [ x ] - bls [ x ] ; a3 = b [ 2 ] [ x ] - bls [ x ] ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; import java . util . Vector ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] sequence = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sequence [ i ] = sc . nextInt ( ) ; } int koike = 1 ; int tanaka = 0 ; int min = sequence [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= sequence [ i ] ) { tanaka ++ ; } min = Math . min ( min , sequence [ i ] ) ; } System . out . println ( tanaka ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; } if ( ( ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) ) && ( ( c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) == ( c [ 3 ] [ 2 ] - c [ 3 ] [ 1 ] ) ) && ( ( c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] ) == ( c [ 2 ] [ 3 ] - c [ 2 ] [ 2 ] ) ) && ( ( c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] ) == ( c [ 3 ] [ 3 ] - c [ 3 ] [ 2 ] ) ) && ( ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) ) && ( ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) == ( c [ 2 ] [ 3 ] - c [ 1 ] [ 3 ] ) ) && ( ( c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 3 ] [ 2 ] - c [ 2 ] [ 2 ] ) ) && ( ( c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] ) == ( c [ 3 ] [ 3 ] - c [ 2 ] [ 3 ] ) ) ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int maxValue = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= maxValue ; x ++ ) { for ( int y = 0 ; y <= maxValue ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= maxValue ) cnt ++ ; } } System . out . println ( cnt ) ; } } }
import java . util . * ; public class Main { static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { scanner . nextLine ( ) ; System . out . println ( scanner . nextLine ( ) . contains ( " Y " ) ? " Four " : " Three " ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; ArrayList < Integer > numbers = new ArrayList < > ( ) ; int temp = 0 ; for ( int i = 0 ; i < a ; i ++ ) { numbers . add ( sc . nextInt ( ) ) ; } int low = numbers . get ( 0 ) ; for ( int i = 0 ; i < a ; i ++ ) { if ( numbers . get ( i ) < low ) { low = numbers . get ( i ) ; } if ( numbers . get ( i ) <= low ) { temp ++ ; } } System . out . println ( temp ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int count = 0 ; if ( c12 - c11 == c22 - c21 && c22 - c21 == c32 - c31 ) { if ( c13 - c12 == c23 - c22 && c23 - c22 == c33 - c32 ) { if ( c11 - c13 == c21 - c23 && c21 - c23 == c31 - c33 ) { if ( c21 - c11 == c22 - c12 && c22 - c12 == c23 - c13 ) { if ( c31 - c21 == c32 - c22 && c32 - c22 == c33 - c23 ) { if ( c11 - c31 == c12 - c32 && c12 - c32 == c13 - c33 ) { } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } } else { count ++ ; } if ( count != 0 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } sc . close ( ) ; } public static int gcd ( int a , int b ) { if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } int r = - 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; long S = sc . nextLong ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && 0 <= S - i - j ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( n - i - j <= k && n - i - j >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int min = in . nextInt ( ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = in . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scan . nextInt ( ) ; } } int min = C [ 0 ] [ 0 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( C [ 0 ] [ i ] < min ) min = C [ 0 ] [ i ] ; } int check ; for ( int a1 = 0 ; a1 <= min ; a1 ++ ) { int c11 = C [ 0 ] [ 0 ] - a1 ; int a2 = C [ 1 ] [ 0 ] - c11 ; int a3 = C [ 2 ] [ 0 ] - c11 ; boolean flag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { check = C [ 0 ] [ i ] - a1 ; if ( C [ 1 ] [ i ] - a2 != check || C [ 2 ] [ i ] - a3 != check ) { flag = false ; break ; } } if ( flag == true ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { answer ++ ; } } } System . out . println ( answer ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String msg = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { int a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] != a ) { msg = " No " ; break ; } a = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; if ( c [ i ] [ 2 ] - c [ i ] [ 1 ] != a ) { msg = " No " ; break ; } a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; if ( c [ 1 ] [ i ] - c [ 0 ] [ i ] != a ) { msg = " No " ; break ; } a = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; if ( c [ 2 ] [ i ] - c [ 1 ] [ i ] != a ) { msg = " No " ; break ; } } System . out . println ( msg ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int k = 0 ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { k = S - i - j ; if ( ( k <= K ) && ( k >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { String line = " " ; try { line = readLine ( ) ; StringTokenizer st = new StringTokenizer ( line , " " ) ; String k = st . nextToken ( ) ; String s = st . nextToken ( ) ; int k1Value = Integer . parseInt ( k ) ; int sValue = Integer . parseInt ( s ) ; int cnt = 0 ; int x = 0 ; for ( int i = 0 ; i < sValue + 1 ; i ++ ) { if ( i > k1Value ) { continue ; } for ( int j = 0 ; j < sValue + 1 ; j ++ ) { if ( j > k1Value ) { continue ; } else if ( sValue - i - j > k1Value ) { continue ; } if ( i + j <= sValue ) { cnt ++ ; } } } System . out . println ( cnt ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private static String readLine ( ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; return br . readLine ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int res = 0 ; int mi = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; mi = Math . min ( mi , P ) ; if ( mi == P ) { res ++ ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; ArrayList < String > c = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; if ( ! c . contains ( S [ i ] ) ) { c . add ( S [ i ] ) ; } } if ( c . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String line = scanner . nextLine ( ) ; String [ ] split = line . split ( " " ) ; List < Integer > intList = new ArrayList < Integer > ( ) ; for ( String s : split ) { intList . add ( Integer . parseInt ( s ) ) ; } int cnt = 1 ; int min = intList . get ( 0 ) ; for ( int i = 1 ; i < intList . size ( ) ; i ++ ) { int target = intList . get ( i ) ; if ( target <= min ) { cnt ++ ; min = target ; } } int result = cnt ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdIn . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] N ; N = new int [ 4 ] ; N [ 0 ] = sc . nextInt ( ) ; N [ 1 ] = sc . nextInt ( ) ; N [ 2 ] = sc . nextInt ( ) ; N [ 3 ] = sc . nextInt ( ) ; Arrays . sort ( N ) ; if ( N [ 0 ] == 1 ) { if ( N [ 1 ] == 4 ) { if ( N [ 2 ] == 7 ) { if ( N [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; long sum = 0 ; int check = s - 2 * k ; int initial = ( int ) Math . max ( 0 , check ) ; for ( int i = initial ; i <= k ; i ++ ) { int current = s - i ; int start = 0 ; int end = k ; if ( current > 2 * k ) { continue ; } else if ( current > k ) { start = current - k ; sum += end - start + 1 ; } else if ( current >= 0 ) { end = current ; sum += end - start + 1 ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = Math . max ( 0 , s - x - k ) ; y <= Math . min ( k , s - x ) ; y ++ ) { int z = s - x - y ; if ( ( z >= 0 ) && ( z <= k ) ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] list = new int [ n ] ; for ( int i = 0 ; i < list . length ; i ++ ) { list [ i ] = sc . nextInt ( ) ; } int cnt = 1 ; int min = list [ 0 ] ; for ( int i = 1 ; i < list . length ; i ++ ) { if ( min >= list [ i ] ) { cnt ++ ; min = list [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ABeginning solver = new ABeginning ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ABeginning { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = 4 ; int [ ] arr = in . nextArray ( n ) ; Arrays . sort ( arr ) ; out . println ( Arrays . equals ( arr , new int [ ] { 1 , 4 , 7 , 9 } ) ? " YES " : " NO " ) ; } } static class InputReader implements AutoCloseable { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] nextArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; } public void close ( ) { } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] N = new int [ 4 ] ; N [ 0 ] = scan . nextInt ( ) ; N [ 1 ] = scan . nextInt ( ) ; N [ 2 ] = scan . nextInt ( ) ; N [ 3 ] = scan . nextInt ( ) ; Arrays . sort ( N ) ; if ( N [ 0 ] == 1 && N [ 1 ] == 4 && N [ 2 ] == 7 && N [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; System . out . println ( sc . nextLine ( ) . contains ( " Y " ) ? " Four " : " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int temp = 0 ; for ( int i = 0 ; i < ( t - 1 ) ; i ++ ) { int k = sc . nextInt ( ) ; if ( k < min ) { min = k ; temp ++ ; } } System . out . println ( temp + 1 ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] $ ) { Scanner s = new Scanner ( System . in ) ; int a [ ] = new int [ 4 ] ; Arrays . setAll ( a , i -> s . nextInt ( ) ) ; Arrays . sort ( a ) ; int [ ] b = { 1 , 4 , 7 , 9 } ; System . out . println ( Arrays . equals ( a , b ) ? " YES " : " NO " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] sa = br . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sa [ i ] ) ; } br . close ( ) ; int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int E = sc . nextInt ( ) ; int F = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int I = sc . nextInt ( ) ; int sum = A + E + I ; Main main = new Main ( ) ; if ( main . checkSum ( sum , A , H , F ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , D , B , I ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , D , H , C ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , G , E , C ) == false ) { System . out . println ( " No " ) ; return ; } if ( main . checkSum ( sum , G , B , F ) == false ) { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } public boolean checkSum ( int sum , int A , int B , int C ) { if ( A + B + C == sum ) return true ; return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int n = sc . nextInt ( ) ; int [ ] pArray = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pArray [ i ] = sc . nextInt ( ) ; } int min = pArray [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( pArray [ i ] < min ) { count ++ ; min = pArray [ i ] ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { int a = i + j + k ; if ( a == S ) { if ( i == j && j == k ) { count ++ ; } else if ( i != j && j != k && k != i ) { count += 6 ; } else { count += 3 ; } } } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr1 = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; arr1 [ i ] = min ; } else { arr1 [ i ] = min ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= arr1 [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] Pz = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { Pz [ i ] = sc . nextInt ( ) ; } int minVal = 1000000000 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( Pz [ i ] < minVal ) { minVal = Pz [ i ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int n = sc . nextInt ( ) ; if ( n <= min ) { min = n ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = Long . parseLong ( sc . nextLine ( ) ) ; String [ ] arrays = sc . nextLine ( ) . split ( " " ) ; sc . close ( ) ; int count = 0 ; long tmpMax = Long . parseLong ( arrays [ 0 ] ) ; for ( int i = 0 ; i < N ; i ++ ) { long Pi = Long . parseLong ( arrays [ i ] ) ; if ( tmpMax >= Pi ) { count ++ ; tmpMax = Pi ; } else { continue ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; } int sum1 , sum2 , sum3 , sum4 ; sum1 = a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] ; sum2 = a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 2 ] [ 0 ] ; sum3 = a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 0 ] [ 2 ] ; if ( sum1 == sum2 && sum2 == sum3 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int t = S - x - y ; if ( t >= 0 && t <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; break ; } if ( n == 0 ) System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] a = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = sc . next ( ) ; boolean four = false ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] . equals ( " Y " ) ) { four = true ; break ; } } if ( four ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long n = input . nextLong ( ) ; long s = f ( n ) ; System . out . println ( s ) ; } private static long f ( long n ) { if ( n == 0 ) return 2 ; return ( f ( n - 1 ) * 2 ) + 2 ; } }
import java . util . Scanner ; public class Main { static int c [ ] [ ] = new int [ 3 ] [ 3 ] ; @ SuppressWarnings ( " resource " ) public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { if ( judge ( i ) ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } private static boolean judge ( int i ) { int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; boolean jua2 = false ; boolean jua3 = false ; for ( int j = 0 ; j <= 100 ; j ++ ) { if ( c [ 1 ] [ 0 ] - b1 == j && c [ 1 ] [ 1 ] - b2 == j && c [ 1 ] [ 2 ] - b3 == j ) jua2 = true ; } for ( int j = 0 ; j <= 100 ; j ++ ) { if ( c [ 2 ] [ 0 ] - b1 == j && c [ 2 ] [ 1 ] - b2 == j && c [ 2 ] [ 2 ] - b3 == j ) jua3 = true ; } if ( 0 <= b1 && b1 <= 100 && 0 <= b2 && b2 <= 100 && 0 <= b3 && b3 <= 100 && jua2 && jua3 ) return true ; else return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; if ( 3 * k < s ) { System . out . println ( " " ) ; System . exit ( 0 ) ; } int r = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k && y <= s - x ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) { r ++ ; } } } System . out . println ( r ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] strlist = str . split ( " " ) ; int k = Integer . parseInt ( strlist [ 0 ] ) ; int s = Integer . parseInt ( strlist [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count = count + 1 ; continue ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; if ( P <= min ) { res ++ ; min = P ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int a = 0 ; a <= k ; a ++ ) { for ( int b = 0 ; b <= k ; b ++ ) { int c = s - a - b ; if ( 0 <= c && c <= k ) { count ++ ; } } } System . out . println ( count ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = 0 ; int min = sc . nextInt ( ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { m = sc . nextInt ( ) ; if ( m < min ) { min = m ; count ++ ; } if ( m == 1 ) { break ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; class Main { Scanner sc ; int N ; int [ ] P ; private void calc ( ) { sc = new Scanner ( new BufferedInputStream ( System . in ) ) ; int N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int c = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) c ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( c ) ; } public static void main ( String [ ] args ) { new Main ( ) . calc ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] numbers = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { numbers [ i ] = in . nextInt ( ) ; } int tempMin = numbers [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( numbers [ i ] < tempMin ) { count ++ ; tempMin = numbers [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i > S ) { break ; } for ( int j = i ; j <= K ; j ++ ) { if ( i + j > S ) { break ; } for ( int l = j ; l <= K ; l ++ ) { if ( i + j + l == S ) { if ( i < j && j < l ) { answer = answer + 6 ; } else if ( ( i == j && j < l ) || ( i < j && j == l ) ) { answer = answer + 3 ; } else { answer ++ ; } break ; } } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { static int ans = 1 ; static int min ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( sc . next ( ) ) ; } min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { check ( n , a , i ) ; } System . out . println ( ans ) ; } public static void check ( int n , int [ ] a , int i ) { if ( a [ i ] < min ) { min = a [ i ] ; ans ++ ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = { 1 , 4 , 7 , 9 } ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] != b [ i ] ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner stdin = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdin . nextInt ( ) ; } } String result = " No " ; int a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; int a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ; if ( ( c [ 1 ] [ 1 ] == ( a2 + c [ 0 ] [ 1 ] ) ) && ( c [ 1 ] [ 2 ] == ( a2 + c [ 0 ] [ 2 ] ) ) && ( c [ 2 ] [ 1 ] == ( a3 + c [ 0 ] [ 1 ] ) ) && ( c [ 2 ] [ 2 ] == ( a3 + c [ 0 ] [ 2 ] ) ) ) { result = " Yes " ; } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) for ( int y = 0 ; y <= k ; y ++ ) if ( s - x - y <= k && 0 <= s - x - y ) count ++ ; System . out . print ( count ) ; sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; list . add ( a ) ; list . add ( b ) ; list . add ( c ) ; list . add ( d ) ; Collections . sort ( list ) ; if ( list . get ( 0 ) == 1 && list . get ( 1 ) == 4 && list . get ( 2 ) == 7 && list . get ( 3 ) == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int kari = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; boolean hanbetsu = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( ( c [ i ] [ j ] + c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] + c [ ( i + 2 ) % 3 ] [ ( j + 2 ) % 3 ] != kari ) ) { hanbetsu = false ; break ; } } } if ( hanbetsu ) System . out . print ( " Yes " ) ; else System . out . print ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int sum = i + j ; if ( sum <= s && s - sum <= k ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) b [ i ] = arr [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) a [ i ] = arr [ i ] [ 0 ] - b [ 0 ] ; boolean isGood = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ i ] [ j ] != a [ i ] + b [ j ] ) { isGood = false ; } } } System . out . println ( isGood ? " Yes " : " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - ( i + j ) ; if ( 0 <= tmp && tmp <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static int [ ] a ; static boolean res ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; dfs ( " " ) ; System . out . println ( res ? " YES " : " NO " ) ; } public static void dfs ( String current ) { if ( res ) { return ; } if ( current . length ( ) == 4 ) { if ( current . equals ( " 1974 " ) ) { res = true ; } return ; } dfs ( current + a [ 0 ] ) ; dfs ( current + a [ 1 ] ) ; dfs ( current + a [ 2 ] ) ; dfs ( current + a [ 3 ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int inputs = sc . nextInt ( ) ; int num ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < inputs ; i ++ ) { num = sc . nextInt ( ) ; if ( min > num ) { min = num ; } if ( min == num ) { count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { private static BufferedReader br ; private static StringTokenizer tokenizer ; private static void solve ( ) throws IOException { int n = nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } int min = arr [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , arr [ i ] ) ; if ( min >= arr [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solve ( ) ; } public static String next ( ) throws IOException { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { String line = br . readLine ( ) ; if ( line == null ) throw new IOException ( ) ; tokenizer = new StringTokenizer ( line ) ; } return tokenizer . nextToken ( ) ; } public static int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public static long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public static double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static BufferedReader in ; static PrintWriter out ; static StringTokenizer tok ; void solve ( ) throws IOException { int x = ni ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans ++ ; ans *= 2 ; } out . println ( ans ) ; } String ns ( ) throws IOException { while ( ! tok . hasMoreTokens ( ) ) { tok = new StringTokenizer ( in . readLine ( ) , " " ) ; } return tok . nextToken ( ) ; } int ni ( ) throws IOException { return Integer . parseInt ( ns ( ) ) ; } long nl ( ) throws IOException { return Long . parseLong ( ns ( ) ) ; } double nd ( ) throws IOException { return Double . parseDouble ( ns ( ) ) ; } String [ ] nsa ( int n ) throws IOException { String [ ] res = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = ns ( ) ; } return res ; } int [ ] nia ( int n ) throws IOException { int [ ] res = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = ni ( ) ; } return res ; } long [ ] nla ( int n ) throws IOException { long [ ] res = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = nl ( ) ; } return res ; } public static void main ( String [ ] args ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; tok = new StringTokenizer ( " " ) ; Main main = new Main ( ) ; main . solve ( ) ; out . close ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int ans = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; ++ i ) { int x = in . nextInt ( ) ; if ( x < min ) { ++ ans ; } min = Math . min ( min , x ) ; } out . println ( ans ) ; } public static void main ( String [ ] args ) throws Exception { InputReader in = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; Main solver = new Main ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class InputReader { BufferedReader in ; StringTokenizer st ; public InputReader ( InputStream is ) { in = new BufferedReader ( new InputStreamReader ( is ) ) ; } public String next ( ) { try { while ( st == null || ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( in . readLine ( ) ) ; } return st . nextToken ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int min = Integer . MAX_VALUE ; int answer = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) answer ++ ; if ( P [ i ] < min ) min = P [ i ] ; } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; s += sc . next ( ) ; s += sc . next ( ) ; s += sc . next ( ) ; if ( s . contains ( " 1 " ) && s . contains ( " 9 " ) && s . contains ( " 4 " ) && s . contains ( " 7 " ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; import java . lang . * ; import java . util . * ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ; int ca = 1 ; solver . solve ( ca , in , out ) ; out . close ( ) ; } static class Solver { public void solve ( int ca , InputReader in , PrintWriter out ) { while ( ca -- != 0 ) { int cnt [ ] = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { cnt [ in . nextInt ( ) ] ++ ; } if ( cnt [ 1 ] == 1 && cnt [ 9 ] == 1 && cnt [ 7 ] == 1 && cnt [ 4 ] == 1 ) { out . print ( " YES " ) ; } else { out . println ( " NO " ) ; } } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public BigInteger nextBigInteger ( ) { return new BigInteger ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int K = stdIn . nextInt ( ) ; int S = stdIn . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y <= K && S - X - Y >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x , y , z ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && s - x - y <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int matrix [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { matrix [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int j = 0 ; j < 2 ; j ++ ) { for ( int i = 1 ; i < 3 ; i ++ ) { if ( matrix [ i - 1 ] [ j ] - matrix [ i - 1 ] [ j + 1 ] != matrix [ i ] [ j ] - matrix [ i ] [ j + 1 ] ) { System . out . println ( " No " ) ; return ; } } } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( matrix [ i + 1 ] [ j - 1 ] - matrix [ i ] [ j - 1 ] != matrix [ i + 1 ] [ j ] - matrix [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] values = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { values [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = false ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { for ( int k = 0 ; k < 101 ; k ++ ) { int b1 = values [ 0 ] [ 0 ] - i ; int b2 = values [ 0 ] [ 1 ] - i ; int b3 = values [ 0 ] [ 2 ] - i ; if ( b1 < 0 || b2 < 0 || b3 < 0 ) continue ; if ( ( values [ 1 ] [ 0 ] == j + b1 && values [ 1 ] [ 1 ] == j + b2 && values [ 1 ] [ 2 ] == j + b3 ) && ( values [ 2 ] [ 0 ] == k + b1 && values [ 2 ] [ 1 ] == k + b2 && values [ 2 ] [ 2 ] == k + b3 ) ) { ok = true ; } } } } System . out . println ( ok ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public void main ( Scanner sc ) { int n [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } if ( ! check ( n [ 0 ] - n [ 1 ] , n [ 3 ] - n [ 4 ] , n [ 6 ] - n [ 7 ] ) || ! check ( n [ 1 ] - n [ 2 ] , n [ 4 ] - n [ 5 ] , n [ 7 ] - n [ 8 ] ) || ! check ( n [ 0 ] - n [ 3 ] , n [ 1 ] - n [ 4 ] , n [ 2 ] - n [ 5 ] ) || ! check ( n [ 3 ] - n [ 6 ] , n [ 4 ] - n [ 7 ] , n [ 5 ] - n [ 8 ] ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } private boolean check ( int sa1 , int sa2 , int sa3 ) { return ( sa1 == sa2 ) && ( sa2 == sa3 ) && ( sa3 == sa1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int a = c11 - c21 ; int b = c12 - c22 ; int d = c13 - c23 ; int e = c21 - c31 ; int f = c22 - c32 ; int g = c23 - c33 ; if ( a == b & b == d & e == f & f == g ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; String [ ] S = sc . nextLine ( ) . split ( " " ) ; int min = 100000000 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int M = Integer . parseInt ( S [ i ] ) ; if ( M <= min ) { min = M ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { static final long MOD = 1_000_000_007 ; static final int MAX = 2_147_483_646 ; static final int INF = 1_000_000_000 ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int min = MAX ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { min = tmp ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int max = sc . nextInt ( ) ; int sum = sc . nextInt ( ) ; int result = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int tmp = sum - i - j ; if ( 0 <= tmp && tmp <= max ) result ++ ; } } System . out . println ( Integer . toString ( result ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( ( 0 <= Z ) && ( Z <= K ) ) sum ++ ; } } System . out . println ( sum ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int mini = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { mini = p [ i ] ; } else { mini = Math . min ( mini , p [ i ] ) ; } if ( mini < p [ i ] ) { count ++ ; } } System . out . println ( n - count ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int minium = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= minium ) { minium = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } br . close ( ) ; long ans = 0 ; int x = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == x ) { x ++ ; } ans += ( a [ i ] - 1 ) / x ; if ( x == 1 ) { x ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) >= 0 && s - ( i + j ) <= k ) { count += 1 ; } } } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = 0 ; Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { a [ 0 ] = i ; a [ 1 ] = j ; a [ 2 ] = k ; b [ 0 ] = c [ 0 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - i ; b [ 2 ] = c [ 0 ] [ 2 ] - i ; if ( check ( a , b , c ) ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } static boolean check ( int a [ ] , int b [ ] , int c [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { return false ; } } } return true ; } }
import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { TakashiInfo solver = new TakashiInfo ( ) ; solver . readInput ( ) ; solver . solve ( ) ; solver . writeOutput ( ) ; } static class TakashiInfo { private int map [ ] [ ] = new int [ 3 ] [ 3 ] ; private Scanner scanner ; private String output ; public TakashiInfo ( ) { scanner = new Scanner ( System . in ) ; } public void readInput ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { map [ i ] [ j ] = Integer . parseInt ( scanner . next ( ) ) ; } } } public void solve ( ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { map [ i ] [ j ] -= map [ i ] [ 0 ] ; } } output = ( map [ 0 ] [ 1 ] == map [ 1 ] [ 1 ] && map [ 1 ] [ 1 ] == map [ 2 ] [ 1 ] && map [ 0 ] [ 2 ] == map [ 1 ] [ 2 ] && map [ 1 ] [ 2 ] == map [ 2 ] [ 2 ] ) ? " Yes " : " No " ; } public void writeOutput ( ) { System . out . println ( output ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cou = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) { cou ++ ; } } } System . out . println ( cou ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= min ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int p = 0 ; p <= K ; p ++ ) { for ( int q = 0 ; q <= K ; q ++ ) { if ( S - p - q <= K && 0 <= S - p - q ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int cou = 1 ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 999999999 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , p [ i - 1 ] ) ; if ( p [ i ] < min ) { cou ++ ; } } System . out . print ( cou ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j < 0 || s - i - j > k ) { continue ; } cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String [ ] tokens = in . nextLine ( ) . split ( " " ) ; in . close ( ) ; Set < Integer > values = new HashSet < > ( ) ; for ( int i = 0 ; i < tokens . length ; ++ i ) { values . add ( Integer . parseInt ( tokens [ i ] ) ) ; } if ( values . contains ( 1 ) && values . contains ( 9 ) && values . contains ( 7 ) && values . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { InputStream in = System . in ; Scanner sc = new Scanner ( in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int num = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { num ++ ; } } } System . out . println ( num ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; long next = 2 ; for ( int i = 0 ; i < x ; i ++ ) { next = ( next + 1 ) * 2 ; } System . out . println ( next ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int Z = S - i - j ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner c = new java . util . Scanner ( System . in ) ; int k = c . nextInt ( ) , s = c . nextInt ( ) ; System . out . println ( java . util . stream . IntStream . range ( 0 , k + 1 ) . map ( x -> s - x + 1 - Math . min ( s - x + 1 , Math . max ( 0 , ( s - x - k ) * 2 ) ) ) . sum ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = in . nextInt ( ) ; for ( int i = 0 ; i <= 100 ; i ++ ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; boolean ok = true ; for ( int j = 0 ; j < 3 ; j ++ ) a [ j ] = arr [ j ] [ 0 ] - i ; for ( int j = 0 ; j < 3 ; j ++ ) b [ j ] = arr [ 0 ] [ j ] - a [ 0 ] ; for ( int k = 0 ; k < 3 ; k ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ k ] [ j ] != a [ k ] + b [ j ] ) ok = false ; } } if ( ok ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; Integer [ ] numbs = { a , b , c , d } ; String strBl ; if ( Arrays . asList ( numbs ) . contains ( 1 ) && Arrays . asList ( numbs ) . contains ( 9 ) && Arrays . asList ( numbs ) . contains ( 7 ) && Arrays . asList ( numbs ) . contains ( 4 ) ) { strBl = " YES " ; } else { strBl = " NO " ; } System . out . println ( strBl ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int k = stdIn . nextInt ( ) ; int s = stdIn . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; Integer count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - ( i + j ) ; if ( 0 <= z && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int A [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int cnt = 1 ; int min = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= A [ i ] ) { cnt ++ ; min = A [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; String [ ] s = new String [ n ] ; boolean hantei = true ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scan . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { hantei = false ; } } if ( hantei == true ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > hashset = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hashset . add ( sc . next ( ) ) ; } if ( hashset . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j <= k && s - j - i >= 0 ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { static int c [ ] [ ] ; public static boolean judge ( int tmpa , int tmpb ) { int b [ ] = new int [ 3 ] ; int a [ ] = new int [ 3 ] ; a [ 0 ] = tmpa ; b [ 0 ] = tmpb ; for ( int i = 1 ; i < 3 ; ++ i ) b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; for ( int i = 1 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { int tmp = a [ i ] + b [ j ] ; if ( c [ i ] [ j ] != tmp ) return false ; } } return true ; } public static boolean solve ( ) { for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; ++ i ) { if ( judge ( i , c [ 0 ] [ 0 ] - i ) ) return true ; } return false ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) c [ i ] [ j ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 1 ; String ans [ ] = { " Yes " , " No " } ; if ( solve ( ) ) a = 0 ; System . out . println ( ans [ a ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scn = new Scanner ( System . in ) ; boolean [ ] n = new boolean [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int a = scn . nextInt ( ) ; switch ( a ) { case 1 : n [ 0 ] = true ; break ; case 9 : n [ 1 ] = true ; break ; case 7 : n [ 2 ] = true ; break ; case 4 : n [ 3 ] = true ; break ; default : break ; } } boolean ans = true ; for ( int i = 0 ; i < 4 ; i ++ ) { ans &= n [ i ] ; } System . out . println ( ans ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { if ( x > S ) break ; for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) break ; int z = S - x - y ; if ( z <= K ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int min = 200001 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int a = scan . nextInt ( ) ; if ( a < min ) { min = a ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] array = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { array [ i ] [ j ] = sc . nextInt ( ) ; } } int old = 5000 ; int a = array [ 0 ] [ 0 ] ; int b = array [ 0 ] [ 1 ] ; int c = array [ 0 ] [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { int d = array [ i + 1 ] [ 0 ] - a ; int e = array [ i + 1 ] [ 1 ] - b ; int f = array [ i + 1 ] [ 2 ] - c ; if ( d == e && e == f ) { if ( i == 1 ) { System . out . println ( " Yes " ) ; return ; } } else { System . out . println ( " No " ) ; return ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] min = new int [ n ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int result = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int total = x + y ; if ( ! ( total > S ) && ( total + K ) >= S ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { c [ i ] [ k ] = Integer . parseInt ( scan . next ( ) ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int k = 0 ; k < 3 ; ++ k ) { if ( c [ i ] [ k ] != x [ i ] + y [ k ] ) { System . out . println ( " No " ) ; return ; } } } System . out . print ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = stdIn . nextInt ( ) ; } } int s1 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ; int s2 = c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; int s3 = c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; int s4 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ; int s5 = c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; int s6 = c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; int s7 = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; int s8 = c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ; int s9 = c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ; int s10 = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; int s11 = c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ; int s12 = c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ; if ( s1 == s2 && s2 == s3 && s4 == s5 && s5 == s6 && s7 == s8 && s8 == s9 && s10 == s11 && s11 == s12 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String line [ ] = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( line [ 0 ] ) ; int s = Integer . parseInt ( line [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . Scanner ; class Main { int [ ] [ ] c ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } } void solve ( ) { int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int min = Math . min ( c [ 0 ] [ 0 ] , Math . min ( c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ) ) ; for ( int i = 0 ; i <= min ; i ++ ) { a [ 0 ] = i ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 1 ] - b [ 1 ] ; check : for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ j ] [ k ] != a [ j ] + b [ k ] ) break check ; if ( j == 2 && k == 2 ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ; int K = cin . nextInt ( ) ; int S = cin . nextInt ( ) ; int c = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int i , j ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } sc . close ( ) ; sc = null ; int a1 , a2 , a3 , b1 , b2 , b3 ; String ans = " No " ; LABEL : for ( a1 = 0 ; a1 <= 100 ; a1 ++ ) { for ( a2 = 0 ; a2 <= 100 ; a2 ++ ) { for ( a3 = 0 ; a3 <= 100 ; a3 ++ ) { b1 = c [ 0 ] [ 0 ] - a1 ; b2 = c [ 0 ] [ 1 ] - a1 ; b3 = c [ 0 ] [ 2 ] - a1 ; if ( a2 + b1 == c [ 1 ] [ 0 ] && a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b1 == c [ 2 ] [ 0 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { ans = " Yes " ; break LABEL ; } } } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastReader in = new FastReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TripletSum solver = new TripletSum ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TripletSum { public void solve ( int testNumber , FastReader fs , PrintWriter pw ) { int k = fs . nextInt ( ) , Sum = fs . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int p = Sum - i - j ; if ( p < 0 || p > k ) continue ; ans += 1 ; } } pw . println ( ans ) ; } } static class FastReader { BufferedReader bf ; StringTokenizer st ; public FastReader ( InputStream is ) { bf = new BufferedReader ( new InputStreamReader ( is ) ) ; st = null ; } public String next ( ) { try { while ( st == null || ! st . hasMoreTokens ( ) ) { String line = bf . readLine ( ) ; if ( line == null ) return null ; st = new StringTokenizer ( line ) ; } } catch ( Exception e ) { } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . Scanner ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x < k + 1 ; x ++ ) { for ( int y = 0 ; y < k + 1 ; y ++ ) { if ( s - x - y < k + 1 && s - x - y >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = sc . nextInt ( ) ; boolean hasYellow = false ; for ( int i = 0 ; i < count ; i ++ ) { String color = sc . next ( ) ; if ( color . equals ( " Y " ) ) hasYellow = true ; } if ( hasYellow ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long cnt = 1 ; long t = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long m = sc . nextLong ( ) ; if ( t > m ) { cnt ++ ; t = m ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int a = 0 ; a <= K ; a ++ ) { for ( int b = 0 ; b <= K ; b ++ ) { if ( S - ( a + b ) <= K && S - ( a + b ) >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] suuji = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { suuji [ i ] = sc . nextInt ( ) ; } int min = suuji [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > suuji [ i ] ) { min = suuji [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 1 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 1 ] [ 3 ] ) { out . println ( " Yes " ) ; } else { out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( 0 <= s - x - y && s - x - y <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int i = 0 ; int min = N + 1 ; int count = 0 ; int P [ ] = new int [ N ] ; for ( i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] < min ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; Integer n = scan . nextInt ( ) ; ArrayList < Integer > array = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) array . add ( scan . nextInt ( ) ) ; int min = array . get ( 0 ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array . get ( i ) < min ) { min = array . get ( i ) ; count ++ ; } } System . out . println ( count + 1 ) ; } static int factorial ( int n ) { if ( n == 0 ) { return 1 ; } return n * factorial ( n - 1 ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = stdIn . next ( ) ; } Arrays . sort ( s ) ; int cnt = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( ! s [ i ] . equals ( s [ i + 1 ] ) ) { cnt ++ ; } } if ( cnt == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; static void p ( String ans ) { System . out . println ( ans ) ; } ; static void p ( int ans ) { System . out . println ( ans ) ; } ; static void p ( long ans ) { System . out . println ( ans ) ; } ; static void p ( double ans ) { System . out . println ( ans ) ; } ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int p [ ] = new int [ N ] ; int min = 0 ; int ctn = 0 ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i == 0 ) { min = p [ i ] ; } if ( min >= p [ i ] ) { min = p [ i ] ; ctn ++ ; } } p ( ctn ) ; } static boolean te ( ) { return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int n = Integer . parseInt ( scanner . next ( ) ) ; int p = Integer . MAX_VALUE ; int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pp = Integer . parseInt ( scanner . next ( ) ) ; if ( pp <= p ) r ++ ; p = Integer . min ( p , pp ) ; } System . out . println ( r ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 9999999 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; boolean judge = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] ; } for ( int i = 1 ; i < 3 ; i ++ ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != ( a [ i ] + b [ j ] ) ) { judge = false ; } } } if ( judge ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; min = Math . min ( min , p ) ; if ( p <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; String [ ] S = sc . nextLine ( ) . split ( " " ) ; boolean f = false ; for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] . equals ( " Y " ) ) { f = true ; break ; } } System . out . println ( f ? " Four " : " Three " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( in . readLine ( ) ) ; String [ ] str = in . readLine ( ) . split ( " " ) ; int [ ] p = new int [ n ] ; int min = 100000 * 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( str [ i ] ) ; min = Math . min ( p [ i ] , min ) ; if ( p [ i ] <= min ) count ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = s . nextInt ( ) ; } } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b ) { b = c [ i ] [ j ] - c [ i ] [ j + 1 ] == c [ i + 1 ] [ j ] - c [ i + 1 ] [ j + 1 ] ; } } } String str = b ? " Yes " : " No " ; System . out . println ( str ) ; } }
import java . util . Scanner ; public class Main { static long x ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { for ( int y = 0 ; y <= K && x + y <= S ; y ++ ) { if ( S - x - y <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int tmp = s - i - j ; if ( 0 <= tmp && tmp <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( " " , 4 ) ; int [ ] arr = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = Integer . parseInt ( line [ i ] ) ; } Arrays . sort ( arr ) ; if ( arr [ 0 ] == 1 && arr [ 1 ] == 4 && arr [ 2 ] == 7 && arr [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { int x , y , z , k , s , count = 0 ; Scanner scan = new Scanner ( System . in ) ; k = scan . nextInt ( ) ; s = scan . nextInt ( ) ; if ( s / k == 3 ) { count ++ ; } else { for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) { res ++ ; } } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int max = p [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max > p [ i ] ) { max = p [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { final Scanner sc = new Scanner ( System . in ) ; final int K = sc . nextInt ( ) ; final int S = sc . nextInt ( ) ; long count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { final int k = S - ( i + j ) ; if ( 0 <= k && k <= K ) { count ++ ; } } } System . out . println ( count ) ; } public static class Scanner implements Closeable { private BufferedReader br ; private StringTokenizer tok ; public Scanner ( InputStream is ) throws IOException { br = new BufferedReader ( new InputStreamReader ( is ) ) ; } private void getLine ( ) throws IOException { while ( ! hasNext ( ) ) { tok = new StringTokenizer ( br . readLine ( ) ) ; } } private boolean hasNext ( ) { return tok != null && tok . hasMoreTokens ( ) ; } public String next ( ) throws IOException { getLine ( ) ; return tok . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) throws IOException { final int [ ] ret = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ret [ i ] = this . nextInt ( ) ; } return ret ; } public void close ( ) throws IOException { br . close ( ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Set < String > hinaSet = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hinaSet . add ( sc . next ( ) ) ; } sc . close ( ) ; if ( hinaSet . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " P " ) ) { count ++ ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " W " ) ) { count ++ ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " G " ) ) { count ++ ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " Y " ) ) { count ++ ; break ; } } if ( count == 3 ) { System . out . println ( " Three " ) ; } else if ( count == 4 ) { System . out . println ( " Four " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . List ; import java . util . StringTokenizer ; import java . util . stream . Collectors ; import java . util . stream . IntStream ; public class Main { public static void main ( final String [ ] args ) { final FastScanner scanner = new FastScanner ( System . in ) ; final int n = scanner . nextInt ( ) ; final List < Integer > list = IntStream . range ( 0 , n ) . mapToObj ( i -> scanner . nextInt ( ) ) . collect ( Collectors . toList ( ) ) ; long sum = list . get ( 0 ) - 1 ; long min = 2 ; for ( int i = 1 ; i < n ; i ++ ) { final int value = list . get ( i ) ; if ( value < min ) { continue ; } else if ( value == min ) { min ++ ; continue ; } sum += ( value - 1 ) / min ; } System . out . println ( sum ) ; } private static class FastScanner { private final BufferedReader reader ; private StringTokenizer tokenizer ; FastScanner ( final InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( final IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; } } int [ ] total = new int [ 6 ] ; total [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; total [ 1 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ; total [ 2 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; total [ 3 ] = c [ 0 ] [ 1 ] + c [ 2 ] [ 0 ] + c [ 1 ] [ 2 ] ; total [ 4 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; total [ 5 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( total [ 0 ] == total [ 1 ] && total [ 1 ] == total [ 2 ] && total [ 2 ] == total [ 3 ] && total [ 3 ] == total [ 4 ] && total [ 4 ] == total [ 5 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int s = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { if ( i > s ) break ; for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j > s ) break ; if ( ( s - ( i + j ) ) <= k ) count += 1 ; } } System . out . println ( count ) ; } }
import javax . print . DocFlavor ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . nio . charset . StandardCharsets ; import java . util . * ; import java . util . function . BiConsumer ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; ArrayList set = new ArrayList ( ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . remove ( " 1 " ) ; set . remove ( " 9 " ) ; set . remove ( " 7 " ) ; set . remove ( " 4 " ) ; String ans = " NO " ; if ( set . size ( ) == 0 ) { ans = " YES " ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] N = new int [ 4 ] ; int [ ] Y = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { N [ i ] = sc . nextInt ( ) ; Y [ N [ i ] ] ++ ; } if ( Y [ 1 ] > 0 && Y [ 4 ] > 0 && Y [ 7 ] > 0 && Y [ 9 ] > 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } sc . close ( ) ; } }
import java . util . * ; class Main { static int [ ] [ ] c ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; a [ 0 ] = sc . nextInt ( ) ; a [ 1 ] = sc . nextInt ( ) ; a [ 2 ] = sc . nextInt ( ) ; a [ 3 ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; String ans = ( a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ) ? " YES " : " NO " ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } List < String > list2 = new ArrayList < String > ( new HashSet < > ( list ) ) ; if ( list2 . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static String ans = " " , s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; int [ ] P = nextIntArray1origin ( sc , N ) ; sc . close ( ) ; int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } @ SuppressWarnings ( " unused " ) private int [ ] nextIntArray1origin ( Scanner sc , int n ) { int [ ] result = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { result [ i ] = sc . nextInt ( ) ; } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; String [ ] nums = sc . nextLine ( ) . split ( " " ) ; int cont = 1 ; int bump = Integer . parseInt ( nums [ 0 ] ) ; for ( int i = 1 ; i < nums . length ; i ++ ) { if ( Integer . parseInt ( nums [ i ] ) < bump ) { bump = Integer . parseInt ( nums [ i ] ) ; cont ++ ; } } System . out . println ( cont ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Long > list = new ArrayList < Long > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { list . add ( sc . nextLong ( ) ) ; } for ( int a1 = 0 ; a1 <= list . get ( 0 ) ; a1 ++ ) { List < Long > list2 = new ArrayList < Long > ( ) ; long b1 = list . get ( 0 ) - a1 ; long b2 = list . get ( 1 ) - a1 ; long b3 = list . get ( 2 ) - a1 ; long a2 = list . get ( 4 ) - b2 ; long a3 = list . get ( 8 ) - b3 ; list2 . add ( a1 + b1 ) ; list2 . add ( a1 + b2 ) ; list2 . add ( a1 + b3 ) ; list2 . add ( a2 + b1 ) ; list2 . add ( a2 + b2 ) ; list2 . add ( a2 + b3 ) ; list2 . add ( a3 + b1 ) ; list2 . add ( a3 + b2 ) ; list2 . add ( a3 + b3 ) ; boolean flag = true ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( list . get ( i ) < 0 || list2 . get ( i ) < 0 ) { flag = false ; break ; } if ( ! list . get ( i ) . equals ( list2 . get ( i ) ) ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int stack ; int start = 0 ; if ( s - 2 * k > 0 ) start = s - 2 * k ; int end = k ; if ( s < k ) end = s ; for ( int x = 0 ; x <= k ; x ++ ) { stack = s - x ; if ( stack <= 2 * k && stack >= 0 ) { if ( stack <= k ) count += stack + 1 ; else count += k - ( stack - k ) + 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; long min = Long . MAX_VALUE ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long temp = Long . parseLong ( sc . next ( ) ) ; if ( min > temp ) { ans ++ ; min = temp ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = Integer . parseInt ( scan . next ( ) ) ; int S = Integer . parseInt ( scan . next ( ) ) ; int cou = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) { if ( i + j + ( S - i - j ) == S ) { cou ++ ; } } } } System . out . println ( cou ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , sum = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { sum = s - i - j ; if ( 0 <= sum && sum <= k ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { System . out . println ( solve ( ) ) ; } public static int solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; Queue < Integer > q = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { q . add ( arr [ i ] ) ; if ( arr [ i ] <= q . peek ( ) ) { sum ++ ; } } return sum ; } }
import java . io . IOException ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean ans = false ; for ( int i = 0 ; i < n ; i ++ ) { String c = sc . next ( ) ; if ( c . contains ( " Y " ) ) { ans = true ; break ; } } if ( ans ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int num ; int count = 1 ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; } num = p [ 0 ] ; for ( int i = 1 ; i < p . length ; ++ i ) { if ( p [ i ] < num ) { count += 1 ; num = p [ i ] ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , s - 2 * k ) ; x <= Math . min ( k , s ) ; x ++ ) { ans += Math . max ( Math . min ( k , s - x ) - Math . max ( 0 , s - x - k ) + 1 , 0 ) ; } out . println ( ans ) ; } } }
import java . io . IOException ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean A = false ; for ( int i = 0 ; i < N ; i ++ ) { String C = sc . next ( ) ; if ( C . contains ( " Y " ) ) { A = true ; break ; } } System . out . println ( A ? " Four " : " Three " ) ; } }
import java . io . * ; import java . util . * ; public class Main { public void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } long ans = 0 ; int min = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int buy = 0 ; if ( a [ i ] % min == 0 ) { buy = ( a [ i ] - 1 ) / min ; } else { buy = a [ i ] / min ; } ans += buy ; a [ i ] -= buy * min ; if ( a [ i ] == min && ( buy == 0 || min == 1 ) ) { min ++ ; } } out . println ( ans ) ; } public void run ( ) { in = new FastScanner ( ) ; out = new PrintWriter ( System . out ) ; solve ( ) ; out . close ( ) ; } FastScanner in ; PrintWriter out ; class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( String fileName ) { try { br = new BufferedReader ( new FileReader ( fileName ) ) ; } catch ( FileNotFoundException e ) { } } public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String nextToken ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; Integer n = s . nextInt ( ) ; long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { Integer p = s . nextInt ( ) ; if ( p <= min ) { count ++ ; } min = Math . min ( p , min ) ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x = 0 ; int count = 0 ; int y = 0 ; int z = 0 ; Set < Integer > al = new HashSet < > ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { al . add ( i ) ; } for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( al . contains ( s - i - j ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int count = 0 ; sc . nextLine ( ) ; String line = sc . nextLine ( ) ; String [ ] array = line . split ( " " ) ; int pi ; int min = a + 1 ; for ( int i = 0 ; i < a ; i ++ ) { pi = Integer . parseInt ( array [ i ] ) ; if ( min > pi ) { count ++ ; min = pi ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] tmpArray = br . readLine ( ) . split ( " " ) ; int [ ] low = new int [ n ] ; int result = 1 ; low [ 0 ] = Integer . parseInt ( tmpArray [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = Integer . parseInt ( tmpArray [ i ] ) ; if ( tmp > low [ i - 1 ] ) { low [ i ] = low [ i - 1 ] ; } else { low [ i ] = tmp ; result ++ ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( Z <= K && Z >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String ans = " Yes " ; int list [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int num = sc . nextInt ( ) ; list [ i ] [ j ] = num ; } } int tmpListA [ ] = new int [ 3 ] ; int tmpListB [ ] = new int [ 3 ] ; tmpListA [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { tmpListB [ i ] = list [ 0 ] [ i ] - tmpListA [ 0 ] ; tmpListA [ i ] = list [ i ] [ 0 ] - tmpListB [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( list [ i ] [ j ] == ( tmpListA [ i ] + tmpListB [ j ] ) ) { continue ; } else { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , Scanner sc , PrintWriter pw ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) c ++ ; min = Math . min ( min , arr [ i ] ) ; } pw . println ( c ) ; } } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( FileReader r ) { br = new BufferedReader ( r ) ; } public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . charset . StandardCharsets ; import java . util . Arrays ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String line = in . readLine ( ) ; for ( int j = 0 ; j < 3 ; j ++ ) { String [ ] line_char = line . split ( " " ) ; grid [ i ] [ j ] = Integer . parseInt ( line_char [ j ] ) ; } } boolean trueFlag = true ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( grid [ i ] [ j ] - grid [ i - 1 ] [ j ] != grid [ i ] [ j + 1 ] - grid [ i - 1 ] [ j + 1 ] ) { trueFlag = false ; } } } if ( trueFlag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = s . nextInt ( ) ; } } boolean can = true ; can &= c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; can &= c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; can &= c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; can &= c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; System . out . println ( can ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = n ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; min = Math . min ( min , p ) ; if ( p <= min ) cnt ++ ; } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; String check = " Yes " ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = a [ 3 ] - a [ 0 ] ; int x2 = a [ 6 ] - a [ 3 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = " No " ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = " No " ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = " No " ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = " No " ; } System . out . println ( check ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ans = true ; for ( int i = 0 ; i < 2 ; i ++ ) { int left = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int center = c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] ; int right = c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] ; if ( left != center || center != right || right != left ) { ans = false ; } } for ( int j = 0 ; j < 2 ; j ++ ) { int up = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] ; int center = c [ 1 ] [ j + 1 ] - c [ 1 ] [ j ] ; int down = c [ 2 ] [ j + 1 ] - c [ 2 ] [ j ] ; if ( up != down || up != center || down != center ) { ans = false ; } } if ( ans ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { ans ++ ; } min = Math . min ( min , p [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j <= k && s - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; int cnt = 1 ; ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = sc . nextInt ( ) ; int tmp = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( tmp > p [ i ] ) cnt ++ ; if ( p [ i ] < tmp ) tmp = p [ i ] ; } System . out . println ( cnt ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] cc = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int k = 1 ; k <= 3 ; k ++ ) { cc [ i ] [ k ] = sc . nextInt ( ) ; } } loop : for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { for ( int k = 0 ; k <= 100 ; k ++ ) { int a = cc [ 1 ] [ 1 ] - i ; int b = cc [ 1 ] [ 2 ] - i ; int c = cc [ 1 ] [ 3 ] - i ; int d = cc [ 2 ] [ 1 ] - j ; int e = cc [ 2 ] [ 2 ] - j ; int f = cc [ 2 ] [ 3 ] - j ; int g = cc [ 3 ] [ 1 ] - k ; int h = cc [ 3 ] [ 2 ] - k ; int l = cc [ 3 ] [ 3 ] - k ; if ( a == d && d == g && b == e && e == h && c == f && f == l ) { System . out . println ( " Yes " ) ; break loop ; } } } if ( i == 100 ) { System . out . println ( " No " ) ; break ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { C [ r ] [ c ] = in . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] a2 = new int [ 3 ] [ 3 ] ; a [ 0 ] = 0 ; for ( int c = 0 ; c < 3 ; c ++ ) { b [ c ] = C [ 0 ] [ c ] - a [ 0 ] ; } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { a2 [ r ] [ c ] = C [ r ] [ c ] - b [ c ] ; } } for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 1 ; c < 3 ; c ++ ) { if ( a2 [ r ] [ c - 1 ] != a2 [ r ] [ c ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] s = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( s [ 0 ] ) ; int S = Integer . parseInt ( s [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k <= K && k >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] P = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < P . length ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( final String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; long N ; N = sc . nextLong ( ) ; long [ ] P = new long [ ( int ) ( N ) ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } final Solver solver = new Solver ( ) ; solver . solve ( N , P ) ; } } class Solver { public void solve ( long N , long [ ] P ) { long ans = 0 ; long min = Long . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] arr = { sc . nextInt ( ) , sc . nextInt ( ) , sc . nextInt ( ) , sc . nextInt ( ) } ; Arrays . sort ( arr ) ; int [ ] ok = { 1 , 4 , 7 , 9 } ; System . out . println ( Arrays . equals ( arr , ok ) ? " YES " : " NO " ) ; } }
import java . io . * ; import java . util . * ; public class Main { void submit ( ) { int N = nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = nextInt ( ) ; } int count = 1 ; if ( N == 1 ) { out . println ( count ) ; return ; } int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } out . println ( count ) ; } void preCalc ( ) { } void stress ( ) { } void test ( ) { } Main ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; preCalc ( ) ; submit ( ) ; out . close ( ) ; } static final Random rng = new Random ( ) ; static int rand ( int l , int r ) { return l + rng . nextInt ( r - l + 1 ) ; } public static void main ( String [ ] args ) throws IOException { new Main ( ) ; } BufferedReader br ; PrintWriter out ; StringTokenizer st ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } String nextString ( ) { try { return br . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static PrintWriter out ; static CF_Reader in ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; in = new CF_Reader ( ) ; int n = in . intNext ( ) ; int [ ] nums = in . nextIntArray ( n ) ; int res = 0 ; int minVal = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( nums [ i ] <= minVal ) { minVal = nums [ i ] ; res += 1 ; } } out . println ( res ) ; out . close ( ) ; } static class CF_Reader { BufferedReader br ; StringTokenizer st ; public CF_Reader ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } long longNext ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } int intNext ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } double doubleNext ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } char charNext ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } public int [ ] nextIntArray ( final int n ) throws IOException { final int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = intNext ( ) ; return a ; } public long [ ] nextLongArray ( final int n ) throws IOException { final long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = longNext ( ) ; return a ; } String line ( ) throws IOException { return br . readLine ( ) . trim ( ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int [ ] [ ] map = new int [ 3 ] [ 3 ] ; int [ ] [ ] subMap = new int [ 3 ] [ 3 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { map [ i ] [ 0 ] = in . nextInt ( ) ; map [ i ] [ 1 ] = in . nextInt ( ) ; map [ i ] [ 2 ] = in . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { subMap [ i ] [ 0 ] = map [ i ] [ 0 ] - map [ 0 ] [ 0 ] ; subMap [ i ] [ 1 ] = map [ i ] [ 1 ] - map [ 0 ] [ 1 ] ; subMap [ i ] [ 2 ] = map [ i ] [ 2 ] - map [ 0 ] [ 2 ] ; if ( subMap [ i ] [ 0 ] == subMap [ i ] [ 1 ] && subMap [ i ] [ 0 ] == subMap [ i ] [ 2 ] ) { } else { ans = " No " ; } } out . print ( ans ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { static int [ ] parent ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < x ; i ++ ) { ans = ( ans + 1 ) * 2 ; } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int day = sc . nextInt ( ) , n = sc . nextInt ( ) ; int [ ] high = new int [ day ] ; for ( int i = 0 ; i < day ; i ++ ) { high [ i ] = sc . nextInt ( ) ; } int [ ] ht = new int [ n ] ; int [ ] lt = new int [ n ] ; int [ ] loud = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lt [ i ] = sc . nextInt ( ) ; ht [ i ] = sc . nextInt ( ) ; loud [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ day ] [ n ] ; for ( int i = 0 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 1 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( lt [ j ] <= high [ i ] && high [ i ] <= ht [ j ] ) ; else continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( lt [ k ] <= high [ i - 1 ] && high [ i - 1 ] <= ht [ k ] ) ; else continue ; dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , Math . abs ( loud [ j ] - loud [ k ] ) + dp [ i - 1 ] [ k ] ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Map < String , String > hinaMap = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; hinaMap . put ( s , s ) ; } sc . close ( ) ; String answer = " " ; if ( hinaMap . size ( ) == 3 ) { answer = " Three " ; } else if ( hinaMap . size ( ) == 4 ) { answer = " Four " ; } System . out . println ( answer ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . InputMismatchException ; import java . util . Scanner ; import java . util . StringTokenizer ; public class Main { static Scanner in = new Scanner ( System . in ) ; public static void main ( String args [ ] ) throws IOException { while ( in . hasNext ( ) ) { int [ ] a = new int [ 4 + 1 ] ; int [ ] vis = new int [ 11 ] ; for ( int i = 1 ; i <= 4 ; i ++ ) { a [ i ] = in . nextInt ( ) ; vis [ a [ i ] ] ++ ; } if ( vis [ 1 ] == 1 && vis [ 7 ] == 1 && vis [ 9 ] == 1 && vis [ 4 ] == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
import com . sun . org . apache . bcel . internal . generic . IF_ACMPEQ ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) , s = in . nextInt ( ) ; int res = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int dif = s - i - j ; if ( dif >= 0 && dif <= k ) { ++ res ; } } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; boolean one = false ; boolean nine = false ; boolean seven = false ; boolean four = false ; if ( a == 1 || b == 1 || c == 1 || d == 1 ) { one = true ; } if ( a == 9 || b == 9 || c == 9 || d == 9 ) { nine = true ; } if ( a == 7 || b == 7 || c == 7 || d == 7 ) { seven = true ; } if ( a == 4 || b == 4 || c == 4 || d == 4 ) { four = true ; } if ( one && nine && seven && four ) { System . out . println ( " YES " ) ; return ; } System . out . println ( " NO " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { N [ i ] = sc . nextInt ( ) ; } boolean ans = false ; Arrays . sort ( N ) ; if ( N [ 0 ] == 1 && N [ 1 ] == 4 && N [ 2 ] == 7 && N [ 3 ] == 9 ) { ans = true ; } if ( ans ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . show ( m . solve ( ) ) ; sc . close ( ) ; } Scanner sc ; int K ; int S ; Main ( Scanner sc ) { this . sc = sc ; K = sc . nextInt ( ) ; S = sc . nextInt ( ) ; } private int solve ( ) { int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K && x + y + z == S ) { count ++ ; } } } return count ; } public void show ( int answer ) { System . out . println ( answer ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int A = 0 ; int B = 0 ; int C ; int [ ] [ ] Card = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { Card [ i ] [ j ] = scan . nextInt ( ) ; } } A = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 1 ] ; B = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 2 ] ; C = Card [ 0 ] [ 1 ] - Card [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( A != Card [ i ] [ 0 ] - Card [ i ] [ 1 ] || B != Card [ i ] [ 0 ] - Card [ i ] [ 2 ] || C != Card [ i ] [ 1 ] - Card [ i ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= K ) answer ++ ; } } System . out . println ( answer ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = Integer . parseInt ( in . next ( ) ) ; Set < String > c = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { c . add ( in . next ( ) ) ; } if ( c . size ( ) == 3 ) { out . println ( " Three " ) ; } else { out . println ( " Four " ) ; } } } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final String [ ] NUMBERS = { " " , " One " , " Two " , " Three " , " Four " } ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int n = scanner . nextInt ( ) ; System . out . println ( NUMBERS [ ( int ) IntStream . range ( 0 , n ) . mapToObj ( i -> scanner . next ( ) ) . distinct ( ) . count ( ) ] ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int x [ ] = new int [ 3 ] ; int y [ ] = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != c [ i ] [ j ] ) flag = false ; } } System . out . println ( flag ? " Yes " : " No " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Map ; import java . util . HashMap ; import java . util . List ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) throws Exception { int a1 , a2 , a3 , b1 , b2 , b3 ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; String ans = " No " ; for ( int i = 0 ; i < 3 ; i ++ ) { String [ ] line = br . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = Integer . parseInt ( line [ j ] ) ; } } for ( a1 = 0 ; a1 <= grid [ 0 ] [ 0 ] ; a1 ++ ) { b1 = grid [ 0 ] [ 0 ] - a1 ; b2 = grid [ 0 ] [ 1 ] - a1 ; b3 = grid [ 0 ] [ 2 ] - a1 ; a2 = grid [ 1 ] [ 0 ] - b1 ; a3 = grid [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == grid [ 1 ] [ 1 ] && a2 + b3 == grid [ 1 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 1 ] && a3 + b3 == grid [ 2 ] [ 2 ] ) ans = " Yes " ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; aLoop : for ( int a = 0 ; a <= k ; a ++ ) { bLoop : for ( int b = 0 ; b <= k ; b ++ ) { int abSum = a + b ; if ( abSum > s ) { continue aLoop ; } else if ( s - abSum <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; long ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Reader r = new Reader ( ) ; int [ ] [ ] c = new int [ 3 ] [ ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] = r . ii ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) sum += c [ i ] [ j ] ; boolean flag = true ; loop : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int d = 1 ; d < 3 ; d ++ ) { int j = ( i + d ) % 3 ; int k = 3 - i - j ; int s = c [ 0 ] [ i ] + c [ 1 ] [ j ] + c [ 2 ] [ k ] ; if ( 3 * s != sum ) { flag = false ; break loop ; } } } println ( flag ? " Yes " : " No " ) ; } static void print ( Object o ) { System . out . print ( o . toString ( ) ) ; } static void println ( Object o ) { System . out . println ( o . toString ( ) ) ; } static class Reader extends BufferedReader { Reader ( ) { super ( new InputStreamReader ( System . in ) ) ; } String s ( ) throws IOException { return readLine ( ) ; } String [ ] ss ( ) throws IOException { return s ( ) . split ( " " ) ; } int Int ( String s ) { return Integer . parseInt ( s ) ; } int i ( ) throws IOException { return Int ( s ( ) ) ; } int [ ] ii ( ) throws IOException { String [ ] ss = ss ( ) ; int size = ss . length ; int [ ] ii = new int [ size ] ; for ( int j = 0 ; j < size ; j ++ ) ii [ j ] = Int ( ss [ j ] ) ; return ii ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int result = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { boolean isMacth = k >= s - ( x + y ) && s - ( x + y ) >= 0 ; if ( isMacth ) { result ++ ; } } } System . out . println ( result ) ; scanner . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; if ( min > P [ i ] ) { count ++ ; min = P [ i ] ; } } scan . close ( ) ; System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( calc ( c , 0 , 0 , 0 , 1 ) && calc ( c , 0 , 1 , 0 , 2 ) && calc ( c , 1 , 0 , 1 , 1 ) && calc ( c , 1 , 1 , 1 , 2 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } static boolean calc ( int [ ] [ ] c , int i , int j , int k , int l ) { if ( ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ k ] [ l ] + c [ k + 1 ] [ l - 1 ] ) ) { return true ; } else { return false ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { num [ i ] = Integer . parseInt ( sc . next ( ) ) ; } sc . close ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ! ( num [ i ] == 1 || num [ i ] == 4 || num [ i ] == 7 || num [ i ] == 9 ) ) { System . out . println ( " NO " ) ; return ; } } int n = 21 ; for ( int i = 0 ; i < 4 ; i ++ ) { n -= num [ i ] ; } if ( n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > cList = new ArrayList < > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { cList . add ( sc . nextInt ( ) ) ; } if ( ! verticalCheck ( cList , 0 ) || ! verticalCheck ( cList , 3 ) ) { System . out . println ( " No " ) ; return ; } if ( ! horizonCheck ( cList , 0 ) || ! horizonCheck ( cList , 1 ) ) { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; } private static boolean verticalCheck ( ArrayList < Integer > cList , Integer start ) { Integer v1 = cList . get ( start + 3 ) - cList . get ( start ) ; Integer v2 = cList . get ( start + 4 ) - cList . get ( start + 1 ) ; Integer v3 = cList . get ( start + 5 ) - cList . get ( start + 2 ) ; return v1 == v2 && v2 == v3 ; } private static boolean horizonCheck ( ArrayList < Integer > cList , Integer start ) { Integer v1 = cList . get ( start + 1 ) - cList . get ( start ) ; Integer v2 = cList . get ( start + 4 ) - cList . get ( start + 3 ) ; Integer v3 = cList . get ( start + 7 ) - cList . get ( start + 6 ) ; return v1 == v2 && v2 == v3 ; } }
import java . nio . file . * ; import java . nio . charset . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set s = new HashSet ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( sc . next ( ) ) ; } if ( s . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; Integer c [ ] [ ] = new Integer [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int pos = c [ i ] [ j ] = s . nextInt ( ) ; max = Math . max ( max , pos ) ; } } System . out . println ( Main . calc ( c , max ) ? " Yes " : " No " ) ; } public static boolean calc ( Integer c [ ] [ ] , int max ) { for ( int a1 = 0 ; a1 <= max && a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; if ( 0 > b1 || b1 > 100 ) { continue ; } for ( int a2 = 0 ; a2 <= max && a2 <= 100 ; a2 ++ ) { int b2 = c [ 1 ] [ 1 ] - a2 ; if ( 0 > b2 || b2 > 100 ) { continue ; } for ( int a3 = 0 ; a3 <= max && a3 <= 100 ; a3 ++ ) { int b3 = c [ 2 ] [ 2 ] - a3 ; if ( 0 > b3 || b3 > 100 ) { continue ; } if ( c [ 0 ] [ 1 ] == a1 + b2 && c [ 0 ] [ 2 ] == a1 + b3 && c [ 1 ] [ 0 ] == a2 + b1 && c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) { return true ; } } } } return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z < 0 ) continue ; if ( z > K ) continue ; if ( x + y + z == S ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { int tmp = 0 ; int tmp2 = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { tmp += c [ j ] [ ( i + j ) % 3 ] ; tmp2 += c [ j ] [ ( i - j + 3 ) % 3 ] ; } if ( tmp != sum ) { pr . println ( " No " ) ; return ; } if ( tmp2 != sum ) { pr . println ( " No " ) ; return ; } } pr . println ( " Yes " ) ; } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; N [ 0 ] = sc . nextInt ( ) ; N [ 1 ] = sc . nextInt ( ) ; N [ 2 ] = sc . nextInt ( ) ; N [ 3 ] = sc . nextInt ( ) ; boolean f1 , f9 , f7 , f4 ; f1 = Arrays . stream ( N ) . anyMatch ( a -> a == 1 ) ; f9 = Arrays . stream ( N ) . anyMatch ( a -> a == 9 ) ; f7 = Arrays . stream ( N ) . anyMatch ( a -> a == 7 ) ; f4 = Arrays . stream ( N ) . anyMatch ( a -> a == 4 ) ; String result = ( f1 && f9 && f7 && f4 ) ? " YES " : " NO " ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { private static boolean verify ( int [ ] [ ] c ) { return ( c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] && c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] && c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ) ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } System . out . println ( verify ( c ) ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) count ++ ; } if ( count > 0 ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { for ( int j = 0 ; j <= a ; j ++ ) { if ( b - i - j <= a && b - i - j >= 0 ) sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int z ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { count += 1 ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) { if ( p [ j ] < min ) { min = p [ j ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( ( System . in ) ) ; int n = sc . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { String m = sc . next ( ) ; if ( m . equals ( " Y " ) ) { ans = " Four " ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long ans = 0 ; for ( int x = Math . max ( 0 , S - 2 * K ) ; x <= Math . min ( K , S ) ; x ++ ) { int left = S - x ; ans += Math . min ( K , left ) - Math . max ( 0 , left - K ) + 1 ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { ans = " Four " ; break ; } } System . out . println ( ans ) ; System . exit ( 0 ) ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scanner . nextInt ( ) ) ; } scanner . close ( ) ; int count = 0 ; int min = list . get ( 0 ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) . compareTo ( min ) == 1 ) { continue ; } count += 1 ; min = list . get ( i ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = scanner . nextInt ( ) ; int min = P [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( P [ i ] < min ) count ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Random ; import java . util . Arrays ; import java . util . Comparator ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . HashMap ; import java . time . format . DateTimeFormatter ; import java . time . temporal . ChronoUnit ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] s = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { s [ i ] = sc . nextInt ( ) ; } if ( s [ 0 ] + s [ 4 ] + s [ 8 ] == s [ 1 ] + s [ 5 ] + s [ 6 ] && s [ 1 ] + s [ 5 ] + s [ 6 ] == s [ 2 ] + s [ 3 ] + s [ 7 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int c = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , p [ i ] ) ; if ( min >= p [ i ] ) { c ++ ; } } System . out . println ( c ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . function . Consumer ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String str [ ] = br . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( str [ j ] ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { int s = c [ ( i + 1 ) % 3 ] [ 0 ] - c [ i ] [ 0 ] ; int t = c [ ( i + 1 ) % 3 ] [ 1 ] - c [ i ] [ 1 ] ; int u = c [ ( i + 1 ) % 3 ] [ 2 ] - c [ i ] [ 2 ] ; if ( s != t || t != u || u != s ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . io . PrintWriter ; import static java . lang . Integer . * ; import static java . lang . Long . * ; import static java . lang . Math . * ; import static java . lang . System . * ; public class Main { public static final int MOD = 1000000007 ; public static ArrayList < Integer > list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int n = parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = parseInt ( sc . next ( ) ) ; } sc . close ( ) ; int cnt = 0 ; int mn = 200001 ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= mn ) { cnt ++ ; mn = p [ i ] ; } } out . println ( cnt ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver solver = new Solver ( ) ; solver . init ( ) ; solver . readHead ( in . readLine ( ) ) ; } } class Solver { int N ; int cnt ; public void init ( ) { N = 0 ; cnt = 0 ; } public void readHead ( String str ) { String [ ] strArr = str . split ( " " ) ; int N1 = Integer . parseInt ( strArr [ 0 ] ) ; int N2 = Integer . parseInt ( strArr [ 1 ] ) ; int N3 = Integer . parseInt ( strArr [ 2 ] ) ; int N4 = Integer . parseInt ( strArr [ 3 ] ) ; boolean ans = true ; if ( N1 != 1 && N2 != 1 && N3 != 1 && N4 != 1 ) ans = false ; if ( N1 != 9 && N2 != 9 && N3 != 9 && N4 != 9 ) ans = false ; if ( N1 != 7 && N2 != 7 && N3 != 7 && N4 != 7 ) ans = false ; if ( N1 != 4 && N2 != 4 && N3 != 4 && N4 != 4 ) ans = false ; if ( ans ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public boolean hasNext ( ) { return cnt < N ; } public void readBody ( String str ) { cnt ++ ; } public void solve ( ) { } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - ( i + j ) && s - ( i + j ) <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static PrintWriter out ; public static FastScanner in ; private void solve ( ) { int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int a = s - i - j ; if ( a <= k && a >= 0 ) cnt ++ ; } } out . print ( cnt ) ; } private void runIO ( ) { in = new FastScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; solve ( ) ; out . close ( ) ; } private static class FastScanner { BufferedReader bufferedReader ; StringTokenizer stringTokenizer ; private FastScanner ( ) { bufferedReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } private String next ( ) { if ( stringTokenizer == null || ! stringTokenizer . hasMoreElements ( ) ) { try { stringTokenizer = new StringTokenizer ( bufferedReader . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return stringTokenizer . nextToken ( ) ; } private int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } private long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } private String nextLine ( ) { String ret = " " ; try { ret = bufferedReader . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return ret ; } } public static void main ( String [ ] args ) { new Main ( ) . runIO ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int min = 0 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Point { int x ; int y ; int z ; Point ( int a , int b , int c ) { this . x = a ; this . y = b ; this . z = c ; } } public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] [ ] V = new int [ 3 ] [ 3 ] ; V [ 0 ] [ 0 ] = 0 ; V [ 1 ] [ 0 ] = 0 ; V [ 2 ] [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( j > 0 ) { V [ i ] [ j ] = C [ i ] [ j ] - C [ i ] [ j - 1 ] ; } } } if ( V [ 0 ] [ 0 ] == V [ 1 ] [ 0 ] && V [ 1 ] [ 0 ] == V [ 2 ] [ 0 ] ) { if ( V [ 0 ] [ 1 ] == V [ 1 ] [ 1 ] && V [ 1 ] [ 1 ] == V [ 2 ] [ 1 ] ) { if ( V [ 0 ] [ 2 ] == V [ 1 ] [ 2 ] && V [ 1 ] [ 2 ] == V [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( ; n > 0 ; n -- ) { int x = sc . nextInt ( ) ; if ( x < min ) { ans ++ ; min = x ; } } System . out . println ( ans ) ; } static class FastScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public FastScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; tokenizer = null ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public String nextLine ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( " \n " ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 != 0 || sum / 3 != c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int ret = 0 ; for ( int x = 0 ; x <= K ; x ++ ) for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z < 0 ) break ; if ( z > K ) continue ; ret ++ ; } System . out . println ( ret ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { static InputStreamReader r ; public static void main ( String [ ] args ) throws Exception { r = new InputStreamReader ( System . in ) ; int N = nextInt ( ) ; int min = 200005 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = nextInt ( ) ; if ( Pi < min ) { min = Pi ; ans ++ ; } } System . out . println ( ans ) ; } public static String nextString ( ) throws Exception { String res = " " ; while ( true ) { int c = r . read ( ) ; if ( c == 32 || c == 10 || c == - 1 ) { break ; } res += ( char ) c ; } return res ; } public static int nextInt ( ) throws Exception { return Integer . parseInt ( nextString ( ) ) ; } public static long nextLong ( ) throws Exception { return Long . parseLong ( nextString ( ) ) ; } public static double nextDouble ( ) throws Exception { return Double . parseDouble ( nextString ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int max = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; max = Math . max ( c [ i ] [ j ] , max ) ; } } for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { for ( int k = 0 ; k <= max ; k ++ ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == j - i && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == j - k ) { if ( c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == j - i && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == j - k ) { if ( c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] == j - i && c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == j - k ) { System . out . println ( " Yes " ) ; return ; } } } } } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } boolean F = false ; int A = 0 ; int B = 0 ; int C = 0 ; A = c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] ; B = c [ 0 ] [ 1 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 1 ] ; C = c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 2 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ( A - i ) % 3 == 0 && ( B - i ) % 3 == 0 && ( C - i ) % 3 == 0 ) { F = true ; } } if ( F ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int temp = s - x - y ; if ( temp >= 0 && temp <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; boolean f1 = false ; boolean f7 = false ; boolean f9 = false ; boolean f4 = false ; for ( int i = 0 ; i < 4 ; i ++ ) { int test = sc . nextInt ( ) ; if ( test == 1 ) { f1 = true ; } if ( test == 7 ) { f7 = true ; } if ( test == 9 ) { f9 = true ; } if ( test == 4 ) { f4 = true ; } } if ( f1 && f7 && f9 && f4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; import java . util . * ; import java . math . * ; import java . util . concurrent . ThreadLocalRandom ; public class Main { static long gcd ( long a , long b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static void main ( String [ ] args ) throws Exception { PrintWriter out = new PrintWriter ( System . out ) ; Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int n = in . nextInt ( ) ; long cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) for ( int b = 0 ; b <= k ; b ++ ) { if ( n - a - b <= k && n - a - b >= 0 ) cnt ++ ; } out . println ( cnt ) ; out . close ( ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int sum = 0 ; int min = 999999999 ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; if ( min >= x [ i ] ) sum ++ ; if ( x [ i ] < min ) min = x [ i ] ; } System . out . print ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { answer = " No " ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int z = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { z = s - i - j ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BSumOfThreeIntegers solver = new BSumOfThreeIntegers ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class BSumOfThreeIntegers { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) , s = in . nextInt ( ) ; out . println ( IntStream . rangeClosed ( Math . max ( 0 , s - 2 * k ) , Math . min ( k , s ) ) . map ( x -> Math . min ( k , s - x ) - Math . max ( 0 , s - x - k ) + 1 ) . filter ( v -> v > 0 ) . sum ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] sum = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean jdg = true ; b [ 0 ] = c [ 0 ] [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] ; b [ 2 ] = c [ 0 ] [ 2 ] ; a [ 0 ] = 0 ; a [ 1 ] = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { jdg = false ; break ; } } } if ( jdg ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int grid [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " No " ; for ( int i = 0 ; i <= grid [ 0 ] [ 0 ] ; i ++ ) { int a0 = i ; int b0 = grid [ 0 ] [ 0 ] - a0 ; int a1 = grid [ 1 ] [ 0 ] - b0 ; int a2 = grid [ 2 ] [ 0 ] - b0 ; boolean isOK = true ; for ( int y = 1 ; y < 3 ; y ++ ) { int by1 = grid [ 0 ] [ y ] - a0 ; int by2 = grid [ 1 ] [ y ] - a1 ; int by3 = grid [ 2 ] [ y ] - a2 ; if ( by1 < 0 || by2 < 0 || by3 < 0 ) { isOK = false ; break ; } if ( by1 != by2 || by2 != by3 ) { isOK = false ; break ; } } if ( isOK ) { ans = " Yes " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int board [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int y = 0 ; y < 3 ; ++ y ) { for ( int x = 0 ; x < 3 ; ++ x ) { board [ x ] [ y ] = sc . nextInt ( ) ; } } if ( search ( board ) ) { System . out . println ( " Yes " ) ; } else System . out . println ( " No " ) ; } public static boolean search ( int board [ ] [ ] ) { int k = 0 ; for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ 0 ] [ j ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ i ] [ j ] - board [ i ] [ 0 ] ) { return false ; } } } } for ( int j = 1 ; j <= 2 ; ++ j ) { for ( int i = 0 ; i < 3 ; ++ i ) { if ( i == 0 ) { k = board [ j ] [ 0 ] - board [ 0 ] [ 0 ] ; } else { if ( k != board [ j ] [ i ] - board [ 0 ] [ i ] ) { return false ; } } } } return true ; } }
import java . util . Scanner ; public class Main { public Main ( ) { Scanner sc = new Scanner ( System . in ) ; int n = 3 ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; int [ ] b1 = dif ( a [ 0 ] ) ; int [ ] b2 = dif ( a [ 1 ] ) ; int [ ] b3 = dif ( a [ 2 ] ) ; if ( b1 [ 0 ] == b2 [ 0 ] && b1 [ 1 ] == b2 [ 1 ] && b2 [ 0 ] == b3 [ 0 ] && b2 [ 1 ] == b3 [ 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private int [ ] dif ( int a [ ] ) { return new int [ ] { a [ 1 ] - a [ 0 ] , a [ 2 ] - a [ 1 ] } ; } public static void main ( String [ ] args ) { new Main ( ) ; } }
import java . util . * ; import java . io . * ; class Main { void solve ( ) { int k = inint ( ) , s = inint ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( 0 <= z && z <= k ) && x + y + z == s ) count ++ ; } } out . println ( count ) ; } public static Scanner in = new Scanner ( System . in ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; out . flush ( ) ; } public int inint ( ) { return in . nextInt ( ) ; } public long inlong ( ) { return in . nextLong ( ) ; } public String instr ( ) { return in . next ( ) ; } public char inchar ( ) { return in . next ( ) . charAt ( 0 ) ; } public int [ ] inintar ( int num ) { int [ ] a = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { a [ i ] = in . nextInt ( ) ; } return a ; } public char [ ] incharar ( ) { return in . next ( ) . toCharArray ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int con = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int item = sc . nextInt ( ) ; if ( min > item ) { min = item ; } if ( min >= item ) { con ++ ; } } System . out . println ( con ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int array [ ] = new int [ s . length ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = Integer . parseInt ( s [ i ] ) ; } int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] < min ) { count ++ ; min = array [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 9 ] ; boolean key = false ; for ( int i = 0 ; i < 9 ; i ++ ) num [ i ] = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = num [ 0 ] - a1 ; int b2 = num [ 1 ] - a1 ; int b3 = num [ 2 ] - a1 ; int a2 = num [ 3 ] - b1 ; int a3 = num [ 6 ] - b1 ; if ( a2 + b2 == num [ 4 ] && a2 + b3 == num [ 5 ] && a3 + b2 == num [ 7 ] && a3 + b3 == num [ 8 ] ) { key = true ; break ; } } System . out . println ( key ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { static int k , s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; long count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { continue ; } for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z >= 0 && z <= k ) { ++ count ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) throws IOException { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { List < String > vals = br . lines ( ) . limit ( 3 ) . collect ( Collectors . toList ( ) ) ; List < List < Integer > > grid = new ArrayList < > ( ) ; vals . stream ( ) . forEachOrdered ( v -> { grid . add ( splitBySpace ( v ) . stream ( ) . map ( s -> Integer . valueOf ( s ) ) . collect ( Collectors . toList ( ) ) ) ; } ) ; for ( int i = 0 ; i < grid . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < grid . size ( ) ; j ++ ) { int sub = grid . get ( i ) . get ( 0 ) - grid . get ( j ) . get ( 0 ) ; for ( int k = 1 ; k < grid . get ( i ) . size ( ) ; k ++ ) { if ( sub != grid . get ( i ) . get ( k ) - grid . get ( j ) . get ( k ) ) { System . out . println ( " No " ) ; return ; } } } } System . out . println ( " Yes " ) ; } } private static List < String > splitBySpace ( String target ) { return Arrays . asList ( target . split ( " \\ s " ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Boolean f1 = false , f2 = false , f3 = false , f4 = false ; for ( int i = 0 ; i < 4 ; i ++ ) { int n = sc . nextInt ( ) ; if ( n == 1 ) f1 = true ; else if ( n == 9 ) f2 = true ; else if ( n == 7 ) f3 = true ; else if ( n == 4 ) f4 = true ; } if ( f1 && f2 && f3 && f4 ) System . out . print ( " YES " ) ; else System . out . print ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int digit = sc . nextInt ( ) ; if ( min > digit ) { min = digit ; ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 , a2 , a3 , b1 , b2 , b3 ; boolean fans = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { boolean ans = true ; a1 = i ; b1 = c [ 0 ] [ 0 ] - i ; b2 = c [ 1 ] [ 0 ] - a1 ; b3 = c [ 2 ] [ 0 ] - a1 ; a2 = c [ 0 ] [ 1 ] - b1 ; a3 = c [ 0 ] [ 2 ] - b1 ; if ( a1 < 0 || b1 < 0 || a2 < 0 || a3 < 0 || b2 < 0 || b3 < 0 ) ans = false ; if ( b2 + a2 != c [ 1 ] [ 1 ] ) ans = false ; if ( b2 + a3 != c [ 1 ] [ 2 ] ) ans = false ; if ( b3 + a2 != c [ 2 ] [ 1 ] ) ans = false ; if ( b3 + a3 != c [ 2 ] [ 2 ] ) ans = false ; if ( ans ) fans = true ; } if ( fans ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int adis1 = 0 ; int adis2 = 0 ; int bdis1 = 0 ; int bdis2 = 0 ; int [ ] [ ] nums = new int [ 3 ] [ 3 ] ; String answer = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { nums [ i ] [ j ] = scan . nextInt ( ) ; } } adis1 = nums [ 1 ] [ 0 ] - nums [ 0 ] [ 0 ] ; adis2 = nums [ 2 ] [ 0 ] - nums [ 1 ] [ 0 ] ; for ( int j = 1 ; j < 3 ; j ++ ) { if ( nums [ 1 ] [ j ] - nums [ 0 ] [ j ] != adis1 ) { answer = " No " ; } if ( nums [ 2 ] [ j ] - nums [ 1 ] [ j ] != adis2 ) { answer = " No " ; } } bdis1 = nums [ 0 ] [ 1 ] - nums [ 0 ] [ 0 ] ; bdis2 = nums [ 0 ] [ 2 ] - nums [ 0 ] [ 1 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( nums [ i ] [ 1 ] - nums [ i ] [ 0 ] != bdis1 ) { answer = " No " ; } if ( nums [ i ] [ 2 ] - nums [ i ] [ 1 ] != bdis2 ) { answer = " No " ; } } System . out . println ( answer ) ; } }
import java . util . * ; import java . io . * ; import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N1 = sc . nextInt ( ) ; int N2 = sc . nextInt ( ) ; int N3 = sc . nextInt ( ) ; int N4 = sc . nextInt ( ) ; if ( ( N1 == 1 || N2 == 1 || N3 == 1 || N4 == 1 ) && ( N1 == 9 || N2 == 9 || N3 == 9 || N4 == 9 ) && ( N1 == 7 || N2 == 7 || N3 == 7 || N4 == 7 ) && ( N1 == 4 || N2 == 4 || N3 == 4 || N4 == 4 ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } scan . close ( ) ; int check = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { check = 1 ; break ; } } if ( check == 1 ) break ; } System . out . println ( ( check == 0 ) ? " Yes " : " No " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner std = new Scanner ( System . in ) ; int [ ] ns = new int [ 4 ] ; for ( int i = 0 ; i < ns . length ; i ++ ) { int n = std . nextInt ( ) ; ns [ i ] = n ; } Arrays . sort ( ns ) ; boolean requiredCondition = ns [ 0 ] == 1 && ns [ 1 ] == 4 && ns [ 2 ] == 7 && ns [ 3 ] == 9 ; if ( requiredCondition ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; import java . util . Scanner ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int n1 = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int n3 = sc . nextInt ( ) ; int n4 = sc . nextInt ( ) ; int [ ] cnt = new int [ 10 ] ; cnt [ n1 ] ++ ; cnt [ n2 ] ++ ; cnt [ n3 ] ++ ; cnt [ n4 ] ++ ; if ( cnt [ 1 ] == 1 && cnt [ 9 ] == 1 && cnt [ 7 ] == 1 && cnt [ 4 ] == 1 ) { pr . println ( " YES " ) ; } else { pr . println ( " NO " ) ; } } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } static class Printer extends PrintWriter { Printer ( OutputStream out ) { super ( out ) ; } } }
import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . Stack ; public class Main { public static class FastReader { BufferedReader br ; StringTokenizer root ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( root == null || ! root . hasMoreTokens ( ) ) { try { root = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } } return root . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } return str ; } } public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static int mod = ( int ) ( 1e9 + 7 ) ; static long cf = 998244353 ; static final long MAX = ( long ) 1e18 ; public static List < Integer > [ ] edges ; public static int [ ] [ ] parent ; public static int col = 32 ; public static int [ ] Bit ; public static long [ ] dp ; public static long [ ] fac , inv ; public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 ; int min = n ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; min = Math . min ( min , p [ i ] ) ; if ( p [ i ] <= min ) ++ ans ; } out . print ( ans ) ; out . close ( ) ; } }
import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static char [ ] cs = { '.' , '#' } ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = Integer . parseInt ( sc . next ( ) ) ; } long ans = A [ 0 ] - 1 ; int min = 2 ; for ( int i = 1 ; i < N ; ++ i ) { if ( A [ i ] == min ) { ++ min ; continue ; } ans += ( A [ i ] - 1 ) / min ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 0 ; int min = N + 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( min > P [ i ] ) { min = P [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum - n ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum - n ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] str = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( str [ 0 ] ) ; int s = Integer . parseInt ( str [ 1 ] ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; import java . math . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int lo = Integer . MAX_VALUE ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = input . nextInt ( ) ; if ( x <= lo ) { cnt ++ ; lo = x ; } } System . out . println ( cnt ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static final PrintStream out = System . out ; static final Scanner sc = new Scanner ( System . in ) ; static final long Mod = 1000_000_007L ; int N ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; System . exit ( 0 ) ; } void solve ( ) { N = nextInt ( ) ; int [ ] P = nextIntArray ( N ) ; int cnt = 1 , min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { cnt ++ ; min = P [ i ] ; } } out . println ( cnt ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { return sc . next ( ) ; } long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } long lcm ( long m , long n ) { return m * n / gcd ( m , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int b = sc . nextInt ( ) ; if ( b == 1 ) a [ 0 ] = 1 ; if ( b == 4 ) a [ 1 ] = 1 ; if ( b == 7 ) a [ 2 ] = 1 ; if ( b == 9 ) a [ 3 ] = 1 ; } if ( a [ 0 ] == 1 && a [ 1 ] == 1 && a [ 2 ] == 1 && a [ 3 ] == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] nums = new int [ 4 ] [ 4 ] ; for ( int rIdx = 1 ; rIdx <= 3 ; rIdx ++ ) { String [ ] inputs = scanner . nextLine ( ) . split ( " " ) ; for ( int cIdx = 1 ; cIdx <= 3 ; cIdx ++ ) nums [ rIdx ] [ cIdx ] = Integer . parseInt ( inputs [ cIdx - 1 ] ) ; } boolean isRightInfo = true ; for ( int idx = 2 ; idx <= 3 ; idx ++ ) { int diff = nums [ idx ] [ 1 ] - nums [ 1 ] [ 1 ] ; if ( diff != nums [ idx ] [ 2 ] - nums [ 1 ] [ 2 ] || diff != nums [ idx ] [ 3 ] - nums [ 1 ] [ 3 ] ) isRightInfo = false ; diff = nums [ 1 ] [ idx ] - nums [ 1 ] [ 1 ] ; if ( diff != nums [ 2 ] [ idx ] - nums [ 2 ] [ 1 ] || diff != nums [ 3 ] [ idx ] - nums [ 3 ] [ 1 ] ) isRightInfo = false ; } if ( isRightInfo ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int K2 = K * 2 ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { if ( K2 + X >= S ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int sxy = S - X - Y ; if ( 0 <= sxy && sxy <= K ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { private void doit ( ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int n = 3 ; int [ ] [ ] data = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { data [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flg = false ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { for ( int k = 0 ; k < 101 ; k ++ ) { if ( data [ 0 ] [ 0 ] - i == data [ 0 ] [ 1 ] - j && data [ 0 ] [ 0 ] - i == data [ 0 ] [ 2 ] - k && data [ 0 ] [ 1 ] - j == data [ 0 ] [ 2 ] - k ) { if ( data [ 1 ] [ 0 ] - i == data [ 1 ] [ 1 ] - j && data [ 1 ] [ 0 ] - i == data [ 1 ] [ 2 ] - k && data [ 1 ] [ 1 ] - j == data [ 1 ] [ 2 ] - k ) { if ( data [ 2 ] [ 0 ] - i == data [ 2 ] [ 1 ] - j && data [ 2 ] [ 0 ] - i == data [ 2 ] [ 2 ] - k && data [ 2 ] [ 1 ] - j == data [ 2 ] [ 2 ] - k ) { flg = true ; break ; } } } } if ( flg ) break ; } if ( flg ) break ; } System . out . println ( flg ? " Yes " : " No " ) ; } } private void debug ( Object ... o ) { System . out . println ( " debug = " + Arrays . deepToString ( o ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . doit ( ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( x + y > S ) { break ; } if ( S - ( x + y ) <= K ) { count ++ ; } } } out . println ( count ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 && n [ 1 ] == 4 && n [ 2 ] == 7 && n [ 3 ] == 9 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 200000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = sc . nextInt ( ) ; if ( min >= current ) { count ++ ; min = current ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b1 = a [ 0 ] ; int b2 = a [ 1 ] ; int b3 = a [ 2 ] ; int a1 = 0 ; int a2 = a [ 3 ] - b1 ; int a3 = a [ 6 ] - b1 ; int check = 0 ; if ( a [ 4 ] != a2 + b2 || a [ 5 ] != a2 + b3 || a [ 7 ] != a3 + b2 || a [ 8 ] != a3 + b3 ) { check ++ ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; P [ 0 ] = sc . nextInt ( ) ; int min = P [ 0 ] ; int R = 1 ; for ( int i = 1 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; if ( P [ i ] <= min ) { min = P [ i ] ; R ++ ; } } System . out . println ( R ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 = Integer . parseInt ( sc . next ( ) ) ; int a2 = Integer . parseInt ( sc . next ( ) ) ; int a3 = Integer . parseInt ( sc . next ( ) ) ; int b1 = Integer . parseInt ( sc . next ( ) ) ; int b2 = Integer . parseInt ( sc . next ( ) ) ; int b3 = Integer . parseInt ( sc . next ( ) ) ; int c1 = Integer . parseInt ( sc . next ( ) ) ; int c2 = Integer . parseInt ( sc . next ( ) ) ; int c3 = Integer . parseInt ( sc . next ( ) ) ; boolean flg = true ; if ( a1 - a2 != b1 - b2 || a1 - a3 != b1 - b3 || a1 - a2 != c1 - c2 || a1 - a3 != c1 - c3 || a1 - b1 != a2 - b2 || a1 - b1 != a3 - b3 || a1 - c1 != a2 - c2 || a1 - c1 != a3 - c3 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { map . put ( sc . next ( ) . charAt ( 0 ) , 0 ) ; } Object [ ] array = map . keySet ( ) . toArray ( ) ; if ( array . length == 4 ) System . out . println ( " Four " ) ; else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; int count = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = P [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( min > P [ j ] ) { count ++ ; min = P [ j ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ 2 - j ] -= c [ i ] [ 0 ] ; } } if ( c [ 0 ] [ 1 ] == c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] == c [ 2 ] [ 1 ] && c [ 0 ] [ 2 ] == c [ 1 ] [ 2 ] && c [ 0 ] [ 2 ] == c [ 2 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int P = 0 ; int Q = 0 ; for ( int X = 0 ; X < K + 1 ; X ++ ) { for ( int Y = 0 ; Y < K + 1 ; Y ++ ) { P = S - X - Y ; if ( 0 <= P && P <= K ) { Q ++ ; } } } System . out . println ( Q ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int nums [ ] = CPUtils . readIntArray ( N , in ) ; int min = nums [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( min >= nums [ i ] ) count ++ ; min = Math . min ( min , nums [ i ] ) ; } out . print ( count ) ; } } static class CPUtils { public static int [ ] readIntArray ( int size , Scanner in ) { int [ ] array = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { array [ i ] = in . nextInt ( ) ; } return array ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int cnt = 0 ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( ( S - x - y >= 0 ) && ( S - x - y <= K ) ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; int count = 1 ; long min = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long num = sc . nextLong ( ) ; if ( min >= num ) { min = num ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P [ ] = new int [ N ] ; int sum = 1 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int min = P [ 0 ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( min >= P [ i + 1 ] ) { sum ++ ; min = P [ i + 1 ] ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int day = sc . nextInt ( ) , n = sc . nextInt ( ) ; int [ ] high = new int [ day ] ; for ( int i = 0 ; i < day ; i ++ ) { high [ i ] = sc . nextInt ( ) ; } int [ ] ht = new int [ n ] ; int [ ] lt = new int [ n ] ; int [ ] loud = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lt [ i ] = sc . nextInt ( ) ; ht [ i ] = sc . nextInt ( ) ; loud [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ day ] [ n ] ; for ( int i = 0 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 1 ; i < day ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( lt [ j ] <= high [ i ] && high [ i ] <= ht [ j ] ) ; else continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( lt [ k ] <= high [ i - 1 ] && high [ i - 1 ] <= ht [ k ] ) ; else continue ; dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , Math . abs ( loud [ j ] - loud [ k ] ) + dp [ i - 1 ] [ k ] ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int k , s , x , y , z , n ; n = 0 ; Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { n ++ ; } } } System . out . println ( n ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; for ( int x = 0 ; x <= 100 ; x ++ ) { int a1 = c [ 0 ] [ 0 ] - x ; int a2 = c [ 0 ] [ 1 ] - x ; int a3 = c [ 0 ] [ 2 ] - x ; int b1 = x ; int b2 = c [ 1 ] [ 0 ] - a1 ; int b3 = c [ 2 ] [ 0 ] - a1 ; if ( c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a3 + b2 && c [ 2 ] [ 1 ] == a2 + b3 && c [ 2 ] [ 2 ] == a3 + b3 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( " resource " ) Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 10000000 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] < min ) { count ++ ; min = p [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - i - j <= k ) { c ++ ; } } } System . out . println ( c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int nextNum = 0 ; int minNum = Integer . parseInt ( sc . next ( ) ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { nextNum = Integer . parseInt ( sc . next ( ) ) ; if ( nextNum < minNum ) { minNum = nextNum ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; long [ ] map = new long [ 100002 ] ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; boolean bl = true ; for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( c [ j ] [ i ] - c [ j ] [ i + 1 ] != c [ j + 1 ] [ i ] - c [ j + 1 ] [ i + 1 ] || c [ i ] [ j ] - c [ i + 1 ] [ j ] != c [ i ] [ j + 1 ] - c [ i + 1 ] [ j + 1 ] ) { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int C = 0 ; int nam = 0 ; for ( int a = 0 ; a <= K ; a ++ ) { for ( int b = 0 ; b <= K ; b ++ ) { C = S - a - b ; if ( 0 <= C && C <= K ) { nam = nam + 1 ; } } } System . out . print ( nam ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ret = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= ( s - i - j ) && ( s - i - j ) <= k ) { ret ++ ; } } } System . out . println ( ret ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int lastOne = s - i - j ; if ( lastOne >= 0 && lastOne <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] A = new int [ 3 ] ; int [ ] diffe = new int [ 2 ] ; int [ ] diffe_tmp = new int [ 2 ] ; int flag = 0 ; String ans = " null " ; for ( int i = 0 ; i < 3 ; i ++ ) A [ i ] = sc . nextInt ( ) ; diffe [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe [ 1 ] = A [ 1 ] - A [ 2 ] ; for ( int i = 0 ; i <= 1 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) A [ j ] = sc . nextInt ( ) ; diffe_tmp [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe_tmp [ 1 ] = A [ 1 ] - A [ 2 ] ; if ( diffe [ 0 ] != diffe_tmp [ 0 ] || diffe_tmp [ 1 ] != diffe [ 1 ] ) flag = 1 ; } if ( flag == 0 ) ans = " Yes " ; else ans = " No " ; System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int counter = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int num = sc . nextInt ( ) ; if ( num < min ) { counter ++ ; min = num ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( final String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int [ ] [ ] table = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { table [ i ] [ j ] = scanner . nextInt ( ) ; } } int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( a1 = 0 ; a1 <= table [ 0 ] [ 0 ] ; a1 ++ ) { b1 = table [ 0 ] [ 0 ] - a1 ; a2 = table [ 1 ] [ 0 ] - b1 ; if ( a2 < 0 ) continue ; a3 = table [ 2 ] [ 0 ] - b1 ; if ( a3 < 0 ) continue ; b2 = table [ 0 ] [ 1 ] - a1 ; if ( b2 < 0 ) continue ; b3 = table [ 0 ] [ 2 ] - a1 ; if ( b3 < 0 ) continue ; if ( a2 + b2 != table [ 1 ] [ 1 ] ) continue ; if ( a2 + b3 != table [ 1 ] [ 2 ] ) continue ; if ( a3 + b2 != table [ 2 ] [ 1 ] ) continue ; if ( a3 + b3 != table [ 2 ] [ 2 ] ) continue ; System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { static int MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < k + 1 ; i ++ ) for ( int j = 0 ; j < k + 1 ; j ++ ) { if ( i + j <= s && i + j + k >= s ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = P [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { ans ++ ; } min = Math . min ( min , P [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) answer += ( s - x + 1 ) - Math . min ( s - x + 1 , Math . max ( 0 , ( ( s - x - k ) * 2 ) ) ) ; System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( long i = 0 ; i < n - 1 ; i ++ ) { int a = sc . nextInt ( ) ; if ( a <= min ) count ++ ; min = Math . min ( min , a ) ; } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] strlist = str . split ( " " ) ; int k = Integer . parseInt ( strlist [ 0 ] ) ; int s = Integer . parseInt ( strlist [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count = count + 1 ; continue ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { int k ; int s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Main m = new Main ( sc ) ; m . solve ( ) ; sc . close ( ) ; } Main ( Scanner sc ) { k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void solve ( ) { int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) <= k ) && ( s - ( x + y ) >= 0 ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > hina = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hina . add ( sc . next ( ) ) ; } String ans = " Three " ; if ( hina . size ( ) == 4 ) { ans = " Four " ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k && x + y + z == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Map ; import java . util . HashMap ; public class Main { int k , s ; public static void main ( String args [ ] ) { new Main ( ) . solve ( ) ; } void solve ( ) { in ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int n = s - i - j ; if ( n >= 0 && n <= k ) cnt ++ ; } } out ( cnt ) ; } void in ( ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; } void out ( ) { } void out ( int n ) { System . out . println ( n ) ; } void out ( char c ) { System . out . print ( c ) ; } void out ( String s ) { System . out . println ( s ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { map [ i / 3 ] [ i % 3 ] = sc . nextInt ( ) ; } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = map [ 0 ] [ 0 ] - a1 ; int b2 = map [ 0 ] [ 1 ] - a1 ; int b3 = map [ 0 ] [ 2 ] - a1 ; int a2 = map [ 1 ] [ 0 ] - b1 ; int a3 = map [ 2 ] [ 0 ] - b1 ; if ( map [ 1 ] [ 1 ] == a2 + b2 && map [ 1 ] [ 2 ] == a2 + b3 && map [ 2 ] [ 1 ] == a3 + b2 && map [ 2 ] [ 2 ] == a3 + b3 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int total = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { total += Math . max ( Math . min ( K , S - X ) - Math . max ( S - K - X , 0 ) + 1 , 0 ) ; } System . out . println ( total ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; for ( int n = 0 ; n < 4 ; n ++ ) { N [ n ] = sc . nextInt ( ) ; } boolean a = false ; boolean b = false ; boolean c = false ; boolean d = false ; for ( int n = 0 ; n < 4 ; n ++ ) { if ( N [ n ] == 1 ) { a = true ; } if ( N [ n ] == 9 ) { b = true ; } if ( N [ n ] == 7 ) { c = true ; } if ( N [ n ] == 4 ) { d = true ; } } if ( a && b && c && d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , i , j ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - ( i + j ) <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j == S ) { count ++ ; } else { int s = S - i - j ; if ( s >= 0 && s <= K ) { count ++ ; } } } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = 0 , m = 0 ; if ( scan . hasNext ( ) ) n = scan . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( scan . hasNext ( ) ) arr [ i ] = scan . nextInt ( ) ; } int min = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= min ) { count ++ ; } min = Math . min ( arr [ i ] , min ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int total = 0 ; int [ ] num = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; total += num [ i ] ; } int nextTotal1 = num [ 0 ] + num [ 1 ] + num [ 3 ] + num [ 4 ] ; int nextTotal2 = num [ 4 ] + num [ 5 ] + num [ 7 ] + num [ 8 ] ; int nextTotal3 = num [ 1 ] + num [ 2 ] + num [ 4 ] + num [ 5 ] ; int nextTotal4 = num [ 3 ] + num [ 4 ] + num [ 6 ] + num [ 7 ] ; int nextTotal5 = num [ 0 ] + num [ 2 ] + num [ 6 ] + num [ 8 ] ; if ( total % 3 == 0 && nextTotal1 % 2 == 0 && nextTotal1 % 2 == 0 && nextTotal3 % 2 == 0 && nextTotal4 % 2 == 0 && nextTotal5 % 2 == 0 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; String [ ] arr = br . readLine ( ) . split ( " " ) ; Arrays . sort ( arr ) ; out . println ( arr [ 0 ] . equals ( " 1 " ) && arr [ 1 ] . equals ( " 4 " ) && arr [ 2 ] . equals ( " 7 " ) && arr [ 3 ] . equals ( " 9 " ) ? " YES " : " NO " ) ; out . close ( ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int kari = c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ; if ( kari == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && kari == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) { kari = c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ; if ( kari == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] && kari == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { new Solution ( ) ; } } class Solution { Scanner scanner ; public Solution ( ) { scanner = new Scanner ( System . in ) ; while ( scanner . hasNext ( ) ) { run_case ( ) ; } } private void run_case ( ) { scanner . nextLine ( ) ; String line = scanner . nextLine ( ) ; int [ ] arr = strToIntArray ( line ) ; int res = 0 ; TreeMap < Integer , Integer > map = new TreeMap < > ( ) ; for ( int u : arr ) { map . put ( u , 1 ) ; if ( map . lowerKey ( u ) == null ) res ++ ; } System . out . println ( res ) ; return ; } private int [ ] strToIntArray ( String str ) { String [ ] vals = str . split ( " \\ s+ " ) ; int sz = vals . length ; int [ ] res = new int [ sz ] ; for ( int i = 0 ; i < sz ; i ++ ) { res [ i ] = Integer . parseInt ( vals [ i ] ) ; } return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = stdIn . nextInt ( ) ; } int count = 1 ; int min = a [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( a [ i ] > min ) { } else { count ++ ; min = a [ i ] ; } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && s - x - y >= 0 ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int n = sc . nextInt ( ) ; int mini = 200001 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( mini >= p ) count ++ ; mini = ( int ) Math . min ( p , mini ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) c [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i <= Math . max ( c [ 0 ] , Math . max ( c [ 1 ] , c [ 2 ] ) ) ; i ++ ) { int a1 = i , b1 = c [ 0 ] - a1 , b2 = c [ 1 ] - a1 , b3 = c [ 2 ] - a1 , a2 = c [ 3 ] - b1 , a3 = c [ 6 ] - b1 ; if ( a1 + b1 == c [ 0 ] && a1 + b2 == c [ 1 ] && a1 + b3 == c [ 2 ] && a2 + b1 == c [ 3 ] && a2 + b2 == c [ 4 ] && a2 + b3 == c [ 5 ] && a3 + b1 == c [ 6 ] && a3 + b2 == c [ 7 ] && a3 + b3 == c [ 8 ] ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; long count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( 0 <= Z && Z <= K ) { count ++ ; } } } out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int [ ] c = new int [ 6 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { int a = scn . nextInt ( ) ; if ( i < 3 ) { c [ 2 * i ] += a ; c [ 2 * i + 1 ] += a ; } else { if ( i == 3 ) { c [ 2 ] += a ; c [ 4 ] += a ; } if ( i == 4 ) { c [ 0 ] += a ; c [ 5 ] += a ; } if ( i == 5 ) { c [ 1 ] += a ; c [ 3 ] += a ; } if ( i == 6 ) { c [ 3 ] += a ; c [ 5 ] += a ; } if ( i == 7 ) { c [ 1 ] += a ; c [ 4 ] += a ; } if ( i == 8 ) { c [ 0 ] += a ; c [ 2 ] += a ; } } } boolean ans = true ; for ( int i = 0 ; i < 6 ; i ++ ) { ans &= ( c [ i ] == c [ 0 ] ) ; } System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i > S ) { break ; } for ( int j = 0 ; j <= K ; j ++ ) { if ( i + j > S ) { break ; } if ( S - i - j >= 0 && S - i - j <= K ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int counter = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) counter ++ ; } } System . out . println ( String . valueOf ( counter ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; for ( int x = 1 ; x <= n ; x ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int k = s . nextInt ( ) ; int l = s . nextInt ( ) ; int i = 0 ; int j = 0 ; int m = 15 ; int count = 0 ; int ans = 0 ; int q = 0 ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { q = i + j ; m = l - q ; if ( m >= 0 && 0 <= i && i <= k && j <= k && m <= k ) { count ++ ; } else { } } j = 0 ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int num = s - i - j ; if ( 0 <= num && num <= k ) ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int suces = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { suces = suces + 1 ; } } } System . out . println ( suces ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( ( S - ( i + j ) ) <= K ) && ( S - ( i + j ) >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S [ ] = new String [ N ] ; String answer = " Three " ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { answer = " Four " ; } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int min = 0 ; int count = 1 ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = sc . nextInt ( ) ; } min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int index = 0 ; int x , y , z ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - x - y ; if ( 0 <= z && z <= k ) { index ++ ; } } } System . out . print ( index ) ; } }
import java . util . Scanner ; public class Main { static int [ ] [ ] grid ; static int [ ] left ; static int [ ] top ; static int size = 3 ; public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; grid = new int [ size ] [ size ] ; left = new int [ size ] ; top = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) grid [ i ] [ j ] = x . nextInt ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { left [ i ] = grid [ i ] [ 0 ] ; top [ i ] = grid [ 0 ] [ i ] ; } boolean good = true ; int curdiff , nowdiff ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ i ] [ 0 ] - top [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ i ] [ j ] - top [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ 0 ] [ i ] - left [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ j ] [ i ] - left [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } if ( good ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int k = 1 ; int now = 0 ; for ( int i = 1 ; i < n ; i ++ ) { now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; k ++ ; } } System . out . println ( k ) ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , s = sc . nextInt ( ) , t = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = s - i - j ; if ( z >= 0 && z <= K ) t ++ ; } } System . out . println ( t ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != c [ i ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int buff = sc . nextInt ( ) ; if ( a [ buff ] != 0 ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } a [ buff ] ++ ; } if ( a [ 1 ] + a [ 9 ] + a [ 7 ] + a [ 4 ] == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = stdIn . nextInt ( ) ; } int counter = 0 ; int min = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { counter ++ ; min = p [ i ] ; } } System . out . println ( counter ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - ( i + j ) >= 0 && S - ( i + j ) <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { ArrayList < Integer > [ ] graph ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long ans = a [ 0 ] - 1 ; int max = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max + 1 ) max = Math . max ( max , a [ i ] ) ; else { ans += ( a [ i ] - 1 ) / ( max + 1 ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= min ) { cnt ++ ; } if ( p < min ) min = p ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int res = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( z >= 0 && z <= K ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - ( x + y ) && S - ( x + y ) <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; try { long k = scanner . nextLong ( ) ; long s = scanner . nextLong ( ) ; long ans = 0 ; for ( long x = 0 ; x <= k ; x ++ ) { for ( long y = 0 ; y <= k ; y ++ ) { long z = s - x - y ; if ( 0 <= z && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } finally { scanner . close ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int p [ ] = new int [ n ] ; int num = 1 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; if ( i == 0 ) { min = p [ i ] ; continue ; } if ( p [ i ] < min ) { num ++ ; min = p [ i ] ; } } System . out . println ( num ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; double dMax = Double . MIN_VALUE ; double dMin = Double . MAX_VALUE ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) list . add ( sc . nextInt ( ) ) ; for ( int i = 0 ; i < n ; ++ i ) { int pi = list . get ( i ) ; if ( i == 0 ) { ++ count ; } else if ( pi <= min ) { ++ count ; } if ( min > pi ) min = pi ; } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] = new int [ n + 1 ] ; p [ 0 ] = Integer . MAX_VALUE ; int min [ ] = new int [ n + 1 ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( min [ i - 1 ] >= p [ i ] ) { cnt ++ ; } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int PjMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = sc . nextInt ( ) ; if ( Pi <= PjMin ) { count ++ ; } if ( PjMin >= Pi ) { PjMin = Pi ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int c = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( h >= a ) c ++ ; h = Math . min ( a , h ) ; } System . out . println ( c ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . LinkedList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int D = sc . nextInt ( ) ; final int N = sc . nextInt ( ) ; int [ ] ondo = new int [ D ] ; int [ ] hade = new int [ N ] ; boolean [ ] [ ] ok = new boolean [ D ] [ N ] ; int [ ] [ ] dp = new int [ D ] [ N ] ; for ( int i = 0 ; i < D ; i ++ ) { ondo [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { final int A = sc . nextInt ( ) ; final int B = sc . nextInt ( ) ; final int C = sc . nextInt ( ) ; hade [ i ] = C ; for ( int j = 0 ; j < D ; j ++ ) { if ( ondo [ j ] >= A && ondo [ j ] <= B ) { ok [ j ] [ i ] = true ; } } } int max = 0 ; for ( int i = 0 ; i < D - 1 ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( ! ok [ i ] [ j ] ) { continue ; } for ( int k = 0 ; k < N ; k ++ ) { if ( ! ok [ i + 1 ] [ k ] ) { continue ; } dp [ i + 1 ] [ k ] = Math . max ( dp [ i + 1 ] [ k ] , dp [ i ] [ j ] + Math . abs ( hade [ j ] - hade [ k ] ) ) ; max = Math . max ( dp [ i + 1 ] [ k ] , max ) ; } } } System . out . println ( max ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] line = new int [ 4 ] ; line [ 0 ] = sc . nextInt ( ) ; line [ 1 ] = sc . nextInt ( ) ; line [ 2 ] = sc . nextInt ( ) ; line [ 3 ] = sc . nextInt ( ) ; String ans ; if ( ! isIn ( line , 1 ) ) { ans = " NO " ; } else if ( ! isIn ( line , 9 ) ) { ans = " NO " ; } else if ( ! isIn ( line , 7 ) ) { ans = " NO " ; } else if ( ! isIn ( line , 4 ) ) { ans = " NO " ; } else { ans = " YES " ; } System . out . println ( ans ) ; } public static boolean isIn ( int [ ] line , int x ) { for ( int n = 0 ; n < 4 ; n ++ ) { if ( line [ n ] == x ) { line [ n ] = 0 ; return true ; } } return false ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { try { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; String str [ ] = br . readLine ( ) . split ( " " ) ; int k = Integer . parseInt ( str [ 0 ] ) ; int s = Integer . parseInt ( str [ 1 ] ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( x + y > s ) { break ; } int z = s - ( x + y ) ; if ( z <= k ) { count ++ ; } } } System . out . println ( count ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; for ( int a1 = 0 ; a1 < 201 ; a1 ++ ) { int b1 = c11 - a1 ; int b2 = c12 - a1 ; int b3 = c13 - a1 ; int a2 = c23 - b3 ; int a3 = c33 - b3 ; if ( a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; return ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; sum = sum + C [ i ] [ j ] ; } } boolean result = false ; if ( sum % 3 == 0 ) { int D = sum / 3 ; if ( D == C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] && D == C [ 0 ] [ 2 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 0 ] && D == C [ 0 ] [ 1 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 2 ] && D == C [ 0 ] [ 0 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 1 ] ) { result = true ; } } System . out . println ( result ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] ab = new int [ 3 ] [ 3 ] ; ab [ 0 ] [ 0 ] = sc . nextInt ( ) ; ab [ 0 ] [ 1 ] = sc . nextInt ( ) ; ab [ 0 ] [ 2 ] = sc . nextInt ( ) ; ab [ 1 ] [ 0 ] = sc . nextInt ( ) ; ab [ 1 ] [ 1 ] = sc . nextInt ( ) ; ab [ 1 ] [ 2 ] = sc . nextInt ( ) ; ab [ 2 ] [ 0 ] = sc . nextInt ( ) ; ab [ 2 ] [ 1 ] = sc . nextInt ( ) ; ab [ 2 ] [ 2 ] = sc . nextInt ( ) ; if ( diff_check ( ab , 0 , 1 , true ) && diff_check ( ab , 0 , 2 , true ) && diff_check ( ab , 1 , 2 , true ) && diff_check ( ab , 0 , 1 , false ) && diff_check ( ab , 0 , 2 , false ) && diff_check ( ab , 1 , 2 , false ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } private static boolean diff_check ( int [ ] [ ] ab , int i , int j , boolean b ) { int point ; if ( b ) { point = ab [ i ] [ 0 ] - ab [ j ] [ 0 ] ; if ( point != ab [ i ] [ 1 ] - ab [ j ] [ 1 ] ) return false ; if ( point != ab [ i ] [ 2 ] - ab [ j ] [ 2 ] ) return false ; } else { point = ab [ 0 ] [ i ] - ab [ 0 ] [ j ] ; if ( point != ab [ 1 ] [ i ] - ab [ 1 ] [ j ] ) return false ; if ( point != ab [ 2 ] [ i ] - ab [ 2 ] [ j ] ) return false ; } return true ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . A ( ) ; } void A ( ) { int N ; Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int a = 1 ; int min = P [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { a ++ ; min = P [ i ] ; } } System . out . println ( a ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int row = 1 ; row <= 3 ; row ++ ) { for ( int col = 1 ; col <= 3 ; col ++ ) { c [ row ] [ col ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int col = 2 ; col <= 3 ; col ++ ) { int cur = c [ 1 ] [ 1 ] - c [ 1 ] [ col ] ; int d1 = c [ 2 ] [ 1 ] - c [ 2 ] [ col ] ; int d2 = c [ 3 ] [ 1 ] - c [ 3 ] [ col ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 3 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; for ( int row = 2 ; row <= 3 ; row ++ ) { int cur = c [ 1 ] [ 1 ] - c [ row ] [ 1 ] ; int d1 = c [ 1 ] [ 2 ] - c [ row ] [ 2 ] ; int d2 = c [ 1 ] [ 3 ] - c [ row ] [ 3 ] ; if ( cur != d1 || cur != d2 ) ans = " No " ; } if ( ! ( c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 3 ] [ 2 ] && c [ 2 ] [ 1 ] - c [ 3 ] [ 1 ] == c [ 2 ] [ 3 ] - c [ 3 ] [ 3 ] ) ) ans = " No " ; System . out . println ( ans ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { private static PrintWriter out ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) -> out . close ( ) ) ) ; try { main . run ( args ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private void run ( String [ ] arguments ) throws Exception { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int rest = S - x - y ; if ( rest >= 0 && rest <= K ) { count ++ ; } } } out . println ( count ) ; out . close ( ) ; } private class MyScanner { BufferedReader br ; StringTokenizer st ; MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int res = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= a [ i ] ) { res ++ ; min = a [ i ] ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int sum = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) sum ++ ; } } System . out . println ( sum ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long cnt = a [ 0 ] - 1 ; int max = 2 ; for ( int i = 1 ; i < n ; i ++ ) { if ( max < a [ i ] ) { int c = a [ i ] % max == 0 ? ( int ) Math . floor ( a [ i ] / max ) - 1 : ( int ) Math . floor ( a [ i ] / max ) ; cnt += c ; a [ i ] = 1 ; } max = Math . max ( a [ i ] + 1 , max ) ; } sb . append ( cnt ) ; System . out . println ( sb ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < N ; i ++ ) { int now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; count ++ ; } } System . out . println ( count ) ; } }
/ * package whatever import java . io . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } public static void main ( String [ ] args ) { FastReader ob = new FastReader ( ) ; int n = ob . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ob . nextInt ( ) ; } int count = 1 ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= arr [ i ] ) { count ++ ; min = arr [ i ] ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } for ( int i = 0 ; i <= c [ 0 ] [ 0 ] ; i ++ ) { int b1 = c [ 0 ] [ 0 ] - i ; int b2 = c [ 0 ] [ 1 ] - i ; int b3 = c [ 0 ] [ 2 ] - i ; if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 || c [ 1 ] [ 1 ] - b2 != c [ 1 ] [ 2 ] - b3 ) { continue ; } if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 || c [ 2 ] [ 1 ] - b2 != c [ 2 ] [ 2 ] - b3 ) { continue ; } System . out . println ( " Yes " ) ; return ; } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { cnt ++ ; min = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String line1 = sc . nextLine ( ) ; List < String > lines1 = Arrays . asList ( line1 . split ( " " ) ) ; Integer K = Integer . parseInt ( lines1 . get ( 0 ) ) ; Integer S = Integer . parseInt ( lines1 . get ( 1 ) ) ; int res = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { res ++ ; } } } System . out . println ( res ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = Integer . parseInt ( in . next ( ) ) ; int s = Integer . parseInt ( in . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - j - i ; if ( 0 <= z && z <= k ) { ans ++ ; } } } out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && S - i - j >= 0 ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int min = p [ 0 ] ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( min >= p [ i ] ) { min = p [ i ] ; sum = sum + 1 ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i != a + 1 ; i ++ ) { for ( int j = 0 ; j != a + 1 ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . File ; import java . io . IOException ; import java . lang . reflect . Array ; import java . util . * ; import java . util . Map . Entry ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; boolean ans = true ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } if ( ! ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; if ( ! ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] ) ) ans = false ; System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( final String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int n = scanner . nextInt ( ) ; int min = 200001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { final int p = scanner . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y <= k && 0 <= s - x - y ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " " ; int p = 0 ; int w = 0 ; int g = 0 ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; if ( s . equals ( " P " ) && p == 0 ) { p = 1 ; } else if ( s . equals ( " W " ) && w == 0 ) { w = 1 ; } else if ( s . equals ( " G " ) && g == 0 ) { g = 1 ; } else if ( s . equals ( " Y " ) && y == 0 ) { y = 1 ; } } System . out . println ( ( p + w + g + y ) == 3 ? " Three " : " Four " ) ; } }
import java . io . * ; import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int a [ ] = new int [ n ] ; int min [ ] = new int [ n ] ; int c = 0 , minval = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( s [ i ] ) ; min [ 0 ] = a [ 0 ] ; minval = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < minval ) { minval = a [ i ] ; min [ i ] = minval ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min [ i ] ) c ++ ; } out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int Z = S - x - y ; if ( Z >= 0 && Z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . HashSet ; import java . lang . Integer ; import java . lang . StringBuilder ; import java . lang . Math ; public class Main { public static int calc ( int max , int target ) { int cnt = 0 ; for ( int i = 0 ; i <= max ; i ++ ) { for ( int j = 0 ; j <= max ; j ++ ) { int sum = i + j ; int k = target - sum ; if ( k <= max && k >= 0 ) { cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int result = calc ( K , S ) ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] l = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) l [ i ] [ j ] = sc . nextInt ( ) ; if ( l [ 0 ] [ 0 ] + l [ 1 ] [ 1 ] == l [ 1 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 1 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 1 ] && l [ 1 ] [ 0 ] + l [ 0 ] [ 2 ] == l [ 0 ] [ 0 ] + l [ 1 ] [ 2 ] && l [ 0 ] [ 0 ] + l [ 2 ] [ 2 ] == l [ 2 ] [ 0 ] + l [ 0 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int k = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int s = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s >= i + j && s - ( i + j ) <= k ) { count ++ ; } if ( s < i + j ) break ; } if ( s < i ) break ; } out . write ( String . valueOf ( count ) ) ; out . write ( " \n " ) ; out . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] i1 = new int [ 3 ] ; int [ ] i2 = new int [ 3 ] ; int [ ] i3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { i1 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i2 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { i3 [ i ] = sc . nextInt ( ) ; } int diff21 = i2 [ 0 ] - i1 [ 0 ] ; int diff31 = i3 [ 0 ] - i1 [ 0 ] ; if ( i2 [ 1 ] - i1 [ 1 ] == diff21 && i2 [ 2 ] - i1 [ 2 ] == diff21 && i3 [ 1 ] - i1 [ 1 ] == diff31 && i3 [ 2 ] - i1 [ 2 ] == diff31 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int limit = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int i , j ; int count = 0 ; for ( i = 0 ; i <= limit ; i ++ ) { for ( j = 0 ; j <= limit ; j ++ ) { if ( sum - i - j <= limit && sum - i - j >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int g [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { g [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = false ; for ( int i = 0 ; i <= 100 ; i ++ ) { int a1 = i ; int b1 = g [ 0 ] [ 0 ] - a1 ; int b2 = g [ 0 ] [ 1 ] - a1 ; int b3 = g [ 0 ] [ 2 ] - a1 ; int a2 = g [ 1 ] [ 0 ] - b1 ; int a3 = g [ 2 ] [ 0 ] - b1 ; if ( g [ 0 ] [ 0 ] == a1 + b1 && g [ 0 ] [ 1 ] == a1 + b2 && g [ 0 ] [ 2 ] == a1 + b3 && g [ 1 ] [ 0 ] == a2 + b1 && g [ 1 ] [ 1 ] == a2 + b2 && g [ 1 ] [ 2 ] == a2 + b3 && g [ 2 ] [ 0 ] == a3 + b1 && g [ 2 ] [ 1 ] == a3 + b2 && g [ 2 ] [ 2 ] == a3 + b3 ) { ok = true ; break ; } } if ( ok ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( ; sc . hasNext ( ) ; ) { arr . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = arr . get ( 0 ) ; for ( int num : arr ) { if ( num <= min ) { count ++ ; min = num ; } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static MyScanner scanner ; public static void main ( String [ ] args ) { Main instance = new Main ( ) ; scanner = instance . new MyScanner ( ) ; instance . solve ( ) ; } private void solve ( ) { try { int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { int X = i ; for ( int j = 0 ; j <= K ; j ++ ) { int Y = j ; if ( X + Y > S ) { break ; } if ( S - X - Y <= K ) { count ++ ; } } } System . out . println ( count ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = " " ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) throws IOException { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( " " ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } public int nextInt ( ) throws NumberFormatException , IOException { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) throws NumberFormatException , IOException { return Double . parseDouble ( next ( ) ) ; } public long nextLong ( ) throws NumberFormatException , IOException { return Long . parseLong ( next ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str0 = sc . nextLine ( ) ; String [ ] array0 = str0 . split ( " " ) ; int K = Integer . parseInt ( array0 [ 0 ] ) ; int S = Integer . parseInt ( array0 [ 1 ] ) ; int result = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( 0 <= S - x - y && S - x - y <= K ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; import static java . lang . Math . * ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int result = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int now = sc . nextInt ( ) ; if ( min > now ) { result ++ ; min = now ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = scan . nextInt ( ) ; int out = 1 ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , Math . min ( p [ i ] , p [ i - 1 ] ) ) ; if ( min >= p [ i ] ) out ++ ; } System . out . println ( out ) ; scan . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int K = s . nextInt ( ) ; int S = s . nextInt ( ) ; int Ans = 0 ; if ( S <= K ) Ans = ( S + 1 ) * ( S + 2 ) / 2 ; else if ( K < S && S <= 2 * K ) Ans = ( K + 1 ) * ( K + 1 ) - ( 2 * K - S + 1 ) * ( 2 * K - S ) / 2 - ( S - K + 1 ) * ( S - K ) / 2 ; else if ( 2 * K <= S ) Ans = ( 3 * K - S + 1 ) * ( 3 * K - S + 2 ) / 2 ; System . out . println ( Ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } int min = 0 ; int count = 0 ; min = array [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= array [ i ] ) { min = array [ i ] ; } else { count ++ ; } } System . out . println ( n - count ) ; } }
import java . time . chrono . MinguoChronology ; import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int count = 0 ; count < 4 ; count ++ ) { list . add ( a ) ; list . add ( b ) ; list . add ( c ) ; list . add ( d ) ; } int mitasu = 0 ; int countAns = 0 ; boolean one = false ; boolean seven = false ; boolean nine = false ; boolean forth = false ; for ( int youso : list ) { if ( youso == 1 && ! one ) { one = true ; countAns ++ ; } if ( youso == 7 && ! seven ) { seven = true ; countAns ++ ; } if ( youso == 9 && ! nine ) { nine = true ; countAns ++ ; } if ( youso == 7 && ! forth ) { forth = true ; countAns ++ ; } } if ( countAns == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Map < String , Integer > minMap = new HashMap < > ( ) ; final String MIN = " min " ; int [ ] numList = new int [ 220000 ] ; for ( int i = 0 ; i < N ; i ++ ) { numList [ i ] = Integer . parseInt ( sc . next ( ) ) ; } minMap . put ( MIN , numList [ 0 ] ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList [ i ] <= minMap . get ( MIN ) ) { minMap . put ( MIN , numList [ i ] ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static int [ ] [ ] mat = new int [ 3 ] [ 3 ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i , j ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { mat [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( ( mat [ 0 ] [ 0 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] && mat [ 1 ] [ 0 ] - mat [ 1 ] [ 1 ] == mat [ 2 ] [ 0 ] - mat [ 2 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 0 ] [ 2 ] == mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 1 ] - mat [ 1 ] [ 2 ] == mat [ 2 ] [ 1 ] - mat [ 2 ] [ 2 ] && mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] ) ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextInt ( ) ; long S = sc . nextInt ( ) ; long res = 0 ; for ( long i = Math . min ( K , S ) ; i >= 0 ; i -- ) { long v = S - i ; if ( v < K ) res += ( v + 1 ) ; else if ( v == K ) res += ( K + 1 ) ; else if ( v <= 2 * K ) { long a = v - K ; res += K - a + 1 ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z <= k && 0 <= z ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; System . out . println ( three ( K , S ) ) ; } private static int one ( int K , int S ) { return 0 <= S && S <= K ? 1 : 0 ; } private static int two ( int K , int S ) { int result = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { result += one ( K , S - i ) ; } return result ; } private static int three ( int K , int S ) { int result = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { result += two ( K , S - i ) ; } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] [ 0 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 1 ] = Integer . parseInt ( scanner . next ( ) ) ; c [ i ] [ 2 ] = Integer . parseInt ( scanner . next ( ) ) ; } scanner . close ( ) ; for ( int i = 0 ; i < c . length ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { int num = c [ i ] [ j ] ; if ( min > num ) { min = num ; } } for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { c [ i ] [ j ] -= min ; } } for ( int i = 0 ; i < c . length ; i ++ ) { if ( c [ 0 ] [ i ] != c [ 1 ] [ i ] || c [ 1 ] [ i ] != c [ 2 ] [ i ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = Integer . parseInt ( stdIn . next ( ) ) ; int [ ] p = new int [ n ] ; p [ 0 ] = Integer . parseInt ( stdIn . next ( ) ) ; int min = p [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( stdIn . next ( ) ) ; if ( min > p [ i ] ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( z <= k ) && ( z >= 0 ) ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int min = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int ans = 1 ; boolean [ ] b = new boolean [ n ] ; b [ 0 ] = true ; int j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( b [ j ] ) { if ( p [ i ] <= p [ j ] ) { b [ i ] = true ; j = i ; ans ++ ; } else { b [ i ] = false ; } } } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { private static Scanner sc ; private static Printer pr ; private static void solve ( ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long ret = 0 ; for ( int x = 0 ; x <= Math . min ( k , s ) ; x ++ ) { for ( int y = 0 ; y <= Math . min ( k , s - x ) ; y ++ ) { if ( s - x - y <= k ) { ret ++ ; } } } pr . println ( ret ) ; } public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; pr = new Printer ( System . out ) ; solve ( ) ; pr . close ( ) ; sc . close ( ) ; } private static class Printer extends PrintWriter { Printer ( PrintStream out ) { super ( out ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . execute ( ) ; } public void execute ( ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] board = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { board [ i ] [ j ] = sc . nextInt ( ) ; } } if ( check ( board ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } private boolean check ( int [ ] [ ] board ) { if ( board . length != 3 || board [ 0 ] . length != 3 ) { throw new IllegalArgumentException ( ) ; } boolean check = false ; for ( int i = 0 ; i < 100 ; i ++ ) { int a1 = i ; int b1 = board [ 0 ] [ 0 ] - a1 ; int b2 = board [ 0 ] [ 1 ] - a1 ; int b3 = board [ 0 ] [ 2 ] - a1 ; if ( withoutRange ( b1 ) || withoutRange ( b2 ) || withoutRange ( b3 ) ) { continue ; } int a2 = board [ 1 ] [ 0 ] - b1 ; if ( withoutRange ( a2 ) || ( board [ 1 ] [ 1 ] - b2 ) != a2 || ( board [ 1 ] [ 2 ] - b3 ) != a2 ) { continue ; } int a3 = board [ 2 ] [ 0 ] - b1 ; if ( withoutRange ( a3 ) || ( board [ 2 ] [ 1 ] - b2 ) != a3 || ( board [ 2 ] [ 2 ] - b3 ) != a3 ) { continue ; } check = true ; break ; } return check ; } private boolean withoutRange ( int x ) { return ( x < 0 && x > 100 ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) { if ( c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] ) { if ( c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] ) { if ( c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] line = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( line [ 0 ] ) ; int S = Integer . parseInt ( line [ 1 ] ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int target = S - x - y ; if ( target >= 0 && target <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . lang . reflect . Array ; import java . util . * ; public class Main { static int N ; static int K ; static long Q ; static int A ; static long B ; static long C ; static double min = 9999999 ; static long ans = 0 ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] map = new int [ 10 ] ; int a = scanner . nextInt ( ) ; map [ a ] = 1 ; int b = scanner . nextInt ( ) ; map [ b ] = 1 ; a = scanner . nextInt ( ) ; map [ a ] = 1 ; a = scanner . nextInt ( ) ; map [ a ] = 1 ; if ( map [ 1 ] == 1 && map [ 7 ] == 1 && map [ 9 ] == 1 && map [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; List < Character > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scan . next ( ) . charAt ( 0 ) ) ; } if ( list . contains ( 'Y' ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ABC051_B solver = new ABC051_B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ABC051_B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int counter = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int l = s - ( i + j ) ; if ( l >= 0 && l <= k ) ++ counter ; else continue ; ; } } out . println ( counter ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; char arr [ ] = new char [ n ] ; ArrayList < Character > a = new ArrayList < Character > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan . next ( ) . charAt ( 0 ) ; if ( ! a . contains ( arr [ i ] ) ) { a . add ( arr [ i ] ) ; } } System . out . println ( a . size ( ) == 4 ? " Four " : " Three " ) ; } }
import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < String > nums = Arrays . asList ( sc . nextLine ( ) . split ( " " ) ) ; boolean one = nums . stream ( ) . anyMatch ( x -> x . equals ( " 1 " ) ) ; boolean nine = nums . stream ( ) . anyMatch ( x -> x . equals ( " 9 " ) ) ; boolean seven = nums . stream ( ) . anyMatch ( x -> x . equals ( " 7 " ) ) ; boolean four = nums . stream ( ) . anyMatch ( x -> x . equals ( " 4 " ) ) ; if ( one && nine && seven && four ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] data = br . readLine ( ) . split ( " " ) ; long k = Long . parseLong ( data [ 0 ] ) ; long s = Long . parseLong ( data [ 1 ] ) ; long result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { result += getNumAllocation ( s - i , k ) ; } System . out . println ( result ) ; } public static long getNumAllocation ( long sum , long max ) { if ( sum < 0 ) { return 0 ; } else if ( sum <= max ) { return sum + 1 ; } else if ( sum <= max * 2 ) { return 2 * max - sum + 1 ; } else { return 0 ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int r = n ; int max = p [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { r -- ; } else { max = p [ i ] ; } } System . out . println ( r ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) grid [ i ] [ j ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( grid [ i ] [ j ] + grid [ i + 1 ] [ j + 1 ] != grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { try ( Scanner sc = new Scanner ( System . in ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( 0 <= s - i - j && s - i - j <= k ) { count ++ ; } } } System . out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int t = s - i - j ; if ( t >= 0 && t <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { solve ( sc ) ; } } public static void solve ( Scanner sc ) { int [ ] [ ] matrix = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { matrix [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = matrix [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = matrix [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = matrix [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = matrix [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = matrix [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( matrix [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; long answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { int limit_y = Math . min ( K , S - x ) ; for ( int y = 0 ; y <= limit_y ; y ++ ) { if ( S - x - y <= K ) { answer += 1 ; } } } System . out . println ( answer ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; System . out . println ( n [ 0 ] == 1 && n [ 1 ] == 4 && n [ 2 ] == 7 && n [ 3 ] == 9 ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; int start , end ; if ( S < K ) { end = S ; } else { end = K ; } if ( S - 2 * K > 0 ) { start = S - 2 * K ; } else { start = 0 ; } for ( int x = start ; x <= end ; x ++ ) { int temp = S - x ; if ( temp > K ) { count += 2 * K - temp + 1 ; } else { count += temp + 1 ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean b = true ; b &= a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 1 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] ; b &= a [ 0 ] [ 2 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; b &= a [ 2 ] [ 2 ] - a [ 2 ] [ 1 ] == a [ 1 ] [ 2 ] - a [ 1 ] [ 1 ] ; System . out . println ( b ? " Yes " : " No " ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; String ans = a [ 0 ] == 1 && a [ 1 ] == 4 && a [ 2 ] == 7 && a [ 3 ] == 9 ? " YES " : " NO " ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int z , cnt = 0 , i , j ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { z = s - ( i + j ) ; if ( 0 <= z && z <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Set < Integer > set = new TreeSet < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { set . add ( sc . nextInt ( ) ) ; } if ( set . contains ( 1 ) && set . contains ( 9 ) && set . contains ( 7 ) && set . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int ans = 0 ; int z = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int want = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int m = 0 ; m <= k ; m ++ ) { if ( want - i - m <= k && want - i - m >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = N ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { min = p ; count ++ ; } } print ( count ) ; sc . close ( ) ; } public static void print ( Object obj ) { System . out . println ( obj ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; if ( K * 3 == S ) { System . out . println ( " 1 " ) ; System . exit ( 0 ) ; } if ( K == S ) { System . out . println ( K * 3 ) ; System . exit ( 0 ) ; } for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - ( x + y ) <= K && S - ( x + y ) >= 0 ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int a = sc . nextInt ( ) ; if ( H >= a ) { ans ++ ; } H = Math . min ( a , H ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int q = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( q > p ) { count ++ ; q = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { try ( Scanner sc = new Scanner ( System . in ) ) { int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } long ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( min >= P [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; import java . nio . charset . StandardCharsets ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; Main ins = new Main ( in ) ; ins . calc ( ) ; ins . showResult ( ) ; } int [ ] [ ] c ; Main ( BufferedReader in ) throws IOException { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { String [ ] tokens = in . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = Integer . parseInt ( tokens [ j ] ) ; } } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { c [ j ] [ i ] -= c [ 0 ] [ i ] ; } } for ( int i = 0 ; i < 3 ; ++ i ) { c [ 0 ] [ i ] = 0 ; } boolean enable = true ; for ( int i = 0 ; i < 3 ; ++ i ) { boolean cond = true ; for ( int j = 1 ; j < 3 ; ++ j ) { if ( c [ i ] [ j ] != c [ i ] [ 0 ] ) { cond = false ; } } if ( ! cond ) { enable = false ; break ; } } System . out . println ( ( enable ? " Yes " : " No " ) ) ; } void calc ( ) { } void showResult ( ) { } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = a [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min >= a [ i ] ) { min = a [ i ] ; count ++ ; } else { } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) for ( int j = 0 ; j <= k ; j ++ ) if ( s - i - j >= 0 && s - i - j <= k ) ans ++ ; System . out . println ( ans ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int c [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) c [ i ] = scan . nextInt ( ) ; for ( int i = 0 ; i < 2 ; ++ i ) { int d = c [ i * 3 ] - c [ ( i + 1 ) * 3 ] ; for ( int j = 0 ; j < 3 ; ++ j ) { if ( c [ i * 3 + j ] - c [ ( i + 1 ) * 3 + j ] != d ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String result = " Yes " ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; a [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { b [ i ] = arr [ 0 ] [ i ] - a [ 0 ] ; a [ i ] = arr [ i ] [ 0 ] - b [ 0 ] ; } l : for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] + b [ j ] != arr [ i ] [ j ] ) { result = " No " ; break l ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int box = sc . nextInt ( ) ; int [ ] list = new int [ box ] ; for ( int i = 0 ; i < list . length ; ++ i ) { list [ i ] = sc . nextInt ( ) ; } int intMin = list [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < list . length ; ++ i ) { if ( intMin > list [ i ] ) { intMin = list [ i ] ; count += 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { private static void solve ( ) { int N = ni ( ) ; int [ ] P = na ( N ) ; int min = P [ 0 ] ; int result = 1 ; for ( int i = 1 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) result ++ ; } System . out . println ( result ) ; } private static BufferedReader br ; public static void main ( String [ ] args ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String debugDataPath = System . getenv ( " DD_PATH " ) ; if ( debugDataPath != null ) { try { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( new File ( debugDataPath ) ) ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } solve ( ) ; } private static StringTokenizer tokenizer = null ; public static String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } private static int ni ( ) { return Integer . parseInt ( next ( ) ) ; } private static long nl ( ) { return Long . parseLong ( next ( ) ) ; } private static double nd ( ) { return Double . parseDouble ( next ( ) ) ; } private static int [ ] na ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = ni ( ) ; return a ; } private static char [ ] ns ( ) { return next ( ) . toCharArray ( ) ; } private static long [ ] nal ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nl ( ) ; return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; for ( int k = 0 ; k < 100 ; k ++ ) { x [ 0 ] = k ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { break ; } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ j ] [ i ] -= c [ 0 ] [ i ] ; } for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] [ j ] -= c [ i ] [ 0 ] ; } if ( c [ 1 ] [ 1 ] == 0 && c [ 1 ] [ 2 ] == 0 && c [ 2 ] [ 1 ] == 0 && c [ 2 ] [ 2 ] == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scn = new Scanner ( System . in ) ; int check = 0 ; int [ ] a = new int [ 9 ] ; for ( int i = 0 ; i < a . length ; ++ i ) { a [ i ] = scn . nextInt ( ) ; } int x1 = a [ 3 ] - a [ 0 ] ; int x2 = a [ 6 ] - a [ 3 ] ; if ( a [ 4 ] != a [ 1 ] + x1 ) { check = 1 ; } if ( a [ 5 ] != a [ 2 ] + x1 ) { check = 1 ; } if ( a [ 7 ] != a [ 4 ] + x2 ) { check = 1 ; } if ( a [ 8 ] != a [ 5 ] + x2 ) { check = 1 ; } if ( check == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int temp = Integer . parseInt ( sc . next ( ) ) ; if ( a >= temp ) { a = temp ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; scanner . close ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = 0 ; if ( x + y < s && s - ( x + y ) <= k ) { z = s - ( x + y ) ; } if ( x + y + z == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] min = new int [ n + 1 ] ; min [ 0 ] = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( i > 0 ) min [ i ] = Math . min ( min [ i - 1 ] , p [ i - 1 ] ) ; } int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min [ i ] > p [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - ( x + y ) ) >= 0 && ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { for ( int j = 0 ; j < K + 1 ; j ++ ) { int k = S - i - j ; int sum = i + j + k ; if ( 0 <= k && k <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 1000000 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = Integer . parseInt ( sc . next ( ) ) ; if ( p < min ) ans ++ ; min = Math . min ( min , p ) ; } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; class Main { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static FastScanner sc = new FastScanner ( br ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static Random rnd = new Random ( ) ; public static void main ( String args [ ] ) throws Exception { int k = sc . nextInt ( ) , s = sc . nextInt ( ) , ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int curr = s - i - j ; if ( curr >= 0 && curr <= k ) { ans ++ ; } } } out . println ( ans ) ; out . close ( ) ; } } class FastScanner { BufferedReader in ; StringTokenizer st ; public FastScanner ( BufferedReader in ) { this . in = in ; } public String nextToken ( ) throws Exception { while ( st == null || ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( in . readLine ( ) ) ; } return st . nextToken ( ) ; } public String next ( ) throws Exception { return nextToken ( ) . toString ( ) ; } public int nextInt ( ) throws Exception { return Integer . parseInt ( nextToken ( ) ) ; } public long nextLong ( ) throws Exception { return Long . parseLong ( nextToken ( ) ) ; } public double nextDouble ( ) throws Exception { return Double . parseDouble ( nextToken ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int [ ] arr = new int [ n ] ; int min = Integer . MAX_VALUE ; int updatedMin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scn . nextInt ( ) ; if ( arr [ i ] < min ) { updatedMin ++ ; min = arr [ i ] ; } } System . out . println ( updatedMin ) ; } }
import java . io . * ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( ) { try { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public String next ( ) { if ( st . hasMoreTokens ( ) ) return st . nextToken ( ) ; try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { String line = " " ; if ( st . hasMoreTokens ( ) ) line = st . nextToken ( ) ; else try { return br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } while ( st . hasMoreTokens ( ) ) line += " " + st . nextToken ( ) ; return line ; } } public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; boolean one = false , two = false , three = false , four = false ; for ( int i = 0 ; i < 4 ; i ++ ) { int a = sc . nextInt ( ) ; if ( a == 1 ) one = true ; else if ( a == 9 ) two = true ; else if ( a == 7 ) three = true ; else if ( a == 4 ) four = true ; } pw . println ( one && two && three && four ? " YES " : " NO " ) ; pw . close ( ) ; } }
import java . util . * ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; HashSet < String > list = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . add ( sc . next ( ) ) ; } if ( list . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > array = new ArrayList < > ( ) ; for ( int counter = 0 ; counter < 4 ; counter ++ ) array . add ( sc . nextInt ( ) ) ; List < Integer > list = new ArrayList < > ( ) ; list . add ( 1 ) ; list . add ( 4 ) ; list . add ( 7 ) ; list . add ( 9 ) ; System . out . println ( array . containsAll ( list ) ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int b = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; int d = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; if ( a == b && b == d ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = N ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , P [ i ] ) ; if ( P [ i ] <= min ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in , " UTF-8 " ) ; int n [ ] = { 1 , 9 , 7 , 4 } ; String [ ] inp = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { inp [ i ] = sc . next ( ) ; } int cont = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( n [ i ] == Integer . parseInt ( inp [ j ] ) ) { cont ++ ; break ; } } } if ( cont == 4 ) { System . out . print ( " YES " ) ; } else if ( cont != 4 ) { System . out . print ( " NO " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int k = gi ( ) ; int s = gi ( ) ; int c = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { c ++ ; } } } System . out . println ( c ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != x [ i ] + y [ j ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int maxNum = scan . nextInt ( ) ; int sum = scan . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= maxNum ; ++ x ) { for ( int y = 0 ; y <= maxNum ; ++ y ) { int z = sum - x - y ; if ( 0 <= z && z <= maxNum ) { ans = ans + 1 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; ++ i ) { c [ i ] = sc . nextInt ( ) ; } int d1 = c [ 1 ] - c [ 0 ] ; int d2 = c [ 2 ] - c [ 1 ] ; String ans = " Yes " ; if ( c [ 4 ] != c [ 3 ] + d1 ) { ans = " No " ; } if ( c [ 7 ] != c [ 6 ] + d1 ) { ans = " No " ; } if ( c [ 5 ] != c [ 4 ] + d2 ) { ans = " No " ; } if ( c [ 8 ] != c [ 7 ] + d2 ) { ans = " No " ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( 0 <= z && z <= K ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int sum1 = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; int sum2 = c [ 2 ] [ 0 ] + c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] ; int sum3 = c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 2 ] ; if ( sum1 == sum2 && sum2 == sum3 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j >= 0 && S - i - j <= K ) count ++ ; } } System . out . println ( count ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ) { Integer bar [ ] = { 1 , 9 , 7 , 4 } ; int in_bar [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { in_bar [ i ] = sc . nextInt ( ) ; } int ok_count = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( bar [ i ] == in_bar [ j ] ) { ok_count ++ ; break ; } } } if ( ok_count == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { int k , s ; public static void main ( String args [ ] ) { new Main ( ) . run ( ) ; } void run ( ) { FastReader sc = new FastReader ( ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; solve ( ) ; } void solve ( ) { long count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int [ ] nums = new int [ 4 ] ; String [ ] colors = { " P " , " W " , " G " , " Y " } ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( s . equals ( colors [ j ] ) ) { nums [ j ] += 1 ; } } } for ( int nu : nums ) { if ( nu > 0 ) { cnt ++ ; } } if ( cnt == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int day , numberOfTypes , bestShowy = 0 ; day = sc . nextInt ( ) ; numberOfTypes = sc . nextInt ( ) ; int temperature [ ] = new int [ day ] ; int clothesInfo [ ] [ ] = new int [ numberOfTypes ] [ 3 ] ; for ( int i = 0 ; i < day ; i ++ ) { temperature [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < numberOfTypes ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { clothesInfo [ i ] [ j ] = sc . nextInt ( ) ; } } int showy [ ] [ ] = new int [ day ] [ numberOfTypes ] ; for ( int i = 0 ; i < day ; i ++ ) { for ( int j = 0 ; j < numberOfTypes ; j ++ ) { if ( clothesInfo [ j ] [ 0 ] <= temperature [ i ] && clothesInfo [ j ] [ 1 ] >= temperature [ i ] ) { showy [ i ] [ j ] = 0 ; } else { showy [ i ] [ j ] = - 1 ; } } } for ( int i = 1 ; i < day ; i ++ ) { for ( int j = 0 ; j < numberOfTypes ; j ++ ) { if ( showy [ i ] [ j ] == 0 ) { for ( int k = 0 ; k < numberOfTypes ; k ++ ) { if ( showy [ i - 1 ] [ k ] != - 1 ) { showy [ i ] [ j ] = Math . max ( showy [ i ] [ j ] , showy [ i - 1 ] [ k ] + Math . abs ( clothesInfo [ k ] [ 2 ] - clothesInfo [ j ] [ 2 ] ) ) ; } } } } } for ( int p = 0 ; p < numberOfTypes ; p ++ ) { bestShowy = Math . max ( bestShowy , showy [ day - 1 ] [ p ] ) ; } System . out . println ( bestShowy ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = s . nextInt ( ) ; } } int flag = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ) != ( arr [ i + 1 ] [ 0 ] - arr [ i + 1 ] [ 1 ] ) ) flag = 1 ; if ( ( arr [ i ] [ 1 ] - arr [ i ] [ 2 ] ) != ( arr [ i + 1 ] [ 1 ] - arr [ i + 1 ] [ 2 ] ) ) flag = 1 ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( ( arr [ 0 ] [ i ] - arr [ 1 ] [ i ] ) != ( arr [ 0 ] [ i + 1 ] - arr [ 1 ] [ i + 1 ] ) ) flag = 1 ; if ( ( arr [ 1 ] [ i ] - arr [ 2 ] [ i ] ) != ( arr [ 1 ] [ i + 1 ] - arr [ 2 ] [ i + 1 ] ) ) flag = 1 ; } if ( flag != 0 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int min = n + 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int next = scan . nextInt ( ) ; if ( min > next ) { min = next ; ans ++ ; } } System . out . println ( ans ) ; scan . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] m = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { p [ i ] = sc . nextInt ( ) ; m [ i ] = ( i == 0 ) ? p [ i ] : Math . min ( p [ i ] , m [ i - 1 ] ) ; if ( p [ i ] == m [ i ] ) ++ ans ; } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . * ; public class Main { static BufferedReader in ; public static void solve ( ) throws IOException { int n = nextInt ( ) ; Integer [ ] arr = nextArray ( n ) ; PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; int res = 0 ; for ( int num : arr ) { if ( pq . isEmpty ( ) || pq . peek ( ) >= num ) res ++ ; pq . add ( num ) ; } System . out . println ( res ) ; } public static void main ( String [ ] args ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solve ( ) ; } static int nextInt ( ) throws IOException { return Integer . parseInt ( in . readLine ( ) . trim ( ) ) ; } static long nextLong ( ) throws IOException { return Long . parseLong ( in . readLine ( ) . trim ( ) ) ; } static Integer [ ] nextArray ( int n ) throws IOException { StringTokenizer st = new StringTokenizer ( in . readLine ( ) ) ; Integer [ ] tmp = new Integer [ n ] ; for ( int i = 0 ; i < tmp . length ; i ++ ) { tmp [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } return tmp ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner sc = new java . util . Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int sum = 1 ; p [ 0 ] = sc . nextInt ( ) ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; if ( p [ i ] < min ) { min = p [ i ] ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void testArr ( int [ ] [ ] a ) { int a1 = 0 ; int a2 = 0 ; int a3 = 0 ; int b1 = 0 ; int b2 = 0 ; int b3 = 0 ; for ( int i = 0 ; i <= a [ 0 ] [ 0 ] ; i ++ ) { for ( int j = 0 ; j <= a [ 1 ] [ 1 ] ; j ++ ) { for ( int k = 0 ; k <= a [ 2 ] [ 2 ] ; k ++ ) { a1 = i ; b1 = a [ 0 ] [ 0 ] - i ; a2 = j ; b2 = a [ 1 ] [ 1 ] - j ; a3 = k ; b3 = a [ 2 ] [ 2 ] - k ; if ( a1 + b1 == a [ 0 ] [ 0 ] && a1 + b2 == a [ 0 ] [ 1 ] && a1 + b3 == a [ 0 ] [ 2 ] && a2 + b1 == a [ 1 ] [ 0 ] && a2 + b2 == a [ 1 ] [ 1 ] && a2 + b3 == a [ 1 ] [ 2 ] && a3 + b1 == a [ 2 ] [ 0 ] && a3 + b2 == a [ 2 ] [ 1 ] && a3 + b3 == a [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } } } System . out . println ( " No " ) ; return ; } public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = s . nextInt ( ) ; } } testArr ( a ) ; s . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; long sum = 0 , count = 0 , flag = 0 , max = - 999999 , min = 99999 ; long [ ] array = new long [ a ] ; String buff ; for ( int i = 0 ; i < a ; i ++ ) { buff = sc . next ( ) ; if ( buff . equals ( " P " ) ) { array [ 0 ] ++ ; } else if ( buff . equals ( " G " ) ) { array [ 1 ] ++ ; } else if ( buff . equals ( " Y " ) ) { array [ 2 ] ++ ; } else { array [ 3 ] ++ ; } } for ( int i = 0 ; i < a ; i ++ ) { if ( array [ i ] != 0 ) count ++ ; } if ( count == 3 ) System . out . println ( " Three " ) ; if ( count == 4 ) System . out . println ( " Four " ) ; } public static int sample ( int n ) { return n ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int array [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { array [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } long ans = array [ 1 ] - 1 ; array [ 1 ] = 1 ; int curr = 2 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( array [ i ] < curr ) continue ; if ( array [ i ] > curr ) { ans += array [ i ] / curr ; if ( array [ i ] % curr == 0 ) -- ans ; } if ( array [ i ] == curr ) ++ curr ; } System . out . print ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x , y , z , cnt = 0 ; sc . close ( ) ; for ( int i = Math . max ( 0 , s - 2 * k ) ; i <= Math . min ( k , s ) ; i ++ ) { x = i ; for ( int j = Math . max ( 0 , s - i - k ) ; j <= Math . min ( k , s - i ) ; j ++ ) { y = j ; for ( int l = Math . max ( 0 , s - i - j ) ; l <= Math . min ( k , s - i - j ) ; l ++ ) { z = l ; if ( x + y + z == s ) { cnt ++ ; } } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int min = n + 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p < min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 ; a1 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == c [ 1 ] [ 1 ] && a2 + b3 == c [ 1 ] [ 2 ] && a3 + b2 == c [ 2 ] [ 1 ] && a3 + b3 == c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int s1 = sc . nextInt ( ) ; int s2 = sc . nextInt ( ) ; int cnt = 0 ; int sa = 0 ; for ( int x = 0 ; x <= s1 ; x ++ ) { for ( int y = 0 ; y <= s1 ; y ++ ) { sa = s2 - x - y ; if ( sa >= 0 && sa <= s1 ) { cnt ++ ; } } } System . out . println ( cnt ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int curMin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( i == 0 ) { curMin = p ; cnt ++ ; continue ; } if ( p < curMin ) { curMin = p ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . util . TreeMap ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int cnt = 1 ; int min = sc . nextInt ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int next = sc . nextInt ( ) ; if ( min > next ) { cnt ++ ; } min = Math . min ( min , next ) ; } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Integer [ ] N = new Integer [ 4 ] ; int sum = 0 , product = 1 ; for ( int i = 0 ; i < 4 ; i ++ ) { N [ i ] = sc . nextInt ( ) ; sum += N [ i ] ; product *= N [ i ] ; } if ( sum == 21 && product == 252 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int max = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( max > p ) { ans ++ ; max = p ; } } System . out . println ( ans ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( args ) ; } public void solve ( String [ ] args ) { MyScanner scanner = new MyScanner ( ) ; int k = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int cnt = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { if ( x > s ) { break ; } for ( int y = 0 ; y <= k ; y ++ ) { if ( ( x + y ) > s ) { break ; } if ( ( s - ( x + y ) ) <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = " " ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { try { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( " " ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; } public int nextInt ( ) { try { return Integer . parseInt ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public double nextDouble ( ) { try { return Double . parseDouble ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } public long nextLong ( ) { try { return Long . parseLong ( next ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return - 1 ; } } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int P [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int min = N + 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { count ++ ; min = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] C1 = new int [ 3 ] ; int [ ] C2 = new int [ 3 ] ; int [ ] C3 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { C1 [ i ] = sc . nextInt ( ) ; C2 [ i ] = sc . nextInt ( ) ; C3 [ i ] = sc . nextInt ( ) ; } if ( sol ( C1 ) != sol ( C2 ) || sol ( C2 ) != sol ( C3 ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } private static int sol ( int [ ] C ) { Arrays . sort ( C ) ; int sum = 0 ; for ( int n : C ) { sum += n ; } return sum - C [ 0 ] * C . length ; } }
import java . util . * ; public class Main { static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) , s = sc . nextInt ( ) , t = 0 ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { m . put ( i + j , m . get ( i + j ) == null ? 1 : m . get ( i + j ) + 1 ) ; } } for ( int k = 0 ; k <= K ; k ++ ) if ( m . containsKey ( s - k ) ) t += m . get ( s - k ) ; System . out . println ( t ) ; sc . close ( ) ; } public static void main ( String args [ ] ) { solve ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( z >= 0 && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ ] ; for ( int i = 0 ; i < 3 ; i ++ ) arr [ i ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) arr [ i ] [ j ] = scan . nextInt ( ) ; } int [ ] diff = new int [ 9 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) diff [ i * 3 + j ] = arr [ i ] [ j ] - arr [ i ] [ ( j + 1 ) % 3 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { if ( diff [ i ] != diff [ i + 3 ] || diff [ i + 3 ] != diff [ i + 6 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . io . * ; import java . util . * ; final class Solver { static final Solver INSTANCE = new Solver ( ) ; void solve ( Iterator < String > sc ) { int K = Integer . parseInt ( sc . next ( ) ) ; int S = Integer . parseInt ( sc . next ( ) ) ; int sum = 0 ; for ( int x = 0 ; x <= K && x <= S ; x ++ ) { int remaining = S - x ; sum += Math . max ( Math . min ( remaining , K ) - Math . max ( remaining - K , 0 ) + 1 , 0 ) ; } System . out . println ( sum ) ; } } class Main { public static void main ( String ... args ) { try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { Iterator < String > tokens = reader . lines ( ) . map ( s -> s . split ( " " ) ) . flatMap ( Arrays :: stream ) . iterator ( ) ; Solver . INSTANCE . solve ( tokens ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - x - y >= 0 ) && ( s - x - y <= k ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 0 , min = n ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { ans ++ ; min = p [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scanner . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 == 0 && sum / 3 == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 , min = n , p ; i < n ; i ++ ) { p = sc . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long Count = 0l ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int ch = sc . nextInt ( ) ; if ( ch <= min ) { Count ++ ; min = ch ; } } System . out . println ( Count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j ) >= 0 && ( S - i - j ) <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 3 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 3 ] [ 3 ] - c [ 2 ] [ 3 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 3 ] [ 2 ] - c [ 3 ] [ 1 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 3 ] - c [ 2 ] [ 2 ] && c [ 1 ] [ 3 ] - c [ 1 ] [ 2 ] == c [ 3 ] [ 3 ] - c [ 3 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ; scan . close ( ) ; String [ ] ks = str . split ( " " ) ; int n = 0 ; int k = Integer . parseInt ( ks [ 0 ] ) ; int s = Integer . parseInt ( ks [ 1 ] ) ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { n ++ ; } } } System . out . println ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; int x = 0 ; int y = 0 ; int z = s - ( x + y ) ; int yz = y + z ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && x + y + k >= s ) { count ++ ; } } } if ( s == k * 3 ) { count = 1 ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner std = new Scanner ( System . in ) ; int n = std . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = std . nextInt ( ) ; } int max = p [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int value = p [ i ] ; if ( value <= max ) { count ++ ; } max = Math . min ( max , value ) ; } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int s = 0 ; int lo = p [ 0 ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( lo >= p [ i ] ) { lo = p [ i ] ; s ++ ; } } System . out . println ( s ) ; sc . close ( ) ; } }
import java . io . * ; import java . lang . reflect . Array ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Scanner sc = new Scanner ( System . in ) ; List < Integer > list = Arrays . asList ( 1 , 9 , 7 , 4 ) ; Integer n1 = sc . nextInt ( ) ; Integer n2 = sc . nextInt ( ) ; Integer n3 = sc . nextInt ( ) ; Integer n4 = sc . nextInt ( ) ; Integer count = 0 ; for ( Integer num : list ) { if ( num == n1 || num == n2 || num == n3 || num == n4 ) { count += 1 ; } } if ( count == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; import java . util . * ; import static java . lang . System . in ; public class Main { ArrayList < Integer > [ ] graph ; HashSet < Integer > cycle ; int [ ] prev ; PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) throws Exception { Main main = new Main ( ) ; System . out . println ( main . solve ( ) ) ; } long solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long ans = 0 ; int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= mini ) ans += 1 ; mini = Math . min ( mini , a [ i ] ) ; } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; scan . close ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { P [ i ] = sc . nextInt ( ) ; } int count = 0 ; int Pj = P [ 0 ] ; for ( int i = 0 ; i < N ; ++ i ) { if ( P [ i ] <= Pj ) { ++ count ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = sc . nextInt ( ) ; int ans = 1 ; int tmp = b [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( tmp > b [ i ] ) { tmp = b [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) , a = 0 , i , j ; scan . close ( ) ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j > s ) break ; if ( k >= s - i - j ) a ++ ; } } System . out . print ( a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] ar ) { Scanner sc = new Scanner ( System . in ) ; int cnt = 0 ; int k = sc . nextInt ( ) , def = sc . nextInt ( ) ; int x = 0 , y = 0 , z = def ; while ( true ) { z = def - x ; y = 0 ; while ( true ) { if ( x <= k && y <= k && z <= k ) { ++ cnt ; } if ( z == 0 ) { break ; } -- z ; ++ y ; } ++ x ; if ( x > def ) { break ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int t = 0 ; t <= k ; t ++ ) { int z = s - i - t ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k && x <= s ; x ++ ) { for ( int y = 0 ; y <= k && y <= s ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void run ( int C [ ] [ ] ) { int r [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int d = C [ i ] [ j ] - C [ i ] [ j == 2 ? 0 : j + 1 ] ; if ( i == 0 ) { r [ j ] = d ; } else if ( d != r [ j ] ) { System . out . println ( " No " ) ; return ; } } } for ( int j = 0 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) { int d = C [ i ] [ j ] - C [ i == 2 ? 0 : i + 1 ] [ j ] ; if ( j == 0 ) { r [ i ] = d ; } else if ( d != r [ i ] ) { System . out . println ( " No " ) ; return ; } } } System . out . println ( " Yes " ) ; } public static void runInput ( ) { Scanner scanner = new Scanner ( System . in ) ; int C [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = scanner . nextInt ( ) ; } } run ( C ) ; } public static void main ( String args [ ] ) { runInput ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; ArrayList < String > hina = new ArrayList < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { S [ i ] = sc . next ( ) ; if ( ! hina . contains ( S [ i ] ) ) { hina . add ( S [ i ] ) ; } } if ( hina . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; n [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; n [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; n [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; n [ 3 ] = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( i == j ) { continue ; } for ( int k = 0 ; k < 4 ; k ++ ) { if ( j == k ) { continue ; } for ( int l = 0 ; l < 4 ; l ++ ) { if ( k == l ) { continue ; } if ( n [ i ] == 1 && n [ j ] == 9 && n [ k ] == 7 && n [ l ] == 4 ) { System . out . println ( " YES " ) ; return ; } } } } } System . out . println ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int l = s - i - j ; if ( l >= 0 && l <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { public static void exec ( InputStream in , PrintStream out ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int result = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int c = sc . nextInt ( ) ; if ( min > c ) { min = c ; result ++ ; } } out . println ( result ) ; } public static void main ( String [ ] args ) { exec ( System . in , System . out ) ; } }
import java . io . PrintStream ; import java . util . Scanner ; public class Main { static final PrintStream out = System . out ; static Scanner sc = new Scanner ( System . in ) ; static final long Mod = 1000_000_007L ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; System . exit ( 0 ) ; } void solve ( ) { int K = nextInt ( ) ; int S = nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int num = i + j ; if ( num + K >= S && num <= S ) { cnt ++ ; } else if ( num > S ) { break ; } } } out . println ( cnt ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { return sc . next ( ) ; } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > hina = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hina . add ( sc . next ( ) ) ; } String ans = " Three " ; if ( hina . size ( ) == 4 ) { ans = " Four " ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] arg ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int total = 0 ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < K + 1 ; i ++ ) { list . add ( i ) ; } for ( int x = 0 ; x < K + 1 ; x ++ ) { for ( int y = 0 ; y < K + 1 ; y ++ ) { if ( S - ( list . get ( x ) + list . get ( y ) ) <= K && ( S - ( list . get ( x ) + list . get ( y ) ) >= 0 ) ) { total += 1 ; } } } System . out . println ( total ) ; } }
import java . util . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; scanner . close ( ) ; int combination = 0 ; int k ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { k = S - i - j ; if ( i + j + k == S && i >= 0 && j >= 0 && k >= 0 && k <= K ) { combination ++ ; } } } System . out . println ( combination ) ; } }
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; String result = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int b1 = c [ 0 ] [ 0 ] ; int b2 = c [ 1 ] [ 0 ] ; int b3 = c [ 2 ] [ 0 ] ; if ( ( c [ 0 ] [ 1 ] - b1 != c [ 1 ] [ 1 ] - b2 ) || ( c [ 1 ] [ 1 ] - b2 != c [ 2 ] [ 1 ] - b3 ) ) { result = " No " ; } if ( ( c [ 0 ] [ 2 ] - b1 != c [ 1 ] [ 2 ] - b2 ) || ( c [ 1 ] [ 2 ] - b2 != c [ 2 ] [ 2 ] - b3 ) ) { result = " No " ; } System . out . println ( result ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String line1 = sc . nextLine ( ) ; String line2 = sc . nextLine ( ) ; String [ ] array = line2 . split ( " " ) ; int n = Integer . parseInt ( line1 ) ; int min = Integer . parseInt ( array [ 0 ] ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int buf = Integer . parseInt ( array [ i ] ) ; if ( buf < min ) { min = buf ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n = getInput ( ) . get ( 0 ) ; ArrayList < Integer > p = getInput ( ) ; int count = 1 ; int tmin = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { tmin = Math . min ( p . get ( i - 1 ) , tmin ) ; if ( p . get ( i ) <= tmin ) ++ count ; } Print ( count ) ; } private static Scanner scanner = new Scanner ( System . in ) ; private static ArrayList < Integer > getInput ( ) { String in = scanner . nextLine ( ) ; ArrayList < Integer > result = new ArrayList < > ( ) ; for ( String t : in . split ( " " ) ) { result . add ( Integer . parseInt ( t ) ) ; } return result ; } private static void Print ( Object o ) { System . out . println ( o ) ; } private static void Print ( Object ... o ) { for ( Object i : o ) System . out . print ( i ) ; System . out . println ( ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } public void solve ( ) { Scanner scan = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; int N = scan . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scan . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { ans += 1 ; min = P [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int l = Math . min ( s , k ) ; int total = 0 ; for ( int i = l ; i >= 0 ; i -- ) { int m = Math . min ( s - i , k ) ; if ( s - i < k ) { total += m + 1 ; } else { total += Math . max ( k - ( s - i - m ) + 1 , 0 ) ; } } System . out . println ( total ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { for ( int j = 0 ; j < K + 1 ; j ++ ) { if ( S - ( i + j ) <= K && 0 <= S - ( i + j ) ) { c += 1 ; } } } System . out . println ( c ) ; } }
import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int c [ ] [ ] = new int [ 3 ] [ 3 ] ; boolean F = false ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= 100 && ! F ; a1 ++ ) { for ( int a2 = 0 ; a2 <= 100 && ! F ; a2 ++ ) { for ( int a3 = 0 ; a3 <= 100 && ! F ; a3 ++ ) { int b1 = c [ 0 ] [ 0 ] - a1 , b2 = c [ 0 ] [ 1 ] - a1 , b3 = c [ 0 ] [ 2 ] - a1 ; boolean L2 , L3 ; L2 = ( c [ 1 ] [ 0 ] == a2 + b1 && c [ 1 ] [ 1 ] == a2 + b2 && c [ 1 ] [ 2 ] == a2 + b3 ) ; L3 = ( c [ 2 ] [ 0 ] == a3 + b1 && c [ 2 ] [ 1 ] == a3 + b2 && c [ 2 ] [ 2 ] == a3 + b3 ) ; F = L2 && L3 ; } } } System . out . println ( F ? " Yes " : " No " ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static final int N = 3 ; public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int [ ] [ ] c = new int [ N ] [ N ] ; IntStream . range ( 0 , N ) . forEach ( i -> IntStream . range ( 0 , N ) . forEach ( j -> c [ i ] [ j ] = scanner . nextInt ( ) ) ) ; boolean result = true ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff1 = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] ; int diff2 = c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] ; for ( int j = 1 ; j < N ; j ++ ) { if ( ( c [ i + 1 ] [ j ] - c [ i ] [ j ] ) != diff1 ) { result = false ; break ; } if ( ( c [ j ] [ i + 1 ] - c [ j ] [ i ] ) != diff2 ) { result = false ; break ; } } } System . out . println ( result ? " Yes " : " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; int max = a [ 0 ] ; int min = a [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= max && a [ i ] < min ) { count ++ ; min = a [ i ] ; } else { max = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; boolean ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( a + x == d && b + x == e && c + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; return ; } ok = false ; for ( int x = - 100 ; x <= 100 ; x ++ ) { if ( g + x == d && h + x == e && i + x == f ) { ok = true ; break ; } } if ( ! ok ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] [ ] c2 = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; c2 [ i ] [ j ] = c [ i ] [ j ] ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c [ i ] [ 2 ] -= c [ i ] [ 0 ] ; c [ i ] [ 1 ] -= c [ i ] [ 0 ] ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( c [ 0 ] [ i + 1 ] != c [ 1 ] [ i + 1 ] || c [ 2 ] [ i + 1 ] != c [ 1 ] [ i + 1 ] ) { System . out . println ( " No " ) ; return ; } } for ( int i = 0 ; i < 3 ; i ++ ) { c2 [ 2 ] [ i ] -= c2 [ 0 ] [ i ] ; c2 [ 1 ] [ i ] -= c2 [ 0 ] [ i ] ; } for ( int i = 0 ; i < 2 ; i ++ ) { if ( c2 [ i + 1 ] [ 0 ] != c2 [ i + 1 ] [ 1 ] || c2 [ i + 1 ] [ 2 ] != c2 [ i + 1 ] [ 1 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; int b = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; int x = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; int y = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; boolean correct = true ; if ( c [ 1 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a ) correct = false ; if ( c [ 1 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a ) correct = false ; if ( c [ 2 ] [ 1 ] != c [ 0 ] [ 0 ] + x + a + b ) correct = false ; if ( c [ 2 ] [ 2 ] != c [ 0 ] [ 0 ] + x + y + a + b ) correct = false ; if ( correct ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( S - i - j <= K && S - i - j >= 0 ) { ans ++ ; } else if ( S - i - j <= 0 ) { break ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n [ ] [ ] = new int [ 3 ] [ 3 ] ; int total = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int a = sc . nextInt ( ) ; total += a ; n [ i ] [ j ] = a ; } } String ans = " Yes " ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( total % 3 != 0 ) { ans = " No " ; break ; } total /= 3 ; if ( ( n [ 0 ] [ 0 ] + n [ 1 ] [ 1 ] + n [ 2 ] [ 2 ] ) != total || ( n [ 0 ] [ 2 ] + n [ 1 ] [ 1 ] + n [ 2 ] [ 0 ] ) != total ) { ans = " No " ; break ; } } System . out . println ( ans ) ; } }
import java . io . InputStream ; import java . io . PrintStream ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { resolve ( System . in , System . out ) ; } static void resolve ( InputStream is , PrintStream pw ) { Scanner sc = new Scanner ( is ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( sc . next ( ) ) ; } int min = p [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pi = p [ i ] ; if ( pi <= min ) { count ++ ; } min = Math . min ( min , pi ) ; } pw . println ( count ) ; } }
import java . util . Scanner ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( 0 <= z ) && ( z <= k ) ) { answer += 1 ; } } } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int x , y , z ; int ans = 0 ; for ( x = 0 ; x <= K ; x ++ ) { for ( y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] num = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { num [ i ] = sc . next ( ) ; } Arrays . sort ( num ) ; StringBuilder s = new StringBuilder ( 4 ) ; for ( String sss : num ) s . append ( sss ) ; if ( " 1479 " . equals ( s . toString ( ) ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N1 = sc . nextInt ( ) ; int N2 = sc . nextInt ( ) ; int N3 = sc . nextInt ( ) ; int N4 = sc . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; a . add ( 1 ) ; a . add ( 7 ) ; a . add ( 9 ) ; a . add ( 4 ) ; if ( a . indexOf ( N1 ) != - 1 ) { a . remove ( a . indexOf ( N1 ) ) ; if ( a . indexOf ( N2 ) != - 1 ) { a . remove ( a . indexOf ( N2 ) ) ; if ( a . indexOf ( N3 ) != - 1 ) { a . remove ( a . indexOf ( N3 ) ) ; if ( a . indexOf ( N4 ) != - 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static String printAnswer ( int [ ] [ ] c ) { int col1 = 0 ; int col2 = 0 ; int col3 = 0 ; int row1 = 0 ; int row2 = 0 ; int row3 = 0 ; for ( int i = 1 ; i < 3 ; i ++ ) { col1 = c [ 0 ] [ 0 ] - c [ i ] [ 0 ] ; col2 = c [ 0 ] [ 1 ] - c [ i ] [ 1 ] ; col3 = c [ 0 ] [ 2 ] - c [ i ] [ 2 ] ; if ( col1 != col2 || col2 != col3 ) { return " No " ; } row1 = c [ 0 ] [ 0 ] - c [ 0 ] [ i ] ; row2 = c [ 1 ] [ 0 ] - c [ 1 ] [ i ] ; row3 = c [ 2 ] [ 0 ] - c [ 2 ] [ i ] ; if ( row1 != row2 || row2 != row3 ) { return " No " ; } } return " Yes " ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } System . out . println ( printAnswer ( c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ns [ ] = new int [ n ] ; int min ; int nc = 1 ; boolean edge ; boolean edge2 = true ; for ( int i = 0 ; i < n ; i ++ ) ns [ i ] = sc . nextInt ( ) ; min = ns [ 0 ] ; if ( min != 1 ) { for ( int i = 0 ; i < n && edge2 ; i ++ ) { edge = true ; if ( ns [ i ] == 1 ) { nc ++ ; edge2 = false ; } else if ( min > ns [ i ] ) { nc ++ ; min = ns [ i ] ; } } } System . out . println ( nc ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; final int n = scanner . nextInt ( ) ; int min = 200001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = scanner . nextInt ( ) ; if ( p <= min ) { count ++ ; min = p ; } } System . out . println ( count ) ; } }
import java . util . TreeSet ; import java . util . Arrays ; import java . util . SortedSet ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { SortedSet < Integer > k = new TreeSet < > ( Arrays . asList ( 1 , 4 , 7 , 9 ) ) ; SortedSet < Integer > m = new TreeSet < > ( ) ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 4 ; i ++ ) { int z = sc . nextInt ( ) ; if ( k . contains ( z ) ) { m . add ( z ) ; } } if ( m . toArray ( ) . length == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; List < Integer > list = new ArrayList < Integer > ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; n > i ; i ++ ) { int a = sc . nextInt ( ) ; list . add ( a ) ; } int count = 0 ; int min = 1000000 ; for ( int i = 0 ; n > i ; i ++ ) { int a = list . get ( i ) ; if ( min > a ) { min = a ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 , i , j ; for ( i = 0 ; i <= k ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s - ( i + j ) <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; ArrayList < Integer > numList = new ArrayList < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { numList . add ( sc . nextInt ( ) ) ; } int min = numList . get ( 0 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( numList . get ( i ) < min ) { min = numList . get ( i ) ; } if ( numList . get ( i ) <= min ) { ans ++ ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int answer = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { if ( S - x - y <= K && S - x - y >= 0 ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - x - y ; if ( 0 <= z && z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) ; int result = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z <= k && 0 <= z ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; PriorityQueue < Integer > q = new PriorityQueue < Integer > ( ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; q . add ( P ) ; if ( q . peek ( ) == P ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { int diff = s - i ; for ( int j = 0 ; j <= k ; j ++ ) { int diff2 = diff - j ; if ( diff2 >= 0 && diff2 <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; return ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; int l ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { l = s - i - j ; if ( ! ( l < 0 || k < l ) && i + j + l == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < Integer > list = new TreeSet < Integer > ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String ... args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { c [ 0 ] [ i ] = sc . nextInt ( ) ; c [ 1 ] [ i ] = sc . nextInt ( ) ; c [ 2 ] [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( c [ i - 1 ] [ j - 1 ] - c [ i ] [ j - 1 ] != c [ i - 1 ] [ j ] - c [ i ] [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . add ( sc . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( list ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( list . get ( i ) <= min ) { min = list . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; String ans = " NO " ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 && n [ 1 ] == 4 ) { if ( n [ 2 ] == 7 && n [ 3 ] == 9 ) { ans = " YES " ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ; String s = sc . nextLine ( ) ; boolean haveFour = s . contains ( " Y " ) ; System . out . println ( haveFour ? " Four " : " Three " ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int X = 0 ; int Y = 0 ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { X = i ; Y = j ; int Z = S - ( X + Y ) ; if ( ( Z >= 0 ) && ( Z <= K ) ) { sum = sum + 1 ; } } } System . out . println ( sum ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ; boolean isYes = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { isYes = false ; } } } System . out . println ( isYes ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = new int [ 3 ] [ 3 ] ; int [ ] x = new int [ 3 ] ; int [ ] y = new int [ 3 ] ; Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = true ; x [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { y [ i ] = a [ 0 ] [ i ] - x [ 0 ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] [ 0 ] - y [ 0 ] ; } flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( x [ i ] + y [ j ] != a [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = new int [ 9 ] ; int ans = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b11 = a [ 0 ] - a [ 1 ] ; int b12 = a [ 3 ] - a [ 4 ] ; int b13 = a [ 6 ] - a [ 7 ] ; int b21 = a [ 1 ] - a [ 2 ] ; int b22 = a [ 4 ] - a [ 5 ] ; int b23 = a [ 7 ] - a [ 8 ] ; int b31 = a [ 2 ] - a [ 0 ] ; int b32 = a [ 5 ] - a [ 3 ] ; int b33 = a [ 8 ] - a [ 6 ] ; if ( b11 == b12 ) { if ( b12 == b13 ) { if ( b21 == b22 ) { if ( b22 == b23 ) { if ( b31 == b32 ) { if ( b32 == b33 ) { ans ++ ; } } } } } } if ( ans == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
function main ( input ) { var arr = [ ] ; var rows = input . split ( " " ) ; rows = rows . sort ( ) ; if ( rows [ 0 ] == 5 && rows [ 1 ] == 5 && rows [ 2 ] == 7 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return Math . pow ( x , 3 ) ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
function main ( input ) { var val = input . split ( ' ' ) ; var K = parseInt ( val [ 0 ] ) ; var S = parseInt ( val [ 1 ] ) ; var sum = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var value = S - ( i + j ) ; if ( value >= 0 && value <= K ) { sum ++ ; } } } console . log ( sum ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { let A = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; let B = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A == 1 ) A = 14 ; if ( B == 1 ) B = 14 ; if ( A == B ) { console . log ( " Draw " ) ; } else if ( A > B ) { console . log ( " Alice " ) } else { console . log ( " Bob " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function zero_padding_number ( num ) { return ( ' 000000 ' + num . toString ( ) ) . slice ( - 6 ) ; } function main ( input ) { const lines = input . split ( ' \n ' ) ; const N = parseInt ( lines [ 0 ] . split ( ' ' ) [ 0 ] ) ; const M = parseInt ( lines [ 0 ] . split ( ' ' ) [ 1 ] ) ; var pys = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var line = lines [ 1 + i ] . split ( ' ' ) . map ( x => parseInt ( x ) ) pys . push ( [ i , line [ 0 ] , line [ 1 ] ] ) ; } var p_y_sorted = pys . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) { return a [ 2 ] - b [ 2 ] ; } return a [ 1 ] - b [ 1 ] ; } ) var current_p = 0 ; var current_city_index = 1 ; for ( var i = 0 ; i < p_y_sorted . length ; i ++ ) { var current_city = p_y_sorted [ i ] ; if ( current_p != current_city [ 1 ] ) { current_p = current_city [ 1 ] current_city_index = 1 ; } var id = zero_padding_number ( current_city [ 1 ] ) + zero_padding_number ( current_city_index ) ; p_y_sorted [ i ] . push ( id ) ; current_city_index ++ ; } const stdin_sorted_cities = p_y_sorted . sort ( function ( a , b ) { return a [ 0 ] - b [ 0 ] ; } ) for ( var i = 0 ; i < M ; i ++ ) { console . log ( stdin_sorted_cities [ i ] [ 3 ] ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = function ( input ) { let num = 3 ; let ans = input ; for ( let i = 0 ; i < num - 1 ; i ++ ) { ans *= input ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { let [ a , b , h , m ] = input [ 0 ] . trim ( ) . split ( " " ) . map ( i => parseInt ( i ) ) ; const p = [ ( h * 5 * 6 ) + 30 / 60 * m , m * 6 ] ; const diff = Math . max ( ... p ) - Math . min ( ... p ) ; const rad = Math . min ( diff , 360 - diff ) * Math . PI / 180 ; const cosine = Math . cos ( rad ) ; const result = a * a + b * b - ( 2 * a * b * cosine ) ; console . log ( Math . sqrt ( result ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
" use strict " ; function main ( input ) { const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; const rects = [ args [ 0 ] * args [ 1 ] , args [ 2 ] * args [ 3 ] ] . sort ( ( a , b ) => { return a - b ; } ) ; console . log ( rects [ 1 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( x ) { return Math . pow ( x , 3 ) ; } ( parseInt ( inputs [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " function Main ( input ) { const total = input . split ( ' ' ) . map ( Number ) . reduce ( ( acc , cur ) => acc + cur , 0 ) ; const ave = Math . ceil ( total / 2 ) ; console . log ( ave ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var total = a + b + c ; if ( a > 4 && b > 4 && c > 4 && total === 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var H = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; var hrad = Math . PI * 2 / ( 12 * 60 ) ; var mrad = Math . PI * 2 / 60 ; var ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( ( H * 60 + M ) * hrad - M * mrad ) ) ; console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => b > a ) ; console . log ( input [ 0 ] == 7 && input [ 1 ] == 5 && input [ 2 ] == 5 ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 == 2 && count7 == 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function Main ( input ) { const N = parseInt ( input . split ( " \n " ) [ 0 ] , 10 ) ; const x = 800 * N ; let y = 0 ; if ( N >= 15 ) { y = Math . floor ( N / 15 ) * 200 ; } console . log ( x - y ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var five = ( input . match ( / 5 / g ) || [ ] ) . length ; var seven = ( input . match ( / 7 / g ) || [ ] ) . length ; ( five == 2 && seven == 1 ) ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { let nums = input . split ( " \n " ) ; let i = 0 ; while ( nums [ i ] !== " 0 " ) { let sum = 0 ; while ( nums [ i ] . length > 0 ) { let char = nums [ i ] . slice ( - 1 ) ; nums [ i ] = nums [ i ] . slice ( 0 , - 1 ) ; sum += parseInt ( char ) ; } console . log ( sum ) ; i ++ ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const list = input . split ( ' ' ) ; const sortedList = list . sort ( ( a , b ) => a - b ) ; console . log ( sortedList [ 2 ] - sortedList [ 0 ] ) ;
function main ( input ) { input = input . trim ( ) . split ( " \n " ) ; n = parseInt ( input [ 0 ] ) ; x = input [ 1 ] . split ( " " ) . map ( p => Number ( p ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var c = Math . round ( total / n ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . pow ( Math . abs ( x [ i ] - c ) , 2 ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { const n = parseInt ( input , 10 ) ; const nums = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; const ans = nums . find ( v => n >= v ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' const main = ( input ) => { const a = parseInt ( input . split ( ' ' ) [ 0 ] ) const b = parseInt ( input . split ( ' ' ) [ 1 ] ) console . log ( Math . ceil ( ( a + b ) / 2 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var kotae ; kotae = parseInt ( input , 10 ) ; kotae = kotae * kotae * kotae ; console . log ( kotae ) ;
const main = ( args ) => { const input = args . trim ( ) . split ( ' ' ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; const H = input [ 2 ] ; const M = input [ 3 ] ; const c = ( H / 12.0 + M / ( 12.0 * 60.0 ) - M / 60.0 ) * Math . PI * 2 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - ( 2 * A * B ) * Math . cos ( c ) ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var g_input = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { g_input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { main ( g_input . split ( / \r?\n / ) ) ; } ) ; function main ( inputs ) { var N = parseInt ( inputs [ 0 ] ) ; var vs = inputs [ 1 ] . split ( " " ) . map ( function ( a ) { return parseInt ( a ) ; } ) ; var max = 0 ; var min = 100000 ; for ( var i in vs ) { max = Math . max ( max , vs [ i ] ) ; min = Math . min ( min , vs [ i ] ) ; } console . log ( max - min ) ; }
' use strict ' ; let stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; let a = 0 , b = 0 ; for ( let x of stdin . split ( ' ' ) ) { x = parseInt ( x ) ; if ( x == 5 ) { a ++ ; } else if ( x == 7 ) { b ++ ; } } console . log ( a == 2 && b == 1 ? " YES " : " NO " ) ;
var pass = 0 ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { var result = input . match ( / [0-9]+ / g ) ; for ( var i in result ) { pass += Number ( result [ i ] ) ; } } ) ; process . stdin . on ( ' end ' , function ( ) { console . log ( pass ) ; } ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var c = lines . map ( i => i . split ( " " ) . map ( i => Number ( i ) ) ) ; for ( var a1 = 0 ; a1 <= 100 ; a1 ++ ) { var b1 = c [ 0 ] [ 0 ] - a1 var b2 = c [ 1 ] [ 0 ] - a1 var b3 = c [ 2 ] [ 0 ] - a1 for ( var a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) { continue } if ( a2 + b2 !== c [ 1 ] [ 1 ] ) { continue } if ( a2 + b3 !== c [ 2 ] [ 1 ] ) { continue } for ( var a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) { continue } if ( a3 + b2 !== c [ 1 ] [ 2 ] ) { continue } if ( a3 + b3 !== c [ 2 ] [ 2 ] ) { continue } console . log ( " Yes " ) ; return ( 0 ) } } } console . log ( " No " ) } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " " ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ;
' use strict ' ; let equalAll = ( a , b , c ) => { return a === b && a === c ; } ; let equalSome = ( a , b , c ) => { return a === b || b === c || a === c ; } ; let permutationSize = pattern => { if ( equalAll ( pattern [ 0 ] , pattern [ 1 ] , pattern [ 2 ] ) ) { return 1 ; } if ( equalSome ( pattern [ 0 ] , pattern [ 1 ] , pattern [ 2 ] ) ) { return 3 ; } return 6 ; } ; function Main ( input ) { const line = input . split ( ' ' ) . map ( el => + el ) ; let patterns = [ ] ; for ( let x = 0 ; x <= line [ 0 ] ; x ++ ) { if ( x > line [ 1 ] ) continue ; for ( let y = x ; y <= line [ 0 ] ; y ++ ) { if ( y > line [ 1 ] ) continue ; const z = line [ 1 ] - x - y ; if ( z < 0 || z > line [ 0 ] ) continue ; if ( z < x || z < y ) continue ; patterns . push ( [ x , y , z ] ) ; } } let result = 0 ; for ( let i = 0 ; i < patterns . length ; i ++ ) { result += permutationSize ( patterns [ i ] ) ; } console . log ( result ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { s = s . split ( " " ) . map ( a => + a ) ; console . log ( Math . max ( ... s ) - Math . min ( ... s ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; for ( var I = 0 ; I < Arr . length ; I ++ ) { var a = Arr [ I ] . split ( " , " ) . map ( Number ) ; var arr = [ ] ; for ( var i = 0 ; i < 13 ; i ++ ) arr [ i ] = 0 ; a . forEach ( function ( v ) { arr [ v - 1 ] ++ ; } ) ; var copy = arr . slice ( ) ; arr . sort ( function ( a , b ) { return b - a ; } ) ; var ans ; if ( arr [ 0 ] >= 4 ) ans = " four card " ; else if ( arr [ 0 ] == 3 && arr [ 1 ] == 2 ) ans = " full house " ; else if ( ( copy . join ( " " ) ) . match ( / 11111|1000000001111 / ) ) ans = " straight " ; else if ( arr [ 0 ] == 3 ) ans = " three card " ; else if ( arr [ 0 ] == 2 && arr [ 1 ] == 2 ) ans = " two pair " ; else if ( arr [ 0 ] == 2 ) ans = " one pair " ; else ans = " null " ; console . log ( ans ) ; }
var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
' use strict ' const main = input => { const s = input . trim ( ) . split ( ' \n ' ) [ 1 ] . split ( ' ' ) let cnt = 0 for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] === ' Y ' ) cnt ++ } if ( cnt > 0 ) console . log ( ' Four ' ) else console . log ( ' Three ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; console . log ( K === 1 ? 0 : N - K ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const heisei = input . split ( " / " ) ; for ( i = 0 ; i <= 2 ; i ++ ) { heisei [ i ] = parseInt ( heisei [ i ] , 10 ) ; } if ( heisei [ 0 ] <= 2019 && heisei [ 1 ] <= 4 && heisei [ 2 ] <= 30 ) { console . log ( " Heisei " ) ; } else { console . log ( " TBD " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { for ( var i = 0 ; i <= 10 ; i ++ ) { if ( Math . pow ( 2 , i ) > input ) { i -- ; break ; } } console . log ( Math . pow ( 2 , i ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
" use strict " function Main ( input ) { const inputArray = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; inputArray . forEach ( value => { if ( value == 5 ) count5 ++ ; else if ( value == 7 ) count7 ++ ; } ) ; if ( count5 === 2 && count7 === 1 ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) for ( let i = 0 ; i < input_lines . length ; i ++ ) { if ( input_lines [ i ] == 5 ) { count5 ++ } if ( input_lines [ i ] == 7 ) { count7 ++ } } if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; var a = parseInt ( args [ 0 ] ) var b = parseInt ( args [ 1 ] ) var c = parseInt ( args [ 2 ] ) var d = parseInt ( args [ 3 ] ) var e = parseInt ( args [ 4 ] ) var k = parseInt ( args [ 5 ] ) var distance = ( e - a ) if ( distance <= k ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const INF = 900719925474099 ; function Main ( input ) { let temp = input . trim ( ) . split ( ' ' ) ; let a = parseInt ( temp [ 0 ] ) ; let b = parseInt ( temp [ 1 ] ) ; if ( a >= 13 ) { console . log ( b ) ; } else if ( a >= 6 ) { console . log ( b / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ) ; function main ( input ) { input = input . trim ( ) . split ( " \n " ) ; const N = parseInt ( input . shift ( ) ) ; const permutation = input [ 0 ] . split ( " " ) . map ( Number ) ; let result = 0 ; let min = permutation [ 0 ] ; for ( let i = 0 ; i < N ; i ++ ) { if ( min >= permutation [ i ] ) { result ++ ; min = permutation [ i ] ; } } console . log ( result ) ; }
var si = process . stdin ; si . resume ( ) ; si . setEncoding ( ' utf8 ' ) ; si . on ( ' data ' , function ( chunk ) { var x = Number ( chunk . toString ( ) . trim ( ) ) ; console . log ( x * x * x ) ; } ) ;
function myin ( ) { return require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; } function myout ( t ) { console . log ( t ) ; } function myconv ( i , no ) { switch ( no ) { case 0 : return i ; case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 3 : return i . split ( " \n " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 5 : return i . split ( " \n " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; } } function Main ( input ) { input = myconv ( input , 3 ) ; var N = myconv ( input [ 0 ] , 1 ) ; var xList = new Array ( N ) ; var yList = new Array ( N ) ; input . shift ( ) ; for ( var i = 0 ; i < N ; i ++ ) { var tmp = myconv ( input [ i ] , 4 ) ; xList [ i ] = tmp [ 0 ] ; yList [ i ] = tmp [ 1 ] ; } var sum = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var x = Math . abs ( xList [ i ] - xList [ j ] ) ; var y = Math . abs ( yList [ i ] - yList [ j ] ) ; sum += Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ; } } sum *= 2 ; var fact = 1 ; for ( var i = 1 ; i <= N ; i ++ ) { fact *= i ; } myout ( sum / N ) ; } Main ( myin ( ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var k = Number ( inputs [ 0 ] ) ; var s = Number ( inputs [ 1 ] ) ; var cnt = 0 ; for ( var x = 0 ; x <= k ; x ++ ) for ( var y = 0 ; y <= k ; y ++ ) if ( s - ( x + y ) >= 0 && s - ( x + y ) <= k ) cnt ++ ; console . log ( cnt ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . trim ( ) . split ( ' \n ' ) ; var ret = lines . filter ( function ( line ) { var items = line . split ( ' , ' ) ; var w = + items [ 1 ] ; var h = + items [ 2 ] ; return w / ( h * h ) >= 25 ; } ) ; ret . forEach ( function ( line ) { console . log ( line . split ( ' , ' ) [ 0 ] ) ; } ) ;
" use strict " ; function main ( input ) { const args = input . split ( ' \n ' ) ; let ans_time = 0 ; let first = 9 ; let food_first ; let flag = false for ( var i = 0 ; i < args . length - 1 ; i ++ ) { const food = parseInt ( args [ i ] ) ; ans_time += Math . ceil ( food / 10 ) * 10 ; food_first = food % 10 ; if ( food_first !== 0 && food_first <= first ) { first = food_first ; flag = true ; } } if ( ! flag ) { first = 10 ; } console . log ( ans_time - 10 + first ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nmab = arr [ 0 ] . split ( " " ) . map ( Number ) ; var d = arr [ 1 ] . split ( " " ) . map ( Number ) ; var m = nmab [ 1 ] ; var a = nmab [ 2 ] ; var b = nmab [ 3 ] ; var haiki = [ ] ; for ( var i = 0 ; i < d . length ; i ++ ) { if ( d [ i ] >= a ) haiki . push ( d [ i ] ) ; else break ; } if ( d . length - haiki . length < m ) { haiki . reverse ( ) ; var cnt = 0 ; for ( var i = 0 ; i < haiki . length ; i ++ ) { if ( haiki [ i ] <= b ) cnt ++ ; else break ; } console . log ( haiki . length - cnt ) ; } else { console . log ( haiki . length ) ; }
function Main ( input ) { input = input . split ( " \n " ) ; var T = input [ 0 ] . split ( " " ) ; var A = input [ 1 ] . split ( " " ) ; var B = input [ 2 ] . split ( " " ) ; var T0 = T [ 0 ] ; var T1 = T [ 1 ] ; var A0 = A [ 0 ] ; var A1 = A [ 1 ] ; var B0 = B [ 0 ] ; var B1 = B [ 1 ] ; var Ma = T0 * ( A0 - B0 ) ; var Mb = ( T1 * A1 + Ma ) - ( T1 * B1 ) ; if ( Math . sign ( Ma ) == Math . sign ( Mb ) ) { console . log ( 0 ) ; } else if ( Mb == 0 ) { console . log ( " infinity " ) ; } else { Ma = Math . abs ( Ma ) ; Mb = Math . abs ( Mb ) ; if ( Ma % Mb == 0 ) { console . log ( ( Ma / Mb ) * 2 ) ; } else { console . log ( Math . ceil ( Ma / Mb ) * 2 - 1 ) ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = arg [ 0 ] . split ( " " ) . map ( n => ~ ~ n ) ; console . log ( ~ ~ N . sort ( ( a , b ) => a - b ) . join ( " " ) === 1479 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( s ) { const houses = s . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const min = Math . min ( ... houses ) ; const max = Math . max ( ... houses ) ; const answer = max - min ; console . log ( answer ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( Number ) const ans = Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( Math . max ( a [ 0 ] , Math . max ( a [ 1 ] , a [ 2 ] ) ) - Math . min ( a [ 0 ] , Math . min ( a [ 1 ] , a [ 2 ] ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( x * x * x ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) ; var answer ; var nums = input [ 0 ] . split ( ' ' ) ; nums = nums . map ( ( e ) => parseInt ( e ) ) ; answer = nums [ 0 ] + nums [ 1 ] >= nums [ 2 ] ; console . log ( answer ? ' Yes ' : ' No ' ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; nidan = input [ 1 ] . split ( ' ' ) ; flag = null ; for ( i = 0 ; i < nidan . length - 1 ; i ++ ) { if ( nidan [ i ] === ' Y ' ) { flag = true ; } } if ( flag ) { console . log ( ' Four ' ) ; } else { console . log ( ' Three ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = ~ ~ input [ 0 ] ; var b = ~ ~ input [ 1 ] ; var c = ~ ~ input [ 2 ] ; var d = ~ ~ input [ 3 ] ; var e = ~ ~ input [ 4 ] ; var k = ~ ~ input [ 5 ] ; var AtCoder = function ( a , b , c , d , e , k ) { this . antena = [ a , b , c , d , e ] ; this . distance = k ; } ; AtCoder . prototype = { procedure : function ( ) { for ( var antena1 of this . antena ) { for ( var antena2 of this . antena ) { if ( Math . abs ( antena1 - antena2 ) > this . distance ) return false ; } } return true ; } } var atcoder = new AtCoder ( a , b , c , d , e , k ) ; if ( atcoder . procedure ( ) == true ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var input_lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; let count5 = 0 ; let count7 = 0 ; let result = ' NO ' reader . on ( ' line ' , ( line ) => { input_lines = line . split ( " " ) if ( input_lines [ 0 ] == 5 ) { count5 ++ } if ( input_lines [ 0 ] == 7 ) { count7 ++ } if ( input_lines [ 1 ] == 5 ) { count5 ++ } if ( input_lines [ 1 ] == 7 ) { count7 ++ } if ( input_lines [ 2 ] == 5 ) { count5 ++ } if ( input_lines [ 2 ] == 7 ) { count7 ++ } if ( count7 == 1 && count5 == 2 ) { result = ' YES ' } } ) ; reader . on ( ' close ' , ( ) => { console . log ( result ) ; } ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var [ h1 , m1 , h2 , m2 , k ] = nexts ( 5 ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; return m2 - m1 - k ; }
' use strict ' const main = arg => { const n = parseInt ( arg . split ( ' \n ' ) [ 0 ] , 10 ) const xn = arg . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( e => parseInt ( e , 10 ) ) const avg = Math . round ( xn . reduce ( ( val , e ) => val + e , 0 ) / n ) const w = xn . reduce ( ( v , e ) => v + ( e - avg ) * ( e - avg ) , 0 ) console . log ( w ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var K = parseInt ( line [ 0 ] ) ; var S = parseInt ( line [ 1 ] ) ; var roop = Math . min ( K , S ) ; var ans = 0 ; for ( var A = 0 ; A <= roop ; A ++ ) { if ( S - K - A >= 0 ) { if ( 2 * K - S + A + 1 > 0 ) { ans += 2 * K - S + A + 1 ; } } else if ( S - K - A < 0 ) { if ( S - A + 1 > 0 ) { ans += S - A + 1 ; } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; var result = xs . reduce ( function ( previous , current , index , xs ) { return previous + current ; } ) ; console . log ( Math . ceil ( result / xs . length ) ) ; } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var nums = lines [ 0 ] . replace ( / \s / g , ' ' ) console . log ( nums . replace ( ' 5 ' , ' ' ) . replace ( ' 5 ' , ' ' ) . replace ( ' 7 ' , ' ' ) . length === 0 ? ' YES ' : ' NO ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' ascii ' ) ; var input_stdin = " " ; var input_stdin_array = " " ; var input_currentline = 0 ; process . stdin . on ( ' data ' , function ( data ) { input_stdin += data ; } ) ; process . stdin . on ( ' end ' , function ( ) { input_stdin_array = input_stdin . split ( " \n " ) ; main ( ) ; } ) ; function readLine ( ) { return input_stdin_array [ input_currentline ++ ] ; } function main ( ) { var s = readLine ( ) ; s = s . split ( " " ) ; var N = parseInt ( s [ 0 ] ) ; var M = parseInt ( s [ 1 ] ) ; var A = [ ] ; var B = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { s = readLine ( ) . substr ( 0 , N ) ; A . push ( s ) ; } for ( var i = 0 ; i < M ; i ++ ) { s = readLine ( ) . substr ( 0 , M ) ; B . push ( s ) ; } var ans = " No " ; for ( var i = 0 ; i < N - M + 1 ; i ++ ) { for ( var j = 0 ; j < N - M + 1 ; j ++ ) { var iguales = 1 ; for ( var k = 0 ; k < M ; k ++ ) { if ( A [ i + k ] . substr ( j , M ) . localeCompare ( B [ k ] ) != 0 ) { iguales = 0 ; break ; } } if ( iguales == 1 ) { process . stdout . write ( " Yes " ) ; process . exit ( ) ; } } } process . stdout . write ( " No " ) ; process . exit ( ) ; }
function main ( input ) { input = input . trim ( ) ; var list = input . split ( " " ) ; var jHari = parseInt ( list [ 0 ] ) ; var fHari = parseInt ( list [ 1 ] ) ; var ji = parseInt ( list [ 2 ] ) ; var fun = parseInt ( list [ 3 ] ) ; function deg ( deg ) { return ( deg * Math . PI / 180 ) ; } var posJ = [ Math . cos ( deg ( ji * 30 + fun * 0.5 ) ) * jHari , Math . sin ( deg ( ji * 30 + fun * 0.5 ) ) * jHari ] ; var posF = [ Math . cos ( deg ( fun * 6 ) ) * fHari , Math . sin ( deg ( fun * 6 ) ) * fHari ] ; function kyori ( ax , ay , bx , by ) { return ( Math . sqrt ( ( ax - bx ) ** 2 + ( ay - by ) ** 2 ) ) ; } var answer = kyori ( posJ [ 0 ] , posJ [ 1 ] , posF [ 0 ] , posF [ 1 ] ) ; console . log ( answer . toString ( ) ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { ' use strict ' ; const temp = input . split ( " " ) ; const a = parseInt ( temp [ 0 ] , 10 ) ; const b = parseInt ( temp [ 1 ] , 10 ) ; let payment ; if ( a <= 5 ) payment = 0 ; else if ( a <= 12 ) payment = b / 2 ; else payment = b ; console . log ( payment ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( arg ) { arg = arg . trim ( ) . split ( " \n " ) . map ( Number ) var k = arg . pop ( ) var data = arg for ( var i = 0 ; i < data . length ; i ++ ) { for ( var j = i + 1 ; j < data . length ; j ++ ) { var ans = Math . abs ( data [ i ] - data [ j ] ) if ( ans > k ) { console . log ( ' :( ' ) return } } } console . log ( ' Yay! ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { console . log ( input * 800 - Math . floor ( input / 15 ) * 200 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function ( v ) { return v . reduce ( function add ( a , b ) { return a + b ; } ) ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 0 ] == 1 ) { input [ 0 ] = 14 ; } if ( input [ 1 ] == 1 ) { input [ 1 ] = 14 ; } input [ 0 ] -= 0 in put [ 1 ] -= 0 if ( input [ 0 ] > input [ 1 ] ) { console . log ( " Alice " ) ; } else if ( input [ 0 ] < input [ 1 ] ) { console . log ( " Bob " ) ; } else { console . log ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " / " ) . map ( Number ) ; if ( input [ 1 ] <= 4 ) console . log ( " Heisei " ) ; else console . log ( " TBD " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; input = input [ 0 ] . split ( " " ) ; let a = parseInt ( input [ 0 ] , 10 ) ; let b = parseInt ( input [ 1 ] , 10 ) ; let h = parseInt ( input [ 2 ] , 10 ) ; let m = parseInt ( input [ 3 ] , 10 ) ; console . log ( Math . sqrt ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) - 2 * a * b * Math . cos ( 2 * Math . PI * Math . abs ( h / 12 + m / 60 / 12 - m / 60 ) ) ) . toFixed ( 20 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) . map ( n => parseInt ( n , 10 ) ) ; var a = inputs [ 0 ] ; var b = inputs [ 1 ] ; if ( ( a + b ) % 2 === 0 ) { console . log ( ( a + b ) / 2 ) ; } else { console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const list = input . split ( " " ) . map ( v => Number ( v ) ) ; const result = { true : " YES " , false : " NO " } ; const is575 = list => { const syllable575 = new Map ( ) ; syllable575 . set ( 5 , 2 ) ; syllable575 . set ( 7 , 1 ) ; for ( const syllable of syllable575 . keys ( ) ) { if ( list . filter ( v => v === syllable ? true : false ) . length !== syllable575 . get ( syllable ) ) { return ( false ) ; } } return ( true ) ; } console . log ( result [ is575 ( list ) ] ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { for ( var line of lines ) { if ( line === " 0 " ) { break ; } console . log ( aux ( line ) ) ; } } ) ; function aux ( s ) { return ( s . split ( ' ' ) . map ( Number ) . reduce ( ( s , x ) => { return s + x } ) ) }
function Picker ( input ) { var lines = input . split ( ' \n ' ) ; var fields = lines . reduce ( function ( all , line ) { return all . concat ( line . split ( ' ' ) ) ; } , [ ] ) ; var p = 0 ; return { int : function ( ) { return parseInt ( fields [ p ++ ] , 10 ) ; } , float : function ( ) { return parseFloat ( fields [ p ++ ] ) ; } , str : function ( ) { return fields [ p ++ ] ; } } ; } function Main ( input ) { var pick = Picker ( input ) ; var l = [ pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) ] . sort ( function ( a , b ) { return a - b ; } ) ; var k = pick . int ( ) ; var min = l [ 0 ] ; var max = l [ l . length - 1 ] ; console . log ( max - min <= k ? ' Yay! ' : ' :( ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) let ans = input [ 0 ] - input [ 1 ] if ( input [ 1 ] === 1 ) ans = 0 console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; if ( A == 1 && B == 1 ) { console . log ( " Draw " ) ; } else if ( A == 1 && B != 1 ) { console . log ( " Alice " ) ; } else if ( A != 1 && B == 1 ) { console . log ( " Bob " ) ; } else if ( A > B ) { console . log ( " Alice " ) ; } else if ( A < B ) { console . log ( " Bob " ) ; } else { console . log ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const a = parseInt ( args [ 0 ] , 10 ) ; console . log ( a * a * a ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function myin ( ) { return require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; } function myout ( t ) { console . log ( t ) ; } function myconv ( i , no ) { switch ( no ) { case 0 : return i ; case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 3 : return i . split ( " \n " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 5 : return i . split ( " \n " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; } } function Main ( input ) { input = myconv ( input , 1 ) ; if ( input % 2 == 0 ) { myout ( input + " " + input + " " + input / 2 ) ; return ; } else { for ( var i = 1 ; i <= 3500 ; i ++ ) { for ( var j = 1 ; j <= 3500 ; j ++ ) { var a = input * i * j / ( 4 * i * j - input * ( i + j ) ) ; if ( Number . isInteger ( a ) && a >= 1 && a != Infinity ) { myout ( a + " " + i + " " + j ) ; return ; } } } } } Main ( myin ( ) ) ;
' use strict ' const main = ( input ) => { let tasks = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const ans = Math . max ( ... tasks ) - Math . min ( ... tasks ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
' use strict ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( line ) { var x = parseInt ( line . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
function main ( a ) { a = a . split ( " " ) ; a = stn ( a ) ; function Actor ( name , card ) { this . name = name ; this . card = card ; } var Alice = new Actor ( " Alice " , a [ 0 ] ) ; var Bob = new Actor ( " Bob " , a [ 1 ] ) ; console . log ( poker ( Alice , Bob ) ) ; } function poker ( Alice , Bob ) { if ( Alice . card == Bob . card ) return " Draw " ; if ( Alice . card == 1 ) return Alice . name ; if ( Bob . card == 1 ) return Bob . name ; if ( Alice . card > Bob . card ) { return Alice . name ; } else { return Bob . name ; } } function stn ( a ) { return a . map ( function ( x ) { return parseInt ( x , 10 ) ; } ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; i = 0 ; x = [ ] ; counter = 0 ; N = 1000000 ; D = 0 ; for ( i = 0 ; i <= N ; i ++ ) { num = input [ i ] . split ( / \s+ / ) ; littleX = [ ] ; if ( i == 0 ) { N = num [ 0 ] ; D = num [ 1 ] ; } else { for ( j = 0 ; j < D ; j ++ ) { littleX . push ( num [ j ] ) ; } x . push ( littleX ) ; } } for ( i = 0 ; i < N ; i ++ ) { for ( k = i + 1 ; k < N ; k ++ ) { sum = 0 ; for ( j = 0 ; j < D ; j ++ ) { sum += Math . abs ( ( x [ i ] [ j ] - x [ k ] [ j ] ) * ( x [ i ] [ j ] - x [ k ] [ j ] ) ) ; } if ( Number . isInteger ( Math . sqrt ( sum ) ) === true ) { counter ++ ; } } } console . log ( counter ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var data = ' ' ; var readable = process . stdin ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { data += chunk ; } ) readable . resume ( ) ; readable . on ( ' end ' , function ( ) { var x = parseInt ( data ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) ; if ( input [ 1 ] != 1 ) console . log ( input [ 0 ] - input [ 1 ] ) ; else console . log ( 0 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function D166 ( _input ) { var lines = _input . split ( " \n " ) ; var x = lines . shift ( ) * 1 ; for ( var i = 119 ; i > - 118 ; i -- ) { for ( var j = 118 ; j > - 119 ; j -- ) { const fi = i * i * i * i * i ; const fj = j * j * j * j * j ; if ( fi - fj === x ) { console . log ( ` ${ i } ${ j } ` ) ; return ; } } } } D166 ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
Array . prototype . aggregate = function ( ) { return this . reduce ( ( a , b ) => ( a [ b ] = ( a [ b ] || 0 ) + 1 ) && a , { } ) ; } function Main ( input ) { input = input . split ( " \n " ) ; var a = input [ 1 ] . split ( " " ) ; var b = a . aggregate ( ) ; var cnt = 0 ; for ( var c in b ) { cnt ++ ; } return cnt == 3 ? " Three " : " Four " ; } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var K = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; if ( K == 1 ) { var ans = 0 ; } else { var ans = N - K ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var soroban = [ " * = **** " . split ( " " ) , " * =* *** " . split ( " " ) , " * =** ** " . split ( " " ) , " * =*** * " . split ( " " ) , " * =**** " . split ( " " ) , " *= **** " . split ( " " ) , " *=* *** " . split ( " " ) , " *=** ** " . split ( " " ) , " *=*** * " . split ( " " ) , " *=**** " . split ( " " ) ] ; var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . replace ( / \n$ / , " " ) ) . split ( " \n " ) . map ( Number ) ; Arr . forEach ( function ( v , i ) { if ( i !== 0 ) console . log ( " " ) ; var str = ( " 00000 " + v ) . slice ( - 5 ) ; var arr = [ " " , " " , " " , " " , " " , " " , " " , " " ] ; for ( var i = 0 ; i < 5 ; i ++ ) { var s = soroban [ ( str [ i ] - 0 ) ] ; s . forEach ( function ( v , index ) { arr [ index ] += v ; } ) ; } console . log ( arr . join ( " \n " ) ) ; } ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; if ( a + b - c < 0 ) { console . log ( " No " ) ; } else { console . log ( " Yes " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { var data = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) var min_i = 0 var min_v = data [ 0 ] var count = 1 for ( var i = 1 ; i < data . length ; i ++ ) { if ( min_v >= data [ i ] ) { count ++ min_v = data [ i ] } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( " utf8 " ) ; const reader = require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout , } ) ; const lines = [ ] ; reader . on ( " line " , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( " close " , ( ) => { for ( let i = 0 ; i < lines . length ; i ++ ) { let n = lines [ i ] ; if ( n === " 0 " ) break ; console . log ( n . split ( " " ) . map ( Number ) . reduce ( ( a , b ) => a + b ) ) ; } } ) ;
" use strict " ; function I ( s , f ) { this . _s = s . split ( " \n " ) ; this . _c = 0 ; this . _l = 0 ; this . _f = f || Number } I . prototype . a = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; var t = l . trim ( ) . split ( " " ) ; var a = t [ this . _c ] ; this . _c ++ ; if ( t . length === this . _c ) { this . _c = 0 ; this . _l ++ } return this . _f ( a ) } ; I . prototype . l = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; this . _c = 0 ; this . _l ++ ; return l . split ( " " ) . map ( this . _f ) } ; function main ( input ) { const o = new I ( input ) ; var arr = [ ] ; var mod = 10 ; for ( var i = 0 ; i < 5 ; i ++ ) { var m = o . a ( ) ; var mm = m % 10 ; if ( mm < mod && mm > 0 ) { mod = mm ; } arr . push ( m ) ; } if ( mod === 10 ) { console . log ( arr . reduce ( ( acc , cur ) => acc + cur ) ) ; } else { var sum = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { if ( arr [ i ] % 10 === 0 ) { sum += arr [ i ] ; } else { sum += arr [ i ] - arr [ i ] % 10 + 10 ; } } console . log ( sum - 10 + mod ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function main ( lines ) { const phrases = na ( ) ; let cnt5 = cnt7 = 0 ; phrases . forEach ( n => { if ( n == 5 ) cnt5 ++ ; if ( n == 7 ) cnt7 ++ ; } ) const ans = cnt5 == 2 && cnt7 == 1 ? ' YES ' : ' NO ' ; return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
const main = ( N , D , X ) => { var count = 0 for ( var i = 0 ; i < N ; i ++ ) { for ( var k = i + 1 ; k < N ; k ++ ) { var tmp = 0 for ( var j = 0 ; j < D ; j ++ ) { tmp += Math . pow ( X [ i ] [ j ] - X [ k ] [ j ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( tmp ) ) ) { count ++ } } } return count } const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . filter ( i => i !== ' ' ) const lst = input . map ( i => i . split ( " " ) . map ( x => Number ( x ) ) ) const N = lst [ 0 ] [ 0 ] const D = lst [ 0 ] [ 1 ] const X = lst . slice ( 1 , lst . length ) console . log ( main ( N , D , X ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line . split ( " " ) ) ; } ) ; reader . on ( ' close ' , solve ) ; function getInt ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseInt ( elem ) ) ; return rtn ; } function getFloat ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseFloat ( elem ) ) ; return rtn ; } function solve ( ) { var [ N ] = getInt ( lines [ 0 ] ) ; var P = getInt ( lines [ 1 ] ) ; var m = 200001 , ans = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( P [ i ] < m ) ans ++ ; m = Math . min ( m , P [ i ] ) ; } console . log ( ans ) ; }
function main ( sti ) { let items = sti ; console . log ( Math . pow ( sti , 3 ) ) ; } var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; main ( input ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const S = input [ 0 ] const date = S . split ( ' / ' ) if ( date [ 1 ] > 4 ) { console . log ( ' TBD ' ) } else { console . log ( ' Heisei ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( a ) { console . log ( a * 800 - parseInt ( a / 15 ) * 200 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , ( x ) => { lines . push ( x ) } ) ; rl . on ( ' close ' , ( ) => { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) if ( 13 <= A ) { console . log ( B ) } else if ( 6 <= A && A <= 12 ) { console . log ( B / 2 ) } else { console . log ( 0 ) } } ) ;
const a = + ( ' ' + require ( ' fs ' ) . readFileSync ( 0 ) ) console . log ( a * a * a )
function Main ( input ) { input = input . split ( " " ) ; for ( var i = 0 ; i < 3 ; i ++ ) { input [ i ] = parseInt ( input [ i ] , 10 ) ; if ( input [ i ] == 5 || input [ i ] == 7 ) { continue ; } else { console . log ( ' NO ' ) ; return ; } } var b = input [ 0 ] + input [ 1 ] + input [ 2 ] ; if ( b == 17 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg [ 5 ] ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => ~ ~ n ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { var line = input . split ( " " ) ; let a = parseInt ( line [ 0 ] ) ; let b = parseInt ( line [ 1 ] ) ; let h = parseInt ( line [ 2 ] ) ; let m = parseInt ( line [ 3 ] ) ; var angle = 0.5 * ( 60 * h - 11 * m ) ; if ( angle > 180 ) angle = angle - 360 ; angle = ( angle * 3.14159265359 ) / 180 ; var cost = Math . cos ( angle ) ; var sqs = ( a * a ) + ( b * b ) - ( 2 * a * b * ( cost ) ) ; var ans = Math . sqrt ( sqs ) ; console . log ( ans . toPrecision ( 20 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const lines = input . split ( ' \n ' ) const X = lines [ 0 ] - 0 let five = [ 0 , 1 ] const max = X * X for ( let i = 2 ; five [ five . length - 1 ] < max ; i ++ ) { five . push ( Math . pow ( i , 5 ) ) } ; ( ( ) => { for ( let i = 0 ; i < five . length ; i ++ ) { for ( let j = 0 ; j < five . length ; j ++ ) { if ( five [ i ] - five [ j ] === X ) { console . log ( i , j ) return } else if ( five [ i ] + five [ j ] === X ) { console . log ( i , - j ) return } } } } ) ( )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' \n ' ) ; var x = lines [ 0 ] ; var kaitou = x * x * x ; console . log ( kaitou ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) . map ( Number ) ; arr . some ( function ( v ) { if ( v == 0 ) return true ; var cnt = 0 ; for ( var a = 1 ; a <= 181 ; a ++ ) { var A = a * a ; if ( v < A ) break ; if ( A == v ) cnt ++ ; for ( var b = a ; b <= 181 ; b ++ ) { var B = A + b * b ; if ( v < B ) break ; if ( B == v ) cnt ++ ; for ( var c = b ; c <= 181 ; c ++ ) { var C = B + c * c ; if ( v < C ) break ; if ( C == v ) cnt ++ ; for ( var d = c ; d <= 181 ; d ++ ) { var D = C + d * d ; if ( v < D ) break ; if ( D == v ) cnt ++ ; } } } } console . log ( cnt ) ; } ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) const N = parseInt ( input [ 0 ] ) let X = input [ 1 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) X = X . sort ( ) const MAX = 100 let result = Infinity for ( let i = 1 ; i <= MAX ; ++ i ) { let total = 0 for ( let j = 0 ; j < N ; ++ j ) { const n = X [ j ] - i total += n * n } result = Math . min ( result , total ) } if ( result === Infinity ) result = 1 console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
log = console . log ; var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ; var lines = stdin . split ( " " ) . map ( Number ) ; var N = lines [ 0 ] var K = lines [ 1 ] var diff = N - K if ( K === 1 ) { log ( 0 ) } else { log ( diff ) }
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const a = s [ 0 ] ; const b = s [ 1 ] ; const c = s [ 2 ] ; const d = s [ 3 ] ; const ans = Math . max ( a * b , c * d ) ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const n = Number ( input ) ; console . log ( n * n * n ) ;
' use strict ' const translate = ( num ) => { if ( num == 1 ) return num = 14 ; else return num - 0 ; } function main ( arg ) { arg = arg . split ( ' ' ) ; const a = translate ( arg [ 0 ] ) ; const b = translate ( arg [ 1 ] ) ; if ( a == b ) return console . log ( ' Draw ' ) ; if ( a > b ) { console . log ( ' Alice ' ) ; } else { console . log ( ' Bob ' ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var input = input . split ( ' \n ' ) ; var nidan = input [ 1 ] . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a < b ? - 1 : 1 ) ; console . log ( nidan [ nidan . length - 1 ] - nidan [ 0 ] ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const Main = ( input ) => { let tmp = input . split ( ' \n ' ) ; let Age = tmp [ 0 ] . split ( ' ' ) . map ( Number ) [ 0 ] ; let Cost = tmp [ 0 ] . split ( ' ' ) . map ( Number ) [ 1 ] ; if ( 6 <= Age && Age <= 12 ) { Cost = Cost / 2 ; } else if ( Age <= 5 ) { Cost = 0 ; } console . log ( Cost ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const n = input [ 0 ] . split ( " " ) [ 0 ] ; const d = input [ 0 ] . split ( " " ) [ 1 ] ; var array = [ ] ; for ( var i = 1 ; i <= n ; i ++ ) { array . push ( input [ i ] . split ( " " ) ) ; } var square = 0 ; var distance = [ ] ; for ( var i = 0 ; i <= n - 2 ; i ++ ) { for ( var j = i + 1 ; j <= n - 1 ; j ++ ) { for ( var k = 0 ; k <= d - 1 ; k ++ ) { square = square + Math . pow ( ( array [ i ] [ k ] - array [ j ] [ k ] ) , 2 ) ; } distance . push ( Math . pow ( square , 1 / 2 ) ) ; square = 0 ; } } var intDistance = distance . filter ( function ( value ) { return Number . isInteger ( value ) ; } ) console . log ( intDistance . length ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; var ans = 0 ; if ( A >= 13 ) { ans = B ; } else if ( A >= 6 ) { ans = B / 2 ; } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { console . log ( Math . pow ( input [ 0 ] , 3 ) ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' ' ) ; main ( input ) ; } ) ;
' use strict ' const main = arg => { var input = arg . trim ( ) . split ( " \n " ) ; const endIndex = input . indexOf ( " 0 " ) ; input = input . slice ( 0 , endIndex ) ; const result = [ ] ; input . forEach ( str => { const sum = str . split ( " " ) . map ( num => parseInt ( num , 10 ) ) . reduce ( ( a , b ) => a + b ) ; result . push ( sum ) ; } ) ; console . log ( result . join ( " \n " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var abhm = lines [ 0 ] . split ( ' ' ) ; var a = Number ( abhm [ 0 ] ) ; var b = Number ( abhm [ 1 ] ) ; var h = Number ( abhm [ 2 ] ) ; var m = Number ( abhm [ 3 ] ) ; var hkaku = h * 30 + m * 0.5 ; var mkaku = m * 6 ; var kaku = Math . abs ( hkaku - mkaku ) ; var kaku2 = 360 - Math . abs ( hkaku - mkaku ) ; kaku = Math . min ( kaku2 , kaku ) ; kaku = Math . cos ( kaku * ( Math . PI / 180 ) ) ; var ans = ( a * a ) + ( b * b ) - ( 2 * a * b * kaku ) ; console . log ( Math . sqrt ( ans ) ) ; } ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( i => parseInt ( i ) ) let c5 = 0 let c7 = 0 in put . forEach ( i => { if ( i === 5 ) { c5 ++ } else { c7 ++ } } ) if ( c5 === 2 && c7 === 1 ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) N = lines . shift ( ) * 1 lines . pop ( ) c = lines . map ( x => x . split ( ' ' ) . map ( y => y * 1 ) ) d = [ ] r = 1 p = 2 for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { d . push ( Math . sqrt ( Math . pow ( c [ i ] [ 0 ] - c [ j ] [ 0 ] , 2 ) + Math . pow ( c [ i ] [ 1 ] - c [ j ] [ 1 ] , 2 ) ) ) } r *= i + 2 p *= i + 1 } sum = 0 for ( i = 0 ; i < d . length ; i ++ ) { sum += d [ i ] * p } console . log ( ( sum / r ) . toFixed ( 10 ) )
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) l = inp . shift ( ) . split ( ' ' ) K = l [ 0 ] * 1 S = l [ 1 ] * 1 cnt = 0 for ( i = 0 ; i <= K ; i ++ ) { for ( j = 0 ; j <= K ; j ++ ) { t = S - ( i + j ) if ( t >= 0 && t <= K ) { cnt ++ } } } console . log ( cnt )
const factorization = ( n ) => { let primes = [ ] for ( let i = 2 ; i * i <= n ; i ++ ) { let e = 0 while ( n % i === 0 ) { e ++ n /= i } if ( e ) { primes . push ( i ) } } if ( n > 1 ) { primes . push ( n ) } return primes } const getGCD = ( a , b ) => { if ( b === 0 ) return a else if ( a === 0 ) return b return getGCD ( b , a % b ) } const main = ( arg ) => { const N = Number ( arg . split ( " \n " ) [ 0 ] ) const a = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) const MAX_A = 10 ** 6 + 1 let set = [ ... new Array ( MAX_A ) ] . fill ( 0 ) isPairCoprime = true for ( let i = 0 ; i < N ; i ++ ) { const factors = factorization ( a [ i ] ) for ( let j = 0 ; j < factors . length ; j ++ ) { if ( set [ factors [ j ] ] === 1 ) { isPairCoprime = false } set [ factors [ j ] ] = 1 } } if ( isPairCoprime ) { console . log ( " pairwise coprime " ) return } let gcd = 0 for ( let i = 0 ; i < a . length ; i ++ ) { gcd = getGCD ( gcd , a [ i ] ) } if ( gcd === 1 ) { console . log ( " setwise coprime " ) return } console . log ( " not coprime " ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const n = input . trim ( ) . split ( / \s / ) . map ( str => ~ ~ str ) const deg = Math . abs ( ( 360 * n [ 2 ] / 12 ) + 30 * n [ 3 ] / 60 - ( 360 * n [ 3 ] / 60 ) ) % 360 console . log ( Math . sqrt ( n [ 0 ] ** 2 + n [ 1 ] ** 2 - 2 * n [ 0 ] * n [ 1 ] * Math . cos ( deg * Math . PI / 180 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = input => { const args = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) const a = parseInt ( args [ 0 ] , 10 ) const b = parseInt ( args [ 1 ] , 10 ) if ( a >= 13 ) console . log ( b ) else if ( a >= 6 ) console . log ( b / 2 ) else console . log ( 0 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " " ) ; for ( var cnt = 0 ; cnt < input . length ; cnt ++ ) { input [ cnt ] = parseFloat ( input [ cnt ] ) ; } var degH = ( input [ 2 ] / 12.0 + input [ 3 ] / ( 12.0 * 60.0 ) - input [ 3 ] / 60.0 ) * Math . PI * 2 ; var ans = Math . pow ( input [ 0 ] , 2 ) + Math . pow ( input [ 1 ] , 2 ) - ( 2 * input [ 0 ] * input [ 1 ] ) * Math . cos ( degH ) ; var ans = Math . sqrt ( ans ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var K = parseInt ( tmp [ 0 ] , 10 ) ; var S = parseInt ( tmp [ 1 ] , 10 ) ; var x , y , z ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { x = i ; for ( var j = 0 ; j <= K ; j ++ ) { y = j ; z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count += 1 ; } } } console . log ( ' %d ' , count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( ' \n ' ) var N = parseInt ( tmp [ 0 ] ) var Xarr = tmp [ 1 ] . split ( ' ' ) var Xsum = 0 for ( var i = 0 ; i < Xarr . length ; i ++ ) { Xsum += parseInt ( Xarr [ i ] ) } var avg = Math . floor ( Xsum / N ) var tmp = [ ] for ( var j = avg - 25 ; j <= avg + 25 ; j ++ ) { var sum = 0 for ( var i = 0 ; i < Xarr . length ; i ++ ) { sum = sum + Math . abs ( Math . pow ( j - parseInt ( Xarr [ i ] ) , 2 ) ) } tmp . push ( sum ) } var result = Math . min . apply ( null , tmp ) console . log ( result ) return result } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
line = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' ascii ' ) . split ( ' \n ' ) ; res = [ ] ; for ( i in line ) { str = line [ i ] ; if ( str === ' 0 ' ) break ; sum = 0 ; for ( j in str ) sum += parseInt ( str [ j ] ) ; res . push ( sum ) ; } console . log ( res . join ( ' \n ' ) ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) N = inp . shift ( ) * 1 A = inp . shift ( ) . split ( ' ' ) B = inp . shift ( ) . split ( ' ' ) sumA = 0 sumB = 0 s = 0 t = [ ] cnt = 0 for ( i = 0 ; i < N ; i ++ ) { a = A [ i ] * 1 b = B [ i ] * 1 d = a - b if ( d < 0 ) { cnt ++ s += d } else { t . push ( d ) } sumA += a sumB += b } if ( sumA >= sumB ) { t . sort ( ( a , b ) => b - a ) j = 0 while ( s < 0 ) { s += t [ j ] j ++ } console . log ( cnt + j ) } else { console . log ( - 1 ) }
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; let ans0 = xs [ 0 ] ; let ans1 = xs [ 1 ] ; if ( xs [ 0 ] == 1 ) { ans0 = xs [ 0 ] + 13 ; } if ( xs [ 1 ] == 1 ) { ans1 = xs [ 1 ] + 13 ; } if ( ans0 == ans1 ) { console . log ( ' Draw ' ) ; } else if ( ans0 > ans1 ) { console . log ( ' Alice ' ) ; } else { console . log ( ' Bob ' ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var m = input => { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var a = Number ( lines [ 0 ] . split ( ' ' ) [ 0 ] ) ; var v = Number ( lines [ 0 ] . split ( ' ' ) [ 1 ] ) ; var b = Number ( lines [ 1 ] . split ( ' ' ) [ 0 ] ) ; var w = Number ( lines [ 1 ] . split ( ' ' ) [ 1 ] ) ; var t = Number ( lines [ 2 ] ) ; var ichisa = a - b ; var hayasa = v - w ; var ans = ' ' ; if ( hayasa <= 0 ) { ans = ' NO ' ; } else { if ( Math . abs ( ichisa ) / hayasa <= t ) { ans = " YES " ; } else { ans = " NO " ; } } console . log ( ans ) ; } ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; const inputs = input . split ( " \n " ) . map ( i => + i ) ; const exec = ( inputs ) => { const k = inputs . pop ( ) ; const yay = ( inputs [ inputs . length - 1 ] - inputs [ 0 ] ) <= k ; console . log ( yay ? " Yay! " : " :( " ) ; } exec ( inputs ) ;
console . log ( ( args => { const [ [ N , M ] , ... tmp ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; const p = Array . from ( { length : N } , _ => [ ] ) ; for ( let i = 0 ; i < M ; i ++ ) { const [ P , Y ] = tmp [ i ] ; p [ P - 1 ] . push ( [ i , Y ] ) ; } p . forEach ( r => r . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ) ; const a = Array . from ( tmp , ( [ p ] ) => ` ${ p } ` . padStart ( 6 , 0 ) ) ; p . forEach ( r => r . forEach ( ( [ i ] , j ) => a [ i ] += ` ${ j + 1 } ` . padStart ( 6 , 0 ) ) ) return a . join ` \n ` ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( ' ' ) ; var h1 = parseInt ( tmp [ 0 ] ) ; var m1 = parseInt ( tmp [ 1 ] ) ; var h2 = parseInt ( tmp [ 2 ] ) ; var m2 = parseInt ( tmp [ 3 ] ) ; var k = parseInt ( tmp [ 4 ] ) ; var min1 = 60 * h1 + m1 ; var min2 = 60 * h2 + m2 ; var a = min2 - min1 - k ; console . log ( a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { const S = arg . split ( " \n " ) [ 1 ] . split ( " " ) ; const set = new Set ( S ) ; console . log ( set . size == 4 ? " Four " : " Three " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) const t1 = args [ 0 ] * args [ 1 ] const t2 = args [ 2 ] * args [ 3 ] if ( t1 >= t2 ) console . log ( t1 ) else console . log ( t2 ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; function main ( input ) { const line = input . split ( " \n " ) ; let arr = line [ 0 ] . split ( " " ) ; const N = parseInt ( arr [ 0 ] ) ; const D = parseInt ( arr [ 1 ] ) ; let X = [ ] ; for ( let i = 1 ; i < N + 1 ; i ++ ) X . push ( line [ i ] . split ( " " ) . map ( Number ) ) ; let ans = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let num = 0 ; for ( let k = 0 ; k < D ; k ++ ) num += Math . pow ( ( X [ j ] [ k ] - X [ i ] [ k ] ) , 2 ) ; if ( Number . isInteger ( Math . sqrt ( num ) ) ) ans ++ ; } } console . log ( ans ) ; return ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var input0 = input [ 0 ] . split ( " " ) ; const N = parseInt ( input0 [ 0 ] ) ; const K = parseInt ( input0 [ 1 ] ) ; if ( K == 1 ) { console . log ( 0 ) ; } else { console . log ( N - K ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var v = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { v [ i ] = Number ( lines [ i ] ) ; } var k = Number ( lines [ 5 ] ) ; for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( k < Math . abs ( v [ i ] - v [ j ] ) ) { console . log ( " :( " ) ; return ( 0 ) ; } } } console . log ( " Yay! " ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var message = " Yay! " ; for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > k ) message = " :( " } } console . log ( message ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const H1 = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const M1 = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const H2 = parseInt ( arg [ 0 ] . split ( " " ) [ 2 ] ) ; const M2 = parseInt ( arg [ 0 ] . split ( " " ) [ 3 ] ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 4 ] ) ; const first = 60 - M1 ; const time1 = H2 - ( H1 + 1 ) ; const rest = M2 ; let answer = first + ( 60 * time1 ) + M2 - K ; console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; console . log ( cube ( input [ 0 ] ) ) ; } ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; if ( a + b >= c ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input ; list = [ 64 , 32 , 16 , 8 , 4 , 2 , 1 ] ; for ( i = 0 ; i < list . length ; i ++ ) { if ( list [ i ] <= input ) { console . log ( list [ i ] ) ; break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = input [ 0 ] ; var arr = input [ 1 ] . split ( " " ) . map ( Number ) ; var ans = Number . MAX_SAFE_INTEGER ; var max = Math . max . apply ( null , arr ) ; for ( var i = 1 ; i <= max ; i ++ ) { var sum = 0 ; for ( var j = 0 ; j < arr . length ; j ++ ) { sum += Math . pow ( Math . abs ( arr [ j ] - i ) , 2 ) ; } if ( sum < ans ) ans = sum ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( arg ) { arg = arg . split ( " " ) . sort ( ( a , b ) => a - b ) ; console . log ( arg [ 2 ] - arg [ 0 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const abcde = input . split ( " \n " ) . map ( n => parseInt ( n ) ) ; const len = abcde . length ; var total_time = 0 ; var last_cal_num = 10 ; var last_cal_num_index = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { var j = abcde [ i ] % 10 if ( 0 < j && j < last_cal_num ) { last_cal_num = j ; last_cal_num_index = i ; } } for ( var i = 0 ; i < 5 ; i ++ ) { if ( i !== last_cal_num_index ) { var j = abcde [ i ] ; var k = j % 10 ; j = k ? j + ( 10 - k ) : j ; total_time += j ; } } total_time += abcde [ last_cal_num_index ] ; console . log ( String ( total_time ) . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' ' ) . map ( Number ) if ( args [ 0 ] === 1 ) args [ 0 ] += 13 if ( args [ 1 ] === 1 ) args [ 1 ] += 13 if ( args [ 0 ] > args [ 1 ] ) console . log ( ' Alice ' ) else if ( args [ 1 ] > args [ 0 ] ) console . log ( ' Bob ' ) else console . log ( ' Draw ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
function main ( input ) { input = input . split ( " \n " ) ; temp = input [ 1 ] . split ( " " ) ; len = input [ 0 ] ; min = 1001 ; max = 0 ; for ( var i = 0 ; i < len ; i += 1 ) { if ( min > temp [ i ] ) { min = temp [ i ] ; } if ( max < temp [ i ] ) { max = temp [ i ] ; } } console . log ( max - min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const points = input . slice ( 1 ) . map ( x => x . split ( ' ' ) . map ( Number ) ) ; var sum = 0 ; for ( var i = 0 ; i < points . length ; i ++ ) { for ( var j = i + 1 ; j < points . length ; j ++ ) { var len = length ( sub ( points [ i ] , points [ j ] ) ) ; if ( isInteger ( len ) ) { sum ++ ; } } } console . log ( sum ) ; } const sub = ( p1 , p2 ) => { return p1 . map ( ( x , i ) => x - p2 [ i ] ) ; } ; const length = ( p ) => { return Math . sqrt ( p . map ( x => x * x ) . reduce ( ( acc , x ) => acc + x , 0 ) ) ; } ; const isInteger = ( n ) => { const i = Math . floor ( n ) ; const eps = 0.0000001 ; return n - i < eps ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ) ;
function Main ( input ) { var N = parseInt ( input [ 0 ] , 10 ) ; var P = input [ 1 ] . split ( / \s / ) . map ( p => parseInt ( p , 10 ) ) var min = P [ 0 ] ; var result = 0 ; for ( var i = 0 ; i < N ; i ++ ) { if ( min >= P [ i ] ) { result ++ ; min = P [ i ] ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n / ) ) ;
function Main ( input ) { var str = input ; var ans = 0 ; var str = str . split ( " \n " ) [ 0 ] ; var num = str . split ( " " ) ; var a = Number ( num [ 0 ] ) ; var b = Number ( num [ 1 ] ) ; var h = Number ( num [ 2 ] ) ; var m = Number ( num [ 3 ] ) ; var dega = 0.5 * ( m + 60 * h ) ; var degb = 6 * m ; var rada = dega * ( Math . PI / 180 ) ; var radb = degb * ( Math . PI / 180 ) ; var ax = a * Math . sin ( rada ) ; var ay = a * Math . cos ( rada ) ; var bx = b * Math . sin ( radb ) ; var by = b * Math . cos ( radb ) ; ans = Math . sqrt ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) ) ; ans = Math . round ( ans * ( 10 ** 10 ) ) / ( 10 ** 10 ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " " ) . map ( ( a ) => Number ( a ) ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var output = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { var Z = S - ( i + j ) ; if ( Z >= 0 && Z <= K ) { output ++ ; } } } myout ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( ) { console . log ( input [ 0 ] * input [ 0 ] * input [ 0 ] ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
console . log ( ( args => { const [ [ K , S ] ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; let count = 0 ; for ( let x = Math . min ( K , S ) ; x >= 0 ; x -- ) { for ( let y = Math . min ( K , S - x ) ; y >= Math . max ( 0 , S - x - K ) ; y -- ) count ++ ; } return count . toString ( ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var inp = input . split ( ' ' ) ; var a = parseInt ( inp [ 0 ] ) ; var b = parseInt ( inp [ 1 ] ) ; var total = a + b ; var average = Math . round ( total / 2 ) ; console . log ( average ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( function ( x ) { return x . split ( " " ) } ) ; let T1 = parseInt ( input [ 0 ] [ 0 ] , 10 ) ; let T2 = parseInt ( input [ 0 ] [ 1 ] , 10 ) ; let A1 = parseInt ( input [ 1 ] [ 0 ] , 10 ) ; let A2 = parseInt ( input [ 1 ] [ 1 ] , 10 ) ; let B1 = parseInt ( input [ 2 ] [ 0 ] , 10 ) ; let B2 = parseInt ( input [ 2 ] [ 1 ] , 10 ) ; let d1 = BigInt ( A1 - B1 ) * BigInt ( T1 ) ; let d2 = BigInt ( A2 - B2 ) * BigInt ( T2 ) + d1 ; let ans = 0n ; let tmp ; if ( d2 === 0n ) ans = ' infinity ' ; else if ( d1 * d2 < 0n ) { d2 = d2 * - 1n ; tmp = ( d1 / d2 ) ; ans = ( tmp * d2 === d1 ) ? tmp * 2n : tmp * 2n + 1n ; } else ans = 0 ; console . log ( ans . toString ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const numList0 = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; const N = numList0 [ 0 ] ; const D = numList0 [ 1 ] ; const xListList = [ ] ; for ( var i = 0 ; i < N ; i ++ ) { var xList = input [ i + 1 ] . split ( ' ' ) . map ( x => parseInt ( x , 10 ) ) ; xListList . push ( xList ) ; } var count = 0 ; for ( var i = 0 ; i < N - 1 ; i ++ ) { var xBaseList = xListList [ i ] ; for ( var j = i + 1 ; j < N ; j ++ ) { var doubleDistance = 0 ; xTargetList = xListList [ j ] ; for ( var k = 0 ; k < D ; k ++ ) { var y = xBaseList [ k ] ; var z = xTargetList [ k ] ; doubleDistance += ( y - z ) * ( y - z ) ; } if ( Number . isInteger ( Math . sqrt ( doubleDistance ) ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const Main = ( ) => { const n = nextInt ( ) let x = nextIntArray ( ) let min = Number . POSITIVE_INFINITY for ( let p = 1 ; p <= 100 ; p ++ ) { let curr = 0 for ( let i = 0 ; i < n ; i ++ ) { curr += ( x [ i ] - p ) * ( x [ i ] - p ) } min = Math . min ( min , curr ) } console . log ( min ) } Main ( )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk . trim ( ) , 3 ) ) ; } ) ;
' use strict ' function main ( input ) { const n = Number ( input ) let ans = 0 if ( n == 1 ) { console . log ( 1 ) return } let i = 0 while ( Math . pow ( 2 , i + 1 ) <= n ) { i ++ ans = Math . pow ( 2 , i ) } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var inputs = input . split ( " \n " ) ; var N = inputs [ 0 ] . split ( " " ) [ 0 ] ; var D = inputs [ 0 ] . split ( " " ) [ 1 ] ; var a = [ ] ; for ( i = 1 ; i <= N ; i ++ ) { a [ i - 1 ] = inputs [ i ] . split ( " " ) ; } var n = 0 ; for ( j = 0 ; j <= ( N - 1 ) ; j ++ ) { for ( l = 0 ; l <= ( N - 1 ) ; l ++ ) { var b = 0 ; var k = 0 ; var s ; if ( j <= l ) { continue ; } for ( m = 0 ; m <= ( D - 1 ) ; m ++ ) { b = a [ j ] [ m ] - a [ l ] [ m ] ; k += Math . pow ( b , 2 ) ; } s = Number . isInteger ( Math . pow ( k , 1 / 2 ) ) ; if ( s == true ) { n += 1 ; } } } console . log ( n ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
function main ( input ) { const formatted_input = input . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; if ( formatted_input [ 4 ] - formatted_input [ 0 ] > formatted_input [ 5 ] ) { console . log ( ' :( ' ) } else { console . log ( ' Yay! ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) ; let N = inp [ 0 ] * 1 ; let nums = inp [ 1 ] . split ( ' ' ) . map ( x => x * 1 ) ; let ava = Math . round ( nums . reduce ( ( x , a ) => a += x ) / N ) ; let ans = 0 ; for ( let i = 0 ; i < N ; i ++ ) { ans += ( nums [ i ] - ava ) * ( nums [ i ] - ava ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( arg ) { var xzahyo = [ ] ; var yzahyo = [ ] ; for ( i = 1 ; i < ( arg . split ( / \s|\r / g ) . length ) / 2 ; i ++ ) { xzahyo . push ( arg . split ( / \s|\r / g ) [ 2 * i - 1 ] ) ; yzahyo . push ( arg . split ( / \s|\r / g ) [ 2 * i ] ) ; } var nagasanowa = 0 ; for ( j = 0 ; j < xzahyo . length - 1 ; j ++ ) { for ( k = j + 1 ; k < xzahyo . length ; k ++ ) { nagasanowa += Math . sqrt ( Math . pow ( xzahyo [ k ] - xzahyo [ j ] , 2 ) + Math . pow ( yzahyo [ k ] - yzahyo [ j ] , 2 ) ) ; } } console . log ( nagasanowa * 2 / arg . split ( / \s|\r / g ) [ 0 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var num = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; for ( var i = num . length - 1 ; i >= 0 ; i -- ) { if ( input >= num [ i ] ) { console . log ( num [ i ] ) ; return ; } } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; console . log ( input [ 0 ] >= 13 ? input [ 1 ] : input [ 0 ] >= 6 ? input [ 1 ] / 2 : 0 ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function print ( data ) { process . stdout . write ( data + ' \n ' ) } const cube = x => x * x * x const readLine = require ( ' readline ' ) const rl = readLine . createInterface ( { input : process . stdin , output : process . stdout } ) rl . on ( ' line ' , ( line ) => { print ( cube ( parseInt ( line ) ) ) } )
' use strict ' function main ( input ) { const [ a , b , t ] = input . trim ( ) . split ( ' \n ' ) . map ( ( x ) => x . split ( ' ' ) . map ( ( v ) => Number ( v ) ) ) const distance = Math . abs ( a [ 0 ] - b [ 0 ] ) const distance2 = ( a [ 1 ] - b [ 1 ] ) * t [ 0 ] console . log ( distance <= distance2 ? ' YES ' : ' NO ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var a = Number ( lines [ 0 ] ) ; var b = Number ( lines [ 1 ] ) ; var c = Number ( lines [ 2 ] ) ; var d = Number ( lines [ 3 ] ) ; var e = Number ( lines [ 4 ] ) ; var ans = 0 ; var info = [ ] ; info . push ( a ) ; info . push ( b ) ; info . push ( c ) ; info . push ( d ) ; info . push ( e ) ; var amari = [ ] ; amari . push ( a % 10 ) ; amari . push ( b % 10 ) ; amari . push ( c % 10 ) ; amari . push ( d % 10 ) ; amari . push ( e % 10 ) ; var amari_t = amari . filter ( function ( value ) { return ! ( value == 0 ) ; } ) ; var min = Math . min ( ... amari_t ) ; var index = amari . indexOf ( min ) ; for ( i = 0 ; i < 5 ; i ++ ) { if ( i == index ) { continue ; console . log ( ' A ' ) ; } ans += info [ i ] if ( ans % 10 !== 0 ) { while ( ans % 10 !== 0 ) { ans ++ ; } } } ans += info [ index ] ; if ( Number . isNaN ( ans ) ) { ans = 0 ; ans = a + b + c + d + e ; } console . log ( ans ) ; } ) ;
main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ; function main ( N ) { var T = N . trim ( ) ; var a = T . charAt ( 0 ) ; var b = T . charAt ( 2 ) ; var c = T . charAt ( 4 ) ; if ( ( a == " 7 " && b == " 5 " && c == " 5 " ) || ( a == " 5 " && b == " 7 " && c == " 5 " ) || ( a == " 5 " && b == " 5 " && c == " 7 " ) ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } }
let content = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , buf => { content += buf ; } ) ; process . stdin . on ( ' end ' , ( ) => { const lines = content . trim ( ) . split ( ' \n ' ) . slice ( 0 , - 1 ) ; const result = lines . map ( num => num . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) . reduce ( ( prev , cur ) => prev + cur ) ) ; console . log ( result . join ( ' \n ' ) ) ; } ) ;
function * main ( ) { const N = + ( yield ) ; const A = ( yield ) . split ( " " ) . map ( s => + s ) ; const avg = A . reduce ( ( a , b ) => a + b ) / N ; const P = Math . round ( avg ) ; const sum = A . reduce ( ( t , x ) => t + ( x - P ) ** 2 , 0 ) ; console . log ( sum ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin } ) . on ( " line " , s => iter . next ( s ) ) ;
' use strict ' ; function Main ( input ) { const tmp = input . split ( ' ' ) ; let five = 0 ; let seven = 0 ; for ( let i = 0 ; i < tmp . length ; i ++ ) { if ( tmp [ i ] == 5 ) { five ++ ; } else if ( tmp [ i ] == 7 ) { seven ++ ; } } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) ; if ( input . indexOf ( " 1 " ) != - 1 && input . indexOf ( " 9 " ) != - 1 && input . indexOf ( " 7 " ) != - 1 && input . indexOf ( " 4 " ) != - 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function zeroPadding ( str ) { return ( ' 000000 ' + str ) . slice ( - 6 ) } function Main ( input ) { const data = input . trim ( ) . split ( ' \n ' ) const temp = data [ 0 ] . split ( ' ' ) . map ( s => parseInt ( s ) ) const N = temp [ 0 ] const M = temp [ 1 ] const rest = data . slice ( 1 ) . map ( s => { return s . split ( ' ' ) . map ( x => parseInt ( x ) ) } ) var ans = { } rest . forEach ( ( d , index ) => { if ( ! ans [ d [ 0 ] ] ) ans [ d [ 0 ] ] = [ ] ans [ d [ 0 ] ] . push ( { index : index , p : d [ 0 ] , t : d [ 1 ] , s : ' ' } ) } ) for ( var i in ans ) { ans [ i ] = ans [ i ] . sort ( ( a , b ) => a . t - b . t ) } var res = Array ( M ) for ( var i in ans ) { for ( var j = 0 ; j < ans [ i ] . length ; ++ j ) { var d = ans [ i ] [ j ] var str = zeroPadding ( d . p ) + zeroPadding ( ( j + 1 ) . toString ( ) ) res [ d . index ] = str } } var output = res . reduce ( ( p , c ) => p + ' \n ' + c ) console . log ( output ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { const arr = input . split ( ' ' ) . map ( m => Number ( m ) ) const sum = arr . reduce ( ( p , c ) => p * c ) console . log ( ( sum === 175 ) ? ' YES ' : ' NO ' ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 1 ] . split ( " " ) ; all = Number ( input [ 0 ] ) ; var maxest = Number ( tmp [ 0 ] ) ; ans = 1 ; for ( i = 2 ; i <= all ; i ++ ) { the_Num = Number ( tmp [ i - 1 ] ) ; if ( maxest >= the_Num ) { ans ++ ; } if ( maxest > the_Num ) maxest = the_Num ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = i => { const input = i . split ( / \s / ) . map ( n => parseInt ( n , 10 ) ) . sort ( ( a , b ) => a - b ) console . log ( input [ 2 ] - input [ 0 ] ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) console . log ( x * x * x )
function main ( input ) { var a = input . split ( " " ) [ 0 ] - 0 , b = input . split ( " " ) [ 1 ] - 0 ; if ( a <= 5 ) { console . log ( 0 ) ; } else if ( a <= 12 ) { console . log ( b / 2 ) ; } else { console . log ( b ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' ; const fs = require ( ' fs ' ) ; let N = 0 ; let X = [ ] ; let Y = [ ] ; function distance ( i , j ) { return Math . sqrt ( Math . pow ( X [ i ] - X [ j ] , 2 ) + Math . pow ( Y [ i ] - Y [ j ] , 2 ) ) ; } function calcTotalRouteDistance ( ) { let result = 0 ; for ( let i = 0 ; i < N - 1 ; ++ i ) { for ( let j = i + 1 ; j < N ; ++ j ) { result += distance ( i , j ) ; } } return result ; } function calcAverageDistance ( ) { return 2 * calcTotalRouteDistance ( ) / N ; } function main ( arg ) { const lines = arg . split ( ' \n ' ) ; N = parseInt ( lines [ 0 ] , 10 ) ; for ( let i = 0 ; i < N ; ++ i ) { let line = lines [ i + 1 ] . split ( / \s / ) ; X [ i ] = parseInt ( line [ 0 ] , 10 ) ; Y [ i ] = parseInt ( line [ 1 ] , 10 ) ; } console . log ( calcAverageDistance ( ) ) ; } main ( fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var array = input [ 0 ] . split ( " " ) ; array . sort ( ) ; console . log ( ( array [ 0 ] === " 5 " && array [ 1 ] === " 5 " && array [ 2 ] === " 7 " ) ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; var args = input [ 0 ] . split ( " " ) ; var sum = 0 ; args . forEach ( function ( a ) { sum = sum + Number ( a ) ; } ) ; sum == 17 ? console . log ( " YES " ) : console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var A = input . split ( ' ' ) ; var cost = 0 ; A = A . map ( ( s ) => parseInt ( s ) ) ; A = A . sort ( ) ; for ( var i = 0 ; i < A . length - 1 ; ++ i ) { cost += Math . abs ( A [ i ] - A [ i + 1 ] ) ; } console . log ( cost ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( Math . pow ( parseInt ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) , 10 ) , 2 ) )
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let [ a , b ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; if ( a == 1 ) a = 14 ; if ( b == 1 ) b = 14 ; console . log ( a == b ? " Draw " : a > b ? " Alice " : " Bob " ) ;
function Main ( input ) { var min = Number . MAX_VALUE , max = Number . MIN_VALUE ; var arr = input . split ( " " ) . map ( v => parseInt ( v ) ) . forEach ( v => { min = Math . min ( min , v ) ; max = Math . max ( max , v ) ; } ) ; console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { let tmp = arg . trim ( ) . split ( " \n " ) let [ A , V ] = tmp [ 0 ] . split ( " " ) . map ( Number ) let [ B , W ] = tmp [ 1 ] . split ( " " ) . map ( Number ) let T = Number ( tmp [ 2 ] ) + 0 let at , bw let ans = false if ( B < A ) { at = BigInt ( A ) - BigInt ( V ) * BigInt ( T ) bw = BigInt ( B ) - BigInt ( W ) * BigInt ( T ) if ( at <= bw ) { ans = true } } else { at = BigInt ( A ) + BigInt ( V ) * BigInt ( T ) bw = BigInt ( B ) + BigInt ( W ) * BigInt ( T ) if ( at >= bw ) { ans = true } } if ( ans ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const N = parseInt ( input [ 0 ] , 10 ) ; let count = 0 ; let max_count = 0 ; let ans = 1 ; for ( var n = 1 ; n <= N ; n ++ ) { let work_n = n ; count = 0 ; while ( work_n % 2 === 0 && work_n > 0 ) { work_n = work_n / 2 ; count ++ ; } if ( max_count < count ) { ans = n ; max_count = count ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const Main = ( input ) => { input = input . split ( " \n " ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var flg = false ; var i , j ; for ( i = 0 ; i < input . length ; i ++ ) { for ( j = i + 1 ; j < input . length ; j ++ ) { if ( parseInt ( input [ j ] , 10 ) - parseInt ( input [ i ] , 10 ) > k ) { flg = true ; break ; } } } console . log ( ( flg ) ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( true ) { var n = Arr . shift ( ) - 0 ; if ( n == 0 ) break ; var m = Arr . shift ( ) - 0 ; var N = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { N [ i ] = [ ] ; for ( var j = 0 ; j < n ; j ++ ) { N [ i ] [ j ] = Infinity ; if ( i == j ) N [ i ] [ j ] = 0 ; } } var arr = [ ] ; for ( var i = 0 ; i < m ; i ++ ) { var abc = Arr . shift ( ) . split ( " , " ) . map ( Number ) ; var a = abc [ 0 ] ; var b = abc [ 1 ] ; var c = ( abc [ 2 ] / 100 ) - 1 ; N [ a ] [ b ] = c ; N [ b ] [ a ] = c ; } var city = [ 0 ] ; var cost = 0 ; while ( true ) { if ( city . length == n ) break ; var min = Infinity ; var select = - 1 ; for ( var i = 0 ; i < city . length ; i ++ ) { for ( var j = 0 ; j < n ; j ++ ) { if ( city . indexOf ( j ) != - 1 ) continue ; if ( N [ city [ i ] ] [ j ] < min ) { select = j ; min = N [ city [ i ] ] [ j ] ; } } } if ( select != - 1 ) { cost += min ; city . push ( select ) ; } } console . log ( cost ) ; }
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const [ A , B , C ] = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) console . log ( A + B >= C ? ' Yes ' : ' No ' ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
const Main = input => { input = input [ 0 ] . split ( ' ' ) var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
function Main ( input ) { var array = input . split ( ' \n ' ) ; var limit = array [ 5 ] ; var max = array [ 4 ] ; var min = array [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( Math . pow ( x , 3 ) ) } )
" use strict " ; const main = arg => { const inputList = arg . trim ( ) . split ( " \n " ) ; const A = parseInt ( inputList [ 0 ] . split ( " " ) [ 0 ] ) ; const V = parseInt ( inputList [ 0 ] . split ( " " ) [ 1 ] ) ; const B = parseInt ( inputList [ 1 ] . split ( " " ) [ 0 ] ) ; const W = parseInt ( inputList [ 1 ] . split ( " " ) [ 1 ] ) ; const T = parseInt ( inputList [ 2 ] . split ( " " ) [ 0 ] ) ; if ( V <= W ) { console . log ( " NO " ) ; } else { const pointDiff = Math . abs ( A - B ) ; const speedDiff = V - W ; if ( ( pointDiff / speedDiff <= T ) ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; const date = new Date ( input ) ; const now = new Date ( " 2019/04/30 " ) ; console . log ( date > now ? " TBD " : " Heisei " ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; let input_string = ' ' ; process . stdin . on ( ' data ' , ( chunk ) => { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , ( ) => { let lines = input_string . split ( ' \n ' ) ; const n = parseInt ( lines [ 0 ] ) ; console . log ( Math . pow ( n , 3 ) ) ; } ) ;
' use strict ' const main = ( input ) => { const K = parseInt ( input . split ( ' ' ) [ 0 ] ) const S = parseInt ( input . split ( ' ' ) [ 1 ] ) let sum = 0 for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { let z = S - x - y if ( z >= 0 && z <= K ) { sum ++ } } } console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; const lines = input . split ( ' \n ' ) ; const y = lines [ 5 ] ; if ( lines [ 4 ] - lines [ 0 ] <= lines [ 5 ] ) { console . log ( " Yay! " ) ; } else { console . log ( " :( " ) ; }
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let X = + cin . shift ( ) ; for ( let a = - 120 ; a < 120 ; a ++ ) { for ( let b = - 120 ; b < 120 ; b ++ ) { if ( a ** 5 - b ** 5 == X ) { console . log ( a , b ) ; return ; } } } } main ( ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var date = input . split ( " / " ) ; if ( date [ 1 ] <= 04 ) { console . log ( " Heisei " ) ; } else { console . log ( " TBD " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { let date = input . split ( ' / ' ) . map ( v => ~ ~ v ) if ( date [ 1 ] > 4 ) { console . log ( ' TBD ' ) } else { console . log ( ' Heisei ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var str = input . trim ( ) ; var cnt = 0 ; for ( var i = 0 ; i < str . length ; i ++ ) { var a = str . slice ( 0 , i ) - 0 ; var b = str . slice ( i ) ; if ( b [ 0 ] == 0 ) continue ; b = b - 0 ; if ( a > b ) break ; if ( a % 2 == 0 && b % 2 == 0 ) cnt ++ ; if ( a % 2 == 1 && b % 2 == 1 ) cnt ++ ; } console . log ( cnt ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var S = input . split ( ' \n ' ) console . log ( Math . pow ( S [ 0 ] , 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { let x = parseInt ( input , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( is ) { const i = is . split ( " \n " ) ; let s = i [ 0 ] ; let p = parseInt ( i [ 1 ] ) ; for ( let i = 0 ; i < s . length ; i ++ ) { let code = s [ i ] . charCodeAt ( 0 ) ; if ( s . length - 1 == i ) { code += p % 26 ; if ( code > 122 ) { code += ( - 122 + 97 - 1 ) ; } let lastLetter = String . fromCharCode ( code ) ; s = s . slice ( 0 , i ) + lastLetter + s . slice ( i + 1 ) ; } else { if ( ( 27 - ( code - 97 + 1 ) ) <= p && ! ( s [ i ] == " a " ) ) { p = p - ( 27 - ( code - 97 + 1 ) ) ; s = s . slice ( 0 , i ) + " a " + s . slice ( i + 1 ) ; } } } console . log ( s ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; input . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; console . log ( Math . abs ( input [ 0 ] - input [ 2 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function main ( input ) { var lines = input . split ( ' \n ' ) ; var N = parseInt ( lines [ 0 ] ) ; var A = splitNum ( lines [ 1 ] ) . slice ( 0 , N ) ; var B = splitNum ( lines [ 2 ] ) . slice ( 0 , N ) ; var diffs = A . map ( function ( a , i ) { return a - B [ i ] ; } ) ; diffs . sort ( function ( x , y ) { return y - x ; } ) ; var changed = diffs . map ( function ( _ ) { return false ; } ) ; var source = 0 ; var target = N - 1 ; while ( source < target ) { var diff = diffs [ target ] ; if ( diff >= 0 ) { break ; } if ( diffs [ source ] >= - diff ) { changed [ source ] = true ; changed [ target ] = true ; diffs [ source ] += diff ; diffs [ target ] = 0 ; target -- ; } else { if ( diffs [ source ] > 0 ) { changed [ source ] = true ; changed [ target ] = true ; } diffs [ target ] += diffs [ source ] ; diffs [ source ] = 0 ; source ++ ; } } if ( diffs [ target ] < 0 ) { console . log ( - 1 ) ; } else { console . log ( changed . reduce ( function ( acc , v ) { return acc + v ; } , 0 ) ) ; } return ; } function gcd ( a , b ) { if ( a < b ) return gcd ( a , b ) ; if ( b === 0 ) return a ; var r = a % b ; return gcd ( b , r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function splitNum ( line ) { return line . split ( / \s+ / ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; }
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var A = parseFloat ( input [ 0 ] ) ; var B = parseFloat ( input [ 1 ] ) ; var H = parseFloat ( input [ 2 ] ) ; var M = parseFloat ( input [ 3 ] ) ; var rad = 6 ; var Hrad = H * 5 * rad + ( 30 * M ) / 60 ; var Mrad = M * rad ; var A2 = Math . pow ( A , 2 ) ; var B2 = Math . pow ( B , 2 ) ; var cos = Math . cos ( ( Hrad - Mrad ) * ( Math . PI / 180 ) ) ; var l = Math . sqrt ( A2 + B2 - 2 * A * B * cos ) ; console . log ( l ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( X ) { return Math . pow ( X , 3 ) ; } ( parseInt ( inputs [ 0 ] ) , 10 ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] . split ( " " ) . map ( function ( i ) { return parseInt ( i ) ; } ) ; var sortedA = a . slice ( ) . sort ( function ( a , b ) { return a - b ; } ) ; var med1 = sortedA [ N / 2 - 1 ] ; var med2 = sortedA [ N / 2 ] ; a . forEach ( function ( i ) { console . log ( i <= med1 ? med2 : med1 ) ; } ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { const n = input . trim ( ) ; const x = n * 800 ; const y = Math . floor ( n / 15 ) * 200 ; console . log ( x - y ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { var x = input * 800 ; var y = Math . floor ( input / 15 ) * 200 ; console . log ( x - y ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const P = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = P [ 0 ] let count = 1 for ( let i = 1 ; i < N ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) )
function Main ( input ) { K = Number ( input . split ( " " ) [ 0 ] ) ; S = Number ( input . split ( " " ) [ 1 ] ) ; count = 0 ; for ( i = 0 ; i < K + 1 ; i ++ ) { for ( j = 0 ; j < K + 1 ; j ++ ) { if ( i + j >= S - K && i + j <= S ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; var Main = function ( stdin ) { var line = stdin . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( line [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ; Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] ) ; var b = parseInt ( input [ 1 ] ) ; var x = ( a + b ) / 2 ; console . log ( Math . ceil ( x ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const NM = input [ 0 ] . split ( ' ' ) . map ( Number ) ; const N = NM [ 0 ] ; const M = NM [ 1 ] ; const As = input . slice ( 1 , N + 1 ) ; const Bs = input . slice ( N + 1 , N + M + 1 ) ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { let isMatch = true nextsearch : for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] != Bs [ bx ] [ by ] ) { isMatch = false ; break nextsearch ; } } } if ( isMatch ) { console . log ( " Yes " ) return ; } } } console . log ( ' No ' ) ;
function Main ( input ) { var str = input ; var ans = 0 ; var str = str . split ( " \n " ) [ 0 ] ; var num = str . split ( " " ) ; var h1 = Number ( num [ 0 ] ) ; var m1 = Number ( num [ 1 ] ) ; var h2 = Number ( num [ 2 ] ) ; var m2 = Number ( num [ 3 ] ) ; var k = Number ( num [ 4 ] ) ; var time1 = m1 + 60 * h1 ; var time2 = m2 + 60 * h2 ; ans = time2 - time1 - k ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; var arr = [ parseInt ( args [ 0 ] , 10 ) , parseInt ( args [ 1 ] , 10 ) , parseInt ( args [ 2 ] , 10 ) ] ; arr . sort ( ) ; if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var [ a , b ] = input . trim ( ) . split ( " " ) . map ( Number ) ; console . log ( a * b ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; s = s . slice ( 0 , j ) + String . fromCharCode ( code ) + s . slice ( j + 1 ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; s = s . slice ( 0 , j ) + " a " + s . slice ( j + 1 ) ; } } } console . log ( s ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function pow5 ( i ) { return Math . pow ( i , 5 ) } function main ( arg ) { const MAX_INT = Number . MAX_SAFE_INTEGER let X = Number ( arg . trim ( ) . split ( " \n " ) [ 0 ] ) let finish = false for ( let i = 0 ; i < MAX_INT ; i ++ ) { let A = pow5 ( i ) for ( let j = 0 ; j < MAX_INT ; j ++ ) { let B = pow5 ( j ) if ( A - B === X ) { console . log ( [ i , j ] . join ( " " ) ) finish = true break } if ( j > 0 ) { let _B = pow5 ( j - 1 ) if ( Math . abs ( X - ( A - B ) ) > Math . abs ( X - ( A - _B ) ) ) { break } } } if ( finish ) return for ( let j = 0 ; j < MAX_INT ; j ++ ) { let B = pow5 ( j ) * - 1 if ( A - B === X ) { console . log ( [ i , j * - 1 ] . join ( " " ) ) finish = true break } if ( j > 0 ) { let _B = pow5 ( j - 1 ) * - 1 if ( Math . abs ( X - ( A - B ) ) > Math . abs ( X - ( A - _B ) ) ) { break } } } if ( finish ) return } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function m ( input ) { var a = input . split ( ' ' ) ; var K = parseInt ( a [ 0 ] ) ; var S = parseInt ( a [ 1 ] ) ; var s = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { var v = S - ( i + j ) ; if ( v >= 0 && v <= K ) { s ++ ; } } } console . log ( s ) ; } m ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( r ) { const A = parseInt ( r , 10 ) ; console . log ( A * A ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ) ? " Yes " : " No " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; const inputs = input . split ( " \n " ) . map ( i => + i ) ; const round = ( n ) => { return Math . ceil ( n / 10 ) * 10 ; } const diff = ( n ) => round ( n ) - n ; const exec = ( inputs ) => { const sorted = inputs . sort ( ( a , b ) => diff ( b ) - diff ( a ) ) ; let time = 0 ; let first = false ; for ( let i = 0 ; i < inputs . length ; i ++ ) { if ( diff ( sorted [ i ] ) === 0 ) { time += sorted [ i ] ; continue ; } if ( ! first ) { time += sorted [ i ] ; first = true ; continue ; } time += round ( sorted [ i ] ) ; } return time ; } console . log ( exec ( inputs ) ) ;
" use strict " ; function main ( input ) { input = input . split ( ' ' ) ; const K = parseInt ( input [ 0 ] ) ; const S = parseInt ( input [ 1 ] ) ; let count = 0 if ( S < 0 || S > 3 * K ) { } else if ( K < 2 || K > 2500 ) { } else if ( S === 3 * K ) { count = 1 } else { for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { const Z = S - ( i + j ) if ( Z >= 0 && Z <= K ) { count ++ } } } } console . log ( count ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const [ A , B ] = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) if ( A <= 5 ) { console . log ( 0 ) } else if ( A <= 12 ) { console . log ( B / 2 ) } else { console . log ( B ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { i = input . split ( " / " ) . map ( Number ) ; if ( i [ 0 ] < 2019 ) console . log ( " Heisei " ) ; else if ( i [ 0 ] === 2019 && i [ 1 ] < 4 ) console . log ( " Heisei " ) else if ( i [ 0 ] === 2019 && i [ 1 ] === 4 && i [ 2 ] <= 30 ) console . log ( " Heisei " ) else console . log ( " TBD " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; if ( s [ 0 ] === 1 ) s [ 0 ] += 13 ; if ( s [ 1 ] === 1 ) s [ 1 ] += 13 ; if ( s [ 0 ] > s [ 1 ] ) console . log ( ' Alice ' ) ; else if ( s [ 0 ] < s [ 1 ] ) console . log ( ' Bob ' ) ; else console . log ( ' Draw ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var output ; if ( A <= 5 ) { output = 0 ; } else if ( A <= 12 ) { output = B / 2 ; } else { output = B ; } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const input = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) const N = input [ 0 ] const P = input [ 1 ] let ans if ( N == 1 ) { ans = P } else { for ( let i = 0 ; Math . pow ( i , N ) <= P ; i ++ ) { if ( P % Math . pow ( i , N ) == 0 ) { ans = i } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var tmp = input . split ( " " ) ; var A = parseInt ( tmp [ 0 ] ) ; var B = parseInt ( tmp [ 1 ] ) ; var H = parseInt ( tmp [ 2 ] ) ; var M = parseInt ( tmp [ 3 ] ) ; var deg = ( 5.5 * ( H * 60 + M ) ) % 360 ; var cosdeg = Math . cos ( deg * ( Math . PI / 180 ) ) ; var result = Math . sqrt ( A * A + B * B - 2 * A * B * cosdeg ) ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const n = parseInt ( input . trim ( ) , 10 ) const x = 800 * n const y = 200 * Math . floor ( n / 15 ) console . log ( x - y ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var N = parseInt ( input [ 0 ] , 10 ) ; var K = parseInt ( input [ 1 ] , 10 ) ; if ( K == 1 ) { console . log ( 0 ) ; } else { console . log ( N - K ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) var C = Number ( lines [ 0 ] . split ( " " ) [ 2 ] ) var a = Math . abs ( A - B ) + Math . abs ( B - C ) var b = Math . abs ( A - C ) + Math . abs ( B - C ) var c = Math . abs ( A - B ) + Math . abs ( A - C ) var d = Math . abs ( C - B ) + Math . abs ( A - C ) var e = Math . abs ( C - A ) + Math . abs ( A - B ) var f = Math . abs ( C - B ) + Math . abs ( A - B ) console . log ( Math . min ( a , b , c , e , f ) ) ; } ) ;
( stdin => { const getA = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const X = parseInt ( inputs [ 0 ] , 10 ) console . log ( getA ( X ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . replace ( / \n / g , ' ' ) ; input = input . split ( " " ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; var C = input [ 2 ] ; var D = input [ 3 ] ; var ans = 0 ; var Sado = Math . abs ( C * 30 + D / 2 - D * 6 ) ; if ( Sado > 180 ) { Sado = 360 - Sado ; } var p = A * A + B * B ; var q = 2 * A * B ; ans = Math . sqrt ( p - q * Math . cos ( Sado * ( Math . PI / 180 ) ) ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { out ( calc ( x ) ) ; } ) ;
" use strict " ; const main = ( input ) => { const [ a , b , c , d ] = input . trim ( ) . split ( " " ) ; const first = a * b ; const second = c * d ; if ( first === second ) { return first ; } else if ( first < second ) { return second ; } else { return first ; } } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { var num = input ; console . log ( num * num * num ) ; } ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] * a [ 0 ] ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const inputLines = input . split ( " \n " ) ; const line0 = inputLines [ 0 ] ; const result = line0 . replace ( / \? / g , ' D ' ) ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) ; const birth = Number ( input [ 0 ] ) ; const price = birth > 5 ? birth <= 12 ? Number ( input [ 1 ] ) / 2 : Number ( input [ 1 ] ) : 0 console . log ( price ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = input => { const n = parseInt ( input . trim ( ) , 10 ) let maxNum = 0 let maxCnt = - 1 for ( let i = 1 ; i <= n ; i ++ ) { let tmpNum = i let tmpCnt = 0 while ( true ) { if ( tmpNum % 2 === 1 ) break tmpNum /= 2 tmpCnt ++ } if ( tmpCnt > maxCnt ) { maxNum = i maxCnt = tmpCnt } } console . log ( maxNum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) lines . shift ( ) lines . pop ( ) l = lines . map ( ( x , i ) => { a = x . split ( ' ' ) . map ( x => x * 1 ) a . i = i return a } ) . sort ( ( a , b ) => { return a [ 0 ] == b [ 0 ] ? a [ 1 ] - b [ 1 ] : a [ 0 ] - b [ 0 ] } ) arr = [ ] y = ' ' for ( i = 0 ; i < l . length ; i ++ ) { if ( y != l [ i ] [ 0 ] ) { j = 1 y = l [ i ] [ 0 ] } arr [ l [ i ] . i ] = ( ' 000000 ' + l [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + j ) . slice ( - 6 ) j ++ } console . log ( arr . join ( ' \n ' ) )
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) const N = Number ( inp . shift ( ) ) in p = inp . map ( r => r . split ( ' ' ) . map ( n => Number ( n ) ) ) let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { const x = Math . pow ( inp [ i ] [ 0 ] - inp [ j ] [ 0 ] , 2 ) const y = Math . pow ( inp [ i ] [ 1 ] - inp [ j ] [ 1 ] , 2 ) sum += Math . sqrt ( x + y ) } } console . log ( sum / N / ( N - 1 ) * ( N - 1 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) ; const n = Number ( s [ 0 ] ) ; const circle = n * n ; console . log ( circle ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . split ( / \n / ) const n = ~ ~ input [ 0 ] let houses = input [ 1 ] . split ( ' ' ) . map ( v => ~ ~ v ) . filter ( ( v , i , self ) => { return self . indexOf ( v ) === i } ) const ans = Math . max ( ... houses ) - Math . min ( ... houses ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( arg ) { var n = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] - 0 ; var m = arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] - 0 ; var A = new Array ( n ) ; var B = new Array ( m ) ; for ( var i = 0 ; i < n ; i ++ ) { A [ i ] = arg . split ( " \n " ) [ i + 1 ] . split ( " " ) ; } for ( var i = 0 ; i < m ; i ++ ) { B [ i ] = arg . split ( " \n " ) [ n + 1 + i ] . split ( " " ) ; } for ( var i = 0 ; i <= n - m ; i ++ ) { for ( var j = 0 ; j <= n - m ; j ++ ) { var cnt = 0 ; for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( A [ i + k ] [ j + l ] == B [ k ] [ l ] ) cnt ++ ; } } if ( cnt == m * m ) { console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var house_num = Number ( input [ 0 ] ) ; var houses = input [ 1 ] . split ( ' ' ) ; var smallest = houses [ 0 ] ; var largest = 0 ; for ( var i = 0 ; i < houses . length ; i ++ ) { if ( houses [ i ] > largest ) { largest = houses [ i ] ; } if ( houses [ i ] < smallest ) { smallest = houses [ i ] ; } } var answer = largest - smallest ; console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( function ( x ) { return x . split ( " " ) } ) ; var N = parseInt ( input [ 0 ] , 10 ) ; var ary_xy = [ ] ; var sumWay = 0 ; var xDiff , yDiff , ans ; for ( var i = 1 ; i <= N ; i ++ ) { ary_xy . push ( input [ i ] . map ( e => parseInt ( e , 10 ) ) ) ; } for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { xDiff = ary_xy [ j ] [ 0 ] - ary_xy [ i ] [ 0 ] ; yDiff = ary_xy [ j ] [ 1 ] - ary_xy [ i ] [ 1 ] ; sumWay += Math . sqrt ( Math . pow ( xDiff , 2 ) + Math . pow ( yDiff , 2 ) ) ; } } ans = sumWay * 2 / N ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function dist ( a , b ) { const xa = a . trim ( ) . split ( ' ' ) . map ( Number ) [ 0 ] ; const ya = a . trim ( ) . split ( ' ' ) . map ( Number ) [ 1 ] ; const xb = b . trim ( ) . split ( ' ' ) . map ( Number ) [ 0 ] ; const yb = b . trim ( ) . split ( ' ' ) . map ( Number ) [ 1 ] ; const X = xa - xb ; const Y = ya - yb ; return Math . sqrt ( Math . pow ( X , 2 ) + Math . pow ( Y , 2 ) ) } function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; const N = Number ( input [ 0 ] ) ; const XY = input . slice ( 1 , input . length ) ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { let a = XY [ i ] ; let b = XY [ j ] ; sum += dist ( a , b ) ; } } console . log ( sum / N ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var V = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; var B = Number ( lines [ 1 ] . split ( " " ) [ 0 ] ) ; var W = Number ( lines [ 1 ] . split ( " " ) [ 1 ] ) ; var T = Number ( lines [ 2 ] . split ( " " ) [ 0 ] ) ; var D = Math . abs ( A - B ) ; var S = V - W ; if ( D <= S * T ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } ) ;
function main ( lines ) { const input = s ( ) ; let ans = ' NO ' ; switch ( input ) { case ' 7 5 5 ' : case ' 5 7 5 ' : case ' 5 5 7 ' : ans = ' YES ' ; } return ans ; } const lines = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; let lineCount = 0 ; const s = ( ) => lines [ lineCount ++ ] ; const n = ( ) => Number ( s ( ) ) ; const b = ( ) => BigInt ( s ( ) ) ; const sa = ( ) => s ( ) . split ( ' ' ) ; const na = ( ) => sa ( ) . map ( Number ) ; const ba = ( ) => sa ( ) . map ( BigInt ) ; const ans = main ( lines ) ; console . log ( ans ) ;
function main ( arg ) { arg = arg . split ( " \n " ) . map ( Number ) var data = [ arg [ 0 ] , arg [ 1 ] , arg [ 2 ] , arg [ 3 ] , arg [ 4 ] ] data . sort ( ( a , b ) => { var _a = a % 10 var _b = b % 10 if ( _a == 0 ) { _a = 10 } if ( _b == 0 ) { _b = 10 } return Number ( _b ) - Number ( _a ) } ) var sum = 0 for ( var i = 0 ; i < data . length ; i ++ ) { var ans = Math . ceil ( data [ i ] / 10 ) if ( i === data . length - 1 ) { sum += data [ i ] } else { sum += ans * 10 } } console . log ( sum ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; C = new Array ( M ) ; P = new Array ( 0 ) ; for ( i = 0 ; i < M ; i ++ ) { tmp = input [ i + 1 ] . split ( " " ) ; Csub = [ parseInt ( tmp [ 0 ] ) , parseInt ( tmp [ 1 ] ) , i ] ; C [ i ] = Csub ; } C . sort ( function ( a , b ) { return ( a [ 0 ] - b [ 0 ] || a [ 1 ] - b [ 1 ] ) } ) ; for ( i = 0 ; i < M ; i ++ ) { var y = " " ; c = ` ${ C [ i ] [ 0 ] } ` . slice ( - 6 ) ; if ( i == 0 ) { var cnt = 1 ; } else if ( C [ i ] [ 0 ] != C [ i - 1 ] [ 0 ] ) { cnt = 1 ; } else { cnt ++ ; } y = ` ${ cnt } ` . slice ( - 6 ) ; P . push ( [ ` ${ c } ${ y } ` , C [ i ] [ 2 ] ] ) ; } P . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; var ans = " " ; for ( i = 0 ; i < M ; i ++ ) { if ( i != M - 1 ) { ans = ans + P [ i ] [ 0 ] + " \n " ; } else { ans = ans + P [ i ] [ 0 ] ; } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( input ) { let five = input . toString ( ) . split ( ' 5 ' ) . length - 1 ; let seven = input . toString ( ) . split ( ' 7 ' ) . length - 1 ; ( five == 2 && seven == 1 ) ? console . log ( ' YES ' ) : console . log ( ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var X = parseInt ( input . trim ( ) , 10 ) ; var A , B ; var A = 0 ; var flag = true ; while ( Math . pow ( A , 5 ) <= X ) { B = Math . round ( Math . pow ( ( X - Math . pow ( A , 5 ) ) , 1 / 5 ) ) ; if ( ( Math . pow ( A , 5 ) + Math . pow ( B , 5 ) ) === X ) { flag = false ; B *= - 1 ; break ; } A ++ ; } if ( flag ) B = 1 ; while ( flag ) { while ( ( Math . pow ( A , 5 ) - Math . pow ( B , 5 ) ) > X ) { B ++ ; } if ( ( Math . pow ( A , 5 ) - Math . pow ( B , 5 ) ) === X ) { break ; } else { A ++ ; } } console . log ( " %d %d " , A , B ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
( function ( input ) { var toMin = function ( str ) { var x = str . split ( ' : ' ) ; return parseInt ( x [ 0 ] ) * 60 + parseInt ( x [ 1 ] ) ; } ; var lines = input . split ( ' \n ' ) ; var line = lines . shift ( ) . split ( ' ' ) ; var n = line [ 0 ] ; var t = line [ 1 ] ; var last = 86400 ; var output = [ ] ; for ( var i = 0 ; i < n ; ++ i ) { var line = lines [ i ] . split ( ' ' ) ; var diff = toMin ( line [ 0 ] ) - last ; if ( diff >= t ) { output . push ( line [ 1 ] + ' ' + diff ) ; } last = toMin ( line [ 2 ] ) ; } console . log ( output . length ) ; for ( var i = 0 ; i < output . length ; ++ i ) { console . log ( output [ i ] ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ) ;
function main ( input ) { lines = input . split ( " " ) ; var N = Number ( lines [ 0 ] ) ; var P = Number ( lines [ 1 ] ) ; var i = 1 ; var ans = 1 ; if ( N == 1 ) { ans = P ; } else if ( P == 1 || N > P ) { ans = 1 ; } else { while ( true ) { var k = Math . pow ( i , N ) ; if ( k > P ) { break ; } if ( P % k == 0 ) { ans = i ; } i ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var a = input . split ( " \n " ) ; var flag = true ; for ( var i = 0 ; i < 3 ; i ++ ) { a [ i ] = a [ i ] . split ( " " ) . map ( Number ) ; } if ( a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] == a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 1 ] [ 1 ] == a [ 2 ] [ 0 ] - a [ 2 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 1 ] [ 1 ] - a [ 1 ] [ 2 ] && a [ 0 ] [ 1 ] - a [ 0 ] [ 2 ] == a [ 2 ] [ 1 ] - a [ 2 ] [ 2 ] && a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] == a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] && a [ 0 ] [ 1 ] - a [ 1 ] [ 1 ] == a [ 0 ] [ 2 ] - a [ 1 ] [ 2 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 1 ] - a [ 2 ] [ 1 ] && a [ 1 ] [ 0 ] - a [ 2 ] [ 0 ] == a [ 1 ] [ 2 ] - a [ 2 ] [ 2 ] ) { flag = false ; } console . log ( flag ? " No " : " Yes " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { var lines = input . split ( " \n " ) ; var words = lines [ 0 ] . split ( " " ) ; var ans1 = [ 5 , 5 , 7 ] var ans2 = [ 5 , 7 , 5 ] var ans3 = [ 7 , 5 , 5 ] console . log ( words . join ( ' ' ) === ans1 . join ( ' ' ) || words . join ( ' ' ) === ans2 . join ( ' ' ) || words . join ( ' ' ) === ans3 . join ( ' ' ) ? ' YES ' : ' NO ' ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var [ h , r ] = input . trim ( ) . split ( " " ) . map ( Number ) ; if ( r + h == 0 ) console . log ( 0 ) ; else if ( r + h > 0 ) console . log ( 1 ) ; else console . log ( - 1 ) ;
" use strict " ; function main ( input ) { var N = splitNum ( input ) . slice ( 0 , 4 ) ; N . sort ( ) ; var res = JSON . stringify ( N ) === JSON . stringify ( [ 1 , 4 , 7 , 9 ] ) ; console . log ( res ? ' YES ' : ' NO ' ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function splitNum ( line ) { return line . split ( / \s+ / ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; }
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi = ( xi + 1 ) | 0 ) { for ( let yi = 0 ; yi <= k ; yi = ( yi + 1 ) | 0 ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ; function calc ( x ) { parseInt ( x . trim ( ) , 10 ) return x * x * x ; }
function main ( input ) { var res = 0 ; input = input . split ( ' ' ) ; const max = parseInt ( input [ 0 ] ) ; const total = parseInt ( input [ 1 ] ) ; for ( var X = 0 ; X <= max ; X ++ ) { for ( var Y = 0 ; Y <= max ; Y ++ ) { var Z = ( total - parseInt ( X ) - parseInt ( Y ) ) ; if ( 0 <= Z && Z <= max ) { res ++ ; } } } console . log ( res ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { const input = s . replace ( / \n / g , ' ' ) . split ( ' ' ) ; const two5 = input . filter ( x => x === ' 5 ' ) . length === 2 ; const one7 = input . filter ( x => x === ' 7 ' ) . length === 1 ; const result = ( two5 && one7 ) ? ' YES ' : ' NO ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = ( input ) => { const [ a , b ] = input . trim ( ) . split ( " " ) . map ( ( e ) => Number ( e ) ) ; const result = Math . ceil ( ( a + b ) / 2 ) ; console . log ( result ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = parseInt ( input . trim ( ) . split ( " " ) ) ; var x = 800 * input ; var y = 200 * Math . floor ( input / 15 ) ; console . log ( x - y ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var number = parseInt ( input ) ; console . log ( number * number * number ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { const hands = input . split ( " " ) . map ( n => Number ( n ) ) ; const aliceHand = hands [ 0 ] ; const bobHand = hands [ 1 ] ; if ( aliceHand === bobHand ) { console . log ( ' Draw ' ) ; } else if ( aliceHand === 1 && bobHand === 13 ) { console . log ( ' Alice ' ) ; } else if ( aliceHand === 13 && bobHand === 1 ) { console . log ( ' Bob ' ) ; } else if ( aliceHand > bobHand ) { console . log ( ' Alice ' ) ; } else { console . log ( ' Bob ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function PriorityQueue ( ) { this . heap = [ ] ; } PriorityQueue . prototype = { push : function ( x ) { var h = this . heap , i = h . length ++ , j ; while ( i ) { j = i - 1 >> 1 ; if ( h [ j ] <= x ) break ; h [ i ] = h [ j ] ; i = j ; } h [ i ] = x ; } , pop : function ( ) { var h = this . heap , r = h [ 0 ] , x = h . pop ( ) ; var i = 0 , k = h . length >> 1 , j ; while ( i < k ) { j = ( i << 1 ) + 1 ; if ( h [ j + 1 ] < h [ j ] ) ++ j ; if ( x <= h [ j ] ) break ; h [ i ] = h [ j ] ; i = j ; } if ( h . length ) h [ i ] = x ; return r ; } , size : function ( ) { return this . heap . length ; } , top : function ( ) { return this . heap [ 0 ] ; } , } ; function compareNumbers2 ( a , b ) { return a - b ; } function Main ( arg ) { var N = arg . split ( " \n " ) [ 0 ] - 0 ; var K = arg . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) ; K . sort ( compareNumbers2 ) ; var ans = new PriorityQueue ( ) ; for ( var i = K [ 0 ] ; i <= K [ N - 1 ] ; i ++ ) { var tmp = 0 ; for ( var j = 0 ; j < N ; j ++ ) { tmp += ( K [ j ] - i ) * ( K [ j ] - i ) ; } ans . push ( tmp ) ; } console . log ( ans . top ( ) ) ; return ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = " " process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( " \n " ) ; var i = 0 ; while ( true ) { var x = input [ i ] ; if ( x == " 0 " ) { break ; } var sum = 0 ; for ( j = 0 ; j < x . length ; j ++ ) { sum += parseInt ( x [ j ] , 10 ) ; } console . log ( sum ) i ++ ; } } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " " ) . map ( Number ) ; var [ a , b , c , d ] = arr . sort ( ( a , b ) => b - a ) ; console . log ( Math . abs ( ( a + d ) - ( b + c ) ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . toString ( ) . split ( ' \n ' ) ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var limit = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; console . log ( array [ array . length - 1 ] - array [ 0 ] <= limit ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( Arr . length != 0 ) { var result = [ ] ; var NT = ( Arr . shift ( ) ) . split ( " " ) . map ( Number ) ; for ( var i = 0 ; i < NT [ 0 ] ; i ++ ) { var arr = ( Arr . shift ( ) ) . split ( " " ) ; var a = arr [ 0 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; if ( i > 0 ) { var A = a [ 0 ] * 60 + a [ 1 ] ; var B = b [ 0 ] * 60 + b [ 1 ] ; if ( A - B >= NT [ 1 ] ) result . push ( c + " " + ( A - B ) ) ; } var b = arr [ 2 ] . split ( " : " ) . map ( function ( v ) { return parseInt ( v , 10 ) ; } ) ; var c = arr [ 3 ] ; } if ( result . length == 0 ) { console . log ( 0 ) ; } else { console . log ( result . length ) ; result . forEach ( function ( v ) { console . log ( v ) ; } ) ; } }
" use strict " ; var __importDefault = ( this && this . __importDefault ) || function ( mod ) { return ( mod && mod . __esModule ) ? mod : { " default " : mod } ; } ; Object . defineProperty ( exports , " __esModule " , { value : true } ) ; var readline_1 = __importDefault ( require ( " readline " ) ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var reader = readline_1 . default . createInterface ( { input : process . stdin , output : process . stdout , } ) ; var lines = [ ] ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { var r = Number ( lines [ 0 ] ) ; console . log ( Math . pow ( r , 2 ) ) ; } ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' \n ' ) . map ( v => parseInt ( v , 10 ) ) ; let A = [ ] ; let B = [ ] ; let ans = 0 ; for ( let i = 0 ; i < xs . length ; i ++ ) { A . push ( Math . ceil ( xs [ i ] / 10 ) * 10 ) ; B . push ( Math . ceil ( xs [ i ] / 10 ) * 10 - xs [ i ] ) ans += A [ i ] ; } const compare = ( a , b ) => { return b - a ; } B . sort ( compare ) ; console . log ( ans - B [ 0 ] ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var h1 = parseInt ( inputs [ 0 ] , 10 ) ; var m1 = parseInt ( inputs [ 1 ] , 10 ) ; var h2 = parseInt ( inputs [ 2 ] , 10 ) ; var m2 = parseInt ( inputs [ 3 ] , 10 ) ; var k = parseInt ( inputs [ 4 ] , 10 ) ; var minute1 = h1 * 60 + m1 ; var minute2 = h2 * 60 + m2 ; var difference = minute2 - minute1 ; console . log ( difference - k ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { const N = parseInt ( arg . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; console . log ( ( 800 * N ) - ( Math . floor ( N / 15 ) * 200 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { var input = input . split ( " \n " ) ; var tmp = input [ 0 ] . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var c = parseInt ( tmp [ 2 ] , 10 ) ; if ( a + b >= c ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var res ; if ( a >= 13 ) { res = b ; } if ( a >= 6 && a <= 12 ) { res = b / 2 ; } if ( a <= 5 ) { res = 0 ; } console . log ( res ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] ) ; var b = parseInt ( tmp [ 1 ] ) ; var r = " " ; if ( a <= 5 ) { r = 0 ; } if ( a >= 6 && a <= 12 ) { r = b / 2 ; } if ( a >= 13 ) { r = b ; } console . log ( r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let buf = [ ] ; process . stdin . on ( ' data ' , function ( chunk ) { let x = parseInt ( chunk ) ; console . log ( x * x * x ) ; } )
function Main ( input ) { const lines = input . split ( " \n " ) ; const n = parseInt ( lines [ 0 ] ) ; const p = lines [ 1 ] . split ( " " ) ; ans = 0 ; min_p = n + 10 ; for ( i = 0 ; i < n ; ++ i ) { if ( parseInt ( p [ i ] ) <= min_p ) { min_p = parseInt ( p [ i ] ) ; ans ++ ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { const args = input . split ( ' ' ) . map ( m => parseInt ( m ) ) ; const A = args . shift ( ) ; const B = args . shift ( ) ; let price = B ; if ( A <= 5 ) { price = 0 ; } else if ( A <= 12 ) { price /= 2 ; } console . log ( price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const Main = ( input ) => { let xs = Number ( input ) ; let pay = xs * 800 ; let back = Math . floor ( xs / 15 ) ; let ans = pay - ( back * 200 ) ; console . log ( ans ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( r ) => { console . log ( r * r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( s ) { var a = s . split ( " " ) ; for ( var i = 0 ; i < a . length ; i ++ ) a [ i ] = parseInt ( a [ i ] ) ; if ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ) console . log ( " Yes \n " ) ; else console . log ( " No \n " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; S = input [ 1 ] . split ( " " ) ; o = { } ; for ( i of S ) o [ i ] = true ; console . log ( Object . keys ( o ) . length == 3 ? " Three " : " Four " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { inputs = input . split ( / \n / ) ; var firstLine = inputs [ 0 ] var firstLines = firstLine . split ( / \s / ) var n = Number ( firstLines [ 0 ] ) var m = Number ( firstLines [ 1 ] ) var prefs = { } var prefLineLength = inputs . length - 1 - 1 for ( var i = 0 ; i < prefLineLength ; i ++ ) { var prefLine = inputs [ i + 1 ] var prefLines = prefLine . split ( / \s / ) var p = Number ( prefLines [ 0 ] ) var y = Number ( prefLines [ 1 ] ) if ( ! prefs [ p ] ) { prefs [ p ] = [ ] } prefs [ p ] . push ( { i : i , pref : p , year : y } ) } var cities = [ ] for ( var i = 0 ; i <= n ; i ++ ) { var pref = prefs [ i ] if ( ! pref ) continue ; pref . sort ( function ( a , b ) { return a . year - b . year ; } ) for ( var j = 0 ; j < pref . length ; j ++ ) { pref [ j ] . ID = ( " 00000 " + pref [ j ] . pref ) . slice ( - 6 ) + ( " 00000 " + ( j + 1 ) ) . slice ( - 6 ) cities . push ( pref [ j ] ) } } cities . sort ( function ( a , b ) { return a . i - b . i } ) console . log ( cities . map ( a => a . ID ) . join ( " \n " ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; inputStr = input [ 0 ] . split ( " " ) ; var N = Number . parseInt ( inputStr [ 0 ] ) ; var D = Number . parseInt ( inputStr [ 1 ] ) ; var X_arr = [ ] ; var count = 0 ; for ( var i = 0 ; i < N ; i ++ ) { var tmp = input [ i + 1 ] . split ( " " ) ; X_arr . push ( tmp . map ( tmp => parseInt ( tmp ) ) ) ; } for ( var i1 = 0 ; i1 < N - 1 ; i1 ++ ) { var tmp1 = X_arr [ i1 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i2 = i1 + 1 ; i2 < N ; i2 ++ ) { var cul = 0 ; var tmp2 = X_arr [ i2 ] . map ( tmp => parseInt ( tmp ) ) ; for ( var i3 = 0 ; i3 < D ; i3 ++ ) { cul = cul + Math . pow ( tmp1 [ i3 ] - tmp2 [ i3 ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( cul ) ) ) { count += 1 ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var line = input . split ( " \n " ) ; var tmp = line [ 0 ] . split ( " " ) ; var a = Number ( tmp [ 0 ] ) ; var b = Number ( tmp [ 1 ] ) ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const nums = input . split ( " " ) . map ( num => parseInt ( num , 10 ) ) console . log ( nums [ 0 ] >= 13 ? nums [ 1 ] : nums [ 0 ] >= 6 ? nums [ 1 ] / 2 : 0 ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function Main ( input ) { var x = input ; if ( x == 2 ) { x = 2 ; } else if ( x >= 2 && x < 4 ) { x = 2 } else if ( x >= 4 && x < 8 ) { x = 4 } else if ( x >= 8 && x < 16 ) { x = 8 } else if ( x >= 16 && x < 32 ) { x = 16 } else if ( x >= 32 && x < 64 ) { x = 32 } else if ( x >= 64 && x < 128 ) { x = 64 } console . log ( x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function main ( input ) { var A = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; var B = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A == 1 ) A = 14 ; if ( B == 1 ) B = 14 ; if ( A == B ) { console . log ( " Draw " ) ; } else if ( A > B ) { console . log ( " Alice " ) } else { console . log ( " Bob " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] ) ; const p = input [ 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; const mins = [ ] ; mins [ 0 ] = p [ 0 ] ; let ans = 1 ; for ( let i = 1 ; i < n ; i ++ ) { mins [ i ] = mins [ i - 1 ] > p [ i ] ? p [ i ] : mins [ i - 1 ] ; if ( mins [ i ] == p [ i ] ) ans ++ ; } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
function Main ( S ) { var a = S . split ( " \n " ) [ 1 ] . split ( " " ) . map ( Number ) ; console . log ( Math . max ( ... a ) - Math . min ( ... a ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var [ a , b , h , m ] = nexts ( 4 ) ; var x = h * 60 + m ; x /= 720 / 11 ; x -= x | 0 ; x *= Math . PI * 2 ; var ry = b * Math . sin ( x ) , rx = b * Math . cos ( x ) ; var dx = rx - a ; return Math . sqrt ( dx * dx + ry * ry ) ; }
var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { var arr = chunk . split ( ' \n ' ) ; var x = parseInt ( arr [ 0 ] ) ; console . log ( ' %d ' , Math . pow ( x , 3 ) ) ; } )
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' const main = input => { const args = input . split ( ' \n ' ) . map ( arg => arg . split ( ' ' ) ) const a = parseInt ( args [ 0 ] [ 0 ] , 10 ) const b = parseInt ( args [ 0 ] [ 1 ] , 10 ) const c = parseInt ( args [ 0 ] [ 2 ] , 10 ) if ( a + b >= c ) console . log ( ' Yes ' ) else console . log ( ' No ' ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) ; var lines = input . split ( ' \n ' ) ; var line ; while ( line = lines . shift ( ) ) { var nums = line . split ( ' ' ) ; var n = + nums [ 0 ] ; var m = + nums [ 1 ] ; if ( n + m == 0 ) break ; var p = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { p . push ( i + 1 ) ; } while ( p . length > 1 ) { for ( var i = 0 ; i < m - 1 ; i ++ ) { p . push ( p . shift ( ) ) ; } p . shift ( ) ; } console . log ( p [ 0 ] ) ; }
const Main = input => { const input2 = input . split ( ' \n ' ) ; const Asinfo = input2 [ 0 ] . split ( ' ' ) ; const Bsinfo = input2 [ 1 ] . split ( ' ' ) ; let diff ; const asspeed = Number ( Asinfo [ 1 ] ) ; const bsspeed = Number ( Bsinfo [ 1 ] ) ; const farDiff = Math . abs ( Number ( Asinfo [ 0 ] - Bsinfo [ 0 ] ) ) ; if ( Math . sign ( asspeed - bsspeed ) != 1 ) return console . log ( ' NO ' ) ; const sec = farDiff / ( asspeed - bsspeed ) ; if ( sec <= Number ( input2 [ 2 ] ) ) { return console . log ( " YES " ) } console . log ( " NO " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var n = input [ 0 ] - 0 ; var list = [ ] ; for ( var i = 1 ; i <= n ; i ++ ) { list . push ( input [ i ] . split ( " " ) . map ( v => v - 0 ) ) ; } var dismap = { } ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = i + 1 ; j < n ; j ++ ) { dismap [ j + " _ " + i ] = dismap [ i + " _ " + j ] = distance ( list [ i ] , list [ j ] ) ; } } var checklist = allpth ( n ) ; var sum = 0 ; for ( var i = 0 ; i < checklist . length ; i ++ ) { sum += calcSum ( dismap , checklist [ i ] ) ; } console . log ( sum / checklist . length ) ; } function calcSum ( dismap , list ) { var sum = 0 ; for ( var i = 1 ; i < list . length ; i ++ ) { sum += dismap [ list [ i - 1 ] + " _ " + list [ i ] ] ; } return sum ; } function distance ( a , b ) { return Math . sqrt ( Math . pow ( a [ 0 ] - b [ 0 ] , 2 ) + Math . pow ( a [ 1 ] - b [ 1 ] , 2 ) ) ; } function allpth ( n ) { var list = [ ] ; if ( n == 1 ) return [ [ 0 ] ] ; var baseList = allpth ( n - 1 ) ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < baseList . length ; j ++ ) { var tmp = baseList [ j ] . concat ( ) ; tmp . splice ( i , 0 , n - 1 ) ; list . push ( tmp ) ; } } return list ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) )
let [ a , b , c , d ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( Math . max ( a * b , c * d ) ) ;
function count ( n ) { var c = 0 ; while ( n % 2 === 0 ) { n = Math . floor ( n / 2 ) ; c += 1 ; } return c ; } function Main ( inp ) { var input = inp . split ( " \n " ) ; var n = Number ( input [ 0 ] ) ; var max = 0 ; var r = 1 ; for ( var i = 1 ; i <= n ; i ++ ) { var c = count ( i ) ; if ( c > max ) { max = c ; r = i ; } } console . log ( r ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const NM = input [ 0 ] . split ( ' ' ) . map ( Number ) ; const N = NM [ 0 ] ; const M = NM [ 1 ] ; const As = input . slice ( 1 , N + 1 ) ; const Bs = input . slice ( N + 1 , N + M + 1 ) ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { let flag = true ; for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] !== Bs [ bx ] [ by ] ) { flag = false ; break ; } } if ( ! flag ) break ; } if ( flag ) { console . log ( ' Yes ' ) ; process . exit ( 0 ) ; } } } console . log ( ' No ' ) ;
" use strict " ; const Main = ( input ) => { let xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; let A = xs [ 0 ] * xs [ 1 ] ; let B = xs [ 2 ] * xs [ 3 ] ; if ( A >= B ) { console . log ( A ) ; } else if ( A <= B ) { console . log ( B ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var jigen = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 1 ] ) ; var len = parseInt ( input . split ( " \n " ) [ 0 ] . split ( " " ) [ 0 ] ) ; var output = 0 ; for ( var i = 1 ; i < len + 1 ; i ++ ) { for ( var j = i + 1 ; j < len + 1 ; j ++ ) { var tmpKyori = 0 ; var iZahyo = input . split ( " \n " ) [ i ] ; var jZahyo = input . split ( " \n " ) [ j ] ; for ( var k = 0 ; k < jigen ; k ++ ) { var iTmpZahyo = parseInt ( iZahyo . split ( " " ) [ k ] ) ; var jTmpZahyo = parseInt ( jZahyo . split ( " " ) [ k ] ) ; tmpKyori += Math . pow ( iTmpZahyo - jTmpZahyo , 2 ) ; } var kekka = Math . sqrt ( tmpKyori ) ; if ( kekka . toString ( ) . indexOf ( " . " ) == - 1 ) { output ++ ; } } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; let a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; let v = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; let b = parseInt ( input [ 1 ] . split ( " " ) [ 0 ] ) ; let w = parseInt ( input [ 1 ] . split ( " " ) [ 1 ] ) ; let t = parseInt ( input [ 2 ] ) ; if ( w - v >= 0 ) { console . log ( " NO " ) ; return ; } let delta_p = Math . abs ( a - b ) ; let delta_v = v - w ; if ( delta_p <= delta_v * t ) console . log ( " YES " ) ; else console . log ( " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var arr = input [ 1 ] . split ( " " ) ; var flag = false ; arr . forEach ( function ( val ) { if ( val == " Y " ) flag = true ; } ) ; console . log ( flag ? " Four " : " Three " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' ; const p = s => console . log ( s ) ; function main ( input ) { let a , b , h , m ; [ a , b , h , m ] = input [ 0 ] . trim ( ) . split ( " " ) . map ( i => parseInt ( i ) ) ; let ans = Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( 2 * Math . PI * ( h / 12 + ( m / 60 ) / 12 - ( m / 60 ) ) ) ) ; p ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const ans = exec ( lines ) ; console . log ( ans ) ; } ) ; function exec ( lines ) { const x = parseInt ( lines [ 0 ] ) ; return ( x * x * x ) ; }
function main ( s ) { s = s . split ( " " ) ; for ( var i = 0 ; i < 2 ; i ++ ) s [ i ] = parseInt ( s [ i ] ) ; if ( s [ 0 ] == 1 ) s [ 0 ] = 16 ; if ( s [ 1 ] == 1 ) s [ 1 ] = 16 ; if ( s [ 0 ] === s [ 1 ] ) console . log ( " Draw \n " ) ; else if ( s [ 0 ] > s [ 1 ] ) console . log ( " Alice \n " ) ; else console . log ( " Bob \n " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { console . log ( input . split ( ' ? ' ) . join ( " D " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let a = next ( ) ; let b = next ( ) ; return Math . ceil ( ( a + b ) / 2 ) }
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) ; Array . prototype . uniq = function ( ) { tmp = { } ; tmp_arr = [ ] ; for ( var i = 0 ; i < this . length ; i ++ ) { tmp [ this [ i ] ] = i ; } for ( i in tmp ) { tmp_arr . push ( i ) ; } return tmp_arr ; } var s = input [ 1 ] . split ( / \s / g ) . uniq ( ) ; console . log ( s . length === 3 ? " Three " : " Four " ) ;
function main ( input ) { input = input . split ( ' ' ) ; var k = parseInt ( input [ 0 ] ) ; var s = parseInt ( input [ 1 ] ) ; var count = 0 ; for ( var x = 0 ; x <= k ; x ++ ) { for ( var y = 0 ; y <= k ; y ++ ) { var z = ( s - parseInt ( x ) - parseInt ( y ) ) ; if ( 0 <= z && z <= k ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input ; var x = parseInt ( lines , 10 ) ; var kotae = x * x * x ; console . log ( kotae ) ;
" use strict " ; const permutateWithoutRepetitions = permutationOptions => { if ( permutationOptions . length === 1 ) { return [ permutationOptions ] ; } const permutations = [ ] ; const smallerPermutations = permutateWithoutRepetitions ( permutationOptions . slice ( 1 ) ) ; const firstOption = permutationOptions [ 0 ] ; for ( let permIndex = 0 ; permIndex < smallerPermutations . length ; permIndex += 1 ) { const smallerPermutation = smallerPermutations [ permIndex ] ; for ( let positionIndex = 0 ; positionIndex <= smallerPermutation . length ; positionIndex += 1 ) { const permutationPrefix = smallerPermutation . slice ( 0 , positionIndex ) ; const permutationSuffix = smallerPermutation . slice ( positionIndex ) ; permutations . push ( permutationPrefix . concat ( [ firstOption ] , permutationSuffix ) ) ; } } return permutations ; } const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] ) ; const xy = arg . slice ( 1 , N + 1 ) . map ( n => n . split ( " " ) . map ( l => parseInt ( l ) ) ) ; const combos = permutateWithoutRepetitions ( xy ) ; const results = [ ] ; for ( let i in combos ) { let temp = 0 ; for ( let j = 0 ; j < combos [ i ] . length - 1 ; j ++ ) { let x = Math . pow ( combos [ i ] [ ~ ~ j + 1 ] [ 0 ] - combos [ i ] [ j ] [ 0 ] , 2 ) ; let y = Math . pow ( combos [ i ] [ ~ ~ j + 1 ] [ 1 ] - combos [ i ] [ j ] [ 1 ] , 2 ) ; temp += Math . sqrt ( x + y ) ; } results . push ( temp ) } console . log ( results . reduce ( ( m , n ) => m + n ) / combos . length ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " const Main = ( nyuuryoku ) => { const Array = nyuuryoku . split ( " \n " ) const N = Array [ 0 ] - 0 const colorArray = Array [ 1 ] . split ( " " ) const isyellow = colorArray . some ( ( ele => { return ele == " Y " } ) ) console . log ( isyellow ? " Four " : " Three " ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; const input1 = input [ 0 ] . split ( " " ) ; const N = parseInt ( input1 [ 0 ] ) ; const D = parseInt ( input1 [ 1 ] ) ; const points = input . slice ( 1 ) . map ( x => x . split ( " " ) . map ( y => parseInt ( y ) ) ) ; var count = 0 ; for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { var distance = 0 ; for ( k = 0 ; k < D ; k ++ ) { distance += ( points [ i ] [ k ] - points [ j ] [ k ] ) * ( points [ i ] [ k ] - points [ j ] [ k ] ) ; } distance = Math . sqrt ( distance ) ; if ( Number . isInteger ( distance ) ) count ++ ; } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( " 0 " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { for ( var i = 0 ; i < lines . length ; i ++ ) { console . log ( lines [ i ] * lines [ i ] * lines [ i ] ) ; } } ) ;
function main ( input ) { input = input . trim ( ) ; const a = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; const b = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; const c = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var arr = [ a , b , c ] arr . sort ( ) if ( arr [ 0 ] == 5 && arr [ 1 ] == 5 && arr [ 2 ] == 7 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const fs = require ( ' fs ' ) const main = ( input ) => { console . log ( Number ( input ) * Number ( input ) ) } main ( fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let a = + cin . shift ( ) ; let b = + cin . shift ( ) ; let h = + cin . shift ( ) ; let m = + cin . shift ( ) ; let theta = Math . PI * ( ( h / 6 + m / 360 ) - m / 30 ) ; let xx = a * a + b * b - 2 * a * b * Math . cos ( theta ) ; let x = Math . sqrt ( xx ) ; console . log ( x ) ; } main ( ) ;
function main ( input ) { const inArray = input . trim ( ) . split ( ' ' ) . map ( x => parseInt ( x ) ) ; console . log ( inArray [ 0 ] >= 13 ? inArray [ 1 ] : inArray [ 0 ] >= 6 ? inArray [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' / ' ) . map ( n => parseInt ( n , 10 ) ) ; const Y = args [ 0 ] , M = args [ 1 ] , D = args [ 2 ] ; if ( Y > 2019 || Y >= 2019 && M > 4 ) { console . log ( ' TBD ' ) ; } else { console . log ( ' Heisei ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) let cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] const nexts = ( n ) => cin . slice ( cid , cid += n ) . map ( i => parseInt ( i ) ) const [ A , V , B , W , T ] = nexts ( 5 ) const distance = Math . abs ( A - B ) if ( V <= W ) return console . log ( ' NO ' ) const velocity = V - W distance / velocity <= T ? console . log ( ' YES ' ) : console . log ( ' NO ' )
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; var kumiawase = [ [ 0 , 1 , 2 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 0 , 1 ] , [ 2 , 1 , 0 ] ] ; var main = function ( ) { var i ; var cost ; var mincost ; var splitlist ; splitlist = lines [ 0 ] . split ( " " ) ; mincost = 200 ; for ( i = 0 ; i < 6 ; i ++ ) { cost = Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 0 ] ] ) ) ; cost += Math . abs ( Number ( splitlist [ kumiawase [ i ] [ 2 ] ] ) - Number ( splitlist [ kumiawase [ i ] [ 1 ] ] ) ) ; if ( mincost > cost ) { mincost = cost ; } } console . log ( mincost ) ; } reader . on ( ' line ' , function ( line ) { lines . push ( line ) ; } ) ; reader . on ( ' close ' , function ( ) { main ( ) ; } ) ;
function listsGetSortCompare ( type , direction ) { var compareFuncs = { " NUMERIC " : function ( a , b ) { return parseFloat ( a ) - parseFloat ( b ) ; } , " TEXT " : function ( a , b ) { return a . toString ( ) > b . toString ( ) ? 1 : - 1 ; } , " IGNORE_CASE " : function ( a , b ) { return a . toString ( ) . toLowerCase ( ) > b . toString ( ) . toLowerCase ( ) ? 1 : - 1 ; } , } ; var compare = compareFuncs [ type ] ; return function ( a , b ) { return compare ( a , b ) * direction ; } } function main ( input ) { var args = input . split ( ' ' ) ; sorted = args . slice ( ) . sort ( listsGetSortCompare ( " NUMERIC " , - 1 ) ) ; result = 0 ; var i_end = sorted . length - 1 ; var i_inc = 1 ; if ( 1 > i_end ) { i_inc = - i_inc ; } for ( i = 1 ; i_inc >= 0 ? i <= i_end : i >= i_end ; i += i_inc ) { cur = sorted [ ( i - 1 ) ] ; next = sorted [ ( ( i + 1 ) - 1 ) ] ; result = result + Math . abs ( cur - next ) ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " / " ) . map ( Number ) ; console . log ( a [ 0 ] <= 2019 && a [ 1 ] < 5 ? " Heisei " : " TBD " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function I ( s , f ) { this . _s = s . split ( " \n " ) ; this . _c = 0 ; this . _l = 0 ; this . _f = f || Number } I . prototype . a = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; var t = l . trim ( ) . split ( " " ) ; var a = t [ this . _c ] ; this . _c ++ ; if ( t . length === this . _c ) { this . _c = 0 ; this . _l ++ } return this . _f ( a ) } ; I . prototype . l = function ( ) { var l = this . _s [ this . _l ] ; if ( ! l ) return ; this . _c = 0 ; this . _l ++ ; return l . split ( " " ) . map ( this . _f ) } ; function main ( input ) { const o = new I ( input ) ; var arr = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { arr . push ( o . a ( ) ) ; } var k = o . a ( ) ; arr . sort ( ( a , b ) => a - b ) ; console . log ( arr [ 4 ] - arr [ 0 ] <= k ? " Yay! " : " :( " ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { console . log ( input . split ( " \n " ) [ 4 ] - input . split ( " \n " ) [ 0 ] <= input . split ( " \n " ) [ 5 ] ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { const x = Number ( input ) console . log ( x * x * x ) } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " " ) ; var num = 0 ; for ( var i = 0 ; i < Arr . length ; i ++ ) { var str = Arr [ i ] ; str = str . replace ( / \d+ / g , function ( s ) { num += ( s - 0 ) ; return s ; } ) ; } console . log ( num ) ;
const main = function ( input ) { var tasks = input . split ( " " ) . map ( i => parseInt ( i ) ) ; var min = 100 * 3 ; for ( var i = 0 ; i < 3 ; i ++ ) { var pat1 = Math . abs ( tasks [ i ] - tasks [ ( i - 1 ) % 3 ] ) + Math . abs ( tasks [ ( i - 1 ) % 3 ] - tasks [ ( i + 1 ) % 3 ] ) ; var pat2 = Math . abs ( tasks [ i ] - tasks [ ( i + 1 ) % 3 ] ) + Math . abs ( tasks [ ( i + 1 ) % 3 ] - tasks [ ( i - 1 ) % 3 ] ) ; var smaller = Math . min ( pat1 , pat2 ) ; if ( min > smaller ) min = smaller ; } console . log ( min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var tmp = input . trim ( ) . split ( " \n " ) ; var array = tmp . slice ( 0 , tmp . length - 1 ) ; var max = parseInt ( tmp [ tmp . length - 1 ] , 10 ) ; array = array . map ( val => parseInt ( val , 10 ) ) ; var success = true ; for ( var i = 0 ; i < array . length ; i ++ ) { for ( var j = 0 ; j < array . length ; j ++ ) { if ( i >= j ) continue ; var dist = array [ j ] - array [ i ] ; if ( max < dist ) { success = false ; break ; } } } console . log ( success ? " Yay! " : " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code , result = " " ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; result += String . fromCharCode ( code ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; result += " a " ; } else { result += s [ j ] ; } } } console . log ( result ) ;
" use strict " function main ( arg ) { var t = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var a = t [ 0 ] var b = t [ 1 ] if ( a <= 5 ) { console . log ( 0 ) } else if ( a < 13 ) { console . log ( b / 2 ) } else { console . log ( b ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { const inputList = arg . trim ( ) . split ( " \n " ) ; const input = inputList [ 0 ] . split ( " " ) const A = parseInt ( input [ 0 ] ) ; const B = parseInt ( input [ 1 ] ) ; const H = parseInt ( input [ 2 ] ) ; const M = parseInt ( input [ 3 ] ) ; const angleA = 0.5 * ( ( H * 60 ) + M ) ; const angleB = 6 * M if ( angleA == angleB ) { console . log ( Math . abs ( A - B ) ) ; } else { const difAngle = Math . abs ( angleA - angleB ) ; const radDifAngle = ( difAngle / 360 ) * 2 * Math . PI ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - ( 2 * A * B * Math . cos ( radDifAngle ) ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; var K = input [ 0 ] ; var S = input [ 1 ] ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { if ( ( S - ( i + j ) <= K ) && ( S - ( i + j ) >= 0 ) ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { console . log ( Math . ceil ( input . split ( ' ' ) . map ( n => Number ( n ) ) . reduce ( ( a , e ) => a + e ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . forEach ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { let num = input . trim ( ) . split ( " \n " ) [ 0 ] ; let row = input . trim ( ) . split ( " \n " ) [ 1 ] . split ( ' ' ) . map ( x => x - 0 ) ; let ans = 0 ; let min = Infinity ; for ( let i = 0 ; i < num ; i ++ ) { if ( row [ i ] < min ) { ans ++ ; min = row [ i ] ; } ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; var r = input . filter ( x => x % 10 ) . map ( x => x % 10 ) ; var m = Math . min . apply ( null , r ) ; if ( m === Infinity ) { r = [ 0 ] ; m = 0 ; } input = input . map ( x => x - x % 10 ) ; var result = input . reduce ( ( a , c ) => a + c , 0 ) + 10 * ( r . length - 1 ) + m ; console . log ( result ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; const a = s [ 0 ] ; const b = s [ 1 ] ; const strength = [ 0 , 13 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ; let ans = ' ' ; if ( strength [ a ] > strength [ b ] ) ans = ' Alice ' ; if ( strength [ a ] < strength [ b ] ) ans = ' Bob ' ; if ( strength [ a ] === strength [ b ] ) ans = ' Draw ' ; console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
var ans = 0 ; require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . match ( / \d+ / g ) . forEach ( function ( elem ) { ans += parseInt ( elem , 10 ) ; } ) ; console . log ( ans ) ;
" use strict " ; const main = arg => { const times = arg . split ( " \n " ) . map ( n => parseInt ( n ) ) ; let min = 10 ; let sum = 0 ; for ( let i = 0 ; i < 5 ; i ++ ) { let digitOne = String ( times [ i ] ) . split ( " " ) ; digitOne = parseInt ( digitOne [ digitOne . length - 1 ] ) ; let digitMinus = 10 - digitOne ; sum += parseInt ( times [ i ] ) ; if ( digitMinus !== 10 ) { sum += digitMinus ; } if ( digitMinus !== 10 && digitOne < min ) { min = digitOne ; } } console . log ( parseInt ( sum - ( 10 - min ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; Arr . forEach ( function ( v ) { var a = ( v . split ( " " ) ) [ 0 ] - 0 ; var b = ( v . split ( " " ) ) [ 1 ] - 0 ; console . log ( a + b ) ; } ) ;
' use strict ' function Main ( input ) { input = input . trim ( ) . split ( / \s+ / ) . map ( x => x - 0 ) ; var k = input . pop ( ) ; var result = ( input . pop ( ) - input . shift ( ) <= k ) ; var ans = result ? ' Yay! ' : ' :( ' ; console . log ( ans ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const D = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const points = arg . slice ( 1 , N + 1 ) ; let answer = 0 ; for ( let i in points ) { let temp = points [ i ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let nows = [ ] ; for ( let j in temp ) { nows . push ( temp [ j ] ) ; } for ( let j = parseInt ( i ) + 1 ; j < N ; j ++ ) { let temp = points [ j ] . split ( " " ) . map ( n => parseInt ( n ) ) ; let targets = [ ] ; for ( let k in temp ) { targets . push ( temp [ k ] ) ; } let distance = 0 ; for ( let k in targets ) { distance += Math . abs ( Math . pow ( nows [ k ] - targets [ k ] , 2 ) ) ; } distance = Math . sqrt ( distance ) ; if ( distance % 1 === 0 ) { answer ++ } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; var k = parseInt ( arg . pop ( ) ) ; console . log ( arg . pop ( ) - arg . shift ( ) > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return ( this . index < this . max ) ; } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " NoSuchElementException:次に要素は無いよ";} var returnOb j = thi .list[thi . ndex ] ; th i s.in d ex++; r turn retur nO b ; } } ain(); fu n t o nex t ( ) return o j.ne x t ( );} fu cti o n ne x t I n (){retur myconv ( n e xt(),1 ;} fun c tion n e x t S t Array(){ eturn myconv ( n e xt(),2 ;} fun c tion n e x t I n Array(){ eturn myconv ( n e xt(),4 ;} fun c tion n e x t C h rArray() return myconv ( n e xt(),6 ;} fun c tion h a s N e x (){retur obj.ha s N e xt();} fun c tion my o u t ( ){consol .log( t ) ; } functi o n m y e r r ( ){consol .erro r ( t ) ;} func t ion m y c o n v i,no){tr {switc h ( n o) { c ase 1:retu r n p a rseI t ( i);cas 2:retur n i . spli ( " ");ca e 4:ret u r n i . spli ( " ").ma ( ( a)=>N u m b e r ( a)) ; c a s e 6:retu r n i . spli ( " ");cas 7 :retu r n i . spli ( " ").map ( a )=>Nu m b e r ( a)) ; c a s e 8:retu r n i . join " ");cas 9 :ret u r n i . join " \ n");ca e 0:re t u rn i . join " " );defa l t :ret u r n i ;}}catc h (e){re u r n i;}} f u n c tion M i n ( ) var one = ne x t I tAr ay( ; var N = one[ 0 ] ; var K = one [ 1 ] ; if( = 1){ m y o t( 0 ) r t u r ; } v a r m n = (K ); ar a = N - m n; you ( a 1) ; }
function Main ( input ) { const abcde = input . split ( " \n " ) . map ( n => parseInt ( n ) ) ; const len = 5 ; var total_time = 0 ; var last_cal_num = 10 ; var last_cal_num_index = 0 ; for ( var i = 0 ; i < len ; i ++ ) { var j = abcde [ i ] % 10 if ( 0 < j && j < last_cal_num ) { last_cal_num = j ; last_cal_num_index = i ; } } for ( var i = 0 ; i < len ; i ++ ) { if ( i !== last_cal_num_index ) { var j = abcde [ i ] ; var k = j % 10 ; j = k ? j + ( 10 - k ) : j ; total_time += j ; } } total_time += abcde [ last_cal_num_index ] ; console . log ( String ( total_time ) . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] console . log ( Math . pow ( parseInt ( next ( ) ) , 3 ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nrl = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nrl [ 0 ] ; var L = nrl [ 2 ] ; var t = [ ] ; var max = [ 0 , 0 ] ; var time = 0 ; for ( var i = 0 ; i < n ; i ++ ) t [ i ] = [ 0 , 0 , i ] ; arr . push ( [ 1 , L , 0 ] . join ( " " ) ) ; arr . forEach ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; var d = v [ 0 ] - 1 ; var T = v [ 1 ] ; var x = v [ 2 ] ; t [ max [ 0 ] ] [ 1 ] += T - time ; time = T ; t [ d ] [ 0 ] += x ; if ( x > 0 ) { if ( t [ d ] [ 0 ] > max [ 1 ] ) max = [ d , t [ d ] [ 0 ] ] ; else if ( t [ d ] [ 0 ] == max [ 1 ] && d <= max [ 0 ] ) max = [ d , t [ d ] [ 0 ] ] ; } if ( x < 0 && max [ 0 ] == d ) { var MAX = 0 ; var m = 0 ; t . forEach ( function ( V , index ) { if ( MAX < V [ 0 ] ) m = index ; } ) ; max = [ m , t [ m ] [ 0 ] ] ; } } ) ; t . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) return a [ 2 ] - b [ 2 ] ; else return b [ 1 ] - a [ 1 ] ; } ) ; console . log ( t [ 0 ] [ 2 ] + 1 ) ;
function Main ( input ) { input = input . split ( " \n " ) [ 1 ] . split ( " " ) ; var max = 0 , min = Infinity ; for ( val in input ) { max = Math . max ( input [ val ] , max ) ; min = Math . min ( input [ val ] , min ) ; } console . log ( max - min ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let k = next ( ) ; let s = next ( ) ; let ans = 0 ; let x , y , z for ( x = 0 ; x <= k ; x ++ ) for ( y = 0 ; y <= k ; y ++ ) if ( x + y <= s && x + y + k >= s ) { ans ++ } return ans ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( " UTF-8 " ) ; process . stdin . on ( ' data ' , function ( chunk ) { var arr = chunk . trim ( ) . split ( ' \n ' ) ; arr . forEach ( function ( v ) { var a = ( v . split ( " " ) [ 0 ] ) ; var b = ( v . split ( " " ) [ 1 ] ) ; var result = Number ( a ) + Number ( b ) ; console . log ( result ) ; } ) } ) ;
" use strict " ; function lowerThanDateOnly ( date1 , date2 ) { let d1 = date1 . split ( ' / ' ) ; let year1 = d1 [ 0 ] - 0 ; let month1 = d1 [ 1 ] - 0 ; let day1 = d1 [ 2 ] - 0 ; let d2 = date2 . split ( ' / ' ) ; let year2 = d2 [ 0 ] - 0 ; let month2 = d2 [ 1 ] - 0 ; let day2 = d2 [ 2 ] - 0 ; if ( year1 == year2 ) { if ( month1 == month2 ) { return day1 < day2 ; } else { return month1 < month2 ; } } else { return year1 < year2 ; } } function Main ( input ) { let lines = input . split ( " \n " ) [ 0 ] ; console . log ( lowerThanDateOnly ( lines , ' 2019/05/01 ' ) ? " Heisei " : " TBD " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let _inputLines ; let _lineNumber = 0 ; let inputReader = _inputReader ( ) ; function _main ( ) { _inputLines = _inputData . trim ( ) . split ( ' \n ' ) . map ( ( string ) => { return string . trim ( ) ; } ) ; ; let [ a , b , c ] = inputReader . readArray ( ) ; a = parseInt ( a ) ; b = parseInt ( b ) ; c = parseInt ( c ) ; let obj = { } ; obj [ a ] = obj [ a ] + 1 || 1 ; obj [ b ] = obj [ b ] + 1 || 1 ; obj [ c ] = obj [ c ] + 1 || 1 ; if ( obj [ 5 ] === 2 && obj [ 7 ] === 1 ) console . log ( ' YES ' ) ; else console . log ( " NO " ) ; } var _inputData = ' ' ; function cacheInput ( data ) { _inputData += data ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , cacheInput ) . on ( ' end ' , _main ) ; function _inputReader ( ) { function readArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) ; } function readLine ( ) { return _inputLines [ _lineNumber ++ ] ; } function readNumberArray ( ) { return _inputLines [ _lineNumber ++ ] . split ( ' ' ) . map ( val => Number ( val ) ) ; } return { readArray , readLine , readNumberArray , } }
const main = ( input ) => { let [ S , L , H , M ] = input . trim ( ) . split ( ' ' ) . map ( Number ) H = H % 12 M = M % 60 const l_angle = 360 * ( M / 60 ) const s_angle = 360 * ( H / 12 ) + ( 30 * ( M / 60 ) ) if ( Math . abs ( s_angle - l_angle === 180 ) ) return console . log ( S + L ) const dif = Math . abs ( s_angle - l_angle ) let angle = dif > 180 ? 360 - ( dif ) : dif angle = angle * Math . PI / 180 return console . log ( Math . sqrt ( ( S ** 2 ) + ( L ** 2 ) - ( 2 * S * L * Math . cos ( angle ) ) ) ) } process . env . MYTEST ? test ( ) : main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const main = ( arg ) => { const lines = arg . trim ( ) . split ( ' \n ' ) ; const A = lines [ 0 ] . split ( ' ' ) . map ( ( x ) => Number . parseInt ( x ) ) ; A . sort ( ( a , b ) => b - a ) ; console . log ( A [ 0 ] - A [ 2 ] ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( input ) => { const N = parseInt ( input ) for ( let i = 1 ; ; i ++ ) { let num = Math . pow ( 2 , i ) if ( num > N ) { console . log ( Math . pow ( 2 , i - 1 ) ) return } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var N = parseInt ( tmp [ 0 ] , 10 ) ; var D = parseInt ( tmp [ 1 ] , 10 ) ; var intInput = [ ] ; for ( var i = 1 ; i <= N ; i ++ ) { intInput [ i - 1 ] = toIntAll ( input [ i ] . split ( " " ) ) ; } var count = 0 ; for ( var i = 0 ; i < ( N - 1 ) ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var result = calcDistance ( intInput [ i ] , intInput [ j ] ) ; if ( Number . isInteger ( result ) ) { count ++ ; } } } console . log ( ' %d ' , count ) ; } function toIntAll ( input ) { var out = [ ] for ( var i = 0 ; i < input . length ; i ++ ) { out [ i ] = parseInt ( input [ i ] ) ; } return out ; } function calcDistance ( yArr , zArr ) { var sum = 0 ; for ( var i = 0 ; i < yArr . length ; i ++ ) { sum += Math . pow ( yArr [ i ] - zArr [ i ] , 2 ) ; } sum = Math . sqrt ( sum ) ; ; return sum ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( s ) { s = s . split ( " \n " ) [ 1 ] . split ( " " ) . map ( x => Number ( x ) ) ; var x = 1000 ; var y = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] < x ) { x = s [ i ] ; } if ( s [ i ] > y ) { y = s [ i ] ; } } console . log ( y - x ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function Main ( input ) { const total = input . split ( ' ' ) . map ( Number ) . reduce ( ( acc , cur ) => acc + cur , 0 ) ; const ave = Math . ceil ( total / 2 ) ; console . log ( ave ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) if ( input [ 4 ] - input [ 0 ] <= input [ 5 ] ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function main ( input ) { var foods = input . split ( / \n / ) . map ( s => ~ ~ s ) ; var lastServeIndex = 0 ; foods . reduce ( ( minSurplus , curTime , index ) => { const curSurplus = curTime % 10 ; if ( curSurplus !== 0 && minSurplus > curSurplus ) { lastServeIndex = index ; return curSurplus ; } else { return minSurplus ; } } , 10 ) ; const res = foods . reduce ( ( pre , cur , index ) => { if ( index === lastServeIndex ) { return pre + cur ; } else { return pre + Math . ceil ( cur / 10 ) * 10 ; } } , 0 ) console . log ( res ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) . map ( i => parseInt ( i , 10 ) ) ; var result = ( input [ 4 ] - input [ 0 ] > input [ 5 ] ) ? ' :( ' : ' Yay! ' ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var inputs = input . trim ( ) . split ( ' \n ' ) ; inputs = inputs [ 0 ] . split ( ' ' ) ; var A = inputs [ 0 ] - 0 ; var B = inputs [ 1 ] - 0 ; var H = inputs [ 2 ] - 0 ; var M = inputs [ 3 ] - 0 ; var minutes = 60 * H + M ; var radA = minutes / 60 * 30 ; var radB = M * 6 ; radB = radB == 0 ? 360 : radB ; if ( radA == radB ) { console . log ( Math . max ( A , B ) ) ; } else if ( radA > radB ) { var rad = ( radA - radB ) * Math . PI / 180 ; var pA = [ A , 0 ] ; var pB = [ B * Math . cos ( rad ) , B * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } else { var rad = ( radB - radA ) * Math . PI / 180 ; var pB = [ B , 0 ] ; var pA = [ A * Math . cos ( rad ) , A * Math . sin ( rad ) ] ; console . log ( Math . sqrt ( Math . pow ( pB [ 0 ] - pA [ 0 ] , 2 ) + Math . pow ( pB [ 1 ] - pA [ 1 ] , 2 ) ) ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( input ) { const args = input . split ( ' ' ) . map ( n => parseInt ( n , 10 ) ) ; const hour = ( args [ 2 ] - args [ 0 ] ) * 60 ; const minute = args [ 3 ] - args [ 1 ] ; const result = hour + minute - args [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function main ( arg ) { var arg = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) var N = arg [ 0 ] var K = arg [ 1 ] if ( K === 1 ) { console . log ( 0 ) return } console . log ( N - K ) return } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( s ) { s = s . split ( ' \n ' ) ; const n = Number ( s [ 0 ] . split ( ' ' ) [ 0 ] ) ; const m = Number ( s [ 0 ] . split ( ' ' ) [ 1 ] ) ; const a = s . slice ( 1 , 1 + n ) . map ( l => l . split ( ' ' ) ) ; const b = s . slice ( 1 + n , - 1 ) . map ( l => l . split ( ' ' ) ) ; const dx = [ ] ; const dy = [ ] ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { dx . push ( i ) ; dy . push ( j ) ; } } let ans = false ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { for ( let k = 0 , len = Math . pow ( m , 2 ) ; k < len ; k ++ ) { const ni = i + dx [ k ] ; const nj = j + dy [ k ] ; if ( ni < 0 || n <= ni ) break ; if ( nj < 0 || n <= nj ) break ; if ( a [ ni ] [ nj ] !== b [ dx [ k ] ] [ dy [ k ] ] ) break ; if ( k === ( len - 1 ) ) ans = true ; } } } console . log ( ans ? ' Yes ' : ' No ' ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; console . log ( " %d " , Math . ceil ( ( a + b ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) in put = input . split ( " " ) . map ( Number ) ; if ( input [ 0 ] <= 5 ) console . log ( 0 ) else if ( input [ 0 ] < 13 ) console . log ( input [ 1 ] / 2 ) else console . log ( input [ 1 ] ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var nxm = arr . shift ( ) . split ( " " ) . map ( Number ) ; var n = nxm [ 0 ] ; var x = nxm [ 1 ] ; var m = nxm [ 2 ] ; arr = arr . map ( function ( v ) { v = v . split ( " " ) . map ( Number ) ; return [ v [ 0 ] - 1 , v [ 1 ] - 1 , v [ 2 ] ] ; } ) ; var all = [ ] ; var loop = function ( ary ) { if ( ary . length == n ) all . push ( ary ) ; else { for ( var i = 0 ; i <= x ; i ++ ) loop ( ary . concat ( i ) ) } } ; loop ( [ ] ) ; var ans = [ - 1 ] ; var max = - 1 ; all . forEach ( function ( v ) { for ( var i = 0 ; i < m ; i ++ ) { var sum = 0 ; for ( var j = arr [ i ] [ 0 ] ; j <= arr [ i ] [ 1 ] ; j ++ ) sum += v [ j ] ; if ( sum != arr [ i ] [ 2 ] ) return ; } sum = v . reduce ( function ( a , b ) { return a + b ; } ) ; if ( sum > max ) { ans = v ; max = sum ; } } ) ; console . log ( ans . join ( " " ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function * main ( ) { const N = + ( yield ) ; const P = ( yield ) . split ( " " ) . map ( s => + s ) ; let m = 200001 , ans = 0 ; for ( let p of P ) { if ( p < m ) ans ++ ; m = Math . min ( m , p ) ; } console . log ( ans ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( " line " , line => iter . next ( line ) ) ;
function main ( input ) { const N = input ; let n = 0 ; while ( true ) { if ( Math . pow ( 2 , n ) === N ) { n -- ; break ; } else if ( Math . pow ( 2 , n ) > N ) { n -- ; break ; } else { n ++ ; } } console . log ( Math . ceil ( Math . pow ( 2 , n ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { let args = input . split ( / \n|\s / ) ; console . log ( Math . ceil ( ( args [ 0 ] * 1 + args [ 1 ] * 1 ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; for ( i = 0 ; i < input . length ; i ++ ) { tmp = input [ i ] . split ( " " ) if ( input [ i ] === ' 0 ' ) { break } var sum = 0 for ( j = 0 ; j < tmp . length ; j ++ ) { var x = parseInt ( tmp [ j ] ) sum += x } console . log ( sum ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) ; var a = input [ 0 ] - 0 ; if ( a < 2 ) console . log ( 1 ) ; else if ( a < 4 ) console . log ( 2 ) ; else if ( a < 8 ) console . log ( 4 ) ; else if ( a < 16 ) console . log ( 8 ) ; else if ( a < 32 ) console . log ( 16 ) ; else if ( a < 64 ) console . log ( 32 ) ; else if ( a < 128 ) console . log ( 64 ) ;
function Main ( input ) { input = input . split ( " \n " ) ; let tmp = input [ 0 ] . split ( ' ' ) const [ a , b , h , m ] = tmp let hangle = ( 30 * Number ( h ) + 30 * ( ( m / 60 ) . toFixed ( 15 ) ) ) * Math . PI / 180 let mangle = 6 * Number ( m ) * Math . PI / 180 let ax = Number ( a ) * Math . sin ( hangle ) . toFixed ( 20 ) let ay = Number ( a ) * Math . cos ( hangle ) . toFixed ( 20 ) let bx = Number ( b ) * Math . sin ( mangle ) . toFixed ( 20 ) let by = Number ( b ) * Math . cos ( mangle ) . toFixed ( 20 ) let cx = bx - ax let cy = by - ay let ans = cx * cx + cy * cy console . log ( Math . sqrt ( ans ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) } ) ( parseInt ( inputs [ 0 ] , 10 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; const main = arg => { console . log ( parseInt ( arg , 10 ) * parseInt ( arg , 10 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var [ h , w ] = arr . shift ( ) . split ( " " ) . map ( Number ) ; var yx = arr . map ( v => v . split ( " " ) . map ( Number ) ) ; var min = Infinity ; for ( var i = 0 ; i < h ; i ++ ) { for ( var j = 0 ; j < w ; j ++ ) { var sum = 0 ; for ( y = 0 ; y < h ; y ++ ) { for ( x = 0 ; x < w ; x ++ ) { sum += yx [ y ] [ x ] * Math . min ( Math . abs ( y - i ) , Math . abs ( x - j ) ) ; } } min = Math . min ( min , sum ) ; } } console . log ( min ) ;
" use strict " function Main ( input ) { let args = input . split ( " \n " ) ; let NM = args [ 0 ] . split ( " " ) ; let N = parseInt ( NM [ 0 ] , 10 ) ; let M = parseInt ( NM [ 1 ] , 10 ) ; args . shift ( ) ; args . pop ( ) ; let citys = args . map ( ( e , i ) => { let cityInfo = e . split ( " " ) . map ( e => parseInt ( e ) ) ; return [ i , cityInfo [ 0 ] , cityInfo [ 1 ] ] } ) ; citys . sort ( ( a , b ) => ( a [ 2 ] - b [ 2 ] ) ) ; let countryCount = Array ( N + 1 ) . fill ( 1 ) ; citys . forEach ( ( e ) => { e [ 3 ] = ( ' 000000 ' + e [ 1 ] ) . slice ( - 6 ) + ( ' 000000 ' + countryCount [ e [ 1 ] ] ) . slice ( - 6 ) ; countryCount [ e [ 1 ] ] ++ ; } ) ; citys . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] ) ) ; let result = ' ' ; citys . forEach ( e => result += ( e [ 3 ] + ' \n ' ) ) ; console . log ( result . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { const lines = input . split ( ' \n ' ) ; const c = [ ] ; for ( let i = 0 ; i < 3 ; i ++ ) { c . push ( lines [ i ] . split ( ' ' ) . map ( x => parseInt ( x ) ) ) } let result = ' Yes ' ; if ( c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ) { result = ' No ' ; } if ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] != c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] ) { result = ' No ' ; } if ( c [ 0 ] [ 0 ] + c [ 2 ] [ 2 ] != c [ 0 ] [ 2 ] + c [ 2 ] [ 0 ] ) { result = ' No ' ; } console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = parseInt ( input [ 0 ] ) ; A = new Array ( N ) ; B = new Array ( N ) ; C = new Array ( N ) ; tmpa = input [ 1 ] . split ( " " ) ; tmpb = input [ 2 ] . split ( " " ) ; list = new Array ( ) ; var s = 0 ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { A [ i ] = parseInt ( tmpa [ i ] ) ; B [ i ] = parseInt ( tmpb [ i ] ) ; if ( A [ i ] - B [ i ] > 0 ) { list . push ( A [ i ] - B [ i ] ) ; } else if ( A [ i ] - B [ i ] != 0 ) { s += Math . min ( 0 , A [ i ] - B [ i ] ) ; ans ++ ; } } s = - s ; list . sort ( function ( a , b ) { return ( b - a ) ; } ) ; var s2 = 0 ; if ( ans != 0 ) { for ( var i = 0 ; i < list . length ; i ++ ) { s2 += list [ i ] ; if ( s2 >= s ) { ans += i + 1 ; break ; } else if ( i == list . length - 1 ) { ans = - 1 ; } } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . trim ( ) . split ( " " ) . map ( ( a ) => Number ( a ) ) ; console . log ( Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var main = function main ( input ) { var K = input . split ( ' ' ) [ 0 ] ; var S = input . split ( ' ' ) [ 1 ] ; var count = 0 ; for ( var i = 0 ; i <= K ; i ++ ) { for ( var j = 0 ; j <= K ; j ++ ) { var amari = S - i - j ; if ( amari <= K && amari >= 0 ) { count ++ ; } } } console . log ( count ) ; } ; main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
' use strict ' ; function main ( stdin ) { const input = stdin . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; let ans ; if ( A < 6 ) { ans = 0 ; } else if ( A <= 12 ) { ans = B / 2 ; } else { ans = B ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( stdin => { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs , 10 ) console . log ( Math . pow ( x , 3 ) ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; rl . on ( ' line ' , function ( n ) { console . log ( n * n * n ) ; } ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const CODE_A = 97 ; let s = inputs [ 0 ] ; let K = parseInt ( inputs [ 1 ] ) ; let cur = 0 ; let result = ' ' ; let lastFailedCur = - 1 ; let lastFailedCode = - 1 ; while ( cur < s . length ) { let distance = 26 - ( s . charCodeAt ( cur ) - CODE_A ) ; if ( distance === 26 ) { result += ' a ' ; } else if ( distance <= K ) { K -= distance ; result += ' a ' ; } else { lastFailedCur = cur ; lastFailedCode = s . charCodeAt ( cur ) ; result += s [ cur ] ; } cur ++ ; } if ( K > 0 ) { K = K % 26 ; if ( lastFailedCode === - 1 ) { lastFailedCur = s . length - 1 ; lastFailedCode = result . charCodeAt ( result . length - 1 ) ; } result = result . substr ( 0 , lastFailedCur ) + String . fromCharCode ( CODE_A + ( lastFailedCode + K - CODE_A ) % 26 ) + result . substr ( lastFailedCur + 1 ) ; } console . log ( result ) ;
function main ( input ) { const args = input . split ( " \n " ) ; const aiueo = args [ 0 ] . split ( " " ) ; const N = parseInt ( aiueo [ 0 ] , 10 ) ; const D = parseInt ( aiueo [ 1 ] , 10 ) ; var arr = [ ] for ( var i = 0 ; i < N ; i ++ ) { arr [ i ] = [ ] ; var subArgs = args [ i + 1 ] . split ( " " ) for ( var j = 0 ; j < D + 1 ; j ++ ) { arr [ i ] . push ( parseInt ( subArgs [ j ] , 10 ) ) } } var kakunin = 0 ; function kyori ( arr1 , arr2 ) { var sum = 0 ; for ( var i = 0 ; i < D ; i ++ ) { sum = sum + Math . pow ( arr1 [ i ] - arr2 [ i ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( sum ) ) == true ) { return true } else { return false } } for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { if ( kyori ( arr [ i ] , arr [ j ] ) == true ) { kakunin ++ } } } console . log ( kakunin ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg [ 5 ] ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const x = Number . parseInt ( lines [ 0 ] ) ; console . log ( x * x * x ) ; } ) ;
" use strict " ; const main = ( input ) => { const n = Number ( input ) ; const y = Math . floor ( n / 15 ) * 200 ; const x = 800 * n ; return x - y ; } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
let [ a , b , c ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( a + b >= c ? " Yes " : " No " ) ;
function main ( input ) { const formatted_input = input . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; var tmp_minimum = 0 ; var result = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { result += ( formatted_input [ i ] - formatted_input [ i ] % 10 ) if ( formatted_input [ i ] % 10 != 0 ) { if ( tmp_minimum == 0 ) { tmp_minimum = formatted_input [ i ] % 10 } else { result += 10 ; tmp_minimum = Math . min ( tmp_minimum , formatted_input [ i ] % 10 ) } } } result += tmp_minimum ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function MainA ( input ) { input = input . split ( " \n " ) ; var a = input [ 0 ] ; var e = input [ 4 ] ; var k = input [ 5 ] ; var result = ( e - a > k ) ? " :( " : " Yay! " ; console . log ( ' %s ' , result ) ; } MainA ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; const arr = input . split ( ' \n ' ) ; let str = " " ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] === ' 0 ' ) break ; const num = [ ... arr [ i ] ] . map ( Number ) ; const sum = num . reduce ( ( acc , curr ) => acc + curr ) ; str += sum + ' \n ' ; } console . log ( str . trim ( ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var output = " Yay! " for ( var i = 0 ; i < input . length - 1 ; i ++ ) { for ( var j = 0 ; j < 5 ; j ++ ) { if ( Math . abs ( input [ i ] - input [ j ] ) > input [ 5 ] ) { output = " :( " ; } } } console . log ( output ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] * 800 - ( Math . floor ( a [ 0 ] / 15 ) * 200 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function main ( ) { var i = Number ( input [ 0 ] ) ; console . log ( Math . pow ( i , 3 ) ) ; }
let x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function main ( lines ) { const input = parseInt ( lines . split ( ' \n ' ) [ 0 ] , 10 ) console . log ( input * input * input ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( input ) => { var p = input . trim ( ) . split ( " \n " ) ; var ans = 0 ; var min = 10 ; for ( var i = 0 ; i < 5 ; i ++ ) { if ( p [ i ] % 10 > 0 ) { ans += Number ( p [ i ] ) + ( 10 - p [ i ] % 10 ) ; min = Math . min ( min , p [ i ] % 10 ) ; } else { ans += Math . floor ( p [ i ] ) ; } } console . log ( min == 10 ? ans : ans + min - 10 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const S = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; let answer = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { let X = i ; let Y = j ; if ( i + j > S ) continue ; if ( S - ( i + j ) <= K ) { answer ++ ; } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { let v = input . trim ( ) . split ( ' \n ' ) . map ( ( v ) => parseInt ( v ) ) ; if ( v [ 4 ] - v [ 0 ] > v [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const arr = input . split ( " " ) ; let count5 = 0 , count7 = 0 ; arr . map ( a => { if ( a == 5 ) { count5 ++ ; } else if ( a == 7 ) { count7 ++ ; } } ) ; console . log ( count5 === 2 && count7 === 1 ? ' YES ' : ' NO ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { console . log ( Math . pow ( input . trim ( ) , 3 ) ) ; } ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var p = input . trim ( ) - 0 ; console . log ( p - ( p % 500 ) ) ;
function main ( input ) { const n = parseInt ( input , 10 ) ; let total = n * 800 , get = Math . floor ( n / 15 ) * 200 ; console . log ( total - get ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / ) ; for ( let i = 0 ; i < input . length ; i ++ ) { if ( input [ i ] === ' 0 ' ) { break ; } let ans = 0 ; let num = input [ i ] . split ( ' ' ) . map ( Number ) ; for ( let j = 0 ; j < num . length ; j ++ ) { ans += num [ j ] ; } console . log ( ans ) ; }
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var t = nextstr ( ) ; t = t . replace ( / \? / g , " D " ) ; return t ; }
' use strict ' function Main ( input ) { input = input . split ( " \n " ) [ 0 ] . split ( ' ' ) . map ( str => parseInt ( str ) ) const A = input [ 0 ] const B = input [ 1 ] let result = 0 if ( A >= 13 ) { result = B } else if ( A >= 6 ) { result = B / 2 } console . log ( result ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( let i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var testValue = i ; while ( testValue >= 2 && testValue % 2 == 0 ) { divideCount += 1 ; testValue /= 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const receive = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \s / ) ; const main = input => { const N = Number ( input [ 0 ] ) ; var arr = [ ... Array ( N ) . keys ( ) ] . map ( x => ++ x ) ; var counter = 0 ; while ( arr . length > 1 ) { var arr = arr . filter ( x => x % 2 === 0 ) . map ( x => x / 2 ) ; counter ++ ; } const ans = arr [ 0 ] * Math . pow ( 2 , counter ) ; console . log ( ans ) ; } ; main ( receive ) ;
function * main ( ) { const N = parseInt ( ( yield ) , 10 ) ; const P = ( yield ) . split ( " " ) . map ( s => parseInt ( s , 10 ) ) ; let m = 200001 , ans = 0 ; for ( let p of P ) { if ( p < m ) ans ++ ; m = Math . min ( m , p ) ; } console . log ( ans ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( " line " , line => iter . next ( line ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var ans = 0 ; var maxover3 = Math . ceil ( sum / 3 ) ; var remain = 0 ; for ( var i = 0 ; i <= maxover3 ; i ++ ) { remain = sum - i ; for ( var j = i ; j <= max ; j ++ ) { var k = remain - j ; if ( k >= j && k <= max ) { if ( i === j && i === k ) { ans ++ ; } else if ( i === j || i === k || k === j ) { ans += 3 ; } else { ans += 6 ; } } } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( input * input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( cube ( x ) ) ; } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( x * x * x ) ; } ) ;
function main ( input ) { var N = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var list = input [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var ans = Number . MAX_SAFE_INTEGER ; for ( var p = 0 ; p <= 100 ; p ++ ) { var sum = 0 ; for ( var i = 0 ; i < N ; i ++ ) { sum += ( list [ i ] - p ) * ( list [ i ] - p ) ; } ans = Math . min ( ans , sum ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function Main ( input ) { tmp = input . split ( " " ) ; hHand = parseInt ( tmp [ 0 ] , 10 ) ; mHand = parseInt ( tmp [ 1 ] , 10 ) ; hours = parseInt ( tmp [ 2 ] , 10 ) ; minuts = parseInt ( tmp [ 3 ] , 10 ) ; hAngle = ( 30 * hours ) + ( 0.5 * minuts ) ; if ( hAngle == 90 ) { hoursX = hHand ; hoursY = 0 ; } else if ( hAngle == 180 ) { hoursX = 0 ; hoursY = - hHand ; } else if ( hAngle == 270 ) { hoursX = - hHand ; hoursY = 0 ; } else { hoursX = hHand * Math . sin ( hAngle * ( Math . PI / 180 ) ) ; hoursY = hHand * Math . cos ( hAngle * ( Math . PI / 180 ) ) ; } mAngle = ( 6 * minuts ) ; if ( mAngle == 90 ) { minutsX = mHand ; minutsY = 0 ; } else if ( mAngle == 180 ) { minutsX = 0 ; minutsY = - mHand ; } else if ( mAngle == 270 ) { minutsX = - mHand ; minutsY = 0 ; } else { minutsX = mHand * Math . sin ( mAngle * ( Math . PI / 180 ) ) ; minutsY = mHand * Math . cos ( mAngle * ( Math . PI / 180 ) ) ; } distance = Math . hypot ( hoursX - minutsX , hoursY - minutsY ) ; console . log ( distance ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) var [ H1 , M1 , H2 , M2 , K ] = input [ 0 ] . split ( ' ' ) . map ( Number ) var diff = ( H2 * 60 + M2 ) - ( H1 * 60 + M1 ) console . log ( diff - K )
function Main ( input ) { var inputs = input . split ( / \s / g ) . map ( function ( num ) { return parseInt ( num ) } ) ; var result = Math . min ( Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) + Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) , Math . abs ( inputs [ 1 ] - inputs [ 2 ] ) + Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) , Math . abs ( inputs [ 2 ] - inputs [ 0 ] ) + Math . abs ( inputs [ 0 ] - inputs [ 1 ] ) ) console . log ( ' %s ' , result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var c = parseInt ( tmp [ 2 ] , 10 ) ; var answer = " Yes " ; if ( a + b < c ) { answer = " No " ; } console . log ( answer ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var age = Number ( input . split ( ' ' ) [ 0 ] ) ; var price = Number ( input . split ( ' ' ) [ 1 ] ) ; if ( age <= 5 ) { console . log ( 0 ) ; } else if ( age <= 12 ) { console . log ( price / 2 ) ; } else { console . log ( price ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function main ( input ) { const RANK = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 1 ] ; const args = input . trim ( ) . split ( ' ' ) . map ( _ => parseInt ( _ , 10 ) ) ; if ( args [ 0 ] === args [ 1 ] ) console . log ( " Draw " ) ; else console . log ( RANK . indexOf ( args [ 0 ] ) < RANK . indexOf ( args [ 1 ] ) ? " Bob " : " Alice " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function setUp ( input ) { input = input . split ( " \n " ) ; a = Number ( input [ 0 ] ) ; b = Number ( input [ 1 ] ) ; c = Number ( input [ 2 ] ) ; d = Number ( input [ 3 ] ) ; e = Number ( input [ 4 ] ) ; k = Number ( input [ 5 ] ) ; list = [ a , b , c , d , e ] ; main ( ) ; } function main ( ) { var falseFlag = false ; for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( Math . abs ( list [ i ] - list [ j ] ) > k ) { falseFlag = true ; } } } console . log ( falseFlag ? ' :( ' : ' Yay! ' ) ; } setUp ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var n = Number ( input ) ; var x = 800 * n ; var y = Math . floor ( n / 15 ) * 200 ; console . log ( x - y ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const cube = v => Math . pow ( v , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( " fs " ) . readFileSync ( 0 , " utf8 " ) ; var a = input . match ( / \d+ / g ) . map ( Number ) ; var x = Math . abs ( a [ 0 ] - a [ 1 ] ) , y = Math . abs ( a [ 1 ] - a [ 2 ] ) , z = Math . abs ( a [ 2 ] - a [ 0 ] ) ; var ans = x + y + z - Math . max ( x , y , z ) ; console . log ( ans ) ;
function Picker ( input ) { var lines = input . split ( ' \n ' ) ; var fields = lines . reduce ( function ( all , line ) { return all . concat ( line . split ( ' ' ) ) ; } , [ ] ) ; var p = 0 ; return { int : function ( ) { return parseInt ( fields [ p ++ ] , 10 ) ; } , float : function ( ) { return parseFloat ( fields [ p ++ ] ) ; } , str : function ( ) { return fields [ p ++ ] ; } } ; } function Main ( input ) { var pick = Picker ( input ) ; var list = [ pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) , pick . int ( ) ] ; var mod = list . map ( function ( e ) { return ( e % 10 ? e % 10 : 10 ) - 10 ; } ) ; var minMod = mod . sort ( function ( a , b ) { return a - b ; } ) [ 0 ] ; var up = list . map ( function ( e ) { return e % 10 ? ( e - e % 10 ) + 10 : e ; } ) ; console . log ( up . reduce ( function ( p , c ) { return p + c ; } ) + minMod ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , 6 ) ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; for ( let i = 0 ; i < antennas . length ; i ++ ) { for ( let j = i + 1 ; j < antennas . length ; j ++ ) { if ( antennas [ j ] - antennas [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " function Main ( input ) { const n = Number ( input ) ; let i = 0 ; while ( true ) { if ( Math . pow ( 2 , i ) > n ) { console . log ( Math . pow ( 2 , i - 1 ) ) ; return ; } i ++ ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . trim ( ) ; const [ a , b , c , d ] = input . split ( " " ) . map ( Number ) ; if ( ( a * b ) > ( c * d ) ) { console . log ( a * b ) ; } else if ( ( a * b ) < ( c * d ) ) { console . log ( c * d ) ; } else { console . log ( a * b ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( input ) => { const args = input . split ( ' ' ) . map ( v => Number ( v ) ) const a = args [ 0 ] const b = args [ 1 ] const h = args [ 2 ] const m = args [ 3 ] const radA = ( 30.0 * h + m * 0.5 ) * Math . PI / 180.0 const radB = m * 6.0 * Math . PI / 180.0 const ax = a * Math . cos ( radA ) const ay = a * Math . sin ( radA ) const bx = b * Math . cos ( radB ) const by = b * Math . sin ( radB ) console . log ( Math . sqrt ( Math . pow ( ax - bx , 2 ) + Math . pow ( ay - by , 2 ) ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' function Main ( input ) { const Ant = input . split ( " \n " ) . map ( Number ) ; Ant . pop ( ) ; let dist = Ant [ 5 ] ; Ant . pop ( ) ; let result = true ; if ( Ant [ 4 ] - Ant [ 0 ] > dist ) { result = false ; } console . log ( result ? ' Yay! ' : ' :( ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function main ( input ) { let n = parseInt ( input [ 0 ] ) ; let x = input [ 1 ] . trim ( ) . split ( " " ) ; for ( let i = 0 ; i < x . length ; i ++ ) { x [ i ] = parseInt ( x [ i ] ) ; } x . sort ( function ( a , b ) { return b - a ; } ) ; let sum = [ ] ; for ( let i = 0 ; i < x [ 0 ] + 1 ; i ++ ) { sum [ i ] = 0 ; for ( let j = 0 ; j < x . length ; j ++ ) { sum [ i ] += Math . pow ( ( i - x [ j ] ) , 2 ) ; } } console . log ( Math . min ( ... sum ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const X = input - 0 if ( X === 0 ) { console . log ( ' 1 1 ' ) return } const dp = [ 0 ] let i = 0 while ( 1 ) { i ++ dp [ i ] = Math . pow ( i , 5 ) for ( let j = 0 ; j <= dp . length ; j ++ ) { let hit = - 1 if ( ( hit = dp . indexOf ( X - dp [ j ] ) ) !== - 1 ) { console . log ( hit + ' ' + - j ) return } if ( ( hit = dp . indexOf ( X + dp [ j ] ) ) !== - 1 ) { console . log ( hit + ' ' + j ) return } } } } ) ( input )
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let ans = cin [ 0 ] . split ( " " ) . map ( x => x == ' ? ' ? ' D ' : x ) ; console . log ( ans . join ( ' ' ) ) ; } main ( ) ;
function main ( input ) { var N = input [ 0 ] - 0 ; var list = input [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var ans = 0 ; var min = Infinity ; for ( var i = 0 ; i < N ; i ++ ) { if ( min > list [ i ] ) { min = list [ i ] ; ans ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) . trim ( ) . split ( ' \n ' ) ; console . log ( n * n * n ) ; } ) ;
" use strict " ; var print = function print ( x ) { return console . log ( x ) ; } ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , terminal : false } ) ; var A , B , C ; function solve ( A , B , C ) { if ( A + B >= C ) return true ; return false ; } rl . on ( ' line ' , function ( line ) { var ret = line . split ( ' ' ) ; A = parseInt ( ret [ 0 ] ) ; B = parseInt ( ret [ 1 ] ) ; C = parseInt ( ret [ 2 ] ) ; if ( solve ( A , B , C ) ) { print ( ' Yes ' ) ; } else { print ( ' No ' ) ; } } ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let X = + cin . shift ( ) ; let s = 0 ; while ( s <= 240 ) { for ( let a = 0 ; a <= s ; a ++ ) { let b = s - a ; let ma = - a ; let mb = - b ; if ( a ** 5 - b ** 5 == X ) { console . log ( a , b ) ; return ; } if ( a ** 5 - mb ** 5 == X ) { console . log ( a , mb ) ; return ; } if ( ma ** 5 - b ** 5 == X ) { console . log ( ma , b ) ; return ; } if ( ma ** 5 - mb ** 5 == X ) { console . log ( ma , mb ) ; return ; } } s ++ ; } } main ( ) ;
" use strict " ; const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; const A = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; const V = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; const B = parseInt ( input [ 1 ] . split ( " " ) [ 0 ] ) ; const W = parseInt ( input [ 1 ] . split ( " " ) [ 1 ] ) ; const T = parseInt ( input [ 2 ] . split ( " " ) [ 0 ] ) ; const a = T * V const b = T * W const diff = A > B ? A - B : B - A if ( diff + b <= a ) console . log ( " YES " ) else console . log ( " NO " ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " \n " ) . map ( Number ) ; console . log ( Math . pow ( input [ 0 ] , 3 ) ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var sum = A + B ; console . log ( Math . ceil ( sum / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( x * x * x ) ; } ) ;
const inputs = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( / \s+ / ) . map ( s => parseInt ( s ) ) const A = inputs [ 0 ] const B = inputs [ 1 ] const H = inputs [ 2 ] const M = inputs [ 3 ] const ratioH = ( H * 60 + M ) / ( 12 * 60 ) const ratioM = M / 60 const theta = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) const C = Math . sqrt ( A * A + B * B - 2 * A * B * Math . cos ( theta ) ) console . log ( C . toFixed ( 10 ) )
function Main ( input ) { input = new Date ( input ) . getTime ( ) ; var check = new Date ( " 2019/04/30 " ) . getTime ( ) ; console . log ( ( input <= check ) ? " Heisei " : " TBD " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \n / g ) [ 1 ] . split ( / \s / g ) ; var min = Math . min . apply ( null , input ) ; var max = Math . max . apply ( null , input ) ; console . log ( max - min ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; ( input => { const lines = input . split ( ' \n ' ) const [ N , M ] = lines [ 0 ] . split ( ' ' ) . map ( Number ) const C = [ ] for ( let i = 0 ; i < M ; i ++ ) { C [ i ] = [ ... lines [ i + 1 ] . split ( ' ' ) . map ( Number ) , i ] } C . sort ( ( a , b ) => { if ( a [ 0 ] === b [ 0 ] ) { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } else { return a [ 0 ] > b [ 0 ] ? 1 : - 1 } } ) let ans = [ ] let p = 0 let x = 0 for ( let i = 0 ; i < M ; i ++ ) { if ( p === C [ i ] [ 0 ] ) { x ++ } else { p = C [ i ] [ 0 ] x = 1 } ans . push ( [ ( ' 000000 ' + C [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + x ) . slice ( - 6 ) , C [ i ] [ 2 ] ] ) } ans . sort ( ( a , b ) => { return a [ 1 ] > b [ 1 ] ? 1 : - 1 } ) for ( let i = 0 ; i < M ; i ++ ) { ans [ i ] = ans [ i ] [ 0 ] } console . log ( ans . join ( ' \n ' ) ) } ) ( input )
function Main ( input ) { " use strict " ; const lines = input . split ( " \n " ) ; let nums = lines . map ( s => parseInt ( s , 10 ) ) ; nums . pop ( ) const k = nums . pop ( ) ; let n ; while ( true ) { n = nums . shift ( ) if ( n === undefined ) break ; if ( ! nums . every ( x => Math . abs ( n - x ) <= k ) ) { break ; } } console . log ( n === undefined ? " Yay! " : " :( " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { param = input . split ( " " ) ; var hour = param [ 2 ] - param [ 0 ] ; var min = param [ 3 ] - param [ 1 ] ; if ( min < 0 ) { hour -= 1 ; min = min * ( - 1 ) ; min = 60 - min ; } const limit = ( hour * 60 ) + min var result = limit - param [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . trim ( ) ; const a = input . split ( " " ) . map ( Number ) ; console . log ( a [ 0 ] >= 13 ? a [ 1 ] : a [ 0 ] >= 6 ? a [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( Math . pow ( x , 3 ) ) } )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; function _slicedToArray ( arr , i ) { return _arrayWithHoles ( arr ) || _iterableToArrayLimit ( arr , i ) || _nonIterableRest ( ) ; } function _nonIterableRest ( ) { throw new TypeError ( " Invalid attempt to destructure non-iterable instance " ) ; } function _iterableToArrayLimit ( arr , i ) { var _arr = [ ] ; var _n = true ; var _d = false ; var _e = undefined ; try { for ( var _i = arr [ Symbol . iterator ] ( ) , _s ; ! ( _n = ( _s = _i . next ( ) ) . done ) ; _n = true ) { _arr . push ( _s . value ) ; if ( i && _arr . length === i ) break ; } } catch ( err ) { _d = true ; _e = err ; } finally { try { if ( ! _n && _i [ " return " ] != null ) _i [ " return " ] ( ) ; } finally { if ( _d ) throw _e ; } } return _arr ; } function _arrayWithHoles ( arr ) { if ( Array . isArray ( arr ) ) return arr ; } ! function ( ) { function splitNum ( line ) { return ( Array . isArray ( line ) ? line : line . split ( / \s+ / ) ) . map ( function ( n ) { return parseInt ( n ) ; } ) ; } ! function ( input ) { var lines = input . split ( " \n " ) ; var _splitNum = splitNum ( lines [ 0 ] ) , _splitNum2 = _slicedToArray ( _splitNum , 2 ) , A = _splitNum2 [ 0 ] , B = _splitNum2 [ 1 ] ; if ( A <= 5 ) console . log ( 0 ) ; else if ( A <= 12 ) console . log ( B / 2 ) ; else console . log ( B ) ; } ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; } ( ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp1 = input [ 0 ] . split ( " " ) ; tmp2 = input [ 1 ] . split ( " " ) ; var n = parseInt ( tmp1 [ 0 ] , 10 ) ; var i = 0 ; var a = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { var r = parseInt ( tmp2 [ i ] , 10 ) ; a [ i ] = r ; } var t = 0 ; cnt = 0 ; t = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( t >= a [ i ] ) { cnt ++ ; t = a [ i ] ; } } console . log ( cnt ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( args ) { const input = args . trim ( ) . split ( " " ) ; const [ A , B , H , M ] = input ; const c = ( H / 12 + M / ( 12 * 60 ) - M / 60 ) * Math . PI * 2 ; const ans = ( A ** 2 + B ** 2 - 2 * A * B * Math . cos ( c ) ) ** 0.5 ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const S = arg [ 0 ] . split ( " " ) ; const N = S . length ; console . log ( S . map ( n => n === " ? " ? " D " : n ) . join ( " " ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; Arr . forEach ( function ( v ) { var arr = v . split ( " , " ) . map ( Number ) ; var d = arr [ 1 ] / Math . pow ( arr [ 2 ] , 2 ) ; if ( d >= 25 ) console . log ( arr [ 0 ] ) } ) ;
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var a = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var b = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; var c = input [ 0 ] . split ( " " ) [ 2 ] - 0 ; console . log ( Math . max ( a , Math . max ( b , c ) ) - Math . min ( a , Math . min ( b , c ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
( ( stdin ) => { let [ a , v , b , w , t ] = stdin . split ( / \s / ) ; [ a , v , b , w , t ] = [ + a , + v , + b , + w , + t ] ; let distance = a - b ; let speed = v - w ; let move = t * speed ; if ( b > a ) { if ( move + distance >= 0 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } else { if ( move - distance >= 0 ) { console . log ( ' YES ' ) ; } else { console . log ( ' NO ' ) ; } } } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; for ( var i = 0 ; i < Arr . length ; i ++ ) { if ( Arr [ i ] === " 0 " ) break ; var arr = ( Arr [ i ] + " " ) . split ( " " ) . map ( Number ) ; var sum = arr . reduce ( function ( a , b ) { return a + b ; } ) ; console . log ( sum ) ; }
' use strict ' const main = ( input ) => { input = input . split ( ' ' ) . map ( i => parseInt ( i ) ) const A = input [ 0 ] const B = input [ 1 ] const C = input [ 2 ] if ( A + B >= C ) { console . log ( ' Yes ' ) } else { console . log ( ' No ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( x * x * x ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) const N = Number ( inp . shift ( ) ) const X = inp [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { sum += X [ i ] } let ave = Math . round ( sum / N ) let cost = 0 for ( let i = 0 ; i < N ; i ++ ) { cost += Math . pow ( X [ i ] - ave , 2 ) } console . log ( cost ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = arg => { const S = arg . split ( " \n " ) [ 0 ] . split ( " " ) . map ( n => parseInt ( n ) ) . sort ( ) ; console . log ( S . join ( " " ) === " 557 " ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const inputList = input . split ( / \n / ) ; const oneLineList = inputList [ 0 ] . split ( / \s / ) . map ( inp => formatNum ( inp ) ) ; const N = oneLineList [ 0 ] ; const D = oneLineList [ 1 ] ; const valueList = [ ] ; for ( var i = 1 ; i <= N ; i ++ ) { valueList . push ( inputList [ i ] . split ( / \s / ) . map ( il => formatNum ( il ) ) ) ; } var listA = [ ] ; var listB = [ ] ; var count = 0 ; for ( var j = 0 ; j < valueList . length ; j ++ ) { for ( var l = j + 1 ; l < valueList . length ; l ++ ) { if ( l !== valueList . length ) { listA = valueList [ j ] ; listB = valueList [ l ] ; var calcValue = 0 ; for ( var k = 0 ; k < D ; k ++ ) { calcValue += ( listA [ k ] - listB [ k ] ) * ( listA [ k ] - listB [ k ] ) ; } var sqrtNum = Math . sqrt ( calcValue ) ; if ( Number . isInteger ( sqrtNum ) ) { count ++ } } } } console . log ( count ) ; } ; function formatNum ( str ) { return Number ( str ) ; } ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const N = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) let ans = ' NO ' if ( N . indexOf ( ' 1 ' ) >= 0 && N . indexOf ( ' 9 ' ) >= 0 && N . indexOf ( ' 7 ' ) >= 0 && N . indexOf ( ' 4 ' ) >= 0 ) { ans = ' YES ' } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var n = Number ( lines [ 0 ] ) ; var info = lines [ 1 ] . split ( ' ' ) ; var info = info . map ( function ( str ) { return Number ( str ) } ) ; var sum = 0 ; var ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += info [ i ] ; } var ave = Math . round ( sum / n ) ; for ( i = 0 ; i < n ; i ++ ) { var sa = ( info [ i ] - ave ) * ( info [ i ] - ave ) ; ans += sa } console . log ( ans ) ; } ) ;
function main ( input ) { var n , a = [ ] , tmp , size , sum = 0 , i ; n = parseInt ( input [ 0 ] , 10 ) ; tmp = input [ 1 ] . split ( " " ) ; size = tmp . length ; for ( i = 0 ; i < size ; i ++ ) { a . push ( parseInt ( tmp [ i ] , 10 ) ) ; } a . sort ( function ( self , other ) { if ( self < other ) { return - 1 ; } else if ( self > other ) { return 1 ; } else { return 0 ; } } ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { sum += a [ i + 1 ] - a [ i ] ; } console . log ( sum ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ) ;
a = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ` \n ` ; console . log ( Math . pow ( + a [ 0 ] , 3 ) ) ;
' use strict ' ; function Main ( input ) { const a = Number ( input . split ( " \n " ) [ 0 ] ) const e = Number ( input . split ( " \n " ) [ 4 ] ) const k = Number ( input . split ( " \n " ) [ 5 ] ) if ( e - a <= k ) { console . log ( " Yay! " ) } else { console . log ( " :( " ) } } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = [ ] ; for ( var f = 0 ; f <= 5 ; f ++ ) { var r = parseInt ( input [ f ] , 10 ) ; a [ f ] = r ; } var ans = a [ 4 ] - a [ 0 ] ; if ( ans > a [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var data = input . split ( " \n " ) console . log ( parseInt ( data [ 0 ] ) * parseInt ( data [ 0 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var sum = parseInt ( inputs [ 0 ] , 10 ) + parseInt ( inputs [ 1 ] , 10 ) ; if ( sum >= inputs [ 2 ] ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var an = input . split ( " \n " ) ; var k = an [ 5 ] ; an . pop ( ) ; for ( i = 0 ; i <= 4 ; i ++ ) { an [ i ] = parseInt ( an [ i ] , 10 ) ; } for ( j = 0 ; j <= 4 ; j ++ ) { for ( s = 0 ; s <= 4 ; s ++ ) { if ( j <= s ) { continue ; } else { var dist = Math . abs ( an [ j ] - an [ s ] ) ; var judge = dist <= k ; if ( judge == false ) { console . log ( " :( " ) ; break ; } if ( judge == true && j == 4 && s == 3 ) { console . log ( " Yay! " ) ; } } } if ( judge == false ) { break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const inputNumbers = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( / \s / ) . map ( Number ) ; console . log ( Math . ceil ( ( inputNumbers [ 0 ] + inputNumbers [ 1 ] ) / 2 ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const A = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const V = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; const B = parseInt ( arg [ 1 ] . split ( " " ) [ 0 ] ) ; const W = parseInt ( arg [ 1 ] . split ( " " ) [ 1 ] ) ; const T = parseInt ( arg [ 2 ] . split ( " " ) [ 0 ] ) ; if ( W >= V ) { console . log ( " NO " ) ; return ; } if ( Math . abs ( W - V ) * T < Math . abs ( A - B ) ) { console . log ( " NO " ) ; return ; } console . log ( " YES " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) . map ( ( a ) => Number ( a ) ) ; myout ( Math . max . apply ( null , list ) - Math . min . apply ( null , list ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var limit = input [ 5 ] ; var max = input [ 4 ] ; var min = input [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( ) { return + cin [ cid ++ ] ; } function nextstr ( ) { return cin [ cid ++ ] ; } function nextbig ( ) { return BigInt ( cin [ cid ++ ] ) ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextsbig ( n ) { return cin . slice ( cid , cid += n ) . map ( a => BigInt ( a ) ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) . toString ( ) ) ; function main ( ) { let A = next ( ) ; let V = next ( ) ; let B = next ( ) ; let W = next ( ) ; let T = next ( ) ; if ( A == B ) return ' YES ' ; let kyori = Math . abs ( A - B ) ; let sokudo = V - W ; if ( sokudo <= 0 ) return ' NO ' if ( kyori <= sokudo * T ) return ' YES ' return ' NO ' }
let [ a , b , c ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) . sort ( ( x , y ) => x - y ) ; console . log ( a == 5 && b == 5 && c == 7 ? " YES " : " NO " ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function add ( v ) { return v [ 0 ] + v [ 1 ] ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
" use strict " function consume ( x , p ) { return Math . pow ( ( x - p ) , 2 ) ; } function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; const N = Number ( input [ 0 ] ) ; const X = input [ 1 ] . split ( ' ' ) . map ( Number ) ; const M = X . length ; let ret = [ ] ; for ( let p = 1 ; p <= 101 ; p ++ ) { let tmp = 0 ; for ( let i = 0 ; i < M ; i ++ ) { tmp += consume ( X [ i ] , p ) ; } ret . push ( tmp ) ; } console . log ( Math . min ( ... ret ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = Number ( input [ 0 ] ) ; var X = input [ 1 ] . split ( " " ) ; X = X . map ( x => Number ( x ) ) ; X . sort ( function ( a , b ) { if ( a < b ) return - 1 ; if ( a > b ) return 1 ; return 0 ; } ) ; var totalSum = [ ] ; for ( var i = X [ 0 ] ; i <= X [ N - 1 ] ; i ++ ) { var total = X . map ( x => { return ( x - i ) * ( x - i ) ; } ) ; totalSum . push ( total . reduce ( function ( a , x ) { return a + x ; } ) ) ; } console . log ( Math . min . apply ( null , totalSum ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = i => console . log ( i . split ( ' ' ) . map ( n => parseInt ( n ) ) . map ( ( n , i , arr ) => Math . abs ( arr [ ( i + 1 ) % arr . length ] - n ) ) . sort ( ( a , b ) => a - b ) . slice ( 0 , 2 ) . reduce ( ( prev , curr ) => prev + curr , 0 ) ) main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( inputData ) { init ( inputData ) ; var a = inI ( ) ; var b = inI ( ) ; var c = inI ( ) ; out ( ( a + b >= c ) ? " Yes " : " No " ) ; } var input , inputCnt ; function debug ( ) { Main ( document . getElementById ( " input " ) . value ) ; } function init ( inputData ) { input = inputData . replace ( / \n / g , " " ) ; input = input . split ( " " ) ; inputCnt = 0 ; } const out = ( output ) => { console . log ( output ) } const outln = ( output ) => { console . log ( output + " \n " ) } const inS = ( ) => { return input [ inputCnt ++ ] } ; const inI = ( ) => { return parseInt ( inS ( ) , 10 ) } ; const inF = ( ) => { return parseFloat ( inS ( ) ) } ; Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( / + / ) ; var t1 = ( input [ 0 ] - 0 ) * 60 + ( input [ 1 ] - 0 ) ; var t2 = ( input [ 2 ] - 0 ) * 60 + ( input [ 3 ] - 0 ) ; var k = input [ 4 ] ; var ret = t2 - t1 - k ; console . log ( ' %s ' , ret <= 0 ? 0 : ret ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const BKRT = " \n " ; const SPAC = " " ; const NOSP = " " ; function Main ( input ) { input = [ ] . concat ( ... input . split ( BKRT ) . map ( a => a . split ( SPAC ) ) ) ; const strShift = ( ) => input . shift ( ) ; const intShift = ( ) => ~ ~ input . shift ( ) ; var o = [ intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) , intShift ( ) ] ; o = o . sort ( ( a , b ) => a - b ) ; return o [ 4 ] - o [ 0 ] <= intShift ( ) ? " Yay! " : " :( " } ( ( b , c , d ) => " undefined " != typeof require ? console . log ( Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) : [ b = b . split ( " \n " ) . slice ( 1 , - 1 ) . join ( " \n " ) , c = function ( ) { try { return Main ( b ) } catch ( f ) { return f . stack || f . message } } ( ) , d = typeof c , " string " == d || ( c = JSON . stringify ( c ) ) , $ ( " <form> " ) . append ( [ [ 10 , b ] , 0 , [ 1 , d ] , 0 , [ 10 , c ] ] . map ( f => $ ( f ? " <textarea> " : " <br> " , f && { rows : f [ 0 ] , cols : 40 , text : f [ 1 ] } ) ) ) . appendTo ( " body " ) ] ) ( ` ` ) ;
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code , result = " " ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; result += String . fromCharCode ( code ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; result += " a " ; } else { result += s [ j ] ; } } } console . log ( result ) ;
" use strict " ; const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; const a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; const b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; const h = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; const m = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; let angS = 360 * m / 60 let angL = 360 * 5 * h / 60 + 360 / 12 * m / 60 const diff = angS > angL ? angS - angL : angL - angS const rad = diff * Math . PI / 180 let x = Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) console . log ( x ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) . map ( n => parseInt ( n , 10 ) ) ; const a = args [ 0 ] , e = args [ 4 ] , k = args [ 5 ] ; if ( e - a <= k ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var s ; s = new Date ( input . split ( ' \n ' ) [ 0 ] ) ; if ( s <= new Date ( 2019 , 3 , 30 ) ) { console . log ( ' Heisei ' ) ; } else { console . log ( ' TBD ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) var x = parseInt ( input ) console . log ( x * x * x )
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . trim ( ) . split ( / |\n / ) , cid = 0 ; function main ( ) { let h1 = + cin . shift ( ) ; let m1 = + cin . shift ( ) ; let h2 = + cin . shift ( ) ; let m2 = + cin . shift ( ) ; let k = + cin . shift ( ) ; let d = ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ; console . log ( d ) ; } main ( ) ;
function Main ( input ) { var arr = input . split ( ' \n ' ) ; var c = [ ] ; c . push ( arr [ 0 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 1 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; c . push ( arr [ 2 ] . split ( ' ' ) . map ( a => Number ( a ) ) ) ; if ( ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 0 ] ) && ( c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 0 ] ) ) { console . log ( ' Yes ' ) ; } else { console . log ( ' No ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; nums = input [ 0 ] . split ( " / " ) ; if ( input [ 0 ] <= ' 2019/04/30 ' ) console . log ( ' Heisei ' ) ; else console . log ( ' TBD ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { const n = chunk . toString ( ) ; const a = n * n * n ; console . log ( a ) ; } ) ;
process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var D = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; input . shift ( ) ; var X = input . map ( i => i . split ( " " ) . map ( i => parseInt ( i ) ) ) ; X . splice ( N , X . length - N ) ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var sum = 0 ; for ( var k = 0 ; k < D ; k ++ ) { sum += Math . pow ( X [ j ] [ k ] - X [ i ] [ k ] , 2 ) } if ( Math . sqrt ( sum ) == Math . floor ( Math . sqrt ( sum ) ) ) { ans ++ ; } } } console . log ( ' %s ' , ans ) ; return ans ; } function debug ( n ) { var input = document . getElementById ( " input " + n ) . value ; var ans = Main ( input ) ; var result = " WA " ; if ( ans == document . getElementById ( " output " + n ) . value . split ( " \n " ) [ 0 ] ) { result = " AC " ; } document . getElementById ( " result " + n ) . innerHTML = result ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
let input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' ' ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const h = parseInt ( input [ 2 ] , 10 ) ; const m = parseInt ( input [ 3 ] , 10 ) ; const pi = Math . PI ; const arga = ( h + m / 60 ) * pi / 6 ; const argb = pi * m / 30 ; const c = ( a ** 2 + b ** 2 - 2 * a * b * Math . cos ( arga - argb ) ) ** 0.5 ; console . log ( c ) ;
function Main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( x => parseFloat ( x ) ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; var h = input [ 2 ] ; var m = input [ 3 ] ; var angle = ( ( h + m / 60.0 ) / 12.0 - m / 60.0 ) * 2.0 * Math . PI ; var cos = Math . cos ( angle ) ; var ans = Math . sqrt ( a ** 2.0 + b ** 2.0 - 2.0 * a * b * cos ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var lines = input . split ( ' \n ' ) ; var line ; while ( line = lines . shift ( ) ) { var nums = line . split ( ' ' ) . map ( function ( n ) { return + n ; } ) ; console . log ( nums [ 0 ] + nums [ 1 ] ) ; }
function Main ( input ) { input = input . trim ( ) var a = input * 800 a -= Math . floor ( input / 15 ) * 200 ; console . log ( a ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; function Main ( input ) { console . log ( " %d " , input * input * input ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const xCubic = x => x * x * x const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const n = parseInt ( inputs [ 0 ] , 10 ) console . log ( xCubic ( n ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = [ ] ; for ( var f = 0 ; f < 5 ; f ++ ) { var r = parseInt ( input [ f ] , 10 ) ; a [ f ] = r ; } var total = 0 ; var b = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { var l = Math . ceil ( a [ i ] / 10 ) * 10 ; var total = total + l ; } var mm = a [ 0 ] % 10 ; if ( mm == 0 ) { var mm = 10 ; } for ( var i = 0 ; i < 5 ; i ++ ) { var m = a [ i ] % 10 ; if ( m == 0 ) { var m = 10 ; } if ( mm > m ) { var mm = m ; } } console . log ( total - ( 10 - mm ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; if ( a > 12 ) { console . log ( b ) ; } else if ( a <= 12 && a >= 6 ) { console . log ( b / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var str = input ; var tmp = str . split ( " \n " ) ; var k = tmp [ 5 ] ; tmp . pop ( ) ; var max = Math . max . apply ( null , tmp ) ; var min = Math . min . apply ( null , tmp ) ; if ( max - min > k ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function area ( x1 , y1 , x2 , y2 , x3 , y3 ) { var ab = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) , bc = Math . sqrt ( ( x2 - x3 ) * ( x2 - x3 ) + ( y2 - y3 ) * ( y2 - y3 ) ) , ca = Math . sqrt ( ( x3 - x1 ) * ( x3 - x1 ) + ( y3 - y1 ) * ( y3 - y1 ) ) , s = 0.5 * ( ab + bc + ca ) , S = Math . sqrt ( s * ( s - ab ) * ( s - bc ) * ( s - ca ) ) ; return S ; } function inTriangle ( x1 , y1 , x2 , y2 , x3 , y3 , xp , yp ) { var abc = area ( x1 , y1 , x2 , y2 , x3 , y3 ) , abp = area ( x1 , y1 , x2 , y2 , xp , yp ) , bcp = area ( x2 , y2 , x3 , y3 , xp , yp ) , cap = area ( x3 , y3 , x1 , y1 , xp , yp ) , sub = abc - ( abp + bcp + cap ) ; return Math . abs ( sub ) <= 0.01 ; } function main ( ) { input . forEach ( function ( line ) { if ( line . trim ( ) === ' ' ) return ; console . log ( inTriangle . apply ( null , line . split ( ' ' ) . map ( parseFloat ) ) ? ' YES ' : ' NO ' ) ; } ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( ) ; } ) ;
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const N = parseInt ( input [ 0 ] ) ; const x = N * 800 ; const y = Math . floor ( N / 15 ) * 200 ; console . log ( x - y ) ;
function Main ( input ) { a = input . split ( ' ' ) [ 0 ] * 1 b = input . split ( ' ' ) [ 1 ] * 1 ans = 0 if ( a >= 13 ) { ans = b } else if ( a >= 6 ) { ans = b / 2 } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( ) { var input = getInput ( ) ; var num = parseInt ( input ) ; console . log ( num * num * num ) ; } function getInput ( ) { if ( typeof require == " undefined " ) { return document . getElementById ( ' input ' ) . value ; } return require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' ) . toString ( ) ; } if ( typeof require != " undefined " ) { main ( ) ; }
function Main ( input ) { var input_arr = input . split ( " \n " ) ; var s = input_arr [ 0 ] ; if ( s <= " 2019/04/30 " ) { console . log ( " Heisei " ) } else { console . log ( " TBD " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; var sum = 0 ; for ( i = 0 ; i < xs . length ; i ++ ) { sum += xs [ i ] ; } console . log ( Math . ceil ( sum / xs . length ) ) ; } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( ' ' ) ; var k = parseInt ( lines [ 0 ] ) ; var s = parseInt ( lines [ 1 ] ) ; var value = 0 ; for ( var x = 0 ; x <= k ; x ++ ) { for ( var y = 0 ; y <= k ; y ++ ) { var z = s - x - y ; if ( z <= k && z >= 0 ) { ++ value ; } else { value = value + 0 ; } } } console . log ( value ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var S = input [ 0 ] . split ( " / " ) ; var ans = " Heisei " ; if ( parseInt ( S [ 0 ] ) >= 2020 || ( parseInt ( S [ 0 ] ) >= 2019 && parseInt ( S [ 1 ] ) >= 5 ) ) { ans = " TBD " ; } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; nm = input [ 0 ] . split ( " " ) ; n = parseInt ( nm [ 0 ] ) ; m = parseInt ( nm [ 1 ] ) ; t = [ ] ; for ( var i = 0 ; i < m ; i ++ ) { r = [ ] ; for ( var j = 0 ; j < m ; j ++ ) { r . push ( input [ i + 1 + n ] [ j ] ) ; } t . push ( r ) ; } yes = false ; loop0 : for ( var i = 0 ; i < n - m + 1 ; i ++ ) { for ( var j = 0 ; j < n - m + 1 ; j ++ ) { loop1 : for ( var k = 0 ; k < m ; k ++ ) { for ( var l = 0 ; l < m ; l ++ ) { if ( input [ i + 1 + k ] [ j + l ] != t [ k ] [ l ] ) { break loop1 ; } } if ( k == m - 1 ) { yes = true ; break loop0 ; } } } } if ( yes ) { console . log ( " Yes " ) ; } else { console . log ( " No " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) const tasks = input [ 0 ] . split ( ' ' ) . map ( x => parseInt ( x ) ) . sort ( ( a , b ) => a - b ) console . log ( Math . abs ( tasks [ 0 ] - tasks [ 1 ] ) + Math . abs ( tasks [ 1 ] - tasks [ 2 ] ) ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
" use strict " ; const main = arg => { var lines = arg . split ( ' \n ' ) ; var firstLine = lines . shift ( ) . split ( ' ' ) . map ( function ( n ) { return + n ; } ) ; var H1 = firstLine [ 0 ] * 60 ; var first = H1 + firstLine [ 1 ] ; var H2 = firstLine [ 2 ] * 60 ; var Second = H2 + firstLine [ 3 ] ; var K = firstLine [ 4 ] ; if ( first < Second ) { console . log ( Second - first - K ) ; } else { var today = 3600 - first ; console . log ( Second + today - K ) ; } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { input = input . split ( ' / ' ) ; var ms = Date . parse ( ` ${ input [ 0 ] } ${ input [ 1 ] } ${ input [ 2 ] } ` ) ; if ( ms < 1556636400000 ) { return console . log ( ' Heisei ' ) ; } else { return console . log ( ' TBD ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var input = input . replace ( / \n / g , ' ' ) . split ( / \s+ / g ) . join ( ) ; var five , seven ; if ( ( / 5 / ) . test ( input ) && ( / 7 / ) . test ( input ) ) { five = input . match ( / 5 / g ) . length ; seven = input . match ( / 7 / g ) . length ; } if ( five == 2 && seven == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; ( function ( x ) { console . log ( Math . pow ( x , 3 ) ) ; } ( parseInt ( inputs . trim ( ) , 10 ) ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = parseInt ( stdin , 10 ) ; console . log ( x * x * x ) ;
var log = console . log ; if ( typeof process != " undefined " ) { var input = " " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { var lines = input . split ( " \n " ) ; main ( lines ) ; } ) ; } function main ( lines ) { lines = lines . map ( function ( line ) { return line . split ( " " ) . filter ( function ( e ) { return e != " " ; } ) . map ( function ( e ) { var n = Number ( e ) ; if ( n . toString ( ) == " NaN " ) { return e . replace ( / (\r)|(\n) / g , " " ) ; } return n ; } ) ; } ) ; var last = lines . pop ( ) ; if ( last . length == 8 ) { lines . push ( last ) ; } while ( lines . length > 0 ) { var dataset = lines . shift ( ) ; p_set ( dataset ) ; } } function p_set ( ps ) { var va = [ ps [ 0 ] - ps [ 6 ] , ps [ 1 ] - ps [ 7 ] ] ; var vb = [ ps [ 2 ] - ps [ 6 ] , ps [ 3 ] - ps [ 7 ] ] ; var vc = [ ps [ 4 ] - ps [ 6 ] , ps [ 5 ] - ps [ 7 ] ] ; var s1 = sign_s_main ( va , vb ) > 0 ? 1 : - 1 ; var s2 = sign_s_main ( vb , vc ) > 0 ? 1 : - 1 ; var s3 = sign_s_main ( vc , va ) > 0 ? 1 : - 1 ; if ( s1 == s2 && s2 == s3 && s3 == s1 ) { log ( " YES " ) ; } else { log ( " NO " ) ; } } function sign_s_main ( pa , pb ) { return ( pa [ 0 ] * pb [ 1 ] - pa [ 1 ] * pb [ 0 ] ) ; }
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const X = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = Number . MAX_SAFE_INTEGER for ( let i = 1 ; i <= 100 ; i ++ ) { let sum = 0 for ( let j = 0 ; j < N ; j ++ ) { sum += Math . pow ( X [ j ] - i , 2 ) } if ( sum < min ) min = sum } console . log ( min ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) ; console . log ( Math . pow ( x , 3 ) )
function main ( input ) { const args = input . split ( ' ' ) ; const K = parseInt ( args [ 0 ] , 10 ) ; const S = parseInt ( args [ 1 ] , 10 ) ; let count = 0 ; for ( let x = 0 ; x <= K ; x ++ ) { for ( let y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( 0 <= z && z <= K ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const Main = ( ) => { const N = nextInt ( ) const P = nextIntArray ( ) let min = P [ 0 ] let cnt = 0 for ( let el of P ) { if ( el <= min ) { cnt ++ } min = Math . min ( min , el ) } console . log ( cnt ) } Main ( )
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) . map ( v => v . split ( ' ' ) ) const N = parseInt ( input [ 0 ] [ 0 ] , 10 ) const D = parseInt ( input [ 0 ] [ 1 ] , 10 ) const p = input . slice ( 1 ) let count = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let sum = 0 for ( let k = 0 ; k < D ; k ++ ) { sum += Math . pow ( p [ i ] [ k ] - p [ j ] [ k ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( sum ) ) ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { const n = input . split ( " " ) . map ( Number ) ; let a = n * 800 ; let b = Math . floor ( n / 15 ) * 200 ; console . log ( a - b ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var A = input [ 0 ] ; var B = input [ 1 ] ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) . map ( inp => parseInt ( inp , 10 ) ) ; console . log ( Math . ceil ( ( input [ 0 ] + input [ 1 ] ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var v = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { v [ i ] = Number ( lines [ i ] ) ; } var result = 0 ; var hoge = 0 ; var max = Infinity ; for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = 1 ; j < 10 ; j ++ ) { if ( v [ i ] % 10 === 0 ) { break ; } if ( ( v [ i ] - j ) % 10 === 0 ) { if ( j < max ) { max = j ; hoge = i ; } } } } for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = 1 ; j < 10 ; j ++ ) { if ( v [ i ] % 10 === 0 ) { result += v [ i ] ; break ; } if ( i === hoge ) { result += v [ i ] ; break ; } if ( ( v [ i ] - j ) % 10 === 0 ) { result += v [ i ] + 10 - j ; break ; } } } console . log ( result ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; argv = input [ 0 ] . split ( " " ) ; var A = parseInt ( argv [ 0 ] ) ; var B = parseInt ( argv [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var n = Number ( input ) var ans = 1 ; while ( ans <= n ) { ans *= 2 ; } ans /= 2 ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " function main ( arg ) { let data = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) for ( let i = 0 ; i < data . length ; i ++ ) { if ( data [ i ] !== ' ? ' ) continue if ( data [ i ] === ' ? ' ) { data [ i ] = ' D ' } if ( data [ i ] === ' ? ' ) { data [ i ] = ' D ' } } data = data . join ( " " ) console . log ( data ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const N = parseInt ( input [ 0 ] ) ; const X = input [ 1 ] . split ( " " ) . map ( v => parseInt ( v ) ) ; t = X . reduce ( ( p , c ) => p + c ) ; av = Math . round ( t / N ) ; total = 0 ; X . forEach ( v => { total += Math . pow ( v - av , 2 ) ; } ) ; console . log ( total ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines = Number ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { console . log ( lines * lines * lines ) ; } ) ;
function main ( arg ) { var tmp = arg . split ( " \n " ) [ 0 ] tmp = tmp . split ( " " ) tmp = tmp . map ( e => Number ( e ) ) tmp . sort ( ) tmp = tmp . join ( " " ) if ( tmp === " 1479 " ) { console . log ( " YES " ) } else { console . log ( " NO " ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var str = input . split ( " " ) ; var fee ; if ( 13 <= str [ 0 ] ) { fee = str [ 1 ] ; } else if ( 6 <= str [ 0 ] && str [ 0 ] < 13 ) { fee = str [ 1 ] / 2 ; } else { fee = 0 ; } console . log ( fee ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; tmp = input [ 0 ] . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var s = ( a + b ) / 2 ; console . log ( ' %d ' , Math . ceil ( s ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const r = INPUT . split ( ' \n ' ) [ 0 ] console . log ( r * r ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( x , 3 ) ) ;
const r = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( r * r ) ;
function main ( input ) { var a = input [ 0 ] . split ( " " ) [ 0 ] - 0 ; var b = input [ 0 ] . split ( " " ) [ 1 ] - 0 ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function Main ( input ) { input = input . split ( " \n " ) . map ( Number ) ; var max = 0 ; input . forEach ( function ( val ) { if ( max < ( 10 - ( ( val - 0.1 ) % 10 ) ) - 0.1 ) max = 10 - ( ( val - 0.1 ) % 10 ) - 0.1 ; } ) ; var sum = 0 ; input . forEach ( function ( val ) { sum += Math . ceil ( val / 10 ) * 10 ; } ) ; console . log ( sum - max ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = input . trim ( ) - 0 ; var time = 12 * 60 / 360 * x ; var h = ( time - time % 60 ) / 60 ; var m = time % 60 ; console . log ( h + " " + m ) ;
function main ( input ) { const date = new Date ( input ) ; if ( date <= new Date ( ' 2019/4/30 ' ) ) { console . log ( ' Heisei ' ) } else { console . log ( ' TBD ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] ) ; for ( let h = 1 ; h <= 3500 ; h ++ ) { for ( let n = 1 ; n <= 3500 ; n ++ ) { let w = ( N * h * n ) / ( 4 * h * n - N * n - N * h ) ; if ( w % 1 === 0 && w > 0 ) { console . log ( h + " " + n + " " + w ) ; return ; } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { let at = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let k = at [ 5 ] ; let d = at [ 4 ] - at [ 0 ] ; console . log ( ( d > k ) ? ' :( ' : ' Yay! ' ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) const [ num , array ] = input . split ( ' \n ' ) const newArray = array . split ( ' ' ) . map ( ( num ) => + num ) const distance = Math . max ( ... newArray ) - Math . min ( ... newArray ) console . log ( distance )
" use strict " ; ( function ( input ) { input = input . trim ( ) ; input = input . split ( / \n / ) . map ( str => str . split ( / \s+ / ) . map ( x => x - 0 ) ) ; const N = input [ 0 ] [ 0 ] , D = input [ 0 ] [ 1 ] ; let ans = 0 ; for ( let i = 1 ; i <= N ; i ++ ) { for ( let j = i + 1 ; j <= N ; j ++ ) { let dsquare = 0 , d = 0 ; for ( let k = 0 ; k < D ; k ++ ) { dsquare += ( input [ i ] [ k ] - input [ j ] [ k ] ) * ( input [ i ] [ k ] - input [ j ] [ k ] ) ; } d = Math . sqrt ( dsquare ) ; if ( Math . abs ( d - Math . round ( d ) ) < 0.00000001 ) ans ++ ; } } console . log ( ans ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; process . stdin . on ( ' data ' , function ( chunk ) { var inputs = chunk . toString ( ) ; var x = Number ( inputs ) ; console . log ( Math . pow ( x , 3 ) ) ; } ) ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ;
function Main ( n ) { console . log ( ( n == " 5 5 7 " || n == " 5 7 5 " || n == " 7 5 5 " ) ? " YES " : " NO " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
function main ( input ) { var line = input [ 0 ] . split ( ' ' ) . sort ( ) ; console . log ( line . join ( ' ' ) === ' 1479 ' ? ' YES ' : ' NO ' ) ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
var readStream = require ( ' fs ' ) . ReadStream ( ' /dev/stdin ' ) ; var readlineInterface = require ( ' readline ' ) . createInterface ( { input : readStream , output : { } } ) ; readlineInterface . on ( ' line ' , function ( line ) { var n = parseFloat ( line ) ; console . log ( n * n * n ) ; } ) ;
function Main ( input ) { input = input . trim ( ) ; input = input . split ( " " ) var a = input [ 0 ] var b = input [ 1 ] var h = input [ 2 ] var m = input [ 3 ] var c = h * 30 + m * 30 / 60 ; var d = m * 6 ; if ( Math . abs ( c - d ) < 180 ) { var theta = Math . abs ( c - d ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } else { var theta = ( 360 - Math . abs ( c - d ) ) / 180 * Math . PI ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( theta ) ) ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var abhm = lines [ 0 ] . split ( ' ' ) ; var a = Number ( abhm [ 0 ] ) ; var b = Number ( abhm [ 1 ] ) ; var h = Number ( abhm [ 2 ] ) ; var m = Number ( abhm [ 3 ] ) ; var hkaku = h * 30 + m * 0.5 ; var mkaku = m * 6 ; var kaku = Math . abs ( hkaku - mkaku ) ; var kaku2 = 360 - Math . abs ( hkaku - mkaku ) ; kaku = Math . min ( kaku2 , kaku ) ; kaku = Math . cos ( kaku * ( Math . PI / 180 ) ) ; var ans = ( a * a ) + ( b * b ) - ( 2 * a * b * kaku ) ; console . log ( Math . sqrt ( ans ) ) ; } ) ;
function Main ( s ) { var s = s . split ( " \n " ) ; var s = [ s [ 0 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 1 ] . split ( " " ) . map ( e => Number ( e ) ) , s [ 2 ] . split ( " " ) . map ( e => Number ( e ) ) ] ; var t , cnt , a2 , a3 , b1 , b2 , b3 ; for ( var a1 = 0 ; a1 <= s [ 0 ] [ 0 ] ; a1 ++ ) { cnt = 0 ; b1 = s [ 0 ] [ 0 ] - a1 ; b2 = s [ 0 ] [ 1 ] - a1 ; b3 = s [ 0 ] [ 2 ] - a1 ; a2 = s [ 1 ] [ 0 ] - b1 ; a3 = s [ 2 ] [ 0 ] - b1 ; t = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] ; for ( var i = 0 ; i < 3 ; i ++ ) { for ( var j = 0 ; j < 3 ; j ++ ) { if ( s [ i ] [ j ] === t [ i ] [ j ] ) cnt ++ ; } } if ( cnt === 9 ) { console . log ( " Yes " ) ; return ; } } console . log ( " No " ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 === 2 && count7 === 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { let at = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let k = at [ 5 ] ; for ( let n = 0 ; n < 4 ; n ++ ) { for ( let m = n + 1 ; m < 5 ; m ++ ) { let d = at [ m ] - at [ n ] ; if ( d > k ) { console . log ( ' :( ' ) ; return ; } } } console . log ( ' Yay! ' ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) . split ( ' \n ' ) const r = parseInt ( input [ 0 ] ) console . log ( r * r )
" use strict " ; ( inp => { inp = inp . split ( " " ) ; console . log ( Math . ceil ( ( + inp [ 0 ] + + inp [ 1 ] ) / 2 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " const create = ( ) => { const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; const res = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return this . index < this . max } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { throw " ArrayIndexOutOfBoundsException " ; } else { return this . list [ this . index ++ ] ; } } } ; return res ; } const o = create ( ) ; const next = ( ) => o . next ( ) const nextInt = ( ) => parseInt ( o . next ( ) ) const nextStrArray = ( ) => o . next ( ) . split ( " " ) const nextIntArray = ( ) => o . next ( ) . split ( " " ) . map ( el => parseInt ( el ) ) const nextCharArray = ( ) => o . next ( ) . split ( " " ) const hasNext = ( ) => o . hasNext ( ) const myout = ( ... x ) => console . log ( ... x ) const maxTime = ( x ) => Math . ceil ( x / 10 ) * 10 const remainTime = ( x ) => maxTime ( x ) - x const Main = ( ) => { let total = 0 let a = nextInt ( ) let b = nextInt ( ) let c = nextInt ( ) let d = nextInt ( ) let e = nextInt ( ) total = maxTime ( a ) + maxTime ( b ) + maxTime ( c ) + maxTime ( d ) + maxTime ( e ) total -= Math . max ( remainTime ( a ) , remainTime ( b ) , remainTime ( c ) , remainTime ( d ) , remainTime ( e ) ) console . log ( total ) } Main ( )
function Main ( input ) { input = input . split ( " \n " ) ; const numList = input . map ( x => x . split ( " " ) . map ( x => parseInt ( x , 10 ) ) [ 0 ] ) ; var minHasuu = 10 ; var totalTime = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { var num = numList [ i ] ; var hasuu = num % 10 ; if ( hasuu !== 0 ) { minHasuu = Math . min ( minHasuu , hasuu ) ; num += 10 ; } totalTime += num - hasuu ; } totalTime += minHasuu ; totalTime -= 10 ; console . log ( totalTime ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) a = Number ( input [ 0 ] ) b = Number ( input [ 1 ] ) c = Number ( input [ 2 ] ) d = Number ( input [ 3 ] ) e = Number ( input [ 4 ] ) k = Number ( input [ 5 ] ) if ( ( ( b - a ) > k ) || ( ( c - a ) > k ) || ( ( d - a ) > k ) || ( ( e - a ) > k ) || ( ( c - b ) > k ) || ( ( d - b ) > k ) || ( ( e - b ) > k ) || ( ( d - c ) > k ) || ( ( e - c ) > k ) || ( ( e - d ) > k ) ) { console . log ( " :( " ) } else { console . log ( " Yay! " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const receive = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / / ) ; const main = input => { const A = input . map ( x => Number ( x ) ) ; const arr = A . sort ( ( x , y ) => y - x ) ; const ans = arr [ 0 ] - arr [ 2 ] ; console . log ( ans ) ; } ; main ( receive ) ;
" use strict " function Main ( input ) { input = input . split ( " / " ) ; if ( parseInt ( input [ 1 ] ) <= 4 ) console . log ( " Heisei " ) ; else console . log ( " TBD " ) ; } Main ( require ( ' fs ' ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
console . log ( function ( args ) { const [ [ A , V ] , [ B , W ] , [ T ] ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( BigInt ) ) ; if ( A < B ) return ( T * V + A >= T * W + B ) ? ' YES ' : ' NO ' ; else return ( A - T * V <= B - T * W ) ? ' YES ' : ' NO ' ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
console . log ( ( args => { const c = args . trim ( ) . split ` \n ` . map ( r => r . split ` ` . map ( v => v | 0 ) ) ; for ( let i = 1 ; i < 3 ; i ++ ) { for ( let j = 1 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] - c [ i ] [ j - 1 ] !== c [ i - 1 ] [ j ] - c [ i - 1 ] [ j - 1 ] ) return ' No ' ; if ( c [ j ] [ i ] - c [ j ] [ i - 1 ] !== c [ j - 1 ] [ i ] - c [ j - 1 ] [ i - 1 ] ) return ' No ' ; } } return ' Yes ' ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var n = arr . shift ( ) - 0 ; var a = arr . shift ( ) . split ( " " ) . map ( Number ) ; var q = arr . shift ( ) - 0 ; for ( var i = 0 ; i < q ; i ++ ) { var [ b , e , t ] = arr [ i ] . split ( " " ) . map ( Number ) ; var k = e - b ; for ( var j = 0 ; j < k ; j ++ ) { [ a [ b + j ] , a [ t + j ] ] = [ a [ t + j ] , a [ b + j ] ] ; } } console . log ( a . join ( " " ) ) ;
function Main ( input ) { input = input . split ( ' \n ' ) ; var last = input . length - 1 ; var limit ; var max ; if ( input [ last ] === " " ) { limit = input [ last - 1 ] ; max = input [ last - 2 ] ; } else { limit = input [ last ] ; max = input [ last - 1 ] ; } var min = input [ 0 ] ; var maxDistance = max - min ; if ( maxDistance > limit ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var lines = [ ] ; var readline = require ( " readline " ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var date = lines [ 0 ] . split ( " / " ) ; var year = Number ( date [ 0 ] ) ; var month = Number ( date [ 1 ] ) ; var day = Number ( date [ 2 ] ) ; if ( year <= 2019 && month <= 4 ) { console . log ( " Heisei " ) ; } else if ( year < 2019 ) { console . log ( " Heisei " ) ; } else { console . log ( " TBD " ) ; } } ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var c = lines . map ( i => i . split ( " " ) . map ( i => Number ( i ) ) ) ; for ( var a1 = 0 ; a1 <= 100 ; a1 ++ ) { var b1 = c [ 0 ] [ 0 ] - a1 var b2 = c [ 1 ] [ 0 ] - a1 var b3 = c [ 2 ] [ 0 ] - a1 for ( var a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) { continue } if ( a2 + b2 !== c [ 1 ] [ 1 ] ) { continue } if ( a2 + b3 !== c [ 2 ] [ 1 ] ) { continue } for ( var a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) { continue } if ( a3 + b2 !== c [ 1 ] [ 2 ] ) { continue } if ( a3 + b3 !== c [ 2 ] [ 2 ] ) { continue } console . log ( " Yes " ) ; return ( 0 ) } } } console . log ( " No " ) } ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const cookT = input . split ( " \n " ) . map ( Number ) ; cookT . pop ( ) ; let hitoketa = 10 ; for ( let i = 0 ; i < 5 ; i ++ ) { let num = cookT [ i ] % 10 ; if ( num !== 0 && hitoketa > num ) { hitoketa = num ; } } let result = 0 ; for ( let i = 0 ; i < 5 ; i ++ ) { result += Math . ceil ( cookT [ i ] / 10 ) * 10 ; } result = result - 10 + hitoketa ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( num => Number ( num ) ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; if ( a === 1 ) { a = 14 ; } if ( b === 1 ) { b = 14 ; } if ( a > b ) { console . log ( ' Alice ' ) } else if ( b > a ) { console . log ( ' Bob ' ) } else { console . log ( ' Draw ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const x = BigInt ( input [ 0 ] ) ; let power5 = [ ] ; const width = ( ( x < 100 ) ? x : 1000 ) ; for ( let i = - width ; i < width ; i ++ ) { power5 [ i + width ] = BigInt ( i * i * i * i * i ) ; } let judge = false ; for ( let i = - width ; i < width ; i ++ ) { for ( let j = - width ; j < width ; j ++ ) { if ( ( power5 [ i + width ] - power5 [ j + width ] ) === x ) { console . log ( i + " " + j ) ; judge = true ; break ; } } if ( judge ) { break ; } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
' use strict ' ; let lines = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) ; const N = + lines [ 0 ] ; if ( N == 1 ) { console . log ( 0 ) ; process . exit ( ) ; } const as = lines [ 1 ] . split ( ' ' ) . sort ( ) ; console . log ( as . pop ( ) - as . shift ( ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; x = input [ 1 ] . split ( " " ) . map ( x => Number ( x ) ) ; var total = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { total += x [ i ] ; } var p = Math . round ( total / x . length ) ; var ans = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { ans += Math . abs ( Math . pow ( ( x [ i ] - p ) , 2 ) ) ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var lines = chunk . toString ( ) . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] ; var A = a . split ( " " ) ; var min = A [ 0 ] ; var max = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { min = Math . min ( min , A [ i ] ) ; } for ( i = 0 ; i < N ; i ++ ) { max = Math . max ( max , A [ i ] ) ; } var ans = max - min ; console . log ( ans ) ; } ) ;
let input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; let Arr = ( input . trim ( ) ) . split ( " \n " ) ; let bmis = new Map ( ) while ( 1 ) { let n = Arr [ 0 ] ; if ( n == 0 ) break ; Arr . shift ( ) ; for ( var i = 0 ; i < n ; ++ i ) { var nums = Arr [ 0 ] . split ( " " ) . map ( Number ) ; var m = nums [ 1 ] / 100 var bmi = nums [ 2 ] / ( m * m ) ; var dif = Math . abs ( 22 - bmi ) bmis . set ( nums [ 0 ] . toString ( ) , dif ) ; Arr . shift ( ) ; } let sorted = new Map ( [ ... bmis . entries ( ) ] . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ) ; console . log ( sorted . keys ( ) . next ( ) . value ) ; }
function Main ( input ) { const lines = input . split ( " \n " ) ; const params = lines [ 0 ] . split ( " " ) ; var a = parseInt ( params [ 0 ] , 10 ) ; var b = parseInt ( params [ 1 ] , 10 ) ; const result = ( a > 12 ) ? b : ( a > 5 ) ? b / 2 : 0 ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( function ( input ) { var p = input . split ( ' \n ' ) ; for ( var i = 0 ; i < p . length ; i ++ ) { var x = p [ i ] ; if ( x == 0 ) { return ; } console . log ( x . split ( ' ' ) . reduce ( function ( a , b ) { return Number ( a ) + Number ( b ) ; } ) ) ; } } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { param = input . split ( " " ) ; var hour = param [ 2 ] - param [ 0 ] ; var min = param [ 3 ] - param [ 1 ] ; if ( min < 0 ) { hour -= 1 ; min = min * ( - 1 ) ; min = 60 - min ; } const limit = ( hour * 60 ) + min var result = limit - param [ 4 ] ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var data = input . split ( " \n " ) ; console . log ( Math . ceil ( data [ 0 ] / 10 ) * 10 + Math . ceil ( data [ 1 ] / 10 ) * 10 + Math . ceil ( data [ 2 ] / 10 ) * 10 + Math . ceil ( data [ 3 ] / 10 ) * 10 + Math . ceil ( data [ 4 ] / 10 ) * 10 + Math . min ( ( data [ 0 ] - 1 ) % 10 + 1 , ( data [ 1 ] - 1 ) % 10 + 1 , ( data [ 2 ] - 1 ) % 10 + 1 , ( data [ 3 ] - 1 ) % 10 + 1 , ( data [ 4 ] - 1 ) % 10 + 1 ) - 10 ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { abcde = input . split ( ' \n ' ) ; a = parseInt ( abcde [ 0 ] . trim ( ) ) ; e = parseInt ( abcde [ 4 ] . trim ( ) ) ; k = parseInt ( abcde [ 5 ] . trim ( ) ) ; console . log ( ( e - a ) > k ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
" use strict " ; function Main ( input ) { let A = input . split ( " \n " ) . map ( ( v ) => v - 0 ) ; let B = new Array ( 5 ) ; for ( let n = 0 ; n < 5 ; n ++ ) { let r = A [ n ] % 10 ; B [ n ] = [ A [ n ] , ( r ) ? 10 - r : 0 ] ; } B . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; let ans = 0 ; for ( let n = 0 ; n < 5 ; n ++ ) { ans += B [ n ] [ 0 ] + ( ( n < 4 ) ? B [ n ] [ 1 ] : 0 ) ; } console . log ( ans ) ; } if ( typeof window === ' undefined ' ) Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var list = input . split ( " \n " ) . map ( s => parseInt ( s , 10 ) ) ; var ans = 0 ; var last = 10 ; for ( i = 0 ; i < 5 ; i ++ ) { ans += Math . ceil ( list [ i ] / 10 ) ; if ( last > ( list [ i ] - 1 ) % 10 ) last = ( list [ i ] - 1 ) % 10 ; } console . log ( ans * 10 - 9 + last ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] ) ; let p = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let k = input [ i + 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; p [ i ] = { x : k [ 0 ] , y : k [ 1 ] } ; } let distanceSum = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { distanceSum += Math . sqrt ( Math . pow ( p [ i ] . x - p [ j ] . x , 2 ) + Math . pow ( p [ i ] . y - p [ j ] . y , 2 ) ) ; } } console . log ( distanceSum / n * 2 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const A = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const B = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( 13 > A && A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var ab = input . split ( " " ) ; ab [ 0 ] = parseInt ( ab [ 0 ] ) ; ab [ 0 ] = parseInt ( ab [ 0 ] ) ; if ( ab [ 0 ] == 1 ) { ab [ 0 ] = 14 ; } if ( ab [ 1 ] == 1 ) { ab [ 1 ] = 14 ; } if ( ab [ 0 ] > ab [ 1 ] ) { process . stdout . write ( " Alice " ) ; } else if ( ab [ 0 ] < ab [ 1 ] ) { process . stdout . write ( " Bob " ) ; } else { process . stdout . write ( " Draw " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var a , b ; a = Number ( input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) [ 0 ] ) ; b = Number ( input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) [ 1 ] ) ; if ( a < 6 ) { console . log ( 0 ) ; } else if ( a < 13 ) { console . log ( b / 2 ) ; } else { console . log ( b ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " \n " ) ; var n = arr . shift ( ) - 0 ; var s = arr . shift ( ) . split ( " " ) ; var [ a , b ] = [ 0 , 0 ] ; s . forEach ( v => { if ( " ABCDEFGHIJKLM " . includes ( v ) ) a += 1 else if ( " NOPQRSTUVWXYZ " . includes ( v ) ) a -= 1 else if ( " abcdefghijklm " . includes ( v ) ) b += 1 else if ( " nopqrstuvwxyz " . includes ( v ) ) b -= 1 } ) ; str = " " ; if ( a > 0 ) str += " A " . repeat ( a ) ; else if ( a < 0 ) str += " N " . repeat ( a * - 1 ) ; if ( b > 0 ) str += " a " . repeat ( b ) ; else if ( b < 0 ) str += " n " . repeat ( b * - 1 ) ; console . log ( str . length ) ; console . log ( str ) ;
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , data => { console . log ( data * data * data ) ; } ) ;
var lines = [ ] ; var result = [ ] ; var readline = require ( " readline " ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var N = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var M = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; lines . shift ( ) ; var array = lines . map ( value => value . split ( " " ) . map ( value => Number ( value ) ) ) ; for ( var i = 0 ; i < M ; i ++ ) { array [ i ] . push ( i ) ; } var city = array . concat ( ) . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; ite = Array ( N + 1 ) . fill ( 0 ) ; for ( var i = 0 ; i < M ; i ++ ) { var ken = city [ i ] [ 0 ] . toString ( ) ; var shi = ( ite [ city [ i ] [ 0 ] ] + 1 ) . toString ( ) ; len = ken . length for ( var x = 0 ; x < 6 - len ; x ++ ) { ken = " 0 " + ken ; } len = shi . length for ( var x = 0 ; x < 6 - len ; x ++ ) { shi = " 0 " + shi ; } city [ i ] . push ( ken + shi ) ; ite [ city [ i ] [ 0 ] ] ++ ; } city . sort ( ( a , b ) => a [ 2 ] - b [ 2 ] ) ; for ( var i = 0 ; i < M ; i ++ ) { console . log ( city [ i ] [ 3 ] ) ; } } ) ;
function Main ( input ) { input = input . split ( " " ) ; const N = parseInt ( input [ 0 ] , 10 ) ; const K = parseInt ( input [ 1 ] , 10 ) ; if ( K === 1 ) { console . log ( 0 ) ; return ; } console . log ( N - K ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( inp ) { var input = inp . split ( " \n " ) ; input = input [ 0 ] . split ( ' ' ) . map ( function ( n ) { return Number ( n ) ; } ) ; var a = input [ 0 ] ; var b = input [ 1 ] ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { input = input . split ( ' ' ) ; let age = parseInt ( input [ 0 ] , 10 ) ; let value = parseInt ( input [ 1 ] , 10 ) ; let price = 0 ; if ( age > 5 && age < 13 ) { price = value / 2 } else if ( age >= 13 ) { price = value } console . log ( ' %d ' , price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( input ) { const x = Number ( input ) console . log ( x * x * x ) } ) ;
function main ( input ) { var N = input [ 0 ] - 0 ; for ( var i = 0 ; Math . pow ( 2 , i ) <= N ; i ++ ) { } console . log ( Math . pow ( 2 , i - 1 ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
' use strict ' ; const input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) ; const info = input . splice ( ' \n ' ) ; const N = info [ 0 ] . split ( ' ' ) [ 0 ] ; const M = info [ 0 ] . split ( ' ' ) [ 1 ] ; const As = info . splice ( 1 , N ) ; const Bs = info . splice ( 1 , M ) ; let isMatch = " " ; for ( let ax = 0 ; ax < N - M + 1 ; ax ++ ) { for ( let ay = 0 ; ay < N - M + 1 ; ay ++ ) { isMatch = true ; loopReset : for ( let bx = 0 ; bx < M ; bx ++ ) { for ( let by = 0 ; by < M ; by ++ ) { if ( As [ ax + bx ] [ ay + by ] == Bs [ bx ] [ by ] ) { continue ; } else { isMatch = false ; break loopReset ; } } } if ( isMatch ) { console . log ( " Yes " ) ; return ; } } } console . log ( " No " ) ;
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' ' ) ; const A = parseInt ( args [ 0 ] , 10 ) ; const B = parseInt ( args [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) . map ( ( x ) => x * 1 ) min = 10 sum = 0 lines . forEach ( ( x ) => { a = x % 10 min = min > a && a > 0 ? a : min } ) lines . forEach ( ( x ) => { a = x % 10 if ( min == a ) { sum += x min = 10 } else { sum += ~ ~ ( ( x + 10 - 1 ) / 10 ) * 10 } } ) console . log ( sum )
const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) let cin = input . split ( / |\n / ) , cid = 0 const next = ( ) => cin [ cid ++ ] const nexts = ( n ) => cin . slice ( cid , cid += n ) . map ( i => parseInt ( i ) ) const [ A , B , H , M ] = nexts ( 4 ) const long = M * 6.0 const short = ( H + M / 60 ) * 30.0 let angle = Math . abs ( long - short ) const result = Math . sqrt ( A ** 2 + B ** 2 - 2 * A * B * Math . cos ( angle * ( Math . PI / 180 ) ) ) console . log ( result )
var x = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . split ( " " ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const h = parseInt ( input [ 2 ] , 10 ) ; const m = parseInt ( input [ 3 ] , 10 ) ; const ratioH = 30 * h + ( 1 / 2 ) * m ; const ratioM = 6 * m ; const rad = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) / 360 ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] ) ; var B = parseInt ( input . split ( " " ) [ 1 ] ) ; var C = parseInt ( input . split ( " " ) [ 2 ] ) ; var sevenCount = 0 ; var fiveCount = 0 ; if ( A == 5 ) { fiveCount ++ ; } else if ( A == 7 ) { sevenCount ++ ; } if ( B == 5 ) { fiveCount ++ ; } else if ( B == 7 ) { sevenCount ++ ; } if ( C == 5 ) { fiveCount ++ ; } else if ( C == 7 ) { sevenCount ++ ; } if ( fiveCount == 2 && sevenCount == 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var inputValue = input [ 0 ] ; var mostDivideCount = 0 ; var mostValue = 0 for ( var i = 0 ; i <= inputValue ; i ++ ) { var divideCount = 0 ; var testValue = i ; while ( testValue >= 2 && testValue % 2 == 0 ) { divideCount += 1 ; testValue /= 2 ; } if ( divideCount >= mostDivideCount ) { mostDivideCount = divideCount ; mostValue = i ; } } console . log ( ' %d ' , mostValue ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf-8 ' ) ; var input_string = ' ' ; process . stdin . on ( ' data ' , function ( chunk ) { input_string += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { var lines = input_string . split ( ' \n ' ) ; main ( lines . slice ( 0 , lines . length - 1 ) ) ; } ) ; function main ( lines ) { lines . forEach ( function ( x ) { console . log ( Math . pow ( parseInt ( x ) , 3 ) ) ; } ) ; }
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
const main = ( inputs ) => { var N = inputs [ 0 ] . split ( " " ) [ 0 ] ; var D = inputs [ 0 ] . split ( " " ) [ 1 ] ; var list = inputs . filter ( ( v , i ) => i > 0 ) . map ( v => v . split ( " " ) ) ; var ans = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = i + 1 ; j < N ; j ++ ) { var dis = 0 ; for ( var k = 0 ; k < D ; k ++ ) { dis += Math . pow ( list [ i ] [ k ] - list [ j ] [ k ] , 2 ) ; } if ( Math . sqrt ( dis ) == ~ ~ Math . sqrt ( dis ) ) ans ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' UTF-8 ' ) . trim ( ) . split ( " \n " ) ) ;
let input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) function main ( ) { const [ X ] = load ( ) for ( let i = - 120 ; i <= 120 ; i ++ ) { for ( let j = - 120 ; j <= 120 ; j ++ ) { if ( Math . pow ( i , 5 ) - Math . pow ( j , 5 ) === X ) { return [ i , j ] . join ( ' ' ) } } } } let inputs = input . split ( / [\s\n] / ) console . log ( main ( ) ) function load ( rows = 1 , cols = 1 , type = Number ) { const length = rows * cols let result = inputs . splice ( 0 , length ) if ( type !== String ) result = result . map ( type ) if ( cols > 1 ) { const arrays = new Array ( cols ) for ( let col = 0 ; col < cols ; col ++ ) { arrays [ col ] = new Array ( ) for ( let row = 0 ; row < rows ; row ++ ) { arrays [ col ] . push ( result [ row * cols + col ] ) } } result = arrays } return result }
" use strict " ; main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) . trim ( ) . split ( " \n " ) ) ; function main ( input ) { const num = parseInt ( input . shift ( ) ) ; input = input [ 0 ] . split ( " " ) . map ( Number ) ; const minPosition = Math . min ( ... input ) ; const maxPosition = Math . max ( ... input ) ; let sumCon = [ ] ; for ( let i = minPosition ; i <= maxPosition ; i ++ ) { let result = 0 ; for ( let f = 0 ; f < num ; f ++ ) { result += Math . pow ( input [ f ] - i , 2 ) ; } sumCon . push ( result ) ; } console . log ( Math . min ( ... sumCon ) ) ; }
' use strict ' ; function main ( stdin ) { const input = stdin . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; const N = input [ 0 ] ; const K = input [ 1 ] ; let ans = N - K ; if ( K === 1 ) ans = 0 ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function calcDistance ( I , J , D ) { let dist = 0 ; for ( let d = 0 ; d < D ; d ++ ) { dist += Math . pow ( I [ d ] - J [ d ] , 2 ) ; } dist = Math . sqrt ( dist ) ; return dist ; } function main ( input ) { const tmp = Array . from ( input . split ( ' \n ' ) ) ; const ND = tmp . shift ( ) . split ( ' ' ) ; const N = parseInt ( ND [ 0 ] , 10 ) ; const D = parseInt ( ND [ 1 ] , 10 ) ; const X = tmp . map ( ( line ) => line . split ( ' ' ) . map ( ( x ) => parseInt ( x , 10 ) ) ) ; let count = 0 ; for ( let i = 0 ; i < N - 1 ; i ++ ) { for ( let k = i + 1 ; k < N ; k ++ ) { if ( Number . isInteger ( calcDistance ( X [ i ] , X [ k ] , D ) ) ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( " \n " ) ; var obj = { " list " : input , " index " : 0 , " max " : input . length , " hasNext " : function ( ) { return ( this . index < this . max ) ; } , " next " : function ( ) { if ( ! this . hasNext ( ) ) { return " " ; } var returnObj = this . list [ this . index ] ; this . index ++ ; return returnObj ; } } Main ( ) ; function next ( ) { return obj . next ( ) ; } function nextInt ( ) { return myconv ( next ( ) , 1 ) ; } function nextStrArray ( ) { return myconv ( next ( ) , 2 ) ; } function nextIntArray ( ) { return myconv ( next ( ) , 4 ) ; } function nextCharArray ( ) { return myconv ( next ( ) , 6 ) ; } function hasNext ( ) { return obj . hasNext ( ) ; } function myout ( t ) { console . log ( t ) ; } function myerr ( t ) { console . error ( t ) ; } function myconv ( i , no ) { try { switch ( no ) { case 1 : return parseInt ( i ) ; case 2 : return i . split ( " " ) ; case 4 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 6 : return i . split ( " " ) ; case 7 : return i . split ( " " ) . map ( ( a ) => Number ( a ) ) ; case 8 : return i . join ( " " ) ; case 9 : return i . join ( " \n " ) ; case 0 : return i . join ( " " ) ; default : return i ; } } catch ( e ) { return i ; } } function Main ( ) { var N = nextInt ( ) ; var output = 2 ; for ( var i = 0 ; i < N ; i ++ ) { output = output + 1 + output + 1 ; } myout ( output ) ; }
function main ( s ) { s = s . split ( " " ) ; var c = [ 0 , 0 ] ; for ( var i = 0 ; i < 3 ; i ++ ) { s [ i ] = parseInt ( s [ i ] ) ; if ( s [ i ] == 5 ) c [ 0 ] ++ ; if ( s [ i ] == 7 ) c [ 1 ] ++ ; } console . log ( ( c [ 0 ] == 2 && c [ 1 ] == 1 ) ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
const Main = ( input ) => { var xs = input . trim ( ) . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; if ( xs [ 0 ] >= 13 ) { console . log ( xs [ 1 ] ) ; } else if ( xs [ 0 ] <= 12 && xs [ 0 ] >= 6 ) { console . log ( xs [ 1 ] / 2 ) ; } else { console . log ( 0 ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . trim ( ) . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) ; if ( list . indexOf ( " Y " ) != - 1 ) { myout ( " Four " ) ; } else { myout ( " Three " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var antena = [ ] ; for ( var i = 0 ; i < lines . length ; i ++ ) { antena . push ( Number ( lines [ i ] ) ) ; } if ( antena [ antena . length - 1 ] < Math . max . apply ( null , antena ) - Math . min . apply ( null , antena ) ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout , terminal : false } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const [ A , B , H , M ] = lines [ 0 ] . split ( " " ) . map ( e => parseFloat ( e ) ) ; const degB = M * 6.0 ; const degA = H * 30.0 + 30.0 * M / 60 ; const deg1 = Math . abs ( degA - degB ) ; const deg = deg1 > 180 ? 360 - deg1 : deg1 ; const rad = deg * Math . PI / 180 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( rad ) ) ; console . log ( ans ) ; } ) ;
function Main ( input ) { var input = parseInt ( input , 10 ) ; const num = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] ; for ( var i = num . length - 1 ; - 1 < i ; i -- ) { if ( num [ i ] <= input ) { console . log ( num [ i ] ) ; break ; } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
<?php $ N = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { list ( $ x [ ] , $ y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ t = 0.0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i ; $ j < $ N ; $ j ++ ) { if ( $ j == $ i ) continue ; $ t = sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ; $ tot += $ t ; } } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i ; $ j < $ N ; $ j ++ ) { if ( $ j == $ i ) continue ; $ t = sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; $ tot += $ t ; } } printf ( " %f \n " , $ tot / $ N ) ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] + 1 ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ numbers = fgets ( STDIN ) ; $ exploded_numbers = explode ( ' ' , $ numbers ) ; $ count = 0 ; $ min = $ exploded_numbers [ 0 ] ; foreach ( $ exploded_numbers as $ key => $ val ) { if ( $ key - 1 >= 0 ) { if ( $ val <= $ min ) { $ min = $ val ; $ count ++ ; } } else { $ count ++ ; } } echo $ count ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ vallance = trim ( fgets ( STDIN ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ b ; ++ $ j ) { for ( $ k = 0 ; $ k <= $ c ; ++ $ k ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ vallance ) { $ ans ++ ; } } } } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( ( $ z >= 0 ) && ( $ z <= $ k ) ) { $ cnt ++ ; } } } echo $ cnt ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ input , 3 ) ; echo $ result ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; if ( $ a == $ b ) { echo ' Draw ' ; } elseif ( $ a == 1 ) { echo ' Alice ' ; } elseif ( $ b == 1 ) { echo ' Bob ' ; } elseif ( $ a > $ b ) { echo ' Alice ' ; } else { echo ' Bob ' ; }
<?php list ( $ a , $ b , $ h , $ m ) = fscanf ( STDIN , ' %d %d %d %d ' ) ; $ xa = sin ( 2 * pi ( ) * ( $ h + ( $ m / 60 ) ) / 12.0 ) * $ a ; $ ya = cos ( 2 * pi ( ) * ( $ h + ( $ m / 60 ) ) / 12.0 ) * $ a ; $ xb = sin ( 2 * pi ( ) * $ m / 60.0 ) * $ b ; $ yb = cos ( 2 * pi ( ) * $ m / 60.0 ) * $ b ; $ l = sqrt ( ( $ xa - $ xb ) * ( $ xa - $ xb ) + ( $ ya - $ yb ) * ( $ ya - $ yb ) ) ; echo $ l ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ c *= $ n - $ c ; $ c %= $ mod ; $ c *= ( 1 << $ i ) % $ mod ; $ c %= $ mod ; $ sum += $ c ; $ sum %= $ mod ; } echo $ sum ;
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += ( int ) $ n ; echo $ s , PHP_EOL ; }
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a > $ b ) { print ' Alice ' ; } elseif ( $ a == $ b ) { print ' Draw ' ; } else { print ' Bob ' ; }
<?php $ bunsetus = trim ( fgets ( STDIN ) ) ; $ bunsetu = explode ( " " , $ bunsetus ) ; $ seven_count = 0 ; $ five_count = 0 ; for ( $ i = 0 ; $ i < count ( $ bunsetu ) ; $ i ++ ) { if ( $ bunsetu [ $ i ] == 7 ) { $ seven_count += 1 ; } } for ( $ j = 0 ; $ j < count ( $ bunsetu ) ; $ j ++ ) { if ( $ bunsetu [ $ j ] == 5 ) { $ five_count += 1 ; } } if ( $ five_count == 2 && $ seven_count == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; echo ( $ n * $ n ) . PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; $ Q = [ $ A , $ B , $ C , $ D , $ E ] ; $ Ap = $ A % 10 ; $ Bp = $ B % 10 ; $ Cp = $ C % 10 ; $ Dp = $ D % 10 ; $ Ep = $ E % 10 ; $ P = [ $ Ap , $ Bp , $ Cp , $ Dp , $ Ep ] ; $ min ; $ sum = 0 ; if ( array_sum ( $ P ) == 0 ) { echo array_sum ( $ Q ) ; } else { for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { if ( $ P [ $ i ] == 0 ) { $ P [ $ i ] = 10 ; } } $ min = min ( $ P ) ; for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { if ( $ Q [ $ i ] % 10 == 0 ) { $ sum += $ Q [ $ i ] ; } else { $ sum += ceil ( $ Q [ $ i ] / 10 ) * 10 ; } } echo $ sum - 10 + $ min ; } echo " \n " ; ?>
<?php fscanf ( STDIN , ' %d%d%d ' , $ a [ ] , $ a [ ] , $ a [ ] ) ; sort ( $ a ) ; $ cost = 0 ; $ total = 0 ; foreach ( $ a as $ value ) { if ( $ cost == 0 ) { $ total += 0 ; } else { $ total += abs ( $ value - $ cost ) ; } $ cost = $ value ; } echo $ total ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ x = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ pos = round ( array_sum ( $ x ) / sizeof ( $ x ) ) ; $ i = 0 ; foreach ( $ x as $ val ) { $ i += pow ( $ val - $ pos , 2 ) ; } echo $ i . PHP_EOL ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; $ memo = [ ] ; foreach ( $ pref as $ key => $ list ) { foreach ( $ pref [ $ key ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php $ sum = 0 ; $ amax = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a ) ; $ sum += ( int ) ( ( $ a + 9 ) / 10 ) * 10 ; if ( $ a % 10 != 0 ) { $ amax = max ( $ amax , 10 - $ a % 10 ) ; } } echo $ sum - $ amax . " \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 8 || $ b > 8 ) { echo ( " :( " ) ; } else { echo ( " Yay! " ) ; }
<?php error_reporting ( 0 ) ; list ( $ A , $ B ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; printf ( " %d \n " , ceil ( ( $ A + $ B ) / 2 ) ) ;
<?php $ n = ( int ) trim ( fgets ( STDIN ) ) ; $ points = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ps = [ ] ; foreach ( $ input as $ v ) { $ ps [ ] = ( int ) $ v ; } $ points [ ] = $ ps ; } if ( $ n === 2 ) { echo dist ( $ points [ 0 ] , $ points [ 1 ] ) ; exit ( ) ; } $ sum = 0 ; foreach ( $ points as $ k1 => $ p1 ) { foreach ( $ points as $ k2 => $ p2 ) { if ( $ k1 === $ k2 ) { continue ; } $ sum += dist ( $ p1 , $ p2 ) * fact ( $ n - 1 ) ; } } echo $ sum / fact ( $ n ) ; function dist ( $ p1 , $ p2 ) { return sqrt ( pow ( $ p1 [ 0 ] - $ p2 [ 0 ] , 2 ) + pow ( $ p1 [ 1 ] - $ p2 [ 1 ] , 2 ) ) ; } function fact ( $ n ) { $ result = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ result *= $ i ; } return $ result ; }
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { if ( $ z + $ x + $ y == $ s ) { $ count ++ ; } } } } echo $ count ;
<?php $ r = ( int ) trim ( fgets ( STDIN ) ) ; print ( int ) pow ( $ r , 2 ) ; ?>
<?php $ nums = explode ( ' ' , fgets ( STDIN ) ) ; echo ceil ( ( $ nums [ 0 ] + $ nums [ 1 ] ) / 2 ) ; ?>
<?php $ is_honban = 1 ; if ( $ is_honban ) { $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ c = $ sc -> nextInt ( ) ; $ d = $ sc -> nextInt ( ) ; $ e = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; } else { error_reporting ( E_ERROR | E_WARNING | E_PARSE ) ; $ n = 8 ; $ q = 3 ; $ s = ' AABCBDBA ' ; $ t = array ( ' A ' , ' B ' , ' A ' ) ; $ d = array ( ' L ' , ' R ' , ' R ' ) ; } $ ans = 0 ; $ ans = ( $ e - $ a <= $ k ? " Yay! " : " :( " ) ; out :: println ( $ ans ) ; class Scanner { private $ arr = array ( ) ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php fscanf ( STDIN , ' %d %d ' , $ a , $ b ) ; if ( $ a <= 12 && $ a >= 6 ) { echo $ b / 2 ; } elseif ( $ a <= 5 ) { echo 0 ; } else { echo $ b ; } echo PHP_EOL ;
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a <= 5 ) { $ b = 0 ; } elseif ( $ a <= 12 ) { $ b /= 2 ; } echo $ b ;
<?php $ a = intval ( fgets ( STDIN ) ) ; $ b = intval ( fgets ( STDIN ) ) ; $ c = intval ( fgets ( STDIN ) ) ; $ x = intval ( fgets ( STDIN ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ ammount = $ i * 500 + $ j * 100 + $ k * 50 ; if ( $ ammount == $ x ) { $ ans ++ ; } } } } print $ ans ; ?>
<?php fscanf ( STDIN , " %d%d%d " , $ c1 , $ c2 , $ c3 ) ; fscanf ( STDIN , " %d%d%d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d%d%d " , $ c31 , $ c32 , $ c33 ) ; $ diff_11 = $ c1 - $ c2 ; $ diff_21 = $ c21 - $ c22 ; $ diff_31 = $ c31 - $ c32 ; $ diff_1 = $ c2 - $ c3 ; $ diff_2 = $ c22 - $ c23 ; $ diff_3 = $ c32 - $ c33 ; if ( $ diff_11 == $ diff_21 && $ diff_21 == $ diff_31 && $ diff_1 == $ diff_2 && $ diff_2 == $ diff_3 ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php $ t = fgets ( STDIN ) ; $ t = preg_replace ( " /\?/ " , " D " , $ t ) ; echo $ t ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( substr ( $ s , 2 , 1 ) == substr ( $ s , 3 , 1 ) && substr ( $ s , 4 , 1 ) == substr ( $ s , 5 , 1 ) ) { echo ' Yes ' ; } else { echo ' No ' ; } ?>
<?php $ r = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ r ** 2 ; ?>
<?php $ sum = 0 ; $ min = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { list ( $ t ) = fscanf ( STDIN , ' %d ' ) ; if ( $ t % 10 === 0 ) $ sum += $ t ; else if ( substr ( $ t , - 1 ) < $ min ) { $ sum += ceil ( $ t / 10 ) * 10 ; $ min = substr ( $ t , - 1 ) ; } else $ sum += ceil ( $ t / 10 ) * 10 ; } $ sum -= ( 10 - $ min ) ; echo $ sum ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = [ ] ; foreach ( $ pref as $ key => $ list ) { foreach ( $ pref [ $ key ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo $ x . " \n " ; }
<?php $ S = trim ( fgets ( STDIN ) ) ; $ answer = " No " ; if ( ( $ S [ 2 ] === $ S [ 3 ] ) && ( $ S [ 4 ] === $ S [ 5 ] ) ) { $ answer = " Yes " ; } echo $ answer ;
<?php $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ K = $ inputs [ 0 ] ; $ S = $ inputs [ 1 ] ; $ ans = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( 0 <= $ z && $ z <= $ K ) $ ans ++ ; } } echo $ ans ; ?>
<?php list ( $ n ) = ints ( ) ; $ s = strs ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] === ' Y ' ) exit ( ' Four ' ) ; } echo ' Three ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ K ) ; $ L = max ( $ A , $ B , $ C , $ D , $ E ) - min ( $ A , $ B , $ C , $ D , $ E ) ; if ( $ L <= $ K ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; if ( $ input === ' 5 7 5 ' ) { echo " YES \n " ; } elseif ( $ input === ' 5 5 7 ' ) { echo " YES \n " ; } elseif ( $ input === ' 7 5 5 ' ) { echo " YES \n " ; } else echo " NO \n " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ t = new temp ( ) ; $ t -> main ( ) ; unset ( $ t ) ; class temp { private function lineIn ( ) { return fgets ( STDIN ) ; } private function arrayIn ( ) { return explode ( " " , fgets ( STDIN ) ) ; } public function main ( ) { $ hinaMax = $ this -> lineIn ( ) ; $ hinaArare = $ this -> arrayIn ( ) ; $ type = " Three " ; foreach ( $ hinaArare as $ arare ) { if ( " Y " == $ arare ) { $ type = " Four " ; break ; } } unset ( $ arare ) ; echo $ type ; } } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; print $ x * $ x * $ x . " \n " ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' ' , $ stdin ) ; $ alice = $ array [ 0 ] ; $ bob = $ array [ 1 ] ; if ( $ alice == $ bob ) { echo " Draw " ; return ; } if ( $ alice == 1 ) { echo " Alice " ; return ; } if ( $ bob == 1 ) { echo " Bob " ; return ; } if ( $ alice < $ bob ) { echo " Bob " ; return ; } else { echo " Alice " ; return ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ arg_h = $ h * - 2 * M_PI / 12 + $ m * - 2 * M_PI / 12 / 60 ; $ arg_m = $ m * - 2 * M_PI / 60 ; function crd ( $ r , $ arg ) { return [ $ r * cos ( $ arg ) , $ r * sin ( $ arg ) ] ; } ; $ arr_h = crd ( $ a , $ arg_h ) ; $ arr_m = crd ( $ b , $ arg_m ) ; $ x = $ arr_h [ 0 ] - $ arr_m [ 0 ] ; $ y = $ arr_h [ 1 ] - $ arr_m [ 1 ] ; echo sqrt ( $ x ** 2 + $ y ** 2 ) ; ?>
<?php fscanf ( STDIN , " %d%d%d " , $ a , $ b , $ c ) ; if ( ( $ a + $ b ) >= $ c ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php while ( true ) { fscanf ( STDIN , " %d " , $ a ) ; if ( feof ( STDIN ) ) break ; echo $ a * $ a * $ a , PHP_EOL ; }
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function arrayIn ( ) { $ buf = explode ( " " , fgets ( STDIN ) ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = $ this -> arrayIn ( ) ; $ a = $ s [ 0 ] ; $ b = $ s [ 1 ] ; if ( 8 < $ a || 8 < $ b ) { echo " :( \n " ; } else { echo " Yay! \n " ; } } } ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ sum = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ sum == $ d ) { $ count ++ ; } } } } echo $ count ; ?>
<?php $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; $ pos [ ] = stdin ( ) ; echo max ( $ pos ) - min ( $ pos ) <= ( int ) stdin ( ) ? ' Yay! ' : ' :( ' , PHP_EOL ; function stdin ( ) { return trim ( fgets ( STDIN ) ) ; }
<?php $ input_num = intval ( fgets ( STDIN ) ) ; echo $ input_num * $ input_num * $ input_num . " \n " ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = ( int ) $ input [ 0 ] ; $ m = ( int ) $ input [ 1 ] ; $ infinit = 10001 ; $ shortest = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) { if ( $ i === $ j ) { $ shortest [ $ i ] [ $ j ] = 0 ; } else { $ shortest [ $ i ] [ $ j ] = $ infinit ; } } } $ path = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ fr = ( int ) $ input [ 0 ] ; $ to = ( int ) $ input [ 1 ] ; $ dist = ( int ) $ input [ 2 ] ; $ path [ ] = [ $ fr , $ to , $ dist ] ; $ shortest [ $ fr ] [ $ to ] = $ dist ; $ shortest [ $ to ] [ $ fr ] = $ dist ; } for ( $ a = 1 ; $ a <= $ n ; $ a ++ ) { for ( $ b = 1 ; $ b <= $ n ; $ b ++ ) { for ( $ c = 1 ; $ c <= $ n ; $ c ++ ) { $ shortest [ $ b ] [ $ c ] = min ( $ shortest [ $ b ] [ $ c ] , $ shortest [ $ a ] [ $ b ] + $ shortest [ $ a ] [ $ c ] ) ; } } } $ count = 0 ; foreach ( $ path as $ v ) { if ( $ shortest [ $ v [ 0 ] ] [ $ v [ 1 ] ] < $ v [ 2 ] ) { ++ $ count ; } } echo $ count ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ args = [ ] ; $ args [ 0 ] = $ a ; $ args [ 1 ] = $ b ; $ args [ 2 ] = $ c ; $ i = NULL ; switch ( $ a ) { case 5.7 : $ a = $ args [ 0 ] ; break ; default : break ; } switch ( $ b ) { case 5.7 : $ b = $ args [ 0 ] ; break ; default : break ; } switch ( $ c ) { case 5.7 : $ c = $ args [ 0 ] ; break ; default : break ; } $ i = $ args [ 0 ] + $ args [ 1 ] + $ args [ 2 ] ; if ( $ i == 17 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ total = 800 * $ N ; $ discount = ( int ) ( $ N / 15 ) * 200 ; echo $ total - $ discount ; ?>
<?php $ is_honban = 1 ; if ( $ is_honban ) { $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ c = $ sc -> nextInt ( ) ; $ x = $ sc -> nextInt ( ) ; } else { error_reporting ( E_ERROR | E_WARNING | E_PARSE ) ; $ a = 30 ; $ b = 40 ; $ c = 50 ; $ x = 6000 ; } $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ x ) { $ ans ++ ; } } } } out :: println ( $ ans ) ; class Scanner { private $ arr = array ( ) ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php list ( $ a , $ v ) = ints ( ) ; list ( $ b , $ w ) = ints ( ) ; list ( $ t ) = ints ( ) ; $ D = abs ( $ a - $ b ) ; $ V = $ v - $ w ; if ( $ D === 0 ) exit ( ' YES ' ) ; if ( $ V <= 0 ) exit ( ' NO ' ) ; echo $ D / $ V <= $ t ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ numbers = [ ] ; $ answer = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ numbers [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ n - 1 ; $ j > $ i ; $ j -- ) { $ number = 0 ; for ( $ s = 0 ; $ s < $ d ; $ s ++ ) { $ number += pow ( $ numbers [ $ i ] [ $ s ] - $ numbers [ $ j ] [ $ s ] , 2 ) ; } if ( is_seisuu ( $ number ) ) { $ answer += 1 ; } } } function is_seisuu ( $ number ) { $ heihoukon = ( string ) sqrt ( $ number ) ; return ctype_digit ( $ heihoukon ) ? true : false ; } echo $ answer ; echo " \n " ; ?>
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ E - $ A > $ k ) { echo ' :( ' . PHP_EOL ; } else { echo ' Yay! ' . PHP_EOL ; }
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ D [ $ f ] + $ dist ; if ( $ D [ $ t ] > $ new ) { $ D [ $ t ] = $ new ; $ pq -> insert ( $ t , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php while ( $ sum = array_sum ( str_split ( trim ( fgets ( STDIN ) ) ) ) ) printf ( " %d \n " , $ sum ) ;
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $A=$key->A[0]; $B=$key->A[1]; $C=$key->A[2]; $D=$key->A[3]; printf("%d\n",max($A*$B,$C*$D));
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; echo 2 ** floor ( log ( $ n , 2 ) ) ;
<?php While ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ v = explode ( " " , $ stdin [ 0 ] ) ; fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ v [ 0 ] ; $ i ++ ) { $ a = explode ( " " , $ stdin [ $ i + 1 ] ) ; for ( $ j = $ i + 1 ; $ j < $ v [ 0 ] ; $ j ++ ) { $ b = explode ( " " , $ stdin [ $ j + 1 ] ) ; $ r = 0 ; for ( $ k = 0 ; $ k < $ v [ 1 ] ; $ k ++ ) { $ r += pow ( ( $ a [ $ k ] - $ b [ $ k ] ) , 2 ) ; } if ( preg_match ( ' /^[0-9]+$/ ' , sqrt ( $ r ) ) ) { $ ans ++ ; } } } echo $ ans ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ point = $ p [ 0 ] ; $ count = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ p [ $ i ] < $ point ) { $ point = $ p [ $ i ] ; $ count ++ ; } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ sum = $ N * 800 - floor ( $ N / 15 ) * 200 ; echo $ sum ; ?>
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ start_time = $ h1 * 60 + $ m1 ; $ end_time = $ h2 * 60 + $ m2 ; $ possble_end = $ end_time - $ k ; echo ( $ possble_end - $ start_time ) ;
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ log = ( int ) floor ( log ( $ N , 2 ) ) ; echo pow ( 2 , $ log ) . " \n " ;
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ s == 0 ) { echo 1 ; } elseif ( $ s == $ k * 3 ) { echo 1 ; } else { $ ans = 0 ; $ x = max ( 0 , $ s - $ k * 2 ) ; while ( $ x <= $ k ) { $ y = max ( 0 , $ s - $ x - $ k ) ; $ ym = min ( $ k , $ s - $ x ) ; while ( $ y <= $ ym ) { $ z = $ s - $ x - $ y ; $ zm = min ( $ k , $ s - $ x - $ y ) ; if ( $ z <= $ zm ) { ++ $ ans ; } ++ $ y ; } ++ $ x ; } echo $ ans ; } ?>
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 5 ) { } else { $ temp = array ( ) ; foreach ( $ values as $ value ) { if ( ! isset ( $ temp [ $ value ] ) ) { $ temp [ $ value ] = 1 ; } else { $ temp [ $ value ] ++ ; } } ksort ( $ temp ) ; $ ret = ' null ' ; foreach ( $ temp as $ t ) { if ( $ t == 4 ) { $ ret = ' four card ' ; } elseif ( $ t == 3 ) { if ( $ ret == ' one pair ' ) { $ ret = ' full house ' ; } else { $ ret = ' three card ' ; } } elseif ( $ t == 2 ) { if ( $ ret == ' one pair ' ) { $ ret = ' two pair ' ; } elseif ( $ ret == ' three card ' ) { $ ret = ' full house ' ; } else { $ ret = ' one pair ' ; } } } $ temp = array_keys ( $ temp ) ; if ( count ( $ temp ) == 5 && $ temp [ 4 ] - $ temp [ 0 ] == 4 ) { $ ret = ' straight ' ; } $ temp2 = array ( ) ; foreach ( $ temp as $ t ) { if ( $ t == 1 ) { $ temp2 [ ] = 14 ; } else { $ temp2 [ ] = $ t ; } } sort ( $ temp2 ) ; if ( count ( $ temp2 ) == 5 && $ temp2 [ 4 ] - $ temp2 [ 0 ] == 4 ) { $ ret = ' straight ' ; } echo $ ret . " \n " ; } }
<?php list ( $ N , $ W ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; While ( $ str = trim ( fgets ( STDIN ) ) ) { $ wv [ ] = explode ( " " , $ str ) ; } $ memo = [ ] ; $ max = 0 ; function dp ( $ i , $ maxW ) { global $ N , $ wv , $ memo ; if ( isset ( $ memo [ $ i ] [ $ maxW ] ) ) { return $ memo [ $ i ] [ $ maxW ] ; } if ( $ i == $ N ) { $ max = 0 ; } else if ( $ maxW < $ wv [ $ i ] [ 0 ] ) { $ max = dp ( $ i + 1 , $ maxW ) ; } else { $ max = max ( dp ( $ i + 1 , $ maxW ) , dp ( $ i + 1 , $ maxW - $ wv [ $ i ] [ 0 ] ) + $ wv [ $ i ] [ 1 ] ) ; } $ memo [ $ i ] [ $ maxW ] = $ max ; return $ max ; } echo dp ( 0 , $ W ) ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ result = 0 ; $ result += $ i * 500 ; $ result += $ j * 100 ; $ result += $ k * 50 ; if ( $ result == $ x ) { $ count ++ ; } } } } echo $ count ;
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ d = fgets ( STDIN ) ; $ e = fgets ( STDIN ) ; $ k = fgets ( STDIN ) ; if ( ( $ e - $ a ) > $ k ) { echo " :( " ; } else { echo " Yay! " ; }
<?php list ( $ k , $ s ) = ints ( ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; ++ $ x ) { for ( $ y = 0 ; $ y <= min ( $ s - $ x , $ k ) ; ++ $ y ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ cnt ++ ; } } echo $ cnt ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function be_able_to_reach ( $ from , $ to ) { $ time = $ to [ 0 ] - $ from [ 0 ] ; $ distance = abs ( $ to [ 1 ] - $ from [ 1 ] ) + abs ( $ to [ 2 ] - $ from [ 2 ] ) ; #var_dump($time,$distance); if($distance > $time) return false; if($distance % 2 == 0 && $time % 2 == 0) return true; if($distance % 2 == 1 && $time % 2 == 1) return true; return false; } $scan = new Scanner(); $A = $scan->nextInt(); $B = $scan->nextInt(); $cost = 0; if($A >= 13) $cost = $B; elseif($A >= 6) $cost = $B/2; else $cost = 0; print($cost);
<?php $ N = trim ( fgets ( STDIN ) ) ; $ X = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ mx = max ( $ X ) ; $ mi = min ( $ X ) ; $ res = 10 ** 9 ; for ( $ i = $ mi ; $ i <= $ mx ; $ i ++ ) { $ sum = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ sum += ( $ X [ $ j ] - $ i ) ** 2 ; } $ res = min ( $ res , $ sum ) ; } printf ( " %d \n " , $ res ) ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ input = str_replace ( array ( " \r \n " , " \r " , " \n " ) , ' ' , $ input ) ; $ array = explode ( " " , $ input ) ; $ result1 = $ array [ 0 ] * $ array [ 1 ] ; $ result2 = $ array [ 2 ] * $ array [ 3 ] ; if ( $ result1 > $ result2 ) { echo $ result1 . " \n " ; } else { echo $ result2 . " \n " ; } ?>
<?php $ ans = 0 ; fscanf ( STDIN , " %d " , $ N ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ ans += sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; } } $ toori = f ( $ N ) ; $ toori_path = $ toori * ( $ N - 1 ) ; $ pattern = $ N * ( $ N - 1 ) / 2 ; $ unit = $ toori_path / $ pattern ; $ total = $ unit * $ ans ; echo $ total / $ toori ; function f ( $ N ) { $ ret = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ ret *= $ i ; } return $ ret ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; $ s = max ( $ a , $ b , $ c , $ d , $ e ) - min ( $ a , $ b , $ c , $ d , $ e ) ; if ( $ s <= $ k ) { echo " Yay! " ; } else { echo " :( " ; } echo " \n " ; ?>
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ hun = 0 ; if ( $ m2 < $ m1 ) { $ h2 = $ h2 - 1 ; $ hun = ( $ m2 + 60 ) - $ m1 ; } else { $ hun = $ m2 - $ m1 ; } $ zikan = ( ( $ h2 - $ h1 ) * 60 ) ; echo ( $ zikan + $ hun ) - $ k ;
<?php fscanf ( STDIN , " %d " , $ x ) ; $ a = - 118 ; $ b = - 119 ; for ( $ i = $ a ; $ i < 119 ; $ i ++ ) { for ( $ j = $ b ; $ j < 118 ; $ j ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ x ) { echo $ i . ' ' . $ j ; exit ; } } }
<?php define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %s " , $ s ) ; $ arrayMoji = array ( ' dream ' , ' dreamer ' , ' erase ' , ' eraser ' ) ; $ jobs = array ( 0 ) ; while ( $ jobs ) { $ pos = array_pop ( $ jobs ) ; $ partial = substr ( $ s , $ pos ) ; foreach ( $ arrayMoji as $ moji ) { $ len = strlen ( $ moji ) ; $ partial_partial = substr ( $ partial , 0 , $ len ) ; if ( $ partial_partial == $ moji ) { $ newLoc = $ pos + $ len ; if ( $ newLoc == strlen ( $ s ) ) { exit ( " YES \n " ) ; } array_push ( $ jobs , $ pos + $ len ) ; } } } echo " NO \n " ;
<?php $ s = in ( ) ; if ( substr ( $ s , 2 , 1 ) == substr ( $ s , 3 , 1 ) && substr ( $ s , 4 , 1 ) == substr ( $ s , 5 , 1 ) ) { Yes ( ) ; } else { No ( ) ; } function in ( ) { return trim ( fgets ( STDIN ) ) ; } function in_int ( ) { return ( int ) in ( ) ; } function in_vals ( ) { return explode ( ' ' , in ( ) ) ; } function in_ints ( ) { return array_map ( ' intval ' , in_vals ( ) ) ; } function out ( $ s ) { echo $ s . PHP_EOL ; } function yes ( ) { out ( ' Yes ' ) ; } function no ( ) { out ( ' No ' ) ; } function factorial ( $ n ) { if ( $ n > 0 ) { return $ n *= factorial ( $ n - 1 ) ; } return 1 ; } function is_palindrome ( $ s ) { return $ s == strrev ( $ s ) ; }
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ Scount = array_count_values ( $ S ) ; if ( count ( $ Scount ) == 3 ) { echo ' Three ' ; } else { echo ' Four ' ; } ?>
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; $ answer = " Yes " ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ c [ $ i ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ mmin = min ( $ c [ $ i ] ) ; foreach ( $ c [ $ i ] as $ k => $ v ) { $ c [ $ i ] [ $ k ] -= $ mmin ; } } for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ c [ 0 ] [ $ i ] != $ c [ 1 ] [ $ i ] || $ c [ 1 ] [ $ i ] != $ c [ 2 ] [ $ i ] ) { $ answer = " No " ; } } echo $ answer . PHP_EOL ;
<?php $ a = trim ( fgets ( STDIN ) ) ; echo $ a * $ a * $ a ; ?>
<?php $ str_arr = str_split ( fgets ( STDIN ) ) ; if ( $ str_arr [ 2 ] == $ str_arr [ 3 ] && $ str_arr [ 4 ] == $ str_arr [ 5 ] ) print ( " Yes \n " ) ; else print ( " No \n " ) ; ?>
<?php $ hanter = fgets ( STDIN ) ; $ hanter = str_replace ( PHP_EOL , ' ' , $ hanter ) ; list ( $ hanterZ , $ hanterV ) = preg_split ( ' /\s+/ ' , $ hanter ) ; $ runner = fgets ( STDIN ) ; $ runner = str_replace ( PHP_EOL , ' ' , $ runner ) ; list ( $ runnerZ , $ runnerV ) = preg_split ( ' /\s+/ ' , $ runner ) ; $ distance = abs ( $ hanterZ - $ runnerZ ) ; $ V = $ hanterV - $ runnerV ; $ chaceTime = fgets ( STDIN ) ; if ( $ V <= 0 && $ distance > 0 ) { echo " NO " ; exit ( ) ; } $ tijimaruKyori = ( int ) $ chaceTime * ( int ) $ V ; if ( $ tijimaruKyori >= $ distance ) { echo " YES " ; exit ( ) ; } echo " NO " ;
<?php $ stdn = trim ( fgets ( STDIN ) ) ; $ ans = $ stdn * $ stdn * $ stdn ; echo $ ans . " \n " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a * $ a ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ H1 , $ M1 , $ H2 , $ M2 , $ K ) ; $ up = $ H1 * 60 + $ M1 ; $ down = $ H2 * 60 + $ M2 ; $ answer = $ down - $ up - $ K ; print_r ( $ answer ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ; ?>
<?php define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %d " , $ N ) ; for ( $ h = 1 ; $ h <= 3500 ; $ h ++ ) { for ( $ n = 1 ; $ n <= 3500 ; $ n ++ ) { $ base = 4 * $ h * $ n - $ N * $ n - $ N * $ h ; if ( $ base == 0 ) continue ; $ w = ( $ N * $ h * $ n ) / $ base ; if ( $ w == intval ( $ w ) && $ w > 0 ) { echo " { $ h } { $ n } { $ w } \n " ; exit ; } } }
<?php $ n = explode ( ' ' , fgets ( STDIN ) ) ; $ seven = 0 ; $ five = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ n [ $ i ] == 5 ) { $ five ++ ; continue ; } if ( $ n [ $ i ] == 7 ) { $ seven ++ ; continue ; } } if ( $ seven === 1 && $ five === 2 ) { echo ' YES ' . PHP_EOL ; } else { echo ' NO ' . PHP_EOL ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ t = 0 ; $ t <= $ b ; $ t ++ ) { for ( $ r = 0 ; $ r <= $ c ; $ r ++ ) { if ( 500 * $ i + 100 * $ t + 50 * $ r == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = $ input * $ input * $ input ; echo $ ans . " \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k == 1 ) { echo ' 0 ' ; } else { $ ans = $ n - $ k ; echo $ ans ; }
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; if ( $ s [ 0 ] >= 13 ) { $ ans = $ s [ 1 ] ; } elseif ( $ s [ 0 ] <= 12 && $ s [ 0 ] >= 6 ) { $ ans = $ s [ 1 ] / 2 ; } elseif ( $ s [ 0 ] <= 5 ) { $ ans = 0 ; } echo $ ans ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ a = $ input ; $ input = str_split ( $ input ) ; $ i = array_sum ( $ input ) ; if ( $ a % $ i == " 0 " ) { echo " Yes " ; } else { echo " No " ; }
<?php ini_set ( ' memory_limit ' , ' 1024M ' ) ; $ sc = new Scanner ( ) ; $ N = $ sc -> nextInt ( ) ; $ P = $ sc -> nextInt ( ) ; if ( $ N == 1 ) { echo $ P . PHP_EOL ; exit ; } if ( $ P == 1 ) { echo 1 . PHP_EOL ; exit ; } $ result = get_prime_factors ( $ P ) ; $ ans = 1 ; foreach ( $ result as $ k => $ v ) { $ ans *= pow ( $ k , ( int ) ( $ v / $ N ) ) ; } echo $ ans . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } function get_prime_factors ( $ N ) { $ result = [ ] ; for ( $ i = 2 ; $ i * $ i <= $ N ; $ i ++ ) { if ( $ N % $ i == 0 ) { while ( $ N % $ i == 0 ) { $ result [ $ i ] ++ ; $ N /= $ i ; } } } if ( $ N > 1 ) { $ result [ $ N ] ++ ; $ N /= $ N ; } return $ result ; }
<?php fscanf ( STDIN , ' %d ' , $ r ) ; echo $ r * $ r . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( ( $ a + $ b + $ c === 17 ) && ( $ a === 5 || 7 ) && ( $ b === 5 || 7 ) && ( $ c === 5 || 7 ) ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ b = ( int ) trim ( fgets ( STDIN ) ) ; $ c = ( int ) trim ( fgets ( STDIN ) ) ; $ x = ( int ) trim ( fgets ( STDIN ) ) ; $ ans = 0 ; for ( $ tmp = 0 ; $ tmp <= $ a ; $ tmp ++ ) { for ( $ tmp2 = 0 ; $ tmp2 <= $ b ; $ tmp2 ++ ) { for ( $ tmp3 = 0 ; $ tmp3 <= $ c ; $ tmp3 ++ ) { if ( 500 * $ tmp + 100 * $ tmp2 + 50 * $ tmp3 == $ x ) { $ ans ++ ; } } } } echo ( $ ans ) . " \n " ; ?>
<?php $ server = " php: $ handle = fopen( $ server , " r " ) ; $ t = trim ( fgets ( $ handle ) ) ; $ a = trim ( fgets ( $ handle ) ) ; $ a = explode ( ' ' , $ a ) ; $ i = 100 ; $ last = 1000000009 ; $ num = 0 ; while ( $ i > 0 ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ t ; $ k ++ ) { $ sum += pow ( ( $ a [ $ k ] - $ i ) , 2 ) ; } if ( $ sum < $ last ) { $ last = $ sum ; } $ i -- ; } echo $ last . " \n " ;
<?php $ string = str_replace ( array ( " " , " \n " ) , " " , fgets ( STDIN ) ) ; $ splited_string = str_split ( $ string ) ; if ( $ splited_string [ ' 2 ' ] == $ splited_string [ ' 3 ' ] && $ splited_string [ ' 4 ' ] == $ splited_string [ ' 5 ' ] ) { echo " Yes " ; } else { echo " No " ; }
<?php list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab >= $ cd ) { echo $ ab ; } else { echo $ cd ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ d = fgets ( STDIN ) ; $ e = fgets ( STDIN ) ; $ k = fgets ( STDIN ) ; if ( $ e - $ a > $ k ) { echo " :( " ; } else { echo " Yay! " ; } ?>
<?php $ sc = new Scanner ( ) ; $ n = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ list = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p = $ sc -> nextInt ( ) ; $ y = $ sc -> nextInt ( ) ; $ list [ $ p ] [ $ y ] = $ i + 1 ; } $ ans_list = [ ] ; foreach ( $ list as $ k => $ v ) { ksort ( $ v ) ; $ first_id = str_pad ( $ k , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ i = 1 ; foreach ( $ v as $ a ) { $ last_id = str_pad ( $ i ++ , 6 , ' 0 ' , STR_PAD_LEFT ) ; $ ans_list [ $ a ] = $ first_id . $ last_id ; } } ksort ( $ ans_list ) ; echo implode ( PHP_EOL , $ ans_list ) . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array1 = array ( $ a , $ b , $ c ) ; $ count5 = array_count_values ( $ array1 ) ; if ( $ count5 [ 5 ] == 2 && $ count5 [ 7 ] == 1 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ h1 = $ sc -> nextInt ( ) ; $ m1 = $ sc -> nextInt ( ) ; $ h2 = $ sc -> nextInt ( ) ; $ m2 = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; $ a = $ h1 * 60 ; $ b = $ h2 * 60 ; $ a1 = $ a + $ m1 ; $ b1 = $ b + $ m2 ; $ calc = $ b1 - $ a1 - $ k ; echo $ calc ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ n ) ; $ i ++ ) { $ sum += $ n [ $ i ] ; } echo $ n % $ sum == 0 ? ' Yes ' : ' No ' ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ a , 3 ) ; echo $ result . " \n " ;
<?php $ s = fgets ( STDIN ) ; echo $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ? Yes : No ;
<?php $ p = explode ( " " , fgets ( STDIN ) ) ; if ( $ p [ 0 ] > 8 or $ p [ 1 ] > 8 ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ n = int ( ) ; echo $ n * $ n ; function str ( ) { return trim ( fgets ( STDIN ) ) ; } function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; } function o ( ... $ val ) { if ( count ( $ val ) == 1 ) $ val = array_shift ( $ val ) ; $ trace = debug_backtrace ( ) ; echo $ trace [ 0 ] [ ' line ' ] . " ) " ; if ( is_array ( $ val ) ) { if ( count ( $ val ) == 0 ) { echo " empty array " ; } elseif ( ! is_array ( current ( $ val ) ) ) { echo " array: " ; echo implode ( " " , $ val ) . " \n " ; } else { echo " array:array \n " ; foreach ( $ val as $ row ) { echo implode ( " " , $ row ) . " \n " ; } } } else { echo $ val . " \n " ; } }
<?php $ m = [ ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ m [ $ i ] = array_map ( ' intval ' , explode ( ' ' , fgets ( STDIN ) ) ) ; } $ a [ 0 ] = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) $ b [ $ i ] = $ m [ 0 ] [ $ i ] - $ a [ 0 ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) $ a [ $ i ] = $ m [ $ i ] [ 0 ] - $ b [ 0 ] ; $ jdge = ' Yes ' ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { if ( $ a [ $ i ] + $ b [ $ j ] != $ m [ $ i ] [ $ j ] ) $ jdge = ' No ' ; } } echo $ jdge ;
<?php namespace Track ; function main ( $ lines ) { $ sum = 0 ; $ ans = [ ] ; foreach ( $ lines as $ index => $ value ) { if ( $ value == " 0 " ) { break ; } for ( $ i = 0 ; $ i < strlen ( $ value ) ; $ i ++ ) { $ sum += $ value [ $ i ] ; } $ ans [ ] = $ sum ; $ sum = 0 ; } echo implode ( PHP_EOL , $ ans ) ; } $ array = array ( ) ; while ( true ) { $ stdin = fgets ( STDIN ) ; if ( $ stdin == " " ) { break ; } $ array [ ] = rtrim ( $ stdin ) ; } main ( $ array ) ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ a >= 13 ) echo $ b ; else if ( $ a >= 6 ) echo $ b / 2 ; else echo " 0 " ;
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ h , $ m ) ; $ kakudo_hour = 30 * $ h + $ m * 0.5 ; $ kakudo_minute = 6 * $ m ; if ( $ kakudo_hour == 0 ) { $ kakudo_hour = 360 ; } if ( $ kakudo_minute == 0 ) { $ kakudo_minute = 360 ; } $ Theta = abs ( $ kakudo_hour - $ kakudo_minute ) ; $ distan = ( $ a ** 2 + $ b ** 2 ) - ( 2 * $ a * $ b * cos ( deg2rad ( $ Theta ) ) ) ; $ distan = sqrt ( $ distan ) ; echo $ distan . " \n " ;
<?php fscanf ( STDIN , " %s " , $ t ) ; echo str_replace ( ' ? ' , ' D ' , $ t ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ max = 0 ; $ max_i = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ j = $ i ; $ count = 0 ; while ( $ j % 2 === 0 ) { $ j = $ j / 2 ; $ count ++ ; } if ( $ count >= $ max ) { $ max = $ count ; $ max_i = $ i ; } } print $ max_i ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php list ( $ a , $ b ) = ints ( ) ; echo ( int ) ceil ( ( $ a + $ b ) / 2 ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A === $ B ) { echo ' Draw ' ; } else if ( $ A === 1 || $ A > $ B && $ B !== 1 ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ z ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ k ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ k ; $ b ++ ) { $ c = $ z - ( $ a + $ b ) ; if ( 0 <= $ c && $ c <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { list ( $ x , $ y ) = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ X [ ] = $ x ; $ Y [ ] = $ y ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { if ( $ i == $ j ) continue ; $ dis [ ] = sqrt ( ( ( ( $ X [ $ i ] - $ X [ $ j ] ) ** 2 ) + ( ( $ Y [ $ i ] - $ Y [ $ j ] ) ** 2 ) ) ) ; } } echo ( $ N - 1 ) * ( array_sum ( $ dis ) / count ( $ dis ) ) . " \n " ; ?>
<?php fscanf ( STDIN , " %s " , $ t ) ; $ c = 0 ; for ( $ i = 0 ; $ i < strlen ( $ t ) ; $ i ++ ) { if ( $ t [ $ i ] == ' ? ' ) { $ t [ $ i ] = ' D ' ; } } echo $ t ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo $ n * 800 - floor ( $ n / 15 ) * 200 ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; $ amariLast = 10 ; $ last = $ A ; foreach ( [ $ A , $ B , $ C , $ D , $ E ] as $ val ) { $ amari = $ val % 10 ; if ( $ amari < $ amariLast && $ amari !== 0 ) { $ last = $ val ; $ amariLast = $ amari ; } } $ ans = 0 ; foreach ( [ $ A , $ B , $ C , $ D , $ E ] as $ val ) { if ( $ val < 10 ) { $ ans += 10 ; } else { $ ans += ( ceil ( $ val / 10 ) * 10 ) ; } } $ ans -= ( 10 - $ amariLast ) ; echo intval ( $ ans ) . PHP_EOL ;
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( ! $ N ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += $ n ; echo $ s , PHP_EOL ; }
<?php $ num = 0 ; while ( $ line = fgets ( STDIN ) ) { $ num += ceil ( ( int ) trim ( $ line ) / 10 ) * 10 ; if ( substr ( trim ( $ line ) , - 1 ) != ' 0 ' ) { $ rest [ ] = substr ( trim ( $ line ) , - 1 ) ; } } $ d = min ( $ rest ) ; $ t = 10 ; if ( $ d == 0 ) { $ t = 0 ; } echo $ num - $ t + $ d ;
<?php $ input = fgets ( STDIN ) ; $ input_array = str_split ( $ input ) ; $ ans = " " ; foreach ( $ input_array as $ i => $ char ) { if ( $ char === " ? " ) { $ ans = $ ans . " D " ; } else { $ ans = $ ans . $ char ; } } echo $ ans ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = $ n % 500 ; $ p = $ n - $ a ; echo $ p . PHP_EOL ; ?>
<?php $ baseDate = 20190430 ; $ date = fgets ( STDIN ) ; $ date = str_replace ( " / " , " " , $ date ) ; if ( $ date <= $ baseDate ) { echo " Heisei " ; } else { echo " TBD " ; }
<?php fscanf ( STDIN , " %s " , $ a ) ; if ( $ a [ 2 ] == $ a [ 3 ] && $ a [ 4 ] == $ a [ 5 ] ) { echo ( " Yes " ) . PHP_EOL ; } else { echo ( " No " ) . PHP_EOL ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; $ integerCount = 0 ; $ points = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ points [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ point_y = $ points [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ point_z = $ points [ $ j ] ; $ distance = 0 ; foreach ( $ point_y as $ index => $ coordinate ) { $ distance += pow ( abs ( $ point_y [ $ index ] - $ point_z [ $ index ] ) , 2 ) ; } if ( intval ( sqrt ( $ distance ) ) == sqrt ( $ distance ) ) { $ integerCount ++ ; } } } echo $ integerCount ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo pow ( $ r , 2 ) ;
<?php fscanf ( STDIN , ' %d %d ' , $ ball , $ person ) ; if ( $ person == 1 ) { echo 0 ; } else { echo $ ball - $ person ; }
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; fscanf ( STDIN , " %d " , $ t ) ; $ dis = abs ( $ b [ 0 ] - $ a [ 0 ] ) ; $ dis_a = bcmul ( $ a [ 1 ] , $ t ) ; $ dis_b = bcadd ( $ dis , bcmul ( $ b [ 1 ] , $ t ) ) ; if ( $ dis_a >= $ dis_b ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = trim ( fgets ( STDIN ) ) ; $ x = array_map ( " intval " , explode ( " " , $ inputs ) ) ; $ sum_min = 0 ; for ( $ p = 1 ; $ p < 100 ; $ p ++ ) { $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ x ) ; $ i ++ ) { $ sum += pow ( $ x [ $ i ] - $ p , 2 ) ; } if ( $ p == 1 || $ sum_min > $ sum ) { $ sum_min = $ sum ; } } echo $ sum_min . " \n " ;
<?php $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ string = trim ( fgets ( STDIN ) ) ; if ( ( $ string [ 2 ] === $ string [ 3 ] ) and ( $ string [ 4 ] === $ string [ 5 ] ) ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ min = $ arr [ 0 ] ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ min >= $ arr [ $ i ] ) { $ min = $ arr [ $ i ] ; $ count ++ ; } } echo $ count . " \n " ;
<?php $ n = 5 ; while ( $ n -- ) fscanf ( STDIN , " %d " , $ p [ ] ) ; fscanf ( STDIN , " %d " , $ k ) ; echo $ p [ 4 ] - $ p [ 0 ] > $ k ? ' :( ' : ' Yay! ' ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php $ A [ 0 ] = trim ( fgets ( STDIN ) ) ; $ A [ 1 ] = trim ( fgets ( STDIN ) ) ; $ A [ 2 ] = trim ( fgets ( STDIN ) ) ; $ A [ 3 ] = trim ( fgets ( STDIN ) ) ; $ A [ 4 ] = trim ( fgets ( STDIN ) ) ; $ result = 0 ; ; for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { $ res = $ A [ $ i ] % 10 ; if ( $ res == 0 ) { $ res = 10 ; } $ a1 [ $ i ] = $ res ; } $ min = min ( $ a1 ) ; foreach ( $ A as $ v ) { $ aa = ceil ( ( $ v / 10 ) ) * 10 ; $ result += $ aa ; } $ result -= 10 - $ min ; print ( $ result ) ;
<?php $ number = trim ( fgets ( STDIN ) ) ; print sub_func ( $ number ) ; function sub_func ( $ a ) { return $ a * $ a * $ a ; } ?>
<?php print pow ( trim ( fgets ( STDIN ) ) , 3 ) ; ?>
<?php while ( true ) { $ str = trim ( fgets ( STDIN ) ) ; if ( $ str == 0 ) { return ; } $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ sum += $ str [ $ i ] ; } print ( $ sum . " \n " ) ; } ?>
<?php $ a = fgets ( STDIN ) ; $ b = $ a * $ a * $ a ; echo $ b , PHP_EOL ;
<?php $ n = fgets ( STDIN ) ; echo pow ( $ n , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A < 9 && $ B < 9 ) { echo " Yay! " . " \n " ; } else { echo " :( " . " \n " ; } ?>
<?php $ yen500 = trim ( fgets ( STDIN ) ) ; $ yen100 = trim ( fgets ( STDIN ) ) ; $ yen50 = trim ( fgets ( STDIN ) ) ; $ money = trim ( fgets ( STDIN ) ) ; $ array = str_split ( trim ( fgets ( STDIN ) ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ yen500 ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ yen100 ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ yen50 ; $ k ++ ) { $ result = $ i * 500 + $ j * 100 + $ k * 50 ; if ( $ result == $ money ) { $ count ++ ; } } } } echo $ count ; ?>
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ c *= $ n - $ c ; $ c %= $ mod ; $ c *= ( 1 << $ i ) % $ mod ; $ c %= $ mod ; $ sum += $ c ; $ sum %= $ mod ; } echo $ sum ;
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ c <= $ a + $ b ) { echo " Yes " ; } else { echo " No " ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; echo ( $ e - $ a <= $ k ) ? ' Yay! ' : ' :( ' ;
<?php $ a = fgets ( STDIN ) ; echo ( pow ( $ a , 3 ) ) ; ?>
<?php fscanf ( STDIN , ' %d%d ' , $ a , $ b ) ; echo ( abs ( $ a - $ b ) > 1 ) ? ' :( ' : ' Yay! ' ;
<?php $ n = ( fgets ( STDIN ) ) ; echo pow ( $ n , 2 ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ ps = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ cnt = 1 ; $ min = $ ps [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ ps [ $ i ] < $ min ) { $ min = $ ps [ $ i ] ; $ cnt ++ ; } } echo $ cnt ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ result [ ' P ' ] = 0 ; $ result [ ' W ' ] = 0 ; $ result [ ' G ' ] = 0 ; $ result [ ' Y ' ] = 0 ; $ arare_arr = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; foreach ( $ arare_arr as $ val ) { $ result [ $ val ] = 1 ; } echo ( array_sum ( $ result ) == 3 ) ? ' Three ' : ' Four ' ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + 50 * $ k == $ x ) $ ans ++ ; } } } echo $ ans , " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ cnt5 = 0 ; $ cnt7 = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ { chr ( ord ( " a " ) + $ i ) } == 5 ) { $ cnt5 ++ ; } elseif ( $ { chr ( ord ( " a " ) + $ i ) } == 7 ) { $ cnt7 ++ ; } } if ( $ cnt5 == 2 && $ cnt7 == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; printf ( " %d \n " , abs ( $ a [ 2 ] - $ a [ 1 ] ) + abs ( $ a [ 1 ] - $ a [ 0 ] ) ) ;
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x ** 3 ; echo " \n " ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; if ( $ a * $ b >= $ c * $ d ) { print $ a * $ b ; } else { print $ c * $ d ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] === 5 && $ a [ 1 ] === 5 && $ a [ 2 ] === 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] === 5 && $ a [ 1 ] === 5 && $ a [ 2 ] === 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; printf ( " %d \n " , $ n ** 3 ) ;
<?php $ result = array ( ) ; while ( ! feof ( STDIN ) ) { $ line = trim ( fgets ( STDIN ) ) ; sscanf ( $ line , ' %d,%f,%f ' , $ n , $ kg , $ m ) ; if ( $ kg / ( $ m * $ m ) >= 25.0 ) { $ result [ ] = $ n ; } } echo implode ( " \n " , $ result ) . " \n " ;
<?php $ in = trim ( fgets ( STDIN ) ) ; $ v = explode ( " " , $ in ) ; if ( $ v [ 0 ] + $ v [ 1 ] >= $ v [ 2 ] ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ angle = abs ( $ m * 6 - ( ( 30 * $ h ) + ( 30 * $ m / 60 ) ) ) ; echo sqrt ( $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( deg2rad ( $ angle ) ) ) ; ?>
<?php list ( $ n ) = ints ( ) ; $ p = [ 1 , 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a = ints ( ) ; if ( $ a [ 0 ] >= $ p [ 0 ] && $ a [ 1 ] >= $ p [ 1 ] ) { $ p = $ a ; continue ; } $ m = max ( intdivceil ( $ p [ 0 ] , $ a [ 0 ] ) , intdivceil ( $ p [ 1 ] , $ a [ 1 ] ) ) ; $ p = [ $ a [ 0 ] * $ m , $ a [ 1 ] * $ m ] ; } echo array_sum ( $ p ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function intdivceil ( $ a , $ b ) { return $ a % $ b ? intdiv ( $ a , $ b ) + 1 : intdiv ( $ a , $ b ) ; }
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $a =$key->A[0]; $b =$key->A[1]; if ($a == $b) { printf("Draw\n"); exit; } if ($a == 1) $a = 14; if ($b == 1) $b = 14; if ($a > $b) { printf("Alice\n"); } else { printf("Bob\n"); }
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php $ a = intval ( fgets ( STDIN ) ) ; $ b = intval ( fgets ( STDIN ) ) ; $ c = intval ( fgets ( STDIN ) ) ; $ x = intval ( fgets ( STDIN ) ) ; $ sumCount = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ result = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ result === $ x ) { $ sumCount ++ ; } } } } echo $ sumCount ;
<?php list ( $ y , $ m , $ d ) = explode ( " / " , trim ( fgets ( STDIN ) ) ) ; if ( $ y > 2019 ) { echo " TBD " ; } else if ( $ y < 2019 ) { echo " Heisei " ; } else { if ( $ m > 4 ) { echo " TBD " ; } else if ( $ m <= 4 ) { echo " Heisei " ; } }
<?php $ n = fgets ( STDIN ) ; $ t = $ n ; while ( $ t > 0 ) { $ m += $ t % 10 ; $ t = floor ( $ t / 10 ) ; } echo $ n % $ m ? No : Yes ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } list ( $ N , $ D ) = sscanf ( trim ( fgets ( STDIN ) ) , " %d %d " ) ; $ X = array ( ) ; for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) { $ sc = new Scanner ( ) ; for ( $ i = 1 ; $ i <= $ D ; $ i ++ ) { $ X [ $ j ] [ $ i ] = $ sc -> nextInt ( ) ; } } $ sum = 0 ; $ cnt = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= $ N ; $ j ++ ) { for ( $ k = 1 ; $ k <= $ D ; $ k ++ ) { $ sum += pow ( ( $ X [ $ i ] [ $ k ] - $ X [ $ j ] [ $ k ] ) , 2 ) ; } $ sum = sqrt ( $ sum ) ; if ( preg_match ( ' /^[0-9]+$/ ' , $ sum ) ) { $ cnt ++ ; } $ sum = 0 ; } } printf ( $ cnt ) ;
<?php fscanf ( STDIN , " %d " , $ n ) ; if ( $ n === 1 ) echo 1 ; else if ( $ n < 4 ) echo 2 ; else if ( $ n < 8 ) echo 4 ; else if ( $ n < 16 ) echo 8 ; else if ( $ n < 32 ) echo 16 ; else if ( $ n < 64 ) echo 32 ; else echo 64 ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; $ diff [ ] = $ b - $ a ; $ diff [ ] = $ c - $ a ; $ diff [ ] = $ d - $ a ; $ diff [ ] = $ e - $ a ; $ diff [ ] = $ c - $ b ; $ diff [ ] = $ d - $ b ; $ diff [ ] = $ e - $ b ; $ diff [ ] = $ d - $ c ; $ diff [ ] = $ e - $ c ; $ diff [ ] = $ e - $ d ; if ( max ( $ diff ) <= $ k ) { printf ( " Yay! \n " ) ; } else { printf ( " :( \n " ) ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; for ( $ j = - 119 ; $ j <= 118 ; $ j ++ ) { for ( $ i = - 118 ; $ i <= 119 ; $ i ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ x ) { echo $ i . " " . $ j . " \n " ; exit ; } } }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ in = fgets ( STDIN ) ; echo $ in * $ in * $ in . " \n " ;
<?php $ array = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } $ k = trim ( fgets ( STDIN ) ) ; echo ( $ array [ 4 ] - $ array [ 0 ] > $ k ? ' :( ' : ' Yay! ' ) , PHP_EOL ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = ceil ( ( $ a + $ b ) / 2 ) ; echo $ ans ; ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo ( $ a >= 13 ) ? $ b : ( ( $ a <= 5 ) ? 0 : $ b / 2 ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ input ) ; echo $ input * $ input . " \n " ;
<?php $ input = fgets ( STDIN ) ; echo $ output = pow ( $ input , 3 ) ; ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ result = pow ( $ stdin , 3 ) ; echo ( $ result ) ; ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' / ' , $ s ) ; if ( ( int ) $ array [ 0 ] < 2019 ) { echo ' Heisei ' ; } elseif ( ( int ) $ array [ 0 ] == 2019 && ( int ) $ array [ 1 ] < 5 && ( int ) $ array [ 2 ] < 31 ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php list ( $ n , $ m ) = explode ( " " , fgets ( STDIN ) ) ; $ array = [ ] ; $ country_array = array_fill ( 1 , $ n , 1 ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ ar = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ array [ ] = $ ar ; } asort ( $ array ) ; foreach ( $ array as $ key => $ value ) { $ num1 = $ value [ 0 ] ; $ num2 = $ value [ 1 ] ; $ num3 = $ country_array [ $ num1 ] ; $ country_array [ $ num1 ] += 1 ; $ array [ $ key ] [ ] = make_ans_num ( $ num1 , $ num3 ) ; } ksort ( $ array ) ; foreach ( $ array as $ value ) { echo $ value [ 2 ] . " \n " ; } function make_ans_num ( $ num1 , $ num2 ) { $ leftnum = sprintf ( ' %06d ' , $ num1 ) ; $ rightnum = sprintf ( ' %06d ' , $ num2 ) ; return $ leftnum . $ rightnum ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ca = [ ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ c = 0 ; $ t = $ i ; while ( $ t > 0 ) { if ( $ t % 2 !== 0 ) { break ; } else if ( $ t % 2 == 0 ) { $ c ++ ; $ t = $ t / 2 ; } } $ ca = $ ca + array ( $ i => $ c ) ; } $ max = max ( $ ca ) ; echo array_keys ( $ ca , $ max ) [ 0 ] ; ?>
<?php $ abcde = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ abcde [ $ i ] ) ; } fscanf ( STDIN , " %d " , $ k ) ; if ( ( $ abcde [ 4 ] - $ abcde [ 0 ] ) > $ k ) { echo " :( " ; } else { echo " Yay! " ; }
<?php $ cost = explode ( " " , fgets ( STDIN ) ) ; sort ( $ cost ) ; $ answer [ ] = $ cost [ 1 ] + $ cost [ 2 ] - $ cost [ 0 ] * 2 ; $ answer [ ] = $ cost [ 2 ] - $ cost [ 0 ] ; $ answer [ ] = $ cost [ 2 ] * 2 - $ cost [ 1 ] - $ cost [ 0 ] ; sort ( $ answer ) ; if ( $ answer [ 0 ] < 0 ) { $ answer [ 0 ] = - $ answer [ 0 ] ; } echo $ answer [ 0 ] ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x , PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ aaa = [ $ a , $ b , $ c ] ; $ counter = array_count_values ( $ aaa ) ; if ( $ counter [ 5 ] === 2 && $ counter [ 7 ] === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } echo PHP_EOL ;
<?php $ a = fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ start = $ h1 * 60 + $ m1 ; $ end = $ h2 * 60 + $ m2 ; echo ( $ end - $ start - $ k ) ;
<?php $ a = fgets ( STDIN ) ; list ( $ a , $ b , $ c ) = explode ( " " , $ a ) ; if ( $ a + $ b >= $ c ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A == 1 ) $ A += 13 ; if ( $ B == 1 ) $ B += 13 ; if ( $ A == $ B ) { echo " Draw \n " ; } elseif ( $ A > $ B ) { echo " Alice \n " ; } else { echo " Bob \n " ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php $ numbers = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ costs = [ abs ( $ numbers [ 0 ] - $ numbers [ 1 ] ) , abs ( $ numbers [ 0 ] - $ numbers [ 2 ] ) , abs ( $ numbers [ 1 ] - $ numbers [ 2 ] ) , ] ; echo array_sum ( $ costs ) - max ( $ costs ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ ans = $ x * $ x * $ x ; echo $ ans ; ?>
<?php fscanf ( STDIN , ' %d %d ' , $ num , $ goal ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ num ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ num ; $ j ++ ) { $ k = $ goal - $ i - $ j ; if ( $ k >= 0 && $ k <= $ num ) { $ ans ++ ; } } } echo $ ans . " \n " ;
<?php $ N = fgets ( STDIN ) ; $ N = explode ( " " , $ N ) ; $ k = $ N [ 0 ] ; $ s = $ N [ 1 ] ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = array ( ) ; for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { $ s [ ] = $ this -> lineIn ( ) ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { if ( $ i == $ j ) { continue ; } else { $ buf = abs ( $ s [ $ i ] - $ s [ $ j ] ) ; if ( $ buf > $ s [ 5 ] ) { echo " :( \n " ; return false ; } } } } echo " Yay! \n " ; return true ; } } ?>
<?php $ _ = trim ( fgets ( STDIN ) ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ i = 0 ; $ min = 200000 ; foreach ( $ a as $ v ) { if ( $ v <= $ min ) { $ min = $ v ; $ i ++ ; } } echo $ i ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ c , $ d ) ; $ nums = [ $ a , $ b , $ c , $ d ] ; sort ( $ nums ) ; if ( $ nums [ 0 ] === 1 && $ nums [ 1 ] === 4 && $ nums [ 2 ] === 7 && $ nums [ 3 ] === 9 ) { echo ' YES ' ; } else { echo ' NO ' ; } echo " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ zahyos = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ zahyos [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } function pat ( $ a , $ s = ' ' ) { $ r = array ( ) ; if ( count ( $ a ) && is_array ( $ a ) ) { foreach ( $ a as $ k => $ v ) { $ _s = $ s . $ v ; $ _a = $ a ; unset ( $ _a [ $ k ] ) ; $ _r = pat ( $ _a , $ _s ) ; $ r = array_merge ( $ r , $ _r ) ; } } else { $ r [ ] = $ s ; } return $ r ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ a [ ] = $ i ; } $ jyunretu = pat ( $ a ) ; $ sum = 0 ; foreach ( $ jyunretu as $ michi ) { for ( $ i = 0 ; $ i < strlen ( $ michi ) - 1 ; $ i ++ ) { $ city = $ michi [ $ i ] - 1 ; $ ncity = $ michi [ $ i + 1 ] - 1 ; $ sum += sqrt ( ( $ zahyos [ $ ncity ] [ 0 ] - $ zahyos [ $ city ] [ 0 ] ) ** 2 + ( $ zahyos [ $ ncity ] [ 1 ] - $ zahyos [ $ city ] [ 1 ] ) ** 2 ) ; } } echo ( $ sum / count ( $ jyunretu ) ) . " \n " ;
<?php fscanf ( STDIN , " %d " , $ r ) ; $ circle = $ r * $ r * 3 ; $ ans = $ circle / 3 ; echo ( $ ans ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ points = [ ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ input = trim ( fgets ( STDIN ) ) ; $ points [ ] = explode ( ' ' , $ input ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ d ; ++ $ k ) { $ sum += pow ( $ points [ $ j ] [ $ k ] - $ points [ $ i ] [ $ k ] , 2 ) ; } if ( strpos ( sqrt ( $ sum ) , ' . ' ) === false ) { ++ $ count ; } } } echo $ count ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ array_pos = explode ( " " , fgets ( STDIN ) ) ; $ sum_sqr = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum_sqr = $ sum_sqr + $ array_pos [ $ i ] ; } $ p1 = floor ( $ sum_sqr / $ n ) ; $ p2 = $ p1 + 1 ; $ cost1 = 0 ; $ cost2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ cost1 = $ cost1 + pow ( $ array_pos [ $ i ] - $ p1 , 2 ) ; $ cost2 = $ cost2 + pow ( $ array_pos [ $ i ] - $ p2 , 2 ) ; } echo $ cost1 > $ cost2 ? $ cost2 : $ cost1 ;
<?php $ count_500 = trim ( ( fgets ( STDIN ) ) ) ; $ count_100 = trim ( ( fgets ( STDIN ) ) ) ; $ count_50 = trim ( ( fgets ( STDIN ) ) ) ; $ total = intval ( trim ( ( fgets ( STDIN ) ) ) ) ; echo combination ( 50 * 50 * 50 , $ total , $ count_500 , $ count_100 , $ count_50 ) . " \n " ; function combination ( $ max , $ total , $ count_500 , $ count_100 , $ count_50 ) { $ count = 0 ; $ memo = [ ] ; for ( $ j = 0 ; $ j <= $ count_500 ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ count_100 ; $ k ++ ) { for ( $ l = 0 ; $ l <= $ count_50 ; $ l ++ ) { if ( ! array_key_exists ( $ j . ' _ ' . $ k . ' _ ' . $ l , $ memo ) ) { if ( ( 500 * $ j + 100 * $ k + 50 * $ l ) === $ total ) { $ count ++ ; $ memo [ $ j . ' _ ' . $ k . ' _ ' . $ l ] = true ; } else { $ memo [ $ j . ' _ ' . $ k . ' _ ' . $ l ] = false ; } } else { continue ; } } } } return $ count ; }
<?php fscanf ( STDIN , ' %d %d ' , $ dot_num , $ dim_num ) ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { $ input_line = rtrim ( fgets ( STDIN ) ) ; $ dots [ ] = explode ( ' ' , $ input_line ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ dot_num ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ dot_num ; $ j ++ ) { if ( distZ ( $ dots [ $ i ] , $ dots [ $ j ] ) ) { $ cnt ++ ; } } } echo $ cnt ; function distZ ( $ x , $ y ) { $ pdt = 0 ; foreach ( $ x as $ key => $ value ) { $ pdt += ( $ value - $ y [ $ key ] ) ** 2 ; } $ sqrt = $ pdt ** ( 1 / 2 ) ; if ( $ sqrt - ( int ) $ sqrt == 0 ) { return true ; } else { return false ; } }
<?php fscanf ( STDIN , " %d%d%d%d " , $ a , $ b , $ c , $ d ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; echo max ( $ ab , $ cd ) ;
<?php $ a = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a [ $ i ] ) ; } $ ret_list = array ( ) ; for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { $ ret = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ j ) continue ; $ ret += intval ( ceil ( $ a [ $ i ] / 10 ) * 10 ) ; } $ ret += $ a [ $ j ] ; $ ret_list [ ] = $ ret ; } print ( min ( $ ret_list ) . " \n " ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo $ a < 6 ? 0 : ( $ a < 13 ? $ b / 2 : $ b ) ;
<?php fscanf ( STDIN , " %s " , $ str ) ; $ array = str_split ( $ str ) ; if ( $ array [ 2 ] === $ array [ 3 ] && $ array [ 4 ] === $ array [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; } ?>
<?php $ t = trim ( fgets ( STDIN ) ) ; print $ t * $ t * $ t . " \n " ;
<?php $ line = trim ( fgets ( STDIN ) ) ; $ line = explode ( ' ' , $ line ) ; $ a = $ line [ 0 ] ; $ b = $ line [ 1 ] ; $ hr = $ line [ 2 ] ; $ mn = $ line [ 3 ] ; $ short = $ hr ; $ long = $ mn ; $ hour = $ short <= 12 ? $ short : $ short - 12 ; $ minute = $ long ; $ rShort = ( $ hour * ( 360 / 12 ) ) + $ minute * 1 / 2 ; $ rLong = $ minute * ( 360 / 60 ) ; $ ang = abs ( $ rLong - $ rShort ) ; if ( $ ang == 360 ) { echo 0 ; exit ( ) ; } if ( $ ang > 180 ) { $ ang = 360 - $ ang ; } echo sqrt ( ( $ a * $ a ) + ( $ b * $ b ) - 2 * $ a * $ b * cos ( deg2rad ( $ ang ) ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo $ a < 9 && $ b < 9 ? " Yay! " : " :( " ;
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ x = 800 * $ n ; $ y = intdiv ( $ n , 15 ) * 200 ; print $ x - $ y ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ cnt = 0 ; for ( $ cntA = 0 ; $ cntA <= $ a ; $ cntA ++ ) { $ sumA = $ cntA * 500 ; for ( $ cntB = 0 ; $ cntB <= $ b ; $ cntB ++ ) { $ sumB = $ cntB * 100 ; for ( $ cntC = 0 ; $ cntC <= $ c ; $ cntC ++ ) { $ sumC = $ cntC * 50 ; $ sum = $ sumA + $ sumB + $ sumC ; if ( $ sum === $ x ) { $ cnt ++ ; } } } } printf ( " %d \n " , $ cnt ) ;
<?php $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; $ c [ ] = ints ( ) ; for ( $ a [ 0 ] = 0 ; $ a [ 0 ] <= 100 ; $ a [ 0 ] ++ ) { $ b [ 0 ] = $ c [ 0 ] [ 0 ] - $ a [ 0 ] ; $ b [ 1 ] = $ c [ 0 ] [ 1 ] - $ a [ 0 ] ; $ b [ 2 ] = $ c [ 0 ] [ 2 ] - $ a [ 0 ] ; $ a [ 1 ] = $ c [ 1 ] [ 0 ] - $ b [ 0 ] ; $ a [ 2 ] = $ c [ 2 ] [ 0 ] - $ b [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ $ i ] [ $ j ] !== $ a [ $ i ] + $ b [ $ j ] ) continue 3 ; } } exit ( ' Yes ' ) ; } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , ' %d ' , $ n ) ; printf ( " %d \n " , $ n * $ n * $ n ) ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ;
<?php $ s = fgets ( STDIN ) ; function check ( $ input ) { $ s = explode ( " " , $ input ) ; sort ( $ s ) ; if ( intval ( $ s [ 0 ] ) === 5 && intval ( $ s [ 1 ] ) === 5 && intval ( $ s [ 2 ] ) === 7 ) { return true ; } else { return false ; } } if ( check ( $ s ) ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php $ base = 1 ; fscanf ( STDIN , " %d %d " , $ N , $ P ) ; if ( $ N == 1 ) { echo $ P ; return 0 ; } if ( $ N > 50 ) { echo ' 1 ' ; return 0 ; } while ( pow ( $ base , $ N ) <= $ P ) { if ( $ P % ( pow ( $ base , $ N ) ) == 0 ) { $ ans = $ base ; } $ base ++ ; } echo $ ans ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ e = preg_split ( ' /\s/ ' , fgets ( STDIN ) ) ; $ en = [ $ e [ 0 ] ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ en [ $ i ] = min ( $ en [ $ i - 1 ] , $ e [ $ i ] ) ; } $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ ii = $ e [ $ i ] ; $ ij = $ en [ $ i ] ; if ( $ ii <= $ ij ) $ cnt ++ ; } echo $ cnt ;
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ factor = array_values ( array_unique ( $ s ) ) ; $ ans = count ( $ factor ) ; if ( $ ans == 4 ) { print ( " Four \n " ) ; } else { print ( " Three \n " ) ; } ?>
<?php $ N = fgets ( STDIN ) ; if ( strtotime ( ' 2019/04/30 ' ) < strtotime ( $ N ) ) { print ( ' TBD ' ) ; } else { print ( ' Heisei ' ) ; }
<?php fscanf ( STDIN , ' %d ' , $ a ) ; fscanf ( STDIN , ' %d ' , $ b ) ; fscanf ( STDIN , ' %d ' , $ c ) ; fscanf ( STDIN , ' %d ' , $ x ) ; define ( ' A_RATE ' , 500 ) ; define ( ' B_RATE ' , 100 ) ; define ( ' C_RATE ' , 50 ) ; $ cnt = 0 ; for ( $ ia = 0 ; $ ia <= $ a ; $ ia ++ ) { for ( $ ib = 0 ; $ ib <= $ b ; $ ib ++ ) { for ( $ ic = 0 ; $ ic <= $ c ; $ ic ++ ) { $ checking_money = A_RATE * $ ia + B_RATE * $ ib + C_RATE * $ ic ; if ( $ checking_money === $ x ) { $ cnt ++ ; } } } } echo $ cnt ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ A , $ B , $ H , $ M ) ; $ minutes = $ H * 60 + $ M ; $ A_degree = ( pi ( ) * $ minutes / 360 ) ; $ B_degree = ( pi ( ) * $ minutes / 30 ) ; $ c_degree = $ B_degree - $ A_degree ; $ C = sqrt ( $ A * $ A + $ B * $ B - 2 * $ A * $ B * cos ( $ c_degree ) ) ; echo $ C , " \n " ;
<?php class AverageLength { var $ N , $ x , $ y ; function __construct ( ) { fscanf ( STDIN , " %d " , $ this -> N ) ; for ( $ i = 0 ; $ i < $ this -> N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ this -> x [ $ i ] , $ this -> y [ $ i ] ) ; } } function __invoke ( ) { $ dist = 0 ; for ( $ i = 0 ; $ i < $ this -> N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ this -> N ; $ j ++ ) { $ dist += sqrt ( pow ( $ this -> x [ $ i ] - $ this -> x [ $ j ] , 2 ) + pow ( $ this -> y [ $ i ] - $ this -> y [ $ j ] , 2 ) ) ; } } $ paths = $ this -> fact ( $ this -> N ) ; $ path_count = $ paths * ( $ this -> N - 1 ) ; $ p = $ this -> N * ( $ this -> N - 1 ) / 2 ; $ ans = $ path_count / $ p * $ dist / $ paths ; return $ ans ; } function fact ( $ N ) { $ ret = 1 ; for ( $ i = 2 ; $ i <= $ this -> N ; $ i ++ ) { $ ret *= $ i ; } return $ ret ; } } $ obj = new AverageLength ( ) ; echo $ obj ( ) ;
<?php fscanf ( STDIN , " %d %d " , $ old , $ yen ) ; if ( 5 < $ old && $ old < 13 ) { echo $ yen / 2 ; } elseif ( $ old < 6 ) { echo 0 ; } else { echo $ yen ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ V ) ; fscanf ( STDIN , " %d %d " , $ B , $ W ) ; fscanf ( STDIN , " %d " , $ T ) ; echo ( ( $ W >= $ V ) || ( $ T < abs ( $ A - $ B ) / ( $ V - $ W ) ) ) ? " NO " : " YES " ;
<?php $ array = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ array [ 2 ] === $ array [ 3 ] && $ array [ 4 ] === $ array [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ num = fgets ( STDIN ) ; echo pow ( $ num , 3 ) . " \n " ;
<?php list ( $ A , $ B , $ H , $ M ) = array_map ( function ( $ n ) { return ( int ) $ n ; } , explode ( ' ' , fgets ( STDIN ) ) ) ; $ long_omega = 0.5 ; $ short_omega = 6.0 ; $ min = $ H * 60 + $ M ; $ long_angle = $ long_omega * $ min ; $ short_angle = $ short_omega * $ min % 360.0 ; $ angle = abs ( $ long_angle - $ short_angle ) ; echo sqrt ( $ A * $ A + $ B * $ B - 2 * $ A * $ B * cos ( 2 * pi ( ) * ( $ angle / 360.0 ) ) ) ;
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ K , $ S ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ K + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ K + 1 ; $ j ++ ) { $ z = $ S - $ i - $ j ; if ( 0 <= $ z && $ z <= $ K ) $ count ++ ; } } echo $ count ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ d = [ ] ; foreach ( $ a as $ k => $ v ) { $ d [ $ k ] = $ a [ $ k ] - $ b [ $ k ] ; } $ plus = [ ] ; $ minus = [ ] ; foreach ( $ d as $ i ) { if ( $ i > 0 ) { $ plus [ ] = $ i ; } elseif ( $ i < 0 ) { $ minus [ ] = $ i ; } } if ( array_sum ( $ d ) < 0 ) { echo - 1 . " \n " ; } elseif ( count ( $ minus ) == 0 ) { echo 0 . " \n " ; } else { arsort ( $ plus ) ; $ sum_minus = array_sum ( $ minus ) ; $ s = 0 ; $ cnt = 0 ; foreach ( $ plus as $ p ) { $ cnt ++ ; $ s += $ p ; if ( $ s >= - $ sum_minus ) { break ; } } echo count ( $ minus ) + $ cnt . " \n " ; }
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; $ sum = $ A + $ B ; echo ceil ( $ sum / 2 ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ X ) ; $ Xa = str_split ( $ X ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ Xa ) ; $ i ++ ) { $ sum += $ Xa [ $ i ] ; } if ( $ X % $ sum == 0 ) { echo ' Yes ' ; } else { echo ' No ' ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; echo pow ( $ input , 3 ) . " \n " ;
<?php $ stdin = fgets ( STDIN ) ; $ cube = ( $ stdin * $ stdin * $ stdin ) ; echo $ cube ; echo " \n " ; ?>
<?php $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ b = ( int ) trim ( fgets ( STDIN ) ) ; $ c = ( int ) trim ( fgets ( STDIN ) ) ; $ d = ( int ) trim ( fgets ( STDIN ) ) ; $ e = ( int ) trim ( fgets ( STDIN ) ) ; $ k = ( int ) trim ( fgets ( STDIN ) ) ; if ( $ e - $ a > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php list ( $ A , $ V ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ B , $ W ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ T ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sa = abs ( $ A - $ B ) ; $ sokudo = $ V - $ W ; if ( $ T * $ sokudo >= $ sa ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a == 1 ) $ a = 14 ; if ( $ b == 1 ) $ b = 14 ; if ( $ a > $ b ) { echo " Alice " ; } elseif ( $ a == $ b ) { echo " Draw " ; } else { echo " Bob " ; }
<?php $ server = " php: $ local = " input . txt " ; $ handle = fopen ( $ server , " r " ) ; $ t = trim ( fgets ( $ handle ) ) ; $ x = trim ( fgets ( $ handle ) ) ; $ a = explode ( ' ' , $ x ) ; $ count = 0 ; $ j = 0 ; if ( $ t == 1 ) echo " 1 " ; else { $ count = 1 ; $ te = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ t ; $ i ++ ) { if ( $ a [ $ i ] <= $ te ) { $ te = $ a [ $ i ] ; $ count ++ ; } } echo $ count ; } ?>
<?php $ input = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ input [ 2 ] === $ input [ 3 ] && $ input [ 4 ] === $ input [ 5 ] ) { echo ' Yes ' ; return ; } echo ' No ' ; ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 3 ] == $ s [ 2 ] && $ s [ 4 ] == $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php $ a = fgets ( STDIN ) ; $ aaa = $ a * $ a * $ a ; echo $ aaa ; ?>
<?php $ input = fgets ( STDIN ) ; if ( $ input [ 2 ] == $ input [ 3 ] && $ input [ 4 ] == $ input [ 5 ] ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php function dis ( $ x , $ y ) { $ len = count ( $ x ) ; $ total = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ sa = abs ( $ x [ $ i ] - $ y [ $ i ] ) ; $ total += $ sa * $ sa ; } $ total = sqrt ( $ total ) ; $ total_int = ( int ) ( $ total ) ; return ( $ total == $ total_int ) ; } fscanf ( STDIN , " %d %d " , $ n , $ d ) ; while ( $ line = trim ( fgets ( STDIN ) ) ) { $ x [ ] = explode ( " " , $ line ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( dis ( $ x [ $ i ] , $ x [ $ j ] ) ) { $ count ++ ; } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ pow2 = [ ] ; for ( $ i = 0 ; 2 ** $ i <= 100 ; $ i ++ ) { $ pow2 [ ] = 2 ** $ i ; } rsort ( $ pow2 ) ; foreach ( $ pow2 as $ v ) { if ( $ v <= $ n ) { echo $ v . " \n " ; break ; } }
<?php fscanf ( STDIN , ' %d %d ' , $ A , $ B ) ; if ( $ A <= 5 ) { echo 0 ; } elseif ( $ A <= 12 ) { echo $ B / 2 ; } else { echo $ B ; }
<?php error_reporting ( 0 ) ; $ N = trim ( fgets ( STDIN ) ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( in_array ( " Y " , $ S ) ) { printf ( " Four \n " ) ; } else { printf ( " Three \n " ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a ) - min ( $ a ) ;
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' 0 0 ' ) { sscanf ( $ line , ' %d %d ' , $ n , $ m ) ; $ arr = array_fill ( 0 , $ n , 1 ) ; $ cnt = 0 ; $ i = $ n - 1 ; while ( $ cnt < $ n - 1 ) { for ( $ j = 0 ; $ j < $ m ; ) { $ i = $ i + 1 === $ n ? 0 : $ i + 1 ; if ( $ arr [ $ i ] ) { $ j ++ ; } } $ arr [ $ i ] = 0 ; $ cnt ++ ; } echo array_search ( 1 , $ arr ) + 1 , PHP_EOL ; }
<?php $ number = trim ( fgets ( STDIN ) ) ; $ wNumber = $ number ; $ digitSum = 0 ; while ( $ number > 0 ) { $ digitSum += $ number % 10 ; $ number /= 10 ; } if ( $ wNumber % $ digitSum == 0 ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . PHP_EOL ;
<?php $ str = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ str [ 2 ] == $ str [ 3 ] and $ str [ 4 ] == $ str [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; ++ $ this -> pointer ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ h = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ cos_a = null ; $ hour_needle_degree_from_top = ( 60 * $ h + $ m ) / ( 60 * 12 ) * 360 ; $ minute_needle_degree_from_top = $ m / 60 * 360 ; $ deg_c = abs ( $ hour_needle_degree_from_top - $ minute_needle_degree_from_top ) ; $ cos_c = cos ( deg2rad ( $ deg_c ) ) ; $ c_square = $ a * $ a + $ b * $ b - 2 * $ a * $ b * $ cos_c ; $ c = sqrt ( $ c_square ) ; echo $ c . PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) fscanf ( STDIN , ' %d %d ' , $ x [ ] , $ y [ ] ) ; $ sum = 0.0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ sum += sqrt ( ( $ x [ $ i ] - $ x [ $ j ] ) ** 2 + ( $ y [ $ i ] - $ y [ $ j ] ) ** 2 ) ; } } echo $ sum * ( $ n - 1 ) / nCr ( $ n , 2 ) ; function fac ( $ n ) { if ( $ n === 1 ) return 1 ; return $ n * fac ( $ n - 1 ) ; } function nPr ( $ n , $ r ) { if ( $ r === 0 ) return 1 ; return fac ( $ n ) / fac ( $ n - $ r ) ; } function nCr ( $ n , $ r ) { $ r = min ( $ r , $ n - $ r ) ; if ( $ r === 0 ) return 1 ; return nPr ( $ n , $ r ) / fac ( $ r ) ; }
<?php $ a = fgets ( STDIN ) ; fgets ( STDIN ) ; fgets ( STDIN ) ; fgets ( STDIN ) ; $ e = fgets ( STDIN ) - $ a ; echo $ e > fgets ( STDIN ) ? " :( " : " Yay! " ;
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ a [ $ i ] = ( int ) $ a [ $ i ] ; } sort ( $ a ) ; echo ( $ a [ 2 ] - $ a [ 1 ] ) + ( $ a [ 1 ] - $ a [ 0 ] ) . PHP_EOL ;
<?php $ A = trim ( fgets ( STDIN ) ) ; $ B = trim ( fgets ( STDIN ) ) ; $ C = trim ( fgets ( STDIN ) ) ; $ X = trim ( fgets ( STDIN ) ) ; $ r = array ( ) ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( ( $ i * 500 + $ j * 100 + $ k * 50 ) == $ X ) { $ r [ ] = $ i . " , " . $ j . " , " . $ k ; } } } } printf ( " %d \n " , count ( $ r ) ) ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { $ sum = ( $ i * 500 ) + ( $ j * 100 ) + ( $ k * 50 ) ; if ( $ x == $ sum ) { $ count ++ ; } } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count ;
<?php [ $ A , $ B ] = fscanf ( STDIN , " %d%d " ) ; if ( $ A === $ B ) { echo " Draw " ; exit ; } if ( $ A === 1 || ( $ A > $ B && $ B !== 1 ) ) { echo " Alice " ; exit ; } else { echo " Bob " ; exit ; }
<?php ( int ) $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ x = array_map ( ' intval ' , str_split ( $ n ) ) ; if ( $ n % array_sum ( $ x ) === 0 ) { echo ' Yes ' . " \n " ; } else { echo ' No ' . " \n " ; }
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ sh , $ sm , $ eh , $ em , $ k ) ; $ start = $ sh * 60 + $ sm ; $ end = $ eh * 60 + $ em ; $ end -= $ start ; $ end -= $ k ; echo $ end ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ angvelh = ( 360 * ( pi ( ) / 180 ) ) / ( 12 * 60 ) ; $ angvelm = ( 360 * ( pi ( ) / 180 ) ) / 60 ; $ angh = $ angvelh * ( $ h * 60 + $ m ) ; $ angm = $ angvelm * $ m ; echo sqrt ( pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( abs ( $ angh - $ angm ) ) ) ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ k >= ( $ e - $ a ) ) { echo " Yay! " ; } else { echo " :( " ; }
<?php $ n = fgets ( STDIN ) ; $ a = explode ( ' ' , fgets ( STDIN ) ) ; sort ( $ a ) ; echo $ a [ $ n - 1 ] - $ a [ 0 ] ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ inputs = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ max = max ( $ inputs ) ; $ decs = [ ] ; for ( $ i = 0 ; $ max > $ i ; $ i ++ ) { $ tmp = 0 ; foreach ( $ inputs as $ input ) { $ x = $ input - ( $ i + 1 ) ; $ y = pow ( $ x , 2 ) ; #echo join(", ", [$input, $i, $n, $x, $y]) . "\n"; $tmp += $y; } #echo "=" . $tmp . "\n"; $decs[] = $tmp; } #echo join(",", $decs) . "\n"; echo min($decs);
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ score = 0 ; $ ans = array ( ) ; for ( $ i = 1 ; $ i < 100000 ; $ i ++ ) { $ score += $ i ; $ ans [ ] = $ i ; if ( $ score === $ N ) { echo implode ( " " , $ ans ) ; echo PHP_EOL ; exit ; } if ( $ score > $ N ) { $ diff = abs ( $ score - $ N ) ; unset ( $ ans [ $ diff - 1 ] ) ; echo implode ( " " , $ ans ) ; echo PHP_EOL ; exit ; } }
<?php fscanf ( STDIN , " %s " , $ s ) ; $ arr = str_split ( $ s ) ; if ( $ arr [ 2 ] == $ arr [ 3 ] && $ arr [ 4 ] == $ arr [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ X ) ; $ zan1 = 0 ; $ j = 0 ; for ( $ c500 = 0 ; $ c500 <= $ A ; $ c500 ++ ) { $ zan1 = $ X - $ c500 * 500 ; if ( $ zan1 < 0 ) { break ; } for ( $ c100 = 0 ; $ c100 <= $ B ; $ c100 ++ ) { $ zan2 = $ zan1 - $ c100 * 100 ; if ( $ zan2 < 0 ) { break ; } if ( $ zan2 % 50 == 0 or $ zan2 == 0 ) { if ( $ zan2 / 50 <= $ C ) { $ j ++ ; } } } } echo $ j ; echo " \n " ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ M = max ( $ a ) ; $ m = min ( $ a ) ; echo $ M - $ m ; ?>
<?php fscanf ( STDIN , " %d%d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } elseif ( $ A >= 6 ) { echo intdiv ( $ B , 2 ) ; } else { echo " 0 " ; } ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; print pow ( $ input , 3 ) ; ?>
<?php [ $ A , $ V ] = fscanf ( STDIN , " %d%d " ) ; [ $ B , $ W ] = fscanf ( STDIN , " %d%d " ) ; [ $ T ] = fscanf ( STDIN , " %d " ) ; if ( $ A === $ B ) { echo " YES " ; exit ; } if ( $ V <= $ W ) { echo " NO " ; exit ; } $ saD = abs ( $ B - $ A ) ; $ saV = $ V - $ W ; if ( $ saV * $ T >= $ saD ) { echo " YES " ; } else { echo " NO " ; }
<?php $ A = trim ( fgets ( STDIN ) ) ; $ B = trim ( fgets ( STDIN ) ) ; $ C = trim ( fgets ( STDIN ) ) ; $ X = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ X ) { $ count ++ ; } } } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ b = array_map ( " divCount " , $ a ) ; if ( min ( $ b ) == max ( $ b ) ) { echo intdiv ( intdiv ( $ m , lcmAll ( $ a ) / 2 ) + 1 , 2 ) ; } else { echo 0 ; } function divCount ( $ n ) { for ( $ i = 0 ; $ i < 100 ; $ i ++ ) { if ( $ n >> $ i & 1 == 1 ) { return $ i ; } } } function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function lcmAll ( $ array ) { $ lcm = $ array [ 0 ] ; for ( $ i = 1 ; $ i < count ( $ array ) ; $ i ++ ) { $ lcm = lcm ( $ lcm , $ array [ $ i ] ) ; } $ lcm = min ( $ lcm , 10 ** 10 ) ; return $ lcm ; } function lcm ( $ a , $ b ) { return $ a / gcd ( $ a , $ b ) * $ b ; }
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ b = trim ( fgets ( STDIN ) ) ; $ array = explode ( ' ' , $ b ) ; $ unique = array_unique ( $ array ) ; echo ( count ( $ unique ) == 3 ) ? ' Three ' : ' Four ' ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; if ( $ K == 1 ) { echo " 0 \n " ; return ; } echo ( $ N - $ K ) . " \n " ;
<?php echo pow ( trim ( fgets ( STDIN ) ) , 2 ) ;
<?php $ input_array = array ( ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ input_array [ ] = trim ( fgets ( STDIN ) ) ; $ num_500 = $ input_array [ 3 ] / 500 ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ num_500 ; $ i ++ ) { $ leftover1 = $ input_array [ 3 ] - 500 * $ i ; $ num_100 = $ leftover1 / 100 ; for ( $ j = 0 ; $ j <= $ num_100 ; $ j ++ ) { $ leftover2 = $ leftover1 - 100 * $ j ; $ num_50 = $ leftover2 / 50 ; if ( $ num_50 <= $ input_array [ 2 ] && $ j <= $ input_array [ 1 ] && $ i <= $ input_array [ 0 ] ) { $ ans = $ ans + 1 ; } } } echo ( $ ans ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ w = 0 ; $ x = 0 ; $ y = 0 ; $ z = 0 ; foreach ( $ a as $ value ) { if ( $ value == 1 ) { $ w = 1 ; } elseif ( $ value == 4 ) { $ x = 1 ; } elseif ( $ value == 7 ) { $ y = 1 ; } elseif ( $ value == 9 ) { $ z = 1 ; } } if ( $ w + $ x + $ y + $ z == 4 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php $ n = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ n [ 0 ] + $ n [ 1 ] >= $ n [ 2 ] ) { echo ' Yes ' . PHP_EOL ; } else { echo ' No ' . PHP_EOL ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ suff = 0 ; $ ovr = 0 ; $ S = 0 ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ suff ++ ; $ S += $ B [ $ i ] - $ A [ $ i ] ; } else { $ arr [ ] = $ A [ $ i ] - $ B [ $ i ] ; $ ovr += $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ suff === 0 ) { $ ans = 0 ; } else if ( $ ovr < $ S ) { $ ans = - 1 ; } else { sort ( $ arr ) ; $ ans = $ suff ; while ( $ S > 0 ) { $ ans ++ ; $ tmp = array_pop ( $ arr ) ; $ S -= $ tmp ; } } echo $ ans ;
<?php while ( $ line = trim ( fgets ( STDIN ) ) ) { list ( $ no , $ w , $ h ) = explode ( ' , ' , $ line ) ; if ( 25 <= ( $ w / ( $ h * $ h ) ) ) { echo $ no . " \n " ; } }
<?php fscanf ( STDIN , ' %d%d%d%d ' , $ a , $ b , $ c , $ d ) ; echo ( ( $ a * $ b ) > ( $ c * $ d ) ) ? $ a * $ b : $ c * $ d ;
<?php fscanf ( STDIN , " %d " , $ a ) ; function CalcCircle ( $ r ) { $ PI = 3.14 ; return ( $ PI * $ r * $ r ) ; } $ res = CalcCircle ( $ a ) / CalcCircle ( 1 ) ; echo $ res . " \n " ; ?>
<?php $ sc = new Scanner ( ) ; $ coin_500 = $ sc -> nextInt ( ) ; $ coin_100 = $ sc -> nextInt ( ) ; $ coin_50 = $ sc -> nextInt ( ) ; $ total = $ sc -> nextInt ( ) ; $ case = 0 ; $ coin_total = 0 ; for ( $ i = 0 ; $ coin_500 >= $ i ; $ i ++ ) { for ( $ j = 0 ; $ coin_100 >= $ j ; $ j ++ ) { for ( $ k = 0 ; $ coin_50 >= $ k ; $ k ++ ) { $ coin_total = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ coin_total === $ total ) { $ case ++ ; } } } } out :: println ( $ case ) ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } }
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ n [ 0 ] * $ n [ 1 ] , $ n [ 2 ] * $ n [ 3 ] ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; printf ( " %d \n " , pow ( $ n , 3 ) ) ;
<?php $ s = fgets ( STDIN ) ; echo $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ? " Yes " : " No " ;
<?php $ inputNum = trim ( fgets ( STDIN ) ) ; echo pow ( $ inputNum , 3 ) ; ?>
<?php while ( $ input = trim ( fgets ( STDIN ) ) ) { echo array_sum ( str_split ( $ input ) ) . PHP_EOL ; }
<?php $ eat_count = trim ( fgets ( STDIN ) ) ; $ price = $ eat_count * 800 ; if ( $ eat_count / 15 > 0 ) $ price -= intval ( $ eat_count / 15 ) * 200 ; echo $ price ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_input = explode ( ' ' , fgets ( STDIN ) ) ; $ x = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = ( int ) $ x_input [ $ i ] ; } sort ( $ x ) ; $ larger = $ x [ $ n / 2 ] ; $ smaller = $ x [ $ n / 2 - 1 ] ; foreach ( $ x_input as $ input ) { if ( ( int ) $ input <= $ smaller ) { echo $ larger , " \n " ; continue ; } echo $ smaller , " \n " ; }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; } fscanf ( STDIN , " %d " , $ k ) ; if ( $ d [ 4 ] - $ d [ 0 ] > $ k ) { echo ' :( ' , PHP_EOL ; exit ; } echo ' Yay! ' , PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ tasks = [ $ a , $ b , $ c ] ; sort ( $ tasks ) ; echo abs ( $ tasks [ 0 ] - $ tasks [ 1 ] ) + abs ( $ tasks [ 1 ] - $ tasks [ 2 ] ) ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( " " , fgets ( STDIN ) ) ; $ ans = 999999999 ; for ( $ i = 0 ; $ i <= 100 ; $ i ++ ) { $ dist = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ dist += ( $ i - $ x [ $ j ] ) * ( $ i - $ x [ $ j ] ) ; } $ ans = min ( $ ans , $ dist ) ; } echo $ ans ; ?>
<?php fscanf ( STDIN , " %d %d " , $ t , $ b ) ; if ( $ t <= 5 ) { echo 0 ; } elseif ( $ t >= 6 && $ t <= 12 ) { echo $ b / 2 ; } else { echo $ b ; } ?>
<?php $ A = trim ( fgets ( STDIN ) ) ; $ B = trim ( fgets ( STDIN ) ) ; $ C = trim ( fgets ( STDIN ) ) ; $ X = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { $ total = ( 500 * $ i ) + ( 100 * $ j ) + ( 50 * $ k ) ; if ( $ X == $ total ) { $ count ++ ; } } } } echo " $ count \n " ; exit ; ?>
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php list ( $ k , $ s ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { if ( $ i + $ j <= $ s && $ k >= $ s - $ i - $ j ) { $ ans ++ ; } } } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ cities = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ prefecture , $ year ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ cities [ $ prefecture ] [ $ year ] = $ i ; } $ ans = [ ] ; foreach ( $ cities as $ prefecture => $ value ) { ksort ( $ value ) ; $ city = array_values ( $ value ) ; $ id = 1 ; foreach ( $ value as $ y => $ count ) { $ ans [ $ count ] [ ' prefecture ' ] = $ prefecture ; $ ans [ $ count ] [ ' id ' ] = $ id ; $ id ++ ; } } ksort ( $ ans ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { echo str_pad ( $ ans [ $ i ] [ ' prefecture ' ] , 6 , " 0 " , STR_PAD_LEFT ) . str_pad ( $ ans [ $ i ] [ ' id ' ] , 6 , " 0 " , STR_PAD_LEFT ) . " \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; $ x = ( int ) $ x ; $ x = $ x * $ x * $ x ; echo " $ x \n " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a >= 13 ) { echo $ b ; } elseif ( $ a > 5 ) { echo $ b / 2 ; } else { echo 0 ; }
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ m = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ m [ ] = $ this -> lineIn ( ) ; } $ aa = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ buf = $ m [ $ i ] % 10 ; $ buf = 0 == $ buf ? 0 : abs ( 10 - $ buf ) ; $ aa [ ] = $ buf ; } $ lf = min ( $ aa ) ; $ hf = max ( $ aa ) ; $ sp = false ; if ( $ lf == $ hf ) { $ sp = true ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ sp ) { $ m [ $ i ] += $ aa [ $ i ] ; } else { if ( $ hf != $ aa [ $ i ] ) { $ m [ $ i ] += $ aa [ $ i ] ; } } } if ( $ sp ) { $ m [ 0 ] -= $ aa [ 0 ] ; } $ ans = array_sum ( $ m ) ; echo $ ans . " \n " ; } } ?>
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ X ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k === $ X ) { $ count ++ ; } } } } echo $ count ; echo PHP_EOL ;
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ areas [ 0 ] = $ nums [ 0 ] * $ nums [ 1 ] ; $ areas [ 1 ] = $ nums [ 2 ] * $ nums [ 3 ] ; echo $ areas [ 0 ] > $ areas [ 1 ] ? $ areas [ 0 ] : $ areas [ 1 ] ; ?>
<?php $ data = explode ( " / " , trim ( fgets ( STDIN ) ) ) ; $ check = 1556550000 ; $ time = mktime ( 0 , 0 , 0 , $ data [ 1 ] , $ data [ 2 ] , $ data [ 0 ] ) ; $ result = " TBD " ; if ( $ time <= $ check ) { $ result = " Heisei " ; } echo $ result ;
<?php fscanf ( STDIN , ' %s ' , $ S ) ; if ( $ S <= ' 2019/04/30 ' ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ a = ( $ a + 12 ) % 14 ; $ b = ( $ b + 12 ) % 14 ; if ( $ a > $ b ) { echo ' Alice ' ; } elseif ( $ a < $ b ) { echo ' Bob ' ; } else { echo ' Draw ' ; }
<?php list ( $ n ) = ints ( ) ; $ ans = 1 ; while ( $ ans * 2 <= $ n ) $ ans *= 2 ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ distance = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ distance += pow ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] , 2 ) ; } $ a = ceil ( sqrt ( $ distance ) ) ; if ( ( $ a * $ a ) == $ distance ) { $ ans ++ ; } } } echo $ ans ;
<?php $ r = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ nums [ 0 ] == $ nums [ 1 ] ) { echo ' Draw ' ; } else if ( $ nums [ 0 ] == 1 ) { echo ' Alice ' ; } else if ( $ nums [ 1 ] == 1 ) { echo ' Bob ' ; } else if ( $ nums [ 0 ] > $ nums [ 1 ] ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; define ( ' DEBUG ' , false ) ; fscanf ( STDIN , " %d %d %d " , $ A , $ B , $ C ) ; if ( $ A + $ B + $ C === 17 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ ans = 0 ; for ( $ x = 0 ; $ x <= $ S ; $ x ++ ) { for ( $ y = $ x ; $ x + $ y <= $ S ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( $ x > $ K || $ y > $ K || $ z > $ K ) continue ; if ( $ z < $ y ) continue ; $ a1 = $ x === $ y ; $ a2 = $ x === $ z ; $ a3 = $ y === $ z ; $ aa = $ a1 + $ a2 + $ a3 ; switch ( $ aa ) { case 3 : $ ans += 1 ; break ; case 1 : $ ans += 3 ; break ; case 0 : $ ans += 6 ; break ; } } } echo $ ans . PHP_EOL ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ n = $ sc -> nextInt ( ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = $ i + 1 ; } $ arr2 = $ arr ; $ key = 0 ; $ cnt_max = 0 ; for ( $ i = 0 ; $ i < count ( $ arr2 ) ; $ i ++ ) { $ cnt = 0 ; while ( $ arr2 [ $ i ] % 2 === 0 ) { $ arr2 [ $ i ] /= 2 ; $ cnt ++ ; } if ( $ cnt_max <= $ cnt ) { $ cnt_max = $ cnt ; $ key = $ i ; } } echo $ arr [ $ key ] ;
<?php fscanf ( STDIN , ' %d %d %d %d ' , $ a , $ b , $ h , $ m ) ; $ y = $ m / 60 ; $ x = ( $ h + $ y ) / 12 ; $ rad = deg2rad ( ( $ x - $ y ) * 360 ) ; $ ans = sqrt ( $ a ** 2 + $ b ** 2 - 2 * $ a * $ b * cos ( $ rad ) ) ; echo $ ans ;
<?php $ num = trim ( fgets ( STDIN ) ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ num ) ; $ i ++ ) { $ sum += $ num [ $ i ] ; } echo $ num % $ sum == 0 ? " Yes " : " No " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ v ) ; fscanf ( STDIN , " %d %d " , $ b , $ w ) ; fscanf ( STDIN , " %d " , $ t ) ; if ( $ b < 0 ) { $ bb = - 1 * $ t * $ w + $ b ; $ aa = - 1 * $ t * $ v + $ a ; } else { $ bb = $ t * $ w + $ b ; $ aa = $ t * $ v + $ a ; } if ( abs ( $ aa ) - abs ( $ bb ) >= 0 ) { echo " YES " ; } else { echo " NO " ; }
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ input = preg_split ( " / / " , trim ( fgets ( STDIN ) ) ) ; for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ x [ $ i ] [ $ j ] = $ input [ $ j ] ; } } $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ score = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ score += ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) * ( $ x [ $ j ] [ $ k ] - $ x [ $ i ] [ $ k ] ) ; } if ( ctype_digit ( strval ( sqrt ( $ score ) ) ) ) { $ count ++ ; } } } echo ( $ count ) ;
<?php $ s = trim ( fgets ( STDIN ) ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php class In { private $ buf = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function nextLine ( ) { $ ret = ' ' ; if ( $ this -> hasNext ( ) ) { while ( $ this -> hasNext ( ) ) { $ ret .= $ this -> next ( ) ; } } else { $ ret = trim ( fgets ( STDIN ) ) ; } return $ ret ; } public function next ( ) { if ( ! $ this -> hasNext ( ) ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> buf = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> buf ) ; $ this -> pointer = 0 ; } return $ this -> buf [ $ this -> pointer ++ ] ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class Out { public function println ( $ str = ' ' ) { echo $ str . PHP_EOL ; } } $ in = new In ( ) ; $ out = new Out ( ) ; $ N = $ in -> nextInt ( ) ; $ i = 1 ; while ( $ i * 2 <= $ N ) { $ i *= 2 ; } $ out -> println ( $ i ) ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ n = intval ( $ stdin ) ; print ( $ n * $ n * $ n ) ; ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; for ( $ i = - 300 ; $ i <= 300 ; ++ $ i ) { for ( $ j = - 300 ; $ j <= 300 ; ++ $ j ) { $ tmp = pow ( $ i , 5 ) - pow ( $ j , 5 ) ; if ( $ tmp == $ x ) { echo " $ i $ j " , PHP_EOL ; break 2 ; } } }
<?php $ stdin = fopen ( ' php: fscanf($stdin, "%d", $a); fscanf($stdin, "%d", $b); fscanf($stdin, "%d", $c); fscanf($stdin, "%d", $x); $count = 0; for ($i=0; $i<=$a; $i++) { for ($j=0; $j<=$b; $j++) { for ($k=0; $k<=$c; $k++) { $sum = $i*500 + $j*100 + $k * 50; if ($sum == $x) { $count++; } } } } echo $count.PHP_EOL;
<?php fscanf ( STDIN , " %d " , $ s ) ; $ result = $ s * $ s ; echo $ result ; ?>
<?php fscanf ( STDIN , " %d %d " , $ max , $ target ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ max ; $ j ++ ) { $ k = $ target - $ i - $ j ; if ( $ k >= 0 && $ k <= $ max ) { $ cnt ++ ; } } } echo $ cnt . " \n " ; ?>
<?php $ r = fgets ( STDIN ) ; echo $ r * $ r ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; echo $ a * $ a ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ array [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ ans = 0 ; for ( $ i = 0 ; $ i < ( $ n - 1 ) ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ square_sum = 0 ; foreach ( $ array [ $ i ] as $ index => $ value ) { $ square_sum += pow ( $ value - $ array [ $ j ] [ $ index ] , 2 ) ; } $ dist = pow ( $ square_sum , 0.5 ) ; if ( ceil ( $ dist ) == floor ( $ dist ) ) { $ ans ++ ; } } } echo $ ans ;
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; echo max ( $ a , $ b , $ c ) - min ( $ a , $ b , $ c ) ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( ( float ) $ a + ( float ) $ b ) / 2 ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; echo PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ _p , $ y [ ] ) ; $ p [ ] = $ _p - 1 ; $ c [ ] = $ i ; } array_multisort ( $ p , $ y , $ c ) ; $ j = 1 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( ( $ p [ $ i - 1 ] ?? $ p [ $ i ] ) !== $ p [ $ i ] ) $ j = 1 ; $ num [ $ c [ $ i ] ] = str_pad ( $ p [ $ i ] + 1 , 6 , 0 , STR_PAD_LEFT ) . str_pad ( $ j , 6 , 0 , STR_PAD_LEFT ) ; $ j ++ ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ num [ $ i ] . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ a ) ; $ x = 0 ; $ m = 1 ; for ( $ n = 1 ; $ n <= $ a ; $ n ++ ) { $ d = $ n ; $ i = 0 ; while ( ( $ d % 2 ) == 0 ) { $ i ++ ; if ( $ i > $ x ) { $ x = $ i ; $ m = $ n ; } $ d = intval ( $ d / 2 ) ; } } echo $ m ; ?>
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab > $ cd ) { echo $ ab ; } else { echo $ cd ; } ?>
<?php list ( $ n ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ p_list = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ counter = 0 ; $ min = $ n ; foreach ( $ p_list as $ p ) { if ( $ p > $ min ) { continue ; } ++ $ counter ; $ min = $ p ; } echo $ counter ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a === 1 ) { $ a = 14 ; } if ( $ b === 1 ) { $ b = 14 ; } if ( $ a === $ b ) { echo ' Draw ' ; } elseif ( $ a > $ b ) { echo ' Alice ' ; } else { echo ' Bob ' ; } ?>
<?php while ( 1 ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) { break ; } printf ( " %d \n " , MySum ( $ x ) ) ; } function MySum ( $ a ) { $ mysum = 0 ; foreach ( str_split ( $ a ) as $ val ) { $ mysum += $ val ; } return $ mysum ; }
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ k ; ++ $ i ) { if ( ( $ s - $ i ) / 2 > $ k ) { continue ; } else { $ start = ( $ s - $ i - $ k ) < 0 ? 0 : ( $ s - $ i - $ k ) ; for ( $ j = $ start ; $ j <= $ k ; $ j ++ ) { if ( ( $ i + $ j ) > $ s ) { break ; } else { $ count ++ ; } } } } echo $ count ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ citys = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ p_y = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pref [ $ p_y [ 0 ] ] [ ] = $ p_y [ 1 ] ; $ py_li [ ] = $ p_y ; } $ p_y_key_li = array_keys ( $ pref ) ; for ( $ i = 0 ; $ i < count ( $ p_y_key_li ) ; $ i ++ ) { sort ( $ pref [ $ p_y_key_li [ $ i ] ] ) ; } $ memo = array ( ) ; foreach ( $ pref as $ c ) { foreach ( $ c as $ x => $ year ) { $ memo [ $ year ] = $ x ; } } foreach ( $ py_li as $ py ) { $ x = $ memo [ $ py [ 1 ] ] + 1 ; for ( $ i = 0 ; $ i < 6 - strlen ( $ py [ 0 ] ) ; $ i ++ ) { echo " 0 " ; } echo $ py [ 0 ] ; for ( $ i = 0 ; $ i < 6 - strlen ( $ x ) ; $ i ++ ) { echo " 0 " ; } echo ( $ x ) . " \n " ; }
<?php fscanf ( STDIN , ' %d%d ' , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ b [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i <= $ n - $ m ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n - $ m ; $ j ++ ) { $ f = 1 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ a [ $ i + $ k ] [ $ j + $ l ] != $ b [ $ k ] [ $ l ] ) { $ f = 0 ; } } $ s += $ f ; } echo $ s ? Yes : No ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ s_arr = explode ( ' ' , $ s ) ; $ s_arr = array_unique ( $ s_arr ) ; echo ( count ( $ s_arr ) === 3 ) ? ' Three ' : ' Four ' ;
<?php list ( $ r ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php $ input = fgets ( STDIN ) ; print pow ( $ input , 3 ) ; ?>
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' ' ) { $ card = array_fill ( 1 , 13 , 0 ) ; foreach ( explode ( ' , ' , $ line ) as $ c ) { $ card [ ( int ) $ c ] ++ ; } $ card = array_filter ( $ card , function ( $ n ) { return $ n ; } ) ; $ pair = max ( $ card ) ; $ cnt = count ( $ card ) ; if ( $ pair === 4 ) { echo " four card \n " ; } elseif ( $ pair === 3 && $ cnt === 2 ) { echo " full house \n " ; } elseif ( $ cnt === 5 ) { $ min = min ( array_keys ( $ card ) ) ; $ check = 0 ; for ( $ i = $ min + 1 ; $ i < $ min + 5 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } if ( $ check !== 4 && $ min === 1 ) { $ check = 0 ; for ( $ i = 10 ; $ i <= 13 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } } echo $ check === 4 ? " straight \n " : " null \n " ; } elseif ( $ pair === 3 ) { echo " three card \n " ; } elseif ( $ pair === 2 ) { echo $ cnt === 3 ? " two pair \n " : " one pair \n " ; } else { echo " null \n " ; } }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo $ stdin * $ stdin * $ stdin . " \n " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a < 6 ) { echo 0 ; } elseif ( $ a < 13 ) { echo $ b / 2 ; } else { echo $ b ; }
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; $ result = $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? " YES " : " NO " ; echo ( $ result ) ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php list ( $ H1 , $ M1 , $ H2 , $ M2 , $ K ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ wu = 0 ; if ( $ H1 === $ H2 ) { $ wu = $ M2 - $ M1 ; } else { $ wu = ( $ H2 - $ H1 - 1 ) * 60 ; $ wu += 60 - $ M1 ; $ wu += $ M2 ; } echo $ wu - $ K ; ?>
<?php $ input = ( int ) file_get_contents ( " php: $ x = $ input * 800; $ y = floor( $ input / 15) * 200; echo $ x - $ y ;
<?php define ( ' N ' , 3 ) ; $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , N ) . " \n " ;
<?php list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di = new Di ( $ n ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ di -> connect ( $ from , $ to , $ d ) ; } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ di -> connect ( $ i , $ i - 1 , 0 ) ; } $ distance = $ di -> solve ( 1 ) [ $ n ] ; if ( $ distance == $ di -> inf ) { echo - 1 ; } else { echo $ distance ; } class Di { public $ pq ; public $ distance ; public $ G ; public $ inf = 10 ** 18 ; function __construct ( $ n ) { $ this -> pq = new SplPriorityQueue ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ this -> distance [ $ i ] = $ this -> inf ; } } function connect ( $ from , $ to , $ cost ) { $ this -> G [ $ from ] [ ] = [ $ to , $ cost ] ; } function solve ( $ from ) { $ this -> pq -> insert ( $ from , 0 ) ; $ this -> distance [ $ from ] = 0 ; while ( $ this -> pq -> count ( ) ) { $ f = $ this -> pq -> extract ( ) ; if ( ! isset ( $ this -> G [ $ f ] ) ) continue ; foreach ( $ this -> G [ $ f ] as list ( $ t , $ dist ) ) { $ new = $ this -> distance [ $ f ] + $ dist ; if ( $ this -> distance [ $ t ] > $ new ) { $ this -> distance [ $ t ] = $ new ; $ this -> pq -> insert ( $ t , - $ new ) ; } } } return $ this -> distance ; } }
<?php $ line = readline ( ) ; readline_add_history ( $ line ) ; $ x = intval ( $ line ) ; $ x = $ x * $ x * $ x ; print $ x ; ?>
<?php $ str = readline ( ) ; echo pow ( $ str , 3 ) ; ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; printf ( " %s \n " , str_replace ( ' ? ' , ' D ' , $ s ) ) ;
<?php fscanf ( STDIN , " %s " , $ s ) ; echo str_replace ( ' / ' , ' ' , $ s ) <= ' 20190430 ' ? ' Heisei ' : ' TBD ' ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ rad = pi ( ) * ( ( $ h + $ m / 60 ) / 6 - $ m / 30 ) ; $ c2 = $ a * $ a + $ b * $ b - 2 * $ a * $ b * cos ( $ rad ) ; echo sqrt ( $ c2 ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ na = explode ( " " , trim ( fgets ( STDIN ) ) ) ; foreach ( $ na as $ v ) { if ( $ v == " Y " ) { echo " Four " ; return ; } } echo " Three " ;
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ input = file_get_contents ( ' php: $inarr = explode("\n", $input); $n = $inarr[0]; $xList = explode(" ", $inarr[1]); $xList = array_map( ' intval ' , $ xList ) ; $ min = PHP_INT_MAX ; for ( $ party = min ( $ xList ) ; $ party <= max ( $ xList ) ; $ party ++ ) { $ total_hp = 0 ; foreach ( $ xList as $ x ) { $ hp = ( $ x - $ party ) * ( $ x - $ party ) ; $ total_hp = $ total_hp + $ hp ; } if ( $ total_hp < $ min ) { $ min = $ total_hp ; } } echo $ min ; ?>
<?php fscanf ( STDIN , " %s " , $ str_t ) ; $ len = strlen ( $ str_t ) ; $ last_char = " " ; $ str_new = " " ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ wk_char = substr ( $ str_t , $ i , 1 ) ; if ( $ wk_char == " ? " ) { $ next_char = " " ; if ( ( $ i + 1 ) < $ len ) { $ next_char = substr ( $ str_t , ( $ i + 1 ) , 1 ) ; } $ wk_char = set_q ( $ last_char , $ next_char ) ; } $ str_new .= $ wk_char ; $ last_char = $ wk_char ; } echo $ str_new ; function set_q ( $ str_pre , $ str_sur ) { if ( $ str_pre == " P " ) { return " D " ; } else { if ( $ str_sur == " P " ) { return " D " ; } else if ( $ str_sur == " D " ) { return " P " ; } else if ( $ str_sur == " ? " ) { return " D " ; } else { return " D " ; } } }
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a > 8 || $ b > 8 ) { echo " :( " ; } else { echo " Yay! " ; }
<?php function getq ( $ get_word = null ) { if ( $ get_word === null ) { return str_replace ( " \n " , " " , fgets ( STDIN ) ) ; } else if ( $ get_word === 1 ) { return explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; } } $ K = getq ( 1 ) ; echo max ( $ K [ 0 ] * $ K [ 1 ] , $ K [ 2 ] * $ K [ 3 ] ) ; ?>
<?php define ( " inf " , 10 ** 15 ) ; list ( $ n , $ m ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ map [ $ i ] [ ] = [ $ i - 1 , 0 ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ from , $ to , $ d ) = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ map [ $ from ] [ ] = [ $ to , $ d ] ; } $ D [ 1 ] = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ D [ $ i ] = inf ; } $ pq = new SplPriorityQueue ( ) ; $ pq -> insert ( 1 , 0 ) ; while ( $ pq -> count ( ) ) { $ f = $ pq -> extract ( ) ; if ( ! isset ( $ map [ $ f ] ) ) continue ; foreach ( $ map [ $ f ] as $ to ) { $ new = $ D [ $ f ] + $ to [ 1 ] ; if ( $ D [ $ to [ 0 ] ] > $ new ) { $ D [ $ to [ 0 ] ] = $ new ; $ pq -> insert ( $ to [ 0 ] , - $ new ) ; } } } printf ( " %d " , $ D [ $ n ] == inf ? - 1 : $ D [ $ n ] ) ;
<?php $ tmp = [ ] ; while ( $ line = fgets ( STDIN ) ) { $ tmp [ ] = trim ( $ line ) ; } $ A = $ tmp [ 0 ] ; $ B = $ tmp [ 1 ] ; $ C = $ tmp [ 2 ] ; $ X = ( int ) $ tmp [ 3 ] ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) for ( $ p = 0 ; $ p <= $ B ; $ p ++ ) for ( $ q = 0 ; $ q <= $ C ; $ q ++ ) { if ( 500 * $ i + 100 * $ p + 50 * $ q === $ X ) $ count ++ ; } echo $ count ;
<?php fscanf ( STDIN , " %d %d %d " , $ A , $ B , $ C ) ; echo ( $ A + $ B >= $ C ) ? " Yes \n " : " No \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ input = readline ( ) ; $ parts = explode ( " " , $ input ) ; $ K = $ parts [ 0 ] ; $ S = $ parts [ 1 ] ; if ( $ S == 3 * $ K ) { echo " 1 " . " \n " ; die ( ) ; } $ total = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { $ balance = $ S - $ i ; for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { $ balance_2 = $ balance - $ j ; if ( $ balance - $ j < 0 ) break ; else if ( $ balance_2 > $ K ) { continue ; } else { $ total ++ ; } } } echo $ total . " \n " ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo ( $ input ** 3 ) . PHP_EOL ;
<?php $ r = ( int ) trim ( fgets ( STDIN ) ) ; print $ r * $ r ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; sort ( $ array ) ; $ first = $ array [ 0 ] - $ array [ 1 ] ; $ second = $ array [ 1 ] - $ array [ 2 ] ; echo abs ( $ first ) + abs ( $ second ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ x ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { $ dist = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ dist += ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) ** 2 ; } if ( abs ( sqrt ( $ dist ) - round ( sqrt ( $ dist ) ) ) < 10 ** - 10 ) { $ c ++ ; } } } echo $ c ;
<?php $ five_hundred = trim ( fgets ( STDIN ) ) ; $ one_hundred = trim ( fgets ( STDIN ) ) ; $ fifty = trim ( fgets ( STDIN ) ) ; $ price = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ five_hundred ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ one_hundred ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ fifty ; $ k ++ ) { $ answer = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ answer == $ price ) { $ count = $ count + 1 ; } } } } echo $ count . " \n " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ a + $ b + $ c == 17 && $ a * $ b * $ c == 175 ) { echo ( " YES " ) ; } else { echo ( " NO " ) ; } ?>
<?php $ input = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ input [ 0 ] * $ input [ 1 ] , $ input [ 2 ] * $ input [ 3 ] ) ?>
<?php $ N = fgets ( STDIN ) ; $ d = [ ] ; $ d [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= 7 ; $ i ++ ) { $ K = pow ( 2 , $ i ) ; $ d [ $ i ] = $ K ; } for ( $ i = 0 ; $ i <= 7 ; $ i ++ ) { if ( $ d [ $ i ] > $ N ) { echo $ d [ $ i - 1 ] ; break ; } } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ sum = 0 ; $ cul = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ temp = fgets ( STDIN ) ; $ poss [ $ i ] = explode ( " " , $ temp ) ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ keisu = 1 ; $ keisu *= $ i + 1 ; } for ( $ i = 0 ; $ i < 9999 ; $ i ++ ) { $ j = $ i + 1 ; do { $ lens [ $ cul ] = sqrt ( pow ( $ poss [ $ i ] [ 0 ] - $ poss [ $ j ] [ 0 ] , 2 ) + pow ( $ poss [ $ i ] [ 1 ] - $ poss [ $ j ] [ 1 ] , 2 ) ) ; if ( $ cul + 1 == $ n * ( $ n - 1 ) / 2 ) { break 2 ; } $ cul ++ ; $ j ++ ; } while ( $ j < $ n ) ; } for ( $ i = 0 ; $ i < $ n * ( $ n - 1 ) / 2 ; $ i ++ ) { $ sum += $ keisu * $ lens [ $ i ] ; } echo ( $ sum / ( $ n * ( $ n - 1 ) / 2 ) ) ;
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( substr ( $ s , 2 , 1 ) == substr ( $ s , 3 , 1 ) && substr ( $ s , 4 , 1 ) == substr ( $ s , 5 , 1 ) ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; } ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; if ( $ N <= " 2019/04/30 " ) { printf ( " Heisei \n " ) ; } else { printf ( " TBD \n " ) ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ x [ $ i ] ; } $ p = $ sum / $ n ; $ p = round ( $ p , 0 ) ; $ sum2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum2 = $ sum2 + ( $ x [ $ i ] - $ p ) ** 2 ; } echo $ sum2 . " \n " ; ?>
<?= fgets ( STDIN ) ** 2 ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ line [ ] = $ stdin ; } $ num = 0 ; for ( $ a = 0 ; $ a <= $ line [ 0 ] ; $ a ++ ) { $ tmp1 = $ a * 500 ; for ( $ b = 0 ; $ b <= $ line [ 1 ] ; $ b ++ ) { $ tmp2 = $ b * 100 ; for ( $ c = 0 ; $ c <= $ line [ 2 ] ; $ c ++ ) { $ tmp3 = $ c * 50 ; $ sum = $ tmp1 + $ tmp2 + $ tmp3 ; if ( $ sum == $ line [ 3 ] ) $ num ++ ; } } } echo $ num ; ?>
<?php $ s = trim ( fgets ( STDIN ) ) ; $ pd = ' PD ' ; $ p = ' D ' ; echo str_replace ( ' ? ' , ' D ' , $ s ) ;
<?php fscanf ( STDIN , " %d " , $ x ) ; $ ans = $ x * $ x * $ x ; echo " $ ans \n " ;
<?php $ a = Array ( ) ; $ input = fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; $ cost = 0 ; $ cost += abs ( ( $ a [ 0 ] - $ a [ 1 ] ) ) ; $ cost += abs ( ( $ a [ 1 ] - $ a [ 2 ] ) ) ; echo $ cost ; ?>
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a != $ b && $ a == 1 ) { echo " Alice \n " ; } elseif ( $ a != $ b && $ b == 1 ) { echo " Bob \n " ; } elseif ( $ a > $ b ) { echo " Alice \n " ; } elseif ( $ b > $ a ) { echo " Bob \n " ; } else { echo " Draw \n " ; }
<?php $ A = explode ( ' ' , fgets ( STDIN ) ) ; $ B = explode ( ' ' , fgets ( STDIN ) ) ; $ C = explode ( ' ' , fgets ( STDIN ) ) ; $ c = 0 ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { if ( $ A [ $ i + 1 ] - $ A [ $ i ] == $ B [ $ i + 1 ] - $ B [ $ i ] && $ B [ $ i + 1 ] - $ B [ $ i ] == $ C [ $ i + 1 ] - $ C [ $ i ] ) { $ c ++ ; } } echo $ c == 2 ? " Yes " : " No " , " \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ x ) ; $ i = $ x [ 0 ] ; $ ans = pow ( 10 , 10 ) ; while ( $ i <= $ x [ $ n - 1 ] ) { $ sum = 0 ; $ j = 0 ; while ( $ j < $ n ) { $ sum += pow ( ( $ x [ $ j ] - $ i ) , 2 ) ; ++ $ j ; } if ( $ sum < $ ans ) { $ ans = $ sum ; } ++ $ i ; } echo $ ans ;
<?php $ r = fgets ( STDIN ) ; echo $ r * $ r ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; echo pow ( $ n , 3 ) ; ?>
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ w as $ j => $ s ) { if ( $ s != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; echo ( $ a + $ b < $ c ? ' No ' : ' Yes ' ) . PHP_EOL ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ in_a , $ in_b , $ in_h , $ in_m ) ; $ ans = 0.0 ; $ hx = $ in_a * sin ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ hy = $ in_a * cos ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ mx = $ in_b * sin ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ my = $ in_b * cos ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ ans = sqrt ( pow ( $ hx - $ mx , 2 ) + pow ( $ hy - $ my , 2 ) ) ; echo " $ ans \n " ;
<?php $ num = ( int ) trim ( fgets ( STDIN ) ) ; echo ( $ num * $ num * $ num ) . PHP_EOL ; ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ x ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ ans = PHP_INT_MAX ; for ( $ k = 0 ; $ k < $ N ; $ k ++ ) { for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ k === 0 ) { $ b [ 0 ] [ $ i ] = $ a [ $ i ] ; } else { $ b [ $ k ] [ $ i ] = min ( $ b [ $ k - 1 ] [ $ i ] , $ a [ ( $ i - $ k + $ N ) % $ N ] ) ; } } $ ans = min ( $ ans , array_sum ( $ b [ $ k ] ) + $ k * $ x ) ; } echo $ ans ;
<?php $ stdin = fopen ( " php: fscanf( $ stdin , " % [ ^ \ n ] " , $ input ) ; $ arr_input = explode ( " " , $ input ) ; $ aux_5 = 0 ; $ aux_7 = 0 ; foreach ( $ arr_input as $ v ) { if ( $ v == 5 ) $ aux_5 ++ ; if ( $ v == 7 ) $ aux_7 ++ ; } if ( $ aux_5 == 2 && $ aux_7 == 1 ) { echo " YES " ; } else { echo " NO " ; } fclose ( $ stdin ) ; ?>
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ d ) ; fscanf ( STDIN , " %d " , $ e ) ; fscanf ( STDIN , " %d " , $ k ) ; if ( $ k >= ( $ e - $ a ) ) { echo " Yay! " ; } else { echo " :( " ; }
<?php $ a = explode ( " " , fgets ( STDIN ) ) ; echo ( intval ( $ a [ 0 ] ) + intval ( $ a [ 1 ] ) ) >= intval ( $ a [ 2 ] ) ? " Yes " : " No " ;
<?php $ a = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( $ a [ 2 ] == $ a [ 3 ] && $ a [ 4 ] == $ a [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php $ a = fgets ( STDIN ) ; $ a *= $ a * $ a ; echo $ a . PHP_EOL ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ P = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ret = 1 ; $ min = $ P [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ min >= $ P [ $ i ] ) { $ ret ++ ; } $ min = min ( $ min , $ P [ $ i ] ) ; } printf ( " %d \n " , $ ret ) ;
<?php $ x = ( int ) ( trim ( fgets ( STDIN ) ) ) ; for ( $ a = - 118 ; $ a <= 119 ; $ a ++ ) { for ( $ b = - 119 ; $ b <= 118 ; $ b ++ ) { if ( $ a ** 5 - $ b ** 5 === $ x ) { printf ( " %d %d \n " , $ a , $ b ) ; exit ; } } }
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= $ K ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ K ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ w as $ j => $ s ) { if ( $ s != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } foreach ( $ h as $ j => $ s ) { if ( $ s != $ c [ $ j ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php while ( true ) { $ stdin = trim ( fgets ( STDIN ) ) ; if ( $ stdin === ' ' ) { break ; } $ val = explode ( ' , ' , $ stdin ) ; $ number = $ val [ 0 ] ; $ weight = $ val [ 1 ] ; $ height = $ val [ 2 ] ; $ bmi = $ weight / ( $ height * $ height ) ; if ( $ bmi >= 25 ) { printf ( " %d \n " , $ number ) ; } }
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ p , $ y ) ; $ c [ $ y ] [ $ p ] = $ i ; } ksort ( $ c ) ; $ x = array_fill ( 1 , $ n , 0 ) ; foreach ( $ c as $ y => $ z ) { foreach ( $ z as $ p => $ i ) { $ t [ $ i ] = sprintf ( " %06d%06d " , $ p , ++ $ x [ $ p ] ) ; } } ksort ( $ t ) ; echo implode ( " \n " , $ t ) ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ nums = explode ( " " , $ stdin ) ; $ count_5 = 0 ; $ count_7 = 0 ; foreach ( $ nums as $ num ) { if ( $ num == 5 ) { $ count_5 += 1 ; } elseif ( $ num == 7 ) { $ count_7 += 1 ; } } if ( $ count_5 == 2 && $ count_7 == 1 ) { echo " YES " . PHP_EOL ; } else { echo " NO " . PHP_EOL ; }
<?php $ n = ints ( ) ; sort ( $ n ) ; echo $ n === [ 1 , 4 , 7 , 9 ] ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ k = str_split ( $ n ) ; if ( $ k [ 2 ] == $ k [ 3 ] && $ k [ 4 ] == $ k [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ n = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ n ) ; $ ans = $ n [ 0 ] . $ n [ 3 ] . $ n [ 2 ] . $ n [ 1 ] ; echo ( $ ans == 1974 ) ? ' YES ' : ' NO ' ;
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ answer = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ x ) { $ answer += 1 ; } } } } echo $ answer ; ?>
<?php $ x = fgets ( STDIN ) ; $ x = $ x * $ x * $ x ; echo $ x . " \n " ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ avg = array_sum ( $ input ) / count ( $ input ) ; echo ceil ( $ avg ) ;
<?php [ $ a , $ b , $ h , $ m ] = array_map ( function ( string $ string ) : int { return ( int ) $ string ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ α _PI bs( 6 0 h 1 m ) 2 0; cho qrt( $ a * b * a b os( $ α )) ;
<?php $ x = [ ] ; $ y = [ ] ; $ tmp = 0 ; fscanf ( STDIN , ' %d ' , $ cnt ) ; for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { fscanf ( STDIN , ' %d %d ' , $ x [ ] , $ y [ ] ) ; } for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { for ( $ j = $ i ; $ j < $ cnt ; $ j ++ ) { if ( $ j === $ i ) { continue ; } $ tmp += sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ; } } for ( $ i = 0 ; $ i < $ cnt ; $ i ++ ) { for ( $ j = $ i ; $ j < $ cnt ; $ j ++ ) { if ( $ j === $ i ) { continue ; } $ tmp += sqrt ( pow ( $ x [ $ j ] - $ x [ $ i ] , 2 ) + pow ( $ y [ $ j ] - $ y [ $ i ] , 2 ) ) ; } } echo $ tmp / $ cnt . " \n " ;
<?php $ S = trim ( fgets ( STDIN ) ) ; echo ( strtotime ( $ S ) <= strtotime ( " 2019/04/30 " ) ) ? " Heisei " : " TBD " ;
<?php $ numbers = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = array_count_values ( $ numbers ) ; if ( $ count [ 5 ] == 2 && $ count [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ line = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ h = $ line [ 2 ] - $ line [ 0 ] ; $ m = $ line [ 3 ] - $ line [ 1 ] ; $ study = $ line [ 4 ] ; $ awake = $ h * 60 + $ m ; $ start = $ awake - $ study ; echo $ start ; ?>
<?php $ input_line = trim ( fgets ( STDIN ) ) ; $ num = intval ( $ input_line ) ; $ ans = pow ( $ num , 3 ) ; echo " { $ ans } " . PHP_EOL ;
<?php fscanf ( STDIN , ' %d %d ' , $ n , $ m ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ lcm = $ a [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ lcm = lcm ( $ lcm , $ a [ $ i ] ) ; if ( $ lcm / $ a [ $ i ] % 2 === 0 ) { echo ( 0 ) . PHP_EOL ; exit ; } } $ ans = floor ( ( 2 * $ m + $ lcm ) / ( 2 * $ lcm ) ) ; echo $ ans . PHP_EOL ; function gcd ( $ m , $ n ) { if ( ! $ n ) return $ m ; return gcd ( $ n , $ m % $ n ) ; } function lcm ( $ m , $ n ) { return $ m * $ n / gcd ( $ m , $ n ) ; }
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo ( $ stdin * $ stdin * $ stdin ) ; ?>
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ x = [ ] ; $ y = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { list ( $ x [ $ i ] , $ y [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ distance = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ dx = ( $ x [ $ i ] - $ x [ $ j ] ) * ( $ x [ $ i ] - $ x [ $ j ] ) ; $ dy = ( $ y [ $ i ] - $ y [ $ j ] ) * ( $ y [ $ i ] - $ y [ $ j ] ) ; $ distance += sqrt ( $ dx + $ dy ) ; } } $ p = ( $ n * ( $ n - 1 ) ) / 2 ; $ ave = $ distance / $ p ; echo $ ave * ( $ n - 1 ) ;
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; if ( $ A <= 8 && $ B <= 8 ) { echo ' Yay! ' ; } else { echo ' :( ' ; } ?>
<?php $ output = array ( ) ; while ( true ) { $ data = trim ( fgets ( STDIN ) ) ; if ( " 0 " == $ data ) { break ; } $ n = strlen ( $ data ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ num = intval ( $ data [ $ i ] ) ; $ sum += $ num ; } array_push ( $ output , $ sum ) ; } print implode ( " \n " , $ output ) ; ?>
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ array [ 0 ] ; $ b = ( int ) $ array [ 1 ] ; $ price = 0 ; if ( $ a >= 13 ) { $ price = $ b ; echo " { $ price } \n " ; } elseif ( $ a >= 6 && $ a <= 12 ) { $ price = $ b / 2 ; echo " { $ price } \n " ; } else { $ price = 0 ; echo " { $ price } \n " ; } ?>
<?php $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ d = fgets ( STDIN ) ; echo $ a [ 4 ] - $ a [ 0 ] <= $ d ? " Yay! " : " :( " ;
<?php $ S = trim ( fgets ( STDIN ) ) ; if ( $ S [ 2 ] == $ S [ 3 ] && $ S [ 4 ] == $ S [ 5 ] ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php fscanf ( STDIN , ' %d%d ' , $ A , $ B ) ; if ( $ A == 1 ) { $ A = 15 ; } if ( $ B == 1 ) { $ B = 15 ; } if ( $ A < $ B ) { echo " Bob " ; } elseif ( $ A > $ B ) { echo " Alice " ; } else { echo " Draw " ; } ?>
<?php $ list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count1 = 0 ; $ count2 = 0 ; foreach ( $ list as $ val ) { if ( $ val == ' 7 ' ) { $ count1 ++ ; } elseif ( $ val == ' 5 ' ) { $ count2 ++ ; } } if ( $ count1 == 1 && $ count2 == 2 ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php fscanf ( STDIN , " %d %d " , $ total_dis , $ dim_count ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ total_dis ; ++ $ i ) { $ arr [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ total_dis - 1 ; ++ $ i ) { for ( $ j = $ i ; $ j < $ total_dis ; ++ $ j ) { if ( $ i == $ j ) { continue ; } $ count += distance ( $ arr [ $ i ] , $ arr [ $ j ] ) ; } } echo $ count , " \n " ; function distance ( $ a , $ b ) { global $ dim_count ; $ total = 0 ; for ( $ i = 0 ; $ i < $ dim_count ; ++ $ i ) { $ total += pow ( abs ( $ a [ $ i ] - $ b [ $ i ] ) , 2 ) ; } if ( sqrt ( $ total ) == floor ( sqrt ( $ total ) ) ) { return 1 ; } return 0 ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a > 12 ) { echo $ b . " \n " ; } elseif ( $ a > 5 ) { echo ( $ b / 2 ) . " \n " ; } else { echo " 0 " . " \n " ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ ] , $ y [ ] ) ; } $ d = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ d = $ d * $ i ; } $ pair = 0 ; for ( $ i = 1 ; $ i <= $ n - 1 ; $ i ++ ) { $ pair = $ pair + $ i ; } $ move = $ d * ( $ n - 1 ) / $ pair ; $ totalLength = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ totalLength += $ pairLength = sqrt ( pow ( $ x [ $ i ] - $ x [ $ j ] , 2 ) + ( pow ( $ y [ $ i ] - $ y [ $ j ] , 2 ) ) ) ; } } $ totalLength = $ totalLength * $ move ; $ averageLength = $ totalLength / $ d ; echo $ averageLength ; ?>
<?php $ x = fgets ( STDIN ) ; $ x = intval ( $ x ) ; print ( $ x * $ x * $ x . " \n " ) ; ?>
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ d == 1 ) { echo $ n * ( $ n - 1 ) / 2 ; } else { $ ans = 0 ; $ i = 0 ; while ( $ i < $ n ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ n - 1 ) { $ j = $ i + 1 ; while ( $ j < $ n ) { $ l = 0 ; $ k = 0 ; while ( $ k < $ d ) { $ l += pow ( ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) , 2 ) ; ++ $ k ; } $ l = sqrt ( $ l ) ; if ( $ l == floor ( $ l ) ) { ++ $ ans ; } ++ $ j ; } ++ $ i ; } echo $ ans ; }
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ n <= 8 && $ m <= 8 ) { echo " Yay! " ; } else { echo " :( " ; }
<?php $ c_500 = ( int ) trim ( fgets ( STDIN ) ) ; $ c_100 = ( int ) trim ( fgets ( STDIN ) ) ; $ c_50 = ( int ) trim ( fgets ( STDIN ) ) ; $ total = ( int ) trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ c_500 ; ++ $ x ) { for ( $ y = 0 ; $ y <= $ c_100 ; ++ $ y ) { for ( $ z = 0 ; $ z <= $ c_50 ; ++ $ z ) { $ r = 500 * $ x + 100 * $ y + 50 * $ z ; if ( $ total === $ r ) ++ $ count ; } } } echo $ count ;
<?php $ input = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ k = ( int ) $ input [ 0 ] ; $ s = ( int ) $ input [ 1 ] ; $ result = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( 0 <= $ z && $ z <= $ k ) { $ result ++ ; } } } echo $ result ;
<?php fscanf ( STDIN , ' %s ' , $ s ) ; $ ans = ' No ' ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { $ ans = ' Yes ' ; } echo $ ans ;
<?php while ( $ line = trim ( fgets ( STDIN ) ) ) { if ( $ line == " 0 " ) break ; $ line = array_map ( ' intval ' , str_split ( $ line ) ) ; $ sum = 0 ; foreach ( $ line as $ value ) { $ sum += $ value ; } echo $ sum . " \n " ; } ?>
<?php ini_set ( ' memory_limit ' , ' 1024M ' ) ; $ sc = new Scanner ( ) ; $ N = $ sc -> nextInt ( ) ; $ P = $ sc -> nextInt ( ) ; if ( $ N == 1 ) { echo $ P . PHP_EOL ; exit ; } if ( $ P == 1 ) { echo 1 . PHP_EOL ; exit ; } $ result = [ ] ; while ( $ P != 1 ) { $ i = 2 ; while ( $ i * $ i <= $ P ) { if ( $ P % $ i == 0 ) { while ( $ P % $ i == 0 ) { $ result [ $ i ] ++ ; $ P /= $ i ; } break ; } $ i ++ ; } if ( $ i * $ i > $ P ) { $ result [ $ P ] ++ ; $ P /= $ P ; } } $ ans = 1 ; foreach ( $ result as $ k => $ v ) { $ ans *= pow ( $ k , ( int ) ( $ v / $ N ) ) ; } echo $ ans . PHP_EOL ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php $ at = new Atcoder ( ) ; $ at -> main ( ) ; unset ( $ at ) ; class Atcoder { private function lineIn ( ) { $ buf = fgets ( STDIN ) ; return $ this -> killNewLine ( $ buf ) ; } private function killNewLine ( $ buf = null ) { $ buf = str_replace ( " \r \n " , " " , $ buf ) ; $ buf = str_replace ( " \n " , " " , $ buf ) ; $ buf = str_replace ( " \r " , " " , $ buf ) ; return $ buf ; } public function main ( ) { $ s = $ this -> lineIn ( ) ; if ( 2018 >= ( $ s [ 0 ] . $ s [ 1 ] . $ s [ 2 ] . $ s [ 3 ] ) ) { echo " Heisei \n " ; return true ; } else if ( 2020 <= ( $ s [ 0 ] . $ s [ 1 ] . $ s [ 2 ] . $ s [ 3 ] ) ) { echo " TBD \n " ; return false ; } else { if ( 0 == $ s [ 5 ] ) { switch ( $ s [ 6 ] ) { case ( 1 ) : case ( 2 ) : case ( 3 ) : case ( 4 ) : echo " Heisei \n " ; return true ; break ; default : echo " TBD \n " ; return false ; break ; } } else { echo " TBD \n " ; return false ; } } } } ?>
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ) { echo " Yes " ; } else { echo " No " ; }
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ input [ 0 ] ; $ b = ( int ) $ input [ 1 ] ; if ( $ a <= 5 ) { $ result = 0 ; } elseif ( $ a <= 12 ) { $ result = ( int ) floor ( $ b / 2 ) ; } else { $ result = $ b ; } echo $ result ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ yp = [ ] ; $ py = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %d%d " , $ p , $ y ) ; $ yp [ $ y ] = $ p ; $ py [ $ p ] [ ] = $ y ; } $ memo = [ ] ; foreach ( $ py as $ k => $ d ) { sort ( $ py [ $ k ] ) ; foreach ( $ py [ $ k ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ yp as $ yy => $ pp ) { echo sprintf ( " %06d " , $ pp ) ; echo sprintf ( " %06d " , $ memo [ $ yy ] ) ; echo " \n " ; }
<?php list ( $ n , $ m ) = Util :: input ( 1 ) ; $ cityMap = [ ] ; $ inputList = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ p , $ y ) = Util :: input ( 1 ) ; $ inputList [ ] = $ p . ' _ ' . $ y ; if ( empty ( $ cityMap [ $ p ] ) ) { $ cityMap [ $ p ] = [ ] ; } $ cityMap [ $ p ] [ $ y ] = 1 ; } foreach ( $ cityMap as $ key => $ m ) { ksort ( $ cityMap [ $ key ] ) ; $ c = 1 ; foreach ( $ cityMap [ $ key ] as $ k => $ v ) { $ cityMap [ $ key ] [ $ k ] = $ c ; $ c += 1 ; } } foreach ( $ inputList as $ input ) { list ( $ p , $ y ) = explode ( ' _ ' , $ input ) ; echo sprintf ( " %06d%06d " , $ p , $ cityMap [ $ p ] [ $ y ] ) . PHP_EOL ; } class Util { public static function input ( $ isSplitSpace = false ) { $ input = trim ( fgets ( STDIN ) ) ; if ( ! $ isSplitSpace ) { return $ input ; } return explode ( ' ' , $ input ) ; } public static function arrToStr ( $ arr ) { return implode ( " , " , $ arr ) ; } }
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a + $ b >= $ c ) { echo " Yes " ; } else { echo " No " ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X = fgets ( STDIN ) ; $ { " array " . $ i } = explode ( " " , $ X ) ; } $ counter = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ result = calcDistance ( $ { " array " . $ i } , $ { " array " . $ j } ) ; if ( is_decimal ( $ result ) ) { $ counter ++ ; } } } echo $ counter ; function calcDistance ( $ arrayA , $ arrayB ) { $ result = 0 ; for ( $ i = 0 ; $ i < count ( $ arrayA ) ; $ i ++ ) { $ result += ( $ arrayA [ $ i ] - $ arrayB [ $ i ] ) ** 2 ; } return sqrt ( $ result ) ; } function is_decimal ( $ value ) { return filter_var ( $ value , FILTER_VALIDATE_INT ) !== false ; }
<?php print pow ( trim ( fgets ( STDIN ) ) , 3 ) . " \n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ n , 3 ) ; print ( $ ans . " \n " ) ;
<?php $ h = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ h ) ; if ( implode ( " " , $ h ) == " 1479 " ) { printf ( " YES \n " ) ; } else { printf ( " NO \n " ) ; }
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k != 1 ) { echo $ n - $ k ; } else { echo 0 ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo ( $ str ) . PHP_EOL ; } } $ sc = new Scanner ( ) ; $ n = $ sc -> nextInt ( ) ; $ circle = 3 ; $ circle2 = $ n * $ n * intval ( 3 ) ; $ res = $ circle2 / $ circle ; out :: println ( $ res ) ; ?>
<?php list ( $ r ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; ( $ a + $ b >= $ c ) ? print ( ' Yes ' ) : print ( ' No ' ) ; ?>
<?php $ ans = 0 ; $ array = [ ] ; function cmp ( $ a , $ b ) { $ a = $ a % 10 ; $ b = $ b % 10 ; $ a = $ a == 0 ? 10 : $ a ; $ b = $ b == 0 ? 10 : $ b ; return $ b <=> $ a ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } usort ( $ array , " cmp " ) ; function calc ( $ num ) { $ plus = $ num % 10 ; $ plus = $ plus == 0 ? 0 : 10 - $ plus ; return $ num + $ plus ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i < 4 ) { $ ans += calc ( $ array [ $ i ] ) ; } else { $ ans += $ array [ $ i ] ; } } echo $ ans . " \n " ; ?>
<?php $ ans = 0 ; $ memo = [ ] ; $ mod = 10 ** 9 + 7 ; fscanf ( STDIN , ' %d ' , $ cnt ) ; $ nums = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; for ( $ i = 0 ; $ i < 60 ; $ i ++ ) { $ tmp = 0 ; foreach ( $ nums as $ num ) { $ tmp += ( $ num >> $ i ) & 1 ; } $ ans += ( ( ( $ tmp % $ mod ) * ( $ cnt - $ tmp ) ) % $ mod ) * ( ( 1 << $ i ) % $ mod ) ; $ ans %= $ mod ; } echo $ ans . " \n " ;
<?php echo pow ( trim ( fgets ( STDIN ) ) , 3 ) , PHP_EOL ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ x [ $ i ] = intval ( trim ( fgets ( STDIN ) ) ) ; } $ k = intval ( trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( $ x [ $ j ] - $ x [ $ i ] > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ data = array ( ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ data [ ] = fscanf ( STDIN , " %d %d " ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ data [ $ i ] [ 2 ] = $ i ; } foreach ( $ data as $ key => $ value ) { $ sort [ $ key ] = $ value [ 1 ] ; } array_multisort ( $ sort , SORT_ASC , $ data ) ; $ ans_data = array ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ ans_data [ $ i ] = 1 ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ id_first = sprintf ( ' %06d ' , $ data [ $ i ] [ 0 ] ) ; $ id_last = sprintf ( ' %06d ' , $ ans_data [ $ data [ $ i ] [ 0 ] ] ) ; $ data [ $ i ] [ 3 ] = $ id_first . $ id_last ; $ ans_data [ $ data [ $ i ] [ 0 ] ] ++ ; } foreach ( $ data as $ key => $ value ) { $ sort [ $ key ] = $ value [ 2 ] ; } array_multisort ( $ sort , SORT_ASC , $ data ) ; foreach ( $ data as $ a ) { echo $ a [ 3 ] . " \n " ; } ?>
<?php $ num = trim ( fgets ( STDIN ) ) ; $ num = pow ( $ num , 3 ) ; print $ num ; ?>
<?php list ( $ n ) = ints ( ) ; echo 800 * $ n - 200 * intdiv ( $ n , 15 ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php while ( true ) { $ s = str_split ( trim ( fgets ( STDIN ) ) ) ; if ( ! $ s [ 0 ] ) break ; echo array_sum ( $ s ) . " \n " ; }
<?php define ( ' MOD ' , 10 ** 9 + 7 ) ; fscanf ( STDIN , ' %d ' , $ n ) ; $ a = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ ans = 0 ; for ( $ k = 0 ; $ k < 60 ; $ k ++ ) { $ cnt_1 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ a [ $ i ] >> $ k ) & 1 ) $ cnt_1 ++ ; } $ ans = modAdd ( $ ans , modMul ( modMul ( $ n - $ cnt_1 , $ cnt_1 ) , modPow ( 2 , $ k ) ) ) ; } echo $ ans . PHP_EOL ; function modAdd ( $ x , $ y ) { return ( $ x + $ y ) % MOD ; } function modSub ( $ x , $ y ) { return ( $ x + MOD - $ y ) % MOD ; } function modMul ( $ x , $ y ) { return ( $ x * $ y ) % MOD ; } function modDiv ( $ x , $ y ) { return modMul ( $ x , modPow ( $ y , MOD - 2 ) ) ; } function modPow ( $ n , $ x ) { if ( $ x === 0 ) return 1 ; $ res = ( modPow ( $ n , $ x >> 1 ) ** 2 ) % MOD ; if ( $ x % 2 === 1 ) $ res = modMul ( $ res , $ n ) ; return $ res ; }
<?php $ num = trim ( fgets ( STDIN ) ) ; echo $ num * 800 - floor ( $ num / 15 ) * 200 ; ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ fiveH = 0 ; $ fiveH <= $ a ; $ fiveH ++ ) { for ( $ hund = 0 ; $ hund <= $ b ; $ hund ++ ) { for ( $ fifty = 0 ; $ fifty <= $ c ; $ fifty ++ ) { if ( 500 * $ fiveH + 100 * $ hund + 50 * $ fifty == $ x ) { $ result ++ ; } } } } echo ( $ result ) ;
<?php class Circle { var $ r ; function __construct ( ) { fscanf ( STDIN , " %d " , $ this -> r ) ; } function __invoke ( ) { return pow ( $ this -> r , 2 ) ; } } $ obj = new Circle ( ) ; echo $ obj ( ) ;
<?php $ line = fgets ( STDIN ) ; $ x = 800 * $ line ; $ tmp = floor ( $ line / 15 ) ; $ y = 200 * $ tmp ; $ ans = $ x - $ y ; echo $ ans ; ?>
<?php $ input = fgets ( STDIN ) ; echo ( pow ( $ input , 3 ) ) ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } public function nextString ( ) { return ( string ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ s = $ sc -> nextString ( ) ; $ target = ' 2019/04/30 ' ; if ( strtotime ( $ s ) <= strtotime ( $ target ) ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php $ array = explode ( " " , fgets ( STDIN ) ) ; $ count5 = 0 ; $ count7 = 0 ; foreach ( $ array as $ num ) { switch ( $ num ) { case 5 : $ count5 ++ ; break ; case 7 : $ count7 ++ ; break ; } } if ( $ count5 == 2 && $ count7 == 1 ) { echo ( " YES \n " ) ; } else { echo ( " NO \n " ) ; }
<?php $ X = [ ] ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; fscanf ( STDIN , " %d " , $ X [ ] ) ; usort ( $ X , function ( $ x , $ y ) { return ( $ x - 1 ) % 10 < ( $ y - 1 ) % 10 ; } ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ ans += ceil ( $ X [ $ i ] / 10 ) * 10 ; } $ ans += $ X [ 4 ] ; echo $ ans ;
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php $ stdin = ( int ) trim ( fgets ( STDIN ) ) ; print ( int ) ( $ stdin * $ stdin ) ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 1 ; $ i < 3 ; $ i ++ ) { for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { if ( $ c [ 0 ] [ $ j ] - $ c [ 0 ] [ 0 ] != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ arr = [ $ a , $ b , $ c ] ; $ z = 0 ; foreach ( $ arr as $ ar ) switch ( $ ar ) { case ( 5 ) : $ z += 1 ; break ; case ( 7 ) : $ z += 10 ; break ; default : break ; } if ( $ z == 12 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab > $ cd ) { echo $ ab ; } elseif ( $ ab < $ cd ) { echo $ cd ; } else { echo $ cd ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( ( $ z >= 0 ) && ( $ z <= $ k ) ) { $ cnt ++ ; } } } echo $ cnt ; echo " \n " ; ?>
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo ( ceil ( ( $ a [ 1 ] + $ a [ 0 ] ) / 2 ) ) ;
<?php $ t = new temp ( ) ; $ t -> stdin ( ) ; unset ( $ t ) ; class temp { public function stdin ( ) { $ line1 = explode ( " " , fgets ( STDIN ) ) ; $ line2 = explode ( " " , fgets ( STDIN ) ) ; $ line3 = explode ( " " , fgets ( STDIN ) ) ; $ f = true ; $ con1 = $ line1 [ 0 ] - $ line1 [ 1 ] ; $ con2 = $ line2 [ 0 ] - $ line2 [ 1 ] ; $ con3 = $ line3 [ 0 ] - $ line3 [ 1 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line1 [ 1 ] - $ line1 [ 2 ] ; $ con2 = $ line2 [ 1 ] - $ line2 [ 2 ] ; $ con3 = $ line3 [ 1 ] - $ line3 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line1 [ 0 ] - $ line2 [ 0 ] ; $ con2 = $ line1 [ 1 ] - $ line2 [ 1 ] ; $ con3 = $ line1 [ 2 ] - $ line2 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } $ con1 = $ line2 [ 0 ] - $ line3 [ 0 ] ; $ con2 = $ line2 [ 1 ] - $ line3 [ 1 ] ; $ con3 = $ line2 [ 2 ] - $ line3 [ 2 ] ; if ( $ con1 != $ con2 || $ con1 != $ con3 || $ con2 != $ con3 ) { $ f = false ; } if ( $ f ) { echo " Yes " ; } else { echo " No " ; } } } ?>
<?php $ n = int ( ) ; $ a = ints ( ) ; $ sum = 0 ; $ mod = 10 ** 9 + 7 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ c = 0 ; foreach ( $ a as $ b ) { $ c += ( $ b >> $ i ) & 1 ; } $ sum += ( ( ( $ c % $ mod ) * ( $ n - $ c ) ) % $ mod ) * ( ( 1 << $ i ) % $ mod ) ; $ sum %= $ mod ; } echo $ sum ; function ints ( ) { return array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } function int ( ) { return intval ( trim ( fgets ( STDIN ) ) ) ; }
<?php $ inputs = explode ( " " , file_get_contents ( " php: $ inputs = array_map(intval, $ inputs ); list( $ a , $ b , $ c , $ d ) = $ inputs ; echo max( $ a * $ b , $ c * $ d ) ;
<?php fscanf ( STDIN , ' %s ' , $ n ) ; $ array = explode ( " / " , $ n ) ; if ( $ array [ 0 ] < 2019 ) { echo ' Heisei ' ; } else if ( ( int ) $ array [ 1 ] < 5 ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php $ x = ( int ) fgets ( STDIN ) ; $ y = pow ( $ x , 3 ) ; echo $ y ; echo ( " \n " ) ; ?>
<?php $ n = 5 ; $ x = 0 ; while ( $ n -- ) { fscanf ( STDIN , " %d " , $ t ) ; $ s = $ t % 10 ; if ( $ s ) { $ d [ ] = $ s ; $ x += $ t - $ s + 10 ; } else { $ x += $ t ; } } echo isset ( $ d ) ? $ x + min ( $ d ) - 10 : $ x ;
<?php $ input = trim ( file_get_contents ( ' php: echo $input ** 3, PHP_EOL;
<?php while ( $ line = fgets ( STDIN ) ) { $ array [ ] = trim ( $ line ) ; } $ count = 0 ; for ( $ i = 0 ; $ i <= $ array [ 0 ] ; $ i ++ ) { for ( $ z = 0 ; $ z <= $ array [ 1 ] ; $ z ++ ) { for ( $ v = 0 ; $ v <= $ array [ 2 ] ; $ v ++ ) { $ x = 500 * $ i + 100 * $ z + 50 * $ v ; if ( $ x == $ array [ 3 ] ) { $ count ++ ; } } } } echo $ count ; ?>
<?php $ a ; fscanf ( STDIN , " %d " , $ n ) ; for ( $ i = 1 ; $ i <= 3500 ; $ i ++ ) { for ( $ j = 1 ; $ j <= 3500 ; $ j ++ ) { $ x = 4 * $ i * $ j - $ n * $ j - $ n * $ i ; $ y = $ i * $ j * $ n ; if ( $ x > 0 && $ y % $ x == 0 ) { echo " $ i $ j " , ( $ y / $ x ) , " \n " ; exit ; } } } ?>
<?php $ val = trim ( fgets ( STDIN ) ) ; echo $ val * $ val ;
<?php $ answer = ( int ) trim ( fgets ( STDIN ) ) ; define ( ' MAX ' , 119 ) ; define ( ' MIN ' , - 118 ) ; for ( $ i = MIN ; $ i <= MAX ; $ i ++ ) { for ( $ n = MIN ; $ n <= MAX ; $ n ++ ) { $ check_answer = pow ( $ i , 5 ) - pow ( $ n , 5 ) ; if ( $ answer === $ check_answer ) { echo $ i . ' ' . $ n ; break 2 ; } } }
<?php fscanf ( STDIN , " %d " , $ a ) ; echo pow ( $ a , 3 ) ; echo " \n " ;
<?php function input ( string $ func = null ) { if ( $ func === null ) { return trim ( fgets ( STDIN ) ) ; } else { return $ func ( trim ( fgets ( STDIN ) ) ) ; } } function input_array ( string $ func = null ) { if ( $ func === null ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } else { return array_map ( function ( $ v ) use ( $ func ) { return $ func ( $ v ) ; } , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } } $ ns = input_array ( ' intval ' ) ; sort ( $ ns ) ; if ( $ ns === [ 1 , 4 , 7 , 9 ] ) { echo " YES \n " ; } else { echo " NO \n " ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; echo " \n " ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ town = [ ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x , $ y ) ; $ town [ $ i ] = [ $ x , $ y ] ; } function dis ( $ t1 , $ t2 ) { $ a = ( $ t1 [ 0 ] - $ t2 [ 0 ] ) ** 2 ; $ b = ( $ t1 [ 1 ] - $ t2 [ 1 ] ) ** 2 ; return pow ( $ a + $ b , 1 / 2 ) ; } function createPermutation ( $ n , $ r ) { if ( ! $ r || $ n < $ r ) { return array ( ) ; } $ return = array ( ) ; $ n2 = $ n - 1 ; if ( $ r == 1 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ return [ ] = array ( $ i ) ; } return $ return ; } foreach ( createPermutation ( $ n2 , $ r ) as $ row ) { $ return [ ] = $ row ; } foreach ( createPermutation ( $ n2 , $ r - 1 ) as $ row ) { for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { $ return [ ] = array_merge ( array_slice ( $ row , 0 , $ i ) , array ( $ n2 ) , array_slice ( $ row , $ i ) ) ; } } return $ return ; } $ ret = createPermutation ( $ N , $ N ) ; $ dist = 0 ; foreach ( $ ret as $ rr ) { for ( $ j = 0 ; $ j < $ N - 1 ; $ j ++ ) { $ dist += dis ( $ town [ $ rr [ $ j ] ] , $ town [ $ rr [ $ j + 1 ] ] ) ; } } echo ( $ dist / count ( $ ret ) ) . " \n " ;
<?php $ X = fgets ( STDIN ) ; for ( $ i = - 200 ; $ i <= 200 ; $ i ++ ) { for ( $ j = - 200 ; $ j <= 200 ; $ j ++ ) { if ( pow ( $ i , 5 ) - pow ( $ j , 5 ) == $ X ) { break 2 ; } } } echo $ i . ' ' . $ j . PHP_EOL ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ line = trim ( fgets ( STDIN ) ) ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ map [ $ i ] [ $ j ] = $ line [ $ j ] ; } } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ line = trim ( fgets ( STDIN ) ) ; for ( $ j = 0 ; $ j < $ m ; $ j ++ ) { $ map2 [ $ i ] [ $ j ] = $ line [ $ j ] ; } } for ( $ X = 0 ; $ X <= $ n - $ m ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= $ n - $ m ; $ Y ++ ) { $ flag = true ; for ( $ x = 0 ; $ x < $ m ; $ x ++ ) { for ( $ y = 0 ; $ y < $ m ; $ y ++ ) { if ( $ map [ $ X + $ x ] [ $ Y + $ y ] != $ map2 [ $ x ] [ $ y ] ) { $ flag = false ; } } } if ( $ flag == true ) { echo " Yes " ; exit ; } } } echo " No " ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ l = [ $ a , $ b , $ c ] ; $ s = [ 5 => 0 , 7 => 0 ] ; foreach ( $ l as $ v ) { if ( in_array ( $ v , [ 5 , 7 ] ) ) { $ s [ $ v ] ++ ; } else { echo " NO " ; exit ; } } if ( $ s [ 5 ] == 2 && $ s [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x_list = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ avg = array_sum ( $ x_list ) / count ( $ x_list ) ; $ ans1 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) floor ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; $ ans2 = array_sum ( array_map ( function ( $ x ) use ( $ avg ) { return ( $ x - ( int ) ceil ( $ avg ) ) ** 2 ; } , $ x_list ) ) ; echo min ( $ ans1 , $ ans2 ) ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ b [ $ i ] ] = true ; } if ( count ( $ a ) == 4 ) echo " Four " ; else echo " Three " ; echo PHP_EOL ;
<?php while ( ! feof ( STDIN ) ) { $ stdin = trim ( fgets ( STDIN ) ) ; $ values = explode ( ' , ' , $ stdin ) ; if ( count ( $ values ) != 5 ) { } else { $ temp = array ( ) ; foreach ( $ values as $ value ) { if ( ! isset ( $ temp [ $ value ] ) ) { $ temp [ $ value ] = 1 ; } else { $ temp [ $ value ] ++ ; } } ksort ( $ temp ) ; $ ret = ' null ' ; foreach ( $ temp as $ t ) { if ( $ t == 4 ) { $ ret = ' four card ' ; } elseif ( $ t == 3 ) { if ( $ ret == ' one pair ' ) { $ ret = ' full house ' ; } else { $ ret = ' three card ' ; } } elseif ( $ t == 2 ) { if ( $ ret == ' one pair ' ) { $ ret = ' two pair ' ; } elseif ( $ ret == ' three card ' ) { $ ret = ' full house ' ; } else { $ ret = ' one pair ' ; } } } $ temp = array_keys ( $ temp ) ; if ( count ( $ temp ) == 5 && $ temp [ 4 ] - $ temp [ 0 ] == 4 ) { $ ret = ' straight ' ; } $ temp2 = array ( ) ; foreach ( $ temp as $ t ) { if ( $ t == 1 ) { $ temp2 [ ] = 14 ; } else { $ temp2 [ ] = $ t ; } } sort ( $ temp2 ) ; if ( count ( $ temp2 ) == 5 && $ temp2 [ 4 ] - $ temp2 [ 0 ] == 4 ) { $ ret = ' straight ' ; } echo $ ret . " \n " ; } }
<?php $ result = 0 ; while ( ! feof ( STDIN ) ) { $ arg [ ] = trim ( fgets ( STDIN ) ) ; } foreach ( $ arg as $ minutes ) { $ trim = intval ( substr ( strval ( $ minutes ) , - 1 , 1 ) ) ; if ( $ trim == 0 ) { $ trims [ ] = 10 ; } else { $ trims [ ] = $ trim ; } } $ min = min ( $ trims ) ; $ min_key = array_keys ( $ trims , $ min ) ; foreach ( $ arg as $ key => $ value ) { if ( $ key != $ min_key [ 0 ] ) { $ value = ceil ( ( intval ( $ value ) / 10 ) ) * 10 ; } $ result = $ value + $ result ; } echo $ result ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ m ) ; $ X = [ ] ; $ Y = [ ] ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { fscanf ( STDIN , " %d %d " , $ p , $ y ) ; $ X [ ] = [ $ p , $ y ] ; $ Y [ $ p ] [ ] = $ y ; } foreach ( $ Y as $ key => $ arr ) { sort ( $ arr ) ; $ Y [ $ key ] = $ arr ; } for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { $ p = $ X [ $ i ] [ 0 ] ; $ y = $ X [ $ i ] [ 1 ] ; $ ty = $ Y [ $ p ] ; $ l = 0 ; $ r = count ( $ ty ) ; while ( $ r - $ l >= 1 ) { $ mid = intdiv ( $ l + $ r , 2 ) ; if ( $ ty [ $ mid ] >= $ y ) { $ r = $ mid ; } else { $ l = $ mid + 1 ; } } echo sprintf ( " %06d%06d \n " , $ p , $ r + 1 ) ; }
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ tmp ) ; $ array [ ] = $ tmp ; } fscanf ( STDIN , " %d " , $ K ) ; echo max ( $ array ) - min ( $ array ) > $ K ? " :( " : " Yay! " ;
<?php $ i = trim ( fgets ( STDIN ) ) ; $ s = $ i * $ i * $ i ; echo $ s ; ?>
<?php fscanf ( STDIN , ' %d %d %d ' , $ A , $ B , $ C ) ; if ( $ A + $ B >= $ C ) { echo ' Yes ' ; } else { echo ' No ' ; } echo PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ x = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ p = round ( array_sum ( $ x ) / count ( $ x ) , 0 ) ; $ i = 0 ; foreach ( $ x as $ a ) { $ i += ( $ a - $ p ) ** 2 ; } echo $ i . PHP_EOL ;
<?php $ input = trim ( fgets ( STDIN ) ) ; echo $ input * $ input * $ input ; ?>
<?php fscanf ( STDIN , ' %d ' , $ N ) ; $ P = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ x = PHP_INT_MAX ; $ ans = 0 ; foreach ( $ P as $ v ) { if ( $ x > $ v ) { $ ans ++ ; $ x = $ v ; } } printf ( ' %d ' , $ ans ) ;
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ aa = array_count_values ( $ a ) ; if ( $ aa [ 5 ] == 2 && $ aa [ 7 ] == 1 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php $ S = trim ( fgets ( STDIN ) ) ; if ( $ S [ 2 ] == $ S [ 3 ] && $ S [ 4 ] == $ S [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; printf ( $ res ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; echo $ n ** 3 , PHP_EOL ; ?>
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ L = strlen ( $ N ) ; $ s = 0 ; for ( $ i = 0 ; $ i < $ L ; $ i ++ ) $ s += $ N [ $ i ] ; echo $ s , PHP_EOL ; }
<?php $ in = trim ( fgets ( STDIN ) ) ; echo str_replace ( " ? " , " D " , $ in ) ; ?>
<?php list ( $ x ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pow5 = [ ] ; for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { $ pow5 [ $ i ] = pow ( $ i , 5 ) ; } for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { for ( $ j = 0 ; $ j < 200 ; $ j ++ ) { if ( $ x == ( $ pow5 [ $ i ] - $ pow5 [ $ j ] ) ) { echo $ i . " " . $ j ; exit ; } } } for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { for ( $ j = 0 ; $ j < 200 ; $ j ++ ) { if ( $ x == ( $ pow5 [ $ i ] + $ pow5 [ $ j ] ) ) { echo $ j . " " . $ i * - 1 ; exit ; } } }
<?php $ inVal = trim ( fgets ( STDIN ) ) ; $ ans = $ inVal ; for ( $ i = 0 ; $ i < 2 ; $ i ++ ) { $ ans = $ ans * $ inVal ; } echo $ ans . PHP_EOL ; ?>
<?php $ k_s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ k_s [ 0 ] ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k_s [ 0 ] ; $ j ++ ) { $ z = $ k_s [ 1 ] - $ i - $ j ; if ( $ z >= 0 && $ z <= $ k_s [ 0 ] ) { $ result ++ ; } } } echo $ result ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ abcx = array ( ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ abcx [ ] = trim ( fgets ( STDIN ) ) ; } $ c = 0 ; for ( $ i = 0 ; $ i <= $ abcx [ 0 ] ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ abcx [ 1 ] ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ abcx [ 2 ] ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ abcx [ 3 ] ) { $ c ++ ; } } } } echo $ c . " \n " ;
<?php list ( $ s ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( substr ( $ s , 2 , 1 ) !== substr ( $ s , 3 , 1 ) ) { echo ' No ' ; } elseif ( substr ( $ s , 4 , 1 ) !== substr ( $ s , 5 , 1 ) ) { echo ' No ' ; } else { echo ' Yes ' ; }
<?php fscanf ( STDIN , ' %s ' , $ a ) ; if ( substr ( $ a , 2 , 1 ) === substr ( $ a , 3 , 1 ) && substr ( $ a , 4 , 1 ) === substr ( $ a , 5 , 1 ) ) { echo ' Yes ' ; } else { echo ' No ' ; } echo PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ sum = array_sum ( str_split ( strval ( $ N ) ) ) ; echo ( $ N % $ sum === 0 ) ? " Yes " . " \n " : " No " . " \n " ;
<?php $ x = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ x * $ x * $ x . " \n " ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ a * $ b , $ c * $ d ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = 1 ; $ current = $ p [ 0 ] ; foreach ( $ p as $ num ) { if ( $ current > $ num ) { $ count ++ ; $ current = $ num ; } } echo $ count . PHP_EOL ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ n * 800 - 200 * intdiv ( $ n , 15 ) ;
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ d = trim ( fgets ( STDIN ) ) ; $ e = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; if ( $ e - $ a > $ k ) { echo ' :( ' ; } else { echo ' Yay! ' ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ x = array ( ) ; $ y = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ x [ $ i ] , $ y [ $ i ] ) ; } $ k = 1 ; for ( $ i = $ n ; $ i > 0 ; $ i -- ) { $ k *= $ i ; } $ distance_array = array ( ) ; $ distance_total = 0 ; $ diff_pettern = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ distance_array [ $ diff_pettern ] = sqrt ( pow ( ( $ x [ $ i ] - $ x [ $ j ] ) , 2 ) + pow ( ( $ y [ $ i ] - $ y [ $ j ] ) , 2 ) ) ; $ distance_total += $ distance_array [ $ diff_pettern ] ; $ diff_pettern ++ ; } } $ cond_num = ( $ k * ( $ n - 1 ) ) / $ diff_pettern ; echo ( $ cond_num * $ distance_total / $ k ) ;
<?php list ( $ h1 , $ m1 , $ h2 , $ m2 , $ k ) = fscanf ( STDIN , ' %d %d %d %d %d ' ) ; $ wakemin = $ h1 * 60 + $ m1 - ( $ h2 * 60 + $ m2 ) ; echo - $ wakemin - $ k ;
<?php fscanf ( STDIN , ' %d%d%d ' , $ A , $ B , $ C ) ; $ S = [ $ A , $ B , $ C ] ; rsort ( $ S ) ; if ( $ S [ 0 ] == 7 && $ S [ 1 ] == 5 && $ S [ 2 ] == 5 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php list ( $ a , $ b , $ c ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ a + $ b >= $ c ? " Yes " : " No " ;
<?php for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ i ) { if ( $ a - $ b != $ x || $ b - $ c != $ y ) exit ( ' No ' ) ; } else { $ x = $ a - $ b ; $ y = $ b - $ c ; } } echo ' Yes ' ;
<?php list ( $ N , $ K ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ amari = $ N - $ K ; if ( $ K == 1 ) $ amari = 0 ; printf ( " %d \n " , $ amari ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ input = array ( $ a , $ b , $ c ) ; $ result = false ; $ target = array ( 5 , 5 , 7 ) ; foreach ( $ input as $ data ) { $ index = array_search ( $ data , $ target ) ; if ( $ index === false ) { echo ' NO ' ; exit ; } unset ( $ target [ $ index ] ) ; } if ( empty ( $ target ) ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A >= 13 ) { echo $ B ; } else if ( $ A >= 6 && $ A <= 12 ) { echo $ B / 2 ; } else { echo " 0 " ; }
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; sort ( $ a ) ; echo $ a [ 0 ] == 5 && $ a [ 1 ] == 5 && $ a [ 2 ] == 7 ? ' YES ' : ' NO ' , " \n " ;
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php function input ( ) { return trim ( fgets ( STDIN ) ) ; } function input_array ( ) { return explode ( ' ' , input ( ) ) ; } list ( $ n , $ m ) = array_map ( function ( $ numeric_string ) { return ( int ) $ numeric_string ; } , input_array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ prefectures [ $ i ] = [ ] ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { list ( $ prefecture , $ year ) = input_array ( ) ; $ cities [ $ i ] = [ ' prefecture ' => $ prefecture , ' year ' => $ year ] ; $ prefectures [ $ prefecture ] [ ] = [ ' city ' => $ i , ' year ' => $ year ] ; } foreach ( $ prefectures as & $ prefecture ) { usort ( $ prefecture , function ( $ a , $ b ) { return $ a [ ' year ' ] <=> $ b [ ' year ' ] ; } ) ; array_values ( $ prefecture ) ; foreach ( $ prefecture as $ key => $ city ) { $ cities [ $ city [ ' city ' ] ] [ ' number ' ] = $ key + 1 ; } } foreach ( $ cities as $ city ) { echo str_pad ( $ city [ ' prefecture ' ] , 6 , ' 0 ' , STR_PAD_LEFT ) . str_pad ( $ city [ ' number ' ] , 6 , ' 0 ' , STR_PAD_LEFT ) . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ N ) ; $ S = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo in_array ( " Y " , $ S ) ? " Four \n " : " Three \n " ;
<?php main ( ) ; function main ( ) { $ sumTime = 0 ; $ minFirstDigitValue = 10 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ input = fgets ( STDIN ) ; $ minFirstDigitValue = compareFirstDigit ( $ minFirstDigitValue , $ input ) ; $ sumTime += roundUpFirstDigit ( $ input ) ; } $ sumTime -= 10 - $ minFirstDigitValue ; printf ( $ sumTime ) ; } function roundUpFirstDigit ( $ value ) { return intval ( ceil ( $ value * 0.1 ) * 10 ) ; } function compareFirstDigit ( $ minFirstDigitValue , $ value ) { $ firstDigit = $ value % 10 ; if ( $ firstDigit < $ minFirstDigitValue && $ firstDigit > 0 ) { $ minFirstDigitValue = $ firstDigit ; } return $ minFirstDigitValue ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ alice = [ ' alice ' => $ a ] ; $ bob = [ ' bob ' => $ b ] ; if ( $ alice [ ' alice ' ] === $ bob [ ' bob ' ] ) { echo ' Draw ' ; } elseif ( $ bob [ ' bob ' ] == 1 ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] == 1 ) { echo ' Alice ' ; } elseif ( $ alice [ ' alice ' ] < $ bob [ ' bob ' ] ) { echo ' Bob ' ; } elseif ( $ alice [ ' alice ' ] > $ bob [ ' bob ' ] ) { echo ' Alice ' ; }
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ time_from = strtotime ( ' 2020-05-31 ' . $ h1 . " : " . $ m1 ) ; $ time_to = strtotime ( ' 2020-05-31 ' . $ h2 . " : " . $ m2 ) ; $ diff_time = ( $ time_to - $ time_from ) / 60 ; echo ( $ diff_time - $ k ) ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ X = $ sc -> nextInt ( ) ; $ fx = array_sum ( str_split ( $ X ) ) ; if ( $ X % $ fx == 0 ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , " %s " , $ n ) ; $ s = 0 ; for ( $ i = 0 ; $ i < strlen ( $ n ) ; $ i ++ ) { $ s += $ n [ $ i ] ; } echo $ n % $ s ? ' No ' : ' Yes ' ;
<?php fscanf ( STDIN , ' %d %d ' , $ year , $ cost ) ; if ( $ year < 6 ) { echo 0 ; } elseif ( $ year < 13 ) { echo ( int ) ( $ cost / 2 ) ; } else { echo $ cost ; }
<?php fscanf ( STDIN , " %d " , $ a ) ; $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; $ j_max = 10 ** 6 ; foreach ( $ input as $ n ) { if ( $ j_max >= $ n ) { $ j_max = $ n ; $ ans ++ ; } } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( ( $ A <= 8 ) && ( $ B <= 8 ) ) { echo ' Yay! ' ; } else { echo ' :( ' ; } ?>
<?php list ( $ n , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ k == 1 ) { echo 0 ; } else { echo $ n - $ k ; }
<?php $ a = fscanf ( STDIN , " %s " , $ s ) ; if ( preg_match ( " /^(dream|dreamer|erase|eraser)+$/ " , $ s ) ) { echo " YES \n " ; } else { echo " NO \n " ; } ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ pref = array_fill ( 1 , $ n , [ ] ) ; $ ans = [ ] ; while ( $ m -- ) { fscanf ( STDIN , " %d%d " , $ p , $ c ) ; $ pref [ $ p ] [ $ c ] = 0 ; $ ans [ ] = [ $ p , $ c ] ; } foreach ( $ pref as $ p => $ ps ) { ksort ( $ ps ) ; $ j = 1 ; foreach ( $ ps as $ city => $ zero ) { $ pref [ $ p ] [ $ city ] = $ j ; $ j ++ ; } } foreach ( $ ans as $ data ) { printf ( " %06d%06d " . PHP_EOL , $ data [ 0 ] , $ pref [ $ data [ 0 ] ] [ $ data [ 1 ] ] ) ; }
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ X ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { $ total = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ total == $ X ) { $ count ++ ; } } } } print $ count ;
<?php $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; while ( $ n != 0 ) { $ m = intval ( $ numbers [ 1 ] ) ; $ money = [ ] ; $ total = 0 ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ money [ ] = intval ( $ numbers [ $ i ] ) ; if ( ( $ m / $ n ) <= $ numbers [ $ i ] ) { $ total += ( $ m / $ n ) ; } else { $ total += $ numbers [ $ i ] ; } } print $ total ; print " \n " ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; }
<?php $ s = explode ( " " , trim ( fgets ( STDIN ) ) ) ; sort ( $ s ) ; $ ret = $ s [ 0 ] . $ s [ 3 ] . $ s [ 2 ] . $ s [ 1 ] ; echo ( $ ret == 1974 ) ? ' YES ' : ' NO ' ;
<?php $ x = trim ( fgets ( STDIN ) ) ; $ y = $ x * $ x * $ x ; echo $ y . " \n " ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ kotae = 0 ; $ a_max = min ( $ a , floor ( $ x / 500 ) ) * 500 ; $ b_max = min ( $ b , floor ( $ x / 100 ) ) * 100 ; $ c_max = min ( $ c , floor ( $ x / 50 ) ) * 50 ; for ( $ cur_a = 0 ; $ cur_a <= $ a_max ; $ cur_a += 500 ) { for ( $ cur_b = 0 ; $ cur_b <= $ b_max ; $ cur_b += 100 ) { for ( $ cur_c = 0 ; $ cur_c <= $ c_max ; $ cur_c += 50 ) { if ( $ cur_a + $ cur_b + $ cur_c == $ x ) { $ kotae ++ ; } } } } echo $ kotae ; ?>
<?php $ priority = [ ] ; for ( $ count = 1 , $ tmp = 2 ; $ tmp < 14 ; $ tmp ++ ) { $ priority [ $ tmp ] = $ count ; $ count ++ ; } $ priority [ 1 ] = 13 ; fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ priority [ $ a ] > $ priority [ $ b ] ) { print ( " Alice \n " ) ; } else if ( $ priority [ $ a ] < $ priority [ $ b ] ) { print ( " Bob \n " ) ; } else { print ( " Draw \n " ) ; } ?>
<?php fscanf ( STDIN , " %d %d " , $ K , $ S ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { if ( $ i + $ j <= $ S && $ S - $ i - $ j <= $ K ) { $ result ++ ; } } } echo $ result ;
<?php list ( $ n ) = ints ( ) ; $ a = ints ( ) ; echo max ( $ a ) - min ( $ a ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; $ ans = ceil ( ( $ a + $ b ) / 2 ) ; echo $ ans ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ d = new DateTime ( $ input ) ; $ boundary = new DateTime ( ' 2019/04/30 ' ) ; if ( $ d <= $ boundary ) { echo " Heisei \n " ; } else { echo " TBD \n " ; }
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php $ p = [ 10 , 2 , 1 ] ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ a [ ] = trim ( fgets ( STDIN ) ) ; $ sum = trim ( fgets ( STDIN ) ) / 50 ; $ dp [ 0 ] [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= 3 ; $ i ++ ) { foreach ( $ dp [ $ i - 1 ] as $ price => $ count ) { for ( $ j = 0 ; $ j <= $ a [ $ i - 1 ] ; $ j ++ ) { @ $ dp [ $ i ] [ $ price + $ p [ $ i - 1 ] * $ j ] += $ dp [ $ i - 1 ] [ $ price ] ; } } } echo @ $ dp [ 3 ] [ $ sum ] + 0 ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ coin_a = $ input [ 0 ] ; $ coin_b = $ input [ 1 ] ; $ target = $ input [ 2 ] ; if ( $ coin_a + $ coin_b >= $ target ) { echo " Yes \n " ; } else { echo " No \n " ; }
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ deg_m = 360 / 60 * $ m ; $ deg_h = ( $ h * 60 + $ m ) * 360 / ( 12 * 60 ) ; $ deg = $ deg_h - $ deg_m ; $ answer = pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( deg2rad ( $ deg ) ) ; echo sqrt ( $ answer ) ;
<?php $ A = fgets ( STDIN ) ; $ B = fgets ( STDIN ) ; $ C = fgets ( STDIN ) ; $ sum = fgets ( STDIN ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ A ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ B ; $ b ++ ) { for ( $ c = 0 ; $ c <= $ C ; $ c ++ ) { $ total = $ a * 500 + $ b * 100 + $ c * 50 ; if ( $ sum == $ total ) { $ count ++ ; } } } } echo $ count ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; if ( 1 <= $ x && $ x <= 100 ) { echo ( int ) ( $ x * $ x * $ x ) ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; echo 800 * $ n - 200 * floor ( $ n / 15 ) ;
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $K = $key->A[0]; $S = $key->A[1]; $res = array(); $ret = 0; for($i=0;$i<=$K;$i++) { for($j=0;$j<=$K;$j++) { $chk = $S-$i-$j; if ($chk >= 0 && $chk <= $K) $ret++; } } printf("%d\n",$ret);
<?php list ( $ n , $ m ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ inputGraph = [ ] ; for ( $ index = 1 ; $ index <= $ n ; $ index ++ ) { $ inputGraph [ $ index ] = array_fill ( 1 , $ n , PHP_INT_MAX ) ; $ inputGraph [ $ index ] [ $ index ] = 0 ; } for ( $ index = 1 ; $ index <= $ m ; $ index ++ ) { list ( $ a , $ b , $ c ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ inputGraph [ $ a ] [ $ b ] = $ c ; $ inputGraph [ $ b ] [ $ a ] = $ c ; } $ shortestGraph = $ inputGraph ; for ( $ via = 1 ; $ via <= $ n ; $ via ++ ) { for ( $ start = 1 ; $ start <= $ n ; $ start ++ ) { for ( $ end = 1 ; $ end <= $ n ; $ end ++ ) { $ shortestGraph [ $ start ] [ $ end ] = min ( $ shortestGraph [ $ start ] [ $ end ] , $ shortestGraph [ $ start ] [ $ via ] + $ shortestGraph [ $ via ] [ $ end ] ) ; } } } $ result = 0 ; for ( $ start = 1 ; $ start <= $ n ; $ start ++ ) { for ( $ end = $ start ; $ end <= $ n ; $ end ++ ) { if ( $ inputGraph [ $ start ] [ $ end ] != PHP_INT_MAX && $ shortestGraph [ $ start ] [ $ end ] != $ inputGraph [ $ start ] [ $ end ] ) { $ result ++ ; } } } echo $ result ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ ans = pow ( $ input , 3 ) ; echo $ ans . PHP_EOL ;
<?php $ line = trim ( fgets ( STDIN ) ) ; echo intval ( $ line ) ** 3 ; ?>
<?php $ num = trim ( fgets ( STDIN ) ) ; $ res = $ num * $ num * $ num ; echo $ res . PHP_EOL ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php $ times = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ times [ ] = trim ( fgets ( STDIN ) ) ; } $ allOnePlaces = [ ] ; $ onesPlaces = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ allOnePlaces [ ] = $ times [ $ i ] % 10 ; if ( $ times [ $ i ] % 10 === 0 ) { continue ; } $ onesPlaces [ ] = $ times [ $ i ] % 10 ; } $ minOnesPlaces = min ( $ onesPlaces ) ; $ minOnesPlacesTime = array_keys ( $ allOnePlaces , $ minOnesPlaces , true ) ; $ result = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ minOnesPlacesTime [ 0 ] ) { $ result += $ times [ $ i ] ; continue ; } $ result += ceil ( $ times [ $ i ] / 10 ) * 10 ; } echo $ result , PHP_EOL ;
<?php $ inp = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ sq1 = $ inp [ 0 ] * $ inp [ 1 ] ; $ sq2 = $ inp [ 2 ] * $ inp [ 3 ] ; if ( $ sq1 >= $ sq2 ) { echo $ sq1 ; } else { echo $ sq2 ; } ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; print ( $ n * $ n * $ n ) ; ?>
<?php list ( $ a ) = ints ( ) ; list ( $ b ) = ints ( ) ; list ( $ c ) = ints ( ) ; list ( $ x ) = ints ( ) ; $ cnt = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { if ( $ i * 500 + $ j * 100 > $ x ) continue ; $ rest = $ x - $ i * 500 - $ j * 100 ; if ( $ rest % 50 === 0 && $ rest / 50 <= $ c ) $ cnt ++ ; } } echo $ cnt ; ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ ns = explode ( ' ' , $ stdin ) ; for ( $ i = 0 ; $ i < 1000 ; ++ $ i ) { if ( shuffle ( $ ns ) ) if ( $ ns [ 0 ] == 1 && $ ns [ 1 ] == 9 && $ ns [ 2 ] == 7 && $ ns [ 3 ] == 4 ) { echo " YES " ; exit ; } } echo " NO " ;
<?php $ flg = 0 ; while ( $ tmp = fgets ( STDIN ) ) { $ varInputData [ ] = trim ( $ tmp ) ; } $ intInputDataCounter = count ( $ varInputData ) ; $ intInputOutRange = $ varInputData [ $ intInputDataCounter - 1 ] ; unset ( $ varInputData [ $ intInputDataCounter - 1 ] ) ; for ( $ i = 0 ; $ i < $ intInputDataCounter - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ intInputDataCounter - 1 ; $ j ++ ) { if ( $ varInputData [ $ i ] >= $ varInputData [ $ j ] ) { $ intBetweenAntena [ ] = $ varInputData [ $ i ] - $ varInputData [ $ j ] ; } else { $ intBetweenAntena [ ] = $ varInputData [ $ j ] - $ varInputData [ $ i ] ; } } } foreach ( $ intBetweenAntena as $ out ) { if ( $ out > $ intInputOutRange ) { exit ( ' :( ' ) ; break ; } } echo ' Yay! ' ; ?>
<?php while ( fscanf ( STDIN , " %d %d " , $ a , $ b ) > 0 ) { echo $ a + $ b . " \n " ; } ?>
<?php function getKyori ( $ x1 , $ y1 , $ x2 , $ y2 ) { return sqrt ( ( $ x1 - $ x2 ) ** 2 + ( $ y1 - $ y2 ) ** 2 ) ; } $ n = intval ( fgets ( STDIN ) ) ; $ positions = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ positions [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ kyoriArray = [ ] ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ kyoriArray [ ] = getKyori ( $ positions [ $ i ] [ 0 ] , $ positions [ $ i ] [ 1 ] , $ positions [ $ j ] [ 0 ] , $ positions [ $ j ] [ 1 ] ) ; } } $ average = array_sum ( $ kyoriArray ) / count ( $ kyoriArray ) ; echo $ average * ( $ n - 1 ) ;
<?php fscanf ( STDIN , " %d%d%d%d " , $ A , $ B , $ H , $ M ) ; $ argH = ( $ H / 12 + $ M / 12 / 60 ) * 2 * pi ( ) ; $ argM = $ M / 60 * 2 * pi ( ) ; $ dx = $ A * cos ( $ argH ) - $ B * cos ( $ argM ) ; $ dy = $ A * sin ( $ argH ) - $ B * sin ( $ argM ) ; echo ( $ dx ** 2 + $ dy ** 2 ) ** 0.5 ;
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ hFrom , $ mFrom , $ hTo , $ mTo , $ kMin ) ; echo ( ( $ hTo * 60 + $ mTo ) - ( $ hFrom * 60 + $ mFrom ) - $ kMin ) . " \n " ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; echo pow ( $ stdin , 3 ) . PHP_EOL ;
<?php $ data = explode ( ' ' , fgets ( STDIN ) ) ; print ceil ( ( $ data [ 0 ] + $ data [ 1 ] ) / 2 ) ;
<?php $ input = intval ( file_get_contents ( " php: echo $ input ** 3 . " \ n " ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ num = 200 ; for ( $ i = 0 ; $ i < $ num ; $ i ++ ) { for ( $ j = 0 ; $ j < $ num ; $ j ++ ) { if ( ( pow ( $ i , 5 ) + pow ( $ j , 5 ) ) == $ n ) { if ( ! $ j == 0 ) { $ j = $ j * ( - 1 ) ; } echo $ i . " " . $ j ; return ; } if ( ( pow ( $ i , 5 ) - pow ( $ j , 5 ) ) == $ n ) { echo $ i . " " . $ j ; return ; } } } return ; ?>
<?php class Line { protected $ lineData ; protected $ pointer ; public function __construct ( array $ line ) { $ this -> lineData = $ line ; $ this -> pointer = 0 ; $ this -> count = count ( $ line ) ; } public function next ( ) { if ( $ this -> count > $ this -> pointer ) { return $ this -> lineData [ $ this -> pointer ++ ] ; } return false ; } } class IOW { public static function nl ( ) { $ str = trim ( fgets ( STDIN ) ) ; return new Line ( explode ( ' ' , $ str ) ) ; } public static function out ( $ data ) { print_r ( $ data . PHP_EOL ) ; } } $ line = IOW :: nl ( ) ; $ birth = $ line -> next ( ) ; $ money = $ line -> next ( ) ; switch ( true ) { case $ birth >= 13 : IOW :: out ( $ money ) ; break ; case $ birth < 6 : IOW :: out ( 0 ) ; break ; default : IOW :: out ( $ money / 2 ) ; }
<?php #$a = explode(",", trim(fgets(STDIN))); #var_dump($a); while($line = trim(fgets(STDIN))) { $line = explode(",", $line); $bmi = $line[1] / ($line[2] * $line[2]); if ($bmi >= 25) { printf("%d\n", $line[0]); } }
<?php fscanf ( STDIN , " %d " , $ X ) ; $ total = 0 ; for ( $ i = 0 ; $ i < strlen ( $ X ) ; $ i ++ ) { $ total += ( int ) substr ( $ X , $ i , 1 ) ; } echo $ X % $ total === 0 ? ' Yes ' : ' No ' . " \n " ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = array ( $ a , $ b , $ c ) ; $ count = array_count_values ( $ array ) ; if ( $ count [ 7 ] == 1 && $ count [ 5 ] == 2 ) { print ' YES ' ; } else { print ' NO ' ; }
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php $ person = trim ( fgets ( STDIN ) ) ; $ arr_place = explode ( " " , fgets ( STDIN ) ) ; $ sum = 0 ; foreach ( $ arr_place as $ place ) { $ sum += intval ( $ place ) ; } $ average = round ( $ sum / $ person ) ; $ power = 0 ; foreach ( $ arr_place as $ place ) { $ power += pow ( ( $ place - $ average ) , 2 ) ; } echo $ power ; ?>
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A === $ B ) { echo " Draw " ; } else if ( $ A == 1 && $ B <= 13 ) { echo " Alice " ; } else if ( $ B == 1 && $ A <= 13 ) { echo " Bob " ; } else if ( $ A > $ B ) { echo " Alice " ; } else { echo " Bob " ; } ?>
<?php $ last_i = 0 ; $ last_1 = 9 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ d [ $ i ] ) ; $ d_1 = $ d [ $ i ] % 10 ; if ( $ d_1 !== 0 and $ d_1 < $ last_1 ) { $ last_i = $ i ; $ last_1 = $ d_1 ; } } $ time = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ last_i ) { $ time += $ d [ $ i ] ; } else { $ time += ceil ( $ d [ $ i ] / 10 ) * 10 ; } } echo $ time , PHP_EOL ;
<?php $ num = trim ( fgets ( STDIN ) ) ; echo pow ( $ num , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ c11 , $ c12 , $ c13 ) ; fscanf ( STDIN , " %d %d %d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d %d %d " , $ c31 , $ c32 , $ c33 ) ; $ k1 = $ c11 + $ c12 + $ c13 ; $ k2 = $ c21 + $ c22 + $ c23 ; $ k3 = $ c31 + $ c32 + $ c33 ; $ m1 = $ c11 + $ c21 + $ c31 ; $ m2 = $ c12 + $ c22 + $ c32 ; $ m3 = $ c13 + $ c23 + $ c33 ; if ( ( ( $ k1 - $ k2 ) % 3 !== 0 ) || ( ( $ k2 - $ k3 ) % 3 !== 0 ) || ( ( $ m1 - $ m2 ) % 3 !== 0 ) || ( ( $ m2 - $ m3 ) % 3 !== 0 ) ) { echo " No " ; return ; } ; echo " Yes " ; return ;
<?php $ N = trim ( fgets ( STDIN ) ) ; $ A = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ B = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { printf ( " %d \n " , - 1 ) ; exit ; } $ goukaku = true ; $ amari = array ( ) ; $ husoku = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ goukaku = false ; $ husoku [ ] = $ B [ $ i ] - $ A [ $ i ] ; } if ( $ A [ $ i ] > $ B [ $ i ] ) { $ amari [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } if ( $ goukaku ) { printf ( " %d \n " , 0 ) ; exit ; } rsort ( $ amari ) ; $ s = array_sum ( $ husoku ) ; $ total = count ( $ husoku ) ; foreach ( $ amari as $ v ) { $ s = $ s - $ v ; $ total ++ ; if ( $ s < 0 ) break ; } printf ( " %d \n " , $ total ) ;
<?php fscanf ( STDIN , ' %d ' , $ N ) ; echo 800 * $ N - floor ( $ N / 15 ) * 200 ; echo PHP_EOL ;
<?php while ( ( $ nums = trim ( fgets ( STDIN ) ) ) !== ' ' ) { if ( $ nums === ' 0 ' ) break ; $ arr = str_split ( $ nums ) ; echo array_sum ( $ arr ) . " \n " ; }
<?php $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ an [ ] = trim ( fgets ( STDIN ) ) ; $ k = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 5 ; $ j ++ ) { if ( abs ( $ an [ $ i ] - $ an [ $ j ] ) > $ k ) { echo " :( " ; exit ; } } } echo " Yay! " ;
<?php $ s = [ ] ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ s [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i <= 100 ; $ i ++ ) { $ a1 = $ i ; $ b1 = $ s [ 0 ] [ 0 ] - $ a1 ; if ( $ b1 < 0 ) continue ; $ b2 = $ s [ 0 ] [ 1 ] - $ a1 ; if ( $ b2 < 0 ) continue ; $ b3 = $ s [ 0 ] [ 2 ] - $ a1 ; if ( $ b3 < 0 ) continue ; $ a2 = $ s [ 1 ] [ 0 ] - $ b1 ; if ( $ a2 < 0 ) continue ; if ( $ a2 != $ s [ 1 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a2 != $ s [ 1 ] [ 2 ] - $ b3 ) { continue ; } $ a3 = $ s [ 2 ] [ 0 ] - $ b1 ; if ( $ a3 < 0 ) continue ; if ( $ a3 != $ s [ 2 ] [ 1 ] - $ b2 ) { continue ; } if ( $ a3 != $ s [ 2 ] [ 2 ] - $ b3 ) { continue ; } echo " Yes " ; exit ; } echo " No " ;
<?php $ N = fgets ( STDIN ) ; $ P = fgets ( STDIN ) ; $ arrayP = explode ( " " , $ P ) ; $ result = 1 ; $ min = $ arrayP [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ min >= $ arrayP [ $ i ] ) { $ min = $ arrayP [ $ i ] ; $ result ++ ; } } echo $ result ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ A = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { echo " -1 \n " ; } else { $ count = 0 ; $ minus = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ minus += $ B [ $ i ] - $ A [ $ i ] ; $ count ++ ; } else { $ plus [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } sort ( $ plus ) ; while ( $ minus > 0 ) { $ best = array_pop ( $ plus ) ; $ minus -= $ best ; $ count ++ ; } echo $ count ; }
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php fscanf ( STDIN , ' %d ' , $ n ) ; $ x = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; $ x_max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x_max = max ( $ x [ $ i ] , $ x_max ) ; } $ hp_min = ( 100 ** 2 ) * 100 ; for ( $ p = 1 ; $ p <= $ x_max ; $ p ++ ) { $ hp = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ hp += ( $ x [ $ i ] - $ p ) ** 2 ; } $ hp_min = min ( $ hp , $ hp_min ) ; } echo $ hp_min . PHP_EOL ;
<?php fscanf ( STDIN , " %s " , $ T ) ; $ T = str_replace ( ' ? ' , ' D ' , $ T ) ; echo $ T ; function calc ( $ S ) { $ score = 0 ; $ len = strlen ( $ S ) ; $ arr = str_split ( $ S ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ arr [ $ i ] === ' D ' ) { $ score ++ ; } if ( $ i > 0 && $ arr [ $ i - 1 ] === ' P ' ) { $ score ++ ; } } echo PHP_EOL . $ score ; }
<?php # A - erris Wheel fscanf(STDIN, "%d %d", $A, $B); if ($A <= 5 ) { echo 0; } elseif ($A >= 13) { echo $B; } else { echo $B / 2; }
<?php $ inputs = [ ] ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ inputs [ $ i ] ) ; } $ sum = 0 ; $ diffs = [ ] ; foreach ( $ inputs as $ item ) { $ upten = ( int ) ceil ( $ item / 10 ) * 10 ; $ diff = $ upten - $ item ; if ( $ diff > 0 ) { $ diffs [ ] = $ diff ; } $ sum += $ upten ; } if ( count ( $ diffs ) > 0 ) { $ sum -= max ( $ diffs ) ; } echo $ sum ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ Sn = trim ( fgets ( STDIN ) ) ; $ Snary = explode ( " " , $ Sn ) ; $ temp = [ ] ; foreach ( $ Snary as $ colore ) { if ( ! in_array ( $ colore , $ temp , true ) ) { $ temp [ ] = $ colore ; } } echo count ( $ temp ) === 4 ? ' Four ' : ' Three ' ; ?>
<?php $ input = trim ( fgets ( STDIN ) ) ; $ As = explode ( ' ' , $ input ) ; rsort ( $ As ) ; $ cost1 = abs ( $ As [ 1 ] - $ As [ 0 ] ) ; $ cost1 += abs ( $ As [ 2 ] - $ As [ 1 ] ) ; echo $ cost1 ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = 1 ; for ( $ i = 1 ; $ a <= $ n / 2 ; $ i ++ ) { $ a = $ a * 2 ; } echo pow ( 2 , $ i - 1 ) ; ?>
<?php $ str = trim ( fgets ( STDIN ) ) ; $ k = intval ( fgets ( STDIN ) ) ; $ abc = " " ; for ( $ a = " a " ; $ a != " aa " ; $ a ++ ) { $ abc .= $ a ; } for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] <> " a " ) { $ left = 26 - strpos ( $ abc , $ str [ $ i ] ) ; if ( $ left <= $ k ) { $ k -= $ left ; $ str [ $ i ] = " a " ; } } } for ( $ i = 0 ; $ i < $ k % 26 ; $ i ++ ) { $ aa = $ str [ strlen ( $ str ) - 1 ] ; $ aa ++ ; $ str [ strlen ( $ str ) - 1 ] = $ aa ; } echo $ str , " \n " ;
<?php $ s = trim ( fgets ( STDIN ) ) ; $ date = strtotime ( date ( " Y/m/d " , strtotime ( $ s ) ) ) ; $ date_2 = strtotime ( " 2019/04/30 " ) ; $ ans = $ date <= $ date_2 ? ' Heisei ' : ' TBD ' ; echo $ ans . " \n " ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ a_i = 0 ; $ a_i <= $ a ; $ a_i ++ ) { for ( $ b_i = 0 ; $ b_i <= $ b ; $ b_i ++ ) { for ( $ c_i = 0 ; $ c_i <= $ c ; $ c_i ++ ) { if ( 500 * $ a_i + 100 * $ b_i + 50 * $ c_i == $ x ) { $ count ++ ; } } } } print $ count ;
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; define ( ' DEBUG ' , false ) ; define ( ' MOD ' , pow ( 10 , 9 ) + 7 ) ; fscanf ( STDIN , " %d %d " , $ N , $ M ) ; if ( $ N == $ M ) { $ ans = 1 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ ans *= $ N - $ i ; $ ans %= MOD ; } for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ ans *= $ N - $ i ; $ ans %= MOD ; } $ ans *= 2 ; $ ans %= MOD ; } elseif ( $ N - 1 == $ M || $ N + 1 == $ M ) { $ ans = 1 ; $ mmax = max ( $ N , $ M ) ; $ mmin = min ( $ N , $ M ) ; for ( $ i = 0 ; $ i < $ mmax ; $ i ++ ) { $ ans *= $ mmax - $ i ; $ ans %= MOD ; } for ( $ i = 0 ; $ i < $ mmin ; $ i ++ ) { $ ans *= $ mmin - $ i ; $ ans %= MOD ; } } else { echo " 0 \n " ; exit ; } echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; echo ( $ n * $ n ) ;
<?php $ S = trim ( fgets ( STDIN ) ) ; $ array = str_split ( $ S ) ; if ( ( $ array [ 2 ] === $ array [ 3 ] ) && ( $ array [ 4 ] === $ array [ 5 ] ) ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php fscanf ( STDIN , ' %d ' , $ a ) ; fscanf ( STDIN , ' %d ' , $ b ) ; fscanf ( STDIN , ' %d ' , $ c ) ; fscanf ( STDIN , ' %d ' , $ d ) ; fscanf ( STDIN , ' %d ' , $ e ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ e - $ a <= $ k ) { echo ' Yay! ' . PHP_EOL ; } else { echo ' :( ' . PHP_EOL ; }
<?php $ abc = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ a = $ abc [ 0 ] ; $ b = $ abc [ 1 ] ; $ c = $ abc [ 2 ] ; echo ( $ a + $ b >= $ c ) ? ' Yes ' : ' No ' ;
<?php list ( $ max , $ sum ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ max ; $ j ++ ) { $ m = $ sum - $ i - $ j ; if ( $ m >= 0 && $ m <= $ max ) { $ count ++ ; } } } echo $ count ; ?>
<?php fscanf ( STDIN , " %d %d %d %d %d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ num1 = ( $ h2 - $ h1 ) * 60 ; $ num2 = $ m2 - $ m1 ; $ num3 = $ num1 + $ num2 - $ k ; echo $ num3 ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ in [ 1 ] , $ in [ 2 ] , $ in [ 3 ] , $ in [ 4 ] ) ; $ result ; $ result += ( array_search ( ' 1 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 4 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 7 ' , $ in ) != FALSE ) ? 1 : 0 ; $ result += ( array_search ( ' 9 ' , $ in ) != FALSE ) ? 1 : 0 ; echo ( $ result == 4 ) ? " YES " : " NO " ;
<?php $ menus = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ menus [ ] = fgets ( STDIN ) ; } $ diff_count = 0 ; $ max = 0 ; $ diff_list = array ( ) ; foreach ( $ menus as $ key => $ menu ) { for ( $ i = 0 ; $ i < 9 ; $ i ++ ) { if ( ( $ menu + $ diff_count ) % 10 == 0 ) { break ; } $ diff_count ++ ; } $ diff_list [ $ key ] = $ diff_count ; $ diff_count = 0 ; } asort ( $ diff_list ) ; foreach ( $ diff_list as $ key => $ diff ) { $ sum += $ menus [ $ key ] + $ diff ; } echo $ sum - $ diff_list [ $ key ] . " \n " ;
<?php $ d = trim ( fgets ( STDIN ) ) ; echo $ d <= " 2019/04/30 " ? " Heisei " : " TBD " ;
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ pref_max , $ city_max ) ; for ( $ i = 0 ; $ i < $ city_max ; $ i ++ ) { fscanf ( STDIN , " %d %d " , $ pref , $ city ) ; $ dispList [ ] = array ( " pref " => $ pref , " city " => $ city ) ; $ list [ $ pref ] [ $ i ] = $ city ; } foreach ( $ list as $ pref => $ cities ) { sort ( $ cities ) ; $ num = 1 ; foreach ( $ cities as $ city ) { $ idList [ $ pref ] [ $ city ] = $ num ; $ num ++ ; } } foreach ( $ dispList as $ disp ) { $ pref_id = sprintf ( " %06d " , $ disp [ ' pref ' ] ) ; $ city_id = sprintf ( " %06d " , $ idList [ $ disp [ ' pref ' ] ] [ $ disp [ ' city ' ] ] ) ; echo $ pref_id . $ city_id . " \n " ; }
<?php $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a [ 0 ] == 1 ) { $ a [ 0 ] += 13 ; } if ( $ a [ 1 ] == 1 ) { $ a [ 1 ] += 13 ; } if ( $ a [ 0 ] > $ a [ 1 ] ) { echo ' Alice ' ; } elseif ( $ a [ 0 ] == $ a [ 1 ] ) { echo ' Draw ' ; } else { echo ' Bob ' ; }
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a == 1 ) { $ a = 14 ; } if ( $ b == 1 ) { $ b = 14 ; } if ( $ a == $ b ) { echo " Draw " ; } elseif ( $ a > $ b ) { echo " Alice " ; } else { echo " Bob " ; }
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= min ( $ K , $ S ) ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= min ( $ K , $ S - $ X ) ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php $ sum = 0 ; while ( true ) { $ s = rtrim ( fgets ( STDIN ) ) ; if ( feof ( STDIN ) ) { break ; } if ( preg_match_all ( ' /[0-9]+/ ' , $ s , $ a ) ) { foreach ( $ a [ 0 ] as $ v ) { $ sum += ( int ) $ v ; } } } echo $ sum . PHP_EOL ;
<?php $ C = [ ] ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { $ C [ ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } $ total_flg = false ; for ( $ x = 0 ; $ x <= 100 ; ++ $ x ) { $ a = [ ] ; $ b = [ ] ; $ a [ 0 ] = $ x ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) $ b [ $ i ] = $ C [ 0 ] [ $ i ] - $ a [ 0 ] ; for ( $ i = 1 ; $ i < 3 ; ++ $ i ) $ a [ $ i ] = $ C [ $ i ] [ 0 ] - $ b [ 0 ] ; $ flg = true ; for ( $ i = 0 ; $ i < 3 ; ++ $ i ) { for ( $ j = 0 ; $ j < 3 ; ++ $ j ) { if ( $ C [ $ i ] [ $ j ] != $ a [ $ i ] + $ b [ $ j ] ) { $ flg = false ; break 2 ; } } } $ total_flg |= $ flg ; } echo $ total_flg ? ' Yes ' : ' No ' , PHP_EOL ;
<?php $ n = intval ( fgets ( STDIN ) ) ; $ a = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; echo max ( $ a ) - min ( $ a ) , " \n " ;
<?php list ( $ A , $ B ) = sscanf ( trim ( fgets ( STDIN ) ) , " %d %d " ) ; if ( $ A <= 5 ) { print ( 0 ) ; } else if ( ( $ A >= 6 ) && ( $ A <= 12 ) ) { print ( $ B / 2 ) ; } else { print ( $ B ) ; }
<?php $ a = [ ] ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; list ( $ a [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ min = 10 ; for ( $ i = 0 ; $ i < count ( $ a ) ; $ i ++ ) { if ( $ a [ $ i ] % 10 != 0 ) { $ min = min ( $ min , $ a [ $ i ] % 10 ) ; } } $ ans = 0 ; for ( $ i = 0 ; $ i < count ( $ a ) ; $ i ++ ) { $ ans += intdiv ( $ a [ $ i ] + 9 , 10 ) * 10 ; } if ( $ min != 10 ) { $ ans -= 10 ; $ ans += $ min ; } echo $ ans ;
<?php $ a = [ ] ; for ( $ i = 0 ; $ i < 6 ; $ i ++ ) { array_push ( $ a , intval ( trim ( fgets ( STDIN ) ) ) ) ; } if ( $ a [ 4 ] - $ a [ 0 ] <= $ a [ 5 ] ) { echo ' Yay! ' ; } else { echo ' :( ' ; } echo PHP_EOL ;
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; echo ceil ( ( $ a + $ b ) / 2 ) ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ i = 1 ; while ( $ i <= $ n ) { $ w [ $ i ] = array_fill ( 1 , $ n , 3141592 ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ m ) { list ( $ a [ $ i ] , $ b [ $ i ] , $ c [ $ i ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ w [ $ a [ $ i ] ] [ $ b [ $ i ] ] = $ c [ $ i ] ; $ w [ $ b [ $ i ] ] [ $ a [ $ i ] ] = $ c [ $ i ] ; ++ $ i ; } $ i = 1 ; while ( $ i <= $ n ) { $ s = 1 ; while ( $ s <= $ n ) { $ e = 1 ; while ( $ e <= $ n ) { $ w [ $ s ] [ $ e ] = min ( $ w [ $ s ] [ $ e ] , $ w [ $ s ] [ $ i ] + $ w [ $ i ] [ $ e ] ) ; ++ $ e ; } ++ $ s ; } ++ $ i ; } $ ans = 0 ; $ i = 0 ; while ( $ i < $ m ) { if ( $ c [ $ i ] > $ w [ $ a [ $ i ] ] [ $ b [ $ i ] ] ) { ++ $ ans ; } ++ $ i ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ M ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ mapN [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ mapM [ $ i ] = str_split ( trim ( fgets ( STDIN ) ) ) ; } for ( $ x = 0 ; $ x <= $ N - $ M ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ N - $ M ; $ y ++ ) { $ bool = true ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { if ( $ mapM [ $ i ] [ $ j ] != $ mapN [ $ x + $ i ] [ $ y + $ j ] ) { $ bool = false ; } } } if ( $ bool == true ) { echo " Yes \n " ; exit ; } } } echo " No \n " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; if ( $ a < 9 && $ b < 9 ) { echo " Yay! \n " ; } else { echo " :( \n " ; } ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ num = trim ( fgets ( STDIN ) ) ; $ num = explode ( " " , $ num ) ; $ total = [ ] ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { $ t = [ ] ; foreach ( $ num as $ person ) { $ t [ ] = pow ( $ person - $ i , 2 ) ; } $ total [ ] = array_sum ( $ t ) ; } echo min ( $ total ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; if ( $ b == 1 ) { echo 0 ; } elseif ( $ a < $ b ) { echo 1 ; } else { echo $ a - $ b ; }
<?php $ N = trim ( fgets ( STDIN ) ) ; $ a = floor ( $ N / 15 ) * 200 ; $ ans = $ N * 800 - $ a ; echo $ ans ; ?>
<?php list ( $ n ) = ints ( ) ; $ p = [ 1 , 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a = ints ( ) ; if ( $ a [ 0 ] >= $ p [ 0 ] && $ a [ 1 ] >= $ p [ 1 ] ) { $ p = $ a ; continue ; } $ m [ 0 ] = $ p [ 0 ] % $ a [ 0 ] ? intdiv ( $ p [ 0 ] , $ a [ 0 ] ) + 1 : intdiv ( $ p [ 0 ] , $ a [ 0 ] ) ; $ m [ 1 ] = $ p [ 1 ] % $ a [ 1 ] ? intdiv ( $ p [ 1 ] , $ a [ 1 ] ) + 1 : intdiv ( $ p [ 1 ] , $ a [ 1 ] ) ; $ p = [ $ a [ 0 ] * max ( $ m ) , $ a [ 1 ] * max ( $ m ) ] ; } echo array_sum ( $ p ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ inputs = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ inputs [ 0 ] * $ inputs [ 1 ] < $ inputs [ 2 ] * $ inputs [ 3 ] ) echo $ inputs [ 2 ] * $ inputs [ 3 ] ; else echo $ inputs [ 0 ] * $ inputs [ 1 ] ; ?>
<?php $ X = ( int ) trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < 1000 ; $ i ++ ) { $ a [ ] = $ i ** 5 ; } for ( $ i = 0 ; $ i < 1000 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < 1000 - 1 ; $ j ++ ) { if ( $ a [ $ j ] - $ a [ $ i ] == $ X ) { printf ( " %d %d \n " , $ j , $ i ) ; break ; } if ( ( $ a [ $ j ] * - 1 ) - $ a [ $ i ] == $ X ) { printf ( " %d %d \n " , - $ j , $ i ) ; break ; } if ( $ a [ $ j ] - $ a [ $ i ] * - 1 == $ X ) { printf ( " %d %d \n " , $ j , - $ i ) ; break ; } } }
<?php # スペース区切りの整数の入力 fscanf(STDIN, "%d %d %d", $a, $b, $c); $goshichigo = 'NO'; if ( $a == 7 ) { if ( $b == 5 && $c == 5) { $goshichigo = 'YES'; } } elseif ( $b == 7 ) { if ( $a == 5 && $c == 5) { $goshichigo = 'YES'; } } elseif ( $c == 7 ) { if ( $a == 5 && $b == 5) { $goshichigo = 'YES'; } } # 出力 echo $goshichigo."\n"; ?>
<?php $ nd = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ n = $ nd [ 0 ] ; $ d = $ nd [ 1 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xt = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ j = 0 ; $ j < $ d ; $ j ++ ) { $ x [ $ i ] [ $ j ] = $ xt [ $ j ] ; } } $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ t = 0 ; for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ t += ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) ** 2 ; } $ s = sqrt ( $ t ) ; if ( ctype_digit ( strval ( $ s ) ) ) $ c ++ ; } } echo $ c ; ?>
<?php $ m = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ t [ $ i ] = trim ( fgets ( STDIN ) ) ; if ( ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] > $ m ) { $ m = ceil ( $ t [ $ i ] / 10 ) * 10 - $ t [ $ i ] ; $ mk = $ i ; } } $ l = $ t [ $ mk ] ; unset ( $ t [ $ mk ] ) ; $ t = array_values ( $ t ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < count ( $ t ) ; $ i ++ ) { $ sum += ceil ( $ t [ $ i ] / 10 ) * 10 ; } echo $ sum + $ l ; ?>
<?php const ROW_NUM = 3 ; const COL_NUM = 3 ; $ input = [ ] ; for ( $ i = 0 ; $ i < ROW_NUM ; $ i ++ ) { $ input [ $ i ] = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; } $ result = true ; $ a00 = ( int ) $ input [ 0 ] [ 0 ] ; $ a01 = ( int ) $ input [ 0 ] [ 1 ] ; $ a02 = ( int ) $ input [ 0 ] [ 2 ] ; $ a10 = ( int ) $ input [ 1 ] [ 0 ] ; $ diff = $ a00 - $ a10 ; $ a11 = ( int ) $ input [ 1 ] [ 1 ] ; $ result = $ result && ( $ a01 - $ a11 === $ diff ) ; $ a12 = ( int ) $ input [ 1 ] [ 2 ] ; $ result = $ result && ( $ a02 - $ a12 === $ diff ) ; $ a20 = ( int ) $ input [ 2 ] [ 0 ] ; $ diff = $ a00 - $ a20 ; $ a21 = ( int ) $ input [ 2 ] [ 1 ] ; $ result = $ result && ( $ a01 - $ a21 === $ diff ) ; $ a22 = ( int ) $ input [ 2 ] [ 2 ] ; $ result = $ result && ( $ a02 - $ a22 === $ diff ) ; $ diff = $ a00 - $ a01 ; $ result = $ result && ( $ a10 - $ a11 === $ diff ) ; $ result = $ result && ( $ a20 - $ a21 === $ diff ) ; $ diff = $ a00 - $ a02 ; $ result = $ result && ( $ a10 - $ a12 === $ diff ) ; $ result = $ result && ( $ a20 - $ a22 === $ diff ) ; echo ( $ result ) ? ' Yes ' : ' No ' ;
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ answer = [ 1 , 9 , 7 , 4 ] ; foreach ( $ input as $ val ) { $ key = array_search ( $ val , $ answer ) ; if ( $ key === FALSE ) { echo " NO " ; exit ; } unset ( $ answer [ $ key ] ) ; } echo " YES " ; exit ;
<?php $ n = trim ( fgets ( STDIN ) ) ; echo 800 * $ n - 200 * floor ( $ n / 15 ) ;
<?php $ length = preg_replace ( ' /(\\r|\\n|\\r\\n)/ ' , ' ' , fgets ( STDIN ) ) ; $ inputList = explode ( ' ' , preg_replace ( ' /(\\r|\\n|\\r\\n)/ ' , ' ' , fgets ( STDIN ) ) ) ; $ minNumber = $ inputList [ 0 ] ; $ passCount = 0 ; for ( $ i = 0 ; $ i < $ length ; $ i ++ ) { if ( $ inputList [ $ i ] <= $ minNumber ) { $ passCount ++ ; $ minNumber = $ inputList [ $ i ] ; } } echo $ passCount . PHP_EOL ;
<?php $ array = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo max ( $ array ) <= 8 ? " Yay! " : " :( " ;
<?php $ res = 0 ; $ min = 0 ; $ max = 0 ; $ k = 0 ; const MAX = 6 ; for ( $ i = 0 ; $ i < MAX ; $ i ++ ) { $ input = fgets ( STDIN ) ; if ( $ i === 0 ) { $ min = intval ( $ input ) ; } else if ( $ i === MAX - 2 ) { $ max = intval ( $ input ) ; } else if ( $ i === MAX - 1 ) { $ k = intval ( $ input ) ; } else continue ; } $ res = ( $ max - $ min ) > $ k ? ' :( ' : ' Yay! ' ; echo $ res ; ?>
<?php list ( $ a , $ b ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; if ( $ a >= 13 ) { echo $ b , PHP_EOL ; } elseif ( $ a <= 5 ) { echo 0 , PHP_EOL ; } else { echo $ b / 2 , PHP_EOL ; }
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ n > $ m ) { if ( $ n == " 13 " && $ m == " 1 " ) { echo " Bob " ; } else { echo " Alice " ; } } else if ( $ n == $ m ) { echo " Draw " ; } else { if ( $ m == " 13 " && $ n == " 1 " ) { echo " Alice " ; } else { echo " Bob " ; } }
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count . PHP_EOL ;
<?php list ( $ n , $ m ) = ints ( ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) list ( $ a [ ] ) = strs ( ) ; $ bb = ' ' ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { list ( $ b [ ] ) = strs ( ) ; $ bb .= $ b [ $ i ] ; } for ( $ i = 0 ; $ i <= $ n - $ m ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ n - $ m ; ++ $ j ) { $ aa = ' ' ; for ( $ k = 0 ; $ k < $ m ; ++ $ k ) $ aa .= substr ( $ a [ $ k + $ i ] , $ j , $ m ) ; if ( $ aa === $ bb ) exit ( ' Yes ' ) ; } } echo ' No ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arare = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ arr = [ ] ; foreach ( $ arare as $ a ) { switch ( $ a ) { case ' P ' : $ arr [ 0 ] = true ; break ; case ' W ' : $ arr [ 1 ] = true ; break ; case ' G ' : $ arr [ 2 ] = true ; break ; case ' Y ' : $ arr [ 3 ] = true ; break ; } if ( count ( $ arr ) === 4 ) { echo ' Four ' . " \n " ; exit ; } } echo ' Three ' . " \n " ;
<?php fscanf ( STDIN , " %d " , $ A ) ; fscanf ( STDIN , " %d " , $ B ) ; fscanf ( STDIN , " %d " , $ C ) ; fscanf ( STDIN , " %d " , $ D ) ; fscanf ( STDIN , " %d " , $ E ) ; $ input_arr = array ( $ A , $ B , $ C , $ D , $ E ) ; $ flag = True ; foreach ( $ input_arr as $ value ) { if ( $ value % 10 != 0 ) { $ flag = False ; } } if ( $ flag ) { echo array_sum ( $ input_arr ) ; die ( ) ; } $ minimum = 9 ; $ ans = 0 ; foreach ( $ input_arr as $ value ) { if ( $ minimum % 10 > ( $ value % 10 ) ) { if ( ( $ value % 10 ) > 0 ) { $ minimum = $ value ; } } } #echo $minimum; foreach($input_arr as $value){ $ans += ceil($value / 10) * 10; } $ans -= ceil($minimum / 10) * 10; $ans += $minimum; echo $ans;
<?php list ( $ a , $ b ) = ints ( ) ; for ( $ i = 0 ; $ i <= 11 ; ++ $ i ) $ s [ $ i + 2 ] = $ i ; $ s [ 1 ] = $ i ; if ( $ s [ $ a ] > $ s [ $ b ] ) $ ans = ' Alice ' ; elseif ( $ s [ $ a ] < $ s [ $ b ] ) $ ans = ' Bob ' ; else $ ans = ' Draw ' ; echo $ ans ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php while ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ dis = ( ( int ) $ stdin [ 4 ] - ( int ) $ stdin [ 0 ] ) ; if ( $ dis > ( int ) $ stdin [ 5 ] ) { print " :( " ; } else { print " Yay! " ; }
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; $ a = [ ] ; for ( $ i = 0 ; $ i < $ K - 1 ; $ i ++ ) { $ a [ ] = 1 ; $ N -- ; } $ a [ ] = $ N ; echo max ( $ a ) - min ( $ a ) ;
<?php fscanf ( STDIN , " %d " , $ a ) ; fscanf ( STDIN , " %d " , $ b ) ; fscanf ( STDIN , " %d " , $ c ) ; fscanf ( STDIN , " %d " , $ x ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { $ result = $ x - ( $ i * 500 + $ j * 100 ) ; if ( $ result / 50 <= $ c && $ result >= 0 ) { $ count ++ ; } } } print ( $ count ) ; ?>
<?php while ( true ) { $ input = trim ( fgets ( STDIN ) ) ; if ( $ input == " 0 " ) { break ; } $ data = str_split ( $ input ) ; $ answer = array_sum ( $ data ) ; echo $ answer . PHP_EOL ; }
<?php $ input = fgets ( STDIN ) ; $ data = explode ( " " , $ input ) ; $ balls = ( int ) $ data [ 0 ] ; $ people = ( int ) $ data [ 1 ] ; if ( $ people <= 1 ) { echo 0 ; } else { echo ( $ balls - ( $ people - 1 ) ) - 1 ; }
<?php $ oni = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ child = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ time = fgets ( STDIN ) ; if ( $ oni [ 0 ] < $ child [ 0 ] ) { $ x = $ oni [ 0 ] + $ oni [ 1 ] * $ time ; $ y = $ child [ 0 ] + $ child [ 1 ] * $ time ; echo $ x >= $ y ? ' YES ' : ' NO ' ; } else { $ x = $ oni [ 0 ] - $ oni [ 1 ] * $ time ; $ y = $ child [ 0 ] - $ child [ 1 ] * $ time ; echo $ x <= $ y ? ' YES ' : ' NO ' ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ t1 , $ t2 ) ; fscanf ( STDIN , " %d%d " , $ a1 , $ a2 ) ; fscanf ( STDIN , " %d%d " , $ b1 , $ b2 ) ; $ a1 -= $ b1 ; $ a2 -= $ b2 ; $ a1 *= $ t1 ; $ a2 *= $ t2 ; if ( $ a1 < 0 ) { $ a1 = - $ a1 ; $ a2 = - $ a2 ; } if ( $ a1 + $ a2 == 0 ) echo " infinity \n " ; elseif ( $ a1 + $ a2 > 0 ) echo " 0 \n " ; else { $ a2 = - $ a2 ; $ a1 *= 2 ; $ a2 *= 2 ; echo intdiv ( $ a1 , ( $ a2 - $ a1 ) ) + intdiv ( ( $ a1 - 1 ) , ( $ a2 - $ a1 ) ) + 1 ; }
<?php fscanf ( STDIN , " %d %d %d " , $ n , $ a , $ b ) ; $ v = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; rsort ( $ v ) ; $ f = $ v [ $ a - 1 ] ; $ s = $ x = 0 ; for ( $ i = 0 ; $ i < $ a ; $ i ++ ) { $ s += $ v [ $ i ] ; if ( $ v [ $ i ] == $ f ) $ x ++ ; } echo $ s / $ a , " \n " ; $ c = array_count_values ( $ v ) ; $ ans = 0 ; for ( $ i = $ a - 1 ; $ i <= $ b - 1 ; $ i ++ ) { if ( $ v [ $ i ] != $ f ) break ; $ ans += ncr ( $ c [ $ f ] , $ i - $ a + $ x + 1 ) ; if ( $ f != $ v [ 0 ] ) break ; } echo $ ans ; function ncr ( $ n , $ r ) { if ( $ r == 0 ) { return 1 ; } return ncr ( $ n , $ r - 1 ) * ( $ n - $ r + 1 ) / $ r ; }
<?php $ S = trim ( fgets ( STDIN ) ) ; if ( $ S [ 2 ] == $ S [ 3 ] && $ S [ 4 ] == $ S [ 5 ] ) printf ( " Yes \n " ) ; else printf ( " No \n " ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ c [ 1 ] [ 1 ] , $ c [ 1 ] [ 2 ] , $ c [ 1 ] [ 3 ] ) ; fscanf ( STDIN , " %d %d %d " , $ c [ 2 ] [ 1 ] , $ c [ 2 ] [ 2 ] , $ c [ 2 ] [ 3 ] ) ; fscanf ( STDIN , " %d %d %d " , $ c [ 3 ] [ 1 ] , $ c [ 3 ] [ 2 ] , $ c [ 3 ] [ 3 ] ) ; if ( $ c [ 1 ] [ 1 ] - $ c [ 2 ] [ 1 ] == $ c [ 1 ] [ 2 ] - $ c [ 2 ] [ 2 ] && $ c [ 1 ] [ 1 ] - $ c [ 2 ] [ 1 ] == $ c [ 1 ] [ 3 ] - $ c [ 2 ] [ 3 ] && $ c [ 2 ] [ 1 ] - $ c [ 3 ] [ 1 ] == $ c [ 2 ] [ 2 ] - $ c [ 3 ] [ 2 ] && $ c [ 2 ] [ 1 ] - $ c [ 3 ] [ 1 ] == $ c [ 2 ] [ 3 ] - $ c [ 3 ] [ 3 ] && $ c [ 3 ] [ 1 ] - $ c [ 1 ] [ 1 ] == $ c [ 3 ] [ 2 ] - $ c [ 1 ] [ 2 ] && $ c [ 3 ] [ 1 ] - $ c [ 1 ] [ 1 ] == $ c [ 3 ] [ 3 ] - $ c [ 1 ] [ 3 ] ) { echo ( " Yes " ) ; } else { echo ( " No " ) ; }
<?php list ( $ n ) = ints ( ) ; for ( $ a = 1 ; $ a <= 3500 ; ++ $ a ) { for ( $ b = $ a ; $ b <= 3500 ; ++ $ b ) { $ x = $ n * $ a * $ b ; $ y = 4 * $ a * $ b - $ n * ( $ a + $ b ) ; if ( $ y > 0 && $ x % $ y === 0 ) { $ c = intdiv ( $ x , $ y ) ; break 2 ; } } } echo implode ( ' ' , [ $ a , $ b , $ c ] ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " "
package main import " " func main ( ) { m := make ( map [ int ] int ) var t int for i := 0 ; i < 4 ; i ++ { fmt . Scan ( & t ) m [ t ] ++ } if m [ 1 ] >= 1 && m [ 9 ] >= 1 && m [ 7 ] >= 1 && m [ 4 ] >= 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if k >= ( e - a ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " log " " os " " strconv " " Three " " Four "
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " " fmt " " os " " YES " " NO "
package main import ( " " ) func main ( ) { n := 0 fmt . Scan ( & n ) arr := make ( [ ] int , n ) for i := range arr { fmt . Scan ( & arr [ i ] ) } min := - 1 cnt := 0 for _ , v := range arr { if min == - 1 { min = v cnt + + continue } if min < v { continue } min = v cnt + + continue } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) var hh , nn , ww int for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * h * n - h * N - n * N <= 0 { continue } if ( h * n * N ) % ( 4 * h * n - h * N - n * N ) == 0 { hh = h nn = n ww = ( h * n * N ) / ( 4 * h * n - h * N - n * N ) } } } fmt . Printf ( " \n " , hh , nn , ww ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ok := a * b * c == 5 * 5 * 7 && a + b + c == 5 + 5 + 7 if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " % .12 f " " "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] var count int for i := 0 ; i < N ; i ++ { if min >= P [ i ] { min = P [ i ] count + + } } fmt . Println ( count ) }
package main import ( " " " fmt " " log " " os " " strconv "
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " " " ) func main ( ) { var x float64 fmt . Scan ( & x ) fmt . Println ( int ( math . Pow ( x , 3.0 ) ) ) }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string " " diff : % d \n " , ( a1 * t1 + a2 * t2 ) - ( b1 * t1 + b2 * t2 ) ) if AbsInt ( ( a1 * t1 + a2 * t2 ) - ( b1 * t1 + b2 * t2 ) ) == 0 { fmt . Println ( " " ) return } if a1 > b1 && a2 > b2 { fmt . Println ( 0 ) return } if a1 < b1 && a2 < b2 { fmt . Println ( 0 ) return } if a1 < b1 { a1 , b1 = b1 , a1 a2 , b2 = b2 , a2 } diff1 , diff2 := a1 - b1 , a2 - b2 dist1 , dist2 := diff1 * t1 , diff2 * t2 if dist1 + dist2 > 0 { fmt . Println ( 0 ) return } ans := 1 delta := dist1 + dist2 absDelta := AbsInt ( delta ) i := dist1 / absDelta ans += i * 2 if dist1 % absDelta == 0 { ans += 1 - 2 } fmt . Println ( ans ) } func AbsInt ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " " ) func main ( ) { var A1 , A2 , A3 int _ , _ = fmt . Scan ( & A1 , & A2 , & A3 ) A := [ ] int { A1 , A2 , A3 } sort . Ints ( A ) ans := ( A [ 2 ] - A [ 1 ] ) + ( A [ 1 ] - A [ 0 ] ) fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) n := a * b * c if n == 5 * 5 * 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func min32 ( a , b int ) int { if a >= b { return b } return a } func max32 ( a , b int ) int { if a >= b { return a } return b } func min64 ( a , b int64 ) int64 { if a >= b { return b } return a } func max64 ( a , b int64 ) int64 { if a >= b { return a } return b } func gcd ( a , b int64 ) int64 { if a % b == 0 { return b } else { return gcd ( b , a % b ) } } func lcm ( a , b int64 ) int64 { return a / gcd ( a , b ) * b }
package main import ( " " " " ) func abs ( x float64 ) float64 { if x < 0 { return - x } return x } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) l := 360 * ( m / 60 ) s := 30 * h + 30 * ( m / 60 ) ang := abs ( l - s ) if ang >= 180 { ang = 360 - ang } fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
package main import ( " " " math " " % d % d " " % d "
package main import ( " " " " ) func main ( ) { var n , m int fmt . Scan ( & n ) m = 4 for x := n / m + 1 ; x <= ( 3 * n ) / m ; x ++ { var p , q int p = x * n q = m * x - n for y := p / q + 1 ; y <= ( 2 * p ) / q ; y ++ { var a , b int a = y * p b = q * y - p if a % b == 0 { fmt . Println ( x , y , a / b ) os . Exit ( 0 ) } } } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " strings " " " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var s string flg := false for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) if s == " " { flg = true } } if flg { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " sort "
package main import " " func main ( ) { var css [ 3 ] [ 3 ] int for i , cs := range css { for j := range cs { fmt . Scan ( & css [ i ] [ j ] ) } } as := make ( [ ] int , 3 ) bs := make ( [ ] int , 3 ) as [ 0 ] = 0 as [ 1 ] = css [ 1 ] [ 0 ] - css [ 0 ] [ 0 ] as [ 2 ] = css [ 2 ] [ 0 ] - css [ 0 ] [ 0 ] bs [ 0 ] = css [ 0 ] [ 0 ] bs [ 1 ] = css [ 0 ] [ 1 ] bs [ 2 ] = css [ 0 ] [ 2 ] for i , cs := range css { for j , c := range cs { if c != as [ i ] + bs [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " os " " Yay ! " " : ( "
package main import ( " " " os " " strconv " " math " " fmt " " % .15 f \n " , ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) diff := e - a if diff <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " " math " " sort " " % g "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " reflect " " strconv " " Yes " " No " " % v " " % s " " orz " " orz "
package main import " " func main ( ) { var A , B int fmt . Scan ( & A , & B ) if B % 2 == 0 { if A >= 13 { fmt . Print ( B ) } else if A >= 6 && A <= 12 { fmt . Print ( B / 2 ) } else if A <= 5 { fmt . Print ( " " ) } } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " ) func main ( ) { var ant [ 5 ] int var k int for i := 0 ; i < 5 ; i ++ { fmt . Scanf ( " " , & ant [ i ] ) } fmt . Scanf ( " " , & k ) ans := " " for i := 0 ; i < 5 ; i ++ { for j := i ; j < 5 ; j ++ { if ant [ j ] - ant [ i ] > k { ans = " " } } } fmt . Printf ( " \n " , ans ) }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import " " func main ( ) { var ( a , b , c int ) fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) if ( a == 5 && b == 5 && c == 7 ) | | ( a == 5 && b == 7 && c == 5 ) | | ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " YES " " NO " ) } }
package main import " " func main ( ) { var ( k int ) array := make ( [ ] int , 5 ) fmt . Scan ( & array [ 0 ] , & array [ 1 ] , & array [ 2 ] , & array [ 3 ] , & array [ 4 ] , & k ) var isEnabed bool = true for i := 0 ; i < 5 ; i + + { for j := i + 1 ; j < 5 ; j + + { d := array [ j ] - array [ i ] if d > k { isEnabed = false } } } if isEnabed { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import ( " " " " ) func main ( ) { var a , b , c , d , e string fmt . Scan ( & a , & b , & c , & d , & e ) sHou , _ := strconv . Atoi ( a ) sMin , _ := strconv . Atoi ( b ) eHou , _ := strconv . Atoi ( c ) eMin , _ := strconv . Atoi ( d ) time , _ := strconv . Atoi ( e ) sta := sHou * 60 + sMin end := eHou * 60 + eMin fmt . Println ( end - sta - time ) }
package main import ( " " " fmt " " os " " strconv " " strings "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xlist := IntSlice ( n ) total := SumSlice ( xlist ) avg := total / n p1 , p2 := avg , avg + 1 dsum1 , dsum2 := 0 , 0 for i := 0 ; i < n ; i ++ { dsum1 += IntPow ( p1 - xlist [ i ] , 2 ) dsum2 + = IntPow ( p2 - xlist [ i ] , 2 ) } fmt . Println ( Min ( dsum1 , dsum2 ) ) } func IntSlice ( n int ) [ ] int { slice := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & slice [ i ] ) } return slice } func SumSlice ( slice [ ] int ) int { total := 0 for i := 0 ; i < len ( slice ) ; i ++ { total += slice [ i ] } return total } func Min ( x , y int ) int { if x > y { return y } else { return x } } func IntPow ( x , pow int ) int { return int ( math . Pow ( float64 ( x ) , float64 ( pow ) ) ) }
package main import ( " " ) func main ( ) { var n int var a string mame := map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a ) mame [ a ] ++ } if mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 && mame [ " " ] != 0 { fmt . Print ( " \n " ) } else { fmt . Print ( " \n " ) } }
package main import ( " " " fmt " " os " " infinity "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * n * h - N * n - N * h > 0 && ( n * h * N ) % ( 4 * n * h - N * n - N * h ) == 0 { w := ( n * h * N ) / ( 4 * n * h - N * n - N * h ) fmt . Println ( h , w , n ) return } } } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a [ 5 ] int var k int for i := 0 ; i < 5 ; i ++ { fmt . Scanf ( " " , & a [ i ] ) } fmt . Scanf ( " " , & k ) var f bool f = true for i := 0 ; i < 5 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { f = f && ( ( a [ j ] - a [ i ] ) <= k ) } } if f { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if 0 <= s - ( x + y ) && s - ( x + y ) <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) v := N & - N for N - v > 0 { N -= v v = N & - N } fmt . Println ( N ) }
package main import ( " " " bufio " " os " " strconv " " " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " math " " os " " strconv " " % g \n " , ans ) }
package main import " " func main ( ) { var c1_1 , c1_2 , c1_3 , c2_1 , c2_2 , c2_3 , c3_1 , c3_2 , c3_3 int fmt . Scan ( & c1_1 , & c1_2 , & c1_3 , & c2_1 , & c2_2 , & c2_3 , & c3_1 , & c3_2 , & c3_3 ) d1 := c2_1 - c1_1 d2 := c2_2 - c1_2 d3 := c2_3 - c1_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c3_1 - c2_1 d2 = c3_2 - c2_2 d3 = c3_3 - c2_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } d1 = c1_1 - c3_1 d2 = c1_2 - c3_2 d3 = c1_3 - c3_3 if d1 != d2 || d2 != d3 || d3 != d1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % d \n " , sum ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " fmt " " bufio " " strings " " sort " " " " " " 557 " { fmt . Println ( " YES " " NO "
package main import " " import " " func main ( ) { var n int fmt . Scan ( & n ) t := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & t [ i ] ) } sum := 0 for i := 0 ; i < n ; i ++ { sum += t [ i ] } f := float64 ( sum ) / float64 ( n ) b := f - float64 ( int ( f ) ) var y int if b >= 0.5 { y = int ( math . Ceil ( f ) ) } else { y = int ( math . Floor ( f ) ) } csum := 0 for i := 0 ; i < n ; i ++ { csum += ( t [ i ] - y ) * ( t [ i ] - y ) } fmt . Println ( csum ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + = 1 } } } fmt . Println ( cnt ) }
package main import " " func main ( ) { a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } var k int fmt . Scan ( & k ) for i := 0 ; i < 4 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { if v := a [ j ] - a [ i ] ; v > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for i := 0 ; i < k + 1 ; i ++ { for j := 0 ; j < k + 1 ; j ++ { t := s - i - j if 0 <= t && t <= k { ans + + } } } if ans != 0 { fmt . Println ( ans ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var s_1 , s_2 , s_3 int fmt . Scanf ( " % d % d % d " " NO " ) } else if s_2 != 5 && s_2 != 7 { fmt . Println ( " " ) } else if s_3 != 5 && s_3 != 7 { fmt . Println ( " " ) } fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " online " " local "
package main import ( " " " os " " strconv " " fmt "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ps [ i ] ) } cnt := 0 min := ps [ 0 ] for i , p := range ps { if i == 0 { continue } if p > min { cnt + + } if min > p { min = p } } fmt . Println ( n - cnt ) }
package main import " " func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " ) func main ( ) { var n int num := make ( [ ] int , 10 ) for i := 0 ; i < 4 ; i ++ { fmt . Scanf ( " " , & n ) num [ n ] ++ } ans := " " if num [ 1 ] != 1 { ans = " " } if num [ 9 ] != 1 { ans = " " } if num [ 7 ] != 1 { ans = " " } if num [ 4 ] != 1 { ans = " " } fmt . Printf ( " \n " , ans ) }
package main import " " import " " func main ( ) { var A , B , H , M float64 var theta float64 = 0 var temp float64 fmt . Scan ( & A , & B , & H , & M ) temp = 60 * H + M theta = temp / 720 - M / 60 fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * ( math . Cos ( 2 * math . Pi * theta ) ) ) ) }
package main import ( " " " " ) type BreakCount map [ int ] int func main ( ) { var N int fmt . Scan ( & N ) result := 0 count := 0 for { if float64 ( N ) < math . Pow ( 2.0 , float64 ( count ) ) { result = int ( math . Pow ( 2.0 , float64 ( count - 1 ) ) ) break } count ++ } fmt . Println ( result ) }
package main import . " " import . " " func main ( ) { var n int var s string Scan ( & n ) for i := 0 ; i < n ; i ++ { Scanf ( " " , & s ) if s == " " { Println ( " " ) Exit ( 0 ) } } Println ( " " ) }
package main import ( " " ) func main ( ) { var n [ 3 ] int var s = [ ] int { 5 , 7 , 5 } for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & n [ i ] ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < len ( s ) ; j ++ { if n [ i ] == s [ j ] { s = append ( s [ : j ] , s [ j + 1 : ] ... ) break } } } if len ( s ) == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { a := make ( [ ] int , 3 ) for i := range a { fmt . Scan ( & a [ i ] ) } mincost := abs ( a [ 1 ] - a [ 0 ] ) + abs ( a [ 2 ] - a [ 1 ] ) for i := 0 ; i < 6 ; i ++ { b := [ ] int { a [ i / 2 ] , a [ ( i / 2 + i % 2 + 1 ) % 3 ] , a [ ( i / 2 + ( i + 1 ) % 2 + 1 ) % 3 ] , } cost := abs ( b [ 1 ] - b [ 0 ] ) + abs ( b [ 2 ] - b [ 1 ] ) if cost < mincost { mincost = cost } } fmt . Println ( mincost ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " math "
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) min := a max := a for i := 1 ; i < 5 ; i ++ { var o int fmt . Scan ( & o ) if min > o { min = o } if max < o { max = o } } var k int fmt . Scan ( & k ) if max - min > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scanf ( " % d " " % d " " % d " " % d " " % d " " % d " " : ( " " Yay ! "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a * b * c == 5 * 7 * 5 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) if h >= 12 { h -= 12 } l := 360 * ( float64 ( m ) / 60 ) s := 30 * float64 ( h ) + 30 * ( float64 ( m ) / 60 ) var ang float64 if l > s { ang = l - s } else { ang = s - l } if ang >= 180 { ang = 360 - ang } fmt . Println ( math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) ) ) }
package main import ( " " " sort " " Yay ! " } return " " }
package main import ( " " ) var N int var S [ ] string func main ( ) { fmt . Scanf ( " " , & N ) S = make ( [ ] string , N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & S [ i ] ) } m := make ( map [ string ] bool ) for i := 0 ; i < len ( S ) ; i ++ { m [ S [ i ] ] = true } ans := 0 for _ , v := range m { if v { ans + + } } if ans == 4 { fmt . Println ( " " ) } else if ans == 3 { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e int var k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ab := b - a ac := c - a ad := d - a ae := e - a bc := c - b bd := d - b be := e - b cd := d - c ce := e - c de := e - d if ab > k || ac > k || ad > k || ae > k || bc > k || bd > k || be > k || cd > k || ce > k || de > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) var D , N int type cloth struct { A , B , C int } func abs ( a int ) int { if a > 0 { return a } return - a } func max ( a , b int ) int { if a < b { return b } return a } func main ( ) { fmt . Scan ( & D , & N ) thermals := make ( [ ] int , D + 1 ) for i := 1 ; i <= D ; i ++ { fmt . Scan ( & thermals [ i ] ) } clothes := make ( [ ] cloth , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & clothes [ i ] . A , & clothes [ i ] . B , & clothes [ i ] . C ) } dp := make ( [ ] [ ] int , D + 1 ) for i := range dp { dp [ i ] = make ( [ ] int , N ) } for i := 1 ; i < D ; i ++ { for j := 0 ; j < N ; j ++ { for k := 0 ; k < N ; k ++ { t1 := thermals [ i ] t2 := thermals [ i + 1 ] if clothes [ j ] . A <= t2 && t2 <= clothes [ j ] . B && clothes [ k ] . A <= t1 && t1 <= clothes [ k ] . B { dp [ i + 1 ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ k ] + abs ( clothes [ j ] . C - clothes [ k ] . C ) ) } } } } val := 0 for _ , v := range dp [ D ] { val = max ( val , v ) } fmt . Println ( val ) }
package main import " " func main ( ) { k , s := 0 , 0 _ , _ = fmt . Scan ( & k , & s ) count := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { z := s - i - j if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " " io " " os " " strconv " " infinity "
package main import " " func scanIntSlice ( N int ) [ ] int { _slice := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & _slice [ i ] ) } return _slice } func getMostCommonCountWithIgnore ( m map [ int ] int , ignore int ) ( maxKey , maxCount int ) { for key , value := range m { if value > maxCount && key != ignore { maxCount = value maxKey = key } } return } func main ( ) { n := 0 ; fmt . Scan ( & n ) v := scanIntSlice ( n ) evens := make ( map [ int ] int ) odds := make ( map [ int ] int ) for i := 0 ; i < n / 2 ; i ++ { evens [ v [ 2 * i ] ] ++ odds [ v [ 2 * i + 1 ] ] ++ } ans := n evenMostKey , evenMostCount := getMostCommonCountWithIgnore ( evens , - 1 ) _ , even2ndCount := getMostCommonCountWithIgnore ( evens , evenMostKey ) oddsMostKey , oddsMostCount := getMostCommonCountWithIgnore ( odds , - 1 ) _ , odds2ndCount := getMostCommonCountWithIgnore ( odds , oddsMostKey ) if evenMostKey != oddsMostKey { ans - = evenMostCount + oddsMostCount } else { a := evenMostCount + odds2ndCount b := even2ndCount + oddsMostCount if b > a { a = b } ans -= a } fmt . Println ( ans ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) for i := n ; i >= 1 ; i -- { if i & ( i - 1 ) == 0 { fmt . Println ( i ) return } } }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " os " " strconv " " strings " " fmt " " " " " " P " " Y " " G " " W " " Three " " Four "
package main import ( " " ) func main ( ) { var N , P int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " io " " math / big " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " import " " func main ( ) { var A , B , H , M int fmt . Scanf ( " % d % d % d % d "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " os "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Printf ( " % d \n " , a * a * a ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int five := 0 seven := 0 fmt . Scanf ( " % d " " % d " " % d " " NO " if five == 2 && seven == 1 { ans = " " } fmt . Printf ( " " , ans ) }
package main import ( " " " fmt " " os " " strconv " " strings " " Yes " " No " " "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import " " func main ( ) { var N int fmt . Scan ( & N ) A := make ( [ ] int , N ) for i := range A { fmt . Scan ( & A [ i ] ) } ans := 0 for i := 1 ; i <= 100 ; i ++ { totalLoss := 0 for j := range A { totalLoss += ( A [ j ] - i ) * ( A [ j ] - i ) } if i == 1 { ans = totalLoss } if totalLoss < ans { ans = totalLoss } } fmt . Println ( ans ) }
package main import " " func StdInInt ( ) int { var N int fmt . Scan ( & N ) return N } func main ( ) { n := StdInInt ( ) fmt . Println ( n * n * n ) }
package main import ( " " " sort " " strings " " " " "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) i := a * a * a fmt . Println ( i ) }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv " " % d % d % d % d " " YES " " NO "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var numOfSatisfied int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { rest := s - ( x + y ) if rest >= 0 && rest <= k { numOfSatisfied + + } } } fmt . Printf ( " \n " , numOfSatisfied ) }
package main import " " func main ( ) { var K , S int fmt . Scanf ( " % d % d "
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) num := 0 if N == 0 { fmt . Println ( " " ) } tmp := 0 min := 0 fmt . Scan ( & min ) for i := 1 ; i < N ; i ++ { fmt . Scan ( & tmp ) if tmp > min { num ++ } if min > tmp { min = tmp } } fmt . Println ( N - num ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { r + + } } } fmt . Println ( r ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a ) b = 1 for i := 0 ; i < 3 ; i ++ { b *= a } fmt . Println ( b ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " sort " " % d " " % d " " % d " " % d " " % d " " % d " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " math / cmplx " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import " " func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) ans := ( h2 * 60 + m2 ) - ( h1 * 60 + m1 ) - k fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " os "
package main import ( " " " fmt " " os " " sort " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import " " var a , b , c , d , e , k int func check ( ) bool { if e - d <= k && e - c <= k && e - b <= k && e - a <= k { if d - c <= k && d - b <= k && d - a <= k { if c - a <= k && b - a <= k { return true } } } return false } func main ( ) { fmt . Scan ( & a , & b , & c , & d , & e , & k ) if check ( ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " ) func main ( ) { var ( K int S int ) var count = 0 fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { count += 1 } } } fmt . Println ( count ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " sort " " strings " " " " "
package main import ( " " " math " " % d % d " " % d \n " , P ) return } for ord , i : = 0 , 2 ; ; { if P % i != 0 { if P == 1 || i > A { break } ord = 0 i += 1 + i % 2 } else { ord ++ if ord % N == 0 { ans *= i } P /= i } } fmt . Printf ( " \n " , ans ) }
package main import ( " " " " ) func round ( f float64 ) float64 { return math . Floor ( f + .5 ) } func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) sum := 0 for i , _ := range X { fmt . Scan ( & X [ i ] ) sum += X [ i ] } avg := int ( round ( float64 ( sum ) / float64 ( N ) ) ) result := 0 for _ , x := range X { result + = ( x - avg ) * ( x - avg ) } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var k int A := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & A [ i ] ) } fmt . Scan ( & k ) for i := 4 ; i > 1 ; i -- { if A [ i ] - A [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import ( " " " fmt " " math " " os "
package main import ( " " " math " " math / cmplx "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var x [ 5 ] int var k int for i := range x { fmt . Scanf ( " " , & x [ i ] ) } fmt . Scanf ( " " , & k ) ok := true for _ , x1 := range x { for _ , x2 := range x { d := x1 - x2 if d < 0 { d = - d } if d > k { ok = false } } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mnt := h * 60 + m ap := mnt * math . Pi / 360 bp := mnt * math . Pi / 30 x := a * math . Cos ( ap ) - b * math . Cos ( bp ) y := a * math . Sin ( ap ) - b * math . Sin ( bp ) fmt . Println ( math . Sqrt ( x * x + y * y ) ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! " ) } }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) sl := [ ] int { 64 , 32 , 16 , 8 , 4 , 2 , 1 } for _ , s := range sl { if s <= n { fmt . Println ( s ) return } } }
package main import " " const inf = 1 << 60 func chmin ( a * int , b int ) bool { if * a > b { * a = b return true } return false } func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & ps [ i ] ) } ct := 0 mn := inf for _ , p := range ps { if chmin ( & mn , p ) { ct + + } } fmt . Println ( ct ) }
package main import " " func main ( ) { var N , M int var w string fmt . Scan ( & N , & M ) a := make ( [ ] [ ] string , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & w ) wa := make ( [ ] string , N ) for i , v := range w { wa [ i ] = string ( v ) } a [ i ] = wa } b := make ( [ ] [ ] string , M ) for i := 0 ; i < M ; i ++ { fmt . Scan ( & w ) wa := make ( [ ] string , M ) for i , v := range w { wa [ i ] = string ( v ) } b [ i ] = wa } for i := 0 ; i < N ; i ++ { for j := 0 ; j < N ; j ++ { flg := true for y := 0 ; y < M ; y ++ { if i + y >= N { fmt . Println ( " " ) return } for x := 0 ; x < M ; x ++ { if j + x >= N { flg = false break } if a [ i + y ] [ j + x ] == b [ y ] [ x ] { continue } else { flg = false break } } if ! flg { break } } if flg { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func solution ( c [ 3 ] [ 3 ] int ) string { var a , b [ 3 ] int a [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] } for i := 1 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := range c { for j := range c [ i ] { if c [ i ] [ j ] != a [ i ] + b [ j ] { return " " } } } return " " } func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } fmt . Println ( solution ( c ) ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv " " math / cmplx " " math "
package main import ( " " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " empty ! " " empty ! " " empty ! " " Scan failed "
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) time := ( 60 * h2 + m2 ) - ( 60 * h1 + m1 ) res := time - k fmt . Println ( res ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " " " " " 7 " ) = = 1 && strings . Count ( s , " " ) == 2 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func nextInt ( ) int { sc . Scan ( ) nextI , err := strconv . Atoi ( sc . Text ( ) ) if err != nil { panic ( err ) } return nextI } func readLine ( ) string { buf := make ( [ ] byte , 0 , 1000000 ) for { line , isPrefix , err := rdr . ReadLine ( ) if err != nil { panic ( err ) } buf = append ( buf , line ... ) if ! isPrefix { break } } return string ( buf ) }
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " Yes " " No "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c != 17 || ( a != 5 && a != 7 ) || ( b != 5 && b != 7 ) || ( c != 5 && c != 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var nn int fmt . Scanf ( " % d " " % d " " % v \n " , result ) }
package main import ( " " ) func main ( ) { var ( n int color string ) fmt . Scan ( & n ) table := make ( map [ string ] int ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & color ) table [ color ] + = 1 } if len ( table ) = = 3 { fmt . Println ( " " ) } else { fmt . Println ( " Four " ) } }
package main import ( " " " fmt " " os " " strconv " " Yay ! " ) } else { fmt . Println ( " : ( "
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d " " % d " " % d "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func min3500 ( x int ) int { if x < 3500 { return x } else { return 3500 } } func main ( ) { var N int fmt . Scan ( & N ) if N % 2 == 0 { fmt . Println ( N / 2 , N , N ) } else if N % 3 == 0 { fmt . Println ( N / 3 , 2 * N , 2 * N ) } else { w := 0 for h := N / 4 ; h <= min3500 ( 3 * N / 4 ) ; h ++ { for n := ( N * h ) / ( 4 * h - N ) ; n <= min3500 ( ( 2 * N * h ) / ( 4 * h - N ) ) ; n ++ { if 4 * h * n - N * ( h + n ) <= 0 { continue } if N * h * n % ( 4 * h * n - N * ( h + n ) ) != 0 { continue } w = N * h * n / ( 4 * h * n - N * ( h + n ) ) fmt . Println ( h , n , w ) break } if w != 0 { break } } } }
package main import ( " " " " ) func round ( f float64 ) float64 { return math . Floor ( f + .5 ) } func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) sum := 0 for i , _ := range X { fmt . Scan ( & X [ i ] ) sum += X [ i ] } avg := int ( round ( float64 ( sum ) / float64 ( N ) ) ) result := 0 for _ , x := range X { result + = ( x - avg ) * ( x - avg ) } fmt . Println ( result ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( b - a ) <= k && ( c - a ) <= k && ( d - a ) <= k && ( e - a ) <= k && ( c - b ) <= k && ( d - b ) <= k && ( e - b ) <= k && ( d - c ) <= k && ( e - c ) <= k && ( e - d ) <= k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func solution ( h1 , m1 , h2 , m2 , k int ) int { return 60 * ( h2 - h1 ) + ( m2 - m1 ) - k } func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) fmt . Println ( solution ( h1 , m1 , h2 , m2 , k ) ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { if p [ i ] < min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv " " no values " " no values "
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 1 ] + a [ 1 ] - a [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " strings " " scan string failed " " scan string failed " " "
package main import ( " " " fmt " " os " " math " " % v % v % v % v \n " , & a , & b , & h , & m ) x : = float64 ( 360 ) / float64 ( 12 * 60 ) * float64 ( h * 60 + m ) y := float64 ( 360 / 60 * m ) delta := math . Abs ( x - y ) degrees := delta if delta == 180 { printf ( " \n " , a + b ) return } else if delta > 180 { degrees = 360 - delta } ans := math . Sqrt ( math . Pow ( float64 ( a ) , 2 ) + math . Pow ( float64 ( b ) , 2 ) - float64 ( 2 ) * ( float64 ( a ) * float64 ( b ) * math . Cos ( degrees * math . Pi / 180 ) ) ) printf ( " \n " , ans ) }
package main import " " func abs ( a int ) int { if a >= 0 { return a } return - a } func min ( a , b int ) int { if a >= b { return b } return a } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ans := 300 arr := [ ] [ ] int { { a , b , c } , { a , c , b } , { b , a , c } , { b , c , a } , { c , a , b } , { c , b , a } } for _ , v := range arr { ans = min ( ans , abs ( v [ 0 ] - v [ 1 ] ) + abs ( v [ 1 ] - v [ 2 ] ) ) } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) ret := k < e - d || k < e - c || k < e - b || k < e - a || k < d - c || k < d - b || k < d - a || k < c - b || k < c - a || k < b - a if ret { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { pi := p [ i ] if pi <= min { ans + + } if pi < min { min = pi } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " fresult " " % s = % + v \n " , name , value ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) return }
package main import ( " " " fmt " " math " " os " " strconv " " % .11 f "
package main ; import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } fmt . Println ( solver ( n , s ) ) } func solver ( n int , s [ ] string ) string { var tmp int ; var ans string ; var arare map [ string ] int = map [ string ] int { " " : 0 , " " : 0 , " " : 0 , " " : 0 } for i := 0 ; i < len ( s ) - 1 ; i ++ { arare [ s [ i ] ] = 1 } tmp = arare [ " " ] + arare [ " " ] + arare [ " " ] + arare [ " " ] if tmp == 3 { ans = " " } else if tmp == 4 { ans = " " } else if tmp == 1 { ans = " " } else if tmp == 2 { ans = " " } else { ans = " " } return ans }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv " " Yes " " No " " No " " No " " No " " No " " No " " No " " No "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if b - a > k { fmt . Println ( " " ) } else if c - a > k { fmt . Println ( " " ) } else if d - a > k { fmt . Println ( " " ) } else if e - a > k { fmt . Println ( " " ) } else if c - b > k { fmt . Println ( " " ) } else if d - b > k { fmt . Println ( " " ) } else if e - b > k { fmt . Println ( " " ) } else if d - c > k { fmt . Println ( " " ) } else if e - c > k { fmt . Println ( " " ) } else if e - d > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n_5 int var n_7 int t := make ( [ ] int , 3 ) fmt . Scan ( & t [ 0 ] , & t [ 1 ] , & t [ 2 ] ) for i := 0 ; i < 3 ; i ++ { if t [ i ] == 5 { n_5 ++ } else if t [ i ] == 7 { n_7 ++ } } if n_5 == 2 && n_7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % .10 f \n " , math . Sqrt ( a2 + b2 - c ) ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " log " " os " " strconv " " Yes " " No " " Scan failed " " Scan failed "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } ans := 0 min := p [ 0 ] for i := 0 ; i < n ; i ++ { if p [ i ] <= min { ans ++ min = p [ i ] } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 0 min := 2000000 for i := 0 ; i < n ; i ++ { if min > p [ i ] { min = p [ i ] ans + + } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func intsMax : argument slice length must not be zero " " func intsMaxIdx : argument slice length must not be zero " " func intsMin : argument slice length must not be zero " " func intsMinIdx : argument slice length must not be zero " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " ) func main ( ) { var ( a [ 5 ] int k int ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for j1 := 0 ; j1 < 5 - 1 ; j1 ++ { for j2 := j1 + 1 ; j2 < 5 ; j2 ++ { if ( a [ j2 ] - a [ j1 ] ) > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) s := " Yay ! " if e - a > k { s = " " } fmt . Println ( s ) }
package main import ( " " " strings " " % s % s % s " " 5 " ) = = 2 && strings . Count ( abc , " " ) == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) ans := ( h2 * 60 + m2 ) - ( h1 * 60 + m1 ) - k fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f \n " , ans ) } else { AFloat : = float64 ( A ) BFloat : = float64 ( B ) aPosRad : = 2.0 * math . Pi * float64 ( aPosM ) / 720.0 bPosRad : = 2.0 * math . Pi * float64 ( bPosM ) / 720.0 rad : = math . Abs ( aPosRad - bPosRad ) var ans float64 = 0 ans + = AFloat * AFloat ans += BFloat * BFloat ans -= 2.0 * AFloat * BFloat * math . Cos ( rad ) ans = math . Sqrt ( ans ) fmt . Printf ( " % .19 f \n " , ans ) } } var sc = bufio . NewScanner ( os . Stdin ) func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinIntArr ( ) [ ] int { str := getStdin ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import ( " " " " ) func main ( ) { Rally ( ) } func Rally ( ) { var N int fmt . Scan ( & N ) coordinates := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & coordinates [ i ] ) } sort . Sort ( sort . IntSlice ( coordinates ) ) min := coordinates [ 0 ] max := coordinates [ N - 1 ] count := ( max - min ) + 1 result := make ( [ ] int , count ) sum := 0 icount := 0 for i := min ; i <= max ; i ++ { for j := 0 ; j < N ; j ++ { sum += ( coordinates [ j ] - i ) * ( coordinates [ j ] - i ) } result [ icount ] = sum icount ++ sum = 0 } sort . Sort ( sort . IntSlice ( result ) ) fmt . Println ( result [ 0 ] ) }
package main import " " func main ( ) { var i int ; var num5 , num7 int ; num5 = 2 ; num7 = 1 ; for a := 0 ; a < 3 ; a ++ { fmt . Scan ( & i ) ; if ( i == 5 ) { num5 -- ; } else if ( i == 7 ) { num7 -- ; } else { continue ; } } if ( num5 == 0 && num7 == 0 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " unsafe " " " " % # v \n " , v ) } } func yes ( ) { fmt . Println ( " Yes " ) } func no ( ) { fmt . Println ( " No " ) }
package main import ( " " " " ) var A , B , H , M float64 func main ( ) { fmt . Scan ( & A , & B , & H , & M ) rad := func ( ) float64 { return math . Pi * ( ( 2.0 / 720.0 * ( 60.0 * H + M ) ) - 2.0 / 60.0 * M ) } fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * math . Cos ( rad ( ) ) ) ) }
package main import ( " " ) func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & c [ i ] [ 0 ] , & c [ i ] [ 1 ] , & c [ i ] [ 2 ] ) } a := make ( [ ] int , 3 ) b := make ( [ ] int , 3 ) a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i , ci := range c { for j , cj := range ci { if cj != a [ i ] + b [ j ] { fmt . Print ( " " ) return } } } fmt . Print ( " " ) }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " % d % d % d "
package main import ( " " " fmt " " os " " strconv " " strings " \n " \n " ) ant [ i ] , _ = strconv . Atoi ( tmp ) } tmp , _ := reader . ReadString ( '\n' ) tmp = strings . Trim ( tmp , " \n " ) k , _ := strconv . Atoi ( tmp ) min := ant [ 0 ] max := ant [ 0 ] for i := 0 ; i < 5 ; i ++ { if min > ant [ i ] { min = ant [ i ] } if max < ant [ i ] { max = ant [ i ] } } if ( max - min ) > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - d > k || e - c > k || e - b > k || e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scanf ( " % d % d % d % d % d "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 var mr , hr , r , c float64 fmt . Scan ( & a , & b , & h , & m ) mr = m * 6 hr = h * 30 + m / 2 if mr - hr > hr - mr { r = hr - mr } else { r = mr - hr } if r < 0 { r += 360 } rn := ( r / 180 ) * math . Pi c = math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( rn ) ) fmt . Print ( c ) }
package main import " " func main ( ) { var used [ 10 ] int var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " "
package main import ( " " " fmt " " math " " os " " reflect " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var t1 , t2 , a1 , a2 , b1 , b2 int fmt . Scan ( & t1 , & t2 , & a1 , & a2 , & b1 , & b2 ) a1 , a2 = a1 * t1 , a2 * t2 b1 , b2 = b1 * t1 , b2 * t2 if a1 < b1 { a1 , b1 = b1 , a1 a2 , b2 = b2 , a2 } if a1 + a2 == b1 + b2 { fmt . Println ( " " ) return } if a1 + a2 > b1 + b2 { fmt . Println ( 0 ) return } x := a1 - b1 y := ( b1 + b2 ) - ( a1 + a2 ) if x % y == 0 { fmt . Println ( x / y * 2 ) } else { fmt . Println ( x / y * 2 + 1 ) } }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var k int a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < 4 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { if a [ j ] - a [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) if n == 1 { fmt . Println ( 1 ) } else if n >= 2 && n < 4 { fmt . Println ( 2 ) } else if n >= 4 && n < 8 { fmt . Println ( 4 ) } else if n >= 8 && n < 16 { fmt . Println ( 8 ) } else if n >= 16 && n < 32 { fmt . Println ( 16 ) } else if n >= 32 && n < 64 { fmt . Println ( 32 ) } else if n >= 64 && n <= 100 { fmt . Println ( 64 ) } }
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " % d \n " , v ) } func ( io * IO ) PutString ( s string ) { fmt . Fprintf ( io . Writer , " \n " , s ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) arr := [ ] int { a , b , c , d , e } for i := 0 ; i < len ( arr ) - 1 ; i + + { for j := 1 ; j < len ( arr ) ; j ++ { if ( arr [ j ] - arr [ i ] ) > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " YES " " NO "
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) ans := 0 for _ , n := range [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 } { if n <= N { ans = n } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var h1 , h2 , m1 , m2 , k int fmt . Scanf ( " % d % d % d % d % d " " % d \n " , ans ) }
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import ( " " " fmt " " os " " strconv " " strings " " % s = % + v \n " , name , value ) } func ExampleIo ( ) { io := NewIo ( ) defer io . Flush ( ) a := make ( [ ] int , 0 , 3 ) a [ 0 ] , a [ 1 ] , a [ 2 ] = io . NextInt ( ) , io . NextInt ( ) , io . NextInt ( ) io . Println ( a ) io . PrintIntSlice ( a ) Log ( " " , a ) }
package main import ( " " " os " " strconv " " fmt "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) as := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & as [ i ] ) } bs := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & bs [ i ] ) } aSum , bSum := 0 , 0 for i := 0 ; i < n ; i ++ { aSum += as [ i ] bSum + = bs [ i ] } if aSum < bSum { fmt . Println ( - 1 ) return } positives := make ( [ ] int , 0 , n ) sumNeg := 0 ct := 0 for i := 0 ; i < n ; i ++ { diff := as [ i ] - bs [ i ] if diff > 0 { positives = append ( positives , diff ) } else if diff < 0 { sumNeg += ( - diff ) ct + + } } sort . Sort ( sort . Reverse ( sort . IntSlice ( positives ) ) ) sumPos := 0 i := 0 for sumPos < sumNeg { sumPos + = positives [ i ] ct ++ i ++ } fmt . Println ( ct ) }
package main import ( " " " bufio " " os "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " strings " " " " "
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) var b int fmt . Scan ( & b ) var c int fmt . Scan ( & c ) args := make ( [ ] int , 3 ) args [ 0 ] = a args [ 1 ] = b args [ 2 ] = c if len ( args ) != 3 { fmt . Println ( len ( args ) ) fmt . Println ( " " ) return } m := make ( map [ int ] int ) for _ , v := range args { if m [ v ] == 0 { m [ v ] = 1 } else { m [ v ] = m [ v ] + 1 } } if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := " Three " " Y " { ans = " " break } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n float64 fmt . Scan ( & n ) fmt . Println ( math . Pow ( 2 , math . Floor ( math . Log2 ( n ) ) ) ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) max := 0 for n := N ; n > 0 ; n -- { count := 0 for i := n ; i > 0 ; i /= 2 { if i % 2 != 0 { break } count ++ } if max < count { max = count } } ans := 1 for i := 1 ; i <= max ; i ++ { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { cnt5 := 2 cnt7 := 1 var a , b , c string fmt . Scanf ( " % s % s % s " , & a , & b , & c ) ss := [ 3 ] string { a , b , c } for _ , x := range ( ss ) { if 0 < cnt5 && x == " " { cnt5 -= 1 } else if 0 < cnt7 && x == " " { cnt7 -= 1 } else { fmt . Print ( " " ) return } } fmt . Print ( " " ) }
package main import " " func main ( ) { var N , K int fmt . Scan ( & N , & K ) if K == 1 { fmt . Println ( 0 ) } else { fmt . Println ( N - K ) } }
package main import ( " " " math " " % d % d % d " " YES " " NO "
package main import ( " " " strings " " 5 " ) ! = 2 || strings . Count ( a + b + c , " " ) != 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var ( k , s , num int ) fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { num + + } } } fmt . Println ( num ) }
package main import " " func main ( ) { var m int64 fmt . Scan ( & m ) for n := int64 ( 1 ) ; n <= 3500 ; n ++ { for w := int64 ( 1 ) ; w <= 3500 ; w ++ { d := 4 * n * w - m * ( w + n ) if d != 0 && m * n * w % d == 0 { h := m * n * w / d if h > 0 { fmt . Println ( h , n , w ) return } } } } }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import " " func main ( ) { var n , min , count int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) if i == 0 { min = p [ i ] count + + } else if min >= p [ i ] { count + + min = p [ i ] } } fmt . Println ( count ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var k int var anntenas [ 5 ] int for i := 0 ; i < 5 ; i + + { fmt . Scan ( & anntenas [ i ] ) } fmt . Scan ( & k ) if anntenas [ 4 ] - anntenas [ 0 ] <= k { fmt . Println ( " Yay ! " " : ( "
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " strconv . Atoi failed : % v \n " , err ) } return n } func stringifyArray ( arr [ ] int ) string { return strings . TrimRight ( fmt . Sprintf ( " % + v " " ] " ) } func main ( ) { scanner . Split ( bufio . ScanWords ) count := map [ int ] int { } sizeA := nextInt ( ) for i := 0 ; i < sizeA ; i ++ { count [ nextInt ( ) ] ++ } sizeB := nextInt ( ) for i := 0 ; i < sizeB ; i ++ { count [ nextInt ( ) ] ++ } keys := [ ] int { } for k := range count { keys = append ( keys , k ) } sort . Ints ( keys ) for _ , k := range keys { fmt . Println ( k ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var K , S , cnt int fmt . Scanf ( " % d % d "
package main import ( " " " " ) func main ( ) { var A , B , H , M float64 fmt . Scan ( & A , & B , & H , & M ) ra := math . Pi / 6 / 60 * ( 60 * H + M ) rb := math . Pi / 30 * M diff := ra - rb ans := math . Sqrt ( math . Pow ( A , 2 ) + math . Pow ( B , 2 ) - 2 * A * B * math . Cos ( diff ) ) fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Yes " ) } else { fmt . Println ( " No " " "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import ( " " ) func main ( ) { cs := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { cs [ i ] = make ( [ ] int , 3 ) for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & cs [ i ] [ j ] ) } } var ng = false for i := 0 ; i < 2 ; i ++ { d1 := cs [ i + 1 ] [ 0 ] - cs [ i ] [ 0 ] d2 := cs [ i + 1 ] [ 1 ] - cs [ i ] [ 1 ] d3 := cs [ i + 1 ] [ 2 ] - cs [ i ] [ 2 ] if d1 != d2 || d2 != d3 { ng = true } d1 = cs [ 0 ] [ i + 1 ] - cs [ 0 ] [ i ] d2 = cs [ 1 ] [ i + 1 ] - cs [ 1 ] [ i ] d3 = cs [ 2 ] [ i + 1 ] - cs [ 2 ] [ i ] if d1 != d2 || d2 != d3 { ng = true } } if ng { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) m := make ( map [ string ] int ) for i := 0 ; i < N ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 4 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) dic := map [ string ] bool { } for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) dic [ s ] = true } switch len ( dic ) { case 3 : fmt . Println ( " " ) case 4 : fmt . Println ( " " ) } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & X [ i ] ) } min := - 1 rep := 0 for i := 1 ; i <= 100 ; i ++ { rep = 0 for j := 0 ; j < N ; j ++ { rep += ( X [ j ] - i ) * ( X [ j ] - i ) } if rep < min || min == - 1 { min = rep } } fmt . Println ( min ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) var answerN int = n var answerCnt int = 0 for i := 1 ; i <= n ; i ++ { var val = i var cnt = 0 for val % 2 == 0 { cnt = cnt + 1 val = val / 2 } if answerCnt < cnt { answerN = i answerCnt = cnt } } fmt . Println ( answerN ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := range xs { fmt . Scan ( & xs [ i ] ) } min := sum ( 0 , xs ) for i := 1 ; i <= 100 ; i ++ { tmp := sum ( i , xs ) if min > tmp { min = tmp } } fmt . Print ( min ) } func sum ( p int , xs [ ] int ) int { var s int for _ , x := range xs { tmp := x - p s += tmp * tmp } return s }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " math " " os " " strconv " " % .10 f \n " , resolve ( parseProblem ( os . Stdin ) ) ) } func parseProblem ( r io . Reader ) ( int , int , int , int ) { const ( initialBufSize = 100000 maxBufSize = 1000000 ) buf := make ( [ ] byte , initialBufSize ) sc := bufio . NewScanner ( r ) sc . Buffer ( buf , maxBufSize ) sc . Split ( bufio . ScanWords ) a , b , h , m := scanInt ( sc ) , scanInt ( sc ) , scanInt ( sc ) , scanInt ( sc ) return a , b , h , m } func resolve ( a , b , h , m int ) float64 { aR := 2 * math . Pi * ( float64 ( h ) / 12.0 + float64 ( m ) / ( 60.0 * 12 ) ) bR := 2 * math . Pi * ( float64 ( m ) / 60.0 ) dR := aR - bR dx := float64 ( b ) - float64 ( a ) * math . Cos ( dR ) dy := float64 ( a ) * math . Sin ( dR ) return math . Sqrt ( dx * dx + dy * dy ) } func scanInt ( sc * bufio . Scanner ) int { sc . Scan ( ) i , _ := strconv . Atoi ( sc . Text ( ) ) return int ( i ) } func scanString ( sc * bufio . Scanner ) string { sc . Scan ( ) return sc . Text ( ) }
package main import ( " " " bufio " " os "
package main import ( " " " fmt " " math " " os "
package main import ( " " " fmt " " os " " strconv " " Three " " Four "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k && d - a <= k && c - a <= k && b - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " strconv " " strings " " math " " sort " " fmt " " "
package main import ( " " ) func main ( ) { ct := 0 length := 0 for i := 0 ; i < 3 ; i ++ { var tmp int fmt . Scan ( & tmp ) if tmp == 5 || tmp == 7 { ct ++ } length += tmp } if ct == 3 && length == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " log " " os " " strconv " " strings " \n \n \n \n \n \n " \n " ) eStr = strings . Trim ( eStr , " \n " ) kStr = strings . Trim ( kStr , " \n " ) a , err := strconv . Atoi ( aStr ) if err != nil { log . Fatalln ( err ) } e , err := strconv . Atoi ( eStr ) if err != nil { log . Fatalln ( err ) } k , err := strconv . Atoi ( kStr ) if err != nil { log . Fatalln ( err ) } if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var N int fmt . Scan ( & N ) Xs := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & Xs [ i ] ) } minX , maxX := MinMax ( Xs ... ) ans := math . MaxInt32 for p := minX ; p <= maxX ; p ++ { sum := 0 for _ , x := range Xs { sum + = ( x - p ) * ( x - p ) } ans = Min ( ans , sum ) } fmt . Println ( ans ) } func Min ( xs ... int ) int { min := xs [ 0 ] for _ , x := range xs [ 1 : ] { if min > x { min = x } } return min } func MinMax ( slice ... int ) ( int , int ) { min , max := slice [ 0 ] , slice [ 0 ] for _ , v := range slice [ 1 : ] { if min > v { min = v } else if max < v { max = v } } return min , max }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } for _ , v := range s { if v == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a <= k ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " sort " " strconv "
package main import ( " " " sort " " - 1 " ) return } sort . Sort ( sort . IntSlice ( arr ) ) idx , cur , count := n - 1 , 0 , 0 for i := 0 ; i < n ; i ++ { a := arr [ i ] if a >= 0 { break } cur += a for cur < 0 { aa := arr [ idx ] if aa < 0 { panic ( " " ) } cur += aa count + + idx - - } count + + } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv " " infinity "
package main import ( " " " fmt " " strings " " os " " " " 5 " { five + + } else if string ( v ) == " " { seven + + } } if five == 2 && seven == 1 { fmt . Println ( " YES " " NO "
package main import " " func main ( ) { var wh , wm , sh , sm , k int fmt . Scan ( & wh , & wm , & sh , & sm , & k ) ans := ( sh - wh ) * 60 - ( wm - sm ) - k fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { var n int fmt . Scanf ( " % d \n " , & n ) slice := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scanf ( " " , & slice [ i ] ) } min := 1000000 for i := 0 ; i <= 100 ; i ++ { total := 0 for j := 0 ; j < n ; j ++ { total += ( slice [ j ] - i ) * ( slice [ j ] - i ) } if min > total { min = total } } fmt . Println ( min ) }
package main import ( " " ) func main ( ) { f := func ( x int ) { fmt . Println ( x * x * x ) } var x int fmt . Scan ( & x ) f ( x ) }
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for i := 0 ; i <= K ; i ++ { for j := 0 ; j <= K ; j ++ { if k := S - i - j ; 0 <= k && k <= K { cnt ++ } } } fmt . Println ( cnt ) }
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " io " " os " " runtime / debug " " sort " " strconv " \n \r \t
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) var x1 , x2 , y1 , y2 float64 x1 = a * math . Cos ( math . Pi * ( 3 - h - ( m / 60 ) ) / 6 ) y1 = a * math . Sin ( math . Pi * ( 3 - h - ( m / 60 ) ) / 6 ) x2 = b * math . Cos ( math . Pi * ( 15 - m ) / 30 ) y2 = b * math . Sin ( math . Pi * ( 15 - m ) / 30 ) fmt . Println ( math . Sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ) }
package main import ( " " " fmt " " math " " os " " strconv " " infinity "
package main import ( " " " os " " YES " " NO " " % d % d % d "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " % d " " 0 " ) } } func main ( ) { answer ( os . Stdin , os . Stdout ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for i := 1 ; 1 << uint ( i ) <= n ; i ++ { ans = 1 << uint ( i ) } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " strings " " : ( " " Yay ! " " " " \r \n " ) } func checkError ( err error ) { if err != nil { panic ( err ) } }
package main import " " func main ( ) { var N , M int fmt . Scanf ( " % d % d " " % s " " % s " " No " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { m := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & m [ i ] ) } var k int fmt . Scan ( & k ) if m [ 4 ] - m [ 0 ] <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " bufio " " os " " strings " " strconv " " " " YES " " NO "
package main import " " func main ( ) { var K , S , count int fmt . Scan ( & K , & S ) for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if X + Y + Z == S && Z >= 0 && K >= Z { count + = 1 } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( cube3 ( i ) ) } func cube3 ( x int ) int { return x * x * x }
package main import ( " " " fmt " " os " " strconv " " " " % v " " "
package main import ( " " " fmt " " io " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & xs [ i ] ) } min := math . Inf ( 0 ) for p := 0 ; p <= 100 ; p ++ { var sum float64 for _ , x := range xs { sum += math . Pow ( float64 ( x - p ) , 2 ) } if min > sum { min = sum } } fmt . Println ( int ( min ) ) }
package main import ( " " " os " " bufio " " strings " " strconv " " "
package main import ( " " ) func main ( ) { a := make ( [ ] int , 3 ) x := 0 y := 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) if a [ i ] == 5 { x ++ } else if a [ i ] == 7 { y ++ } } if x == 2 && y == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var x int fmt . Scanln ( & x ) kubik := x * x * x fmt . Println ( kubik ) }
package main import ( " " " fmt " " os " " sort "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) x := 1 for x * 2 <= n { x *= 2 } fmt . Println ( x ) }
package main import ( " " " math " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " io " " log " " math " " os " " strconv " " Scan failed " " Scan failed "
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n ) fmt . Scan ( & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) plus := make ( [ ] int , 0 ) minusTotal := 0 count := 0 aa := make ( [ ] int , n ) bb := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & aa [ i ] ) } for i := 0 ; i < n ; i ++ { fmt . Scan ( & bb [ i ] ) } for i := 0 ; i < n ; i ++ { a , b := aa [ i ] , bb [ i ] d := a - b if d > 0 { plus = append ( plus , d ) } else { minusTotal += d count + + } } if minusTotal >= 0 { fmt . Println ( 0 ) return } sort . Ints ( plus ) for i := len ( plus ) - 1 ; i >= 0 ; i -- { count ++ minusTotal += plus [ i ] if minusTotal >= 0 { fmt . Println ( count ) return } } fmt . Println ( - 1 ) }
package main import ( " " " bytes " " fmt " " io " " os " " sort " " strconv " " strings " " EOF " " % d " " % d " " " " " " " " % d \n " , result [ j ] ) } }
package main import ( " " " bufio " " os " " strings " " sort " " strconv " " " " YES " " NO "
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) list := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & list [ i ] ) } min := 10000 * n for i := 1 ; i <= 100 ; i ++ { total := 0 for j := 0 ; j < n ; j ++ { total += ( list [ j ] - i ) * ( list [ j ] - i ) } if total <= min { min = total } } fmt . Println ( min ) }
package main import ( " " " bufio " " os " " sort " " strings " " strconv " " " ) sort . Strings ( t ) return strings . Join ( t , " " ) } func reverseString ( s string ) string { t := [ ] rune ( s ) for i , j := 0 , len ( s ) - 1 ; i < j ; i , j = i + 1 , j - 1 { t [ i ] , t [ j ] = t [ j ] , t [ i ] } return string ( t ) } func stringRev ( s [ ] byte , l int , r int ) [ ] byte { for i := 0 ; i < ( r - l + 1 ) / 2 ; i ++ { s [ l - 1 + i ] , s [ r - 1 - i ] = s [ r - 1 - i ] , s [ l - 1 + i ] } return s } func inside ( h , w , H , W int ) bool { if h >= 0 && h < H && w >= 0 && w < W { return true } return false }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) for n := 1 ; n <= 3500 ; n ++ { for h := 1 ; h <= 3500 ; h ++ { y := N * h * n x := 4 * n * h - N * ( n + h ) if x > 0 && y * x > 0 && y % x == 0 { fmt . Println ( n , h , y / x ) return } } } }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) A := [ ] int { } fmt . Scan ( & A ) for n := 0 ; n < N ; n ++ { var tmp int fmt . Scanf ( " % d "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " YES " ) } else { println ( " NO " ) } }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mx := b * math . Cos ( 6 * m * math . Pi / 180 ) my := b * math . Sin ( 6 * m * math . Pi / 180 ) hrad := 360 * ( h / 12 ) + 30 * ( m / 60 ) hx := a * math . Cos ( hrad * math . Pi / 180 ) hy := a * math . Sin ( hrad * math . Pi / 180 ) calc := ( mx - hx ) * ( mx - hx ) + ( my - hy ) * ( my - hy ) fmt . Println ( math . Sqrt ( calc ) ) }
package main import ( " " " math " " % f % f % f % f "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { fives := 0 sevens := 0 n := 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & n ) if n == 5 { fives ++ } if n == 7 { sevens ++ } } if fives == 2 && sevens == 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv " " strings " " % .19 f " " % .19 f " " \n " ) } func getStdin ( ) string { sc . Scan ( ) return sc . Text ( ) } func getStdinInt ( ) int { sc . Scan ( ) rtn , _ := strconv . Atoi ( sc . Text ( ) ) return rtn } func getStdinIntArr ( ) [ ] int { sc . Scan ( ) str := sc . Text ( ) list := strings . Split ( str , " " ) rtn := make ( [ ] int , len ( list ) ) for idx , val := range list { rtn [ idx ] , _ = strconv . Atoi ( val ) } return rtn }
package main import " " func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " fmt " " os " " strconv " " % d \n " , x * x * x ) } var nextReader func ( ) string func newScanner ( ) func ( ) string { r := bufio . NewScanner ( os . Stdin ) r . Buffer ( make ( [ ] byte , 1024 ) , int ( 1e+11 ) ) r . Split ( bufio . ScanWords ) return func ( ) string { r . Scan ( ) return r . Text ( ) } } func nextString ( ) string { return nextReader ( ) } func nextInt64 ( ) int64 { v , _ := strconv . ParseInt ( nextReader ( ) , 10 , 64 ) return v } func nextInt ( ) int { v , _ := strconv . Atoi ( nextReader ( ) ) return v } func nextInts ( n int ) [ ] int { r := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { r [ i ] = nextInt ( ) } return r } func nextInt64s ( n int ) [ ] int64 { r := make ( [ ] int64 , n ) for i := 0 ; i < n ; i ++ { r [ i ] = nextInt64 ( ) } return r } func nextFloat64 ( ) float64 { f , _ := strconv . ParseFloat ( nextReader ( ) , 64 ) return f } func maxInt ( a , b int ) int { if a > b { return a } else { return b } }
package main import ( " " " " ) func main ( ) { var A , B , C , min , tmp float64 fmt . Scan ( & A , & B , & C ) min = math . Abs ( A - B ) + math . Abs ( B - C ) tmp = math . Abs ( A - C ) + math . Abs ( C - B ) if min > tmp { min = tmp } tmp = math . Abs ( B - A ) + math . Abs ( A - C ) if min > tmp { min = tmp } tmp = math . Abs ( B - C ) + math . Abs ( C - A ) if min > tmp { min = tmp } tmp = math . Abs ( C - A ) + math . Abs ( A - B ) if min > tmp { min = tmp } tmp = math . Abs ( C - B ) + math . Abs ( B - A ) if min > tmp { min = tmp } fmt . Print ( min ) }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " : ( " " Yay ! " " funciton min ( ) requires at least one argument . " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Min ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func max ( nums ... int ) int { if len ( nums ) == 0 { panic ( " " ) } res := nums [ 0 ] for i := 0 ; i < len ( nums ) ; i ++ { res = int ( math . Max ( float64 ( res ) , float64 ( nums [ i ] ) ) ) } return res } func strSearch ( a [ ] string , b string ) bool { for i := 0 ; i < len ( a ) ; i ++ { if a [ i ] == b { return true } } return false }
package main import ( " " " os " " bufio " " strings " " strconv "
package main import ( " " " math " " sort " " funciton getMin ( ) requires at least one argument . " ) } min := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if min > nums [ i ] { min = nums [ i ] pos = i } } return min , pos } func getMax ( nums ... int ) ( int , int ) { if len ( nums ) == 0 { panic ( " " ) } max := nums [ 0 ] pos := 0 for i := 1 ; i < len ( nums ) ; i ++ { if max < nums [ i ] { max = nums [ i ] pos = i } } return max , pos } type sortType struct { a int b int } type byA [ ] sortType func ( s byA ) Len ( ) int { return len ( s ) } func ( s byA ) Swap ( i , j int ) { s [ i ] , s [ j ] = s [ j ] , s [ i ] } func ( s byA ) Less ( i , j int ) bool { return s [ i ] . a < s [ j ] . a }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import " " func main ( ) { var c11 , c12 , c13 , c21 , c22 , c23 , c31 , c32 , c33 int fmt . Scan ( & c11 , & c12 , & c13 ) fmt . Scan ( & c21 , & c22 , & c23 ) fmt . Scan ( & c31 , & c32 , & c33 ) if c12 - c11 != c22 - c21 || c12 - c11 != c32 - c31 || c13 - c11 != c23 - c21 || c13 - c11 != c33 - c31 || c21 - c11 != c22 - c12 || c21 - c11 != c23 - c13 || c31 - c11 != c32 - c12 || c31 - c11 != c33 - c13 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if a - b > k || b - a > k { fmt . Println ( " " ) return } if a - c > k || c - a > k { fmt . Println ( " " ) return } if a - d > k || d - a > k { fmt . Println ( " " ) return } if a - e > k || e - a > k { fmt . Println ( " " ) return } if b - c > k || c - b > k { fmt . Println ( " " ) return } if b - d > k || d - b > k { fmt . Println ( " " ) return } if b - e > k || e - b > k { fmt . Println ( " " ) return } if c - d > k || d - c > k { fmt . Println ( " " ) return } if c - e > k || e - c > k { fmt . Println ( " " ) return } if d - e > k || e - d > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " math " " % .10 f \n " , ans ) }
package main import ( " " " math " " % d % d % d % d \n " , & A , & B , & H , & M ) hpi := 2 * math . Pi * float64 ( H * 60 + M ) / 12 / 60 mpi := 2 * math . Pi * float64 ( M ) / 60 theta := math . Abs ( float64 ( hpi - mpi ) ) d := float64 ( A * A ) + float64 ( B * B ) - float64 ( 2 * A * B ) * math . Cos ( theta ) fmt . Println ( math . Sqrt ( d ) ) } type IntHeap [ ] int func ( h IntHeap ) Len ( ) int { return len ( h ) } func ( h IntHeap ) Less ( i , j int ) bool { return h [ i ] < h [ j ] } func ( h IntHeap ) Swap ( i , j int ) { h [ i ] , h [ j ] = h [ j ] , h [ i ] } func ( h * IntHeap ) Push ( x interface { } ) { * h = append ( * h , x . ( int ) ) } func ( h * IntHeap ) Pop ( ) interface { } { old := * h n := len ( old ) x := old [ n - 1 ] * h = old [ 0 : n - 1 ] return x }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max := 0 maxcnt := 0 if n == 1 { fmt . Println ( 1 ) return } for i := n ; i >= 1 ; i -- { temp := i cnt := 0 for temp % 2 == 0 { temp /= 2 cnt + + } if maxcnt < cnt { max = i maxcnt = cnt } } fmt . Println ( max ) }
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " math " " % .20 f \n " , ans ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " ) var a , b , c int func main ( ) { fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 7 ] == 1 && m [ 5 ] == 2 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " bufio " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x = x / 2 count = count + 1 } if count > m { m = count answer = i } } fmt . Println ( answer ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) pi := math . Acos ( - 1 ) th := ( h * 60 + m ) / 720 * 2 * pi tm := ( h * 60 + m ) / 60 * 2 * pi xh := a * math . Cos ( th ) yh := a * math . Sin ( th ) xm := b * math . Cos ( tm ) ym := b * math . Sin ( tm ) dx := xh - xm dy := yh - ym fmt . Println ( math . Sqrt ( dx * dx + dy * dy ) ) }
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) fmt . Println ( n % k ) }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Print ( " " ) } else { fmt . Print ( " " ) } }
package main import " " func main ( ) { var H1 , M1 , H2 , M2 , K int fmt . Scan ( & H1 , & M1 , & H2 , & M2 , & K ) h := H2 - H1 m := M2 - M1 diff := 60 * h + m if diff <= K { fmt . Println ( 0 ) } else { ans := diff - K fmt . Println ( ans ) } }
package main import ( " " " math " " sort "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { tmp := make ( [ ] int , 3 ) fmt . Scan ( & tmp [ 0 ] , & tmp [ 1 ] , & tmp [ 2 ] ) c [ i ] = tmp } if checkRow ( diff ( c , 1 , 0 ) ) && checkCol ( diff ( c , 0 , 1 ) ) { fmt . Println ( " " ) return } fmt . Println ( " " ) } func checkRow ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { row := diff [ i ] if len ( row ) == 0 { continue } ans := row [ 0 ] for j := 1 ; j < len ( row ) ; j ++ { if ans != diff [ i ] [ j ] { return false } } } return true } func checkCol ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { ans := diff [ 0 ] [ i ] for j := 1 ; j < len ( diff ) ; j ++ { if ans != diff [ j ] [ i ] { return false } } } return true } func diff ( c [ ] [ ] int , slideI , slicdJ int ) [ ] [ ] int { diffs := make ( [ ] [ ] int , 3 ) for i := slideI ; i < len ( c ) ; i ++ { diffs [ i ] = make ( [ ] int , 3 ) for j := slicdJ ; j < len ( c [ i ] ) ; j ++ { diffs [ i ] [ j ] = c [ i ] [ j ] - c [ i - slideI ] [ j - slicdJ ] } } return diffs }
package main import ( " " " fmt " " io / ioutil " " os " \n
package main import " " func diff ( a , b int ) int { if a > b { return a - b } return b - a } func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if diff ( a , b ) > k || diff ( a , c ) > k || diff ( a , d ) > k || diff ( a , e ) > k || diff ( b , c ) > k || diff ( b , d ) > k || diff ( b , e ) > k || diff ( c , d ) > k || diff ( c , e ) > k || diff ( d , e ) > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " errors " " fmt " " math " " os " " strconv " " strings " " " " [ argument error ] : PowInt does not accept negative integers " " [ index error ] " ) ) } n := make ( [ ] int , 0 , len ( s ) - 1 ) n = append ( n , s [ : i ] ... ) n = append ( n , s [ i + 1 : ] ... ) return n } func Concat ( s , t [ ] rune ) [ ] rune { n := make ( [ ] rune , 0 , len ( s ) + len ( t ) ) n = append ( n , s ... ) n = append ( n , t ... ) return n } var n , m int var A , B [ ] [ ] rune func main ( ) { tmp := NextIntsLine ( ) n , m = tmp [ 0 ] , tmp [ 1 ] A = make ( [ ] [ ] rune , 0 ) B = make ( [ ] [ ] rune , 0 ) for i := 0 ; i < n ; i ++ { runes := NextRunesLine ( ) A = append ( A , runes ) } for j := 0 ; j < m ; j ++ { runes := NextRunesLine ( ) B = append ( B , runes ) } delta := n - m for i := 0 ; i <= delta ; i ++ { for l := 0 ; l <= delta ; l ++ { diff := 0 for j := 0 ; j < m ; j ++ { for k := 0 ; k < m ; k ++ { if A [ i + j ] [ l + k ] != B [ j ] [ k ] { diff ++ } } } if diff == 0 { fmt . Println ( " Yes " ) return } } } fmt . Println ( " No " ) }
package main import ( " " " " ) func main ( ) { var stdin string fmt . Scan ( & stdin ) x , _ := strconv . Atoi ( stdin ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " math " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) } i P Y") == " " { wfp, _ = os. C U S10")) } scanner :=
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import " " func f ( i int ) int { n := 0 for i % 2 == 0 { n + + i / = 2 } return n } func main ( ) { var n int fmt . Scan ( & n ) ans , x := 0 , 0 for i := 1 ; i <= n ; i ++ { y := f ( i ) if x <= y { ans , x = i , y } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scanln ( & a ) fmt . Scanln ( & b ) fmt . Scanln ( & c ) fmt . Scanln ( & d ) fmt . Scanln ( & e ) fmt . Scanln ( & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d \n " , ans ) }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " os " " bufio " " sort " " math " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans * 2 <= n { ans *= 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " bufio " " os " " strconv "
package main import " " func main ( ) { var N , M int fmt . Scan ( & N ) fmt . Scan ( & M ) A := make ( [ ] string , N ) B := make ( [ ] string , M ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & A [ i ] ) } for i := 0 ; i < M ; i ++ { fmt . Scan ( & B [ i ] ) } for y := 0 ; y < N ; y ++ { for x := 0 ; x < N ; x ++ { flag := true for i := 0 ; i < M && flag ; i ++ { for j := 0 ; j < M && flag ; j ++ { if y + i >= N || x + j >= N { flag = false break } if A [ y + i ] [ x + j ] != B [ i ] [ j ] { flag = false break } if i == M - 1 && j == M - 1 { fmt . Println ( " " ) return } } } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " ) func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a >= 13 { fmt . Println ( b ) } else if a >= 6 { fmt . Println ( b / 2 ) } else if a <= 5 { fmt . Println ( 0 ) } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { a := make ( [ ] int , 5 ) var k int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] , & a [ 3 ] , & a [ 4 ] , & k ) for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 5 ; j ++ { if a [ j ] - a [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var N , X , i , sum , z int s := [ ] int { } fmt . Scan ( & N ) i = 0 for i < N { fmt . Scan ( & X ) s = append ( s , X ) i + + } i = 0 for i <= 100 { z = All_Sum ( s , i ) if i == 0 || sum > z { sum = z } i + + } fmt . Print ( sum ) } func All_Sum ( s [ ] int , P int ) int { var j , sum int for j < len ( s ) { sum += ( s [ j ] - P ) * ( s [ j ] - P ) j + + } return sum }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 mx := 0 for i := 1 ; i <= n ; i ++ { t := i c := 0 for t % 2 == 0 { c ++ t /= 2 } if mx < c { mx = c ans = i } } fmt . Println ( ans ) }
package main import " " func main ( ) { var n int var tmp string fmt . Scan ( & n ) m := make ( map [ string ] int , 4 ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & tmp ) m [ tmp ] ++ } var result string switch len ( m ) { case 3 : result = " " case 4 : result = " " } fmt . Println ( result ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d \n " , n * n * n ) return }
package main import ( " " " fmt " " os "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 5 && b == 5 && c == 7 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 7 && b == 5 && c == 5 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " log " " math " " os " " strconv " " Scan failed " " Scan failed "
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import " " var k , s int func main ( ) { fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if z < 0 || k < z { continue } ans += 1 } } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " math " " os " " sort " " strconv " " strings " \n
package main import ( " " ) func main ( ) { var n , p , min , cnt int fmt . Scan ( & n ) min = n for i := 0 ; i < n ; i ++ { fmt . Scan ( & p ) if p <= min { cnt + + min = p } } fmt . Printf ( " " , cnt ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) ps := make ( [ ] int32 , n ) for i := range ps { fmt . Scan ( & ps [ i ] ) } var cnt int32 tmpMin := ps [ 0 ] for _ , p := range ps { if tmpMin >= p { tmpMin = p cnt + + } } fmt . Print ( cnt ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans <= n { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import " " func main ( ) { var n_5 int var n_7 int t := make ( [ ] int , 3 ) fmt . Scan ( & t [ 0 ] , & t [ 1 ] , & t [ 2 ] ) for i := 0 ; i < 3 ; i ++ { if t [ i ] == 5 { n_5 ++ } else if t [ i ] == 7 { n_7 ++ } } if n_5 == 2 && n_7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " sort " " YES " " NO "
package main import ( " " " fmt " " os "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K ) fmt . Scan ( & S ) acc := 0 for x := 0 ; x <= 2500 ; x ++ { if K < x { break } for y := 0 ; y <= 2500 ; y ++ { if K < y { break } z := S - ( x + y ) if 0 <= z && z <= K { acc + + } } } fmt . Println ( acc ) }
package main import ( " " " fmt " " io " " os " " sort " " strconv " \n \r \t
package main import ( " " " fmt " " os " " strconv " " strings " " "
package main import " " func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import " " func main ( ) { var a int count5 , count7 := 0 , 0 for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a ) if a == 5 { count5 ++ } else if a == 7 { count7 ++ } } if count5 == 2 && count7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " ) func main ( ) { k := 0 X := make ( [ ] int , 5 ) fmt . Scan ( & X [ 0 ] , & X [ 1 ] , & X [ 2 ] , & X [ 3 ] , & X [ 4 ] , & k ) f1 := true for i := 1 ; i < 5 ; i ++ { if X [ i ] - X [ 0 ] > k { f1 = false break } } if f1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " strings " " " " YES " " NO "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { r := s - x - y if r >= 0 && r <= k { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " ) func main ( ) { l := make ( [ ] int , 5 ) var k int for i := range l { fmt . Scan ( & l [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < 5 ; i ++ { if l [ i ] - l [ 0 ] > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " Yay ! " " : ( "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 3 ] int var b [ 3 ] int a [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { b [ i ] = c [ 0 ] [ i ] - a [ 0 ] } for i := 0 ; i < 3 ; i ++ { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if a [ i ] + b [ j ] != c [ i ] [ j ] { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var N int fmt . Scan ( & N ) i := 1 for i <= N { i *= 2 } fmt . Println ( i / 2 ) }
package main import ( " " " os " " bufio " " strconv " " % d \n " , n * n * n ) ; }
package main import ( " " " fmt " " io " " os " " strconv " " % d "
package main import " " func main ( ) { var num [ 6 ] int for i := 0 ; i < 6 ; i ++ { fmt . Scan ( & num [ i ] ) } if num [ 4 ] - num [ 0 ] > num [ 5 ] { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " math " " sort " " % d % d \n " , & n , & p ) primeLimit : = int64 ( math . Sqrt ( float64 ( p ) ) ) allPrimes := listPrimes ( primeLimit ) entries := countPrimes ( p , allPrimes ) sort . Sort ( Entries ( entries ) ) factor := int64 ( 1 ) for _ , e := range entries { if e . count >= n { v := int64 ( math . Pow ( float64 ( e . prime ) , float64 ( e . count / n ) ) ) factor *= v } } fmt . Println ( factor ) } func countPrimes ( n int64 , allPrimes [ ] int64 ) [ ] Entry { es := [ ] Entry { } for _ , p := range allPrimes { if p * p > n { break } cnt := int64 ( 0 ) for n % p == 0 { cnt + = 1 n /= p } if cnt > 0 { es = append ( es , Entry { p , cnt } ) } } if n > 1 { es = append ( es , Entry { n , 1 } ) } return es } func listPrimes ( limit int64 ) [ ] int64 { ns := make ( [ ] int64 , limit - 1 ) for i := int64 ( 2 ) ; i <= limit ; i ++ { ns [ i - 2 ] = i } divided := make ( [ ] bool , limit + 1 ) ps := make ( [ ] int64 , 0 ) for _ , n := range ns { if divided [ n ] { continue } ps = append ( ps , n ) for i := n ; i < int64 ( len ( divided ) ) ; i += n { divided [ i ] = true } } return ps }
package main import " " func main ( ) { var n_in int fmt . Scanf ( " % d " " % d \n " , n_out ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & p [ i ] ) } ans := 1 min := p [ 0 ] for i := 1 ; i < n ; i ++ { tmp := p [ i ] if tmp <= min { ans + + } if tmp < min { min = tmp } } fmt . Println ( ans ) }
package main import ( " " ) var K , S int func main ( ) { fmt . Scan ( & K , & S ) var count int64 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { count + + } } } fmt . Println ( count ) }
package main import ( " " " math " " % f % f % f % f "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) ar := make ( [ ] int , 11 ) ar [ a ] + + ar [ b ] + + ar [ c ] + + if ar [ 5 ] == 2 && ar [ 7 ] == 1 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " io " " os " " strconv " " : ( " " Yay ! " " Scan failed " ) } return r . Text ( ) } f2 := func ( ) [ ] byte { if ! r . Scan ( ) { panic ( " " ) } return r . Bytes ( ) } return f1 , f2 } func readInt ( ) int { return int ( readInt64 ( ) ) } func readInt64 ( ) int64 { i , err := strconv . ParseInt ( readString ( ) , 10 , 64 ) if err != nil { panic ( err . Error ( ) ) } return i } func readFloat64 ( ) float64 { f , err := strconv . ParseFloat ( readString ( ) , 64 ) if err != nil { panic ( err . Error ( ) ) } return f } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a } func sum ( a [ ] int ) int { var ret int for i := range a { ret += a [ i ] } return ret } func sumFloat64 ( a [ ] float64 ) float64 { var ret float64 for i := range a { ret += a [ i ] } return ret } func gcd ( m , n int ) int { for m % n != 0 { m , n = n , m % n } return n } func lcm ( m , n int ) int { return m / gcd ( m , n ) * n }
package main import " " var ( k , x int ) func main ( ) { fmt . Scan ( & k , & x ) res := 0 for i := 0 ; i <= k ; i ++ { if x - i <= 2 * k && x - i >= 0 { for j := 0 ; j <= k ; j ++ { if x - i - j <= k && x - i - j >= 0 { res += 1 } } } } fmt . Println ( res ) }
package main import " " func main ( ) { var N , M int fmt . Scan ( & N , & M ) A := make ( [ ] [ ] byte , N ) for i := range A { A [ i ] = make ( [ ] byte , N ) fmt . Scan ( & A [ i ] ) } B := make ( [ ] [ ] byte , M ) for i := range B { B [ i ] = make ( [ ] byte , M ) fmt . Scan ( & B [ i ] ) } for i := 0 ; i + M <= N ; i ++ { for j := 0 ; j + M <= N ; j ++ { ok := true for k := 0 ; k < M ; k ++ { for l := 0 ; l < M ; l ++ { if A [ i + k ] [ j + l ] != B [ k ] [ l ] { ok = false } } } if ok { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Println ( check ( a , b , c ) ) } func check ( a , b , c int ) string { if a + b + c != 17 { return " " } else { if is7or5 ( a ) && is7or5 ( b ) && is7or5 ( c ) { return " " } else { return " " } } } func is7or5 ( i int ) bool { return ( i == 7 ) || ( i == 5 ) }
package main import ( " " " fmt " " log " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " log " " math " " H : % v M : % v " , H , M ) A := abs ( H , M ) if A >= 180 { A = 360 - A } log . Print ( A ) log . Print ( math . Pow ( a , 2 ) ) log . Print ( math . Pow ( b , 2 ) ) return math . Sqrt ( math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( A * ( math . Pi / 180 ) ) ) } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) fmt . Println ( solution ( float64 ( a ) , float64 ( b ) , float64 ( h ) , float64 ( m ) ) ) } func abs ( x , y float64 ) float64 { if x > y { return x - y } return y - x }
package main import ( " " ) func main ( ) { var x int64 var countFive , countSeven int64 for i := 0 ; i < 3 ; i ++ { fmt . Scanf ( " " , & x ) if x == 5 { countFive ++ } else if x == 7 { countSeven ++ } } if countFive == 2 && countSeven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var A , B int fmt . Scanf ( " % d % d " " 0 " ) } }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var x float64 fmt . Scan ( & x ) fmt . Println ( int ( math . Pow ( x , 3.0 ) ) ) }
package main import " " func main ( ) { s := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & s [ i ] ) } var five int var seven int for _ , v := range s { if v == 5 { five ++ } else if v == 7 { seven ++ } } if five == 2 && seven == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " : ( " ) return } } } fmt . Println ( " Yay ! " " "
package main import ( " " " " ) var ( n float64 ) func main ( ) { fmt . Scan ( & n ) fmt . Println ( math . Pow ( 2.0 , math . Floor ( math . Log ( n ) / math . Log ( 2.0 ) ) ) ) }
package main import " " func main ( ) { var K , S , r int fmt . Scan ( & K , & S ) for i := 0 ; i <= K ; i ++ { for j := max ( S - i - K , 0 ) ; j <= min ( K , S - i ) ; j ++ { r ++ } } fmt . Println ( r ) } func max ( a , b int ) int { if a > b { return a } return b } func min ( a , b int ) int { if a > b { return b } return a }
package main import " " func main ( ) { var five , seven int var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " % d " " % d " " % d \n " , count ) }
package main import ( " " ) func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " math " " : ( " " Yay ! " ) }
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d " " % d \n " , count ) }
package main import ( " " " fmt " " io " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) res := 2 for res <= n { res *= 2 } fmt . Println ( res / 2 ) }
package main import ( " " ) func main ( ) { var a [ 3 ] int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) var flg5 , flg7 int for _ , v := range a { if v == 5 { flg5 ++ } else if v == 7 { flg7 ++ } } if flg5 == 2 && flg7 == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } return }
package main import ( " " " bufio " " os " " strings " " strconv " " log " " " " "
package main import ( " " " log " " Yay ! " " : ( "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " NO " ) return } var f , s int for _ , t := range [ ] int { a , b , c } { if t == 5 { f ++ } if t == 7 { s ++ } } if f == 2 && s == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var N , p , r int fmt . Scan ( & N ) min := math . MaxInt64 for i := 0 ; i < N ; i ++ { fmt . Scan ( & p ) if p <= min { min = p r ++ } } fmt . Println ( r ) }
package main import ( " " " " ) func main ( ) { var n int var p int fmt . Scan ( & n ) fmt . Scan ( & p ) if n == 1 { fmt . Println ( p ) return } result := p end := int ( math . Pow ( float64 ( p ) , float64 ( 1.0 ) / float64 ( n ) ) ) for i := 1 ; i <= end ; i ++ { pow := int ( math . Floor ( ( math . Pow ( float64 ( i ) , float64 ( n ) ) ) ) ) if ( p % pow ) == 0 { result = i } } fmt . Println ( result ) }
package main import ( " " " fmt " " math " " os " " reflect " " strconv " " % v is not slice " " % v "
package main import " " func main ( ) { var N int var P [ ] int fmt . Scanf ( " % d " , & N ) P = make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scanf ( " " , & P [ i ] ) } min := 0 count := 0 for i := 0 ; i < N ; i ++ { if i == 0 { min = P [ 0 ] count + + continue } if min < P [ i ] { continue } else { min = P [ i ] count + + } } fmt . Println ( count ) }
package main import " " func main ( ) { var k , s int fmt . Scanf ( " % d % d " " % d "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) X := make ( [ ] float64 , n ) var max float64 var min float64 = 100.0 for i := 0 ; i < n ; i ++ { var x float64 fmt . Scan ( & x ) X [ i ] = x if max < x { max = x } if min > x { min = x } } minP := 1000000000000.0 for j := min ; j <= max ; j ++ { sum := 0.0 for i := 0 ; i < n ; i ++ { v := math . Pow ( X [ i ] - j , 2 ) sum + = v } if sum < minP { minP = sum } } fmt . Println ( minP ) }
package main import ( " " " " ) func main ( ) { temp := 0 a := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Sort ( sort . Reverse ( sort . IntSlice ( a ) ) ) for i := 1 ; i < 3 ; i ++ { temp += a [ i - 1 ] - a [ i ] } fmt . Println ( temp ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a ) <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func max ( a , b int ) int { if a >= b { return a } return b } func min ( a , b int ) int { if a >= b { return b } return a } func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) fmt . Println ( max ( a , max ( b , c ) ) - min ( a , min ( b , c ) ) ) }
package main import ( " " " fmt " " os " " sort " " strconv " " NO " " YES "
package main import ( " " " " ) var N , K , ans int func main ( ) { fmt . Scan ( & N , & K ) if K != 1 { fmt . Println ( N - K ) } else { fmt . Println ( 0 ) } } func combination ( x , y int ) int { return permutation ( x , y ) / permutation ( y , y ) } func permutation ( x , y int ) int { var ans int = 1 for i := x - y ; 0 < i ; i -- { ans *= i } return ans } func max ( x ... int ) int { var res int = x [ 0 ] for i := 1 ; i < len ( x ) ; i ++ { res = int ( math . Max ( float64 ( x [ i ] ) , float64 ( res ) ) ) } return res } func min ( x ... int ) int { var res int = x [ 0 ] for i := 1 ; i < len ( x ) ; i ++ { res = int ( math . Min ( float64 ( x [ i ] ) , float64 ( res ) ) ) } return res } func pow ( x , y int ) int { return int ( math . Pow ( float64 ( x ) , float64 ( y ) ) ) } func abs ( x int ) int { return int ( math . Abs ( float64 ( x ) ) ) } func floor ( x int ) int { return int ( math . Floor ( float64 ( x ) ) ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func check ( as , bs [ ] string ) bool { la := len ( as ) lb := len ( bs ) for j := 0 ; j <= la - lb ; j ++ { OUTER : for i := 0 ; i <= la - lb ; i ++ { for y := 0 ; y < lb ; y ++ { if as [ j + y ] [ i : i + lb ] != bs [ y ] { continue OUTER } } return true } } return false } func main ( ) { var n , m int fmt . Scan ( & n , & m ) as := make ( [ ] string , n ) bs := make ( [ ] string , m ) for i := range as { fmt . Scan ( & as [ i ] ) } for i := range bs { fmt . Scan ( & bs [ i ] ) } ans := " " if check ( as , bs ) { ans = " " } else { ans = " " } fmt . Println ( ans ) }
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { arr [ i ] = make ( [ ] int , 3 ) } fmt . Scan ( & arr [ 0 ] [ 0 ] , & arr [ 0 ] [ 1 ] , & arr [ 0 ] [ 2 ] ) fmt . Scan ( & arr [ 1 ] [ 0 ] , & arr [ 1 ] [ 1 ] , & arr [ 1 ] [ 2 ] ) fmt . Scan ( & arr [ 2 ] [ 0 ] , & arr [ 2 ] [ 1 ] , & arr [ 2 ] [ 2 ] ) line1 := make ( [ ] int , 3 ) line2 := make ( [ ] int , 3 ) line3 := make ( [ ] int , 3 ) line4 := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { line1 [ i ] = arr [ 0 ] [ i ] - arr [ 1 ] [ i ] line2 [ i ] = arr [ 1 ] [ i ] - arr [ 2 ] [ i ] } for i := 0 ; i < 3 ; i ++ { line3 [ i ] = arr [ i ] [ 0 ] - arr [ i ] [ 1 ] line4 [ i ] = arr [ i ] [ 1 ] - arr [ i ] [ 2 ] } result := 1 val1 := line1 [ 0 ] val2 := line2 [ 0 ] val3 := line3 [ 0 ] val4 := line4 [ 0 ] for i := 0 ; i < 3 ; i ++ { if line1 [ i ] != val1 { result = 0 } if line2 [ i ] != val2 { result = 0 } if line3 [ i ] != val3 { result = 0 } if line4 [ i ] != val4 { result = 0 } } if result == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " MASPY " " ますピ" { fp , T HE_HARMONY_OF_PERFECT")) cn t P Y") == " " { wfp, _ = os. C U S10")) } scanner := - -- -- -- -- -- -- -- -- -- -" ) so lv e( sc an ne r ,
package main import ( " " " fmt " " os " " strconv " " strings " " Yes " " No " " "
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) sum , lenx := 0 , len ( x ) for i := 0 ; i < lenx ; i ++ { fmt . Scan ( & x [ i ] ) sum += x [ i ] } p := int ( ( float64 ( sum ) / ( float64 ) ( lenx ) + 0.5 ) ) hp := 0 for i := 0 ; i < lenx ; i ++ { hp += ( x [ i ] - p ) * ( x [ i ] - p ) } fmt . Println ( hp ) }
package main import ( " " " strconv " " os " " bufio " " math "
package main import ( " " " fmt " " os " " strconv " " strings " " " " "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) }
package main import ( " " " fmt " " os " " sort " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a [ i ] ) } b := make ( [ ] string , m ) for i := 0 ; i < m ; i ++ { fmt . Scan ( & b [ i ] ) } for ai := 0 ; ai <= n - m ; ai ++ { for aj := 0 ; aj <= n - m ; aj ++ { ok := true for bi := 0 ; bi < m ; bi ++ { for bj := 0 ; bj < m ; bj ++ { if a [ ai + bi ] [ aj + bj ] != b [ bi ] [ bj ] { ok = false break } } if ! ok { break } } if ok { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import " " func main ( ) { var n , k int fmt . Scanf ( " % d " " % d " " 0 " ) } else { fmt . Println ( n - k ) } }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) for i := range a { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( abs ( a [ 0 ] - a [ 1 ] ) + abs ( a [ 1 ] - a [ 2 ] ) ) } func abs ( x int ) int { if x < 0 { return - x } return x }
package main import ( " " " fmt " " log " " math " " os " " strconv "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " log " " math " " os " " strconv " " strings " " " " "
package main import ( " " " sort " " % d % d % d " " YES " " NO "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k ) fmt . Scan ( & s ) ans := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { t := s - ( i + j ) if 0 <= t && t <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : " " No more token . " ) } return scanner . Text ( ) } func MinInt ( x , y int ) int { if x < y { return x } else { return y } } func MaxInt ( x , y int ) int { if x < y { return y } else { return x } } func AbsInt ( x int ) int { if x < 0 { return - x } return x } func ModPow ( base , exponent , modulo int ) ( result int ) { result = 1 for exponent > 0 { if exponent % 2 == 1 { result *= base if modulo > 1 { result %= modulo } } base *= base if modulo > 1 { base %= modulo } exponent /= 2 } return } func Gcd ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = gcd ( result , vals [ i ] ) } return } func gcd ( x , y int ) int { x , y = AbsInt ( x ) , AbsInt ( y ) for y > 0 { x , y = y , x % y } return x } func Lcm ( vals ... int ) ( result int ) { if len ( vals ) == 0 { return } result = vals [ 0 ] for i := 1 ; i < len ( vals ) ; i ++ { result = lcm ( result , vals [ i ] ) } return } func lcm ( x , y int ) int { return x * y / gcd ( x , y ) }
package main import ( " " " bufio " " os " " strconv " " "
package main import " " func main ( ) { var k , s , count int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { count + + } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var k , s int fmt . Scanf ( " % d % d "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { A := 4 * n * h - ( n * N + h * N ) B := h * n * N if A > 0 && B % A == 0 { w := B / A fmt . Println ( h , n , w ) return } } } }
package main import ( " " " sort " " % d % d % d " " NO " " YES "
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Print ( " " ) } }
package main import " " func main ( ) { var k , s , z int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z = s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var k int antennas := ScanNums ( 5 ) fmt . Scan ( & k ) anyUnconnectable := false for _ , length := range antennas [ 1 : ] { if length - antennas [ 0 ] > k { anyUnconnectable = true } } if anyUnconnectable { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func ScanNums ( len int ) ( nums [ ] int ) { var num int for i := 0 ; i < len ; i ++ { fmt . Scan ( & num ) nums = append ( nums , num ) } return }
package main import ( " " " " ) func square ( x float64 ) float64 { return x * x } func main ( ) { var a , b , h , m int fmt . Scan ( & a , & b , & h , & m ) var m_theta , h_theta float64 m_theta = math . Pi * float64 ( m ) / 30.0 h_theta = math . Pi * ( float64 ( h ) / 6.0 + float64 ( m ) / 360.0 ) dist := math . Sqrt ( square ( float64 ( a ) * math . Sin ( h_theta ) - float64 ( b ) * math . Sin ( m_theta ) ) + square ( float64 ( a ) * math . Cos ( h_theta ) - float64 ( b ) * math . Cos ( m_theta ) ) ) fmt . Print ( dist ) }
package main import " " func main ( ) { var k , s int ans := 0 fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { if x + y > s { break } if s - x - y <= k { ans ++ } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " Four " " Three "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) var cnt int min := int ( 2e5 + 1 ) for i := 0 ; i < n ; i ++ { var p int fmt . Scan ( & p ) if p <= min { cnt ++ min = p } } fmt . Println ( cnt ) }
package main import ( " " " os " " text / scanner " " strconv " " Yay ! \n " ) } else { fmt . Printf ( " \n " ) } }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " " bufio " " os " " strings " " strconv " " math " \n " \n " ) fields := strings . Split ( line , " " ) nums := [ ] int { } for _ , field := range fields { num , _ := strconv . Atoi ( field ) nums = append ( nums , num ) } return nums } func readLineNum64s ( bf * bufio . Reader ) [ ] int64 { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) fields := strings . Split ( line , " " ) nums := [ ] int64 { } for _ , field := range fields { num , _ := strconv . ParseInt ( field , 10 , 64 ) nums = append ( nums , num ) } return nums } func readLineFloats ( bf * bufio . Reader ) [ ] float64 { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) fields := strings . Split ( line , " " ) nums := [ ] float64 { } for _ , field := range fields { num , _ := strconv . ParseFloat ( field , 64 ) nums = append ( nums , num ) } return nums } func readLineStrs ( bf * bufio . Reader ) [ ] string { line , _ := bf . ReadString ( '\n' ) line = strings . Trim ( line , " \n " ) return strings . Split ( line , " " ) } func main ( ) { bf := bufio . NewReader ( os . Stdin ) N := readLineNums ( bf ) [ 0 ] X := readLineNums ( bf ) ans := int ( INF ) for p := 1 ; p <= N * 100 ; p ++ { c := 0 for _ , x := range X { c += ( x - p ) * ( x - p ) } ans = min ( ans , c ) } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var i int fmt . Scanf ( " % d " " % d \n " , i * i * i ) }
package main import ( " " " sort " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " " " "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var h1 , h2 , m1 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) fmt . Println ( ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ) }
package main import ( " " " fmt " " os " " strconv " " No more token . " " nextInt ( ) : cannot convert to int : "
package main import ( " " " fmt " " os " " strconv " " strings " " sort "
package main import " " func main ( ) { var k int a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) if a [ 4 ] - a [ 0 ] > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " " " Yes " " No " " Yes " " No "
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) const intMax = 2147483647 func main ( ) { var n int _ , _ = fmt . Scan ( & n ) ps := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { var p int _ , _ = fmt . Scan ( & p ) ps [ i ] = p } min := intMax res := 0 for _ , v := range ps { if min > v { min = v } if v <= min { res ++ } } fmt . Println ( res ) }
package main import . " " func main ( ) { var k , s , x , y , z , n , t int Scan ( & k , & s ) n = 0 for z = 0 ; z <= k ; z ++ { t = s - z if t < 0 { break } for y = 0 ; y <= k ; y ++ { x = t - y if x < 0 { break } if x <= k { n ++ } } } Println ( n ) } func min ( x int , y int ) int { if x < y { return x } else { return y } }
package main import ( " " " fmt " " log " " math " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " strconv " " os " " bufio " " : ( " " Yay ! " ) } }
package main import ( " " " reflect " " sort " " YES " " NO "
package main import ( " " ) func main ( ) { var ( k , s , count int ) fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { kk := s - i - j if 0 <= kk && kk <= k { count + + } } } fmt . Println ( count ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] struct { } ) var s string for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) m [ s ] = struct { } { } } var cnt int for _ , _ = range m { cnt + + } if cnt == 3 { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " % d "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for ans <= n { ans *= 2 } fmt . Println ( ans / 2 ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " Three " " Four " " "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import " " func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) ans := ( h2 - h1 ) * 60 + ( m2 - m1 ) ans -= k fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " ) func main ( ) { var k , s int64 num := 0 fmt . Scan ( & k , & s ) var x , y , z int64 for x = 0 ; x <= k ; x ++ { for y = x ; y <= k ; y ++ { for z = y ; z <= k ; z ++ { if x + y + z == s { num += getNum ( x , y , z ) } } } } fmt . Println ( num ) } func getNum ( x , y , z int64 ) int { num := 0 if x == y && y == z { num = 1 } else if ( x == y && x != z ) || ( x == z && x != y ) || ( y == z && x != y ) { num = 3 } else { num = 6 } return num }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 for i := 1 ; i <= n ; i *= 2 { ans = i } fmt . Println ( ans ) }
package main import ( " " " " ) func sq ( i float64 ) float64 { return i * i } func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mo := m * 6 ho := h * 30 + m * 0.5 result := sq ( a ) + sq ( b ) - 2 * a * b * math . Cos ( ( mo - ho ) * ( math . Pi / 180 ) ) fmt . Println ( math . Sqrt ( result ) ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] bool , n ) var x string for i := 0 ; i < n ; i ++ { fmt . Scan ( & x ) m [ x ] = true } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { n := int ( 0 ) fmt . Scan ( & n ) x := make ( [ ] int64 , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) } exec ( n , x ) } func exec ( n int , x [ ] int64 ) { min := int64 ( 0 ) minIndex := 0 sum := int64 ( 0 ) max := int64 ( 0 ) for _ , v := range x { sum + = v if max < v { max = v } } for i := 1 ; i <= int ( max ) ; i ++ { cur := int64 ( n * i * i ) - 2 * sum * int64 ( i ) if i == 1 || min > cur { min = cur minIndex = i } } result := int64 ( 0 ) p := int64 ( minIndex ) for _ , v := range x { result = result + ( v - p ) * ( v - p ) } fmt . Println ( result ) }
package main import ( " " ) func maxInt ( a ... int ) int { m := a [ 0 ] ; for _ , x := range a { if x > m { m = x } } ; return m } func minInt ( a ... int ) int { m := a [ 0 ] ; for _ , x := range a { if x < m { m = x } } ; return m } func main ( ) { var k , s int fmt . Scan ( & k , & s ) cnt := 0 for x := 0 ; x <= minInt ( k , s ) ; x ++ { t := s - x if t <= k { cnt + = t + 1 } else if t <= k * 2 { cnt += k - ( t - k ) + 1 } } fmt . Println ( cnt ) }
package main import ( " " " os " " strconv " " strings " " fmt " " " " \n " ) ) Output ( ) }
package main import ( " " " fmt " " io " " os " " strconv " " No " " Yes " " Yes "
package main import ( " " " fmt " " os " " strconv " " strings " " scan string failed " " scan string failed " " "
package main import ( " " " fmt " " io " " math " " os " " strconv " " strings " " getInt ( % d ) "
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) var N , x int64 var arr [ ] int64 func min ( a , b int64 ) int64 { if a < b { return a } return b } func main ( ) { fmt . Scan ( & N , & x ) arr = make ( [ ] int64 , N ) for i := range arr { fmt . Scan ( & arr [ i ] ) } dp := make ( [ ] [ ] int64 , N ) for i := range dp { dp [ i ] = make ( [ ] int64 , N ) } for i := range dp [ 0 ] { dp [ 0 ] [ i ] = arr [ i ] } var ans int64 ans = 1 << 60 for k := int64 ( 0 ) ; k < N ; k ++ { costs := int64 ( 0 ) for i := int64 ( 0 ) ; i < N ; i ++ { if k > 0 { dp [ k ] [ i ] = min ( dp [ k - 1 ] [ i ] , arr [ ( i - k + N ) % N ] ) } costs += dp [ k ] [ i ] } ans = min ( ans , x * k + costs ) } fmt . Println ( ans ) }
package main import " " func main ( ) { xm := make ( map [ int ] bool ) for i := 0 ; i < 4 ; i ++ { var n int fmt . Scan ( & n ) xm [ n ] = true } if xm [ 1 ] && xm [ 9 ] && xm [ 7 ] && xm [ 4 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) var N int func main ( ) { fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " " " YES " " NO "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( n * n * n ) }
package main import " " func main ( ) { var A , B , C int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 7 && b == 5 && c == 5 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 5 && b == 5 && c == 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func round ( f float64 ) float64 { return math . Floor ( f + .5 ) } func main ( ) { var ( N int sum int = 0 result int = 0 ) fmt . Scan ( & N ) X := make ( [ ] int , N ) for i , _ := range X { fmt . Scan ( & X [ i ] ) sum + = X [ i ] } avg := int ( round ( float64 ( sum ) / float64 ( N ) ) ) for _ , x := range X { result += ( x - avg ) * ( x - avg ) } fmt . Println ( result ) }
package main import ( " " " sort " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { arr := make ( [ ] int , 3 ) fmt . Scan ( & arr [ 0 ] , & arr [ 1 ] , & arr [ 2 ] ) sort . Ints ( arr ) ans := 0 for i := range arr { if i + 1 < len ( arr ) { ans + = arr [ i + 1 ] - arr [ i ] } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import ( " " ) func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import ( " " " fmt " " os "
package main import ( " " " errors " " fmt " " io " " math " " os " " strconv " " Scan failed " " % b " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] [ ] int , n ) b := make ( [ ] [ ] int , m ) for i := 0 ; i < n ; i ++ { a [ i ] = make ( [ ] int , n ) var s string fmt . Scan ( & s ) for j := 0 ; j < n ; j ++ { a [ i ] [ j ] = int ( s [ j ] ) } } for i := 0 ; i < m ; i ++ { b [ i ] = make ( [ ] int , m ) var s string fmt . Scan ( & s ) for j := 0 ; j < m ; j ++ { b [ i ] [ j ] = int ( s [ j ] ) } } ok := false for ly := 0 ; ly < n ; ly ++ { for lx := 0 ; lx < n ; lx ++ { if ly + m > n || lx + m > n { continue } match := true for y := 0 ; y < m ; y ++ { for x := 0 ; x < m ; x ++ { if a [ ly + y ] [ lx + x ] != b [ y ] [ x ] { match = false } } } if match { ok = true } } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strings " " 5 " ) = = 2 && strings . Count ( s . Text ( ) , " " ) == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func calc ( n int ) ( m int ) { m = 1 for { if t := m * 2 ; n >= t { m = t } else { break } } return } func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( calc ( n ) ) }
package main import ( " " " os " " Y " " Four " " Three "
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { A := make ( [ ] int , 3 ) fmt . Scan ( & A [ 0 ] , & A [ 1 ] , & A [ 2 ] ) sort . Ints ( A ) ans := A [ 2 ] - A [ 0 ] fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) col := make ( map [ string ] struct { } ) for i := 0 ; i < n ; i ++ { var c string fmt . Scan ( & c ) col [ c ] = struct { } { } } if len ( col ) == 3 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } }
package main import " " func main ( ) { var str1 , str2 , str3 string fmt . Scan ( & str1 , & str2 , & str3 ) fnum := 0 snum := 0 for _ , str := range [ ] string { str1 , str2 , str3 } { if str == " " { fnum ++ } else if str == " " { snum ++ } } if fnum == 2 && snum == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) m := make ( map [ string ] bool , n ) var x string for i := 0 ; i < n ; i ++ { fmt . Scan ( & x ) m [ x ] = true } c := 0 for _ , v := range m { if v { c + + } } if c == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) a := make ( [ ] int , n ) for i := range a { fmt . Scan ( & a [ i ] ) } b := make ( [ ] int , n ) for i := range b { fmt . Scan ( & b [ i ] ) } sumA := 0 for _ , ai := range a { sumA + = ai } sumB := 0 for _ , bi := range b { sumB += bi } if sumA < sumB { fmt . Println ( - 1 ) return } allOver := true for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { allOver = false } } if allOver { fmt . Println ( 0 ) return } var over [ ] int less := 0 count := 0 for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { less + = b [ i ] - a [ i ] count + + } if a [ i ] > b [ i ] { over = append ( over , a [ i ] - b [ i ] ) } } sort . Sort ( sort . Reverse ( sort . IntSlice ( over ) ) ) for _ , oi := range over { less -= oi count + + if less <= 0 { break } } fmt . Println ( count ) }
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if a + b + c == 17 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { A := make ( [ ] int , 6 ) for i := 0 ; i < 6 ; i ++ { fmt . Scanf ( " " , & A [ i ] ) } if A [ 4 ] - A [ 0 ] > A [ 5 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) max := 0 ans := 1 for i := 1 ; i <= n ; i ++ { a := i var cnt int for a > 0 { if a % 2 != 0 { break } a /= 2 cnt + + } if cnt > max { max = cnt ans = i } } fmt . Println ( ans ) }
package main import " " func main ( ) { var n , sum int ; fmt . Scan ( & n ) a := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a [ i ] ) sum += a [ i ] } p := sum / n var min_a , min_b int for i := 0 ; i < n ; i ++ { min_a += ( a [ i ] - p ) * ( a [ i ] - p ) min_b += ( a [ i ] - p - 1 ) * ( a [ i ] - p - 1 ) } if min_a > min_b { fmt . Println ( min_b ) } else { fmt . Println ( min_a ) } }
package main import ( " " " errors " " fmt " " io " " os " " strconv " " Scan failed " " % b " " [ argument error ] : PowInt does not accept negative integers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " math " " sort "
package main import " " func main ( ) { var K , S int fmt . Scan ( & K , & S ) ans := 0 for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if 0 <= Z && Z <= K && X + Y + Z == S { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import " " func main ( ) { var x int fmt . Scanf ( " % d " " % d \n " , x * x * x ) }
package main import ( " " " " ) func main ( ) { var n , result , distance int fmt . Scan ( & n ) nums := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & nums [ i ] ) } sort . Ints ( nums ) for i := 0 ; i < n ; i ++ { result += ( nums [ i ] - nums [ 0 ] ) * ( nums [ i ] - nums [ 0 ] ) } for p := nums [ 0 ] ; p <= nums [ n - 1 ] ; p ++ { for i := 0 ; i < n ; i ++ { distance += ( nums [ i ] - p ) * ( nums [ i ] - p ) } if distance < result { result = distance } distance = 0 } fmt . Println ( result ) }
package main import ( " " " fmt " " math / big " " os " " strconv " " % d % d % d \n " , h , n , w ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " os " " strconv " " fmt " " Yay ! " " : ( "
package main import " " func main ( ) { var k int a := make ( [ ] int , 5 ) for i := range a { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) f := a [ 0 ] for i := 1 ; i < 5 ; i ++ { if a [ i ] - f > k { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " func main ( ) { var c [ 4 ] [ 4 ] int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } var a [ 4 ] int var b [ 4 ] int a [ 1 ] = 0 for i := 1 ; i <= 3 ; i ++ { b [ i ] = c [ 1 ] [ i ] - a [ 1 ] } for i := 2 ; i <= 3 ; i ++ { a [ i ] = c [ i ] [ 1 ] - b [ 1 ] } var flag int for i := 1 ; i <= 3 ; i ++ { for j := 1 ; j <= 3 ; j ++ { if c [ i ] [ j ] != a [ i ] + b [ j ] { flag ++ } } } if flag == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) list := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & list [ i ] ) } count := 0 min := list [ 0 ] for i := 0 ; i < n ; i ++ { if min >= list [ i ] { min = list [ i ] count + + } } fmt . Println ( count ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " sort " " strconv " " YES " " NO "
package main import ( " " " " ) func main ( ) { var n int if _ , err := fmt . Scan ( & n ) ; err != nil { panic ( err ) } n_cube := int ( math . Pow ( float64 ( n ) , 3 ) ) fmt . Println ( n_cube ) }
package main import ( " " " sort " " strings " " No " " Yes " " " " "
package main import " " func main ( ) { var N int _ , _ = fmt . Scan ( & N ) m := map [ string ] int { } for i := 0 ; i < N ; i ++ { var s string _ , _ = fmt . Scan ( & s ) m [ s ] ++ } if len ( m ) == 3 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " NO " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " No " " No " " No " " Yes "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var A , B , H , M int fmt . Scan ( & A , & B , & H , & M ) s := float64 ( 60 * H + M ) / 2 l := float64 ( 6 * M ) angle := math . Abs ( l - s ) if angle > float64 ( 180 ) { angle = float64 ( 360 ) - angle } lh := A sh := B if B > A { lh = B sh = A } cos := math . Cos ( ( angle * math . Pi ) / 180 ) sin := math . Sin ( ( angle * math . Pi ) / 180 ) a := float64 ( sh ) * sin b := float64 ( lh ) - float64 ( sh ) * cos res := math . Sqrt ( a * a + b * b ) fmt . Println ( res ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a == 7 && b == 5 && c == 5 ) || ( a == 5 && b == 7 && c == 5 ) || ( a == 5 && b == 5 && c == 7 ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " math " " os " " strconv " " % .10 f \n " , math . Sqrt ( d ) ) return 0 } func main ( ) { sc := newScanner ( os . Stdin ) wr := bufio . NewWriter ( os . Stdout ) ret := solve ( sc , wr ) wr . Flush ( ) os . Exit ( ret ) } type scanner struct { sc * bufio . Scanner } func newScanner ( input io . Reader ) * scanner { sc := bufio . NewScanner ( input ) sc . Split ( bufio . ScanWords ) sc . Buffer ( make ( [ ] byte , 1024 ) , int ( 1e+9 ) ) return & scanner { sc } } func ( s * scanner ) s ( ) string { s . sc . Scan ( ) return s . sc . Text ( ) } func ( s * scanner ) i ( ) int { i , e := strconv . Atoi ( s . s ( ) ) if e != nil { panic ( e ) } return i } func ( s * scanner ) f ( ) float64 { f , e := strconv . ParseFloat ( s . s ( ) , 64 ) if e != nil { panic ( e ) } return f } func ( s * scanner ) bs ( ) [ ] byte { return [ ] byte ( s . s ( ) ) } func ( s * scanner ) is ( n int ) [ ] int { res := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . i ( ) } return res } func ( s * scanner ) fs ( n int ) [ ] float64 { res := make ( [ ] float64 , n ) for i := 0 ; i < n ; i ++ { res [ i ] = s . f ( ) } return res }
package main import ( " " " math " " Yes " " No "
package main import ( " " " fmt " " os " " strconv " " Y " " Four " " Three "
package main import ( " " " strconv " " % .0 f "
package main import " " func main ( ) { var n int var k int fmt . Scan ( & n ) fmt . Scan ( & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if z >= 0 && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " debug " " . / test / sample - 2.i n " " Error : There is no testfile . "
package main import ( " " " fmt " " io " " os " " strconv " " YES " " NO " \n \r \t " % d "
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) ans := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k && ( x + y + z ) <= 3 * k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) x := make ( [ ] int , n ) mx := 0 for i := 0 ; i < n ; i ++ { fmt . Scan ( & x [ i ] ) if mx < x [ i ] { mx = x [ i ] } } ans := int ( 1e9 ) for p := 1 ; p <= mx ; p ++ { t := 0 for j := 0 ; j < n ; j ++ { p := ( x [ j ] - p ) * ( x [ j ] - p ) t += p } if t < ans { ans = t } } fmt . Println ( ans ) }
package main import ( " " " fmt " " math " " math / cmplx " " os " " strconv " " scan failed " " I " " IronMan " " END_GAME " " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - "
package main import ( " " ) func abs ( n int ) int { if n < 0 { return - n } return n } func checkGrid ( g [ ] [ ] int , a , b [ ] int ) bool { for i , ai := range a { for j , bi := range b { if g [ i ] [ j ] != ai + bi { return false } } } return true } func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { r := make ( [ ] int , 3 ) fmt . Scanf ( " " , & r [ 0 ] , & r [ 1 ] , & r [ 2 ] ) c [ i ] = r } for a1 := 0 ; a1 <= 100 ; a1 ++ { for a2 := 0 ; a2 <= 100 ; a2 ++ { for a3 := 0 ; a3 <= 100 ; a3 ++ { b1 := abs ( a1 - c [ 0 ] [ 0 ] ) b2 := abs ( a2 - c [ 1 ] [ 1 ] ) b3 := abs ( a3 - c [ 2 ] [ 2 ] ) a := [ ] int { a1 , a2 , a3 } b := [ ] int { b1 , b2 , b3 } if checkGrid ( c , a , b ) { fmt . Println ( " " ) return } } } } fmt . Println ( " " ) }
package main import ( " " " math " " : ( " " Yay ! "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " sort " " % d % d % d % d " " YES " " NO "
package main import ( " " ) func main ( ) { var x int fmt . Scanf ( " % d "
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " NO " " YES "
package main import ( " " " fmt " " os " " strconv " " Four " " Three "
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) fmt . Println ( ( h2 - h1 ) * 60 + ( m2 - m1 ) - k ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) } else { fmt . Println ( n - k ) } }
package main import ( " " " bufio " " os " " sort " " strings " " strconv " " YES " " NO " " " ) sort . Strings ( t ) return strings . Join ( t , " " ) } func reverseString ( s string ) string { t := [ ] rune ( s ) for i , j := 0 , len ( s ) - 1 ; i < j ; i , j = i + 1 , j - 1 { t [ i ] , t [ j ] = t [ j ] , t [ i ] } return string ( t ) } func stringRev ( s [ ] byte , l int , r int ) [ ] byte { for i := 0 ; i < ( r - l + 1 ) / 2 ; i ++ { s [ l - 1 + i ] , s [ r - 1 - i ] = s [ r - 1 - i ] , s [ l - 1 + i ] } return s } func inside ( h , w , H , W int ) bool { if h >= 0 && h < H && w >= 0 && w < W { return true } return false }
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scanf ( " % d % d % d " " % d \n " , ans ) }
package main import " " func main ( ) { var n , k int fmt . Scan ( & n , & k ) if k == 1 { fmt . Println ( 0 ) return } fmt . Println ( n - k ) }
package main import ( " " " fmt " " io " " os " " strconv " " strings " " " " Failed to parse string into int . "
package main import " " var N int var P [ ] int func main ( ) { fmt . Scan ( & N ) P = make ( [ ] int , N ) for i := range P { fmt . Scan ( & P [ i ] ) } min := N + 100 ans := 0 for i := range P { if min > P [ i ] { ans + + min = P [ i ] } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " % d " " % s " " Y " " Four " " Three "
package main import ( " " ) func main ( ) { var n , m int fmt . Scan ( & n , & m ) as := make ( [ ] [ ] byte , n ) for i := range as { var b [ ] byte fmt . Scan ( & b ) as [ i ] = b } bs := make ( [ ] [ ] byte , m ) for i := range bs { var b [ ] byte fmt . Scan ( & b ) bs [ i ] = b } var ok bool for i := 0 ; i < n ; i ++ { for j := 0 ; j < n ; j ++ { var ng bool for k := 0 ; k < m ; k ++ { for l := 0 ; l < m ; l ++ { if i + k >= n || j + l >= n { ng = true } else if as [ i + k ] [ j + l ] != bs [ k ] [ l ] { ng = true } } } if ! ng { ok = true } } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv " " YES " " NO "
package main import ( " " " fmt " " io " " os " " strconv " " Yay ! " " : ( "
package main import ( " " " fmt " " os "
package main import " " func main ( ) { c := [ 3 ] [ 3 ] int { } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } x := [ 3 ] int { } y := [ 3 ] int { } x [ 0 ] = 0 for i := 0 ; i < 3 ; i ++ { y [ i ] = c [ 0 ] [ i ] - x [ 0 ] } for i := 0 ; i < 3 ; i ++ { x [ i ] = c [ i ] [ 0 ] - y [ 0 ] } good := true for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if x [ i ] + y [ j ] != c [ i ] [ j ] { good = false } } } if good { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func isMatch ( a , b [ ] string , m , x , y int ) bool { match := true for i := 0 ; i < m ; i ++ { for j := 0 ; j < m ; j ++ { if a [ x + i ] [ y + j ] != b [ i ] [ j ] { match = false } } } return match } func main ( ) { var n , m int fmt . Scan ( & n , & m ) a := make ( [ ] string , n ) b := make ( [ ] string , m ) for i := range a { fmt . Scan ( & a [ i ] ) } for i := range b { fmt . Scan ( & b [ i ] ) } ok := false for i := 0 ; i <= n - m ; i ++ { for j := 0 ; j <= n - m ; j ++ { ok = ok || isMatch ( a , b , m , i , j ) } } if ok { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " " os " " strings " " strconv " " sort " " fmt " " "
package main import ( " " " bufio " " os " " strings " " strconv " " % d " " "
package main import ( " " " fmt " " math " " os " " strconv " " strings " \n " \ t \n " ) slice := strings . Split ( s , " " ) a1 := string ( slice [ 0 ] ) a2 := string ( slice [ 1 ] ) a3 := string ( slice [ 2 ] ) A1 , _ := strconv . Atoi ( a1 ) A2 , _ := strconv . Atoi ( a2 ) A3 , _ := strconv . Atoi ( a3 ) a1a2a3 := abs ( A2 - A1 ) + abs ( A3 - A2 ) a1a3a2 := abs ( A3 - A1 ) + abs ( A2 - A3 ) a2a1a3 := abs ( A1 - A2 ) + abs ( A3 - A1 ) a2a3a1 := abs ( A3 - A2 ) + abs ( A1 - A3 ) a3a1a2 := abs ( A1 - A3 ) + abs ( A2 - A1 ) a3a2a1 := abs ( A2 - A3 ) + abs ( A1 - A2 ) answer := math . MaxInt64 answer = min ( a1a2a3 , a1a3a2 ) answer = min ( answer , a2a1a3 ) answer = min ( answer , a2a3a1 ) answer = min ( answer , a3a1a2 ) answer = min ( answer , a3a2a1 ) fmt . Println ( answer ) }
package main import ( " " " errors " " fmt " " math " " os " " strconv " " strings " " " " " " [ argument error ] : PowInt does not accept negative integers " " [ index error ] " ) ) } n := make ( [ ] int , 0 , len ( s ) - 1 ) n = append ( n , s [ : i ] ... ) n = append ( n , s [ i + 1 : ] ... ) return n } func Concat ( s , t [ ] rune ) [ ] rune { n := make ( [ ] rune , 0 , len ( s ) + len ( t ) ) n = append ( n , s ... ) n = append ( n , t ... ) return n } var k , s int func main ( ) { tmp := NextIntsLine ( ) k , s = tmp [ 0 ] , tmp [ 1 ] answer := 0 for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { answer ++ } } } fmt . Println ( answer ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " fmt " " io " " os " " sort " " strconv " " YES " " NO " \n \r \t
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) countMax := 0 answer := 1 for i := 1 ; i <= n ; i ++ { x := i count := 0 for x % 2 == 0 { x /= 2 count + + } if count > countMax { countMax = count answer = i } } fmt . Println ( answer ) }
package main import ( " " ) var table = make ( [ ] [ ] int , 3 ) func main ( ) { for i := 0 ; i < 3 ; i ++ { column := make ( [ ] int , 3 ) var a , b , c int fmt . Scan ( & a , & b , & c ) column [ 0 ] , column [ 1 ] , column [ 2 ] = a , b , c table [ i ] = column } var a1 , a2 , a3 , b1 , b2 , b3 int ans := false for ; a1 <= 100 ; a1 ++ { b1 = table [ 0 ] [ 0 ] - a1 b2 = table [ 0 ] [ 1 ] - a1 b3 = table [ 0 ] [ 2 ] - a1 a2 = table [ 1 ] [ 0 ] - b1 a3 = table [ 2 ] [ 0 ] - b1 if a2 + b2 == table [ 1 ] [ 1 ] && a2 + b3 == table [ 1 ] [ 2 ] && a3 + b2 == table [ 2 ] [ 1 ] && a3 + b3 == table [ 2 ] [ 2 ] { ans = true break } } if ans { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " " " "
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " YES " " NO " " "
package main import ( " " " " ) func main ( ) { arr := make ( [ ] int , 3 ) fmt . Scan ( & arr [ 0 ] , & arr [ 1 ] , & arr [ 2 ] ) sort . Ints ( arr ) fmt . Println ( arr [ 1 ] - arr [ 0 ] + arr [ 2 ] - arr [ 1 ] ) }
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " math " " os " " strconv " " % .16 f \n " , math . Sqrt ( float64 ( A * A + B * B ) - math . Cos ( absf ( thm - thh ) ) * float64 ( 2 * A * B ) ) ) } } func abs ( a int ) int { if a > 0 { return a } return - a } func absf ( a float64 ) float64 { if a > 0 { return a } return - a } var stdin = initStdin ( ) func initStdin ( ) * bufio . Scanner { bufsize := 1 * 1024 * 1024 var stdin = bufio . NewScanner ( os . Stdin ) stdin . Buffer ( make ( [ ] byte , bufsize ) , bufsize ) stdin . Split ( bufio . ScanWords ) return stdin } func nextString ( ) string { stdin . Scan ( ) return stdin . Text ( ) } func nextBytes ( ) [ ] byte { stdin . Scan ( ) return stdin . Bytes ( ) } func nextInt ( ) int { i , _ := strconv . Atoi ( nextString ( ) ) return i } func nextInt64 ( ) int64 { i , _ := strconv . ParseInt ( nextString ( ) , 10 , 64 ) return i }
package main import ( " " " fmt " " os " " strconv " " Yes " " No "
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := range xs { fmt . Scan ( & xs [ i ] ) } min := int ( 1e9 ) for i := 1 ; i <= 100 ; i ++ { var sum int for j := range xs { d := ( xs [ j ] - i ) sum += d * d } if sum < min { min = sum } } fmt . Println ( min ) }
package main import " " func main ( ) { var num int fmt . Scan ( & num ) fmt . Println ( num * num * num ) }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) P := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & P [ i ] ) } min := P [ 0 ] count := 1 for i := 1 ; i < N ; i ++ { if P [ i ] <= min { min = P [ i ] count += 1 } } fmt . Println ( count ) }
c = ( 1 .. 3 ) . map do gets . chomp . split . map ( & :to_i ) end x = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ i + 1 ] [ j ] - c [ i ] [ j ] == c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] end . all? end . all? y = ( 0 .. 1 ) . map do | i | ( 0 .. 1 ) . map do | j | c [ j + 1 ] [ i ] - c [ j ] [ i ] == c [ j + 1 ] [ i + 1 ] - c [ j ] [ i + 1 ] end . all? end . all? puts x && y ? :Yes : :No
puts ` dd ` . split . uniq . size > 4 ? :Four : :Three
n = STDIN . gets . to_i pn = STDIN . gets . split . map ( & :to_i ) min = pn . first count = 0 pn . each do | i | if i <= min min = i count = count + 1 end end puts count
c11 , c12 , c13 = gets . chomp . split . map ( & :to_i ) c21 , c22 , c23 = gets . chomp . split . map ( & :to_i ) c31 , c32 , c33 = gets . chomp . split . map ( & :to_i ) 0 . upto ( c11 ) do | a1 | a2 = a1 - ( c11 - c21 ) a3 = a1 - ( c11 - c31 ) b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 if [ a2 , a3 , b1 , b2 , b3 ] . all? { | e | e >= 0 && e <= 100 } if a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 puts ' Yes ' exit end end end puts ' No '
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) count = 0 sum = 0 c = [ ] ( 0 ... n ) . each do | i | e = a [ i ] - b [ i ] if e . negative? count += 1 sum += e e = 0 end c . push e end c . sort . reverse . each do | d | break if sum >= 0 sum += d count += 1 end puts count > n ? ' -1 ' : count
gets puts gets =~ / Y / ? :Four : :Three
antenas = 5 . times . map { gets . to_i } k = gets . to_i if antenas . max - antenas . min <= k puts " Yay! " else puts " :( " end
ARG_N = gets . to_i ARG_P = gets . split . map ( & :to_i ) smallest = 2 * ( 10 ** 5 ) + 1 result = 0 ARG_P . each do | x | if x <= smallest smallest = x result += 1 end end puts result
arrays = [ ] 3 . times { | i | arrays << gets . chomp . split ( ' ' ) . map ( & :to_i ) } a = Array . new ( 3 , nil ) b = Array . new ( 3 , nil ) 101 . times do | i | a [ 0 ] = i b [ 0 ] = arrays [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = arrays [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = arrays [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = arrays [ 1 ] [ 1 ] - b [ 1 ] a [ 2 ] = arrays [ 2 ] [ 2 ] - b [ 2 ] next if a . any? { | t | t < 0 } || b . any? { | t | t < 0 } corrects = [ ] 3 . times do | j | 3 . times do | k | corrects << ( arrays [ j ] [ k ] == ( a [ j ] + b [ k ] ) ) end end if corrects . all? puts ' Yes ' exit end end puts ' No '
gets r = gets . to_i - 1 x = 1 $< . each { | _ | e = _ . to_i if e == x + 1 x += 1 elsif e != x r += ( e - 1 ) / ( x + 1 ) end } p r
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end h . delete ( " " ) if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
require ' prime ' n , q = gets . split . map ( & :to_i ) ans = 1 q . prime_division . each { | k , v | ans *= k ** ( v / n ) } p ans
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) num = 0 x = 0 y = [ ] n . times do | i | if a [ i ] < b [ i ] num += 1 x += b [ i ] - a [ i ] else y << a [ i ] - b [ i ] end end if num > 0 y . sort . reverse . each do | z | num += 1 x -= z break if x <= 0 end end if x > 0 puts " -1 " else puts num end
n = gets . to_i array = gets . chop . split . map ( & :to_i ) count = 0 ary = [ ] tmp = 1000000000000000 array . each do | num | if tmp > num tmp = num end if tmp >= num count += 1 end end puts count
grid = Array . new ( 3 ) . map { Array . new ( 3 ) } ( 0 .. 2 ) . each do | i | str = gets . chomp . split ( " " ) . map { | str | str . to_i } grid [ i ] = str end p = Array . new ( ) q = Array . new ( ) r = Array . new ( ) ( 0 .. 2 ) . each do | i | p <<grid [ i ] [ 0 ] - grid [ i ] [ 1 ] q << grid [ i ] [ 1 ] - grid [ i ] [ 2 ] r << grid [ i ] [ 2 ] - grid [ i ] [ 0 ] end flag1 = p [ 0 ] == p [ 1 ] && p [ 1 ] == p [ 2 ] && p [ 0 ] == p [ 2 ] flag2 = q [ 0 ] == q [ 1 ] && q [ 1 ] == q [ 2 ] && p [ 0 ] == p [ 2 ] flag3 = r [ 0 ] == r [ 1 ] && r [ 1 ] == r [ 2 ] && p [ 0 ] == p [ 2 ] if flag1 && flag2 && flag3 then puts " Yes " else puts " No " end
gets puts gets . index ( ' Y ' ) ? " Four " : " Three "
K , S = gets . chomp . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | if 0 <= S - x - y && S - x - y <= K cnt += 1 end end end puts cnt
data = STDIN . read . split ( / \s + / ) . map ( & :to_i ) k , a , b = data . pop , data . shift , data . pop puts ( b - a <= k ) ? ' Yay! ' : ' :( '
gets ; puts gets . split . uniq . size == 3 ? :Three : :Four
require ' matrix ' class Polygon attr_accessor :points def initialize @points = [ ] end end def cross ( p1 , p2 ) return p1 [ 0 ] * p2 [ 1 ] - p1 [ 1 ] * p2 [ 0 ] end poly = Polygon . new gets . to_i . times do x , y = gets . split . map & :to_i point = Vector [ x , y ] poly . points << point end gets . to_i . times do x , y = gets . split . map & :to_i q = Vector [ x , y ] n = 0 on_segment = false poly . points . each_with_index do | v , i | a = poly . points [ i ] - q b = poly . points [ ( i + 1 ) % poly . points . size ] - q if cross ( a , b ) == 0 && a . inner_product ( b ) <= 0 on_segment = true break end a , b = b , a if a [ 1 ] > b [ 1 ] n += 1 if a [ 1 ] <= 0 && b [ 1 ] > 0 && cross ( a , b ) > 0 end if on_segment puts 1 else puts n . odd? ? 2 : 0 end end
N = gets . chomp . to_i a = Array . new ( N ) str = gets . split for i in 0 ... N do a [ i ] = str [ i ] . to_i end answer = 1 min = a [ 0 ] for i in 1 ... N do if a [ i ] < min min = a [ i ] answer += 1 end end puts answer
x = 5 . times . map { gets . to_i } k = gets . to_i puts x [ 4 ] - x [ 0 ] > k ? ' :( ' : ' Yay! '
k , s = gets . split . map ( & :to_i ) cnt = 0 for x in 0 .. k for y in 0 .. k z = s - ( x + y ) if z >= 0 && z <= k && s == x + y + z cnt += 1 end end end puts cnt
antennas = [ ] 5 . times do antennas << STDIN . gets . chomp . to_i end k = STDIN . gets . chomp . to_i flg = true antennas . combination ( 2 ) . to_a . each do | c | if ( c [ 0 ] - c [ 1 ] ) . abs > k flg = false end end if flg puts ' Yay! ' else puts ' :( ' end
arr = [ ] a = [ 0 ] b = [ ] 3 . times do arr << gets . split ( " " ) . map ( & :to_i ) end for i in 0 .. 2 do b << arr [ 0 ] [ i ] - a [ 0 ] end for i in 1 .. 2 do a << arr [ i ] [ 0 ] - b [ 0 ] end for i in 0 .. 2 do for j in 0 .. 2 do unless arr [ i ] [ j ] == a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
a = gets . to_i gets gets gets e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end c = array ( 3 ) 3 . times do | i | c [ i ] = get_i end flag = true 1 . upto ( 100 ) do | a1 | b = array ( 3 ) 3 . times do | i | b [ i ] = c [ 0 ] [ i ] - a1 end flag = true 2 . times do | i | unless c [ i + 1 ] [ 0 ] - b [ 0 ] == c [ i + 1 ] [ 1 ] - b [ 1 ] and c [ i + 1 ] [ 1 ] - b [ 1 ] == c [ i + 1 ] [ 2 ] - b [ 2 ] flag = false break end end if flag break end end puts yn_judge ( flag )
def mydiv ( n , cnt = 0 ) n % 2 == 0 ? mydiv ( n . div ( 2 ) , cnt . next ) : cnt end N = gets . to_i max_cnt = 0 max_n = 1 1 . upto ( N ) do | n | cnt = mydiv ( n ) if max_cnt < cnt max_cnt = cnt max_n = n end end puts max_n
a = 6 . times . map { gets . to_i } if a [ 4 ] - a [ 0 ] > a [ 5 ] puts " :( " else puts " Yay! " end
n = gets . to_i p = gets . split . map ( & :to_i ) min = 10 ** 6 count = 0 n . times do | i | if min > p [ i ] count += 1 min = p [ i ] end end puts count
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ; ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if 0 <= z && z <= k ans = ans + 1 end y = y + 1 end x = x + 1 end puts ( ans )
n = gets . to_i ans = 0 max_val = 0 1 . upto ( n ) do | i | cnt = 1 while i % ( 2 ** cnt ) == 0 cnt += 1 end ans = i if cnt > max_val max_val = cnt if cnt > max_val end puts ans
N = gets . to_i P = gets . chomp . split . map ( & :to_i ) s = 0 m = P [ 0 ] P . each do | p | if p <= m s += 1 m = p end end puts s
grid = [ [ 0 , 0 , 0 , 0 ] ] 3 . times do grid . push ( [ 0 ] + gets . split ( ' ' ) . map ( & :to_i ) ) end a1 = 0 b1 = grid [ 1 ] [ 1 ] - a1 b2 = grid [ 2 ] [ 1 ] - a1 b3 = grid [ 3 ] [ 1 ] - a1 a2 = grid [ 1 ] [ 2 ] - b1 a3 = grid [ 1 ] [ 3 ] - b1 if a2 + b2 == grid [ 2 ] [ 2 ] && a2 + b3 == grid [ 3 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 3 ] && a3 + b3 == grid [ 3 ] [ 3 ] puts ' Yes ' else puts ' No ' end
n = gets . chomp . to_i p_arr = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 min = 9999999999 p_arr . each do | p | if p < min then min = p count += 1 end end puts count
k , s = gets . chomp ( ) . split ( ' ' ) . map ( & :to_i ) answer = 0 for j in 0 .. k do for m in 0 .. k do ncheck = s - j - m if 0 <= ncheck and ncheck <= k answer = answer + 1 end end end puts ( answer )
points = readlines . map ( & :to_i ) dist = points . pop puts points . max - points . min > dist ? ' :( ' : ' Yay! '
c = [ ] 3 . times do c << gets . split . map ( & :to_i ) end if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] && c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] && c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] puts " Yes " else puts " No " end
a = gets . to_i gets gets gets e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
t = 1 ; gets . split . map ( & :to_i ) . zip ( $< ) { | m , x | s = 0 ; x . split . map { | k | s += k . to_i * ~ ( m -= 2 ) } ; t *= s } ; p t . % 10 ** 9 + 7
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ary = [ b , c , d , e ] cnt = 0 ary . each do | x | cnt += 1 if x > ( a + k ) end if cnt == 0 puts " Yay! " else puts " :( " end
w , * v = 0 ; eval ' N,*A= ' + ` dd ` . split * ?, ; c = ( 0 ... N ) . count { | i | d = A [ i + N ] - A [ i ] ; d > 0 ? w += d : ! ( v <<d ) } + v . sort . count { | d | d < w += d } ; p w > 0 ? - 1 : c
k , s = gets . split . map & :to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if x + y <= s && s - x - y <= k end end puts cnt
c = 3 . times . map { gets . chomp . split . map ( & :to_i ) } b = [ ] flag = true 0 . upto ( c [ 0 ] [ 0 ] ) do | k | flag = true a = [ ] a . push ( k ) c [ 0 ] . each { | c | b . push ( c - k ) } a . push ( c [ 1 ] [ 0 ] - b [ 0 ] ) a . push ( c [ 2 ] [ 0 ] - b [ 0 ] ) b . each_with_index do | b , j | a . each_with_index do | a , i | flag = false unless a + b == c [ i ] [ j ] end end break if flag == true end puts flag ? " Yes " : " No "
ary = [ ] 5 . times { ary << gets . to_i } k = gets . to_i if ( ary [ 4 ] - ary [ 0 ] ) > k puts ' :( ' else puts ' Yay! ' end
def aa a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if ( a - b ) . abs <= k and ( a - c ) . abs <= k and ( a - d ) . abs <= k and ( a - e ) . abs <= k and ( b - c ) . abs <= k and ( b - d ) . abs <= k and ( b - e ) . abs <= k and ( c - d ) . abs <= k and ( c - e ) . abs <= k and ( d - e ) . abs <= k puts ' Yay! ' else puts ' :( ' end end aa
n , m , a , b , * d = $< . read . split . map ( & :to_i ) d = d . take_while { | e | e >= a } . reverse d = d . drop_while { | e | e <= b } if n - d . size < m p d . size
Q = ' ?+??+???==??? ' q0 = Q . size . times . select { | i | Q [ i ] == ' ? ' } a = gets . split . map ( & :to_i ) a . each_with_index { | e , i | Q [ q0 [ i ] ] = e . to_s if e != - 1 } q1 = Q . size . times . select { | i | Q [ i ] == ' ? ' } p ( [ * 1 .. 9 ] - a ) . permutation . count { | a | s = Q . dup a . each_with_index { | e , i | s [ q1 [ i ] ] = e . to_s } eval s }
d = readlines . map ( & :to_i ) puts d [ 4 ] - d [ 0 ] <= d [ 5 ] ? " Yay! " : " :( "
n = gets . to_i p = gets . split . map & :to_i min = 200001 r = 0 for i in 0 ... n if min > p [ i ] min = p [ i ] r += 1 end end p r
n , m = gets . chomp . split ( " " ) . map ( & :to_i ) require ' prime ' pr = [ 1 ] if n == 1 puts m exit end Prime . each ( 10 ** 7 ) do | prime | pr . push ( prime ) end pr2 = Array . new ( pr . length , 0 ) for i in 1 .. pr . length - 1 while m % pr [ i ] == 0 m /= pr [ i ] pr2 [ i ] += 1 end if m == 1 break end end if m != 1 pr2 . push ( 1 ) end ans = 1 for i in 1 .. pr2 . length - 1 if pr2 [ i ] >= n ans *= ( pr [ i ] ** ( pr2 [ i ] / n ) ) end end puts ans
lines = readlines . map { | line | line . split ( ' ' ) . map ( & :to_i ) } a = 0 b = lines [ 0 ] [ 0 ] for i in 0 .. lines [ 0 ] [ 0 ] - 1 f = 0 b = b <= lines [ 1 ] [ i ] ? b : lines [ 1 ] [ i ] if b >= lines [ 1 ] [ i ] then a = a + 1 end end puts a
require ' pp ' IS_DEBUG = true def dputs str if ( IS_DEBUG ) puts str end end def dpp str if ( IS_DEBUG ) pp str end end require ' pp ' INT_MAX = 999999999999999999999999 N , M = gets . chomp . split ( ' ' ) . map { | n | n . to_i } X = gets . chomp . split ( ' ' ) . map { | n | n . to_i } . sort Y = gets . chomp . split ( ' ' ) . map { | n | n . to_i } . sort mod = 10 ** 9 + 7 xsum = 0 ysum = 0 X . each_with_index { | x , i | i = i + 1 ; xsum += - ( N - i ) * x + ( i - 1 ) * x } Y . each_with_index { | y , i | i = i + 1 ; ysum += - ( M - i ) * y + ( i - 1 ) * y } puts xsum * ysum % mod
n = gets . strip . to_i nums = gets . strip . split ( " " ) . map ( & :to_i ) min = Float :: INFINITY count = 0 nums . each . with_index do | n , i | if min >= n count += 1 min = n end end puts count
ns = gets . split puts ns . sort . join == " 1479 " ? " YES " : " NO "
n = gets . split . map & :to_i puts n . include? ( 1 ) && n . include? ( 7 ) && n . include? ( 9 ) && n . include? ( 4 ) ? :YES : :NO
N = gets . chomp . to_i S = gets . chomp puts S . include? ( ' Y ' ) ? " Four " : " Three "
data = STDIN . read . split ( / \s + / ) . map ( & :to_i ) k , a , e = data . pop , data . shift , data . pop puts k >= ( e - a ) ? ' Yay! ' : ' :( '
def sub_a ( x , y ) ret = [ ] 3 . times { | i | ret << x [ i ] - y [ i ] } ret end def eq3 ( x , y , z ) x == y && y == z && x == z ? true : false end c = [ ] comp = [ ] 3 . times { c << gets . split . map ( & :to_i ) } comp << sub_a ( c [ 0 ] , c [ 1 ] ) comp << sub_a ( c [ 0 ] , c [ 2 ] ) comp << sub_a ( c [ 1 ] , c [ 2 ] ) d = c . transpose comp << sub_a ( d [ 0 ] , d [ 1 ] ) comp << sub_a ( d [ 0 ] , d [ 2 ] ) comp << sub_a ( d [ 1 ] , d [ 2 ] ) comp . each do | x | unless eq3 ( x [ 0 ] , x [ 1 ] , x [ 2 ] ) puts " No " exit end end puts " Yes "
T1 , T2 , a1 , a2 , b1 , b2 = ` dd ` . split . map & :to_i v1 = a1 - b1 v2 = a2 - b2 if v1 > 0 v1 = - v1 v2 = - v2 end d = v1 * T1 D = d + v2 * T2 if D == 0 puts " infinity " exit end if ( d > 0 ) == ( D > 0 ) p 0 exit end N = ( d . abs - 1 ) / D . abs + 1 p 2 * N + ( N * D . abs + d > 0 ? 0 : 1 ) - 1
a , b , c , d = gets . chomp . split ( ' ' ) . map ( & :to_i ) array = [ a , b , c , d ] . sort if array == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
a , _ , _ , _ , b , k = ( 1 .. 6 ) . map { gets . to_i } puts b - a > k ? ' :( ' : ' Yay! '
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
c = [ ] flag = true 3 . times { | i | c [ i ] = gets . split ( ' ' ) . map ( & :to_i ) } 2 . times { | j | bef = c [ 0 ] [ j + 1 ] - c [ 0 ] [ j ] 2 . times { | i | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i + 1 ] [ j ] != bef } } 2 . times { | i | bef = c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] 2 . times { | j | flag = false if c [ i + 1 ] [ j + 1 ] - c [ i ] [ j + 1 ] != bef } } puts flag ? ' Yes ' : ' No '
n = gets . to_i as = gets . split . map ( & :to_i ) bs = gets . split . map ( & :to_i ) count = 0 goods = [ ] rest = 0 n . times do | i | a = as [ i ] b = bs [ i ] if a < b count += 1 rest += b - a else goods << [ a , b ] end end goods . sort_by! { | a , b | b - a } i = 0 loop do if rest <= 0 p count exit 0 elsif goods . length <= i p - 1 exit 0 end a , b = goods [ i ] rest -= a - b count += 1 i + = 1 end
c0 = gets . chomp . split ( " " ) . map ( & :to_i ) c1 = gets . chomp . split ( " " ) . map ( & :to_i ) c2 = gets . chomp . split ( " " ) . map ( & :to_i ) a01 = c0 [ 0 ] - c0 [ 1 ] a02 = c0 [ 0 ] - c0 [ 2 ] a12 = c0 [ 1 ] - c0 [ 2 ] if c1 [ 0 ] - c1 [ 1 ] != a01 then puts " No " exit end if c1 [ 0 ] - c1 [ 2 ] != a02 then puts " No " exit end if c1 [ 1 ] - c1 [ 2 ] != a12 then puts " No " exit end if c2 [ 0 ] - c2 [ 1 ] != a01 then puts " No " exit end if c2 [ 0 ] - c2 [ 2 ] != a02 then puts " No " exit end if c2 [ 1 ] - c2 [ 2 ] != a12 then puts " No " exit end b01 = c0 [ 0 ] - c1 [ 0 ] b02 = c0 [ 0 ] - c2 [ 0 ] b12 = c1 [ 0 ] - c2 [ 0 ] if c0 [ 1 ] - c1 [ 1 ] != b01 then puts " No " exit end if c0 [ 1 ] - c2 [ 1 ] != b02 then puts " No " exit end if c1 [ 1 ] - c2 [ 1 ] != b12 then puts " No " exit end if c0 [ 2 ] - c1 [ 2 ] != b01 then puts " No " exit end if c0 [ 2 ] - c2 [ 2 ] != b02 then puts " No " exit end if c1 [ 2 ] - c2 [ 2 ] != b12 then puts " No " exit end puts " Yes "
board = Array . new ( 3 ) do gets . split . map ( & :to_i ) end delta = Array . new ( 4 ) do Array . new end 3 . times do | i | 3 . times do | j | if i + 1 < 3 then delta [ i ] << board [ i + 1 ] [ j ] - board [ i ] [ j ] end if j + 1 < 3 then delta [ 2 + j ] << board [ i ] [ j + 1 ] - board [ i ] [ j ] end end end delta . each do | a | if a . uniq . length != 1 then puts " No " exit 0 end end puts " Yes "
K , S = gets . split . map { | i | i . to_i } c = 0 ( 0 .. K ) . each { | x | next if x + K * 2 < S ( 0 .. K ) . each { | y | z = S - x - y next if z > K next if z < 0 c += 1 } } puts c
grids = 3 . times . map { gets . split ( ' ' ) . map ( & :to_i ) } flag = false ( 0 .. grids . max . max ) . each do | i | a1 = i b1 = grids [ 0 ] [ 0 ] - a1 a2 = grids [ 1 ] [ 0 ] - b1 a3 = grids [ 2 ] [ 0 ] - b1 b2 = grids [ 0 ] [ 1 ] - a1 b3 = grids [ 0 ] [ 2 ] - a1 if a1 >= 0 && a2 >= 0 && a3 >= 0 && b1 >= 0 && b2 >= 0 && b3 >= 0 && grids [ 1 ] [ 1 ] == a2 + b2 && grids [ 1 ] [ 2 ] == a2 + b3 && grids [ 2 ] [ 1 ] == a3 + b2 && grids [ 2 ] [ 2 ] == a3 + b3 flag = true puts " Yes " break end end puts " No " unless flag
a = Array . new ( 5 ) 5 . times { | i | a [ i ] = gets . to_i } k = gets . to_i puts k < a [ 4 ] - a [ 0 ] ? " :( " : " Yay! "
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i array = [ a , b , c , d , e ] array . each do | x | array . each do | y | next if x >= y if y - x > k puts ' :( ' exit end end end puts ' Yay! '
a = [ ] 6 . times { | i | a [ i ] = gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && k >= z count += 1 end end end puts count
n = gets . to_i aa = gets . chomp . split ( " " ) . map { | a | a . to_i } bb = gets . chomp . split ( " " ) . map { | a | a . to_i } def counttotaldeficit ( n , a , b ) deficit = 0 j = 0 for i in ( 0 .. n - 1 ) if ( a [ i ] - b [ i ] ) < 0 j += 1 deficit += a [ i ] - b [ i ] end end return [ deficit , j ] end def sort ( n , a , b ) ab = [ ] for i in ( 0 .. n - 1 ) if a [ i ] - b [ i ] > 0 ab . push ( [ a [ i ] , b [ i ] ] ) end end ab . sort_by! { | ary | - ( ary [ 0 ] - ary [ 1 ] ) } return ab end def checker ( n , a , b ) answer = 0 a . each_with_index { | item , index | if item < b [ index ] answer = - 1 break else end } if answer == 0 return answer end array = counttotaldeficit ( n , a , b ) deficit = array [ 0 ] j = array [ 1 ] answer = j ab = sort ( n , a , b ) k = 0 while deficit < 0 if k == ab . size return - 1 end dictance = ab [ k ] [ 0 ] - ab [ k ] [ 1 ] deficit = deficit + dictance answer += 1 k += 1 end return answer end puts checker ( n , aa , bb )
N , * ps = $< . read . split . map ( & :to_i ) min = ps [ 0 ] ret = 0 ps . each do | p | if p <= min ret += 1 min = p end end p ret
eval " N,X,*A= " + ` dd ` . split * ?, p A . map { A = A . zip ( b = A . rotate ) . map & :min b . reduce ( :+ ) + X * ~ - $. += 1 } . min
module HinaArare def solve n = gets . to_i s = gets . split ( " " ) for i in 1 .. n do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare puts HinaArare . solve
k , s = gets . chomp . split . map ( & :to_i ) res = 0 ( 0 .. [ k , s ] . min ) . each do | x | ( 0 .. [ k , s - x ] . min ) . each do | y | res += 1 if s - x - y <= k end end puts res
k , s = gets . strip . split ( ' ' ) . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) if z >= 0 && z <= k count += 1 end end end puts count
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for i in 0 .. k for j in 0 .. k if s - i - j <= k && s - i - j >= 0 count += 1 end end end puts count
a , b , c , d , e , k = readlines . map ( & :to_i ) puts e - a <= k ? " Yay! " : " :( "
N = eval * $< ; ( 1 .. M = 3500 ) . any? { | i | ( i .. M ) . any? { | j | n = 4 * i * j - N * ( i + j ) ; d = N * i * j ; n > 0 && d % n < 1 && $> << [ i , j , d / n ] * ?\s } }
a , b , c , d , e , k = 6 . times . map { gets . to_i } puts e - a <= k ? " Yay! " : " :( "
antainers = ( 1 .. 5 ) . map { gets . to_i } k = gets . to_i if antainers [ - 1 ] - antainers [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
ARGF . each { | line | a = line . split . sort! v = a . join . to_i if v == 1479 puts " YES " else puts " NO " end exit }
gets puts ( gets . split . include? ' Y ' ) ? ' Four ' : ' Three '
g = Array . new ( 3 ) do t = gets . strip . split ( " " ) . map ( & :to_i ) [ t [ 0 ] - t [ 1 ] , t [ 0 ] - t [ 2 ] ] end if g [ 0 ] == g [ 1 ] && g [ 1 ] == g [ 2 ] puts " Yes " else puts " No " end
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if ( 0 .. k ) . include? ( z ) end end puts cnt
def test ( k , s ) cnt = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if 0 <= z and z <= k cnt += 1 end end end puts cnt end input = gets k , s = input . split ( ' ' ) . map { | n | n . to_i } test ( k , s )
a = gets . chomp . split ( " " ) . map ( & :to_i ) if a . include? ( 1 ) && a . include? ( 9 ) && a . include? ( 7 ) && a . include? ( 4 ) puts " YES " else puts " NO " end
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = 0 Ps . each_with_index do | n , i | min = n if ( min == 0 || n <= min ) ans += 1 if min >= n end puts ans
* a , b = ` dd ` . split . map ( & :to_i ) puts a . max - a . min > b ? ' :( ' : ' Yay! '
antennas = 5 . times . map { gets . to_i } k = gets . to_i puts antennas [ 4 ] - antennas [ 0 ] > k ? ' :( ' : ' Yay! '
N = gets . to_i 10 . times do | i | if N < 2 ** ( i + 1 ) puts 2 ** i exit end end
n = gets . to_i puts gets . split . uniq . length == 3 ? " Three " : " Four "
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if z >= 0 && z <= k ans += 1 end y += 1 end x += 1 end puts ans
N = gets . to_i ( 1 .. 3500 ) . each do | a | ( 1 .. 3500 ) . each do | b | next if ( 4 * a * b - N * b - N * a ) < 1 c , m = ( N * a * b ) . divmod ( 4 * a * b - N * b - N * a ) next if m > 0 puts [ a , b , c ] . join ( ' ' ) exit end end
n = gets . to_i ans = [ ] if n >= 2 ( 1 .. 8 ) . each do | i | if n == 2 ans << 2 elsif 2 ** i > n ans << 2 ** ( i - 1 ) end end puts ans . min elsif n == 1 puts 1 else puts 0 end
N = gets . to_i p = gets . chomp . split . map ( & :to_i ) min = 300000 ans = 0 p . each do | i | if i < min min = i ans += 1 end end puts ans
c = 3 . times . map { gets . split . map ( & :to_i ) } if [ 1 , 2 ] . repeated_permutation ( 2 ) . all? { | i , j | c [ i ] [ 0 ] + c [ 0 ] [ j ] == c [ i ] [ j ] + c [ 0 ] [ 0 ] } puts " Yes " else puts " No " end
arr = [ ] 5 . times do | i | arr << gets . to_i end k = gets . to_i sa = arr [ 4 ] - arr [ 0 ] if sa <= k puts " Yay! " else puts " :( " end
N = gets . to_i t = Rational ( 4 , N ) ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | a = N * h * n b = 4 * h * n - N * n - N * h next if b <= 0 next if a < b next if a % b != 0 w = a / b puts [ h , n , w . to_i ] . join ( ' ' ) exit end end
t = [ ] 5 . times do | i | t . push ( gets . chomp . to_i ) end k = gets . chomp . to_i v = t . max - t . min puts v <= k ? ' Yay! ' : ' :( '
def lscan ; gets . split . map ( & :to_i ) ; end puts lscan . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO "
n = gets . to_i p = gets . split . map ( & :to_i ) min_p = 1000000 count = 0 for i in 0 ... n do if p [ i ] <= min_p count += 1 min_p = p [ i ] end end puts count
N = gets . chomp . to_i P = gets . chomp . split . map ( & :to_i ) ans = 1 minV = P [ 0 ] ( 1 . upto ( N - 1 ) ) . each do | i | if ( P [ i ] < minV ) ans += 1 end if ( P [ i ] < minV ) minV = P [ i ] end end p ans
n = gets puts gets . split . uniq . size == 3 ? " Three " : " Four "
k , s = gets . split . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if z . between? ( 0 , k ) count += 1 end end end puts count
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts ( e - a > k ) ? ' :( ' : ' Yay! '
class Node attr_accessor :order , :parent , :child , :edges , :lowest , :visited , :isArticulation def initialize @order = nil @parent = - 1 @child = [ ] @edges = [ ] @lowest = nil @visited = false @isArticulation = false end end def dfs ( root , g ) t = 1 stack = [ ] g [ root ] . order = g [ root ] . lowest = t g [ root ] . visited = true stack << root while stack . size > 0 u = stack [ - 1 ] flag = true g [ u ] . edges . each { | x | if g [ x ] . visited == false t += 1 g [ x ] . order = g [ x ] . lowest = t g [ x ] . visited = true g [ x ] . parent = u g [ u ] . child << x flag = false g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . lowest ] . min stack << x break elsif x != g [ u ] . parent g [ u ] . lowest = [ g [ u ] . lowest , g [ x ] . order ] . min end } if flag stack . pop g [ u ] . child . each { | v | g [ u ] . lowest = [ g [ u ] . lowest , g [ v ] . lowest ] . min g [ u ] . isArticulation = true if ( u != root && g [ u ] . order <= g [ v ] . lowest ) if g [ u ] . order < g [ v ] . lowest if u < v $bridge << [ u , v ] else $bridge << [ v , u ] end end } end end g [ root ] . isArticulation = true if g [ root ] . child . size > 1 end $bridge = [ ] $t = 1 v , e = gets . split . map ( & :to_i ) graph = Array . new ( v ) { Node . new } e . times { s , t = gets . split . map ( & :to_i ) graph [ s ] . edges << t graph [ t ] . edges << s } dfs ( 0 , graph ) $bridge . sort . each { | a , b | puts " }
N = gets . to_i Ss = gets . split . map ( & :to_s ) puts Ss . uniq . count == 3 ? ' Three ' : ' Four '
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end N = get_int P = get_ints min = P [ 0 ] count = 1 P [ 1 .. ] . each do | p | if p <= min min = p count += 1 end end puts count
N = gets . to_i ( 1 .. 3500 ) . each do | h | ( h .. 3500 ) . each do | n | d = 4 * h * n - n * N - h * N next if d <= 0 if h * n * N % d == 0 w = h * n * N / d puts " exit end end end
N = gets . to_i S = gets . split if S . uniq . size == 4 puts ' Four ' else puts ' Three ' end
ary = gets . split . map ( & :to_i ) . sort if ary [ 0 ] == 1 ans = ( ( ary - [ 1 ] ) . reverse ) . insert ( 0 , 1 ) if ans . join . to_i == 1974 puts " YES " else puts " NO " end else puts " NO " end
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) ; min = 10 ** 6 + 1 count = 0 ps . each do | p | if min > p min = p count += 1 end end puts count
arr = Array . new ( 5 ) 5 . times do | i | arr [ i ] = gets . chomp . to_i end k = gets . chomp . to_i puts arr . max - arr . min > k ? " :( " : " Yay! "
css = Array . new ( 3 ) { gets . split . map ( & :to_i ) } ans = [ 0 , 1 ] . all? do | i | Array . new ( 3 ) { | j | css [ i + 1 ] [ j ] - css [ i ] [ j ] } . uniq . size == 1 end puts ans ? ' Yes ' : ' No '
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) ans = ' No ' if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) c . transpose if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) if ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 2 ] ) && ( c [ 0 ] [ 0 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 2 ] ) ans = ' Yes ' end end end end puts ans
A = gets . to_i B = gets . to_i C = gets . to_i D = gets . to_i E = gets . to_i K = gets . to_i if E - A > K puts ' :( ' else puts ' Yay! ' end
c = [ ] while s = gets c . push ( s . split . map ( & :to_i ) ) end if ( c [ 4 ] [ 0 ] - c [ 0 ] [ 0 ] ) <= c [ - 1 ] [ 0 ] puts " Yay! " else puts " :( " end
a = Array . new ( 3 , 0 ) b = Array . new ( 3 , 0 ) c = Array . new ( 3 ) . map { Array . new ( 3 , 0 ) } correct_flag = true 3 . times do | i | c [ i ] = gets . split . map ( & :to_i ) end b [ 0 ] = ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 b [ 1 ] = ( ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 ) - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] b [ 2 ] = ( ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 ) - c [ 1 ] [ 0 ] + c [ 1 ] [ 2 ] a [ 0 ] = c [ 0 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 a [ 1 ] = c [ 1 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 a [ 2 ] = c [ 2 ] [ 0 ] - ( c [ 0 ] [ 0 ] + c [ 1 ] [ 0 ] ) / 2 for i in 0 .. 2 for j in 0 .. 2 if c [ i ] [ j ] != ( a [ i ] + b [ j ] ) correct_flag = false end end end if correct_flag puts " Yes " else puts " No " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) c = Array . new ( n ) { | i | a [ i ] - b [ i ] } . sort m = 0 ans = 0 for i in 0 .. n - 1 break if c [ i ] >= 0 m -= c [ i ] ans += 1 end ( n - 1 ) . downto ( 0 ) do | i | break if m <= 0 m -= c [ i ] ans += 1 end if c . inject ( :+ ) >= 0 puts ans else puts " -1 " end
k , s = $stdin . gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | if s >= x + y && k >= ( s - ( x + y ) ) ans += 1 end end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ans = ' Yay! ' [ a , b , c , d , e ] . each do | x | [ a , b , c , d , e ] . each do | y | if ( x - y ) . abs > k ans = ' :( ' end end end puts ans
( a , b , c , d , e ) = 5 . times . map { | _ | gets . to_i } k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
N = gets . to_i r = 1 while r * 2 <= N r *= 2 end puts r
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if ( a - e ) . abs > k puts ' :( ' else puts ' Yay! ' end
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) x = ( b [ 0 ] - a [ 0 ] ) * t [ 0 ] y = ( b [ 1 ] - a [ 1 ] ) * t [ 1 ] if x + y == 0 puts x == y ? 0 : " infinity " elsif x == 0 || y == 0 || ( x > 0 && x + y > 0 ) || ( x < 0 && x + y < 0 ) puts 0 else s , t = x . abs . divmod ( ( x + y ) . abs ) puts t != 0 ? s * 2 + 1 : s * 2 end
gets a = gets . split . map ( & :to_i ) x = 0 min = a [ 0 ] a . each do | n | if n <= min x += 1 min = n end end puts x
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y ans += 1 if z <= k && z >= 0 end end puts ans
h , r = gets . split ( ' ' ) . map ( & :to_i ) if h + r < 0 puts - 1 elsif h + r == 0 puts 0 else puts 1 end
c = [ ] while s = gets c . push ( s . split . map ( & :to_i ) ) end if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] ) != ( c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ) puts " No " exit elsif ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ) || ( c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] ) != ( c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ) puts " No " exit elsif ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] ) || ( c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] ) != ( c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] ) puts " No " exit elsif ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] ) || ( c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] ) != ( c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ) puts " No " exit end puts " Yes "
k , s = gets . split . map & :to_i ; v = 0 ; ( g = ( 0 .. k ) ) . each { | x | g . each { | y | r = s - x - y ; k >= r && r >= 0 && v += 1 } } ; p v
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a > k puts " :( " else puts " Yay! " end
c = [ ] 3 . times do c . push gets . chomp . split ( ) . map ( & :to_i ) end x = Array . new ( 3 ) y = Array . new ( 3 ) x [ 0 ] = 0 3 . times do | i | y [ i ] = c [ i ] [ 0 ] end 3 . times do | i | x [ i ] = c [ 0 ] [ i ] - y [ 0 ] end 1 . upto ( 2 ) . each do | i | 1 . upto ( 2 ) . each do | j | if c [ i ] [ j ] != y [ i ] + x [ j ] puts ' No ' exit end end end puts ' Yes '
lines = [ ] while line = gets lines << line . chomp . split ( ' ' ) . map ( & :to_i ) end N = lines [ 0 ] [ 0 ] min = 100000000000000000000 answer = 0 for i in 1 .. N do if lines [ 1 ] [ i - 1 ] <= min then answer += 1 min = lines [ 1 ] [ i - 1 ] end end print answer
array = gets . split . map ( & :to_i ) def factorization ( m ) ary = [ ] s = Math . sqrt ( m . to_f ) . to_i for i in ( 2 .. s ) r = 0 while m % i == 0 m = m / i r += 1 end unless r == 0 ary . push ( [ i , r ] ) end end if ( m > s ) ary . push ( [ m , 1 ] ) end return ary end n = array [ 0 ] p = array [ 1 ] factor_s = factorization ( p ) ans = 1 factor_s . each { | fs | while fs [ 1 ] >= n ans *= fs [ 0 ] fs [ 1 ] -= n end } p ans
k , s = gets . split . map ( & :to_i ) x = 0 y = 0 z = 0 ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | break if x + y > s ans += 1 if x + y + k >= s end end puts ans
eval " N,X,*A= " + ` dd ` . split * ?, p A . map { A = A . zip ( b = A . rotate ) . map & :min b . sum + X * ~ $. -= 1 } . min
_ = $stdin . gets kinds = $stdin . gets . chomp . split ( ' ' ) . uniq . length print kinds == 3 ? ' Three ' : ' Four '
array = [ ] array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i array << gets . chomp . to_i k = gets . chomp . to_i combinations = array . combination ( 2 ) . to_a combinations . each do | c | if c [ 0 ] > c [ 1 ] then dist = c [ 0 ] - c [ 1 ] else dist = c [ 1 ] - c [ 0 ] end if dist > k then puts " :( " exit ( ) end end puts " Yay! "
n = gets . to_i ps = gets . split . map & :to_i ps = ps . map . with_index { | x , i | [ x , i ] } . sort { | a , b | a [ 0 ] <=> b [ 0 ] } count = 0 memo = n ps . each { | p | if p [ 1 ] < memo then count += 1 memo = p [ 1 ] end } puts count
a = STDIN . gets ( ) . to_i b = STDIN . gets ( ) . to_i c = STDIN . gets ( ) . to_i d = STDIN . gets ( ) . to_i e = STDIN . gets ( ) . to_i k = STDIN . gets ( ) . to_i if ( e - a ) <= k puts " Yay! " else puts " :( " end
n , p = gets . chomp . split ( " " ) . map ( & :to_i ) number = 2 if ( n == 1 ) puts p else divisionNumber = 1 loop do temp_number_n = number ** n divisionNumber = number if ( p % temp_number_n == 0 ) if ( ( p % temp_number_n == 0 || ( p % temp_number_n != 0 && p > temp_number_n ) ) ) number += 1 else break end end puts divisionNumber end
k , s = gets . split . map & :to_i w = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y w += 1 if z . between? ( 0 , k ) end end puts w
antennas = Array . new ( 5 ) do gets . chomp . to_i end k = gets . chomp . to_i max_diff = antennas . combination ( 2 ) . map { | a , b | ( a - b ) . abs } . sort . max if max_diff <= k puts ' Yay! ' else puts ' :( ' end
a = gets ( ) . to_i b = gets ( ) . to_i c = gets ( ) . to_i d = gets ( ) . to_i e = gets ( ) . to_i k = gets ( ) . to_i flag = true arr = [ a , b , c , d , e ] 0 . upto ( 3 ) { | i | ( i + 1 ) . upto ( 4 ) { | j | flag = false if arr [ j ] - arr [ i ] > k } } puts ( flag ? " Yay! " : " :( " )
n = gets . to_i S = gets . chomp . to_s if S . include? ( " P " ) && S . include? ( " W " ) && S . include? ( " G " ) && S . include? ( " Y " ) puts " Four " else puts " Three " end
a = gets . split . map ( & :to_i ) . sort . uniq if a . size == 4 && ( a - [ 1 , 9 , 7 , 4 ] ) == [ ] puts " YES " else puts " NO " end
a = 5 . times . map { gets . to_i } k = gets . to_i if a [ 4 ] - a [ 0 ] <= k then puts " Yay! " else puts " :( " end
k , s = gets . split . map & :to_i ; p [ * 0 .. k ] . repeated_permutation ( 2 ) . count { | x , y | z = s - x - y ; 0 <= z && z <= k }
n = gets . to_i a = gets . split . map & :to_i m = a [ 0 ] p a . count { | x | t = x <= m m = x if x < m t }
n = gets . chomp . to_i res = 1 while res <= n do break if res * 2 > n res = res * 2 end print res
N = gets . to_i ( 1 .. 3500 ) . each do | a | ( 1 .. 3500 ) . each do | b | next if ( 4 * a * b - N * b - N * a ) . zero? c , m = ( N * a * b ) . divmod ( 4 * a * b - N * b - N * a ) next if m > 0 || c <= 0 puts [ a , b , c ] . join ( ' ' ) exit end end
class Main def self . main min = 123 max = 0 5 . times do a = read min = a if a < min max = a if a > max end k = read puts max - min <= k ? ' Yay! ' : ' :( ' end def self . read gets . chomp . to_i end end Main . main
x = ( 1 .. 5 ) . map { | e | gets . to_i } k = gets . to_i puts x [ 4 ] - x [ 0 ] > k ? ' :( ' : ' Yay! '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
require ' prime ' N , P = gets . chomp . split . map ( & :to_i ) prime_div = P . prime_division if prime_div . count == 0 puts 1 else ans = 1 prime_div . each do | a | n = a [ 1 ] / N if n >= 1 n . times do ans *= a [ 0 ] end end end puts ans end
r = [ ] res = " Yay! " 5 . times do | i | r << gets . to_i end k = gets . to_i for i in 0 .. 4 for j in 0 .. 4 if ( r [ i ] - r [ j ] ) . abs > k res = " :( " end end end puts res
module HinaArare def solve ( s ) for i in 1 .. s . size do if s [ i ] == ' Y ' return ' Four ' end end return ' Three ' end end include HinaArare gets s = gets . split ( " " ) puts solve ( s )
count = 0 ans = 0 xmax , num = gets . split . map & :to_i preans = 0 for i in 0 .. xmax jmax = [ num - i , xmax ] . min for j in 0 .. jmax if num - i - j >= 0 && num - i - j <= xmax then ans += 1 end end end puts ans
require ' pp ' def gets_i_list ( ) gets . chomp . split ( " " ) . map ( & :to_i ) end b = [ ] b . push ( gets_i_list ) b . push ( gets_i_list ) b . push ( gets_i_list ) b . each_with_index do | row , i | b1 , b2 , b3 = row bb1 , bb2 , bb3 = b [ i - 1 ] if b1 - bb1 == b2 - bb2 && b2 - bb2 == b3 - bb3 && b1 - bb1 == b3 - bb3 else puts " No " exit end end puts " Yes "
gets a , c = 0 , 1 $< . each { | s | i = s . to_i a += ( i - 1 ) / c c += 1 if c == 1 || i == c } p a
char = gets arr = char . split ( ' ' ) arr . sort! if arr [ 0 ] . to_i == 1 && arr [ 1 ] . to_i == 4 && arr [ 2 ] . to_i == 7 && arr [ 3 ] . to_i == 9 puts ' YES ' else puts ' NO ' end
n = gets . to_i as = gets . split . map & :to_i bs = gets . split . map & :to_i asum = as . sum bsum = bs . sum if asum < bsum puts - 1 exit end pos = [ ] neg = 0 cnt = 0 as . zip ( bs ) do | ( a , b ) | c = a - b if c < 0 neg += c cnt += 1 elsif c > 0 pos << c end end pos = pos . sort . reverse while neg < 0 neg += pos . shift cnt += 1 end p cnt
puts ( gets . split . sort * ' ' == " 1479 " ? " YES " : " NO " )
C = Array . new ( 3 ) { gets . split . map ( & :to_i ) } Y = [ 0 ] X = C [ 0 ] Y [ 1 ] = C [ 1 ] [ 0 ] - X [ 0 ] Y [ 2 ] = C [ 2 ] [ 0 ] - X [ 0 ] answer = true for i in 1 .. 2 for j in 1 .. 2 if C [ i ] [ j ] != X [ j ] + Y [ i ] answer = false end end end puts answer ? " Yes " : " No "
n = gets . chomp . split puts n . permutation ( 4 ) . any? { | a , b , c , d | a + b + c + d == " 1794 " } ? :YES : :NO
n = gets . to_i s = gets . gsub ( " " , " " ) puts s [ " Y " ] ? " Four " : " Three "
ret = 0 k , s = gets . split . map ( & :to_i ) for i in 0 .. k for j in 0 .. k ret += 1 if s - j - i <= k && s - j - i >= 0 end end puts ret
K , S = gets . split . map ( & :to_i ) count = 0 ( K + 1 ) . times do | x | ( K + 1 ) . times do | y | z = S - x - y count += 1 if z >= 0 && z <= K end end puts count
k , s = gets . split . map ( & :to_i ) cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | f . upto ( k ) do | y | cnt += 1 if 0 <= s - x - y && s - x - y <= k end end p cnt
n = gets . to_i def create_array ( n , ary ) return ary [ n ] = 1 if n == 0 ary [ n ] = create_array ( n - 1 , ary ) * 2 ary [ n ] end ary = [ ] create_array ( 7 , ary ) ary . each_cons ( 2 ) { | a , b | puts a if ( a ... b ) . include? ( n ) }
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i isok = ( ( [ a , b , c , d , e ] . max ( ) - [ a , b , c , d , e ] . min ( ) ) <= k ) if isok puts " Yay! " else puts " :( " end
k , s = gets . strip . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } puts ans
require ' prime ' n , x = gets . split . map ( & :to_i ) a = Prime . prime_division ( x ) ans = 1 a . each do | p , c | if n <= c ans *= p ** ( c / n ) end end puts ans
a = ( gets ) . to_i b = ( gets ) . to_i c = ( gets ) . to_i d = ( gets ) . to_i e = ( gets ) . to_i k = ( gets ) . to_i antenas = [ a , b , c , d , e ] chk = true antenas . combination ( 2 ) do | p , q | if ( p - q ) . abs > k then chk = false break end end if chk then puts " Yay! " else puts " :( " end
n = gets . chomp . split . map ( & :to_i ) . sort! x = " 1 9 7 4 " . chomp . split . map ( & :to_i ) . sort! if n == x then puts " YES " else puts " NO " end
N , M = gets . split . map & :to_i Mod = 10 ** 9 + 7 Xs = gets . split . map ( & :to_i ) Ys = gets . split . map ( & :to_i ) xx = ( 0 ... N - 1 ) . map { | i | Xs [ i + 1 ] - Xs [ i ] } yy = ( 0 ... M - 1 ) . map { | i | Ys [ i + 1 ] - Ys [ i ] } x = ( 0 ... xx . size ) . reduce ( 0 ) { | a , i | b = ( i + 1 ) * ( xx . size - i ) % Mod * xx [ i ] % Mod ( a + b ) % Mod } y = ( 0 ... yy . size ) . reduce ( 0 ) { | a , i | b = ( i + 1 ) * ( yy . size - i ) % Mod * yy [ i ] % Mod ( a + b ) % Mod } p x * y % Mod
N = gets . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 min = P [ 0 ] P . each_with_index do | x , i | if i == 0 count += 1 elsif min >= x min = x count += 1 end end puts "
n = gets . chomp . to_i s = gets . chomp . split ( " " ) count = 0 arr = Float :: INFINITY n . times do | i | mokuteki = s [ i ] arr = [ mokuteki . to_i , arr ] . min if mokuteki . to_i <= arr count += 1 end end puts count
N = gets . to_i x = 3500 1 . upto ( x ) do | i | i . upto ( x ) do | j | r = Rational ( 4 * i * j - N * j - N * i , N * i * j ) if r . numerator == 1 puts [ i , j , r . denominator ] . join ( ' ' ) exit end end end
require ' prime ' n , q = gets . split . map & :to_i ret = 1 ps = Prime . prime_division ( q ) ps . each { | a | if a [ 1 ] >= n ( a [ 1 ] / n ) . times { ret *= a [ 0 ] } end } p ret
N , P = gets . split . map & :to_i require ' prime ' c = 1 Prime . prime_division ( P ) . each { | x | if x [ 1 ] >= N then c *= x [ 0 ] ** ( x [ 1 ] / N ) end } p c
n = gets . to_i size = gets . split . uniq . size puts size == 4 ? ' Four ' : ' Three '
k , s = gets . split . map! ( & :to_i ) if 3 * k < s then puts 0 elsif 3 * k == s puts 1 else ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | break if x + y > s ans += 1 if s - x - y <= k end end puts ans end
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) x1 = ( a1 - b1 ) * t1 x2 = ( a2 - b2 ) * t2 if ( x1 > 0 ) ^ ( x2 > 0 ) then x1 , x2 = - x1 , - x2 if x1 < 0 sub = - ( x1 + x2 ) if sub == 0 then puts " infinity " elsif sub < 0 puts 0 else ans = ( x1 / sub ) * 2 ans += ( x1 % sub == 0 ) ? 0 : 1 puts ans end else puts 0 end
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
N = gets . to_i P = gets . split . map ( & :to_i ) ans = 0 min = P [ 0 ] P . each do | pi | if pi <= min ans += 1 min = pi end end puts ans
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) counter = 0 b = a . max n . times do | i | if b >= a [ i ] counter += 1 b = a [ i ] end end p counter
require ' pp ' n = gets . chomp! . to_i s_n = gets . chomp! . split ( " " ) puts s_n . group_by { | s | s } . length == 4 ? ' Four ' : ' Three '
a = STDIN . gets . to_i 3 . times { | _ | STDIN . gets } e = STDIN . gets . to_i k = STDIN . gets . to_i if e - a > k STDOUT . puts ' :( ' else STDOUT . puts ' Yay! ' end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts k >= e - a ? ' Yay! ' : ' :( '
n = gets . to_i if n == 1 puts n exit end ary = [ 2 ] 6 . times { ary << ary [ - 1 ] * 2 } ary . each_cons ( 2 ) do | a , b | if ( a ... b ) . include? ( n ) puts a exit end end
def ascan ; gets . split . map ( & :to_i ) ; end field = ( 0 .. 2 ) . map { ascan } ok = true 2 . times do | y | 2 . times do | x | ok &= field [ y ] [ x + 1 ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y + 1 ] [ x ] end end 2 . times do | x | 2 . times do | y | ok &= field [ y + 1 ] [ x ] - field [ y ] [ x ] == field [ y + 1 ] [ x + 1 ] - field [ y ] [ x + 1 ] end end puts ok ? " Yes " : " No "
n = 5 . times . map { gets . to_i } k = gets . to_i a = n . max b = n . min puts ( a - b ) > k ? ' :( ' : ' Yay! '
ns = gets . chomp! . split ( " " ) ns = ns . map { | item | item = item . to_i } if ns . sort == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
def f c c . map! { | d | m = d . min d . map { | t | t -= m } } end c = 3 . times . map { gets . split . map & :to_i } c = f c c = f c . transpose puts ( c . all? { | d | d . all? { | t | t == 0 } } ) ? ' Yes ' : ' No '
a = gets . to_i for i in 1 .. 3 ; gets ; end e = gets . to_i k = gets . to_i puts e - a <= k ? ' Yay! ' : ' :( '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a <= k puts " Yay! " else puts " :( " end
k , s = gets . split . map & :to_i ; p ( 0 ... ( k += 1 ) * k ) . count { | i | z = s - i % k - i / k ; 0 <= z && z < k }
n = gets . to_i puts ( 0 .. 6 ) . map { | i | 2 ** i } . select { | i | i <= n } . max
c = [ ] for i in 0 .. 2 c [ i ] = gets . strip . split . map ( & :to_i ) end a_1 = 0 b_1 = c [ 0 ] [ 0 ] b_2 = c [ 0 ] [ 1 ] b_3 = c [ 0 ] [ 2 ] a_2 = c [ 1 ] [ 0 ] - b_1 a_3 = c [ 2 ] [ 0 ] - b_1 if a_2 + b_2 == c [ 1 ] [ 1 ] && a_2 + b_3 == c [ 1 ] [ 2 ] && a_3 + b_2 == c [ 2 ] [ 1 ] && a_3 + b_3 == c [ 2 ] [ 2 ] puts ' Yes ' else puts ' No ' end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i x = [ a , b , c , d , e ] for y in 0 .. 3 if x [ 4 - y ] - x [ 0 ] > k puts " :( " exit end end puts " "
* a , k = $< . map & :to_i ; puts a . max - a . min > k ? " :( " : " Yay! "
n , m , a , b , * d = $< . read . split . map ( & :to_i ) d = d . take_while { | e | e >= a } . reverse d = d . drop_while { | e | e <= b } if n - d . size < m p d . size
N = gets . to_i S = gets . split if S . uniq . size == 3 puts " Three " else puts " Four " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) count = 0 x , y = a . zip ( b ) . map { | i , j | j - i } . partition { | e | e > 0 } count += x . size ( puts 0 ; exit ) if count == 0 sum = x . inject ( :+ ) y . sort . each do | i | sum += i count += 1 ( puts count ; exit ) if sum <= 0 end puts - 1
c = Array . new ( 3 ) { gets . chomp . split . map ( & :to_i ) } a = Array . new ( 3 , 0 ) b = Array . new ( 3 , 0 ) 0 . step ( 2 ) do | j | i = j b [ j ] = c [ 0 ] [ j ] - a [ 0 ] a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end 0 . step ( 2 ) do | i | 0 . step ( 2 ) do | j | if c [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
puts gets . chomp . chars . sort . uniq . join == " 1479 " ? :YES : :NO
input = readlines input . each { | num | num = num . chomp! } i = 0 stat = " 0 " while i < ( input . length - 1 ) j = i + 1 while j < ( input . length - 1 ) dis = input [ j ] . to_i - input [ i ] . to_i if dis > input [ input . length - 1 ] . to_i stat = " :( " elsif stat != " :( " stat = " Yay! " end j = j + 1 end i = i + 1 end print stat
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | a | ( 0 .. k ) . each do | b | z = s - ( a + b ) cnt += 1 if a + b + z == s && z >= 0 && z <= k end end p cnt
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
a = gets . split ; puts $< . all? { | s | s . split . zip ( a ) . map { | t | eval t * " - " } . uniq . size < 2 } ? :Yes : :No
n , x = gets . chomp . split . map ( & :to_i ) cost = gets . chomp . split . map ( & :to_i ) mins = Array . new ( n ) { Array . new ( n ) } n . times { | i | min = nil n . times { | j | min = cost [ i - j ] if min . nil? || min > cost [ i - j ] mins [ j ] [ i ] = min } } min = nil n . times { | i | val = mins [ i ] . inject ( :+ ) + i * x min = val if min . nil? || min > val } puts min
board = 3 . times . map { gets . split . map ( & :to_i ) } horizontal_diff_list = [ board [ 0 ] [ 0 ] - board [ 0 ] [ 1 ] , board [ 0 ] [ 1 ] - board [ 0 ] [ 2 ] ] vertical_diff_list = [ board [ 0 ] [ 0 ] - board [ 1 ] [ 0 ] , board [ 1 ] [ 0 ] - board [ 2 ] [ 0 ] ] horizontal_ok = ( 1 .. 2 ) . all? do | i | [ board [ i ] [ 0 ] - board [ i ] [ 1 ] , board [ i ] [ 1 ] - board [ i ] [ 2 ] ] == horizontal_diff_list end vertical_ok = ( 1 .. 2 ) . all? do | j | [ board [ 0 ] [ j ] - board [ 1 ] [ j ] , board [ 1 ] [ j ] - board [ 2 ] [ j ] ] == vertical_diff_list end ans = horizontal_ok && vertical_ok ? ' Yes ' : ' No ' puts ans
a = 3 . times . map { gets . split . map ( & :to_i ) } . sort . transpose . sort . transpose yes = 2 . times . all? do a = a . transpose 2 . times . all? do | i | a [ i ] [ 1 ] - a [ i ] [ 0 ] == a [ i + 1 ] [ 1 ] - a [ i + 1 ] [ 0 ] && a [ i ] [ 2 ] - a [ i ] [ 1 ] == a [ i + 1 ] [ 2 ] - a [ i + 1 ] [ 1 ] end end puts yes ? " Yes " : " No "
k , s = gets . split . map ( & :to_i ) ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | ans += 1 if 0 <= s - x - y && s - x - y <= k end end puts ans
* a , k = ` dd ` . split . map & :to_i a . sort! if a [ 4 ] - a [ 0 ] > k puts " :( " else puts " Yay! " end
i = readlines . map ( & :chomp ) v = i . map ( & :to_i ) if v [ 4 ] - v [ 0 ] <= v [ 5 ] puts " Yay! " else puts " :( " end
n = gets . to_i as = gets . split . map ( & :to_i ) bs = gets . split . map ( & :to_i ) if as . inject ( :+ ) < bs . inject ( :+ ) puts - 1 exit end ans = 0 short = 0 amari = [ ] ( 0 .. n - 1 ) . each do | i | if as [ i ] < bs [ i ] ans += 1 short += bs [ i ] - as [ i ] else amari << as [ i ] - bs [ i ] end end amari . sort! while short > 0 do short -= amari . pop ans += 1 end puts ans
n = gets . to_i ans = 1 0 . upto ( 6 ) do | i | ans = 2 ** i if 2 ** i <= n end puts ans
K , S = gets . split . map ( & :to_i ) puts [ * 0 .. K ] . repeated_permutation ( 2 ) . count { | x , y | ( S - x - y ) . between? ( 0 , K ) }
a = 6 . times . map { gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
k , s = gets . split . map ( & :to_i ) ks = 0 .. k ns = ks . to_a c = 0 ns . product ( ns ) { | x , y | c += 1 if ks . include? ( s - x - y ) } p c
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) d = Array . new ( n , 0 ) n . times { | i | d [ i ] = a [ i ] - b [ i ] } d . sort! i = 0 j = n - 1 c = 0 while d [ i ] < 0 if d [ i ] + c >= 0 c += d [ i ] i += 1 elsif d [ j ] < 0 puts - 1 exit else c += d [ j ] j -= 1 end end puts i + n - j - 1
puts ( gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO " )
_ = gets s = gets . chomp . split hs = Hash . new ( 0 ) s . each do | c | hs [ c ] += 1 end kind = hs . keys . size if kind == 3 puts " Three " elsif kind == 4 puts " Four " end
INF = 1 << 30 DXYS = [ [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] , [ 0 , 1 ] ] loop do w , h = gets . split . map ( & :to_i ) break if ( w | h ) == 0 wh = w * h tls = wh . times . map { 0 } ndtl = 0 spos = nil for y in ( 0 ... h ) line = gets . strip for x in ( 0 ... w ) pos = y * w + x case line [ x ] when ' * ' ndtl += 1 tls [ pos ] = ndtl when ' x ' tls [ pos ] = - 1 when ' o ' spos = pos end end end dbits = ( 1 << ndtl ) - 1 dists = wh . times . map { ( dbits + 1 ) . times . map { INF } } dists [ spos ] [ dbits ] = 0 q = [ [ spos , dbits ] ] min_dist = INF while ! q . empty? upos , ubits = q . shift ud = dists [ upos ] [ ubits ] if ubits == 0 min_dist = ud if min_dist > ud next end ux = upos % w uy = upos / w DXYS . each do | dx , dy | vx = ux + dx vy = uy + dy vpos = vy * w + vx if vx >= 0 && vx < w && vy >= 0 && vy < h && tls [ vpos ] >= 0 vbits = ubits if tls [ vpos ] > 0 vbits &= ~ ( 1 << ( tls [ vpos ] - 1 ) ) end vd = ud + 1 if dists [ vpos ] [ vbits ] > vd dists [ vpos ] [ vbits ] = vd q << [ vpos , vbits ] end end end end puts ( min_dist >= INF ? - 1 : min_dist ) end
array = readlines . map ( & :to_i ) if array [ 4 ] - array [ 0 ] > array [ 5 ] puts ' :( ' else puts ' Yay! ' end
N = gets . to_i P = gets . chomp . split ( ' ' ) . map { | n | n . to_i } count = 0 min = - 1 0 . upto ( P . size - 1 ) do | i | if min == - 1 || min >= P [ i ] min = P [ i ] count = count + 1 end end puts count
k , s = gets . split ( ' ' ) . map ( & :to_i ) a = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y a += 1 if z . between? ( 0 , k ) end end puts a
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) asum = a . inject ( :+ ) bsum = b . inject ( :+ ) if asum < bsum p - 1 exit end dif = asum - bsum w = [ ] n . times { | i | if a [ i ] >= b [ i ] w << a [ i ] - b [ i ] end } w . sort! w . each { | t | dif -= t n -= 1 if dif >= 0 } p n
a , b , c , d , e , k = 6 . times . map { gets . to_i } puts ( e - a > k ) ? " :( " : " Yay! "
puts * $< . drop ( 1 ) . first . split . uniq . length == 3 ? " Three " : " Four "
n = gets . to_i ss = gets . chomp . split x = ss . uniq . size if x == 3 puts ( " Three " ) else puts ( " Four " ) end
a = [ ] for i in 0 .. 4 a [ i ] = gets . chomp . to_i end k = gets . chomp . to_i t = true for i in 0 .. 4 for j in 0 .. 4 if ( a [ i ] - a [ j ] ) . abs > k puts " :( " t = false break end end break unless t end if t puts " Yay! " end
s = gets . to_i n = gets . chomp . split n = n . uniq if n . length == 3 puts " Three " else puts " Four " end
input = gets . chomp . split ( " " ) K = input [ 0 ] . to_i S = input [ 1 ] . to_i X = Y = ( 0 .. K ) . to_a c = 0 X . each do | tx | s1 = S - tx if s1 > ( 2 * K ) then next end Y . each do | ty | s2 = s1 - ty if ( s2 > K || s2 < 0 ) then next end c += 1 end end puts c
t1 , t2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) da1 = t1 * a1 db1 = t1 * b1 df1 = da1 - db1 da2 = t2 * a2 db2 = t2 * b2 df2 = da2 - db2 if df1 > 0 df1 *= - 1 df2 *= - 1 end if df1 + df2 == 0 puts " infinity " elsif df1 + df2 < 0 puts 0 else s = - 1 * df1 / ( df1 + df2 ) t = ( - 1 * df1 ) % ( df1 + df2 ) if t == 0 ans = s * 2 else ans = s * 2 + 1 end end puts ans
n = gets . to_i p_input = gets . chomp . split n . times do | i | p_input [ i ] = p_input [ i ] . to_i end count = 0 min = p_input [ 0 ] n . times do | i | result = true min = p_input [ i ] if p_input [ i ] < min result = false if ! ( p_input [ i ] <= min ) count += 1 if result end puts count
a = gets . to_i 3 . times { | k | tmp = gets } b = gets . to_i diff = gets . to_i puts b - a > diff ? " :( " : " Yay! "
def array_sub ( left , right ) res = [ ] left . each_with_index do | num , i | res << num - right [ i ] end res end def contains_one ( array ) array . all? { | num | num == array [ 0 ] } end c1 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c2 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c3 = STDIN . gets . split ( ' ' ) . map ( & :to_i ) c_1 = [ c1 [ 0 ] , c2 [ 0 ] , c3 [ 0 ] ] c_2 = [ c1 [ 1 ] , c2 [ 1 ] , c3 [ 1 ] ] c_3 = [ c1 [ 2 ] , c2 [ 2 ] , c3 [ 2 ] ] subs = [ ] subs << array_sub ( c1 , c2 ) subs << array_sub ( c2 , c3 ) subs << array_sub ( c_1 , c_2 ) subs << array_sub ( c_2 , c_3 ) if subs . all? { | array | contains_one ( array ) } puts ' Yes ' else puts ' No ' end
k , s = gets . split ( ' ' ) . map { | i | i . to_i } ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k ans += 1 end end end puts ans
grid = readlines . map { | line | line . chomp . split . map ( & :to_i ) } d1 = grid [ 0 ] [ 0 ] - grid [ 1 ] [ 0 ] d2 = grid [ 0 ] [ 1 ] - grid [ 1 ] [ 1 ] d3 = grid [ 0 ] [ 2 ] - grid [ 1 ] [ 2 ] d4 = grid [ 1 ] [ 0 ] - grid [ 2 ] [ 0 ] d5 = grid [ 1 ] [ 1 ] - grid [ 2 ] [ 1 ] d6 = grid [ 1 ] [ 2 ] - grid [ 2 ] [ 2 ] d7 = grid [ 0 ] [ 0 ] - grid [ 0 ] [ 1 ] d8 = grid [ 0 ] [ 1 ] - grid [ 0 ] [ 2 ] d9 = grid [ 1 ] [ 0 ] - grid [ 1 ] [ 1 ] d10 = grid [ 1 ] [ 1 ] - grid [ 1 ] [ 2 ] d11 = grid [ 2 ] [ 0 ] - grid [ 2 ] [ 1 ] d12 = grid [ 2 ] [ 1 ] - grid [ 2 ] [ 2 ] if d1 == d2 && d1 == d3 && d4 == d5 && d4 == d6 && d7 == d9 && d7 == d11 && d8 == d10 && d8 == d12 puts ( ' Yes ' ) else puts ( ' No ' ) end
eval " S= " + ` tr ' ' + ` ; p S <=> 0
a , b , c , d , e , k = 6 . times . map { gets . to_i } if e - a > k puts ' :( ' else puts ' Yay! ' end
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) b = gets . chomp . split . map ( & :to_i ) pls = [ ] mns = 0 res = 0 n . times do | i | if b [ i ] > a [ i ] res += 1 mns += b [ i ] - a [ i ] elsif b [ i ] < a [ i ] pls << i end end pls . sort_by! { | i | ( a [ i ] - b [ i ] ) } while mns > 0 && ! pls . empty? i = pls . pop mns -= a [ i ] - b [ i ] res += 1 end puts ( mns > 0 ) ? " -1 " : res
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
n = gets . to_i flag = false 1 . step ( 3500 ) do | a | 1 . step ( 3500 ) do | b | if 4 * a * b - n * b - n * a > 0 && n * a * b % ( 4 * a * b - n * b - n * a ) == 0 c = n * a * b / ( 4 * a * b - n * b - n * a ) puts " flag = true end break if flag end break if flag end
n = gets . to_i a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) ex = [ ] lack = 0 ans = 0 n . times do | i | t = a [ i ] - b [ i ] ex << t if t > 0 if t < 0 lack += - t ans += 1 end end ex . sort! . reverse! ex . each do | v | break if lack <= 0 lack -= v ans += 1 end if lack <= 0 puts ans else puts - 1 end
k , s = gets . split ( ' ' ) K = k . to_i S = s . to_i count = 0 ( K + 1 ) . times do | x | ( K + 1 ) . times do | y | z = S - ( x + y ) if 0 <= z && z <= K then count += 1 end end end puts count
n = gets . to_i pow = 0 while 2 ** ( pow + 1 ) <= n pow += 1 end puts 2 ** pow
c = [ ] 3 . times do c << gets . chomp . split . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in 0 .. 2 for j in 0 .. 2 if c [ i ] [ j ] != a [ i ] + b [ j ] puts ' No ' exit end end end puts ' Yes '
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
q = gets . chomp . split ( " " ) . map { | i | i . to_i } . sort if q == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
puts gets . chomp . split . sort . join == " 1479 " ? " YES " : " NO "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i [ a , b , c , d , e ] . combination ( 2 ) do | a , b | if ( b - a ) . abs > k puts " :( " exit end end puts " Yay! "
require ' set ' set = Set . new ( ) n = gets . to_i s = gets . split s . each do | t | set << t end puts set . size == 3 ? :Three : :Four
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( x + y <= s && s - x - y <= k ) end end puts cnt
a = gets . chomp! . to_i b = gets . chomp! . to_i c = gets . chomp! . to_i d = gets . chomp! . to_i e = gets . chomp! . to_i k = gets . chomp! . to_i if e - a > k then puts " :( " else puts " Yay! " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i M = [ " Yay! " , " :( " ] if e - a > k puts M [ 1 ] else puts M [ 0 ] end
l = gets . chomp . split ( ' ' ) k = l [ 0 ] . to_i s = l [ 1 ] . to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - ( x + y ) <= k && s - ( x + y ) >= 0 cnt += 1 end end end puts cnt
ary = [ ] 5 . times { ary << gets . to_i } a , b , c , d , e , f = ary k = gets . to_i flag = false ary . each do | i | ary . each do | j | flag = true if i - j > k end end puts flag ? ' :( ' : ' Yay! '
N = gets . to_i as = gets . split . map ( & :to_i ) bs = gets . split . map ( & :to_i ) arr = [ ] rest = 0 ret = 0 i = 0 while i < N if as [ i ] < bs [ i ] rest += bs [ i ] - as [ i ] ret += 1 else arr << as [ i ] - bs [ i ] end i += 1 end arr . sort_by! { | a | - a } arr . each do | a | if rest <= 0 break end rest -= a ret += 1 end if 0 < rest p - 1 else p ret end
ary = [ ] ary << gets . to_i ary << gets . to_i ary << gets . to_i ary << gets . to_i ary << gets . to_i k = gets . to_i m = 0 for j in 0 .. 3 for i in 1 .. 4 u = ( ary [ i ] . to_i - ary [ j ] . to_i ) if u > k m += 1 end end end if m > 0 puts " :( " else puts " Yay! " end
n = gets . to_i arr = gets . split ( ' ' ) . map! ( & :to_i ) min = arr [ 0 ] count = 0 arr . each do | e | if min >= e count += 1 min = e end end puts count
k , s = gets . split . map ( & :to_i ) a = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | a += 1 if ( x + y <= s && s - x - y <= k ) } } puts a
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
n = gets . chomp . to_i q = gets . chomp . split . map ( & :to_i ) max = q . max cnt = 0 for i in 0 .. n - 1 if max >= q [ i ] cnt += 1 max = q [ i ] end end puts cnt
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | i | ( 0 .. [ S - i , K ] . min ) . each do | j | count += 1 if S - i - j <= K end end puts count
K , S = gets . split . map & :to_i sum = 0 0 . upto ( K ) do | x | 0 . upto ( K ) do | y | z = S - x - y next unless 0 <= z && z <= K sum += 1 end end p sum
input = gets . to_s arrayOfInput = [ ] arrayOfInput << input . split ( " " ) [ 0 ] . to_i arrayOfInput << input . split ( " " ) [ 1 ] . to_i arrayOfInput << input . split ( " " ) [ 2 ] . to_i arrayOfInput << input . split ( " " ) [ 3 ] . to_i if arrayOfInput . include? ( 1 ) && arrayOfInput . include? ( 7 ) && arrayOfInput . include? ( 9 ) && arrayOfInput . include? ( 4 ) then puts " YES " else puts " NO " end
k , s = gets . chomp . split . map ( & :to_i ) ok = 0 0 . upto ( k ) do | i1 | 0 . upto ( k ) do | i2 | if s - ( i1 + i2 ) >= 0 && ( s - ( i1 + i2 ) ) <= k ok += 1 end end end puts ok
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = Ps . max N . times do | i | min = [ Ps [ i ] , min ] . min if Ps [ i ] > min then next else ans += 1 end end puts ans
eval " N,X,*A= " + ` dd ` . split * ?, p ( 0 .. N ) . map { | i | z = i * X + A . reduce ( :+ ) A = A . zip ( A . rotate ) . map & :min z } . min
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) cnt = 0 sum = 0 c = [ ] n . times do | i | e = a [ i ] - b [ i ] if e . negative? cnt += 1 sum += e e = 0 end c << e end c . sort . reverse . each do | x | break if sum >= 0 sum += x cnt += 1 end puts cnt > n ? " -1 " : cnt
k , s = gets . chomp . split . map ( & :to_i ) answer = 0 arr = [ ] for a in 0 .. k break if a > s for b in 0 .. k break if a + b > s c = s - a - b answer += 1 if c <= k end end puts answer
require ' set ' def s ( ) gets ( ) end def i ( ) gets . to_i end def li ( ) gets . split . map ( & :to_i ) end def ili ( ) n = gets . to_i as = gets . split . map ( & :to_i ) [ n , as ] end cs = [ ] 3 . times { cs << li ( ) } cs_t = cs . transpose res = true 2 . times { | i | res &&= Set . new ( cs [ 0 ] . zip ( cs [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 res &&= Set . new ( cs_t [ 0 ] . zip ( cs_t [ i + 1 ] ) . map { | a , b | a - b } ) . size == 1 } if res puts " Yes " else puts " No " end
n = gets . to_i s = [ ] s = gets . split ( " " ) ycnt = 0 n . times do | i | if s [ i ] == " Y " ycnt += 1 end end if ycnt != 0 print ( " Four \n " ) else print ( " Three \n " ) end
N = gets . to_i P = gets . split . map & :to_i min = 1.0 / 0 p ( 1 .. P . size ) . select { | _i | i = _i - 1 min = [ min , P [ i ] ] . min P [ i ] <= min } . size
k , s = gets . split . map & :to_i puts [ * 0 .. k ] . repeated_permutation ( 2 ) . map { | a , b | a + b } . select { | i | i <= s } . count { | xy | ( z = s - xy ) >= 0 && z <= k }
n = gets . to_i 1 . upto ( 3500 ) do | h | 1 . upto ( h ) do | w | next if ( m = 4 * h * w - w * n - n * h ) <= 0 x , y = ( n * h * w ) . divmod ( m ) next if y != 0 puts " exit end end
_n = gets . strip . to_i puts gets . strip . split . uniq . size . eql? ( 3 ) ? ' Three ' : ' Four '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
N = gets . to_f ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | w = ( N * h * n ) / ( 4 * h * n - N * ( n + h ) ) if w > 0 && w % 1 == 0 puts " exit 0 end end end
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } for i in 0 .. 1 for j in i + 1 .. 2 for k in 0 .. 1 for l in k + 1 .. 2 if c [ i ] [ k ] + c [ j ] [ l ] != c [ i ] [ l ] + c [ j ] [ k ] puts " No " exit end end end end end puts " Yes "
n = gets . chomp . to_i foundY = false gets . chomp . split . each do | c | if c == ' Y ' foundY = true end end puts foundY ? " Four " : " Three "
AR = [ ] 5 . times { AR << gets . to_i } k = gets . to_i if AR [ 4 ] - AR [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( 0 .. k ) . include? ( z ) count += 1 end end end p count
K , S = gets . chomp . split . map ( & :to_i ) sum = 0 ( K + 1 ) . times do | i | break if i > S ( K + 1 ) . times do | j | break if i + j > S sum += 1 if K >= ( S - i - j ) end end puts sum
puts gets ( p ) [ ?Y ] ? :Four : :Three
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i puts e - a <= k ? " Yay! " : " :( "
n , x = gets . chomp . split ( " " ) . map ( & :to_i ) a = gets . chomp . split ( " " ) . map ( & :to_i ) b = Marshal . load ( Marshal . dump ( a ) ) ans = 10 ** 13 for i in 0 .. n - 1 for j in 0 .. n - 1 b [ j ] = [ b [ j ] , a [ ( j - i ) % n ] ] . min end ans = [ ans , b . inject ( :+ ) + x * i ] . min end puts ans
H , R = gets . split . map & :to_i p 0 if H + R == 0 p 1 if H + R > 0 p - 1 if H + R < 0
a = STDIN . read . lines [ 1 ] . split . map { | v | v . to_i } ; cnt = 0 ; min = a . max + 1 a . each do | v | min >= v && ( min = v and cnt += 1 ) end puts cnt
a = [ ] 6 . times { a << gets . to_i } k = a . last if a [ 4 ] - a [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
k , s = gets . split ( " " ) . map { | v | v . to_i } if k >= s then puts ( s + 2 ) * ( s + 1 ) / 2 exit end if s >= 2 * k then t = 3 * k - s puts ( t + 2 ) * ( t + 1 ) / 2 exit end puts ( s + 2 ) * ( s + 1 ) / 2 - ( s - k ) * ( s - k + 1 ) / 2 * 3
puts ` awk '$0=++a[$1-$2,$2-$3]' ` [ ?3 ] ? :Yes : :No
n = gets . to_i variation = gets . split . uniq . length if variation == 3 puts ' Three ' else puts ' Four ' end
* a , k = $< . read . split . map ( & :to_i ) puts ( a . max - a . min > k ) ? " :( " : " Yay! "
_ = $stdin . gets PX = $stdin . gets . chomp . split ( " " ) . map ( & :to_i ) . sort PY = $stdin . gets . chomp . split ( " " ) . map ( & :to_i ) . sort M = 1000000007 def msum ( xs ) i = 0 r = 0 while i < xs . size - 1 - i j = xs . size - 1 - i r = ( r + ( xs [ j ] - xs [ i ] ) * ( j - i ) ) % M i += 1 end r end puts ( ( msum ( PX ) % M ) * ( msum ( PY ) % M ) ) % M
a = Array . new ( 5 ) { gets . to_i } k = gets . to_i ans = true a . each_with_index { | x , i | a . each_with_index { | y , j | next if i >= j if y - x > k ans = false break end } break unless ans } puts ( ans ? " Yay! " : " :( " )
n = gets . to_i ary = gets . split . map ( & :to_i ) min = ary [ 0 ] puts ary . count { | x | x <= min ? ( min = x ; true ) : ( false ) }
c1 = gets . split . map ( & :to_i ) ; c2 = gets . split . map ( & :to_i ) ; c3 = gets . split . map ( & :to_i ) ; if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] and c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] if c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] and c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] if c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] and c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] if c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] and c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] and c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] puts " Yes " exit end end end end end end puts " No "
io = STDIN n = io . gets . to_i s = io . gets . chomp . split ( " " ) if s . uniq . size == 4 puts ' Four ' else puts ' Three ' end
moji = " abcdefghi " . split ( " " ) numbers = gets . chomp . split . map ( & :to_i ) missing = ( 1 .. 9 ) . to_a h = { } unknown = [ ] moji . zip ( numbers ) { | m , n | if n != - 1 h [ m ] = n missing . delete n else unknown << m end } answer = 0 missing . permutation ( missing . length ) { | arr | unknown . zip ( arr ) { | m , n | h [ m ] = n } answer += 1 if h [ " a " ] + h [ " c " ] + h [ " f " ] + 10 * ( h [ " b " ] + h [ " e " ] ) + 100 * h [ " d " ] == 100 * h [ " g " ] + 10 * h [ " h " ] + h [ " i " ] } puts answer
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) && check ( mat . transpose ) then puts " Yes " else puts " No " end
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - x - y >= 0 && s - x - y <= k count += 1 if s == x + y + ( s - x - y ) end end end puts count
n = gets . strip . to_i array = gets . strip . split . map ( & :to_i ) res = [ ] sum = 0 min = 2000000 array . each do | ar | min = ar if min > ar if min == ar sum += 1 end end puts sum
k , s = gets . split . map ( & :to_i ) cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | f . upto ( k ) do | y | z = s - x - y next if k < z || z < 0 cnt += 1 end end p cnt
ns = 5 . times . map { gets . to_i } . sort k = gets . to_i puts ns [ 4 ] - ns [ 0 ] > k ? " :( " : " Yay! "
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
c = [ ] 3 . times do row = gets . chomp . split . map ( & :to_i ) c << row end a = [ 0 ] b = [ ] b << c [ 0 ] [ 0 ] b << c [ 0 ] [ 1 ] b << c [ 0 ] [ 2 ] a << c [ 1 ] [ 0 ] - b [ 0 ] a << c [ 2 ] [ 0 ] - b [ 0 ] [ 1 , 2 ] . each do | i | [ 1 , 2 ] . each do | j | unless c [ i ] [ j ] == a [ i ] + b [ j ] puts ' No ' exit end end end puts ' Yes '
c = [ ] 3 . times do c . push gets . split . map ( & :to_i ) end diff_raw = Array . new ( 3 ) . map { | e | [ ] } diff_column = Array . new ( 3 ) . map { | e | [ ] } 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_raw [ i ] . push ( c [ i ] [ j ] - c [ i - 1 ] [ j ] ) end end 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_column [ j ] . push ( c [ i ] [ j ] - c [ i ] [ j - 1 ] ) end end if diff_raw . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] && diff_column . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] puts ' Yes ' else puts ' No ' end
puts ` dd ` [ ?Y ] ? :Four : :Three
n = gets . chomp . to_i s = gets . split . map ( & :to_s ) result = " Three " result = " Four " if ( s . include? ( " Y " ) ) puts result
N , P = gets . split ( " " ) . map { | e | e . to_i } max = ( P ** ( 1.0 / N ) ) . round for i in 0 .. max - 1 do waru = max - i if P % waru == 0 if P % waru ** N == 0 puts waru break end end end
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) min_num = n + 1 count = 0 n . times do | i | if array [ i ] < min_num count += 1 min_num = array [ i ] end end puts count
input = $stdin . readlines input . map! { | a | a . chomp ( " \n " ) . to_i } k = input [ 5 ] input . delete_at ( 5 ) if input . max - input . min <= k then print " Yay! " else print " :( " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) minus = [ ] plus = [ ] flag = 0 sum = 0 for i in 0 .. n - 1 v = a [ i ] - b [ i ] if v < 0 flag = 1 end sum += v if v > 0 plus << v elsif v < 0 minus << v end end if flag == 0 p 0 exit elsif sum < 0 p - 1 exit end count = 0 count += minus . length plus . sort! plus = plus . reverse minus_all = minus . inject ( & :+ ) plus_all = 0 i = 0 while minus_all < 0 if i >= plus . length p - 1 exit end minus_all += plus [ i ] count += 1 i + = 1 end p count
c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) c3 = gets . split . map ( & :to_i ) b1 = 1000 b2 = 1000 b3 = 1000 ans = 0 ( 0 .. 100 ) . each do | a1 | a2 = a1 - ( c1 [ 0 ] - c2 [ 0 ] ) a3 = a1 + ( c3 [ 0 ] - c1 [ 0 ] ) if a2 < 0 || a3 < 0 || a2 > 100 || a3 > 100 next else b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if b1 < 0 || b2 < 0 || b3 < 0 || b1 > 100 || b2 > 100 || b3 > 100 next else score = [ [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ] c22 = c2 [ 1 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 1 ] c32 = c3 [ 1 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 1 ] c23 = c2 [ 2 ] == score [ 0 ] [ 1 ] + score [ 1 ] [ 2 ] c33 = c3 [ 2 ] == score [ 0 ] [ 2 ] + score [ 1 ] [ 2 ] if c22 && c32 && c23 && c33 ans += 1 end end end end if ans > 0 then puts ' Yes ' else puts ' No ' end
t = 1 gets . split . zip ( $< ) { | m , x | m = m . to_i t *= x . split . sum { _1 . to_i * ~ m -= 2 } } p t . % 10 ** 9 + 7
ary = $stdin . read . lines . map ( & :to_i ) 5 . times do | i | 5 . times do | j | if ( ary [ i ] - ary [ j ] ) > ary [ 5 ] puts " :( " exit end end end puts " Yay! "
A = 5 . times . map { gets . to_i } . sort K = gets . to_i if K < A [ - 1 ] - A [ 0 ] puts ' :( ' else puts ' Yay! ' end
gets . to_i puts gets . split ( " " ) . uniq . size == 4 ? " Four " : " Three "
k , s = gets . split . map & :to_i cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | ( [ s - x - k , f ] . max ) . upto ( k ) do | y | z = s - x - y cnt += 1 if z <= k && 0 <= z end end p cnt
n = gets . to_i ary = [ 1 , 2 , 4 , 8 , 16 , 32 , 64 ] puts ary . select { | a | a <= n } . max
a = gets . split ( " " ) . map! { | i | i . to_i } n1 = 0 n2 = 0 n3 = 0 n4 = 0 4 . times do | i | if a [ i ] == 1 then n1 += 1 elsif a [ i ] == 7 then n2 += 1 elsif a [ i ] == 9 then n3 += 1 elsif a [ i ] == 4 then n4 += 1 end end if n1 == 1 and n2 == 1 and n3 == 1 and n4 == 1 puts " YES " else puts " NO " end
n = gets . to_i hina = gets . split ( " " ) . uniq puts ( hina . size == 3 ) ? " Three " : " Four "
n = gets . to_i size = gets . split . uniq . size puts size == 4 ? ' Four ' : ' Three '
c = [ ] c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) c << gets . split . map ( & :to_i ) if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] && c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] puts " Yes " else puts " No " end
k , s = gets . split . map ( & :to_i ) p ( [ 0 , s - k * 2 ] . max .. [ s , k ] . min ) . reduce ( 0 ) { | t , x | yz = s - x ; t + 1 + ( yz < k ? yz : k * 2 - yz ) }
n = gets . chomp . split . map ( & :to_i ) ans = true [ 1 , 9 , 7 , 4 ] . each do | e | ans = false unless n . include? ( e ) end puts ans ? " YES " : " NO "
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x next if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
antennas = 5 . times . map { gets . chomp . to_i } k = gets . chomp . to_i ( 0 .. 3 ) . each do | i | ( i + 1 .. 4 ) . each do | j | if antennas [ j ] - antennas [ i ] > k puts ' :( ' exit end end end puts ' Yay! '
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | t = s - i - j if 0 <= t && t <= k cnt += 1 end end end puts cnt
k , s = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( 0 .. k ) . include? ( z ) count += 1 end end end puts count
puts gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? :YES : :NO
$t1 , $t2 = gets . chomp . split . map ( & :to_i ) $a1 , $a2 = gets . chomp . split . map ( & :to_i ) $b1 , $b2 = gets . chomp . split . map ( & :to_i ) if $a1 * $t1 + $a2 * $t2 == $b1 * $t1 + $b2 * $t2 puts " infinity " exit 0 end def f ( t ) c = t / 2 if t % 2 == 0 a = $a1 * $t1 * c + $a2 * $t2 * c b = $b1 * $t1 * c + $b2 * $t2 * c aa = a + $a1 * $t1 bb = b + $b1 * $t1 return false if a == b if a < b return aa >= bb else return aa <= bb end else a = $a1 * $t1 * ( c + 1 ) + $a2 * $t2 * c b = $b1 * $t1 * ( c + 1 ) + $b2 * $t2 * c aa = a + $a2 * $t2 bb = b + $b2 * $t2 return false if a == b if a < b return aa >= bb else return aa <= bb end end end if not f ( 1 ) puts " 0 " exit 0 end ok = 1 ng = 1 << 60 while ok + 1 < ng x = ( ok + ng ) / 2 if f ( x ) ok = x else ng = x end end puts ok
n = gets . to_i ps = gets . split . map ( & :to_i ) mn = n * 2 cnt = 0 ps . each do | q | if mn >= q cnt += 1 mn = q end end p cnt
def count_low_elements ( n , p ) count = 0 min = n + 1 ( 0 ... n ) . each do | i | if p [ i ] < min count += 1 min = p [ i ] end end count end n = gets . chomp . to_i p = gets . chomp . split . map ( & :to_i ) puts count_low_elements ( n , p )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if b - a > k then puts " :( " elsif c - a > k then puts " :( " elsif d - a > k then puts " :( " elsif e - a > k then puts " :( " elsif c - b > k then puts " :( " elsif d - b > k then puts " :( " elsif e - b > k then puts " :( " elsif d - c > k then puts " :( " elsif e - c > k then puts " :( " elsif e - d > k then puts " :( " else puts " Yay! " end
def dif_row ( r1 , r2 ) x = [ ] 3 . times { | i | x <<r1 [ i ] - r2 [ i ] } x . uniq . size == 1 end c = [ ] 3 . times { c << gets . chomp . split . map ( & :to_i ) } d = c . transpose if dif_row ( c [ 0 ] , c [ 1 ] ) && dif_row ( c [ 0 ] , c [ 2 ] ) && dif_row ( d [ 0 ] , d [ 1 ] ) && dif_row ( d [ 0 ] , d [ 2 ] ) puts ' Yes ' else puts ' No ' end
n = gets . to_i arr = [ ] s = 0 ans = 0 a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) i = 0 b . each do | v | if v > a [ i ] s += v - a [ i ] ans += 1 else arr . push ( a [ i ] - v ) end i += 1 end arr . sort! . reverse! arr . each do | v | break if s <= 0 s -= v ans += 1 end if s <= 0 puts ans else puts - 1 end
N = gets . to_i A = gets . strip . split . map ( & :to_i ) B = gets . strip . split . map ( & :to_i ) a = [ ] for i in 0 .. N - 1 a [ i ] = A [ i ] - B [ i ] end a . sort! i = 0 b = 0 while a [ i ] < 0 b -= a [ i ] i += 1 end j = 0 c = 0 while b > c && j <= N - 1 c += a [ N - 1 - j ] j += 1 end if A . inject ( :+ ) < B . inject ( :+ ) puts - 1 else puts j + i end
A = 5 . times . map { gets . to_i } k = gets . to_i puts A [ 4 ] - A [ 0 ] > k ? ' :( ' : ' Yay! '
str = gets . split T1 , T2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split a1 , a2 = str [ 0 ] . to_i , str [ 1 ] . to_i str = gets . split b1 , b2 = str [ 0 ] . to_i , str [ 1 ] . to_i if T1 * a1 + T2 * a2 == T1 * b1 + T2 * b2 puts " infinity " exit end if ( a1 - b1 ) * ( a2 - b2 ) > 0 puts 0 exit end if a1 < b1 swap = a1 a1 = b1 b1 = swap swap = a2 a2 = b2 b2 = swap end if a1 * T1 + a2 * T2 > T1 * b1 + T2 * b2 puts 0 exit end dif1 = T1 * a1 - b1 * T1 dif2 = T1 * b1 + T2 * b2 - a1 * T1 - a2 * T2 answer = ( dif1 / dif2 ) * 2 + 1 if dif1 % dif2 == 0 answer -= 1 end puts answer
k , s = gets . split . map ( & :to_i ) ret = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | ret += 1 if s - x - y >= 0 && s - x - y <= k end end puts ret
lines = [ ] 5 . times { lines . push ( gets . to_i ) } k = gets . to_i puts lines [ 4 ] - lines [ 0 ] > k ? ' :( ' : ' Yay! '
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | i | ( 0 .. K ) . each do | j | count += 1 if i + j <= S && S - i - j <= K end end puts count
puts gets . split . sort . join == " 1479 " ? " YES " : " NO "
if gets . chomp . split . map ( & :to_i ) . sort . join == ' 1479 ' puts ' YES ' else puts ' NO ' end
towers = [ ] 5 . times do towers . push ( gets . to_i ) end k = gets . to_i if towers [ 4 ] - towers [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
N = gets . to_i ans = 1 while ans * 2 <= N ans *= 2 end puts ans
a , b = gets . split . map ( & :to_i ) ; p a <=> - b
n = gets . to_i ps = gets . chomp . split . map ( & :to_i ) current = 10 ** 9 cnt = 0 ps . each do | p | if p < current cnt += 1 current = p end end puts cnt
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | cnt += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts cnt
data = $< . map { | l | l . split . map ( & :to_i ) } a1 = b1 = 0 a2 = b2 = 1 a3 = b3 = 2 b1_b2_a = data [ a1 ] [ b1 ] - data [ a1 ] [ b2 ] b1_b2_b = data [ a2 ] [ b1 ] - data [ a2 ] [ b2 ] b1_b2_c = data [ a3 ] [ b1 ] - data [ a3 ] [ b2 ] b2_b3_a = data [ a1 ] [ b2 ] - data [ a1 ] [ b3 ] b2_b3_b = data [ a2 ] [ b2 ] - data [ a2 ] [ b3 ] b2_b3_c = data [ a3 ] [ b2 ] - data [ a3 ] [ b3 ] puts b1_b2_a == b1_b2_b && b1_b2_a == b1_b2_c && b2_b3_a == b2_b3_b && b2_b3_a == b2_b3_c ? " Yes " : " No "
C = [ ] 3 . times { C << gets . chomp . split ( " " ) . map ( & :to_i ) } s0 = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] s1 = C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] s2 = C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] puts s0 == s1 && s1 == s2 ? ' Yes ' : ' No '
k , s = gets . strip . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y cnt += 1 if z . between? ( 0 , k ) end end puts cnt
n , w = gets . to_i , gets . split ( " " ) a = w . count ( " P " ) , w . count ( " W " ) , w . count ( " G " ) , w . count ( " Y " ) puts [ " " , " " , " Three " , " Four " ] [ 3 - a . count ( 0 ) ]
a = [ ] 5 . times do a << gets . to_i end k = gets . to_i result = a . combination ( 2 ) . any? { | x , y | y - x > k } puts result ? " :( " : " Yay! "
n = gets . to_i p = gets . split . map ( & :to_i ) min = 200001 count = 1 min = p [ 0 ] ( n - 1 ) . times do | i | if min > p [ i + 1 ] min = p [ i + 1 ] end if min >= p [ i + 1 ] count += 1 end end print count
C = 3 . times . map { gets . split . map ( & :to_i ) } r , m = C . flatten . inject ( 0 , & :+ ) . divmod ( 3 ) puts ( m == 0 && [ 0 , 1 , 2 ] . permutation . all? { | i , j , k | C [ 0 ] [ i ] + C [ 1 ] [ j ] + C [ 2 ] [ k ] == r } ) ? " Yes " : " No "
eval " N,X,*A= " + ` dd ` . split * ?, p A . map { A = A . zip ( b = A . rotate ) . map & :min ( X * ~ - $. += 1 ) . + b . reduce : + } . min
N = gets . to_i A = gets . chomp . split . map ( & :to_i ) B = gets . chomp . split . map ( & :to_i ) if A . inject ( :+ ) < B . inject ( :+ ) puts - 1 exit end fusoku = 0 k = [ ] cc = 0 0 . upto ( N - 1 ) do | i | if A [ i ] < B [ i ] fusoku += B [ i ] - A [ i ] cc += 1 elsif A [ i ] > B [ i ] k << A [ i ] - B [ i ] end end if cc == 0 puts 0 exit end k . sort! k . reverse! flag = false cnt = 0 k . each do | v | fusoku -= v cnt += 1 if fusoku <= 0 flag = true break end end puts flag ? cc + cnt : - 1
as = ` dd ` . split . map & :to_i puts as [ - 2 ] - as [ 0 ] > as [ - 1 ] ? " :( " : " Yay! "
K , S = gets . split . map ( & :to_i ) count = 0 for x in 0 .. K if S - x > K * 2 next end for y in 0 .. ( [ S - x , K ] . min ) z = S - x - y if 0 <= z && z <= K count += 1 end end end puts count
s = 5 . times . map { gets . split . map ( & :to_i ) } k = gets . to_i puts s . combination ( 2 ) . count { | i | ( i [ 0 ] [ 0 ] - i [ 1 ] [ 0 ] ) . abs > k } > 0 ? " :( " : " Yay! "
antennas = [ ] 5 . times do line = gets . chomp . to_i antennas . push ( line ) end k = gets . chomp . to_i flag = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 flag = false if antennas [ j ] - antennas [ i ] > k end end if flag puts " Yay! " else puts " :( " end
list = [ ] 5 . times do list << gets . to_i end k = gets . to_i puts list . max - list . min <= k ? ' Yay! ' : ' :( '
n = gets . chomp! . to_i p_n = gets . chomp! . split . map ( & :to_i ) count = 0 min = p_n [ 0 ] p_n . each do | a | if a <= min count += 1 min = a end end puts count
con = [ ] 5 . times do con << gets . chomp . to_i end k = gets . chomp . to_i if con [ 4 ] - con [ 0 ] > k then print ' :( ' else print ' Yay! ' end
n = gets . to_i result = nil 3500 . times do | i | h = i + 1 3500 . times do | j | w = j + 1 p = w * h s = w + h bunshi = n * p bunbo = 4 * p - n * s if bunshi >= bunbo && bunbo > 0 && bunshi % bunbo == 0 result = [ h , w , bunshi / bunbo ] end break unless result . nil? end break unless result . nil? end puts result . join ( " " )
N = gets . to_i S = gets . split puts S . uniq . size == 3 ? " Three " : " Four "
require ' matrix ' cs = 3 . times . map { gets . chomp . split . map ( & :to_i ) } d1 = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d2 = [ [ 0 , 2 ] , [ 1 , 1 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d3 = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d4 = [ [ 0 , 2 ] , [ 1 , 0 ] , [ 2 , 1 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) if [ d1 , d2 , d3 , d4 ] . uniq . size == 1 puts " Yes " else puts " No " end
c = Array . new 3 . times { c . push ( gets . chomp . split ( " " ) . map ( & :to_i ) ) } a1 = 0 b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if a2 != ( c [ 1 ] [ 1 ] - b2 ) || a2 != ( c [ 1 ] [ 2 ] - b3 ) then puts " No " exit end if a3 != ( c [ 2 ] [ 1 ] - b2 ) || a3 != ( c [ 2 ] [ 2 ] - b3 ) then puts " No " exit end puts " Yes "
ks = gets . chomp . split k = ks [ 0 ] . to_i s = ks [ 1 ] . to_i count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - ( x + y ) count += 1 if 0 <= z && z <= k end end puts count
k , s = gets . split ( ' ' ) . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if ( z >= 0 && z <= k ) ans += 1 end end end puts ans
n = gets . to_i m = gets . chomp . split . uniq! . sort! . join ( " " ) if m == " GPWY " puts " Four " elsif m == " GPW " puts " Three " end
n = gets . to_i p = gets . split . map ( & :to_i ) count = 0 min = n + 1 n . times do | i | if p [ i ] < min count += 1 min = p [ i ] end end puts count
n = gets . to_i s = gets . chomp arr = [ 0 , 0 ] s . each_char { | c | if c < " a " if c < " N " arr [ 0 ] += 1 else arr [ 0 ] -= 1 end else if c < " n " arr [ 1 ] += 1 else arr [ 1 ] -= 1 end end } puts arr . map { | x | x . abs } . inject ( :+ ) crypt = " " if arr [ 0 ] >= 0 crypt += ( " A " * arr [ 0 ] ) else crypt += ( " N " * ( - arr [ 0 ] ) ) end if arr [ 1 ] >= 0 crypt += ( " a " * arr [ 1 ] ) else crypt += ( " n " * ( - arr [ 1 ] ) ) end puts crypt
N = gets . to_i Ss = gets . split puts Ss . any? { | s | s == ' Y ' } ? ' Four ' : ' Three '
input_lines = [ ] 5 . times do input_lines << gets . chomp . to_i end k = gets . chomp . to_i if ( input_lines [ 4 ] - input_lines [ 0 ] ) > k print " :( " else print " Yay! " end
c = 3 . times . map { gets . split . map ( & :to_i ) } hoge = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] fuga = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] piyo = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] puts hoge == fuga && piyo == fuga ? " Yes " : " No "
def can_communication ( x , y , k ) ( y - x ) . abs <= k end a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i res = can_communication ( b , a , k ) res = res && can_communication ( c , a , k ) res = res && can_communication ( d , a , k ) res = res && can_communication ( e , a , k ) res = res && can_communication ( c , b , k ) res = res && can_communication ( d , b , k ) res = res && can_communication ( e , b , k ) res = res && can_communication ( d , c , k ) res = res && can_communication ( e , c , k ) res = res && can_communication ( e , d , k ) puts res ? " Yay! " : " :( "
def ascan ; gets . split . map ( & :to_i ) ; end gets ; m = gets . chomp . split . sort . uniq . size puts [ " Zero " , " One " , " Two " , " Three " , " Four " ] [ m ]
k , s = gets . chomp . split . map ( & :to_i ) kArraies = ( 0 .. k ) . to_a count = 0 kArraies . repeated_permutation ( 2 ) { | p1 , p2 | z = s - ( p1 + p2 ) count += 1 if z >= 0 && z <= k } puts count
n = gets . to_i p = gets . split ( " " ) . map ( & :to_i ) dp = Array . new ( n ) dp [ 0 ] = p . first ( 0 .. ( n - 2 ) ) . each do | i | dp [ i + 1 ] = [ p [ i + 1 ] , dp [ i ] ] . min end count = 1 ( 1 .. ( n - 1 ) ) . each do | i | count += 1 if dp [ i - 1 ] >= p [ i ] end puts count
k , s = gets . split . map ( & :to_i ) cnt = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - ( x + y ) cnt += 1 if 0 <= z && z <= k end end puts cnt
arr = [ ] 5 . times { arr << gets . to_i } k = gets . to_i ok = true for i in 0 .. 3 for j in ( i + 1 ) .. 4 if arr [ j ] - arr [ i ] > k ok = false break end end break if ! ok end puts ok ? " Yay! " : " :( "
k , s = gets . split . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do count += 1 if ( 0 .. k ) . include? ( s - x - y ) end end puts count
puts ( { true => ' YES ' , false => ' NO ' } [ gets . chomp . split ( ' ' ) . sort . join == ' 1479 ' ] )
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY def cal ( x ) ret = 0 while x != 0 and ( x % 2 ) . zero? ret += 1 x /= 2 end return ret end N = gets . to_i ans = 1 max = 0 ( N + 1 ) . times do | i | if i . even? val = cal ( i ) if max < val ans = i max = val end end end puts ans
points = readlines . map ( & :to_i ) min , max = points . minmax distance = max - min distance_can_be_connected = points [ 5 ] if distance_can_be_connected < distance puts " :( " else puts " Yay! " end
n = gets . to_i s = gets . split . map! { | i | i . to_i } max = n + 1 ans = 0 for i in 0 .. n - 1 if s [ i ] < max ans += 1 max = s [ i ] end end puts ans
n , * a = $< . map { | l | l . split . map & :to_i } ; t = 1 ; a . zip ( n ) { | x , m | i = s = 0 ; x . map { | k | s += k . * ~ m + 2 * i += 1 } ; t *= s } ; p t . % 10 ** 9 + 7
K , S = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each { | x | ( 0 .. K ) . each { | y | if ( S - x - y ) . between? ( 0 , K ) cnt += 1 end } } p cnt
grid = 3 . times . map { gets . split . map ( & :to_i ) } 0 . upto ( grid [ 0 ] [ 0 ] ) do | b1 | a1 = grid [ 0 ] [ 0 ] - b1 0 . upto ( grid [ 1 ] [ 1 ] ) do | b2 | a2 = grid [ 1 ] [ 1 ] - b2 next if a1 + b2 != grid [ 0 ] [ 1 ] next if a2 + b1 != grid [ 1 ] [ 0 ] 0 . upto ( grid [ 2 ] [ 2 ] ) do | b3 | a3 = grid [ 2 ] [ 2 ] - b3 next if a1 + b3 != grid [ 0 ] [ 2 ] next if a2 + b3 != grid [ 1 ] [ 2 ] next if a3 + b1 != grid [ 2 ] [ 0 ] next if a3 + b2 != grid [ 2 ] [ 1 ] puts ' Yes ' exit end end end puts ' No '
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i arr = [ a , b , c , d , e ] arr . sort! if ( arr [ 4 ] - arr [ 0 ] ) > k print " :( \n " else print " Yay! \n " end
n = gets . to_i p = gets . split ( ' ' ) . map ( & :to_i ) mini = p [ 0 ] count = 1 for i in 1 .. n - 1 if p [ i ] < mini count += 1 mini = p [ i ] end end puts count
gets puts gets =~ / Y / ? " Four " : " Three "
X = gets . to_i ans = 2 X . times do ans = 2 * ( ans + 1 ) end puts ans
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - ( x + y ) if z >= 0 && z <= k && ( x + y + z ) == s count += 1 end end end print ( count )
n = gets . chomp . split . sort puts ( n == ' 1974 ' . split ( " " ) . sort ) ? " YES " : " NO "
k , s = gets . split . map { | s | s . to_i } ans = 0 ( k + 1 ) . times do | x | sx = s - x ( k + 1 ) . times do | y | z = sx - y if z > k or 0 > z next else ans += 1 end end end puts ans
def ok ( c ) a = [ 0 ] * 3 b = [ 0 ] * 3 0 . upto ( 100 ) do | i | a [ 0 ] = i b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] f = true 3 . times do | i | 3 . times do | j | f = false if c [ i ] [ j ] != a [ i ] + b [ j ] end end return true if f end false end puts ok ( 3 . times . map { gets . split . map & :to_i } ) ? :Yes : :No
puts gets ( p ) =~ / Y / ? " Four " : " Three "
n = gets . chomp . to_i a_ary = gets . chomp . split ( " " ) . map ( & :to_i ) b_ary = gets . chomp . split ( " " ) . map ( & :to_i ) if a_ary . inject ( :+ ) < b_ary . inject ( :+ ) puts - 1 exit end dif = [ ] n . times do | i | dif << a_ary [ i ] - b_ary [ i ] end dif = dif . sort idx = dif . index { | i | i >= 0 } if idx == 0 puts 0 else sm = dif [ 0 .. ( idx - 1 ) ] . inject ( :+ ) c = 1 sum = 0 sz = dif . size ( sz - idx ) . times do | i | sum += dif [ sz - i - 1 ] if sum + sm >= 0 c += i break end end puts idx + c end
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY N = get_i . sort . join ( " " ) puts yn_judge ( N == " 1479 " , " YES " , " NO " )
n = gets . to_i if n == 1 puts 1 elsif n < 4 puts 2 elsif n < 8 puts 4 elsif n < 16 puts 8 elsif n < 32 puts 16 elsif n < 64 puts 32 else puts 64 end
a , b , c , d , e , k = $< . map ( & :to_i ) puts e - a <= k ? " Yay! " : " :( "
K , S = gets . split . map ( & :to_i ) sum = 0 ( 0 .. K ) . each do | x | s = S - x break if s < 0 if s <= K sum += s + 1 elsif s <= 2 * K sum += 2 * K - s + 1 end end puts sum
n = gets . to_i t = 1.0 * 4 / n a = [ ] b = [ 0 ] 1 . upto ( 3500 ) do | i | b << 1.0 / i end 1 . upto ( 3500 ) do | i | gg = b [ i ] i . upto ( 3500 ) do | j | g = t - gg - b [ j ] if g > 0 if ( ggg = ( 1.0 / g ) . round ) <= 3500 && ( g - ( b [ ggg ] ) ) . abs <= 0.000000000001 a << [ i , j , ggg ] a << [ i , j , ggg + 1 ] end end end end a . each do | e | if e [ 0 ] * e [ 1 ] * e [ 2 ] * 4 == ( e [ 0 ] * e [ 1 ] + e [ 0 ] * e [ 2 ] + e [ 2 ] * e [ 1 ] ) * n puts e . * " " break end end
$> << [ :Three , :Four ] [ ` dd ` . split . uniq . size % 2 ]
x = Array . new ( 3 , 0 ) y = Array . new ( 3 , 0 ) ary = 3 . times . map { gets . split . map ( & :to_i ) } 3 . times { | i | y [ i ] = ary [ 0 ] [ i ] - x [ 0 ] } 3 . times { | i | x [ i ] = ary [ i ] [ 0 ] - y [ 0 ] } flg = true 3 . times do | i | 3 . times do | j | flg = false if x [ i ] + y [ j ] != ary [ i ] [ j ] end end puts flg ? ' Yes ' : ' No '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ar = [ a , b , c , d , e ] ar . sort if ar [ 4 ] - ar [ 0 ] > k puts " :( " else puts " Yay! " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
N , M = gets . split . map ( & :to_i ) xs = gets . split . map ( & :to_i ) ys = gets . split . map ( & :to_i ) MOD = 10 ** 9 + 7 sumx , sumy = 0 , 0 ( N - 1 ) . times do | i | sumx += ( xs [ i + 1 ] - xs [ i ] ) * ( i + 1 ) * ( N - i - 1 ) sumx %= MOD end ( M - 1 ) . times do | i | sumy += ( ys [ i + 1 ] - ys [ i ] ) * ( i + 1 ) * ( M - i - 1 ) sumy %= MOD end puts sumx * sumy % MOD
n , m = gets . split . map ( & :to_i ) xs = gets . split . map ( & :to_i ) ys = gets . split . map ( & :to_i ) MOD = 1000000007 def calc ( xs ) n = xs . length num = 0 val = 0 sum = 0 ( 1 ... n ) . each { | i | d = xs [ i ] - xs [ i - 1 ] num += 1 num %= MOD val += num * d val %= MOD sum += val sum %= MOD } return sum end xret = calc ( xs ) yret = calc ( ys ) puts ( xret * yret ) % MOD
arr = ( 0 ... 5 ) . map { gets . to_i } k = gets . to_i ( 0 ... 5 ) . each do | i | ( i ... 5 ) . each do | j | if ( arr [ i ] - arr [ j ] ) . abs > k puts " :( " exit ( 0 ) end end end puts " Yay! "
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i f = gets . to_i if a - b > f || a - b < - f puts " :( " elsif b - c > f || b - c < - f puts " :( " elsif c - d > f || c - d < - f puts " :( " elsif d - e > f || d - e < - f puts " :( " elsif e - a > f || e - a < - f puts " :( " else puts " Yay! " end
N = gets . to_i P = gets . split . map ( & :to_i ) min = P [ 0 ] cnt = 0 N . times do | i | if P [ i ] <= min cnt += 1 min = P [ i ] end end puts cnt
def create_array ( n , ary ) return ary [ n ] = 1 if n == 0 ary [ n ] = create_array ( n - 1 , ary ) * 2 end ary = [ ] create_array ( 7 , ary ) n = gets . to_i ary . each_cons ( 2 ) { | a , b | puts a if ( a ... b ) . include? ( n ) }
N = gets . to_i A = gets . split . map ( & :to_i ) B = gets . split . map ( & :to_i ) ans = 0 s = 0 uppers = [ ] ( 0 ... N ) . each { | i | if A [ i ] < B [ i ] s += B [ i ] - A [ i ] ans += 1 end if A [ i ] > B [ i ] uppers << ( A [ i ] - B [ i ] ) end } uppers . sort . reverse_each { | d | break if s <= 0 s -= d ans += 1 } p s > 0 ? - 1 : ans
n = gets . to_i nums = gets . split . map ( & :to_i ) min = nums [ 0 ] res = 0 nums . each do | num | if num <= min res += 1 min = num end end puts res
/ n,a,b=gets.split.map(&:to_i) / / . sort / / S = gets.chomp.chars / a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i count = 0 if ( e - a > k || e - b > k || e - c > k || e - d > k ) puts " :( " else puts " Yay! " end
c = 3 . times . map { gets . split . map ( & :to_i ) } a = Array . new ( 3 ) b = Array . new ( 3 ) isOut = false a [ 0 ] = 0 ( 0 ... 3 ) . each do | i | b [ i ] = c [ 0 ] [ i ] - a [ 0 ] end a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | j | isOut = true if c [ 1 ] [ j ] != a [ 1 ] + b [ j ] end a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] ( 0 ... 3 ) . each do | k | isOut = true if c [ 2 ] [ k ] != a [ 2 ] + b [ k ] end if isOut puts ' No ' else puts ' Yes ' end
k , s = STDIN . read . scan ( / \d + / ) . map ( & :to_i ) p ( 0 .. k ) . flat_map { | x | ( 0 .. k ) . select { | y | z = s - ( x + y ) if 0 <= z && z <= k true else false end } } . size
gets ; puts gets . split . include? ( ' Y ' ) ? " Four " : " Three "
N = STDIN . gets . to_i An = STDIN . gets . split . map ( & :to_i ) Bn = STDIN . gets . split . map ( & :to_i ) Pair = Struct . new ( :a , :b , :dirty , :diff ) zipped = An . zip ( Bn ) . map do | array | Pair . new ( array [ 0 ] , array [ 1 ] , false , array [ 0 ] - array [ 1 ] ) end grouped = zipped . group_by { | pair | pair . a >= pair . b } satisfied = grouped [ true ] . sort_by { | pair | - ( pair . a - pair . b ) } not_satisfied = grouped [ false ] if not_satisfied . nil? puts 0 else shortage = not_satisfied . inject ( 0 ) { | sum , pair | sum + pair . diff } num = 0 satisfied . each do | pair | shortage += pair . diff pair . dirty = true num += 1 if shortage >= 0 break ; end end if shortage < 0 puts - 1 else puts not_satisfied . size + num end end
puts ` dd ` [ ?Y ] ? :Four : :Three
n = gets . to_i lists = gets . split . map ( & :to_i ) count = 1 ans = lists [ 0 ] ( 1 .. n - 1 ) . each do | i | if ans > lists [ i ] count += 1 ans = lists [ i ] end end puts count
N = gets puts gets . split . uniq . length == 3 ? ' Three ' : ' Four '
n = gets . to_i array = gets . split ( " " ) . map ( & :to_i ) count = 0 minimal = array . first ( 1 ... n ) . each do | y | if minimal < array [ y ] count += 1 else minimal = array [ y ] end end puts n - count
a = gets . chomp . to_i gets gets gets e = gets . chomp . to_i k = gets . chomp . to_i puts e - a <= k ? ' Yay! ' : ' :( '
require ' prime ' N , P = gets . split . map & :to_i p P . prime_division . map { | a , b | a ** ( b / N ) } . inject ( 1 , :* )
time = gets array = gets . split ( " " ) . map ( & :to_i ) m = 2000000 i = 0 array . each do | n | if n < m i += 1 m = n end end puts i
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | i | ( 0 .. [ s - i , k ] . min ) . each do | j | count += 1 if s - i - j <= k end end puts count
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i ok = [ a , b , c , d , e ] . combination ( 2 ) . map { | p , q | q - p } . all? { | d | d <= k } puts ok ? ' Yay! ' : ' :( '
a = [ ] 5 . times do a << gets . to_i end k = gets . to_i puts a [ 4 ] - a [ 0 ] <= k ? " Yay! " : " :( "
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } p ans
N = gets . to_f ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | w = ( N * h * n ) / ( 4 * h * n - N * ( n + h ) ) if w > 0 && w % 1 == 0 puts " exit 0 end end end
gets r = gets . to_i - 1 x = 2 $< . each { | _ | e = _ . to_i r += ( e - 1 ) / x if e == x x += 1 end } p r
require ' prime ' n , p = gets . chomp . split ( " " ) . map ( & :to_i ) gcd = p . prime_division . select { | array | array [ 1 ] >= n } . flatten . first while gcd && a = ( p / gcd ** n ) . prime_division . select { | array | array [ 1 ] >= n } . flatten . first do gcd = gcd * a end puts gcd || 1
k , s = gets . split ( ' ' ) . map ( & :to_i ) puts ( 0 .. k ) . map { | x | ( 0 .. k ) . map { | y | s - x - y } . select { | z | 0 <= z && z <= k } . size } . inject ( & :+ )
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) dif = a . zip ( b ) . map { | aa , bb | aa - bb } . sort . reverse ans = 0 if i = dif . index { | x | x < 0 } minus = dif [ i .. - 1 ] . reduce ( :+ ) ans = - 1 ( 0 ... i ) . each do | j | minus += dif [ j ] if minus >= 0 ans = n - i + 1 + j break end end end puts ans
gets a = gets . split ( ' ' ) . map ( & :to_i ) min = a [ 0 ] n = 0 a . each do | pi , i | next if min < pi n += 1 min = pi end puts n
x = 5 . times . each . map do | i | readline . to_i end x . sort! k = readline . to_i if x [ 4 ] - x [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
gets puts gets . count ( ' Y ' ) != 0 ? ' Four ' : ' Three '
K , S = gets . split . map ( & :to_i ) x , y , z = 0 k = K + 1 ans = 0 k . times do | x | k . times do | y | z = S - x - y ans += 1 if 0 <= z && z <= K end end puts ans
a = 3 . times . map { gets . chomp . split . map ( & :to_i ) } d = Array . new ( 2 ) { Array . new ( 3 ) } ( 0 .. 2 ) . each do | i | d [ 0 ] [ i ] = a [ i ] [ 0 ] - a [ i ] [ 1 ] d [ 1 ] [ i ] = a [ i ] [ 0 ] - a [ i ] [ 2 ] end key = 1 ( 0 .. 1 ) . each do | i | if d [ i ] . min != d [ i ] . max key = 0 end end puts key == 1 ? " Yes " : " No "
a , b , c , d , e , k = 6 . times . map { gets . to_i } numbers = [ a , b , c , d , e ] if numbers . max - numbers . min <= k puts " Yay! " else puts " :( " end
row_1_ary = STDIN . gets . split . map ( & :to_i ) row_2_ary = STDIN . gets . split . map ( & :to_i ) row_3_ary = STDIN . gets . split . map ( & :to_i ) all_ary = [ row_1_ary , row_2_ary , row_3_ary ] bol = true 0 . upto ( 1 ) { | i | 0 . upto ( 1 ) { | j | if all_ary [ i ] [ j ] - all_ary [ i ] [ j + 1 ] != all_ary [ i + 1 ] [ j ] - all_ary [ i + 1 ] [ j + 1 ] bol = false end } } puts bol == true ? ' Yes ' : ' No '
arr = [ ] arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i arr << gets . to_i k = gets . to_i check = 0 ( arr . size - 1 ) . times do | i | ( 1 ... 5 ) . each do | j | co = arr [ j ] - arr [ i ] check = 1 if co > k end end puts check . zero? ? :Yay! : ' :( '
require ' set ' class Hash def push ( key , value ) self [ key ] = [ ] if self [ key ] == nil self [ key ] . push ( value ) end end class Array def lower_bound ( value ) left = - 1 ; right = self . length ; while left + 1 < right mid = left + ( right - left ) / 2 ; if self [ mid ] >= value right = mid else left = mid end end right end def unique res = [ self . first ] each_cons ( 2 ) do | a , b | if a != b res . push ( b ) end end res end end def get_ints gets . chomp . split . map ( & :to_i ) end def get_ints_minus_one get_ints . map { | x | x - 1 } end def get_int gets . chomp . to_i end a = get_int b = get_int c = get_int d = get_int e = get_int k = get_int if e - a > k puts ' :( ' else puts ' Yay! ' end
n = gets . to_i b = Math . log ( n , 2 ) puts 2 ** b . floor
N = gets . to_i S = gets . chomp . split puts S . include? ( " Y " ) ? " Four " : " Three "
a = [ 0 , 0 , 0 , 0 , 0 , 0 ] a . map! { STDIN . gets . to_i } if a [ 4 ] - a [ 0 ] > a [ 5 ] puts " :( " else puts " Yay! " end
N = eval * $< ; t = 1 .. 4e3 ; t . find { | i | t . find { | j | n = 4 * i * j - N * ( i + j ) ; d = N * i * j ; n > 0 && d % n < 1 && $> << [ i , j , d / n ] * ?\s } }
N = gets . to_i P = gets . split . map ( & :to_i ) count = 1 P . inject { | min , i | count += 1 if i < min ; [ min , i ] . min } puts count
gets puts gets . split . include? ( ' Y ' ) ? :Four : :Three
N = gets . to_i A = gets . split . map ( & :to_i ) B = gets . split . map ( & :to_i ) husoku = 0 overpoints = [ ] result = 0 N . times do | i | if A [ i ] > B [ i ] overpoints . push ( A [ i ] - B [ i ] ) elsif A [ i ] < B [ i ] husoku += B [ i ] - A [ i ] result += 1 end end overpoints = overpoints . sort while husoku > 0 do point = overpoints . pop unless point puts - 1 exit end husoku -= point result += 1 end puts result
n = gets . to_i arr = gets . chomp . split ( ' ' ) if arr . uniq . size == 3 puts " Three " else puts " Four " end
c = Array . new ( 3 ) c [ 0 ] = gets . split ( / \s + / ) . map ( & :to_i ) c [ 1 ] = gets . split ( / \s + / ) . map ( & :to_i ) c [ 2 ] = gets . split ( / \s + / ) . map ( & :to_i ) bd = Array . new ( 3 ) ad = Array . new ( 3 ) result = true ( 0 ... 3 ) . each do | j | d1 = c [ 0 ] [ j ] - c [ 0 ] [ ( j + 1 ) % 3 ] d2 = c [ 1 ] [ j ] - c [ 1 ] [ ( j + 1 ) % 3 ] d3 = c [ 2 ] [ j ] - c [ 2 ] [ ( j + 1 ) % 3 ] if d1 == d2 && d2 == d3 bd [ j ] = d1 else result = false end end ( 0 ... 3 ) . each do | i | d1 = c [ i ] [ 0 ] - c [ ( i + 1 ) % 3 ] [ 0 ] d2 = c [ i ] [ 1 ] - c [ ( i + 1 ) % 3 ] [ 1 ] d3 = c [ i ] [ 2 ] - c [ ( i + 1 ) % 3 ] [ 2 ] if d1 == d2 && d2 == d3 ad [ i ] = d1 else result = false end end if result if bd [ 0 ] + bd [ 1 ] + bd [ 2 ] == 0 && ad [ 0 ] + ad [ 1 ] + ad [ 2 ] == 0 puts ( " Yes " ) else puts ( " No " ) end else puts ( " No " ) end
anten = [ ] 5 . times do x = gets . chomp . to_i anten << x end K = gets . chomp . to_i f = true for i in 0 .. 3 do for j in ( i + 1 ) .. 4 do if ( anten [ j ] - anten [ i ] ) > K then f = false break ; end end end if f then puts ' Yay! ' else puts ' :( ' end
A = 5 . times . map { gets . to_i } K = gets . to_i puts A [ 4 ] - A [ 0 ] <= K ? " Yay! " : " :( "
n = gets . to_i s = gets . split puts s . uniq . size == 3 ? :Three : :Four
arr = Array . new for i in 0 .. 4 do arr [ i ] = gets . chomp . to_i end M = arr . max m = arr . min k = gets . chomp . to_i if M - m < k + 1 then puts " Yay! " else puts " :( " end
require " prime " n , p = gets . split ( " " ) . map ( & :to_i ) c = Prime . prime_division ( p . to_i ) num = 1 c . each do | i , j | if j >= n aa = j / n bb = i ** aa num = num * bb end end puts num
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i sum1 = b - a sum2 = c - a sum3 = d - a sum4 = e - a sum5 = c - b sum6 = d - b sum7 = e - d sum8 = d - c sum9 = e - c sum10 = e - d if sum1 <= k && sum2 <= k && sum3 <= k && sum4 <= k && sum5 <= k && sum6 <= k && sum7 <= k && sum8 <= k && sum9 <= k && sum10 <= k puts " Yay! " else puts " :( " end
n = gets . to_i p = gets . chomp . split ( " " , n ) . map ( & :to_i ) ans = 0 min = p [ 0 ] p . each . with_index do | pp , i | if min >= pp ans += 1 end if min > pp min = pp end end p ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i arr = [ a , b , c , d , e ] arr . combination ( 2 ) { | i , j | if ( i - j ) . abs > k then puts " :( " exit end } puts " Yay! "
a = gets . to_i _ = gets . to_i _ = gets . to_i _ = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? " Yay! " : " :( "
n = gets . chomp . to_i a = gets . chomp . split ( ' ' ) . map ( & :to_i ) b = gets . chomp . split ( ' ' ) . map ( & :to_i ) d = ( 0 ... n ) . map { | i | b [ i ] - a [ i ] } . sort temp = d . select { | i | i > 0 } m = temp . count if m == 0 puts ( 0 ) else s = temp . inject ( & :+ ) 0 . upto ( n - 1 ) do | i | if d [ i ] >= 0 break else s += d [ i ] m += 1 end break if s <= 0 end puts ( s <= 0 ? m : - 1 ) end
N = gets . to_i P = gets . split . map ( & :to_i ) ans = 0 min = 200001 N . times do | i | if P [ i ] < min min = P [ i ] ans = ans + 1 end end puts ans
N = STDIN . gets . to_i s = STDIN . gets . split ( ' ' ) . uniq . size puts s == 3 ? ' Three ' : ' Four '
n = gets . chomp . to_i pn = gets . chomp . split . map ( & :to_i ) result = 1 if pn . size == 1 puts 1 exit end p_min = pn [ 0 ] pn . each_with_index do | pi , i | if i == pn . size - 1 next end if p_min >= pn [ i + 1 ] p_min = pn [ i + 1 ] result += 1 end end puts result
N = gets . chomp . to_i P = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 min = Float :: INFINITY P . each_with_index do | p_i , i | min = [ min , p_i ] . min count += 1 if min == p_i end puts count
n = gets . to_i a = gets . split . map ( & :to_i ) num = 0 min = 200000 ( 0 ... n ) . each do | i | if a [ i ] <= min num += 1 min = a [ i ] end end puts num
n , x = gets . split . map ( & :to_i ) dp = ( n + 2 ) . times . map { Array . new ( n , 10 ** 9 ) } dp [ 0 ] = gets . split . map ( & :to_i ) min = dp [ 0 ] . inject ( :+ ) n . times { | b | res = dp [ b ] . inject ( :+ ) + x * b min = res if min > res ( n - 1 ) . downto ( 0 ) { | i | dp [ b + 1 ] [ i % n ] = dp [ b ] [ ( i - 1 ) % n ] dp [ b + 1 ] [ i % n ] = dp [ b ] [ i % n ] if dp [ b + 1 ] [ i % n ] > dp [ b ] [ i % n ] } } p min
n = gets . to_i s = gets . split flag = false s . each do | e | flag = true if e == " Y " end puts flag ? " Four " : " Three "
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if b - a <= k && c - a <= k && c - b <= k && d - a <= k && d - b <= k && d - c <= k && e - a <= k && e - b <= k && e - c <= k && e - d <= k puts " Yay! " else puts " :( " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if k < e - a puts " :( " else puts " Yay! " end
list = gets . chomp . split ( ' ' ) k = list [ 0 ] . to_i s = list [ 1 ] . to_i count = 0 for l in 0 .. k do x = l if x > s then break end for m in 0 .. k do y = m subsum = x + y z = s - subsum if subsum > s then break end if z >= 0 && z <= k then count += 1 end end end p count
res = 0 k , n = gets . split . map ( & :to_i ) 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | res += 1 if n - ( x + y ) <= k && 0 <= n - ( x + y ) end end puts res
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end max_n = ary . flatten . max 0 . upto ( max_n ) do | a1 | b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 0 . upto ( max_n ) do | a2 | 0 . upto ( max_n ) do | a3 | if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' exit end end end end puts ' No '
K , S = gets . chomp . split . map { | v | v . to_i } x = y = z = ( 0 .. K ) . to_a c = 0 ( 0 .. K ) . to_a . each do | xv | xs = S - xv break if xs < 0 next if 0 < xs - K - K ( 0 .. K ) . to_a . each do | yv | break if xs - yv < 0 ys = xs - yv next if 0 < ys - K c += 1 end end puts c
line = STDIN . gets k , s = line . split ( ' ' ) . map ( & :to_i ) satisfied = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if ( z <= k && z >= 0 ) satisfied += 1 end end end puts satisfied
n = gets . to_i ary = gets . strip . split puts ary . uniq . length == 3 ? " Three " : " Four "
def doit ( str , min , cnt ) p = str . to_i if p < min cnt += 1 min = p end [ min , cnt ] end n = gets . to_i str = ' ' nums = [ ] min = 9999999 cnt = 0 while true c = $stdin . getc if 48 <= c . ord && c . ord <= 57 str << c else min , cnt = doit ( str , min , cnt ) if c == ' ' str = ' ' else break end end end puts cnt
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 for x in 0 .. k do for y in 0 .. k do z = s - x - y if 0 <= z and z <= k count += 1 end end end puts count
require ' prime ' N , P = gets . split . map ( & :to_i ) kou = Prime . prime_division ( P ) result = 1 kou . each do | p , f | result = p ** f . fdiv ( N ) . floor * result end puts result
a = 6 . times . map { gets . chomp . to_i } puts a [ 4 ] - a [ 0 ] <= a [ 5 ] ? ' Yay! ' : ' :( '
c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) c3 = gets . split . map ( & :to_i ) ans = ' No ' 100 . times do | i | a1 = i b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 if ( c2 [ 0 ] - b1 == c2 [ 1 ] - b2 ) && ( c2 [ 1 ] - b2 == c2 [ 2 ] - b3 ) if ( c3 [ 0 ] - b1 == c3 [ 1 ] - b2 ) && ( c3 [ 1 ] - b2 == c3 [ 2 ] - b3 ) ans = ' Yes ' isBreak = true end end break if isBreak end puts ans
n = gets . to_i strings = gets . chomp . split puts strings . include? ( " Y " ) ? " Four " : " Three "
n , p = STDIN . gets . split ( ' ' ) . map ( & :to_i ) if n == 1 puts p exit 0 end start = ( p ** ( 1.0 / n ) ) . to_i + 1 gcd = 1 start . downto ( 2 ) do | i | product = p if ( i ** n ) > product next end if product % ( i ** n ) != 0 next end product /= i ** n if product < 0 next end gcd = i break end p gcd
n = gets . chomp . to_i ary_p = gets . split ( " " ) . map ( & :to_i ) min = ary_p [ 0 ] ans = 1 n . times do | i | if min > ary_p [ i ] ans += 1 min = ary_p [ i ] end end puts ans
k , s = gets . split . map & :to_i c = 0 for x in 0 .. k for y in 0 .. k z = s - x - y if ( 0 <= z && z <= k ) c += 1 end end end p c
gets ; puts ( gets . chomp . split . uniq . size == 3 ) ? " Three " : " Four "
x = [ ] 10 . times do | i | x [ i ] = gets . to_i end if x [ 4 ] - x [ 0 ] <= x [ 5 ] then puts " Yay! " else puts " :( " end
n = gets . to_i k = gets . chomp . split . sort . uniq . count if k == 3 puts " Three " else puts " Four " end
c0 = gets . split . map ( & :to_i ) c1 = gets . split . map ( & :to_i ) c2 = gets . split . map ( & :to_i ) a0 = 0 b0 = c0 [ 0 ] b1 = c0 [ 1 ] b2 = c0 [ 2 ] a1 = c1 [ 0 ] - b0 a2 = c2 [ 0 ] - b0 if a1 + b1 == c1 [ 1 ] && a1 + b2 == c1 [ 2 ] && a2 + b1 == c2 [ 1 ] && a2 + b2 == c2 [ 2 ] puts ' Yes ' else puts ' No ' end
a = 5 . times . map { gets . to_i } k = gets . to_i def can_communicate ( a , k ) ( 0 .. 4 ) . each do | i | ( 0 .. 4 ) . each do | j | return false if ( a [ i ] - a [ j ] ) . abs > k end end true end puts can_communicate ( a , k ) ? ' Yay! ' : ' :( '
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) cnt = 0 b = a . max n . times do | i | if b >= a [ i ] cnt += 1 b = a [ i ] end end puts cnt
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a > k puts " :( " else puts " Yay! " end
N = gets . to_i puts ( gets . chomp . split . uniq . length == 3 ? ' Three ' : ' Four ' )
a = gets . to_i 3 . times { _ = gets } e = gets . to_i k = gets . to_i puts e - a > k ? ' :( ' : ' Yay! '
def read_i gets . chomp . split ( ' ' ) . map ( & :to_i ) end def ng puts ' :( ' end def ok puts ' Yay! ' end a = [ ] 5 . times do | i | a << read_i [ 0 ] end k = read_i [ 0 ] if ( a [ 4 ] - a [ 0 ] ) > k ng elsif ( a [ 4 ] - a [ 1 ] ) > k ng elsif ( a [ 4 ] - a [ 2 ] ) > k ng elsif ( a [ 4 ] - a [ 3 ] ) > k ng else ok end
inputs = [ ] 5 . times { inputs << gets . to_i } k = gets . to_i puts inputs . combination ( 2 ) . map { | e | e [ 1 ] - e [ 0 ] } . any? { | e | e > k } ? ' :( ' : ' Yay! '
gets puts gets . chomp . split . uniq . size == 4 ? " Four " : " Three "
require ' prime ' N , P = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 1 P . prime_division . each do | prime , pow | ans *= prime ** ( pow / N ) if pow >= N end puts ans
n = gets . to_i nums = gets . split . map ( & :to_i ) min = 300_000 ans = [ ] nums . each_with_index do | num , i | if num <= min min = num ans << i end end puts ans . size
c = [ ] x , y = [ 0 ] , [ ] 3 . times do | i | c << gets . chomp . split . map ( & :to_i ) end 3 . times do | i | y [ i ] = c [ 0 ] [ i ] - x [ 0 ] end 3 . times do | i | x [ i ] = c [ i ] [ 0 ] - y [ 0 ] end 3 . times do | i | 3 . times do | j | if x [ i ] + y [ j ] != c [ i ] [ j ] puts " No " exit end end end puts " Yes "
N = gets . to_i P = gets . split . map ( & :to_i ) min = 1 << 60 ans = 0 P . each do | n | if n <= min ans += 1 end min = n if n < min end puts ans
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y ans += 1 if z >= 0 && z <= k end end puts ans
h = Hash . new ( 0 ) num = gets . to_i st = gets . chomp! . split ( " " ) st . each do | s | h [ s ] += 1 end if h . keys . length == 3 puts " Three " elsif h . keys . length == 4 puts " Four " end
c0 = gets . chomp . split ( " " ) . map ( & :to_i ) c1 = gets . chomp . split ( " " ) . map ( & :to_i ) c2 = gets . chomp . split ( " " ) . map ( & :to_i ) a01 = c1 [ 0 ] - c0 [ 0 ] a02 = c2 [ 0 ] - c0 [ 0 ] b01 = c0 [ 1 ] - c0 [ 0 ] b02 = c0 [ 2 ] - c0 [ 0 ] for a0 in 0 .. 100 do for b0 in 0 .. 100 do a1 = a0 + a01 a2 = a0 + a02 b1 = b0 + b01 b2 = b0 + b02 if c0 [ 0 ] == a0 + b0 and c0 [ 1 ] == a0 + b1 and c0 [ 2 ] == a0 + b2 and c1 [ 0 ] == a1 + b0 and c1 [ 1 ] == a1 + b1 and c1 [ 2 ] == a1 + b2 and c2 [ 0 ] == a2 + b0 and c2 [ 1 ] == a2 + b1 and c2 [ 2 ] == a2 + b2 then puts " Yes " exit end end end puts " No "
ARGF . each { | l | l . chomp . split ( ' ' ) . permutation ( 4 ) . to_a . each { | e | if e . join == ' 1974 ' puts ' YES ' exit end } } puts ' NO '
* a , k = $< . map & :to_i ; puts a [ - 1 ] - a [ 0 ] > k ? ' :( ' : ' Yay! '
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) if ( t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] == t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] ) puts " infinity " exit end if ( a [ 0 ] > b [ 0 ] ) a , b = b , a end u = t [ 0 ] * a [ 0 ] + t [ 1 ] * a [ 1 ] v = t [ 0 ] * b [ 0 ] + t [ 1 ] * b [ 1 ] if ( v > u ) puts 0 exit end ok = 0 ng = 2 ** 62 while ( ng - ok > 1 ) mid = ( ok + ng ) / 2 ; if ( mid * u + t [ 0 ] * a [ 0 ] < mid * v + t [ 0 ] * b [ 0 ] ) ok = mid else ng = mid end end ans = ok * 2 + 1 if ng * u + t [ 0 ] * a [ 0 ] == ng * v + t [ 0 ] * b [ 0 ] ans += 1 end puts ans
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] def check ( a , b , c ) 3 . times do | i | 3 . times do | j | if c [ i ] [ j ] != a [ j ] + b [ i ] return end end end puts " Yes " exit end 0 . upto ( 100 ) do | i | 0 . upto ( 100 ) do | j | if i + j == c [ 0 ] [ 0 ] a = j , c [ 0 ] [ 1 ] - i , c [ 0 ] [ 2 ] - i if c [ 1 ] [ 0 ] - j >= 0 && c [ 2 ] [ 0 ] - j >= 0 b = i , c [ 1 ] [ 0 ] - j , c [ 2 ] [ 0 ] - j check ( a , b , c ) end end end end puts " No "
k , s = gets . split . map & :to_i l = k + 1 a = 0 l . times do | x | l . times do | y | z = s - x - y a += 1 if z >= 0 && z <= k end end puts a
T1 , T2 = gets . split . map ( & :to_i ) a1 , a2 = gets . split . map ( & :to_i ) b1 , b2 = gets . split . map ( & :to_i ) A1 , A2 , B1 , B2 = a1 > b1 ? [ a1 , a2 , b1 , b2 ] : [ b1 , b2 , a1 , a2 ] XA = A1 * T1 + A2 * T2 XB = B1 * T1 + B2 * T2 if XA > XB ans = " 0 " elsif XA == XB ans = " infinity " else XM = ( A1 - B1 ) * T1 ans = ( XM / ( XB - XA ) * 2 + ( XM %( XB-XA ) == 0 ? 0 : 1 ) ) . to_s end puts ans
max , sum = gets . chomp . split ( " " ) . map ( & :to_i ) kind = 0 ( 0 .. max ) . each do | x | ( 0 .. max ) . each do | y | z = sum - x - y kind += 1 if 0 <= z && z <= max end end puts kind
z = ( 1 .. 5 ) . map { gets . to_i } k = gets . to_i f = true z . combination ( 2 ) { | x , y | f = f && ( ( x - y ) . abs <= k ) } puts f ? " Yay! " : " :( "
require ' prime ' N , P = gets . chomp . split ( ' ' ) . map ( & :to_i ) answer = 1 prime_division = Prime . prime_division ( P ) while prime_division . any? { | _ , e | e >= N } candidate_list = prime_division . select { | n , e | e >= N } answer *= candidate_list . map { | n , _ | n } . reduce ( & :* ) prime_division = candidate_list . map { | n , e | [ n , e - N ] } end puts answer
input = gets . split ( " " ) if input . include? ( " 1 " ) && input . include? ( " 9 " ) && input . include? ( " 7 " ) && input . include? ( " 4 " ) then puts ( " YES " ) else puts ( " NO " ) end
A = [ ] for i in 0 ... 5 A . push ( gets . chomp . to_i ) end K = gets . chomp . to_i ans = ( A [ 4 ] - A [ 0 ] <= K ) puts ( ans ? " Yay! " : " :( " )
c = 3 . times . map { gets . split . map ( & :to_i ) } total_sum = c . map { | r | r . inject ( :+ ) } . inject ( :+ ) daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ i ] } . inject ( :+ ) skew_daig_sum = [ * 0 .. 2 ] . map { | i | c [ i ] [ 2 - i ] } . inject ( :+ ) flag1 = total_sum == 3 * daig_sum flag2 = daig_sum == skew_daig_sum puts flag1 && flag2 ? " Yes " : " No "
c = [ ] 3 . times { c << gets . split . map ( & :to_i ) } if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] && c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] == c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] puts " Yes " else puts " No " end
N = gets . to_i nums = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 nums . each do | ai | if ai < min min = ai ans += 1 end end p ans
k , s = gets . split ( ' ' ) . map ( & :to_i ) puts ( k + 1 ) . times . map { | x | ( k + 1 ) . times . map { | y | s - x - y } . select { | z | 0 <= z && z <= k } . size } . inject ( & :+ )
require ' pp ' $DEBUG ? define_method ( :dpp ) { | e | pp e } : define_method ( :dpp ) { | e | } def min ( a , b ) return a < b ? a : b end def gets_n_and_i_list ( ) return gets . chomp . to_i , gets . chomp . split ( " " ) . map ( & :to_i ) end N , p_list = gets_n_and_i_list count = 0 min = N + 1 p_list . each do | p | if p < min count += 1 min = min ( p , min ) end end puts count
a = [ ] 6 . times { | i | a [ i ] = gets . to_i } s = a [ 0 .. 4 ] puts s . max - s . min > a [ 5 ] ? ' :( ' : ' Yay! '
d = [ ] 5 . times do d << gets . to_i end k = gets . to_i d . combination ( 2 ) do | c | if ( c [ 0 ] - c [ 1 ] ) . abs > k puts ' :( ' exit end end puts ' Yay! '
n = gets . to_i m = 2 ans = gets . to_i - 1 ( n - 1 ) . times do a = gets . to_i if a > m ans += ( a - 1 ) / m elsif a == m m += 1 end end puts ans
s = gets . chomp . split ( " " ) if s . include? ( " 1 " ) && s . include? ( " 9 " ) && s . include? ( " 7 " ) && s . include? ( " 4 " ) puts ( " YES " ) else puts ( " NO " ) end
n = gets . to_i s = gets . split ( " " ) s = s . group_by ( & :itself ) . map { | key , value | [ key , value . count ] } . to_h cnt = s . values if cnt . length == 3 puts " Three " else puts " Four " end
N = gets . to_i ; a = gets . split . uniq . count ; puts ' Four ' if a === 4 ; puts ' Three ' if a === 3 ;
ps = Array . new ( 5 ) { gets . to_i } k = gets . to_i ok = ps . max - ps . min <= k puts ok ? ' Yay! ' : ' :( '
N = gets . to_i P = gets . split . map ( & :to_i ) min = Float :: INFINITY ans = 0 P . each do | n | if min > n min = n ans += 1 end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i array = [ a , b , c , d , e ] puts e - a > k ? " :( " : " Yay! "
a = [ gets . to_i ] a << gets . to_i a << gets . to_i a << gets . to_i a << gets . to_i k = gets . to_i puts a . combination ( 2 ) . to_a . all? { | ( x , y ) | ( x - y ) . abs <= k } ? ' Yay! ' : ' :( '
n = gets . to_i x = 1 while x * 2 <= n x *= 2 end puts x
puts gets . split . join . chars . sort == %w( 1 4 7 9 ) ? ' YES ' : ' NO '
a = gets . to_i b = gets . split . uniq puts b . size == 3 ? " Three " : " Four "
arr_1 = gets . split . map ( & :to_i ) arr_2 = gets . split . map ( & :to_i ) arr_3 = gets . split . map ( & :to_i ) a1 , a2 , a3 = 0 , 0 , 0 while a1 <= arr_1 [ 0 ] b1 = arr_1 [ 0 ] - a1 while a2 <= arr_1 [ 1 ] b2 = arr_2 [ 1 ] - a2 if a1 + b2 == arr_2 [ 0 ] && a2 + b1 == arr_1 [ 1 ] while a3 <= arr_1 [ 2 ] b3 = arr_3 [ 2 ] - a3 if a1 + b3 == arr_3 [ 0 ] && a3 + b1 == arr_1 [ 2 ] if a2 + b3 == arr_3 [ 1 ] && a3 + b2 == arr_2 [ 2 ] print ( " Yes \n " ) exit end end a3 += 1 end end a3 = 0 a2 += 1 end a2 = 0 a1 += 1 end print ( " No \n " )
N = gets . to_i ( 1 .. 3500 ) . each do | h | ( 1 .. 3500 ) . each do | n | x = h * n * N y = 4 * h * n - N * ( h + n ) if y > 0 && x % y == 0 puts " %d %d %d " % [ h , n , x / y ] exit end end end
n = gets . to_i x = gets . chomp . split y = x . uniq . count if y == 4 then puts " Four " else puts " Three " end
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | i | ( 0 .. k ) . each do | j | z = s - i - j if 0 <= z && z <= k cnt += 1 end end end puts cnt
a = [ ] ( 0 .. 5 ) . each do b = gets . chomp a <<b . to_i end a . combination ( 2 ) do | c | if c [ 1 ] - c [ 0 ] > a [ 5 ] puts ' :( ' exit end end puts ' Yay! '
gets p_arr = gets . split . map ( & :to_i ) min = p_arr [ 0 ] result = 0 p_arr . each do | n | if min >= n result += 1 end if min > n min = n end end puts result
table = 3 . times . map { gets . split . map ( & :to_i ) } table2 = table . transpose diffs = table [ 0 ] . each_cons ( 2 ) . map { | a , b | a - b } diffs2 = table2 [ 0 ] . each_cons ( 2 ) . map { | a , b | a - b } if table . all? { | row | row . each_cons ( 2 ) . map { | a , b | a - b } == diffs } && table2 . all? { | row | row . each_cons ( 2 ) . map { | a , b | a - b } == diffs2 } puts ' Yes ' else puts ' No ' end
gets n = gets . chomp . split ( " " ) . uniq . length if n == 3 then puts " Three " else puts " Four " end
n = gets . to_i exp = 0 while true if 2 ** exp > n break end exp += 1 end puts 2 ** ( exp - 1 )
puts [ :Three , :Four ] [ ` dd ` . split . uniq . size - 4 ]
d , n = gets . split ( " " ) . map ( & :to_i ) t = Array . new ( d ) for i in 0 ... d t [ i ] = gets . to_i end a = Array . new ( n ) b = Array . new ( n ) c = Array . new ( n ) for i in 0 ... n a [ i ] , b [ i ] , c [ i ] = gets . split ( " " ) . map ( & :to_i ) end dp = Array . new ( n ) for i in 0 ... n if a [ i ] <= t [ 0 ] && t [ 0 ] <= b [ i ] dp [ i ] = 0 else dp [ i ] = - 1 end end for i in 1 ... d dpw = Array . new ( n , 0 ) for j in 0 ... n if a [ j ] <= t [ i ] && t [ i ] <= b [ j ] dpw [ j ] = 0 for k in 0 ... n if dp [ k ] >= 0 dpw [ j ] = [ dpw [ j ] , dp [ k ] + ( c [ k ] - c [ j ] ) . abs ] . max end end else dpw [ j ] = - 1 end end for j in 0 ... n dp [ j ] = dpw [ j ] end end all = 0 for i in 0 ... n all = [ all , dp [ i ] ] . max end print ( all , " \n " )
n = gets . chomp . to_i p = gets . chomp . split ( / \s + / ) . map { | e | e . to_i } count = 0 min = p [ 0 ] n . times { | i | count += 1 if min >= p [ i ] min = p [ i ] if min > p [ i ] } puts count
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts ' Yay! ' else puts ' :( ' end
pos = [ ] 5 . times do pos << gets . chomp . to_i end k = gets . chomp . to_i pos . combination ( 2 ) do | a , b | if ( a - b ) . abs > k puts " :( " exit end end puts " Yay! "
def dist ( a , b ) ( a - b ) . abs end dists = [ ] dists << STDIN . gets . to_i dists << STDIN . gets . to_i dists << STDIN . gets . to_i dists << STDIN . gets . to_i dists << STDIN . gets . to_i threshold = STDIN . gets . to_i if dists . combination ( 2 ) . any? { | a , b | dist ( a , b ) > threshold } STDOUT . puts ' :( ' else STDOUT . puts ' Yay! ' end
a = [ ] STDIN . each { | x | a . push ( x . chomp . to_i ) } k = a [ 5 ] b = a [ 0 .. - 2 ] . sort ( ) if b [ - 1 ] - b [ 0 ] > k puts " :( " else puts " Yay! " end
n = gets . to_i arr = [ ] s = 0 ans = 0 a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) i = 0 b . each do | v | t = v - a [ i ] if t > 0 s += t ans += 1 else arr . push ( - t ) end i += 1 end arr . sort! . reverse! arr . each do | v | break if s <= 0 s -= v ans += 1 end puts s <= 0 ? ans : - 1
C = readlines . map { | l | l . split . map ( & :to_i ) } a = [ 0 , nil , nil ] b = [ nil ] * 3 ( 0 .. 2 ) . each { | i | b [ i ] = C [ 0 ] [ i ] - 0 } ( 1 .. 2 ) . each { | i | a [ i ] = C [ i ] [ 0 ] - b [ 0 ] } puts [ 1 , 2 ] . product ( [ 1 , 2 ] ) . all? { | i , j | a [ i ] + b [ j ] == C [ i ] [ j ] } ? ' Yes ' : ' No '
number = gets . split ( ' ' ) count = 0 k = number [ 0 ] . to_i s = number [ 1 ] . to_i for x in 0 .. k do for y in 0 .. k do z = s - x - y if z <= k and z >= 0 then count = count + 1 end end end puts count
k , s = gets . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
l0 = gets . split ( " " ) . map! { | i | i . to_i } l1 = gets . split ( " " ) . map! { | i | i . to_i } l2 = gets . split ( " " ) . map! { | i | i . to_i } b1 = l0 [ 0 ] ; b2 = l1 [ 0 ] ; b3 = l2 [ 0 ] a1 = 0 ; a2 = l0 [ 1 ] - b1 ; a3 = l0 [ 2 ] - b1 if ( l0 [ 0 ] == a1 + b1 ) && ( l0 [ 1 ] == a2 + b1 ) && ( l0 [ 2 ] == a3 + b1 ) && ( l1 [ 0 ] == a1 + b2 ) && ( l1 [ 1 ] == a2 + b2 ) && ( l1 [ 2 ] == a3 + b2 ) && ( l2 [ 0 ] == a1 + b3 ) && ( l2 [ 1 ] == a2 + b3 ) && ( l2 [ 2 ] == a3 + b3 ) then puts " Yes " else puts " No " end
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i mi , mx = [ a , b , c , d , e ] . minmax puts mx - mi > k ? ' :( ' : ' Yay! '
n , p = gets . split . map ( & :to_i ) require ' prime ' factors = p . prime_division ans = 1 factors . map { | value | a = value [ 0 ] b = value [ 1 ] count = b / n ans *= a ** count } puts ans
w , * v = 0 eval ' N,*A= ' + ` dd ` . split * ?, c = A [ N , N ] . count { d = _1 - A . shift ; d > 0 ? w += d : ! ( v <<d ) } + v . sort . count { _1 < w += _1 } p w > 0 ? - 1 : c
puts gets . split . map ( & :to_i ) . sort == [ 1 , 4 , 7 , 9 ] ? " YES " : " NO "
n = gets . to_i _p = gets . split . map ( & :to_i ) ans = 1 min = _p [ 0 ] if n != 1 for i in 1 .. n - 1 if min >= _p [ i ] ans += 1 min = _p [ i ] end end end puts ans
require ' prime ' n , pp = gets . chomp . split . map ( & :to_i ) if pp == 1 puts 1 else pd = Prime . prime_division ( pp ) . select { | t | t [ 1 ] >= n } ans = 1 pd . each do | pdd | ans *= pdd [ 0 ] ** ( pdd [ 1 ] / n ) end puts ans end
limit , sum = gets . chomp . split . map ( & :to_i ) cnt = 0 ( 0 .. limit ) . each do | a | ( 0 .. limit ) . each do | b | c = sum - a - b cnt += 1 if 0 <= c && c <= limit end end puts cnt
h , r = gets . split . map ( & :to_i ) if h >= 0 puts ' 1 ' elsif h + r == 0 puts ' 0 ' elsif h + r < 0 puts ' -1 ' else puts ' 1 ' end
c = [ ] 3 . times { c << gets . split ( ) . map ( & :to_i ) } d = Array . new ( 3 ) . map { Array . new ( 3 , 0 ) } ( 0 .. 2 ) . each do | i | ( 0 .. 2 ) . each do | j | d [ i ] [ j ] = c [ i ] [ 0 ] + c [ 0 ] [ j ] - c [ 0 ] [ 0 ] end end puts c == d ? :Yes : :No
k , s = gets . chomp . split . map ( & :to_i ) count = ( 0 .. k ) . inject ( 0 ) { | sum , i | ( 0 .. k ) . each { | j | sum = ( s - i - j <= k ) && ( s - i - j >= 0 ) ? sum + 1 : sum } sum } puts count
def is_multiple_of_3? ( array ) sum = 0 array . each do | line | sum += line . inject ( :+ ) end sum % 3 == 0 end def have_same_diffs? ( array ) diffs = [ ] array . each do | line | diffs << [ 0 , line [ 1 ] - line [ 0 ] , line [ 2 ] - line [ 0 ] ] end diffs [ 0 ] == diffs [ 1 ] && diffs [ 0 ] == diffs [ 2 ] end grid = [ ] 3 . times do grid << gets . split . map ( & :to_i ) end flag = true flag = is_multiple_of_3? ( grid ) if flag flag = have_same_diffs? ( grid ) if flag flag = have_same_diffs? ( grid . transpose ) if flag puts flag ? " Yes " : " No "
n = gets . to_i p 2 ** Math . log2 ( n ) . floor
require ' prime ' s = gets . split . map { | i | i . to_i } ans = 1 prime_num = Prime . prime_division ( s [ 1 ] ) prime_num . each do | num | if num [ 1 ] / s [ 0 ] >= 1 ans *= num [ 0 ] ** ( num [ 1 ] / s [ 0 ] ) end end puts ans
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) then puts " Yes " else puts " No " end
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts " Yay! " else puts " :( " end
ks = gets . strip k , s = ks . split ( ' ' ) . map ( & :to_i ) count = 0 combs = Array ( 0 .. k ) . repeated_permutation ( 2 ) combs . each do | x , y | z = s - x - y count += 1 if ( 0 .. k ) . include? ( z ) end puts count
n = gets . split . map ( & :to_i ) . sort puts n == [ 1 , 4 , 7 , 9 ] ? :YES : :NO
n = gets . to_i a = gets . chomp . split . map ( & :to_i ) min = a [ 0 ] ans = 1 1 . upto ( n - 1 ) do | i | if min > a [ i ] min = a [ i ] ans += 1 end end puts ans
N = gets . to_i x = 3500 if 4 <= N n = N / 4 else n = 1 end n . upto ( x ) do | i | i . upto ( x ) do | j | r = Rational ( 4 * i * j - N * j - N * i , N * i * j ) if r . numerator == 1 puts [ i , j , r . denominator ] . join ( ' ' ) exit end end end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) res = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z >= 0 && z <= k res += 1 end end end print ( "
n , s = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. n ) . each do | i | ( 0 .. n ) . each do | j | k = s - ( i + j ) count += 1 if k >= 0 && k <= n end end puts count
N = gets . to_i Ss = gets . chomp . split if Ss . uniq . length == 3 then puts ( " Three " ) elsif Ss . uniq . length == 4 then puts ( " Four " ) end
n = gets . to_i num = gets . strip . split . map ( & :to_s ) if num . include? ( " Y " ) puts " Four " else puts " Three " end
twod_array = [ ] twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) twod_array << gets . chomp . split ( ' ' ) . map ( & :to_i ) sa1 = ( twod_array [ 0 ] [ 0 ] - twod_array [ 0 ] [ 1 ] ) . abs sa2 = ( twod_array [ 0 ] [ 0 ] - twod_array [ 0 ] [ 2 ] ) . abs result = ' Yes ' result = ' No ' if ( ( twod_array [ 1 ] [ 0 ] - twod_array [ 1 ] [ 1 ] ) . abs != sa1 || ( twod_array [ 1 ] [ 0 ] - twod_array [ 1 ] [ 2 ] ) . abs != sa2 ) result = ' No ' if ( ( twod_array [ 2 ] [ 0 ] - twod_array [ 2 ] [ 1 ] ) . abs != sa1 || ( twod_array [ 2 ] [ 0 ] - twod_array [ 2 ] [ 2 ] ) . abs != sa2 ) puts result
f = n = ( s = [ ] . tap { | s | 6 . times { s <<gets . hex } } ) . pop s . combination ( 2 ) { | a , b | b - a > n && ( f = false ) } puts f ?' Yay! ' : ' : ( '
N = gets . to_i num = gets . strip . split . map ( & :to_i ) ary = Array . new ( N , 0 ) ary [ 0 ] = num [ 0 ] for i in 1 .. N - 1 if ary [ i - 1 ] > num [ i ] ary [ i ] = num [ i ] else ary [ i ] = ary [ i - 1 ] end end s = 0 for i in 0 .. N - 1 if ary [ i ] == num [ i ] s += 1 end end puts s
lst = [ ] 5 . times do | i | lst [ i ] = gets . chomp . to_i end k = gets . chomp . to_i for i in 0 .. 3 do for j in i + 1 .. 4 do if lst [ j ] - lst [ i ] > k puts " :( " exit 0 end end end puts " Yay! "
a , b = gets . chomp . split ( " " ) . map ( & :to_i ) num = 0 ( a + 1 ) . times do | k | ( a + 1 ) . times do | j | res = b - k - j if 0 <= res && res <= a num += 1 end end end puts num
N = gets . to_i as = Array . new ( N ) N . times do | i | as [ i ] = gets . to_i end min = 1 ans = 0 pt = 0 while pt < N if as [ pt ] <= min min = as [ pt ] + 1 if min < as [ pt ] + 1 pt += 1 elsif as [ pt ] - min <= min min = 2 if min == 1 ans += 1 pt += 1 else n = ( as [ pt ] - 1 ) / min - 1 ans += n as [ pt ] -= n * min end end puts ans
INF = 1 << 30 loop do n = gets . to_i break if n == 0 ctys = Array . new ( n ) { gets . strip } oks = Array . new ( n ) { true } for i in ( 0 ... n ) for j in ( 0 ... n ) if i != j && oks [ j ] && ctys [ j ] . include? ( ctys [ i ] ) oks [ i ] = false end end end ctys = ( 0 ... n ) . select { | i | oks [ i ] } . map { | i | ctys [ i ] } n = ctys . length plens = Array . new ( n ) { Array . new ( n ) { 0 } } for i in ( 0 ... n ) ci = ctys [ i ] li = ci . length for j in ( 0 ... n ) next if i == j cj = ctys [ j ] lj = cj . length k = ( li < lj ) ? li : lj while k > 0 break if ci [ li - k , k ] == cj [ 0 , k ] k -= 1 end plens [ i ] [ j ] = lj - k end end dp = Array . new ( 1 << n ) { Array . new ( n ) { INF } } for i in ( 0 ... n ) dp [ 1 << i ] [ i ] = ctys [ i ] . length end for bits in ( 1 ... ( 1 << n ) ) for i in ( 0 ... n ) bi = 1 << i if ( bits & bi ) != 0 for j in ( 0 ... n ) bj = 1 << j if ( bits & bj ) == 0 bitsj = bits | bj ndp = dp [ bits ] [ i ] + plens [ i ] [ j ] dp [ bitsj ] [ j ] = ndp if dp [ bitsj ] [ j ] > ndp end end end end end puts dp [ ( 1 << n ) - 1 ] . min end
n = gets . to_i p = gets . split . map ( & :to_i ) m = 1 / 0.0 c = 0 n . times do | i | if p [ i ] <= m c += 1 m = p [ i ] end end puts c
n = gets . to_i 1 . upto ( 3500 ) do | x | 1 . upto ( 3500 ) do | y | nume = n * x * y deno = 4 * x * y - n * x - n * y if deno > 0 && nume % deno == 0 z = nume / deno puts [ x , y , z ] . join ( " " ) exit end end end
_n = gets . to_i puts gets . chomp . split . uniq . length == 4 ? " Four " : " Three "
gets ; puts gets . count ( " Y " ) > 0 ? :Four : :Three
n = gets . to_i a = [ ] n . times do | i | a << gets . to_i end min = 1 ans = 0 n . times do | i | if i == 0 ans += a [ 0 ] - 1 min = 2 else if a [ i ] < min next elsif a [ i ] == min min += 1 else if a [ i ] % min == 0 ans += a [ i ] / min - 1 else ans += a [ i ] / min end end end end puts ans
gets . to_i puts gets . chomp . split ( " " ) . include? ( ' Y ' ) ? ' Four ' : ' Three '
n , x = gets . chomp . split ( " " ) . map ( & :to_i ) a = gets . chomp . split ( " " ) . map ( & :to_i ) b = Marshal . load ( Marshal . dump ( a ) ) ans = 10 ** 13 for i in 0 .. n - 1 for j in 0 .. n - 1 b [ j ] = a [ ( j - i ) % n ] if b [ j ] > a [ ( j - i ) % n ] end bsum = b . inject ( :+ ) + x * i ans = bsum if ans > bsum end puts ans
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) min = 2 * 10 ** 6 count = 0 ps . each do | p | if min >= p count += 1 end min = [ min , p ] . min end puts count
K , S = gets . split . map ( & :to_i ) ans = 0 ( 0 .. K ) . each do | x | y_z = S - x next if y_z < 0 next if K * 2 < y_z ( 0 .. K ) . each do | y | z = y_z - y next if z < 0 next if K < z ans += 1 end end p ans
require ' prime ' n , q = gets . split . map & :to_i result = 1 q . prime_division . each do | i , j | result *= i ** ( j / n ) end puts result
m = gets . to_i n = gets . chomp . split . map ( & :to_i ) ans = 0 min = 10 ** 10 for i in 0 .. m - 1 if n [ i ] <= min ans += 1 min = n [ i ] end end puts ans
k , s = gets . split . map ( & :to_i ) result = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | result += 1 if x + y <= s && s - x - y <= k end end puts result
a = [ ] a [ 0 ] = gets . to_i a [ 1 ] = gets . to_i a [ 2 ] = gets . to_i a [ 3 ] = gets . to_i a [ 4 ] = gets . to_i k = gets . to_i flag = true 5 . times { | i | 5 . times { | j | if a [ i ] > a [ j ] if a [ i ] - a [ j ] > k flag = false end end } } if flag puts " Yay! " else puts " :( " end
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) plus = [ ] minus = [ ] minus_sum = 0 plus_sum = 0 for i in 0 .. n - 1 v = a [ i ] - b [ i ] if v > 0 plus << v plus_sum += v elsif v < 0 minus << v minus_sum += v . abs end end if plus_sum < minus_sum p - 1 exit end plus . sort! plus = plus . reverse count = minus . length while minus_sum > 0 minus_sum -= plus . shift count += 1 end p count
a , b , c = gets . split . map ( & :to_i ) d , e , f = gets . split . map ( & :to_i ) g , h , i = gets . split . map ( & :to_i ) ok = true if ! ( a - d == b - e && b - e == c - f ) ok = false elsif ! ( d - g == e - h && e - h == f - i ) ok = false elsif ! ( a - b == d - e && d - e == g - h ) ok = false elsif ! ( b - c == e - f && e - f == h - i ) ok = false end puts ok ? " Yes " : " No "
a , b , c , d , e , k = gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i , gets . chomp . to_i result = [ ] result << ( a - b ) . abs result << ( a - c ) . abs result << ( a - d ) . abs result << ( a - e ) . abs result << ( b - c ) . abs result << ( b - d ) . abs result << ( b - e ) . abs result << ( c - d ) . abs result << ( c - e ) . abs result << ( d - e ) . abs i = 0 while result . size != i if result [ i ] <= k else puts " :( " exit end i += 1 end puts " Yay! " exit
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
n , * a = $< . map { | l | l . split . map & :to_i } ; t = 1 ; a . zip ( n ) { | x , m | s = 0 ; x . map { | k | s += k * ~ ( m -= 2 ) } ; t *= s } ; p t . % 10 ** 9 + 7
require ' prime ' input = STDIN . read . chomp . split ( " " ) N = input [ 0 ] . to_i P = input [ 1 ] . to_i d = Prime . prime_division ( P ) primes = [ ] if d . length == 0 puts 1 elsif N == 1 puts P else d . sort_by { | r | r [ 0 ] } . reverse . each { | r | if r [ 1 ] >= N for j in 1 .. ( r [ 1 ] / N ) primes . push ( r [ 0 ] ) end end } puts primes . reduce ( 1 ) { | a , b | a * b } end
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
eval " N,X,*A= " + ` dd ` . split * ?, p ( 0 .. N ) . map { | i | j = - 2 i > 0 && A = A . map { | a | [ a , A [ j += 1 ] ] . min } i * X + A . reduce ( :+ ) } . min
N = gets . to_i a = case N % 4 when 0 , 2 [ N / 2 , N , N ] when 1 a = 4 r / N ( N / 4 + 1 ) . upto ( 3500 ) { | i | b = a - 1 r / i i . upto ( 3500 ) { | j | c = b - 1 r / j if c . numerator == 1 puts [ i , j , c . denominator ] * ?\s exit end } } when 3 g = N / 4 + 1 [ g , N * g + 1 , N * g * ( N * g + 1 ) ] end puts a * ?\s
X = 6 . times . map { gets . to_i } if X [ 4 ] - X [ 0 ] <= X [ 5 ] puts " Yay! " else puts " :( " end
a = [ ] 6 . times { a << gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z >= 0 && z <= k end end puts count
T1 , T2 = gets . split . map & :to_i A1 , A2 = gets . split . map & :to_i B1 , B2 = gets . split . map & :to_i a1 = T1 * A1 a2 = T2 * A2 b1 = T1 * B1 b2 = T2 * B2 if a1 + a2 == b1 + b2 puts :infinity elsif ( a1 - b1 ) * ( ( a1 - b1 ) + ( a2 - b2 ) ) > 0 puts 0 else puts 2 * ( ( b1 - a1 ) / ( ( a1 - b1 ) + ( a2 - b2 ) ) ) + ( ( ( b1 - a1 ) % ( ( a1 - b1 ) + ( a2 - b2 ) ) == 0 ) ? 0 : 1 ) end
require ' pp ' C = Array . new ( 3 ) { Array . new ( 3 ) } C [ 0 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } C [ 1 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } C [ 2 ] = gets . chomp . split ( ' ' ) . map { | n | n . to_i } flg = true i = 1 1 . upto ( 2 ) { | i | flg = flg && C [ 0 ] [ 0 ] - C [ i ] [ 0 ] == C [ 0 ] [ 1 ] - C [ i ] [ 1 ] && C [ 0 ] [ 0 ] - C [ i ] [ 0 ] == C [ 0 ] [ 2 ] - C [ i ] [ 2 ] } 1 . upto ( 2 ) { | j | flg = flg && C [ 0 ] [ 0 ] - C [ 0 ] [ j ] == C [ 1 ] [ 0 ] - C [ 1 ] [ j ] && C [ 0 ] [ 0 ] - C [ 0 ] [ j ] == C [ 2 ] [ 0 ] - C [ 2 ] [ j ] } if ( flg ) puts " Yes " else puts " No " end
c = 3 . times . map { gets . split . map ( & :to_i ) } a = [ ] b = [ ] ans = [ ] a [ 0 ] = 0 3 . times do | j | b [ j ] = c [ 0 ] [ j ] . to_i end ( 1 .. 2 ) . each { | i | a [ i ] = c [ i ] [ 0 ] . to_i - b [ 0 ] . to_i } a . each { | i | num = [ ] b . each { | j | num << i + j } ans << num } puts ( ans == c ) ? " Yes " : " No "
k , s = gets . split . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | ans += 1 if s - ( x + y ) >= 0 && s - ( x + y ) <= k end end puts ans
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts e - a <= k ? ' Yay! ' : ' :( '
nums = [ ] 3 . times { nums << gets . split . map ( & :to_i ) } res = false 101 . times do | a_i | b_i = nums [ 0 ] [ 0 ] - a_i b_j = nums [ 0 ] [ 1 ] - a_i b_k = nums [ 0 ] [ 2 ] - a_i 101 . times do | a_j | 101 . times do | a_k | as = [ a_i , a_j , a_k ] bs = [ b_i , b_j , b_k ] valid = true 3 . times do | a | 3 . times do | b | if nums [ a ] [ b ] != as [ a ] + bs [ b ] valid = false break end end end if valid res = true break end end end end puts res ? " Yes " : " No "
t = gets . split . map ( & :to_i ) a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) x = ( b [ 0 ] - a [ 0 ] ) * t [ 0 ] y = ( b [ 1 ] - a [ 1 ] ) * t [ 1 ] if x + y == 0 puts x == y ? 0 : " infinity " elsif x == 0 || y == 0 || ( x > 0 && x + y > 0 ) || ( x < 0 && x + y < 0 ) puts 0 elsif x + y > 0 s , t = x . abs . divmod ( x + y ) puts t != 0 ? s * 2 + 1 : s * 2 else s , t = x . divmod ( ( x + y ) . abs ) puts t != 0 ? s * 2 + 1 : s * 2 end
N = gets . to_f 1 . upto ( 3500 ) do | h | 1 . upto ( 3500 ) do | n | denominator = ( 4 * h * n - N * h - N * n ) next if denominator . zero? w = ( N * n * h ) / denominator if w > 0 && w - w . to_i == 0 puts " exit end end end
arr = [ ] 6 . times do arr . push ( gets . to_i ) end puts arr [ 4 ] - arr [ 0 ] > arr [ 5 ] ? " :( " : " Yay! "
n , m = gets . split . map ( & :to_i ) x = gets . split . map ( & :to_i ) y = gets . split . map ( & :to_i ) p ( 1 ... n ) . map { | i | i * ( n - i ) * ( x [ i ] - x [ i - 1 ] ) } . reduce ( 0 , :+ ) * ( 1 ... m ) . map { | i | i * ( m - i ) * ( y [ i ] - y [ i - 1 ] ) } . reduce ( 0 , :+ ) % ( 10 ** 9 + 7 )
class InputLine def self . to_s gets . chomp end def self . to_i InputLine . to_s . to_i end def self . to_f InputLine . to_s . to_f end def self . to_sa InputLine . to_s . split ( ' ' ) end def self . to_ia InputLine . to_sa . map ( & :to_i ) end def self . to_fa InputLine . to_sa . map ( & :to_f ) end end def main ( argv ) n = InputLine . to_i x = InputLine . to_ia a = [ 1e+8 . to_i ] * ( n + 1 ) n . times do | i | a [ i + 1 ] = [ x [ i ] , a [ i ] ] . min end c = 0 n . times do | i | c += 1 if a [ i ] > x [ i ] end puts c . to_s end if self . to_s == ' main ' then main ( ARGV ) end
arr = [ ] 5 . times do | i | a = gets . chomp . to_i arr << a end k = gets . chomp . to_i kkk = [ ] arr . each do | f | arr . each do | k | kkk << ( f - k ) . abs end end until kkk == [ ] aaa = kkk . pop if aaa > k puts " :( " exit end end puts " Yay! "
_ = gets x , y = 0 , 0 gets . chomp . each_char do | c | dx , dy = ( ?A .. ?M ) === c ? [ 0 , 1 ] : ( ?N .. ?Z ) === c ? [ 0 , - 1 ] : ( ?a .. ?m ) === c ? [ 1 , 0 ] : [ - 1 , 0 ] x += dx y += dy end s = ( x < 0 ? ?z * - x : ?a * x ) + ( y < 0 ? ?Z * - y : ?A * y ) p s . size puts s
n = gets . to_i a = gets . split . map ( & :to_i ) m = Float :: INFINITY ans = 0 a . each_with_index do | ai , i | if ai < m m = ai ans += 1 end end p ans
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if z . between? ( 0 , k ) end end puts count
n = gets . strip . to_i i = 0 while 2 ** i <= n do i += 1 end puts 2 ** ( i - 1 )
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y count += 1 if 0 <= z && z <= K end end puts count
n = gets . to_i arr = gets . chop . split . map ( & :to_i ) min = arr . first cnt = 0 for i in 0 .. n - 1 do if min >= arr [ i ] cnt += 1 min = arr [ i ] end end puts cnt
N = gets . to_i ; ( N / 4 + 1 ) . upto ( M = 3500 ) { | a | a . upto ( M ) { | b | x = 4 r / N - 1 r / a - 1 r / b ; x . numerator == 1 && ( $> << [ a , b , x . denominator ] * " " ; exit ) } }
N = gets . to_i a_array = gets . chomp . split ( " " ) . map ( & :to_i ) b_array = gets . chomp . split ( " " ) . map ( & :to_i ) d_array = [ ] ( 0 .. ( N - 1 ) ) . each do | n | d_array . push ( a_array [ n ] - b_array [ n ] ) end d_array = d_array . sort minus_sum = 0 minus_count = 0 while d_array [ minus_count ] < 0 do minus_sum += d_array [ minus_count ] minus_count += 1 end plus_count = 0 while minus_sum < 0 do plus_count += 1 break if d_array [ - 1 * plus_count ] <= 0 minus_sum += d_array [ - 1 * plus_count ] end if minus_sum >= 0 puts minus_count + plus_count else puts " -1 " end
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end def check_row ( ary ) ary [ 0 ] . zip ( ary [ 1 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 && ary [ 0 ] . zip ( ary [ 2 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 end answer = check_row ( c ) && check_row ( c . transpose ) puts answer ? ' Yes ' : ' No '
n = gets . to_i s = gets . chomp . split ( " " ) puts s . include? ( " Y " ) ? " Four " : " Three "
N = gets . to_i p = [ ] p = gets . split . map ( & :to_i ) min = p [ 0 ] ans = 0 N . times do | i | if p [ i ] <= min ans += 1 end min = [ min , p [ i ] ] . min end puts ans
N , x = gets . split . map ( & :to_i ) as = gets . split . map ( & :to_i ) min = as . dup ans = as . inject ( :+ ) ( 1 ... N ) . each do | i | result = i * x N . times do | j | min [ j ] = as [ ( j - i ) % N ] if min [ j ] > as [ ( j - i ) % N ] result += min [ j ] end ans = result if ans > result end puts ans
a , b = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. a ) . each do | x | ( 0 .. a ) . each do | y | z = b - x - y cnt += 1 if z >= 0 && z <= a end end puts cnt
grid = [ ] 3 . times { grid << gets . split . map ( & :to_i ) } a1 = 0 b1 = grid [ 0 ] [ 0 ] - a1 b2 = grid [ 0 ] [ 1 ] - a1 b3 = grid [ 0 ] [ 2 ] - a1 a2 = grid [ 1 ] [ 0 ] - b1 a3 = grid [ 2 ] [ 0 ] - b1 a = [ a1 , a2 , a3 ] b = [ b1 , b2 , b3 ] res = ' Yes ' 3 . times do | i | 3 . times do | j | break res = ' No ' if grid [ i ] [ j ] != a [ i ] + b [ j ] end end puts res
arr = [ ] 5 . times do arr . push gets . strip . to_i end k = gets . strip . to_i r = ' Yay! ' 4 . downto ( 1 ) do | i | i . downto ( 0 ) do | j | if ( arr [ i ] - arr [ j ] ) > k r = ' :( ' break end end end puts r
n = gets . to_i s = gets . split cnt = 0 ( 0 .. n - 1 ) . each do | i | cnt += 1 if s [ i ] == ' Y ' end puts cnt > 0 ? ' Four ' : ' Three '
n = gets . to_i p = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 min = p [ 0 ] ( n - 1 ) . times do | i | if min >= p [ i ] ans += 1 end min = ( min > p [ i ] ) ? p [ i ] : min end puts ans + ( ( min >= p [ n - 1 ] ) ? 1 : 0 )
def get_nums gets . split . map ( & :to_i ) end def init_matrix ( row_num , row_length , default = nil ) Array . new ( row_num ) . map { Array . new ( row_length , default ) } end n = gets . to_i nums = get_nums current_min = 10 ** 6 res = 0 nums . each do | i | if current_min >= i res += 1 current_min = i end end puts res
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts [ a , b , c , d , e ] . combination ( 2 ) . find { | i , j | k < ( i - j ) . abs } ? ' :( ' : ' Yay! '
i = [ ] 5 . times do | hoge | i [ hoge ] = gets . to_i end f = gets . to_i a = 0 l = true while a < 4 do ( 4 - a ) . times do | hoge | l = false if ( i [ hoge ] - i [ a + 1 ] ) . abs > f end a += 1 end puts l ? " Yay! " : " :( "
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) x = 0 y = 0 z = 0 count = 0 if k <= s then 0 . upto ( k ) do | i | x = i 0 . upto ( k ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end else 0 . upto ( s ) do | i | x = i 0 . upto ( s ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end end print ( "
def f ( a , t ) s = 0 xs = a . map ( & :first ) a . each do | x , y | s += y * ( xs - [ x ] ) . map { | u | ( t - u ) . to_f / ( x - u ) } . inject ( :* ) end s end loop do d = gets . to_i break if d == 0 points = ( 0 .. d + 2 ) . map { | x | [ x , gets . to_f ] } ( 0 .. d + 2 ) . each do | i | a = points . dup a . delete_at ( i ) x_c , y_c = a . pop d = ( y_c - f ( a , x_c ) ) . abs if d < 0.001 puts i break end end end
N = gets . to_i P = gets . chomp . split ( ) . map ( & :to_i ) min = 0 answer = 0 N . times do | n | if n == 0 || min > P [ n ] min = P [ n ] answer = answer + 1 end end puts answer
N = gets . chomp . to_i arr = gets . chomp . split ( ' ' ) y = arr . select { | item | item == " Y " } if y . count == 0 puts " Three " else puts " Four " end
K , S = gets . split . map ( & :to_i ) a = Array . new if K < S for i in 0 .. K if K >= S - i && 2 * K >= S - i a [ i ] = S - i + 1 elsif K < S - i && 2 * K >= S - i a [ i ] = ( S - ( 2 * K ) - i ) . abs + 1 else a [ i ] = 0 end end elsif S <= K for i in 0 .. S a [ i ] = S - i + 1 end end puts a . inject ( :+ )
num = gets . chomp . to_i count = 0 max_count = 0 max_num = 0 ( num + 1 ) . times do | i | current_num = i while i != 0 && i % 2 == 0 do i /= 2 count += 1 end if count >= max_count max_count = count max_num = current_num end count = 0 end puts max_num
n = gets . to_i a = gets . split . map ( & :to_i ) c = 0 mn = a [ 0 ] for i in ( 0 .. n - 1 ) if a [ i ] <= mn c += 1 mn = a [ i ] end end puts c
N = gets . chomp . to_i S = gets . chomp . split print "
n = gets . chomp . to_i s = gets . chomp . split puts s . uniq . size == 4 ? ' Four ' : ' Three '
n = gets . to_i exist = gets . include? ( " Y " ) if exist puts " Four " else puts " Three " end
C = 3 . times . map { gets . split . map ( & :to_i ) } S = C . map { | row | row . inject ( 0 , & :+ ) } . inject ( 0 , & :+ ) r , m = S . divmod ( 3 ) if m == 0 && [ 0 , 1 , 2 ] . permutation . all? { | i , j , k | C [ 0 ] [ i ] + C [ 1 ] [ j ] + C [ 2 ] [ k ] == r } puts " Yes " else puts " No " end
N = gets . to_i ret = 1 while ret <= N ret *= 2 end puts ret / 2
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i puts ( e - a ) <= k ? ' Yay! ' : ' :( '
number = gets . split . map ( & :to_i ) . sort . join if number == " 1479 " then puts " YES " else puts " NO " end
input = readlines ( ) a = input . shift ( ) . chomp . to_i b = input . shift ( ) . chomp . to_i c = input . shift ( ) . chomp . to_i d = input . shift ( ) . chomp . to_i e = input . shift ( ) . chomp . to_i k = input . shift ( ) . chomp . to_i res = ' Yay! ' [ a , b , c , d , e ] . each_with_index do | a1 , i1 | [ a , b , c , d , e ] . each_with_index do | a2 , i2 | next if i1 >= i2 res = ' :( ' if ( a2 - a1 ) . abs > k end end puts res
c11 , c12 , c13 = gets . split . map ( & :to_i ) c21 , c22 , c23 = gets . split . map ( & :to_i ) c31 , c32 , c33 = gets . split . map ( & :to_i ) if c21 - c11 == c22 - c12 && c22 - c12 == c23 - c13 && c31 - c21 == c32 - c22 && c32 - c22 == c33 - c23 && c12 - c11 == c22 - c21 && c22 - c21 == c32 - c31 && c13 - c12 == c23 - c22 && c23 - c22 == c33 - c32 puts " Yes " else puts " No " end
ary_1 = gets . split ( " " ) . map ( & :to_i ) ary_2 = gets . split ( " " ) . map ( & :to_i ) ary_3 = gets . split ( " " ) . map ( & :to_i ) if ary_1 [ 1 ] - ary_1 [ 0 ] == ary_2 [ 1 ] - ary_2 [ 0 ] && ary_1 [ 1 ] - ary_1 [ 0 ] == ary_3 [ 1 ] - ary_3 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_2 [ 2 ] - ary_2 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_3 [ 2 ] - ary_3 [ 0 ] puts " Yes " else puts " No " end
cs = 3 . times . map { gets . chomp . split . map ( & :to_i ) } a = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } b = [ [ 0 , 2 ] , [ 1 , 1 ] , [ 2 , 0 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } c = [ [ 0 , 0 ] , [ 1 , 2 ] , [ 2 , 1 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } d = [ [ 0 , 1 ] , [ 1 , 0 ] , [ 2 , 2 ] ] . inject ( 0 ) { | sum , ( i , j ) | sum += cs [ i ] [ j ] } puts [ a , b , c , d ] . uniq . size == 1 ? " Yes " : " No "
K , S = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y cnt += 1 if z >= 0 && z <= K end end p cnt
input = gets . chomp . to_i hina = gets . chomp . split . map ( & :to_s ) sum = hina . uniq if sum . count == 3 puts " Three " else puts " Four " end
N = gets . to_i S = gets . split puts S . include? ( " Y " ) ? " Four " : " Three "
a = gets . to_i ; b = gets . to_i ; c = gets . to_i ; d = gets . to_i ; e = gets . to_i ; k = gets . to_i ; puts b - a <= k && c - a <= k && d - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k ? " Yay! " : " :( "
input = Array . new ( 5 ) { gets . to_i } k = gets . to_i ans = " Yay! " input . combination ( 2 ) do | i , j | if ( i - j ) . abs > k ans = " :( " break end end puts ans
points = 5 . times . map { gets . to_i } n = gets . to_i puts points . product ( points ) . all? { | a , b | ( a - b ) . abs <= n } ? ' Yay! ' : ' :( '
n = gets . chomp . to_i ans = 0 n . downto ( 1 ) do | i | j = i while amari = j % 2 if amari == 0 j = j / 2 else if j <= 1 puts i exit end break end end end
k , s = gets . split . map ( & :to_i ) count = 0 ( k + 1 ) . times do | i | ( k + 1 ) . times do | j | z = s - i - j count += 1 if 0 <= z && z <= k end end puts count
require ' prime ' n , p = gets . split ( ) . map ( & :to_i ) gcd = 1 p . prime_division . each do | i | gcd *= i [ 0 ] ** ( i [ 1 ] / n ) end puts gcd
k , s = gets . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y count += 1 if x + y + z == s && z <= k && z >= 0 end end puts count
n = gets . chop . to_i arr = gets . chop . split . map ( & :to_i ) result = 0 min = arr [ 0 ] for i in 0 .. arr . size - 1 back_row = i == 0 ? i : i - 1 back_number = arr [ back_row ] if arr [ i ] <= min result += 1 min = arr [ i ] end end print result
l1 = gets . split . map ( & :to_i ) l2 = gets . split . map ( & :to_i ) l3 = gets . split . map ( & :to_i ) f1 = false f2 = false ( - 100 .. 100 ) . each do | i | lb1 = l1 . map { | v | v - i } ( - 100 .. 100 ) . each do | j | lb2 = l2 . map { | v | v - j } lb3 = l3 . map { | v | v - j } f1 = true if lb2 == lb1 f2 = true if lb3 == lb1 end end if f1 && f2 puts ' Yes ' else puts ' No ' end
io = STDIN n = io . gets . to_i P = io . gets . split . map ( & :to_i ) cnt = 0 rm = [ ] min = P [ 0 ] n . times do | i | min = [ min , P [ i ] ] . min rm [ i ] = min end n . times do | i | cnt += 1 if P [ i ] <= rm [ i ] end p cnt
def solve ( k , s ) count = 0 nums = ( 0 .. k ) . to_a . sort . reverse nums . each do | i | if i <= s nums . each do | j | count += 1 if i + j <= s && s - i - j <= k end end end count end k , s = gets . strip . split . map ( & :to_i ) puts solve ( k , s )
n = gets . to_i pn = gets . strip . split . map ( & :to_i ) min = n + 1 count = 0 pn . each do | p | min = [ min , p ] . min count += 1 if p > min end puts n - count
N = gets . to_i P = gets . split . map & :to_i m = P [ 0 ] cnt = 0 N . times { | i | if P [ i ] <= m cnt += 1 m = P [ i ] end } p cnt
a = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i d = e - a if d > k puts ' :( ' else puts ' Yay! ' end
$/ = ' ' ; k , s = $< . map & :to_i ; r = 0 ; k += 1 ; ( k * k ) . times { | x | z = s - x / k - x % k ; 0 <= z && z < k && r += 1 } ; p r
s = gets a = gets . split . map! { | x | x . to_i } b = gets . split . map! { | x | x . to_i } d = [ ] minus = 0 c = 0 a . size . times { | i | v = a [ i ] - b [ i ] d << v if ( v < 0 ) minus += v c += 1 end } d . sort! i = d . size - 1 while ( minus < 0 ) and ( i != - 1 ) minus += d [ i ] i -= 1 c += 1 end if i < 0 puts - 1 else puts c end
K , S = gets . split . map ( & :to_i ) p ( 0 .. K ) . map { | x | ( 0 .. K ) . map { | y | z = S - x - y ; 0 <= z && z <= K ? 1 : 0 } . inject ( :+ ) } . inject ( :+ )
