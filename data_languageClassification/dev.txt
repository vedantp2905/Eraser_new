points = [ [ None for j in range ( 3 ) ] for i in range ( 3 ) ] from itertools import product for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . split ( ) ) points [ i ] [ 0 ] = c1 points [ i ] [ 1 ] = c2 points [ i ] [ 2 ] = c3 valid = False for a1 in range ( 101 ) : maxA1 = min ( points [ 0 ] ) if a1 > maxA1 : continue b1 = points [ 0 ] [ 0 ] - a1 b2 = points [ 0 ] [ 1 ] - a1 b3 = points [ 0 ] [ 2 ] - a1 a2 = points [ 1 ] [ 0 ] - b1 a3 = points [ 2 ] [ 0 ] - b1 A = { 0 : a1 , 1 : a2 , 2 : a3 } B = { 0 : b1 , 1 : b2 , 2 : b3 } for i in range ( 3 ) : for j in range ( 3 ) : if points [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
mat = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def check ( ) : flag = True for i in range ( 2 ) : for j in range ( 2 ) : flag &= ( mat [ i + 1 ] [ j ] - mat [ i ] [ j ] ) == ( mat [ i + 1 ] [ j + 1 ] - mat [ i ] [ j + 1 ] ) flag &= ( mat [ i ] [ j + 1 ] - mat [ i ] [ j ] ) == ( mat [ i + 1 ] [ j + 1 ] - mat [ i + 1 ] [ j ] ) return flag if check ( ) : print ( ' Yes ' ) else : print ( ' No ' )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = L [ 0 ] [ 2 ] + L [ 1 ] [ 1 ] + L [ 2 ] [ 0 ] c2 = L [ 0 ] [ 1 ] + L [ 1 ] [ 0 ] + L [ 2 ] [ 2 ] c3 = L [ 0 ] [ 0 ] + L [ 1 ] [ 2 ] + L [ 2 ] [ 1 ] if ( c1 == c2 and c2 == c3 ) : print ( ' Yes ' ) else : print ( ' No ' )
import sys import itertools import time import math import heapq from collections import defaultdict sys . setrecursionlimit ( 10 ** 7 ) INF = 10 ** 18 MOD = 10 ** 9 + 7 read = sys . stdin . buffer . read readline = sys . stdin . buffer . readline readlines = sys . stdin . buffer . readlines C = [ 0 ] * 3 for i in range ( 3 ) : C [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 1 , 3 ) : x = C [ i ] [ 0 ] - C [ i - 1 ] [ 0 ] for j in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i - 1 ] [ j ] != x : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : x = C [ 0 ] [ j ] - C [ 0 ] [ j - 1 ] for i in range ( 1 , 3 ) : if C [ i ] [ j ] - C [ i ] [ j - 1 ] != x : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ 0 , 0 , 0 ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( min ( c [ 0 ] ) + 1 ) : b = [ c [ 0 ] [ 0 ] - a1 , c [ 0 ] [ 1 ] - a1 , c [ 0 ] [ 2 ] - a1 ] if c [ 1 ] [ 0 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] == c [ 1 ] [ 2 ] - b [ 2 ] : if c [ 2 ] [ 0 ] - b [ 0 ] == c [ 2 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] : print ( " Yes " ) exit ( ) print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D1 = [ [ ] for _ in range ( 3 ) ] D2 = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 2 ) : D1 [ i ] . append ( C [ i ] [ j ] - C [ i ] [ j + 1 ] ) for j in range ( 3 ) : for i in range ( 2 ) : D2 [ j ] . append ( C [ i ] [ j ] - C [ i + 1 ] [ j ] ) print ( ' Yes ' if D1 [ 0 ] == D1 [ 1 ] == D1 [ 2 ] and D2 [ 0 ] == D2 [ 1 ] == D2 [ 2 ] else ' No ' )
import copy def check ( l ) : return l [ 0 ] == l [ 1 ] == l [ 2 ] lst = [ ] for _ in range ( 3 ) : lst . append ( [ int ( x ) for x in input ( ) . split ( ) ] ) for i in range ( 3 ) : l = copy . deepcopy ( lst ) l [ 0 ] [ 0 ] -= i l [ 0 ] [ 1 ] -= i l [ 0 ] [ 2 ] -= i if l [ 0 ] [ 0 ] < 0 or l [ 0 ] [ 1 ] < 0 or l [ 0 ] [ 2 ] < 0 : continue b1 = l [ 0 ] [ 0 ] b2 = l [ 0 ] [ 1 ] b3 = l [ 0 ] [ 2 ] l [ 1 ] [ 0 ] - = b1 l [ 1 ] [ 1 ] - = b2 l [ 1 ] [ 2 ] - = b3 l [ 2 ] [ 0 ] - = b1 l [ 2 ] [ 1 ] - = b2 l [ 2 ] [ 2 ] - = b3 if check ( l [ 1 ] ) and check ( l [ 2 ] ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if 2 * c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 0 ] == 2 * c [ 0 ] [ 0 ] : if 2 * c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 2 ] [ 1 ] + c [ 0 ] [ 1 ] == 2 * c [ 1 ] [ 1 ] : if 2 * c [ 2 ] [ 1 ] - c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] + c [ 0 ] [ 2 ] + c [ 1 ] [ 2 ] == 2 * c [ 2 ] [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] and c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] and c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if sum ( sum ( row ) for row in C ) == 3 * sum ( C [ i ] [ i ] for i in range ( 3 ) ) : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = list ( map ( int , input ( ) . split ( ) ) ) c21 , c22 , c23 = list ( map ( int , input ( ) . split ( ) ) ) c31 , c32 , c33 = list ( map ( int , input ( ) . split ( ) ) ) if ( c12 - c11 == c22 - c21 == c32 - c31 ) and ( c21 - c11 == c22 - c12 == c23 - c13 ) and ( c31 - c11 == c32 - c12 == c33 - c13 ) : print ( ' Yes ' ) else : print ( ' No ' )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] R1 = [ A [ i ] [ 1 ] - A [ i ] [ 0 ] for i in range ( 3 ) ] R2 = [ A [ i ] [ 2 ] - A [ i ] [ 1 ] for i in range ( 3 ) ] C1 = [ A [ 1 ] [ i ] - A [ 0 ] [ i ] for i in range ( 3 ) ] C2 = [ A [ 2 ] [ i ] - A [ 1 ] [ i ] for i in range ( 3 ) ] ok = True for x in [ R1 , R2 , C1 , C2 ] : if len ( set ( x ) ) != 1 : ok = False break if not ok : print ( ' No ' ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] : print ( ' No ' ) exit ( ) if c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] != c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] : print ( ' No ' ) exit ( ) if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] != c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
cl = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) cl . append ( c ) rcl , trcl , acl , bcl = [ ] , [ ] , [ ] , [ ] tcl = [ x for x in zip ( * cl ) ] for i in range ( 3 ) : rcb = [ ] trca = [ ] for j in range ( 3 ) : if j < 2 : rc = cl [ i ] [ j ] - cl [ i ] [ j + 1 ] trc = tcl [ i ] [ j ] - tcl [ i ] [ j + 1 ] else : rc = cl [ i ] [ j ] - cl [ i ] [ j - 2 ] trc = tcl [ i ] [ j ] - tcl [ i ] [ j - 2 ] rcb . append ( rc ) trca . append ( trc ) rcl . append ( rcb ) trcl . append ( trca ) for i in range ( 3 ) : if i < 2 : bc = [ x - y for ( x , y ) in zip ( rcl [ i ] , rcl [ i + 1 ] ) ] ac = [ x - y for ( x , y ) in zip ( trcl [ i ] , trcl [ i + 1 ] ) ] else : bc = [ x - y for ( x , y ) in zip ( rcl [ i ] , rcl [ i - 2 ] ) ] ac = [ x - y for ( x , y ) in zip ( trcl [ i ] , trcl [ i - 2 ] ) ] bcl . append ( bc ) acl . append ( ac ) f = lambda x : True if x == 0 else False aclb = [ all ( [ f ( n ) for n in acl [ m ] ] ) for m in range ( 3 ) ] bclb = [ all ( [ f ( n ) for n in bcl [ m ] ] ) for m in range ( 3 ) ] if all ( aclb ) & all ( bclb ) : print ( ' Yes ' ) else : print ( ' No ' )
l = [ ] l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if l [ i ] [ 1 ] - l [ i ] [ 0 ] != l [ i + 1 ] [ 1 ] - l [ i + 1 ] [ 0 ] or l [ i ] [ 2 ] - l [ i ] [ 1 ] != l [ i + 1 ] [ 2 ] - l [ i + 1 ] [ 1 ] : print ( ' No ' ) break if i == 1 : print ( ' Yes ' )
import sys sys . setrecursionlimit ( 10 ** 6 ) input = sys . stdin . readline int1 = lambda x : int ( x ) - 1 p2D = lambda x : print ( * x , sep = " \n " ) def main ( ) : t = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : if not t [ i ] [ 0 ] - t [ i + 1 ] [ 0 ] == t [ i ] [ 1 ] - t [ i + 1 ] [ 1 ] == t [ i ] [ 2 ] - t [ i + 1 ] [ 2 ] : print ( " No " ) exit ( ) for j in range ( 2 ) : if not t [ 0 ] [ j ] - t [ 0 ] [ j + 1 ] == t [ 1 ] [ j ] - t [ 1 ] [ j + 1 ] == t [ 2 ] [ j ] - t [ 2 ] [ j + 1 ] : print ( " No " ) exit ( ) print ( " Yes " ) main ( )
A = list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) A += list ( map ( int , input ( ) . split ( ) ) ) flag = 0 for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = A [ 6 ] - a1 b2 = A [ 7 ] - a1 b3 = A [ 8 ] - a1 if b1 < 0 or b2 < 0 or b3 < 0 : break if a3 + b1 == A [ 0 ] and a3 + b2 == A [ 1 ] and a3 + b3 == A [ 2 ] and a2 + b1 == A [ 3 ] and a2 + b2 == A [ 4 ] and a2 + b3 == A [ 5 ] : flag = 1 print ( " Yes " if flag == 1 else " No " )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) if ( ( C1 [ 1 ] - C1 [ 0 ] ) == ( C2 [ 1 ] - C2 [ 0 ] ) == ( C3 [ 1 ] - C3 [ 0 ] ) and ( C1 [ 2 ] - C1 [ 1 ] ) == ( C2 [ 2 ] - C2 [ 1 ] ) == ( C3 [ 2 ] - C3 [ 1 ] ) ) : ans = ' Yes ' else : ans = ' No ' print ( ans )
def main ( ) : c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 101 ) : flag1 = False flag2 = False b0 = c [ 0 ] [ 0 ] - i b1 = c [ 0 ] [ 1 ] - i b2 = c [ 0 ] [ 2 ] - i a10 = c [ 1 ] [ 0 ] - b0 a11 = c [ 1 ] [ 1 ] - b1 a12 = c [ 1 ] [ 2 ] - b2 if a10 == a11 == a12 : flag1 = True else : continue a20 = c [ 2 ] [ 0 ] - b0 a21 = c [ 2 ] [ 1 ] - b1 a22 = c [ 2 ] [ 2 ] - b2 if a20 == a21 == a22 : flag2 = True break if flag1 and flag2 : print ( ' Yes ' ) else : print ( ' No ' ) if __name__ == " __main__ " : main ( )
C = [ ] import numpy as np for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 1 , 3 ) : ALL = [ ] for j in range ( 3 ) : a = C [ 0 ] [ j ] - C [ i ] [ j ] ALL . append ( a ) if len ( set ( ALL ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
A = [ None , None , None ] B = [ 0 , None , None ] C = [ None , None , None ] for i in range ( 3 ) : A [ i ] = list ( map ( int , input ( ) . split ( ) ) ) flag = True for i in range ( 3 ) : for j in range ( 3 ) : if B [ i ] == None : B [ i ] = A [ i ] [ j ] - C [ j ] elif C [ j ] == None : C [ j ] = A [ i ] [ j ] - B [ i ] elif A [ i ] [ j ] != B [ i ] + C [ j ] : flag = False if flag == True : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def f ( ) : for i in range ( 2 ) : for j in range ( 2 ) : if C [ i ] [ j ] - C [ i ] [ j + 1 ] != C [ i + 1 ] [ j ] - C [ i + 1 ] [ j + 1 ] : return False if C [ j ] [ i ] - C [ j + 1 ] [ i ] != C [ j ] [ i + 1 ] - C [ j + 1 ] [ i + 1 ] : return False return True if f ( ) : print ( " Yes " ) else : print ( " No " )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] b = [ ] for i in range ( 3 ) : b . append ( c [ 0 ] [ i ] - a [ 0 ] ) for i in range ( 1 , 3 ) : a . append ( c [ i ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
def LIHW ( h ) : return [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] masu = LIHW ( 3 ) ans = " Yes " for i in range ( 2 ) : if masu [ i + 1 ] [ 1 ] - masu [ i + 1 ] [ 0 ] != masu [ 0 ] [ 1 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ i + 1 ] [ 2 ] - masu [ i + 1 ] [ 1 ] != masu [ 0 ] [ 2 ] - masu [ 0 ] [ 1 ] : ans = " No " for i in range ( 2 ) : if masu [ 1 ] [ i + 1 ] - masu [ 0 ] [ i + 1 ] != masu [ 1 ] [ 0 ] - masu [ 0 ] [ 0 ] : ans = " No " if masu [ 2 ] [ i + 1 ] - masu [ 1 ] [ i + 1 ] != masu [ 2 ] [ 0 ] - masu [ 1 ] [ 0 ] : ans = " No " print ( ans )
c = [ ] for _ in range ( 3 ) : ci = list ( map ( int , input ( ) . split ( ) ) ) c . append ( ci ) if all ( [ c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] , c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] , c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] , c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] ] ) : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = ' No ' for a1 in range ( 100 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if C [ 1 ] [ 1 ] == a2 + b2 and C [ 1 ] [ 2 ] == a2 + b3 and C [ 2 ] [ 1 ] == a3 + b2 and C [ 2 ] [ 2 ] == a3 + b3 : ans = ' Yes ' break print ( ans )
L = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = L [ 0 ] [ 0 ] b2 = L [ 0 ] [ 1 ] b3 = L [ 0 ] [ 2 ] a2 = L [ 1 ] [ 1 ] - b2 a3 = L [ 2 ] [ 2 ] - b3 assumption = [ ] l = [ a1 + b1 , a1 + b2 , a1 + b3 ] assumption . append ( l ) l = [ a2 + b1 , a2 + b2 , a2 + b3 ] assumption . append ( l ) l = [ a3 + b1 , a3 + b2 , a3 + b3 ] assumption . append ( l ) if assumption == L : print ( " Yes " ) else : print ( " No " )
c = [ [ ] ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) ans = 0 for i in range ( 3 ) : ans += sum ( c [ i ] ) if ans % 3 == 0 : arr = [ 0 ] * 3 sum = 0 for i in range ( 3 ) : arr [ 0 ] + = c [ i ] [ i ] for i in range ( 3 ) : if i + 1 < 3 : arr [ 1 ] + = c [ i ] [ i + 1 ] else : arr [ 1 ] + = c [ i ] [ 0 ] for i in range ( 3 ) : if i + 2 < 3 : arr [ 2 ] + = c [ i ] [ i + 2 ] else : arr [ 2 ] + = c [ i ] [ i - 1 ] if arr [ 0 ] != arr [ 1 ] or arr [ 0 ] != arr [ 2 ] : print ( " No " ) exit ( 0 ) print ( " Yes " ) exit ( 0 ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] c1 = [ c [ i ] [ i ] for i in range ( 3 ) ] c2 = [ sum ( i ) for i in c ] print ( ' Yes ' if sum ( c1 ) * 3 == sum ( c2 ) else ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] y = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] - c [ i ] [ 0 ] != y : print ( ' No ' ) break if c [ i ] [ 2 ] - c [ i ] [ 1 ] != x : print ( ' No ' ) break else : print ( ' Yes ' )
c = [ ] for _ in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) s = 0 for i in range ( 3 ) : for j in range ( 3 ) : if i == j : s += c [ i ] [ j ] * 2 else : s - = c [ i ] [ j ] if s == 0 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = [ 0 for i in range ( 3 ) ] b = [ 0 for i in range ( 3 ) ] a [ 0 ] = 0 a [ 1 ] = c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] a [ 2 ] = c [ 2 ] [ 2 ] - c [ 0 ] [ 2 ] b [ 0 ] = c [ 0 ] [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] b [ 2 ] = c [ 0 ] [ 2 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : flag = False print ( " Yes " ) if flag else print ( " No " )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) k2 = C2 [ 0 ] - C1 [ 0 ] k3 = C3 [ 0 ] - C1 [ 0 ] C2 = [ i - k2 for i in C2 ] C3 = [ i - k3 for i in C3 ] print ( [ ' No ' , ' Yes ' ] [ C1 == C2 == C3 ] )
def main ( ) : C1n = list ( map ( int , input ( ) . split ( ) ) ) C2n = list ( map ( int , input ( ) . split ( ) ) ) C3n = list ( map ( int , input ( ) . split ( ) ) ) C = [ C1n , C2n , C3n ] a_s = [ 0 ] b_s = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] a_s . append ( C [ 1 ] [ 0 ] - b_s [ 0 ] ) a_s . append ( C [ 2 ] [ 0 ] - b_s [ 0 ] ) for i , a_i in enumerate ( a_s ) : for j , b_j in enumerate ( b_s ) : if not ( ( a_i + b_j ) == C [ i ] [ j ] ) : print ( " No " ) return print ( " Yes " ) main ( )
import math from math import gcd , pi , sqrt INF = float ( " inf " ) MOD = 10 ** 9 + 7 import sys sys . setrecursionlimit ( 10 ** 6 ) import itertools import bisect from collections import Counter , deque def i_input ( ) : return int ( input ( ) ) def i_map ( ) : return map ( int , input ( ) . split ( ) ) def i_list ( ) : return list ( i_map ( ) ) def i_row ( N ) : return [ i_input ( ) for _ in range ( N ) ] def i_row_list ( N ) : return [ i_list ( ) for _ in range ( N ) ] def s_input ( ) : return input ( ) def s_map ( ) : return input ( ) . split ( ) def s_list ( ) : return list ( s_map ( ) ) def s_row ( N ) : return [ s_input for _ in range ( N ) ] def s_row_str ( N ) : return [ s_list ( ) for _ in range ( N ) ] def s_row_list ( N ) : return [ list ( s_input ( ) ) for _ in range ( N ) ] def main ( ) : c = [ i_list ( ) for i in range ( 3 ) ] for i in range ( 1 , 3 ) : t = c [ i ] [ 0 ] - c [ 0 ] [ 0 ] if c [ i ] [ 1 ] - c [ 0 ] [ 1 ] == t and c [ i ] [ 2 ] - c [ 0 ] [ 2 ] == t : pass else : print ( " No " ) exit ( ) for j in range ( 1 , 3 ) : t = c [ 0 ] [ i ] - c [ 0 ] [ 0 ] if c [ 1 ] [ i ] - c [ 1 ] [ 0 ] == t and c [ 2 ] [ i ] - c [ 2 ] [ 0 ] == t : pass else : print ( " No " ) exit ( ) print ( " Yes " ) if __name__ == " __main__ " : main ( )
c11 , c12 , c13 = [ int ( i ) for i in input ( ) . split ( ) ] c21 , c22 , c23 = [ int ( i ) for i in input ( ) . split ( ) ] c31 , c32 , c33 = [ int ( i ) for i in input ( ) . split ( ) ] ans = 0 for a1 in range ( c11 + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : print ( " Yes " ) ans = 1 break if ans == 0 : print ( " No " )
apple = [ ] for _ in range ( 3 ) : apple . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = apple [ 0 ] b = apple [ 1 ] c = apple [ 2 ] if a [ 0 ] - a [ 1 ] == b [ 0 ] - b [ 1 ] == c [ 0 ] - c [ 1 ] and a [ 0 ] - a [ 2 ] == b [ 0 ] - b [ 2 ] == c [ 0 ] - c [ 2 ] and a [ 1 ] - a [ 2 ] == b [ 1 ] - b [ 2 ] == c [ 1 ] - c [ 2 ] : if a [ 0 ] - b [ 0 ] == a [ 1 ] - b [ 1 ] == a [ 2 ] - b [ 2 ] and a [ 0 ] - c [ 0 ] == a [ 1 ] - c [ 1 ] == a [ 2 ] - c [ 2 ] and c [ 0 ] - b [ 0 ] == c [ 1 ] - b [ 1 ] == c [ 2 ] - b [ 2 ] : print ( " Yes " ) else : print ( " No " ) else : print ( " No " )
from sys import exit c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l_1 = [ 0 , 1 , 2 ] l_2 = [ 1 , 2 , 0 ] for i in range ( 3 ) : if not c [ l_1 [ i ] ] [ 0 ] - c [ l_2 [ i ] ] [ 0 ] == c [ l_1 [ i ] ] [ 1 ] - c [ l_2 [ i ] ] [ 1 ] == c [ l_1 [ i ] ] [ 2 ] - c [ l_2 [ i ] ] [ 2 ] : print ( ' No ' ) exit ( ) if not c [ 0 ] [ l_1 [ i ] ] - c [ 0 ] [ l_2 [ i ] ] == c [ 1 ] [ l_1 [ i ] ] - c [ 1 ] [ l_2 [ i ] ] == c [ 2 ] [ l_1 [ i ] ] - c [ 2 ] [ l_2 [ i ] ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
L = [ ] for i in range ( 3 ) : S = list ( map ( int , input ( ) . split ( ) ) ) L . append ( S ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - i ] [ 2 - j ] - L [ 1 - i ] [ 2 - j ] != L [ 2 - i ] [ 1 - j ] - L [ 1 - i ] [ 1 - j ] : print ( " No " ) exit ( ) for i in range ( 2 ) : for j in range ( 2 ) : if L [ 2 - j ] [ 2 - i ] - L [ 1 - j ] [ 2 - i ] != L [ 2 - j ] [ 1 - i ] - L [ 1 - j ] [ 1 - i ] : print ( " No " ) exit ( ) print ( " Yes " )
l = [ ] for i in range ( 3 ) : l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) std = l [ i ] [ 0 ] for j in range ( 3 ) : l [ i ] [ j ] -= std if l [ 0 ] == l [ 1 ] and l [ 0 ] == l [ 2 ] : print ( " Yes " ) else : print ( " No " )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] B = [ x for x in grid [ 0 ] ] b = B [ 0 ] A = [ grid [ i ] [ 0 ] - b for i in range ( 3 ) ] res = True for i , a in enumerate ( A ) : for j , b in enumerate ( B ) : if grid [ i ] [ j ] != a + b : res = False break else : continue break print ( ' Yes ' if res else ' No ' )
grid = [ list ( map ( int , input ( ) . split ( " " ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] b [ 0 ] = grid [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = grid [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = grid [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = grid [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = grid [ 2 ] [ 0 ] - b [ 0 ] ans_date = [ ] for i in a : date = [ ] for j in b : num = i + j date . append ( num ) ans_date . append ( date ) if grid == ans_date : print ( " Yes " ) else : print ( " No " )
def main ( ) : * C , = map ( int , open ( 0 ) . read ( ) . split ( ) ) memo = { ( i - j , j - k ) for i , j , k in zip ( * [ iter ( C ) ] * 3 ) } flg = len ( memo ) == 1 print ( " Yes " if flg else " No " ) if __name__ == " __main__ " : main ( )
a , b , c = map ( int , input ( ) . split ( ) ) d , e , f = map ( int , input ( ) . split ( ) ) g , h , i = map ( int , input ( ) . split ( ) ) x = a + e == b + d and b + f == c + e and d + h == e + g and e + i == f + h print ( ' YNeos ' [ 0 if x else 1 : : 2 ] )
l1 = list ( map ( int , input ( ) . split ( ) ) ) l2 = list ( map ( int , input ( ) . split ( ) ) ) l3 = list ( map ( int , input ( ) . split ( ) ) ) s = 0 for i in range ( 0 , min ( l1 [ 0 ] , l1 [ 1 ] , l1 [ 2 ] , l2 [ 0 ] , l3 [ 0 ] ) + 1 ) : j = l1 [ 0 ] - i m = l1 [ 1 ] - i n = l1 [ 2 ] - i if l2 [ 0 ] - j == l2 [ 1 ] - m == l2 [ 2 ] - n and l3 [ 0 ] - j == l3 [ 1 ] - m == l3 [ 2 ] - n : s = 1 break print ( " Yes " if s == 1 else " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : if not c [ 1 ] [ 0 ] - b [ 0 ] == c [ 1 ] [ 1 ] - b [ 1 ] == c [ 1 ] [ 2 ] - b [ 2 ] : ans = " No " if not c [ 2 ] [ 0 ] - b [ 0 ] == c [ 2 ] [ 1 ] - b [ 1 ] == c [ 2 ] [ 2 ] - b [ 2 ] : ans = " No " print ( ans )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) sum_mat = ( sum ( c [ 0 ] ) + sum ( c [ 1 ] ) + sum ( c [ 2 ] ) ) / 3 print ( ' Yes ' if sum_mat == c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] else ' No ' )
import sys c = [ input ( ) . split ( ) for i in range ( 3 ) ] num = [ int ( c [ i ] [ j ] ) for i in range ( 3 ) for j in range ( 3 ) ] if num [ 0 ] + num [ 4 ] != num [ 1 ] + num [ 3 ] : print ( ' No ' ) sys . exit ( ) elif num [ 4 ] + num [ 8 ] != num [ 5 ] + num [ 7 ] : print ( ' No ' ) sys . exit ( ) elif num [ 0 ] + num [ 8 ] != num [ 2 ] + num [ 6 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
c1 = [ int ( i ) for i in input ( ) . split ( ) ] c2 = [ int ( i ) for i in input ( ) . split ( ) ] c3 = [ int ( i ) for i in input ( ) . split ( ) ] flag = False if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] : if c1 [ 1 ] - c1 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c2 [ 2 ] - c2 [ 0 ] : if c1 [ 2 ] - c1 [ 0 ] == c3 [ 2 ] - c3 [ 0 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 1 ] - c2 [ 1 ] : if c1 [ 0 ] - c2 [ 0 ] == c1 [ 2 ] - c2 [ 2 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] : if c1 [ 0 ] - c3 [ 0 ] == c1 [ 2 ] - c3 [ 2 ] : flag = True print ( ' Yes ' ) if not flag : print ( ' No ' )
X = list ( map ( int , input ( ) . split ( ) ) ) Y = list ( map ( int , input ( ) . split ( ) ) ) Z = list ( map ( int , input ( ) . split ( ) ) ) if ( X [ 0 ] - X [ 1 ] == Y [ 0 ] - Y [ 1 ] and X [ 0 ] - X [ 1 ] == Z [ 0 ] - Z [ 1 ] and X [ 2 ] - X [ 1 ] == Y [ 2 ] - Y [ 1 ] and X [ 2 ] - X [ 1 ] == Z [ 2 ] - Z [ 1 ] ) : print ( " Yes " ) else : print ( " No " )
ls1 = list ( map ( int , input ( ) . split ( ) ) ) ls2 = list ( map ( int , input ( ) . split ( ) ) ) ls3 = list ( map ( int , input ( ) . split ( ) ) ) ls = [ ls1 , ls2 , ls3 ] ans = 0 if ls [ 1 ] [ 0 ] - ls [ 0 ] [ 0 ] == ls [ 1 ] [ 1 ] - ls [ 0 ] [ 1 ] and ls [ 1 ] [ 1 ] - ls [ 0 ] [ 1 ] == ls [ 1 ] [ 2 ] - ls [ 0 ] [ 2 ] : ans + = 1 if ls [ 2 ] [ 0 ] - ls [ 1 ] [ 0 ] == ls [ 2 ] [ 1 ] - ls [ 1 ] [ 1 ] and ls [ 2 ] [ 1 ] - ls [ 1 ] [ 1 ] == ls [ 2 ] [ 2 ] - ls [ 1 ] [ 2 ] : ans + = 1 if ls [ 0 ] [ 1 ] - ls [ 0 ] [ 0 ] == ls [ 1 ] [ 1 ] - ls [ 1 ] [ 0 ] and ls [ 1 ] [ 1 ] - ls [ 1 ] [ 0 ] == ls [ 2 ] [ 1 ] - ls [ 2 ] [ 0 ] : ans + = 1 if ls [ 0 ] [ 2 ] - ls [ 0 ] [ 1 ] == ls [ 1 ] [ 2 ] - ls [ 1 ] [ 1 ] and ls [ 1 ] [ 2 ] - ls [ 1 ] [ 1 ] == ls [ 2 ] [ 2 ] - ls [ 2 ] [ 1 ] : ans + = 1 if ans == 4 : print ( ' Yes ' ) else : print ( ' No ' )
x = [ ] y = [ ] z = [ ] for j in range ( 3 ) : x1 , y1 , z1 = [ int ( i ) for i in input ( ) . split ( ) ] x . append ( x1 ) y . append ( y1 ) z . append ( z1 ) for p in range ( 2 ) : if x [ p ] - x [ p + 1 ] != y [ p ] - y [ p + 1 ] or y [ p ] - y [ p + 1 ] != z [ p ] - z [ p + 1 ] : print ( " No " ) break if x [ 0 ] - y [ 0 ] != x [ 1 ] - y [ 1 ] or x [ 1 ] - y [ 1 ] != x [ 2 ] - y [ 2 ] : print ( " No " ) break if z [ 0 ] - y [ 0 ] != z [ 1 ] - y [ 1 ] or z [ 1 ] - y [ 1 ] != z [ 2 ] - y [ 2 ] : print ( " No " ) break if p == 1 : print ( " Yes " )
p = [ ] for i in range ( 3 ) : p . append ( list ( map ( int , input ( ) . split ( ) ) ) ) if ( p [ 0 ] [ 0 ] - p [ 0 ] [ 1 ] == p [ 1 ] [ 0 ] - p [ 1 ] [ 1 ] == p [ 2 ] [ 0 ] - p [ 2 ] [ 1 ] and p [ 0 ] [ 1 ] - p [ 0 ] [ 2 ] == p [ 1 ] [ 1 ] - p [ 1 ] [ 2 ] == p [ 2 ] [ 1 ] - p [ 2 ] [ 2 ] and p [ 0 ] [ 2 ] - p [ 0 ] [ 0 ] == p [ 1 ] [ 2 ] - p [ 1 ] [ 0 ] == p [ 2 ] [ 2 ] - p [ 2 ] [ 0 ] and p [ 0 ] [ 0 ] - p [ 1 ] [ 0 ] == p [ 0 ] [ 1 ] - p [ 1 ] [ 1 ] == p [ 0 ] [ 2 ] - p [ 1 ] [ 2 ] and p [ 1 ] [ 0 ] - p [ 2 ] [ 0 ] == p [ 1 ] [ 1 ] - p [ 2 ] [ 1 ] == p [ 1 ] [ 2 ] - p [ 2 ] [ 2 ] and p [ 2 ] [ 0 ] - p [ 0 ] [ 0 ] == p [ 2 ] [ 1 ] - p [ 0 ] [ 1 ] == p [ 2 ] [ 2 ] - p [ 0 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ' ' ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ' ' ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ' ' ) ) print ( ' Yes ' ) if c21 - c11 == c22 - c12 == c23 - c13 and c31 - c21 == c32 - c22 == c33 - c23 else print ( ' No ' )
grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] def solve ( ) : for i in range ( max ( grid [ 0 ] ) + 1 ) : b1 = grid [ 0 ] [ 0 ] - i b2 = grid [ 0 ] [ 1 ] - i b3 = grid [ 0 ] [ 2 ] - i if not b1 < 0 and not b2 < 0 and not b3 < 0 : if grid [ 1 ] [ 0 ] - b1 == grid [ 1 ] [ 1 ] - b2 == grid [ 1 ] [ 2 ] - b3 : if grid [ 2 ] [ 0 ] - b1 == grid [ 2 ] [ 1 ] - b2 == grid [ 2 ] [ 2 ] - b3 : print ( " Yes " ) return 0 print ( " No " ) return 0 if __name__ == " __main__ " : solve ( )
c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) if c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] and c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] == c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] and c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] : print ( " Yes " ) else : print ( " No " )
import numpy as np c = np . array ( [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ) flag = True for a1 in range ( c . max ( ) + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if ( c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 1 ] - b2 or c [ 1 ] [ 0 ] - b1 != c [ 1 ] [ 2 ] - b3 ) : flag = False if ( c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 1 ] - b2 or c [ 2 ] [ 0 ] - b1 != c [ 2 ] [ 2 ] - b3 ) : flag = False print ( " Yes " if flag else " No " )
C1 = list ( map ( int , input ( ) . split ( ) ) ) C2 = list ( map ( int , input ( ) . split ( ) ) ) C3 = list ( map ( int , input ( ) . split ( ) ) ) def mat ( m ) : count = 0 for i in range ( len ( m ) ) : for j in range ( len ( m ) ) : if m [ i ] [ j ] != 0 : count += 1 if count == 0 : return 0 else : return 1 def main ( c1 , c2 , c3 ) : matrix_i = [ c1 , c2 , c3 ] min_i = [ min ( c1 ) , min ( c2 ) , min ( c3 ) ] min_j = [ 0 , 0 , 0 ] for i in range ( 3 ) : for j in range ( 3 ) : matrix_i [ i ] [ j ] = matrix_i [ i ] [ j ] - min_i [ i ] matrix_j = matrix_i for j in range ( 3 ) : min_j [ j ] = min ( matrix_i [ 0 ] [ j ] , matrix_i [ 1 ] [ j ] , matrix_i [ 2 ] [ j ] ) for i in range ( 3 ) : for j in range ( 3 ) : matrix_j [ i ] [ j ] = matrix_j [ i ] [ j ] - min_j [ j ] if mat ( matrix_j ) == 0 : print ( " Yes " ) else : print ( " No " ) main ( C1 , C2 , C3 )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if all ( ( c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] for i in range ( 2 ) ) ) : print ( " Yes " ) else : print ( " No " )
x = [ ] for i in range ( 3 ) : x . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = 1 for i in range ( 2 ) : if not ( x [ i + 1 ] [ 0 ] - x [ i ] [ 0 ] == x [ i + 1 ] [ 1 ] - x [ i ] [ 1 ] == x [ i + 1 ] [ 2 ] - x [ i ] [ 2 ] ) : flag = 0 break if flag == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a2 = c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] a3 = c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] b1 = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] b2 = c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] b3 = c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] if a1 == a2 == a3 and b1 == b2 == b3 and a1 % 1 == 0 and a2 % 1 == 0 and a3 % 1 == 0 and b1 % 1 == 0 and b2 % 1 == 0 and b3 % 1 == 0 : print ( ' Yes ' ) else : print ( ' No ' )
l = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] total1 = 0 total2 = 0 for i in range ( 3 ) : total1 += sum ( l [ i ] ) total2 += l [ i ] [ i ] if total1 == total2 * 3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : if ( c [ 0 ] [ 0 ] - a1 == c [ 1 ] [ 0 ] - a2 == c [ 2 ] [ 0 ] - a3 ) and ( c [ 0 ] [ 1 ] - a1 == c [ 1 ] [ 1 ] - a2 == c [ 2 ] [ 1 ] - a3 ) and ( c [ 0 ] [ 2 ] - a1 == c [ 1 ] [ 2 ] - a2 == c [ 2 ] [ 2 ] - a3 ) : print ( " Yes " ) exit ( ) else : print ( " No " )
C = [ ] for i in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 0 , 2 ) : for j in range ( 0 , 2 ) : if C [ i ] [ j ] + C [ i + 1 ] [ j + 1 ] != C [ i + 1 ] [ j ] + C [ i ] [ j + 1 ] : print ( ' No ' ) exit ( ) if C [ 0 ] [ 0 ] + C [ 2 ] [ 2 ] != C [ 0 ] [ 2 ] + C [ 2 ] [ 0 ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
from itertools import product c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] if ( a2 + b2 == c [ 1 ] [ 1 ] and a2 + b3 == c [ 1 ] [ 2 ] and a3 + b2 == c [ 2 ] [ 1 ] and a3 + b3 == c [ 2 ] [ 2 ] ) : print ( " Yes " ) else : print ( " No " )
c = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ ] a = [ 0 ] for i in range ( 3 ) : b . append ( c [ 0 ] [ i ] ) for i in range ( 3 ) : if i == 0 : continue else : a . append ( c [ i ] [ i ] - b [ i ] ) for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
L = [ [ 0 for j in range ( 3 ) ] for i in range ( 3 ) ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) L [ i ] = c if L [ 0 ] [ 0 ] - L [ 1 ] [ 0 ] == L [ 0 ] [ 1 ] - L [ 1 ] [ 1 ] == L [ 0 ] [ 2 ] - L [ 1 ] [ 2 ] and L [ 0 ] [ 0 ] - L [ 2 ] [ 0 ] == L [ 0 ] [ 1 ] - L [ 2 ] [ 1 ] == L [ 0 ] [ 2 ] - L [ 2 ] [ 2 ] : print ( " Yes " ) else : print ( " No " )
def main ( ) : num_list = [ ] for _ in range ( 3 ) : num_list . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a1 = 0 b1 = num_list [ 0 ] [ 0 ] - a1 b2 = num_list [ 0 ] [ 1 ] - a1 b3 = num_list [ 0 ] [ 2 ] - a1 a2 = num_list [ 1 ] [ 0 ] - b1 a3 = num_list [ 2 ] [ 0 ] - b1 isGood = True if a1 + b1 != num_list [ 0 ] [ 0 ] : isGood = False if a1 + b2 != num_list [ 0 ] [ 1 ] : isGood = False if a1 + b3 != num_list [ 0 ] [ 2 ] : isGood = False if a2 + b1 != num_list [ 1 ] [ 0 ] : isGood = False if a2 + b2 != num_list [ 1 ] [ 1 ] : isGood = False if a2 + b3 != num_list [ 1 ] [ 2 ] : isGood = False if a3 + b1 != num_list [ 2 ] [ 0 ] : isGood = False if a3 + b2 != num_list [ 2 ] [ 1 ] : isGood = False if a3 + b3 != num_list [ 2 ] [ 2 ] : isGood = False print ( ' Yes ' if isGood else ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] for i in range ( 0 , 3 ) : c [ i ] = [ int ( j ) for j in input ( ) . split ( " " ) ] f = True for i in range ( 0 , 2 ) : f = f and c [ i ] [ 0 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 0 ] - c [ i + 1 ] [ 1 ] f = f and c [ i ] [ 1 ] - c [ i ] [ 2 ] == c [ i + 1 ] [ 1 ] - c [ i + 1 ] [ 2 ] for i in range ( 0 , 2 ) : f = f and c [ 0 ] [ i ] - c [ 1 ] [ i ] == c [ 0 ] [ i + 1 ] - c [ 1 ] [ i + 1 ] f = f and c [ 1 ] [ i ] - c [ 2 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 2 ] [ i + 1 ] if f : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' No ' if C [ 0 ] [ 0 ] - C [ 1 ] [ 0 ] == C [ 0 ] [ 1 ] - C [ 1 ] [ 1 ] == C [ 0 ] [ 2 ] - C [ 1 ] [ 2 ] : if C [ 1 ] [ 0 ] - C [ 2 ] [ 0 ] == C [ 1 ] [ 1 ] - C [ 2 ] [ 1 ] == C [ 1 ] [ 2 ] - C [ 2 ] [ 2 ] : if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : ans = ' Yes ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] ans = False for i in range ( 101 ) : a1 = 0 b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 a = [ ] a . append ( a1 ) a . append ( a2 ) a . append ( a3 ) if a2 + b2 != c [ 1 ] [ 1 ] : continue elif a3 + b2 != c [ 2 ] [ 1 ] : continue elif a2 + b3 != c [ 1 ] [ 2 ] : continue elif a3 + b3 != c [ 2 ] [ 2 ] : continue ans = True break if ans : print ( ' Yes ' ) else : print ( ' No ' )
lst = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if ( lst [ 1 ] [ 0 ] - lst [ 0 ] [ 0 ] == lst [ 1 ] [ 1 ] - lst [ 0 ] [ 1 ] == lst [ 1 ] [ 2 ] - lst [ 0 ] [ 2 ] and \ lst [ 2 ] [ 0 ] - lst [ 0 ] [ 0 ] == lst [ 2 ] [ 1 ] - lst [ 0 ] [ 1 ] == lst [ 2 ] [ 2 ] - lst [ 0 ] [ 2 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] def C ( a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : return False return True def D ( ) : for a1 in range ( 101 ) : for a2 in range ( 101 ) : for a3 in range ( 101 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 if C ( [ a1 , a2 , a3 ] , [ b1 , b2 , b3 ] ) : return True return False print ( ' Yes ' if D ( ) else ' No ' )
import sys import math import os class cin ( ) : def int ( ) : return int ( sys . stdin . readline ( ) . rstrip ( ) ) def string ( ) : return sys . stdin . readline ( ) . rstrip ( ) def mapInt ( ) : return [ int ( x ) for x in cin . string ( ) . split ( ) ] class Util ( ) : def round_up ( a , b ) : return - ( - a // b ) def toUpperMultiple ( a , x ) : return Util . round_up ( a , x ) * x def toLowerMultiple ( a , x ) : return ( a // x ) * x C = [ [ int ( x ) for x in cin . string ( ) . split ( ) ] for y in range ( 3 ) ] for a1 in range ( 0 , 100 + 1 ) : b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 m = [ [ a1 + b1 , a1 + b2 , a1 + b3 ] , [ a2 + b1 , a2 + b2 , a2 + b3 ] , [ a3 + b1 , a3 + b2 , a3 + b3 ] ] if m == C : print ( " Yes " ) sys . exit ( ) print ( " No " )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : for j in range ( 2 ) : if c [ j ] [ i + 1 ] - c [ j ] [ i ] != c [ j + 1 ] [ i + 1 ] - c [ j + 1 ] [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] if c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] and c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] == c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 100 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if ( a2 + b2 ) == c [ 1 ] [ 1 ] and ( a2 + b3 ) == c [ 1 ] [ 2 ] and ( a3 + b2 ) == c [ 2 ] [ 1 ] and ( a3 + b3 ) == c [ 2 ] [ 2 ] : print ( " Yes " ) break else : print ( " No " )
m = lambda : map ( int , input ( ) . split ( ) ) a , b , c = m ( ) d , e , f = m ( ) g , h , i = m ( ) print ( [ ' No ' , ' Yes ' ] [ d - a == e - b == f - c and g - a == h - b == i - c ] )
l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] l1 = [ ] for i in range ( 3 ) : l1 . append ( tuple ( j - min ( l [ i ] ) for j in l [ i ] ) ) if len ( set ( l1 ) ) != 1 : print ( ' No ' ) exit ( ) k = [ [ 0 ] * 3 for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : k [ j ] [ i ] = l [ i ] [ j ] k1 = [ ] for i in range ( 3 ) : k1 . append ( tuple ( j - min ( k [ i ] ) for j in k [ i ] ) ) if len ( set ( k1 ) ) != 1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b2_1 = A [ 0 ] [ 1 ] - A [ 0 ] [ 0 ] b3_1 = A [ 0 ] [ 2 ] - A [ 0 ] [ 0 ] if any ( [ b2_1 != A [ x ] [ 1 ] - A [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) or any ( [ b3_1 != A [ x ] [ 2 ] - A [ x ] [ 0 ] for x in [ 1 , 2 ] ] ) : print ( " No " ) else : print ( " Yes " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] d = set ( ) e = set ( ) f = set ( ) g = set ( ) for i in range ( 3 ) : d . add ( c [ i ] [ 0 ] - c [ i ] [ 1 ] ) e . add ( c [ i ] [ 1 ] - c [ i ] [ 2 ] ) f . add ( c [ 0 ] [ i ] - c [ 1 ] [ i ] ) g . add ( c [ 1 ] [ i ] - c [ 2 ] [ i ] ) if len ( d ) == len ( e ) == len ( f ) == len ( g ) == 1 : print ( " Yes " ) else : print ( " No " )
import sys c = list ( ) for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) sys . exit ( ) print ( " Yes " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] and c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] : print ( " Yes " ) else : print ( " No " )
import copy import numpy as np import random c = [ ] for i in range ( 3 ) : tem = [ int ( i ) for i in input ( ) . split ( ) ] c . append ( tem ) a = [ 0 for i in range ( 3 ) ] b = [ 0 for i in range ( 3 ) ] for i in range ( 3 ) : min_line = min ( c [ i ] ) for j in range ( 3 ) : c [ i ] [ j ] -= min_line c = np . array ( c ) for i in range ( 3 ) : min_row = min ( c [ : , i ] ) for j in range ( 3 ) : c [ j , i ] -= min_row if np . all ( c == 0 ) : ans = True else : ans = False if ans : print ( " Yes " ) else : print ( " No " )
import sys grid = [ ] for i in range ( 3 ) : array = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) grid . append ( array ) point = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 1 ] ] for i , j in point : if grid [ i ] [ j ] != grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j ] - grid [ i + 1 ] [ j + 1 ] : print ( ' No ' ) sys . exit ( ) print ( ' Yes ' )
def is_right ( a0 , a1 , a2 ) : for j in range ( H ) : if grids [ j ] [ 0 ] - a0 == grids [ j ] [ 1 ] - a1 == grids [ j ] [ 2 ] - a2 : continue else : return False return True H = 3 grids = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( H ) ] for a0 in range ( 100 + 1 ) : for a1 in range ( 100 + 1 ) : for a2 in range ( 100 + 1 ) : if is_right ( a0 , a1 , a2 ) : print ( ' Yes ' ) exit ( ) print ( ' No ' )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = ' Yes ' if not sum ( c [ 0 ] ) % 3 == sum ( c [ 1 ] ) % 3 == sum ( c [ 2 ] ) % 3 : ans = ' No ' cc = [ 0 , 0 , 0 ] for ary in c : cc [ 0 ] + = ary [ 0 ] cc [ 1 ] + = ary [ 1 ] cc [ 2 ] + = ary [ 2 ] if not cc [ 0 ] % 3 == cc [ 1 ] % 3 == cc [ 2 ] % 3 : ans = ' No ' print ( ans )
c = [ ] S = 0 for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) S += sum ( c [ i ] ) a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : a [ i ] = sum ( c [ i ] [ 0 : 3 ] ) b [ i ] = sum ( c [ 0 : 3 ] [ i ] ) if S % 3 != 0 : ans = " No " if ( a [ 0 ] - a [ 1 ] ) % 3 != 0 or ( a [ 1 ] - a [ 2 ] ) % 3 != 0 or ( a [ 2 ] - a [ 0 ] ) % 3 != 0 : ans = " No " elif ( b [ 0 ] - b [ 1 ] ) % 3 != 0 or ( b [ 1 ] - b [ 2 ] ) % 3 != 0 or ( b [ 2 ] - b [ 0 ] ) % 3 != 0 : ans = " No " elif c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] != S // 3 : ans = " No " else : ans = " Yes " print ( ans )
C = [ ] for _ in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) C . append ( c ) b0 = C [ 0 ] [ 0 ] b1 = C [ 0 ] [ 1 ] b2 = C [ 0 ] [ 2 ] a2_1 = C [ 1 ] [ 0 ] - b0 a2_2 = C [ 1 ] [ 1 ] - b1 a2_3 = C [ 1 ] [ 2 ] - b2 a3_1 = C [ 2 ] [ 0 ] - b0 a3_2 = C [ 2 ] [ 1 ] - b1 a3_3 = C [ 2 ] [ 2 ] - b2 if a2_1 == a2_2 and a2_2 == a2_3 : if a3_1 == a3_2 and a3_2 == a3_3 : print ( ' Yes ' ) else : print ( ' No ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b = [ ] for i in range ( 3 ) : b . append ( C [ 0 ] [ i ] - 0 ) a = [ ] for i in range ( 3 ) : a . append ( C [ i ] [ 0 ] - b [ 0 ] ) ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if ( C [ i ] [ j ] != a [ i ] + b [ j ] ) : ans = " No " print ( ans )
C = [ ] for i in range ( 0 , 3 ) : C . append ( [ int ( x ) for x in input ( ) . split ( ' ' ) ] ) def sol ( ) : if ( sum ( C [ 0 ] ) - sum ( C [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 1 ] ) - sum ( C [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( sum ( C [ 2 ] ) - sum ( C [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] - ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 1 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 1 ] - ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] ) ) % 3 != 0 : return ( ' No ' ) elif ( C [ 0 ] [ 2 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 2 ] - ( C [ 0 ] [ 0 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 0 ] ) ) % 3 != 0 : return ( ' No ' ) else : return ( ' Yes ' ) print ( sol ( ) )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( 2 ) : if c [ i + 1 ] [ 0 ] - c [ i ] [ 0 ] == c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] and c [ i + 1 ] [ 1 ] - c [ i ] [ 1 ] == c [ i + 1 ] [ 2 ] - c [ i ] [ 2 ] and c [ 0 ] [ i + 1 ] - c [ 0 ] [ i ] == c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] and c [ 1 ] [ i + 1 ] - c [ 1 ] [ i ] == c [ 2 ] [ i + 1 ] - c [ 2 ] [ i ] : flg = 0 else : flg = 1 if flg == 0 : print ( " Yes " ) else : print ( " No " )
C = [ ] for _ in range ( 3 ) : C . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 2 ) : if C [ 0 ] [ i + 1 ] - C [ 0 ] [ i ] != C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] : flag = False break elif C [ 1 ] [ i + 1 ] - C [ 1 ] [ i ] != C [ 2 ] [ i + 1 ] - C [ 2 ] [ i ] : flag = False break if flag : for i in range ( 2 ) : if C [ i + 1 ] [ 0 ] - C [ i ] [ 0 ] != C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] : flag = False break elif C [ i + 1 ] [ 1 ] - C [ i ] [ 1 ] != C [ i + 1 ] [ 2 ] - C [ i ] [ 2 ] : flag = False break if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b = list ( c [ 0 ] ) a = [ 0 , c [ 1 ] [ 0 ] - b [ 0 ] , c [ 2 ] [ 0 ] - b [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ i ] + b [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
Data = [ ] def yoko ( a , b ) : x1 = Data [ a ] [ 0 ] - Data [ b ] [ 0 ] x2 = Data [ a ] [ 1 ] - Data [ b ] [ 1 ] x3 = Data [ a ] [ 2 ] - Data [ b ] [ 2 ] if x1 == x2 and x2 == x3 : return 1 else : return 0 def tate ( a , b ) : x1 = Data [ 0 ] [ a ] - Data [ 0 ] [ b ] x2 = Data [ 1 ] [ a ] - Data [ 1 ] [ b ] x3 = Data [ 2 ] [ a ] - Data [ 2 ] [ b ] if x1 == x2 and x2 == x3 : return 1 else : return 0 for i in range ( 3 ) : data = list ( map ( int , input ( ) . split ( ) ) ) Data . append ( data ) ans = 1 ans &= yoko ( 0 , 1 ) ans &= yoko ( 1 , 2 ) ans &= yoko ( 2 , 1 ) ans &= tate ( 0 , 1 ) ans &= tate ( 1 , 2 ) ans &= tate ( 2 , 1 ) if ans == 1 : print ( ' Yes ' ) else : print ( ' No ' )
a , b , c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( a [ 0 ] + 1 ) : b1 = a [ 0 ] - i b2 = a [ 1 ] - i b3 = a [ 2 ] - i a2 = [ ] a3 = [ ] a2 . append ( b [ 0 ] - b1 ) a2 . append ( b [ 1 ] - b2 ) a2 . append ( b [ 2 ] - b3 ) a3 . append ( c [ 0 ] - b1 ) a3 . append ( c [ 1 ] - b2 ) a3 . append ( c [ 2 ] - b3 ) if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( " Yes " ) exit ( ) print ( " No " )
def solve ( CC ) : R = [ sum ( CC [ i ] ) for i in range ( 3 ) ] C = [ sum ( CC [ j ] [ i ] for j in range ( 3 ) ) for i in range ( 3 ) ] checked = all ( ( R [ i ] - R [ i - 1 ] ) % 3 == 0 for i in range ( 3 ) ) checked &= all ( ( C [ i ] - C [ i - 1 ] ) % 3 == 0 for i in range ( 3 ) ) return ' Yes ' if checked else ' No ' _CC = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] print ( solve ( _CC ) )
c = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] Accepted = { ( c [ 0 ] [ 0 ] + k , c [ 0 ] [ 1 ] + k , c [ 0 ] [ 2 ] + k ) for k in range ( - 100 , 101 ) } print ( ' Yes ' if c [ 1 ] in Accepted and c [ 2 ] in Accepted else ' No ' )
mat = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) mat . append ( a ) ans = False if mat [ 1 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 0 ] [ 2 ] : if mat [ 2 ] [ 0 ] - mat [ 0 ] [ 0 ] == mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] and mat [ 2 ] [ 1 ] - mat [ 0 ] [ 1 ] == mat [ 2 ] [ 2 ] - mat [ 0 ] [ 2 ] : ans = True if ans : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 , 0 , 0 ] b = [ 0 , 0 , 0 ] def check ( c , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : return False return True for i in range ( 101 ) : b [ 0 ] = i a [ 0 ] = c [ 0 ] [ 0 ] - b [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] if check ( c , a , b ) : print ( " Yes " ) exit ( ) print ( " No " )
s = [ ] yoko = [ ] ans = " Yes " for i in range ( 3 ) : a , b , c = map ( int , input ( ) . split ( ) ) s . append ( [ a , b , c ] ) yoko . append ( [ a - b , b - c , c - a ] ) if yoko [ 0 ] != yoko [ 1 ] or yoko [ 1 ] != yoko [ 2 ] : ans = " No " tate = [ ] for i in range ( 3 ) : tate . append ( [ s [ i ] [ 0 ] - s [ i ] [ 1 ] , s [ i ] [ 1 ] - s [ i ] [ 2 ] , s [ i ] [ 2 ] - s [ i ] [ 0 ] ] ) if tate [ 0 ] != tate [ 1 ] or tate [ 1 ] != tate [ 2 ] : ans = " No " print ( ans )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = [ c1 , c2 , c3 ] f = False for i in range ( C [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = C [ 0 ] [ 0 ] - a1 b2 = C [ 0 ] [ 1 ] - a1 b3 = C [ 0 ] [ 2 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if a1 + b1 == C [ 0 ] [ 0 ] and a1 + b2 == C [ 0 ] [ 1 ] and a1 + b3 == C [ 0 ] [ 2 ] and a2 + b1 == C [ 1 ] [ 0 ] and a2 + b2 == C [ 1 ] [ 1 ] and a2 + b3 == C [ 1 ] [ 2 ] and a3 + b1 == C [ 2 ] [ 0 ] and a3 + b2 == C [ 2 ] [ 1 ] and a3 + b3 == C [ 2 ] [ 2 ] : f = True break if f == True : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] a [ 1 ] = c [ 1 ] [ 0 ] - b [ 0 ] a [ 2 ] = c [ 2 ] [ 0 ] - b [ 0 ] flag = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] s = 0 for i in range ( 3 ) : for j in range ( 3 ) : s += c [ i ] [ j ] if 3 * ( c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) == s : print ( " Yes " ) else : print ( " No " )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c21 - c11 == c22 - c12 == c23 - c13 and c31 - c21 == c32 - c22 == c33 - c23 and c12 - c11 == c22 - c21 == c32 - c31 and c13 - c12 == c23 - c22 == c33 - c32 : print ( " Yes " ) else : print ( " No " )
def main ( * args , ** kwargs ) : grid = [ ] for i in range ( 3 ) : grid . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a1 in range ( 0 , 101 ) : b1_1 = grid [ 0 ] [ 0 ] - a1 b2_1 = grid [ 0 ] [ 1 ] - a1 b3_1 = grid [ 0 ] [ 2 ] - a1 for a2 in range ( 0 , 101 ) : b1_2 = grid [ 1 ] [ 0 ] - a2 b2_2 = grid [ 1 ] [ 1 ] - a2 b3_2 = grid [ 1 ] [ 2 ] - a2 for a3 in range ( 0 , 101 ) : b1_3 = grid [ 2 ] [ 0 ] - a3 b2_3 = grid [ 2 ] [ 1 ] - a3 b3_3 = grid [ 2 ] [ 2 ] - a3 if b1_1 == b1_2 == b1_3 and b2_1 == b2_2 == b2_3 and b3_1 == b3_2 == b3_3 : print ( ' Yes ' ) return print ( ' No ' ) return main ( )
box = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) box . append ( a ) for a1 in range ( 101 ) : for a2 in range ( 101 ) : a1_b1 = box [ 0 ] [ 0 ] - a1 a1_b2 = box [ 1 ] [ 0 ] - a1 a1_b3 = box [ 2 ] [ 0 ] - a1 a2_b1 = box [ 0 ] [ 1 ] - a2 a2_b2 = box [ 1 ] [ 1 ] - a2 a2_b3 = box [ 2 ] [ 1 ] - a2 f = True if a1_b1 != a2_b1 or a1_b2 != a2_b2 or a1_b3 != a2_b3 : f = False a1_b = [ a1_b1 , a1_b2 , a1_b3 ] a2_b = [ a2_b1 , a2_b2 , a2_b3 ] res = True a1_a3 = [ ] a2_a3 = [ ] for i in range ( 3 ) : if ( box [ i ] [ 2 ] - a1_b [ i ] ) != ( box [ i ] [ 2 ] - a2_b [ i ] ) : res = False a1_a3 . append ( box [ i ] [ 2 ] - a1_b [ i ] ) a2_a3 . append ( box [ i ] [ 2 ] - a2_b [ i ] ) a3 = a1_a3 [ 0 ] for i in range ( 1 , 3 ) : if a3 != a1_a3 [ i ] : res = False a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a3_b = [ ] for i in range ( 3 ) : a3_b . append ( box [ i ] [ 2 ] - a3 ) a = [ a1 , a2 , a3 ] b = a3_b for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False res = True for i in range ( 3 ) : for j in range ( 3 ) : if box [ i ] [ j ] != ( b [ i ] + a [ j ] ) : res = False if res : print ( " Yes " ) exit ( ) print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] b = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] for i in range ( 3 ) : if a != c [ i ] [ 1 ] - c [ i ] [ 0 ] : print ( " No " ) break if b != c [ i ] [ 2 ] - c [ i ] [ 1 ] : print ( " No " ) break else : print ( " Yes " )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) b1 , b2 , b3 = c11 , c12 , c13 a2 = c21 - b1 a3 = c31 - b1 ans = " Yes " if ( a2 + b2 != c22 ) or ( a2 + b3 != c23 ) or ( a3 + b2 != c32 ) or ( a3 + b3 != c33 ) : ans = " No " print ( ans ) if __name__ == " __main__ " : main ( )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) def correct ( ) : if a1 + b2 != c12 : return False if a1 + b3 != c13 : return False if a2 + b1 != c21 : return False if a2 + b3 != c23 : return False if a3 + b1 != c31 : return False if a3 + b2 != c32 : return False return True for i in range ( c11 + 1 ) : for j in range ( c22 + 1 ) : for k in range ( c33 + 1 ) : a1 = i b1 = c11 - i a2 = j b2 = c22 - j a3 = k b3 = c33 - k if correct ( ) : print ( ' Yes ' ) exit ( 0 ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = True row = C [ 0 ] for i in range ( 1 , 3 ) : for j in range ( 3 ) : C [ i ] [ j ] -= C [ 0 ] [ j ] if row != C [ i ] and len ( set ( C [ i ] ) ) != 1 : ans = False print ( " Yes " if ans else " No " )
import numpy as np mat = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] array = np . array ( mat , dtype = np . int64 ) a20 = array [ 2 ] - array [ 0 ] a10 = array [ 1 ] - array [ 0 ] b20 = array [ : , 2 ] - array [ : , 0 ] b10 = array [ : , 1 ] - array [ : , 0 ] flag = False if ( a20 == a20 [ 0 ] ) . all ( ) and ( a10 == a10 [ 0 ] ) . all ( ) and ( b20 == b20 [ 0 ] ) . all ( ) and ( b10 == b10 [ 0 ] ) . all ( ) : for a1 in range ( 0 , 101 ) : a2 = a1 + a10 [ 0 ] a3 = a1 + a20 [ 0 ] b1 = array [ 0 , 0 ] - a1 b2 = b1 + b10 [ 0 ] b3 = b1 + b20 [ 0 ] A = np . array ( [ [ a1 , a2 , a3 ] ] ) . T B = np . array ( [ [ b1 , b2 , b3 ] ] ) C = A + B if ( C == array ) . all ( ) : flag = True break if flag == True : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] base = [ C [ 0 ] [ 0 ] , C [ 1 ] [ 1 ] , C [ 2 ] [ 2 ] ] case_AB = [ 1 for a in range ( base [ 0 ] + 1 ) for b in range ( base [ 1 ] + 1 ) for c in range ( base [ 2 ] + 1 ) if [ [ base [ 0 ] , b + ( base [ 0 ] - a ) , c + ( base [ 0 ] - a ) ] , [ a + ( base [ 1 ] - b ) , base [ 1 ] , c + ( base [ 1 ] - b ) ] , [ a + ( base [ 2 ] - c ) , b + ( base [ 2 ] - c ) , base [ 2 ] ] ] == C ] if case_AB : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) b1 , b2 , b3 = c1 [ 0 ] , c1 [ 1 ] , c1 [ 2 ] if c2 [ 0 ] - b1 == c2 [ 1 ] - b2 == c2 [ 2 ] - b3 and c3 [ 0 ] - b1 == c3 [ 1 ] - b2 == c3 [ 2 ] - b3 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1 = c [ 0 ] [ 0 ] b2 = c [ 0 ] [ 1 ] b3 = c [ 0 ] [ 2 ] a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 f = True if a2 + b2 != c [ 1 ] [ 1 ] : f = False if a2 + b3 != c [ 1 ] [ 2 ] : f = False if a3 + b2 != c [ 2 ] [ 1 ] : f = False if a3 + b3 != c [ 2 ] [ 2 ] : f = False if f : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] s = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if c [ 0 ] [ j ] - c [ 0 ] [ i ] == c [ 1 ] [ j ] - c [ 1 ] [ i ] == c [ 2 ] [ j ] - c [ 2 ] [ i ] : continue else : s = False break for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if c [ j ] [ 0 ] - c [ i ] [ 0 ] == c [ j ] [ 1 ] - c [ i ] [ 1 ] == c [ j ] [ 2 ] - c [ i ] [ 2 ] : continue else : s = False break print ( " Yes " ) if s else print ( " No " )
n = 3 e = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( n ) ] a = [ ] b = [ ] a . append ( 0 ) b . append ( e [ 0 ] [ 0 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 1 ] - a [ 0 ] ) b . append ( e [ 0 ] [ 2 ] - a [ 0 ] ) a . append ( e [ 1 ] [ 0 ] - b [ 0 ] ) a . append ( e [ 2 ] [ 0 ] - b [ 0 ] ) for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != e [ i ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
c = [ [ int ( cn ) for cn in input ( ) . split ( ) ] for _ in range ( 3 ) ] max_val = max ( c [ 0 ] ) ans = ' No ' for a1 in range ( max_val + 1 ) : b = [ c [ 0 ] [ i ] - a1 for i in range ( 3 ) ] correct = True for i in range ( 2 ) : ai_cand = [ ] for j in range ( 3 ) : cand = c [ i + 1 ] [ j ] - b [ j ] correct = cand >= 0 if correct : ai_cand . append ( cand ) else : break if correct : correct = ai_cand [ 0 ] == ai_cand [ 1 ] and ai_cand [ 1 ] == ai_cand [ 2 ] if not correct : break else : break if correct : ans = ' Yes ' break print ( ans )
lst = [ ] for i in range ( 3 ) : a = list ( map ( int , input ( ) . split ( ) ) ) lst . append ( a ) F = False for i in range ( 100 ) : b1 = lst [ 0 ] [ 0 ] - i b2 = lst [ 0 ] [ 1 ] - i b3 = lst [ 0 ] [ 2 ] - i if lst [ 1 ] [ 0 ] - b1 == lst [ 1 ] [ 1 ] - b2 and + \ lst [ 1 ] [ 1 ] - b2 == lst [ 1 ] [ 2 ] - b3 and + \ lst [ 2 ] [ 0 ] - b1 == lst [ 2 ] [ 1 ] - b2 and + \ lst [ 2 ] [ 1 ] - b2 == lst [ 2 ] [ 2 ] - b3 : F = True if F == False : print ( " No " ) else : print ( " Yes " )
[ a , b , c ] = [ int ( i ) for i in input ( ) . split ( ) ] [ d , e , f ] = [ int ( j ) for j in input ( ) . split ( ) ] [ g , h , i ] = [ int ( k ) for k in input ( ) . split ( ) ] t = 0 if d - a == e - b and e - b == f - c : t + = 1 if g - d == h - e and h - e == i - f : t + = 1 if b - a == e - d and e - d == h - g : t + = 1 if c - b == f - e and f - e == i - h : t + = 1 if t == 4 : print ( " Yes " ) else : print ( " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] import sys a1 = max ( C [ 0 ] ) a2 = max ( C [ 1 ] ) a3 = max ( C [ 2 ] ) for i in range ( a1 + 1 ) : for j in range ( a2 + 1 ) : for k in range ( a3 + 1 ) : if C [ 0 ] [ 0 ] - i == C [ 1 ] [ 0 ] - j and C [ 1 ] [ 0 ] - j == C [ 2 ] [ 0 ] - k : if C [ 0 ] [ 1 ] - i == C [ 1 ] [ 1 ] - j and C [ 1 ] [ 1 ] - j == C [ 2 ] [ 1 ] - k : if C [ 0 ] [ 2 ] - i == C [ 1 ] [ 2 ] - j and C [ 1 ] [ 2 ] - j == C [ 2 ] [ 2 ] - k : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
C = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] ans = C [ 0 ] [ 0 ] + C [ 1 ] [ 1 ] + C [ 2 ] [ 2 ] if ( ans == C [ 0 ] [ 2 ] + C [ 1 ] [ 0 ] + C [ 2 ] [ 1 ] and ans == C [ 0 ] [ 1 ] + C [ 1 ] [ 2 ] + C [ 2 ] [ 0 ] ) : print ( ' Yes ' ) else : print ( ' No ' )
def mod3 ( num ) : if num % 3 == 0 : return True else : return False cList = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] row = [ sum ( cList [ 0 ] ) , sum ( cList [ 1 ] ) , sum ( cList [ 2 ] ) ] col = [ cList [ 0 ] [ i ] + cList [ 1 ] [ i ] + cList [ 2 ] [ i ] for i in range ( 3 ) ] differenceRow = [ row [ i - 1 ] - row [ i ] for i in range ( 3 ) ] differenceCol = [ col [ i - 1 ] - col [ i ] for i in range ( 3 ) ] difference = [ sum ( row ) ] + differenceRow + differenceCol if list ( filter ( mod3 , difference ) ) != difference : print ( " No " ) else : print ( " Yes " )
import sys input = sys . stdin . readline grid = [ ] for i in range ( 3 ) : aa = list ( map ( int , input ( ) . split ( ) ) ) grid . append ( aa ) flag = True for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ i ] [ 0 ] - grid [ j ] [ 0 ] for k in range ( 1 , 3 ) : if ( c != ( grid [ i ] [ 1 ] - grid [ j ] [ 1 ] ) or c != ( grid [ i ] [ 2 ] - grid [ j ] [ 2 ] ) ) : flag = False for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : c = grid [ 0 ] [ i ] - grid [ 0 ] [ j ] for k in range ( 1 , 3 ) : if ( c != ( grid [ 1 ] [ i ] - grid [ 1 ] [ j ] ) or c != ( grid [ 2 ] [ i ] - grid [ 2 ] [ j ] ) ) : flag = False if ( flag ) : print ( " Yes " ) else : print ( " No " )
def main ( ) : c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] f = [ [ x [ 0 ] - x [ 1 ] , x [ 1 ] - x [ 2 ] , x [ 2 ] - x [ 0 ] ] for x in c ] g = f [ 0 ] == f [ 1 ] == f [ 2 ] print ( ' Yes ' if g else ' No ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 2 ) : for j in range ( i + 1 , 3 ) : if c [ i ] [ j ] + c [ j ] [ i ] != c [ i ] [ i ] + c [ j ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] a = 0 b = 0 c = 0 if C [ 0 ] [ 0 ] - C [ 0 ] [ 1 ] == C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] and C [ 1 ] [ 0 ] - C [ 1 ] [ 1 ] == C [ 2 ] [ 0 ] - C [ 2 ] [ 1 ] : a = 1 if C [ 0 ] [ 1 ] - C [ 0 ] [ 2 ] == C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] and C [ 1 ] [ 1 ] - C [ 1 ] [ 2 ] == C [ 2 ] [ 1 ] - C [ 2 ] [ 2 ] : b = 1 if C [ 0 ] [ 2 ] - C [ 0 ] [ 0 ] == C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] and C [ 1 ] [ 2 ] - C [ 1 ] [ 0 ] == C [ 2 ] [ 2 ] - C [ 2 ] [ 0 ] : c = 1 if a == 1 and b == 1 and c == 1 : print ( ' Yes ' ) else : print ( ' No ' )
listA = [ ] list_number = [ ] for i in range ( 3 ) : list_number . append ( list ( map ( int , input ( ) . split ( ) ) ) ) listA . append ( [ min ( list_number [ 0 ] ) , min ( list_number [ 1 ] ) , min ( list_number [ 2 ] ) ] ) b1 = min ( list_number [ 0 ] [ 0 ] , list_number [ 1 ] [ 0 ] , list_number [ 2 ] [ 0 ] ) b2 = min ( list_number [ 0 ] [ 1 ] , list_number [ 1 ] [ 1 ] , list_number [ 2 ] [ 1 ] ) b3 = min ( list_number [ 0 ] [ 2 ] , list_number [ 1 ] [ 2 ] , list_number [ 2 ] [ 2 ] ) listA . append ( [ b1 , b2 , b3 ] ) for i in range ( 3 ) : list_number [ i ] = list ( map ( lambda x : x - listA [ 0 ] [ i ] , list_number [ i ] ) ) for j in range ( 3 ) : B = set ( [ list_number [ 0 ] [ j ] , list_number [ 1 ] [ j ] , list_number [ 2 ] [ j ] ] ) if len ( B ) == 1 : pass else : print ( " No " ) exit ( ) print ( " Yes " )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = [ 0 ] * 3 b = [ 0 ] * 3 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] for i in range ( 1 , 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] == a [ i ] + b [ j ] : pass else : print ( " No " ) sys . exit ( ) print ( " Yes " )
from functools import reduce from itertools import * def read ( ) : return list ( map ( int , input ( ) . split ( ) ) ) l = [ read ( ) , read ( ) , read ( ) ] a = len ( list ( set ( [ l [ 1 ] [ i ] - l [ 0 ] [ i ] for i in range ( 3 ) ] ) ) ) b = len ( list ( set ( [ l [ 2 ] [ i ] - l [ 1 ] [ i ] for i in range ( 3 ) ] ) ) ) c = len ( list ( set ( [ l [ i ] [ 1 ] - l [ i ] [ 0 ] for i in range ( 3 ) ] ) ) ) d = len ( list ( set ( [ l [ i ] [ 2 ] - l [ i ] [ 1 ] for i in range ( 3 ) ] ) ) ) if a == 1 and b == 1 and c == 1 and d == 1 : print ( " Yes " ) else : print ( " No " )
c = [ [ int ( i ) for i in input ( ) . split ( ) ] for i in range ( 3 ) ] a = [ ] b = [ c [ 0 ] [ i ] for i in range ( 3 ) ] a = [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ [ ] for _ in range ( 3 ) ] for i in range ( 3 ) : c [ i ] = list ( map ( int , input ( ) . split ( ) ) ) diff0 = [ x - y for x , y in zip ( c [ 0 ] , c [ 1 ] ) ] diff1 = [ x - y for x , y in zip ( c [ 0 ] , c [ 2 ] ) ] if diff0 [ 0 ] == diff0 [ 1 ] and diff0 [ 0 ] == diff0 [ 2 ] and diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 0 ] == diff1 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if not ( c12 - c11 == c22 - c21 == c32 - c31 ) : print ( " No " ) quit ( ) if not ( c13 - c12 == c23 - c22 == c33 - c32 ) : print ( " No " ) quit ( ) if not ( c21 - c11 == c22 - c12 == c23 - c13 ) : print ( " No " ) quit ( ) if not ( c31 - c21 == c32 - c22 == c33 - c23 ) : print ( " No " ) quit ( ) print ( " Yes " )
c = [ [ int ( x ) for x in input ( ) . split ( ) ] for _ in range ( 3 ) ] for i in range ( 3 ) : for j in range ( 3 ) : ni = ( i + 1 ) % 3 nj = ( j + 1 ) % 3 if c [ i ] [ j ] + c [ ni ] [ nj ] != c [ i ] [ nj ] + c [ ni ] [ j ] : print ( " No " ) exit ( ) print ( " Yes " )
A = [ ] for i in range ( 3 ) : temp = list ( map ( int , input ( ) . split ( ) ) ) A . append ( temp ) if A [ 0 ] [ 0 ] + A [ 1 ] [ 1 ] == A [ 0 ] [ 1 ] + A [ 1 ] [ 0 ] and \ A [ 0 ] [ 1 ] + A [ 1 ] [ 2 ] == A [ 0 ] [ 2 ] + A [ 1 ] [ 1 ] and \ A [ 1 ] [ 0 ] + A [ 2 ] [ 1 ] == A [ 1 ] [ 1 ] + A [ 2 ] [ 0 ] and \ A [ 1 ] [ 1 ] + A [ 2 ] [ 2 ] == A [ 1 ] [ 2 ] + A [ 2 ] [ 1 ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] b = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] cc = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] d = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] for i in range ( 1 , 3 ) : if not ( c [ i ] [ 1 ] - c [ i ] [ 0 ] ) == a or not ( c [ i ] [ 2 ] - c [ i ] [ 1 ] ) == b : print ( ' No ' ) exit ( ) if not c [ 1 ] [ i ] - c [ 0 ] [ i ] == cc or not c [ 2 ] [ i ] - c [ 1 ] [ i ] == d : print ( ' No ' ) exit ( ) print ( ' Yes ' )
import sys try : from typing import List except ImportError : pass YES = " Yes " NO = " No " def solve ( c : " List[List[int]] " ) : print ( YES if all ( c [ i ] [ j ] == c [ 0 ] [ j ] + c [ i ] [ 0 ] - c [ 0 ] [ 0 ] for i in range ( 1 , 3 ) for j in range ( 1 , 3 ) ) else NO ) def main ( ) : def iterate_tokens ( ) : for line in sys . stdin : for word in line . split ( ) : yield word tokens = iterate_tokens ( ) c = [ [ int ( next ( tokens ) ) for _ in range ( 3 ) ] for _ in range ( 3 ) ] solve ( c ) if __name__ == ' __main__ ' : main ( )
import copy def solve ( ) : c = [ ] for i in range ( 3 ) : tmp = list ( map ( int , input ( ) . split ( ) ) ) c . append ( tmp ) for a1 in range ( 0 , 100 + 1 ) : b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 if a2 != c [ 1 ] [ 1 ] - b2 or a2 != c [ 1 ] [ 2 ] - b3 : continue a3 = c [ 2 ] [ 0 ] - b1 if a3 != c [ 2 ] [ 1 ] - b2 or a3 != c [ 2 ] [ 2 ] - b3 : continue print ( ' Yes ' ) break else : print ( ' No ' ) if __name__ == ' __main__ ' : solve ( )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
def is_valid ( m , a , b ) : for i in range ( 3 ) : for j in range ( 3 ) : if ( m [ i ] [ j ] != a [ i ] + b [ j ] ) : return 0 return 1 m = [ ] for a0 in range ( 3 ) : m . append ( list ( map ( int , input ( ) . split ( ) ) ) ) for a0 in range ( 101 ) : b0 = m [ 0 ] [ 0 ] - a0 b1 = m [ 0 ] [ 1 ] - a0 b2 = m [ 0 ] [ 2 ] - a0 a1 = m [ 1 ] [ 0 ] - b0 a2 = m [ 2 ] [ 0 ] - b0 if ( is_valid ( m , [ a0 , a1 , a2 ] , [ b0 , b1 , b2 ] ) ) : print ( " Yes " ) exit ( ) print ( " No " )
c = [ ] for _ in range ( 3 ) : c1 = list ( map ( int , input ( ) . split ( ) ) ) c . append ( c1 ) a = [ c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 0 ] [ 2 ] ] b = [ 0 , c [ 1 ] [ 1 ] - a [ 1 ] , c [ 2 ] [ 2 ] - a [ 2 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : print ( " No " ) exit ( ) print ( " Yes " )
import numpy as np a = np . array ( [ input ( ) . split ( ) for i in [ 0 ] * 3 ] ) . astype ( int ) for s in range ( 3 ) : if sum ( a [ s - 1 ] - a [ s ] ) % 3 or sum ( a [ : , s - 1 ] - a [ : , s ] ) % 3 : print ( " No " ) ; exit ( ) print ( " Yes " )
def solve ( ) : import sys s = list ( map ( int , sys . stdin . read ( ) . split ( ) ) ) x , y , z = s [ 0 ] + s [ 4 ] + s [ 8 ] , s [ 1 ] + s [ 5 ] + s [ 6 ] , s [ 2 ] + s [ 3 ] + s [ 7 ] if x == y == z : print ( " Yes " ) else : print ( " No " ) solve ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] ans = ' Yes ' if c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] != c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] != c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] != c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] or c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] != c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] or c [ 0 ] [ 0 ] - c [ 0 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] or c [ 1 ] [ 0 ] - c [ 1 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 2 ] [ 1 ] or c [ 0 ] [ 1 ] - c [ 0 ] [ 2 ] != c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] or c [ 1 ] [ 1 ] - c [ 1 ] [ 2 ] != c [ 2 ] [ 1 ] - c [ 2 ] [ 2 ] : ans = ' No ' print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a2 = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] a3 = c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] if any ( c [ 1 ] [ x ] != a2 + c [ 0 ] [ x ] for x in [ 1 , 2 ] ) or any ( c [ 2 ] [ x ] != a3 + c [ 0 ] [ x ] for x in [ 1 , 2 ] ) : print ( ' No ' ) else : print ( ' Yes ' )
[ C11 , C12 , C13 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C21 , C22 , C23 ] = [ int ( i ) for i in input ( ) . split ( ) ] [ C31 , C32 , C33 ] = [ int ( i ) for i in input ( ) . split ( ) ] b1 = C11 b2 = C12 b3 = C13 flag_a2 = False if ( C21 - b1 ) == ( C22 - b2 ) and ( C21 - b1 ) == ( C23 - b3 ) : flag_a2 = True flag_a3 = False if ( C31 - b1 ) == ( C32 - b2 ) and ( C31 - b1 ) == ( C33 - b3 ) : flag_a3 = True if flag_a2 is True and flag_a3 is True : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 b2 = c [ 0 ] [ 1 ] - a1 a3 = c [ 2 ] [ 0 ] - b1 b3 = c [ 0 ] [ 2 ] - a1 if a2 + b2 != c [ 1 ] [ 1 ] : print ( " No " ) exit ( ) if a2 + b3 != c [ 1 ] [ 2 ] : print ( " No " ) exit ( ) if a3 + b2 != c [ 2 ] [ 1 ] : print ( " No " ) exit ( ) if a3 + b3 != c [ 2 ] [ 2 ] : print ( " No " ) exit ( ) print ( " Yes " )
A = list ( map ( int , input ( ) . split ( ) ) ) B = list ( map ( int , input ( ) . split ( ) ) ) C = list ( map ( int , input ( ) . split ( ) ) ) if ( sum ( A ) + sum ( B ) + sum ( C ) ) / 3 == A [ 0 ] + B [ 1 ] + C [ 2 ] == A [ 2 ] + B [ 1 ] + C [ 0 ] : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for j in range ( 1 , 3 ) : flag = True for i in range ( 1 , 3 ) : if c [ 0 ] [ j ] - c [ 0 ] [ ( j + 1 ) % 3 ] != c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] : flag = False break if not flag : print ( ' No ' ) exit ( ) for i in range ( 1 , 3 ) : flag = True for j in range ( 1 , 3 ) : if c [ i % 3 ] [ 0 ] - c [ ( i + 1 ) % 3 ] [ 0 ] != c [ i ] [ j ] - c [ ( i + 1 ) % 3 ] [ j ] : flag = False break if not flag : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c_l = [ ] for _ in range ( 3 ) : c_l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) b2mb1 = c_l [ 0 ] [ 1 ] - c_l [ 0 ] [ 0 ] b3mb1 = c_l [ 0 ] [ 2 ] - c_l [ 0 ] [ 0 ] for i in ( 1 , 2 ) : if c_l [ i ] [ 1 ] != c_l [ i ] [ 0 ] + b2mb1 : print ( ' No ' ) exit ( ) if c_l [ i ] [ 2 ] != c_l [ i ] [ 0 ] + b3mb1 : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for l in range ( 3 ) ] flag = False for i in range ( c [ 0 ] [ 0 ] + 1 ) : a1 = i b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 if c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 : flag = True break else : continue if flag : print ( ' Yes ' ) else : print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] B = [ C [ 0 ] [ 0 ] , C [ 0 ] [ 1 ] , C [ 0 ] [ 2 ] ] A = [ 0 , C [ 1 ] [ 0 ] - B [ 0 ] , C [ 2 ] [ 0 ] - B [ 0 ] ] for i in range ( 3 ) : for j in range ( 3 ) : if C [ i ] [ j ] != A [ i ] + B [ j ] : print ( " No " ) quit ( ) print ( " Yes " )
import numpy as np c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) C = np . array ( [ c1 , c2 , c3 ] ) Ct = np . transpose ( C ) ans = C + Ct fact = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if not ( ans [ i , j ] == C [ i , i ] + C [ j , j ] ) : fact = " No " break print ( fact )
import sys input = sys . stdin . readline def read ( ) : C = [ ] for i in range ( 3 ) : c1 , c2 , c3 = map ( int , input ( ) . strip ( ) . split ( ) ) C . append ( ( c1 , c2 , c3 ) ) return C , def solve ( C ) : for b0 in range ( 101 ) : for b1 in range ( 101 ) : for b2 in range ( 101 ) : x = C [ 0 ] [ 0 ] - b0 y = C [ 0 ] [ 1 ] - b1 z = C [ 0 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 1 ] [ 0 ] - b0 y = C [ 1 ] [ 1 ] - b1 z = C [ 1 ] [ 2 ] - b2 if x != y or y != z : continue x = C [ 2 ] [ 0 ] - b0 y = C [ 2 ] [ 1 ] - b1 z = C [ 2 ] [ 2 ] - b2 if x != y or y != z : continue return " Yes " return " No " if __name__ == ' __main__ ' : inputs = read ( ) print ( solve ( * inputs ) )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) x = min ( c1 ) y = min ( c2 ) z = min ( c3 ) for i in range ( 3 ) : c1 [ i ] -= x c2 [ i ] -= y c3 [ i ] -= z print ( ' NYoe s ' [ c1 == c2 == c3 : : 2 ] )
import sys c = list ( map ( int , input ( ) . split ( ) ) ) c += list ( map ( int , input ( ) . split ( ) ) ) c += list ( map ( int , input ( ) . split ( ) ) ) a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 b [ 0 ] = c [ 0 ] a [ 1 ] = c [ 3 ] - b [ 0 ] b [ 1 ] = c [ 4 ] - a [ 1 ] a [ 2 ] = c [ 6 ] - b [ 0 ] b [ 2 ] = c [ 8 ] - a [ 2 ] index = 0 for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ index ] : print ( ' No ' ) sys . exit ( ) index += 1 print ( ' Yes ' )
import numpy as np C = np . zeros ( ( 3 , 3 ) ) for i in range ( 3 ) : C [ i , 0 ] , C [ i , 1 ] , C [ i , 2 ] = [ int ( _ ) for _ in input ( ) . split ( ) ] for i in range ( 3 ) : for j in range ( 2 ) : if not ( C [ i , 0 ] - C [ j , 0 ] == C [ i , 1 ] - C [ j , 1 ] == C [ i , 2 ] - C [ j , 2 ] ) \ or not \ ( C [ 0 , i ] - C [ 0 , j ] == C [ 1 , i ] - C [ 1 , j ] == C [ 2 , i ] - C [ 2 , j ] ) : print ( ' No ' ) quit ( ) print ( ' Yes ' )
numbertable = [ ] for i in range ( 0 , 3 ) : numbertable . append ( list ( map ( int , input ( ) . split ( ) ) ) ) flag = True for i in range ( 0 , 3 ) : for j in range ( 0 , 3 ) : if numbertable [ i ] [ j ] + numbertable [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] != numbertable [ i ] [ ( j + 1 ) % 3 ] + numbertable [ ( i + 1 ) % 3 ] [ j ] : flag = False break if not flag : break if flag : print ( ' Yes ' ) else : print ( ' No ' )
import sys c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( min ( c [ 0 ] ) + 1 ) : b = [ c [ 0 ] [ k ] - i for k in range ( 3 ) ] a = [ c [ i ] [ 0 ] - b [ 0 ] for i in range ( 3 ) ] for i in range ( 1 , 3 ) : if c [ i ] [ 1 ] != a [ i ] + b [ 1 ] or c [ i ] [ 2 ] != a [ i ] + b [ 2 ] : break else : print ( ' Yes ' ) sys . exit ( ) print ( ' No ' )
hog1 = list ( map ( int , input ( ) . split ( ) ) ) hog2 = list ( map ( int , input ( ) . split ( ) ) ) hog3 = list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 100 ) : if ( hog1 [ 0 ] != 0 and hog1 [ 1 ] != 0 and hog1 [ 2 ] != 0 ) : hog1 [ 0 ] -= 1 hog1 [ 1 ] -= 1 hog1 [ 2 ] -= 1 if ( hog2 [ 0 ] != 0 and hog2 [ 1 ] != 0 and hog2 [ 2 ] != 0 ) : hog2 [ 0 ] - = 1 hog2 [ 1 ] - = 1 hog2 [ 2 ] - = 1 if ( hog3 [ 0 ] != 0 and hog3 [ 1 ] != 0 and hog3 [ 2 ] != 0 ) : hog3 [ 0 ] - = 1 hog3 [ 1 ] - = 1 hog3 [ 2 ] - = 1 if ( hog1 [ 0 ] != 0 and hog2 [ 0 ] != 0 and hog3 [ 0 ] != 0 ) : hog1 [ 0 ] - = 1 hog2 [ 0 ] - = 1 hog3 [ 0 ] - = 1 if ( hog1 [ 1 ] != 0 and hog2 [ 1 ] != 0 and hog3 [ 1 ] != 0 ) : hog1 [ 1 ] - = 1 hog2 [ 1 ] - = 1 hog3 [ 1 ] - = 1 if ( hog1 [ 2 ] != 0 and hog2 [ 2 ] != 0 and hog3 [ 2 ] != 0 ) : hog1 [ 2 ] - = 1 hog2 [ 2 ] - = 1 hog3 [ 2 ] - = 1 ans = sum ( hog1 ) + sum ( hog2 ) + sum ( hog3 ) if ( ans == 0 ) : print ( " Yes " ) else : print ( " No " )
a0 , a1 , a2 = 0 , 0 , 0 b0 , b1 , b2 = 0 , 0 , 0 matrix = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] b0 = matrix [ 0 ] [ 0 ] - a0 b1 = matrix [ 0 ] [ 1 ] - a0 b2 = matrix [ 0 ] [ 2 ] - a0 a1 = matrix [ 1 ] [ 0 ] - b0 a2 = matrix [ 2 ] [ 0 ] - b0 flag = True if matrix [ 1 ] [ 1 ] == a1 + b1 and matrix [ 1 ] [ 2 ] == a1 + b2 and matrix [ 2 ] [ 1 ] == a2 + b1 and matrix [ 2 ] [ 2 ] == a2 + b2 : print ( ' Yes ' ) else : print ( ' No ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] diff0 = [ x - y for x , y in zip ( c [ 0 ] , c [ 1 ] ) ] diff1 = [ x - y for x , y in zip ( c [ 0 ] , c [ 2 ] ) ] if diff0 [ 0 ] == diff0 [ 1 ] and diff0 [ 0 ] == diff0 [ 2 ] and diff1 [ 0 ] == diff1 [ 1 ] and diff1 [ 0 ] == diff1 [ 2 ] : print ( ' Yes ' ) else : print ( ' No ' )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) for a1 in range ( 101 ) : b1 = c1 [ 0 ] - a1 b2 = c1 [ 1 ] - a1 b3 = c1 [ 2 ] - a1 a2 = c2 [ 0 ] - b1 a3 = c3 [ 0 ] - b1 if c2 [ 1 ] == a2 + b2 and c2 [ 2 ] == a2 + b3 and c3 [ 1 ] == a3 + b2 and c3 [ 2 ] == a3 + b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
def readlines ( ) : for _ in range ( 3 ) : yield list ( map ( int , input ( ) . split ( ) ) ) c = list ( readlines ( ) ) a1 = 0 b1 = c [ 0 ] [ 0 ] - a1 b2 = c [ 0 ] [ 1 ] - a1 b3 = c [ 0 ] [ 2 ] - a1 a2 = c [ 1 ] [ 0 ] - b1 a3 = c [ 2 ] [ 0 ] - b1 ok = ( c [ 1 ] [ 1 ] == a2 + b2 and c [ 1 ] [ 2 ] == a2 + b3 and c [ 2 ] [ 1 ] == a3 + b2 and c [ 2 ] [ 2 ] == a3 + b3 ) print ( " Yes " if ok else " No " )
a1 , b1 , c1 = ( int ( i ) for i in input ( ) . split ( ) ) a2 , b2 , c2 = ( int ( i ) for i in input ( ) . split ( ) ) a3 , b3 , c3 = ( int ( i ) for i in input ( ) . split ( ) ) am = min ( a1 , a2 , a3 ) bm = min ( b1 , b2 , b3 ) cm = min ( c1 , c2 , c3 ) a = [ a1 - am , a2 - am , a3 - am ] b = [ b1 - bm , b2 - bm , b3 - bm ] c = [ c1 - cm , c2 - cm , c3 - cm ] if a == b == c : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) , list ( map ( int , input ( ) . split ( ) ) ) ] f = True if not c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 0 ] [ 2 ] : f = False if not c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] : f = False if not c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 2 ] [ 0 ] : f = False if not c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 2 ] [ 1 ] : f = False print ( ' Yes ' if f else ' No ' )
lst_c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] lst_diff_i = [ ] for i in range ( 3 ) : diff1 = lst_c [ i ] [ 0 ] - lst_c [ i ] [ 1 ] diff2 = lst_c [ i ] [ 1 ] - lst_c [ i ] [ 2 ] diff3 = lst_c [ i ] [ 2 ] - lst_c [ i ] [ 0 ] lst_diff_i . append ( [ diff1 , diff2 , diff3 ] ) if lst_diff_i [ 0 ] == lst_diff_i [ 1 ] == lst_diff_i [ 2 ] : ans = " Yes " else : print ( " No " ) exit ( ) for i in range ( 3 ) : diff1 = lst_c [ 0 ] [ i ] - lst_c [ 1 ] [ i ] diff2 = lst_c [ 1 ] [ i ] - lst_c [ 2 ] [ i ] diff3 = lst_c [ 2 ] [ i ] - lst_c [ 0 ] [ i ] lst_diff_i . append ( [ diff1 , diff2 , diff3 ] ) if lst_diff_i [ 0 ] == lst_diff_i [ 1 ] == lst_diff_i [ 2 ] : ans = " Yes " else : print ( " No " ) exit ( ) print ( ans )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] b1b2 = c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] b1b3 = c [ 0 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 2 ] [ 2 ] b2b3 = c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] if b1b2 and b1b3 and b2b3 : print ( " Yes " ) else : print ( " No " )
c1 = list ( map ( int , input ( ) . split ( ) ) ) c2 = list ( map ( int , input ( ) . split ( ) ) ) c3 = list ( map ( int , input ( ) . split ( ) ) ) c = [ c1 , c2 , c3 ] a = [ 0 ] * 3 b = [ 0 ] * 3 a [ 0 ] = 0 for i in range ( 3 ) : b [ i ] = c [ 0 ] [ i ] - a [ 0 ] for i in range ( 3 ) : a [ i ] = c [ i ] [ 0 ] - b [ 0 ] good = True for i in range ( 3 ) : for j in range ( 3 ) : if a [ i ] + b [ j ] != c [ i ] [ j ] : print ( ' No ' ) exit ( ) print ( ' Yes ' )
c = [ ] for i in range ( 3 ) : c . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) ans = True for i in range ( 2 ) : if c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] : pass else : ans = False for j in range ( 2 ) : if c [ j ] [ 0 ] - c [ j ] [ 0 ] == c [ j ] [ 1 ] - c [ j ] [ 1 ] == c [ j ] [ 2 ] - c [ j ] [ 2 ] : pass else : ans = False if ans : print ( " Yes " ) else : print ( " No " )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_ans = [ 0 for i in range ( 3 ) ] b_ans = [ 0 for i in range ( 3 ) ] a_ans [ 0 ] = ( ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) + ( c_list [ 0 ] [ 1 ] - c_list [ 1 ] [ 1 ] ) ) // 2 a_ans [ 1 ] = a_ans [ 0 ] - ( c_list [ 0 ] [ 0 ] - c_list [ 1 ] [ 0 ] ) a_ans [ 2 ] = c_list [ 2 ] [ 0 ] - c_list [ 0 ] [ 0 ] + a_ans [ 0 ] b_ans [ 0 ] = c_list [ 0 ] [ 0 ] - a_ans [ 0 ] b_ans [ 1 ] = c_list [ 0 ] [ 1 ] - a_ans [ 0 ] b_ans [ 2 ] = c_list [ 0 ] [ 2 ] - a_ans [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if c_list [ i ] [ j ] != a_ans [ i ] + b_ans [ j ] : ans = " No " break print ( ans )
c = [ ] for i in range ( 3 ) : c . append ( list ( map ( int , input ( ) . split ( ) ) ) ) setset = { len ( { c [ i ] [ 0 ] - c [ i ] [ 1 ] for i in range ( 3 ) } ) , len ( { c [ i ] [ 0 ] - c [ i ] [ 2 ] for i in range ( 3 ) } ) , len ( { c [ 0 ] [ i ] - c [ 2 ] [ i ] for i in range ( 3 ) } ) , len ( { c [ 0 ] [ i ] - c [ 2 ] [ i ] for i in range ( 3 ) } ) } l = list ( setset ) print ( ' Yes ' if l == [ 1 ] else ' No ' )
tbl = [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( 3 ) ] for a1 in range ( 100 ) : B = [ tbl [ 0 ] [ i ] - a1 for i in range ( 3 ) ] A = [ a1 , tbl [ 1 ] [ 0 ] - B [ 0 ] , tbl [ 2 ] [ 0 ] - B [ 0 ] ] flg = True for i in range ( 3 ) : for j in range ( 3 ) : if tbl [ i ] [ j ] != A [ i ] + B [ j ] : flg = False break if not flg : break if flg : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import sys C = [ list ( map ( int , sys . stdin . readline ( ) . split ( " " ) ) ) for i in range ( 3 ) ] for a0 in range ( 101 ) : b0 = C [ 0 ] [ 0 ] - a0 b1 = C [ 0 ] [ 1 ] - a0 b2 = C [ 0 ] [ 2 ] - a0 if ( C [ 1 ] [ 0 ] - b0 == C [ 1 ] [ 1 ] - b1 == C [ 1 ] [ 2 ] - b2 ) and ( C [ 2 ] [ 0 ] - b0 == C [ 2 ] [ 1 ] - b1 == C [ 2 ] [ 2 ] - b2 ) : print ( " Yes " ) exit ( ) print ( " No " )
import itertools import collections import bisect def main ( ) : A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for a1 in range ( 101 ) : b1 = A [ 0 ] [ 0 ] - a1 b2 = A [ 0 ] [ 1 ] - a1 b3 = A [ 0 ] [ 2 ] - a1 for a2 in range ( 101 ) : if all ( [ a2 + b1 == A [ 1 ] [ 0 ] , a2 + b2 == A [ 1 ] [ 1 ] , a2 + b3 == A [ 1 ] [ 2 ] ] ) : for a3 in range ( 101 ) : if all ( [ a3 + b1 == A [ 2 ] [ 0 ] , a3 + b2 == A [ 2 ] [ 1 ] , a3 + b3 == A [ 2 ] [ 2 ] ] ) : print ( " Yes " ) exit ( ) print ( " No " ) if __name__ == ' __main__ ' : main ( )
flag = 0 c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) b2b1 = c12 - c11 b3b1 = c13 - c11 c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) if c22 - c21 != b2b1 or c23 - c21 != b3b1 : flag = 1 a2a1 = c21 - c11 if c22 - c12 != a2a1 or c23 - c13 != a2a1 : flag = 1 c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) if c32 - c31 != b2b1 or c33 - c31 != b3b1 : flag = 1 a3a1 = c31 - c11 if c32 - c12 != a3a1 or c33 - c13 != a3a1 : flag = 1 if flag : print ( " No " ) else : print ( " Yes " )
c_list = [ ] for i in range ( 3 ) : c = list ( map ( int , input ( ) . split ( ) ) ) c_list . append ( c ) a_list = [ [ ] for i in range ( 3 ) ] b_list = [ [ ] for i in range ( 3 ) ] a_list [ 0 ] = 0 b_list [ 0 ] = c_list [ 0 ] [ 0 ] a_list [ 1 ] = c_list [ 0 ] [ 1 ] - b_list [ 0 ] a_list [ 2 ] = c_list [ 0 ] [ 2 ] - b_list [ 0 ] b_list [ 1 ] = c_list [ 1 ] [ 0 ] - a_list [ 0 ] b_list [ 2 ] = c_list [ 2 ] [ 0 ] - a_list [ 0 ] if ( ( ( a_list [ 1 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 1 ] ) == c_list [ 1 ] [ 2 ] ) and ( ( a_list [ 1 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 1 ] ) and ( ( a_list [ 2 ] + b_list [ 2 ] ) == c_list [ 2 ] [ 2 ] ) ) : print ( ' Yes ' ) else : print ( ' No ' )
def main ( ) : grid = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if grid [ 0 ] [ 0 ] == ( grid [ 0 ] [ 2 ] + grid [ 2 ] [ 0 ] ) - grid [ 2 ] [ 2 ] and grid [ 1 ] [ 1 ] == ( grid [ 0 ] [ 1 ] + grid [ 1 ] [ 0 ] ) - grid [ 0 ] [ 0 ] and grid [ 2 ] [ 2 ] == ( grid [ 1 ] [ 2 ] + grid [ 2 ] [ 1 ] ) - grid [ 1 ] [ 1 ] : ans = ' Yes ' else : ans = ' No ' print ( ans ) if __name__ == " __main__ " : main ( )
def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) def m ( ) : return map ( int , input ( ) . split ( ) ) def main ( ) : c = [ 0 ] * 3 for i in range ( 3 ) : c [ i ] = l ( ) a = [ 0 ] * 3 b = [ 0 ] * 3 b [ 0 ] = min ( c [ 0 ] ) for i in range ( 3 ) : a [ i ] = c [ 0 ] [ i ] - b [ 0 ] for i in range ( 1 , 3 ) : b [ i ] = c [ i ] [ 0 ] - a [ 0 ] for i in range ( 3 ) : for j in range ( 3 ) : if c [ i ] [ j ] != a [ j ] + b [ i ] : print ( ' No ' ) exit ( ) print ( ' Yes ' ) if __name__ == ' __main__ ' : main ( )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] if c [ 1 ] [ 1 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] : print ( ' No ' ) elif c [ 1 ] [ 2 ] != c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) elif c [ 2 ] [ 1 ] != c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 1 ] : print ( ' No ' ) elif c [ 2 ] [ 2 ] != c [ 2 ] [ 0 ] - c [ 0 ] [ 0 ] + c [ 0 ] [ 2 ] : print ( ' No ' ) else : print ( ' Yes ' )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] d1 = [ ] d2 = [ ] for i in range ( 3 ) : d1 . append ( c [ 1 ] [ i ] - c [ 0 ] [ i ] ) d2 . append ( c [ 2 ] [ i ] - c [ 0 ] [ i ] ) print ( ' Yes ' if ( d1 [ 0 ] == d1 [ 1 ] == d1 [ 2 ] and d2 [ 0 ] == d2 [ 1 ] == d2 [ 2 ] ) else ' No ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) flag = False for a1 in range ( min ( c [ 0 ] ) + 1 ) : b1 = c [ 0 , 0 ] - a1 b2 = c [ 0 , 1 ] - a1 b3 = c [ 0 , 2 ] - a1 if c [ 1 , 0 ] - b1 == c [ 1 , 1 ] - b2 == c [ 1 , 2 ] - b3 and c [ 2 , 0 ] - b1 == c [ 2 , 1 ] - b2 == c [ 2 , 2 ] - b3 : print ( ' Yes ' ) flag = True break if not flag : print ( ' No ' )
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) a1 = 0 a2 = ( c12 - c11 , c22 - c21 , c32 - c31 ) a3 = ( c13 - c11 , c23 - c21 , c33 - c31 ) if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] cross_left = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] cross_right = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] total = 0 for i in range ( 3 ) : total += sum ( c [ i ] ) if total % 3 == 0 and total // 3 == cross_left and total // 3 == cross_right : print ( ' Yes ' ) else : print ( ' No ' )
c = [ ] c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] count = 0 for i in range ( 2 ) : for j in range ( 2 ) : if ( c [ i ] [ j ] + c [ i + 1 ] [ j + 1 ] ) == ( c [ i ] [ j + 1 ] + c [ i + 1 ] [ j ] ) : count += 1 if count == 4 : print ( ' Yes ' ) else : print ( ' No ' )
input_map = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] a1 = input_map [ 0 ] [ 0 ] - input_map [ 0 ] [ 1 ] a2 = input_map [ 0 ] [ 0 ] - input_map [ 0 ] [ 2 ] a3 = input_map [ 0 ] [ 1 ] - input_map [ 0 ] [ 2 ] b1 = input_map [ 0 ] [ 0 ] - input_map [ 1 ] [ 0 ] b2 = input_map [ 0 ] [ 0 ] - input_map [ 2 ] [ 0 ] b3 = input_map [ 1 ] [ 0 ] - input_map [ 2 ] [ 0 ] for i in range ( 1 , 3 ) : if a1 != ( input_map [ i ] [ 0 ] - input_map [ i ] [ 1 ] ) : print ( ' No ' ) ; exit ( ) if a2 != ( input_map [ i ] [ 0 ] - input_map [ i ] [ 2 ] ) : print ( ' No ' ) ; exit ( ) if a3 != ( input_map [ i ] [ 1 ] - input_map [ i ] [ 2 ] ) : print ( ' No ' ) ; exit ( ) for i in range ( 1 , 3 ) : if b1 != ( input_map [ 0 ] [ i ] - input_map [ 1 ] [ i ] ) : print ( ' No ' ) ; exit ( ) if b2 != ( input_map [ 0 ] [ i ] - input_map [ 2 ] [ i ] ) : print ( ' No ' ) ; exit ( ) if b3 != ( input_map [ 1 ] [ i ] - input_map [ 2 ] [ i ] ) : print ( ' No ' ) ; exit ( ) print ( ' Yes ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] c = np . array ( c ) b = c [ 0 ] a1 = [ 0 ] * 3 a2 = c [ 1 ] - b a3 = c [ 2 ] - b if len ( set ( a2 ) ) == 1 and len ( set ( a3 ) ) == 1 : print ( ' Yes ' ) else : print ( ' No ' )
import sys a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] x1 , x2 = a [ 0 ] [ 0 ] - a [ 0 ] [ 1 ] , a [ 0 ] [ 0 ] - a [ 0 ] [ 2 ] for i in range ( 3 ) : if a [ i ] [ 0 ] - a [ i ] [ 1 ] != x1 or a [ i ] [ 0 ] - a [ i ] [ 2 ] != x2 : print ( " No " ) , sys . exit ( ) y1 , y2 = a [ 0 ] [ 0 ] - a [ 1 ] [ 0 ] , a [ 0 ] [ 0 ] - a [ 2 ] [ 0 ] for j in range ( 3 ) : if a [ 0 ] [ j ] - a [ 1 ] [ j ] != y1 or a [ 0 ] [ j ] - a [ 2 ] [ j ] != y2 : print ( " No " ) , sys . exit ( ) print ( " Yes " )
def main ( ) : import numpy as np A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) C = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( 3 ) ] C = np . array ( C ) C = C . reshape ( [ 9 , 1 ] ) ext_A = np . concatenate ( [ A , C ] , axis = 1 ) A_rank = np . linalg . matrix_rank ( A ) ext_A_rank = np . linalg . matrix_rank ( ext_A ) if A_rank == ext_A_rank : print ( " Yes " ) else : print ( " No " ) if __name__ == ' __main__ ' : main ( )
array_1 = list ( map ( int , input ( ) . split ( ) ) ) array_2 = list ( map ( int , input ( ) . split ( ) ) ) array_3 = list ( map ( int , input ( ) . split ( ) ) ) for a in range ( 101 ) : for b in range ( 101 ) : for c in range ( 101 ) : if array_1 [ 0 ] - a == array_2 [ 0 ] - b and array_2 [ 0 ] - b == array_3 [ 0 ] - c and array_3 [ 0 ] - c == array_1 [ 0 ] - a and array_1 [ 1 ] - a == array_2 [ 1 ] - b and array_2 [ 1 ] - b == array_3 [ 1 ] - c and array_3 [ 1 ] - c == array_1 [ 1 ] - a and array_1 [ 2 ] - a == array_2 [ 2 ] - b and array_2 [ 2 ] - b == array_3 [ 2 ] - c and array_3 [ 2 ] - c == array_1 [ 2 ] - a : print ( ' Yes ' ) exit ( ) print ( ' No ' )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] D = [ [ 0 ] * 3 for _ in range ( 2 ) ] for i in range ( 2 ) : for j in range ( 3 ) : D [ i ] [ j ] = C [ i + 1 ] [ j ] - C [ i ] [ j ] flag = True if D [ 0 ] [ 0 ] == D [ 0 ] [ 1 ] and D [ 0 ] [ 1 ] == D [ 0 ] [ 2 ] and D [ 0 ] [ 2 ] == D [ 0 ] [ 0 ] : pass else : flag = False if D [ 1 ] [ 0 ] == D [ 1 ] [ 1 ] and D [ 1 ] [ 1 ] == D [ 1 ] [ 2 ] and D [ 1 ] [ 2 ] == D [ 1 ] [ 0 ] : pass else : flag = False if flag : print ( ' Yes ' ) else : print ( ' No ' )
import numpy as np c = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] A = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 0 , 0 , 1 , 0 ] , [ 1 , 0 , 0 , 0 , 0 , 1 ] , [ 0 , 1 , 0 , 1 , 0 , 0 ] , [ 0 , 1 , 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 0 , 1 , 0 ] , [ 0 , 0 , 1 , 0 , 0 , 1 ] ] ) B = np . array ( [ [ 1 , 0 , 0 , 1 , 0 , 0 , c [ 0 ] [ 0 ] ] , [ 1 , 0 , 0 , 0 , 1 , 0 , c [ 0 ] [ 1 ] ] , [ 1 , 0 , 0 , 0 , 0 , 1 , c [ 0 ] [ 2 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , c [ 1 ] [ 0 ] ] , [ 0 , 1 , 0 , 0 , 1 , 0 , c [ 1 ] [ 1 ] ] , [ 0 , 1 , 0 , 0 , 0 , 1 , c [ 1 ] [ 2 ] ] , [ 0 , 0 , 1 , 1 , 0 , 0 , c [ 2 ] [ 0 ] ] , [ 0 , 0 , 1 , 0 , 1 , 0 , c [ 2 ] [ 1 ] ] , [ 0 , 0 , 1 , 0 , 0 , 1 , c [ 2 ] [ 2 ] ] ] ) rankA = np . linalg . matrix_rank ( A ) rankB = np . linalg . matrix_rank ( B ) if rankA == rankB : print ( " Yes " ) else : print ( " No " )
import sys input = sys . stdin . readline def main ( ) : c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) c31 , c32 , c33 = map ( int , input ( ) . split ( ) ) ans = " No " for a1 in range ( 0 , min ( [ c11 , c12 , c13 ] ) + 1 ) : b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 a2 = c21 - b1 a3 = c31 - b1 if c22 == a2 + b2 and c23 == a2 + b3 and c32 == a3 + b2 and c33 == a3 + b3 : ans = " Yes " break print ( ans ) if __name__ == ' __main__ ' : main ( )
[ ( a , b , c ) , ( d , e , f ) , ( g , h , i ) ] = [ map ( int , input ( ) . split ( ) ) for _ in range ( 3 ) ] print ( " Yes " if a - b == d - e == g - h and b - c == e - f == h - i else " No " )
C = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] for i in range ( 3 ) : C [ i ] = [ C [ i ] [ 0 ] - min ( C [ i ] ) , C [ i ] [ 1 ] - min ( C [ i ] ) , C [ i ] [ 2 ] - min ( C [ i ] ) ] for j in range ( 3 ) : tmp = min ( C [ 0 ] [ j ] , C [ 1 ] [ j ] , C [ 2 ] [ j ] ) C [ 0 ] [ j ] = C [ 0 ] [ j ] - tmp C [ 1 ] [ j ] = C [ 1 ] [ j ] - tmp C [ 2 ] [ j ] = C [ 2 ] [ j ] - tmp if C == [ [ 0 ] * 3 for i in range ( 3 ) ] : print ( " Yes " ) else : print ( " No " )
c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] a = c [ 0 ] . copy ( ) b = [ 0 ] * 3 for i in range ( 1 , 3 ) : b [ i ] = c [ i ] [ 0 ] - a [ 0 ] ans = " Yes " for i in range ( 3 ) : for j in range ( 3 ) : if a [ j ] + b [ i ] != c [ i ] [ j ] : ans = " No " print ( ans )
H = 3 W = 3 C = [ ] for _ in range ( H ) : C . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) Hs = [ [ ] for _ in range ( H ) ] for i in range ( H ) : Hs [ i ] . append ( C [ i ] [ 0 ] - C [ i ] [ 1 ] ) Hs [ i ] . append ( C [ i ] [ 1 ] - C [ i ] [ 2 ] ) Hs [ i ] . append ( C [ i ] [ 2 ] - C [ i ] [ 0 ] ) Ws = [ [ ] for _ in range ( H ) ] for i in range ( H ) : Ws [ i ] . append ( C [ 0 ] [ i ] - C [ 1 ] [ i ] ) Ws [ i ] . append ( C [ 1 ] [ i ] - C [ 2 ] [ i ] ) Ws [ i ] . append ( C [ 2 ] [ i ] - C [ 0 ] [ i ] ) if all ( [ Hs [ 0 ] == h for h in Hs ] ) and all ( [ Ws [ 0 ] == w for w in Ws ] ) : print ( " Yes " ) else : print ( " No " )
g = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( 3 ) ] for i in range ( 101 ) : b1 , b2 , b3 = g [ 0 ] [ 0 ] - i , g [ 0 ] [ 1 ] - i , g [ 0 ] [ 2 ] - i if g [ 1 ] [ 0 ] - b1 == g [ 1 ] [ 1 ] - b2 and g [ 1 ] [ 1 ] - b2 == g [ 1 ] [ 2 ] - b3 : if g [ 2 ] [ 0 ] - b1 == g [ 2 ] [ 1 ] - b2 and g [ 2 ] [ 1 ] - b2 == g [ 2 ] [ 2 ] - b3 : print ( ' Yes ' ) exit ( ) print ( ' No ' )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) for ( int j = 0 ; j <= K ; j ++ ) if ( 0 <= S - i - j && S - i - j <= K ) ans ++ ; System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int z = S - i - j ; if ( 0 <= z && z <= K ) { sum ++ ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int count = 0 ; int P [ ] = new int [ N ] ; int Pj = 0 ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Pj = P [ 0 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= Pj ) { count ++ ; Pj = P [ i ] ; } } System . out . println ( count ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver solver = new Solver ( ) ; solver . init ( ) ; solver . readHead ( in . readLine ( ) ) ; solver . readBody ( in . readLine ( ) ) ; } } class Solver { int N ; int cnt ; public void init ( ) { N = 0 ; cnt = 0 ; } public void readHead ( String str ) { String [ ] strArr = str . split ( " " ) ; N = Integer . parseInt ( strArr [ 0 ] ) ; } public boolean hasNext ( ) { return cnt < N ; } public void readBody ( String str ) { String [ ] strArr = str . split ( " " ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( " Y " . equals ( strArr [ i ] ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; cnt ++ ; } public void solve ( ) { } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 , a2 , a3 , b1 , b2 , b3 ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } String res = " No " ; for ( a1 = 0 ; a1 <= grid [ 0 ] [ 0 ] ; a1 ++ ) { b1 = grid [ 0 ] [ 0 ] - a1 ; b2 = grid [ 0 ] [ 1 ] - a1 ; b3 = grid [ 0 ] [ 2 ] - a1 ; a2 = grid [ 1 ] [ 0 ] - b1 ; a3 = grid [ 2 ] [ 0 ] - b1 ; if ( a2 + b2 == grid [ 1 ] [ 1 ] && a2 + b3 == grid [ 1 ] [ 2 ] && a3 + b2 == grid [ 2 ] [ 1 ] && a3 + b3 == grid [ 2 ] [ 2 ] ) res = " Yes " ; } System . out . println ( res ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; CLowElements solver = new CLowElements ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class CLowElements { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } int min = arr [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > min ) { count ++ ; } min = Math . min ( min , arr [ i ] ) ; } out . println ( n - count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int sum = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - ( X + Y ) ; if ( ( 0 <= Z ) && ( Z <= K ) ) sum ++ ; } } System . out . println ( sum ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { list . add ( in . nextInt ( ) ) ; } boolean one = list . contains ( 1 ) , seven = list . contains ( 7 ) , nine = list . contains ( 9 ) , four = list . contains ( 4 ) ; if ( one && seven && nine && four ) { System . out . println ( " YES " ) ; return ; } System . out . println ( " NO " ) ; } }
import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String r = sc . next ( ) ; list . add ( r ) ; } sc . close ( ) ; if ( list . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; long ans = 2 ; for ( int i = 0 ; i < X ; i ++ ) { ans = 2 * ans + 2 ; } System . out . println ( ans ) ; } }
import java . nio . file . * ; import java . nio . charset . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set s = new HashSet ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( sc . next ( ) ) ; } if ( s . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Solver solver = new Solver ( ) ; solver . init ( ) ; solver . readHead ( in . readLine ( ) ) ; solver . readP ( in . readLine ( ) ) ; } } class Solver { int N ; int cnt ; public void init ( ) { N = 0 ; cnt = 0 ; } public void readHead ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; N = Integer . parseInt ( strArr [ 0 ] ) ; } public void readP ( String str ) { String [ ] strArr = str . split ( " \\ s+ " ) ; int min = N + 1 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = Integer . parseInt ( strArr [ i ] ) ; if ( min > p ) { ans ++ ; min = p ; } } System . out . println ( ans ) ; } public boolean hasNext ( ) { return cnt < N ; } public void readBody ( String str ) { cnt ++ ; } public void solve ( ) { } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s [ ] = new String [ n ] ; String p = " P " ; String w = " W " ; String g = " G " ; String y = " Y " ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p . equals ( s [ i ] ) ) { count ++ ; p = " " ; } if ( w . equals ( s [ i ] ) ) { count ++ ; w = " " ; } if ( g . equals ( s [ i ] ) ) { count ++ ; g = " " ; } if ( y . equals ( s [ i ] ) ) { count ++ ; y = " " ; } } switch ( count ) { case 1 : System . out . println ( " One " ) ; break ; case 2 : System . out . println ( " Two " ) ; break ; case 3 : System . out . println ( " Three " ) ; break ; case 4 : System . out . println ( " Four " ) ; break ; default : break ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k , s ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i <= Math . min ( k , s ) ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { if ( s - i - j >= 0 && s - i - j <= k ) sum ++ ; } } System . out . println ( sum ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int sum = i + j ; if ( sum <= s && s - sum <= k ) { result ++ ; } } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cou = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) { cou ++ ; } } } System . out . println ( cou ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > number = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { number . add ( sc . nextInt ( ) ) ; } Collections . sort ( number ) ; if ( number . get ( 0 ) != 1 || number . get ( 3 ) != 9 || number . get ( 2 ) != 7 || number . get ( 1 ) != 4 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int a [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int b [ ] = { 1 , 4 , 7 , 9 } ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] != b [ i ] ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int [ ] ary = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { ary [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = 2000000 ; int max = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( ary [ i ] < min ) { ans ++ ; min = ary [ i ] ; } else if ( true ) { } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . Set ; import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . next ( ) ; Set < String > set = new HashSet < > ( ) ; while ( sc . hasNext ( ) ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) > 3 ? " Four " : " Three " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 4 ] ; String ans = " NO " ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; if ( n [ 0 ] == 1 && n [ 1 ] == 4 ) { if ( n [ 2 ] == 7 && n [ 3 ] == 9 ) { ans = " YES " ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N1 = sc . nextInt ( ) ; int N2 = sc . nextInt ( ) ; int N3 = sc . nextInt ( ) ; int N4 = sc . nextInt ( ) ; int a1 = ( N1 - 1 ) * ( N2 - 1 ) * ( N3 - 1 ) * ( N4 - 1 ) ; int a4 = ( N1 - 4 ) * ( N2 - 4 ) * ( N3 - 4 ) * ( N4 - 4 ) ; int a7 = ( N1 - 7 ) * ( N2 - 7 ) * ( N3 - 7 ) * ( N4 - 7 ) ; int a9 = ( N1 - 9 ) * ( N2 - 9 ) * ( N3 - 9 ) * ( N4 - 9 ) ; if ( a1 == 0 && a4 == 0 && a7 == 0 && a9 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int S = scanner . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( 0 <= S - i - j && S - i - j <= N ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String ans = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { ans = " Four " ; break ; } } System . out . println ( ans ) ; System . exit ( 0 ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] n = br . readLine ( ) . split ( " " ) ; br . close ( ) ; String a = " 1974 " ; for ( int i = 0 ; i < 4 ; i ++ ) { a = a . replaceAll ( n [ i ] , " " ) ; } if ( a . length ( ) == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String result = " Three " ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { result = " Four " ; break ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " " ; int p = 0 ; int w = 0 ; int g = 0 ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; if ( s . equals ( " P " ) && p == 0 ) { p = 1 ; } else if ( s . equals ( " W " ) && w == 0 ) { w = 1 ; } else if ( s . equals ( " G " ) && g == 0 ) { g = 1 ; } else if ( s . equals ( " Y " ) && y == 0 ) { y = 1 ; } } System . out . println ( ( p + w + g + y ) == 3 ? " Three " : " Four " ) ; } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n = getInput ( ) . get ( 0 ) ; ArrayList < Integer > p = getInput ( ) ; int count = 1 ; int tmin = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { tmin = Math . min ( p . get ( i - 1 ) , tmin ) ; if ( p . get ( i ) <= tmin ) ++ count ; } Print ( count ) ; } private static Scanner scanner = new Scanner ( System . in ) ; private static ArrayList < Integer > getInput ( ) { String in = scanner . nextLine ( ) ; ArrayList < Integer > result = new ArrayList < > ( ) ; for ( String t : in . split ( " " ) ) { result . add ( Integer . parseInt ( t ) ) ; } return result ; } private static void Print ( Object o ) { System . out . println ( o ) ; } private static void Print ( Object ... o ) { for ( Object i : o ) System . out . print ( i ) ; System . out . println ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( sc . next ( ) . equals ( " Y " ) ) { System . out . println ( " Four " ) ; System . exit ( 0 ) ; ; } } System . out . println ( " Three " ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( ( s - i - j ) <= k && ( s - i - j ) >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; PriorityQueue < Integer > q = new PriorityQueue < Integer > ( ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int P = sc . nextInt ( ) ; q . add ( P ) ; if ( q . peek ( ) == P ) cnt ++ ; } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { int x , y , z , k , s , count = 0 ; Scanner scan = new Scanner ( System . in ) ; k = scan . nextInt ( ) ; s = scan . nextInt ( ) ; if ( s / k == 3 ) { count ++ ; } else { for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( s - x - y >= 0 && s - x - y <= k ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = sc . nextInt ( ) ; int ans = 1 ; int tmp = b [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( tmp > b [ i ] ) { tmp = b [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = sc . nextLong ( ) - 1 ; long p = 2 ; for ( int i = 1 ; i < n ; i ++ ) { long a = sc . nextLong ( ) ; if ( a == p ) { p ++ ; } else { long r = ( a % p ) ; if ( r == 0 ) { if ( a > p ) { ans ++ ; a -= ( p + 1 ) ; r = ( a % p ) ; ans += ( ( a - r ) / p ) ; } } else { ans += ( ( a - r ) / p ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] org = new int [ ] { 1 , 4 , 7 , 9 } ; int [ ] arr = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( arr [ i ] != org [ i ] ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int s = 0 ; int lo = p [ 0 ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( lo >= p [ i ] ) { lo = p [ i ] ; s ++ ; } } System . out . println ( s ) ; sc . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = input . readLine ( ) ; String [ ] array = str . split ( " " ) ; int a = Integer . parseInt ( array [ 0 ] ) ; int b = Integer . parseInt ( array [ 1 ] ) ; int c = Integer . parseInt ( array [ 2 ] ) ; int d = Integer . parseInt ( array [ 3 ] ) ; int [ ] list = { a , b , c , d } ; Arrays . sort ( list ) ; int [ ] diff = { 1 , 4 , 7 , 9 } ; if ( Arrays . equals ( list , diff ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { static int [ ] [ ] grid ; static int [ ] left ; static int [ ] top ; static int size = 3 ; public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; grid = new int [ size ] [ size ] ; left = new int [ size ] ; top = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) grid [ i ] [ j ] = x . nextInt ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { left [ i ] = grid [ i ] [ 0 ] ; top [ i ] = grid [ 0 ] [ i ] ; } boolean good = true ; int curdiff , nowdiff ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ i ] [ 0 ] - top [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ i ] [ j ] - top [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } for ( int i = 1 ; i < size ; i ++ ) { if ( ! good ) break ; curdiff = grid [ 0 ] [ i ] - left [ 0 ] ; for ( int j = 1 ; j < size ; j ++ ) { nowdiff = grid [ j ] [ i ] - left [ j ] ; if ( nowdiff != curdiff ) { good = false ; break ; } } } if ( good ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int i = 0 , j = 0 ; int temp ; boolean flag = true ; for ( i = 0 ; i < 3 ; i ++ ) for ( j = 0 ; j < 3 ; j ++ ) { temp = stdin . nextInt ( ) ; c [ i ] [ j ] = temp ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { if ( ( c [ i ] [ j ] - c [ i ] [ ( j + 1 ) % 3 ] ) != ( c [ ( i + 1 ) % 3 ] [ j ] - c [ ( i + 1 ) % 3 ] [ ( j + 1 ) % 3 ] ) ) flag = false ; } } if ( flag ) System . out . println ( " Yes " ) ; else if ( ! flag ) System . out . println ( " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sca = new Scanner ( System . in ) ; int n = sca . nextInt ( ) ; int [ ] pi = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pi [ i ] = sca . nextInt ( ) ; } int ans = 0 ; int min = 300000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > pi [ i ] ) { min = pi [ i ] ; ans ++ ; } else { } } System . out . println ( ans ) ; sca . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - ( i + j ) <= k && 0 <= s - ( i + j ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int cou = 1 ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = 999999999 ; for ( int i = 1 ; i < n ; i ++ ) { min = Math . min ( min , p [ i - 1 ] ) ; if ( p [ i ] < min ) { cou ++ ; } } System . out . print ( cou ) ; } }
import java . math . BigInteger ; import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int n , i , j , m , k , p , q , o , l , s , tt = 1 ; Double x , y , z ; int ar [ ] , br [ ] ; char ch ; BigInteger an , su , u , v ; String a , b = " " , c = " " , d ; Scanner sc = new Scanner ( System . in ) ; Scanner scc = new Scanner ( System . in ) ; ar = new int [ 200001 ] ; br = new int [ 200001 ] ; n = sc . nextInt ( ) ; k = 50000000 ; for ( i = 0 ; i < n ; i ++ ) { o = sc . nextInt ( ) ; if ( k > o ) { k = o ; } ar [ i ] = o ; br [ i ] = k ; } k = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( ar [ i ] <= br [ i ] ) { k ++ ; } } System . out . println ( k + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k && x <= s ; x ++ ) { for ( int y = 0 ; y <= k && y <= s ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; String [ ] data = str . split ( " " ) ; int [ ] numdata = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { numdata [ i ] = Integer . parseInt ( data [ i ] ) ; } int a = 0 , b = 0 , c = 0 , d = 0 , e = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ! ( e == 0 ) ) { e = 1 ; break ; } switch ( numdata [ i ] ) { case 1 : if ( a == 0 ) { a = 1 ; } else { e = 1 ; } break ; case 9 : if ( b == 0 ) { b = 1 ; } else { e = 1 ; } break ; case 7 : if ( c == 0 ) { c = 1 ; } else { e = 1 ; } break ; case 4 : if ( d == 0 ) { d = 1 ; } else { e = 1 ; } break ; default : e = 1 ; break ; } } if ( e == 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] s = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { s [ i ] = sc . next ( ) ; } boolean f = false ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] . equals ( " Y " ) ) f = true ; } if ( f ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = stdIn . nextInt ( ) ; } int count = 1 ; int min = a [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { if ( a [ i ] > min ) { } else { count ++ ; min = a [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int h = 0 ; h <= k ; h ++ ) { if ( s - i - h <= k && s >= i + h ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " " ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; if ( s . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long res = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( 0 <= z && z <= k ) res ++ ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; HashMap < String , Integer > hashmap = new HashMap < > ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hashmap . put ( sc . next ( ) , 1 ) ; } if ( hashmap . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( k <= K && 0 <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int o = 0 ; int n = sc . nextInt ( ) ; int mini = 2000000 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p <= mini ) { o ++ ; mini = p ; } } System . out . println ( o ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; String sugar = " a " ; for ( int i = 0 ; i < N ; i ++ ) { sugar = scanner . next ( ) ; if ( sugar . equals ( " Y " ) ) { System . out . println ( " Four " ) ; break ; } } if ( ! ( sugar . equals ( " Y " ) ) ) System . out . println ( " Three " ) ; } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int t = 0 ; t <= k ; t ++ ) { int z = s - i - t ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] A = new int [ 3 ] ; int [ ] diffe = new int [ 2 ] ; int [ ] diffe_tmp = new int [ 2 ] ; int flag = 0 ; String ans = " null " ; for ( int i = 0 ; i < 3 ; i ++ ) A [ i ] = sc . nextInt ( ) ; diffe [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe [ 1 ] = A [ 1 ] - A [ 2 ] ; for ( int i = 0 ; i <= 1 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) A [ j ] = sc . nextInt ( ) ; diffe_tmp [ 0 ] = A [ 0 ] - A [ 1 ] ; diffe_tmp [ 1 ] = A [ 1 ] - A [ 2 ] ; if ( diffe [ 0 ] != diffe_tmp [ 0 ] || diffe_tmp [ 1 ] != diffe [ 1 ] ) flag = 1 ; } if ( flag == 0 ) ans = " Yes " ; else ans = " No " ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = S - X - Y ; if ( Z >= 0 && Z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { Scanner sc ; int N ; int [ ] P ; private void calc ( ) { sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) P [ i ] = sc . nextInt ( ) ; int c = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > P [ i ] ) c ++ ; min = Math . min ( min , P [ i ] ) ; } System . out . println ( c ) ; } public static void main ( String [ ] args ) { new Main ( ) . calc ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int x = 0 ; int y = 0 ; int z = 0 ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { z = s - ( x + y ) ; if ( z <= k && z >= 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; int score = 0 ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; if ( S [ i ] . equals ( " Y " ) ) { score += 1 ; } } if ( score == 0 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String str = sc . next ( ) ; if ( str . equals ( " Y " ) ) { System . out . println ( " Four " ) ; return ; } } System . out . println ( " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( " " , 4 ) ; int [ ] arr = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = Integer . parseInt ( line [ i ] ) ; } Arrays . sort ( arr ) ; if ( arr [ 0 ] == 1 && arr [ 1 ] == 4 && arr [ 2 ] == 7 && arr [ 3 ] == 9 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 4 ] [ 4 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int a1 = 0 ; int b1 = c [ 1 ] [ 1 ] - a1 ; int b2 = c [ 1 ] [ 2 ] - a1 ; int b3 = c [ 1 ] [ 3 ] - a1 ; boolean ans = c [ 2 ] [ 1 ] - b1 == c [ 2 ] [ 2 ] - b2 && c [ 2 ] [ 2 ] - b2 == c [ 2 ] [ 3 ] - b3 && c [ 3 ] [ 1 ] - b1 == c [ 3 ] [ 2 ] - b2 && c [ 3 ] [ 2 ] - b2 == c [ 3 ] [ 3 ] - b3 ; System . out . println ( ans ? " Yes " : " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; String a [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . next ( ) ; } Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( a [ i ] ) ; } if ( set . size ( ) == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; sc . nextLine ( ) ; int [ ] n = new int [ 4 ] ; n [ 0 ] = 0 ; n [ 1 ] = 0 ; n [ 2 ] = 0 ; n [ 3 ] = 0 ; String StringLine = sc . nextLine ( ) ; StringLine = StringLine . replace ( " " , " " ) ; char [ ] array = StringLine . toCharArray ( ) ; for ( int i = 0 ; i < num ; i ++ ) { switch ( array [ i ] ) { case 'P' : n [ 0 ] ++ ; break ; case 'W' : n [ 1 ] ++ ; break ; case 'G' : n [ 2 ] ++ ; break ; case 'Y' : n [ 3 ] ++ ; break ; } } int rc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( n [ i ] == 0 ) { rc ++ ; } } switch ( rc ) { case 0 : System . out . println ( " Four " ) ; break ; case 1 : System . out . println ( " Three " ) ; break ; case 2 : System . out . println ( " Two " ) ; break ; case 3 : System . out . println ( " One " ) ; break ; } } }
import javax . print . DocFlavor ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . nio . charset . StandardCharsets ; import java . util . * ; import java . util . function . BiConsumer ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; ArrayList set = new ArrayList ( ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . add ( sc . next ( ) ) ; set . remove ( " 1 " ) ; set . remove ( " 9 " ) ; set . remove ( " 7 " ) ; set . remove ( " 4 " ) ; String ans = " NO " ; if ( set . size ( ) == 0 ) { ans = " YES " ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int p = 0 ; p <= K ; p ++ ) { for ( int q = 0 ; q <= K ; q ++ ) { if ( S - p - q <= K && 0 <= S - p - q ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean t = false ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String co = sc . next ( ) ; if ( co . equalsIgnoreCase ( " Y " ) ) t = true ; } if ( t == false ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int a = 0 ; int b = 0 ; int c = 0 ; int d = 0 ; for ( int i = 0 ; i < 4 ; ++ i ) { int temp = sc . nextInt ( ) ; if ( temp == 1 ) { a = 1 ; } else if ( temp == 9 ) { b = 1 ; } else if ( temp == 7 ) { c = 1 ; } else if ( temp == 4 ) { d = 1 ; } } if ( ( a + b + c + d ) == 4 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; sc . nextLine ( ) ; String b = sc . nextLine ( ) ; String p = " P " ; String w = " W " ; String g = " G " ; String y = " Y " ; int result1 = b . indexOf ( p ) ; if ( result1 != - 1 ) { result1 = 1 ; } else { result1 = 0 ; } int result2 = b . indexOf ( w ) ; if ( result2 != - 1 ) { result2 = 1 ; } else { result2 = 0 ; } int result3 = b . indexOf ( g ) ; if ( result3 != - 1 ) { result3 = 1 ; } else { result3 = 0 ; } int result4 = b . indexOf ( y ) ; if ( result4 != - 1 ) { result4 = 1 ; } else { result4 = 0 ; } int c = result1 + result2 + result3 + result4 ; if ( c == 3 ) { System . out . println ( " Three " ) ; } else if ( c == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " ERROR " ) ; } } }
import java . io . * ; import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( " " ) ; int a [ ] = new int [ n ] ; int min [ ] = new int [ n ] ; int c = 0 , minval = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( s [ i ] ) ; min [ 0 ] = a [ 0 ] ; minval = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < minval ) { minval = a [ i ] ; min [ i ] = minval ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min [ i ] ) c ++ ; } out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } int min = N ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= min ) { ans ++ ; min = P [ i ] ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String a = sc . next ( ) ; if ( a . equals ( " Y " ) ) { c ++ ; } } if ( c != 0 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } sc . close ( ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { try ( Scanner sc = new Scanner ( System . in ) ) { int K = sc . nextInt ( ) , S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int k = S - i - j ; if ( 0 <= k && k <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } } }
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String c [ ] = new String [ n ] ; Set < String > colors = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = scanner . next ( ) ; colors . add ( c [ i ] ) ; } if ( colors . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < c . length ; i ++ ) { for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < b . length ; i ++ ) { b [ i ] = c [ 0 ] [ i ] ; } for ( int i = 1 ; i < a . length ; i ++ ) { a [ i ] = c [ i ] [ 0 ] - b [ 0 ] ; } boolean jdg = true ; outer : for ( int i = 0 ; i < c . length ; i ++ ) { for ( int j = 0 ; j < c [ i ] . length ; j ++ ) { if ( ! ( jdg = ( a [ i ] + b [ j ] == c [ i ] [ j ] ) ) ) break outer ; } } System . out . println ( jdg ? " Yes " : " No " ) ; sc . close ( ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastReader in = new FastReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TripletSum solver = new TripletSum ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TripletSum { public void solve ( int testNumber , FastReader fs , PrintWriter pw ) { int k = fs . nextInt ( ) , Sum = fs . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int p = Sum - i - j ; if ( p < 0 || p > k ) continue ; ans += 1 ; } } pw . println ( ans ) ; } } static class FastReader { BufferedReader bf ; StringTokenizer st ; public FastReader ( InputStream is ) { bf = new BufferedReader ( new InputStreamReader ( is ) ) ; st = null ; } public String next ( ) { try { while ( st == null || ! st . hasMoreTokens ( ) ) { String line = bf . readLine ( ) ; if ( line == null ) return null ; st = new StringTokenizer ( line ) ; } } catch ( Exception e ) { } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) throws Exception { final Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] P = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextLong ( ) ; } long min = Long . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < P . length ; i ++ ) { if ( min > P [ i ] ) { min = P [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int min = p [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) { if ( p [ j ] < min ) { min = p [ j ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { private static PrintWriter out ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) -> out . close ( ) ) ) ; try { main . run ( args ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private void run ( String [ ] arguments ) throws Exception { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int rest = S - x - y ; if ( rest >= 0 && rest <= K ) { count ++ ; } } } out . println ( count ) ; out . close ( ) ; } private class MyScanner { BufferedReader br ; StringTokenizer st ; MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main implements Runnable { private static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Thread thread = new Thread ( null , new Main ( ) , " " , 32 * 1024 * 1024 ) ; thread . start ( ) ; } @ Override public void run ( ) { final Scanner scanner = new Scanner ( System . in ) ; solve ( scanner ) ; } static void solve ( Scanner scanner ) { int N = Integer . parseInt ( scanner . next ( ) ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = Integer . parseInt ( scanner . next ( ) ) ; } int min = A [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( A [ i ] <= min ) { ans ++ ; } min = Math . min ( min , A [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int cnt = 0 ; int [ ] nums = new int [ 4 ] ; String [ ] colors = { " P " , " W " , " G " , " Y " } ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( s . equals ( colors [ j ] ) ) { nums [ j ] += 1 ; } } } for ( int nu : nums ) { if ( nu > 0 ) { cnt ++ ; } } if ( cnt == 4 ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S [ ] = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; } if ( Arrays . asList ( S ) . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String msg = " Yes " ; for ( int i = 1 ; i < 3 ; i ++ ) { int a = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] ; if ( c [ i ] [ 1 ] - c [ i ] [ 0 ] != a ) { msg = " No " ; break ; } a = c [ 0 ] [ 2 ] - c [ 0 ] [ 1 ] ; if ( c [ i ] [ 2 ] - c [ i ] [ 1 ] != a ) { msg = " No " ; break ; } a = c [ 1 ] [ 0 ] - c [ 0 ] [ 0 ] ; if ( c [ 1 ] [ i ] - c [ 0 ] [ i ] != a ) { msg = " No " ; break ; } a = c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] ; if ( c [ 2 ] [ i ] - c [ 1 ] [ i ] != a ) { msg = " No " ; break ; } } System . out . println ( msg ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { System . out . println ( " Four " ) ; break ; } if ( n == 0 ) System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; boolean existsY = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( scanner . next ( ) . equals ( " Y " ) ) { existsY = true ; break ; } } if ( existsY ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k , s , ans = 0 ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; sc . close ( ) ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int tmp = s - i - j ; if ( tmp >= 0 && tmp <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } int min = 0 ; int count = 0 ; min = array [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min >= array [ i ] ) { min = array [ i ] ; } else { count ++ ; } } System . out . println ( n - count ) ; } }
import java . util . Scanner ; public class Main { static long x ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . * ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { PrintWriter pw = new PrintWriter ( System . out ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long min = ( long ) 1e10 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long x = sc . nextLong ( ) ; if ( x <= min ) { ans ++ ; min = x ; } } System . out . println ( ans ) ; } public static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public double nextDouble ( ) throws IOException { String x = next ( ) ; StringBuilder sb = new StringBuilder ( " 0 " ) ; double res = 0 , f = 1 ; boolean dec = false , neg = false ; int start = 0 ; if ( x . charAt ( 0 ) == '-' ) { neg = true ; start ++ ; } for ( int i = start ; i < x . length ( ) ; i ++ ) if ( x . charAt ( i ) == '.' ) { res = Long . parseLong ( sb . toString ( ) ) ; sb = new StringBuilder ( " 0 " ) ; dec = true ; } else { sb . append ( x . charAt ( i ) ) ; if ( dec ) f *= 10 ; } res += Long . parseLong ( sb . toString ( ) ) / f ; return res * ( neg ? - 1 : 1 ) ; } public boolean ready ( ) throws IOException , IOException { return br . ready ( ) ; } } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] data = br . readLine ( ) . split ( " " ) ; long k = Long . parseLong ( data [ 0 ] ) ; long s = Long . parseLong ( data [ 1 ] ) ; long result = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { result += getNumAllocation ( s - i , k ) ; } System . out . println ( result ) ; } public static long getNumAllocation ( long sum , long max ) { if ( sum < 0 ) { return 0 ; } else if ( sum <= max ) { return sum + 1 ; } else if ( sum <= max * 2 ) { return 2 * max - sum + 1 ; } else { return 0 ; } } }
import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = Integer . parseInt ( stdIn . next ( ) ) ; int [ ] p = new int [ n ] ; p [ 0 ] = Integer . parseInt ( stdIn . next ( ) ) ; int min = p [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( stdIn . next ( ) ) ; if ( min > p [ i ] ) { min = p [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { int Z = 0 ; Z = S - X - Y ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S [ ] = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; char c [ ] = S [ i ] . toCharArray ( ) ; if ( c [ 0 ] == 'Y' ) { System . out . println ( " Four " ) ; sc . close ( ) ; return ; } } sc . close ( ) ; System . out . println ( " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean isY = false ; for ( int i = 0 ; i < N ; i ++ ) { String S = sc . next ( ) ; if ( S . equals ( " Y " ) ) isY = true ; } System . out . println ( isY ? " Four " : " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int Z = S - x - y ; if ( Z >= 0 && Z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > p = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { p . add ( scanner . nextInt ( ) ) ; } int count = 0 ; int min = Collections . max ( p ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( p . get ( i ) <= min ) { min = p . get ( i ) ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int answer = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { answer ++ ; } } } System . out . println ( answer ) ; } }
import com . sun . org . apache . bcel . internal . generic . IF_ACMPEQ ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) , s = in . nextInt ( ) ; int res = 0 ; for ( int i = 0 ; i <= k ; ++ i ) { for ( int j = 0 ; j <= k ; ++ j ) { int dif = s - i - j ; if ( dif >= 0 && dif <= k ) { ++ res ; } } } System . out . println ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; int count = 1 ; long min = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long num = sc . nextLong ( ) ; if ( min >= num ) { min = num ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) , s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) for ( int y = 0 ; y <= k ; y ++ ) if ( s - x - y <= k && 0 <= s - x - y ) count ++ ; System . out . print ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { private static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int answer = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( 0 <= S - ( i + j ) && S - ( i + j ) <= K ) { answer ++ ; } } } System . out . println ( answer ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int array [ ] [ ] = new int [ 3 ] [ 3 ] ; int a [ ] = new int [ 3 ] ; int b [ ] = new int [ 3 ] ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { array [ i ] [ j ] = scan . nextInt ( ) ; } } a [ 0 ] = 0 ; b [ 0 ] = array [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = array [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = array [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = array [ 1 ] [ 0 ] - b [ 0 ] ; a [ 2 ] = array [ 2 ] [ 0 ] - b [ 0 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( array [ i ] [ j ] != a [ i ] + b [ j ] ) { System . out . println ( " No " ) ; System . exit ( 0 ) ; } } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( ( S - ( i + j ) ) <= K ) && ( S - ( i + j ) >= 0 ) ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int na = scan . nextInt ( ) ; int [ ] nb = new int [ na ] ; int i = 0 ; for ( i = 0 ; i < na ; i ++ ) { nb [ i ] = scan . nextInt ( ) ; } int sum = 0 ; int rul = 0 ; for ( i = 0 ; i < na ; i ++ ) { if ( i == 0 ) { sum = sum + 1 ; rul = nb [ i ] ; } else if ( rul > nb [ i ] ) { sum = sum + 1 ; rul = nb [ i ] ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) c [ i ] [ j ] = sc . nextInt ( ) ; for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ j ] [ i ] -= c [ 0 ] [ i ] ; } for ( int j = 1 ; j < 3 ; j ++ ) { for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] [ j ] -= c [ i ] [ 0 ] ; } if ( c [ 1 ] [ 1 ] == 0 && c [ 1 ] [ 2 ] == 0 && c [ 2 ] [ 1 ] == 0 && c [ 2 ] [ 2 ] == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; sum += c [ i ] [ j ] ; } } if ( sum % 3 != 0 || sum / 3 != c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int a = 0 ; int b = P [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( P [ i ] <= b ) { a ++ ; b = P [ i ] ; } } System . out . println ( a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = in . nextInt ( ) ; } } int [ ] sum = new int [ 6 ] ; sum [ 0 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 2 ] ; sum [ 1 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 0 ] ; sum [ 2 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 1 ] ; sum [ 3 ] = c [ 0 ] [ 0 ] + c [ 1 ] [ 2 ] + c [ 2 ] [ 1 ] ; sum [ 4 ] = c [ 0 ] [ 1 ] + c [ 1 ] [ 0 ] + c [ 2 ] [ 2 ] ; sum [ 5 ] = c [ 0 ] [ 2 ] + c [ 1 ] [ 1 ] + c [ 2 ] [ 0 ] ; boolean takahashi = true ; for ( int i = 1 ; i < 6 ; i ++ ) { if ( sum [ 0 ] != sum [ i ] ) { takahashi = false ; break ; } } if ( takahashi ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; Set < String > hashset = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hashset . add ( sc . next ( ) ) ; } if ( hashset . size ( ) == 3 ) { System . out . println ( " Three " ) ; } else { System . out . println ( " Four " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int [ ] in = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { in [ i ] = sc . nextInt ( ) ; } int b = 0 ; int c = in [ 0 ] ; for ( int i = 0 ; i < a ; i ++ ) { c = Math . min ( c , in [ i ] ) ; if ( c >= in [ i ] ) { b ++ ; } } System . out . println ( b ) ; } }
import java . io . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader stdin = new BufferedReader ( new InputStreamReader ( System . in ) ) ; stdin . readLine ( ) ; long cnt = Arrays . stream ( stdin . readLine ( ) . split ( " " ) ) . sorted ( ) . distinct ( ) . count ( ) ; String ans = cnt == 3 ? " Three " : " Four " ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; boolean P = false ; boolean W = false ; boolean G = false ; boolean Y = false ; for ( int i = 0 ; i < N ; i ++ ) { String c = sc . next ( ) ; if ( c . equals ( " P " ) ) { P = true ; } else if ( c . equals ( " W " ) ) { W = true ; } else if ( c . equals ( " G " ) ) { G = true ; } else if ( c . equals ( " Y " ) ) { Y = true ; } } int answer = 0 ; if ( P == true ) { answer ++ ; } if ( W == true ) { answer ++ ; } if ( G == true ) { answer ++ ; } if ( Y == true ) { answer ++ ; } if ( answer == 3 ) { System . out . println ( " Three " ) ; } else if ( answer == 4 ) { System . out . println ( " Four " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] tmpString = sc . nextLine ( ) . split ( " " ) ; int K = Integer . parseInt ( tmpString [ 0 ] ) ; int S = Integer . parseInt ( tmpString [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int total = S - i - j ; if ( total >= 0 && total <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( sc . next ( ) ) ; } sc . close ( ) ; int min = Integer . MAX_VALUE , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { min = Math . min ( min , a [ i ] ) ; if ( a [ i ] <= min ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int A = 0 ; int B = 0 ; int C ; int [ ] [ ] Card = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { Card [ i ] [ j ] = scan . nextInt ( ) ; } } A = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 1 ] ; B = Card [ 0 ] [ 0 ] - Card [ 0 ] [ 2 ] ; C = Card [ 0 ] [ 1 ] - Card [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { if ( A != Card [ i ] [ 0 ] - Card [ i ] [ 1 ] || B != Card [ i ] [ 0 ] - Card [ i ] [ 2 ] || C != Card [ i ] [ 1 ] - Card [ i ] [ 2 ] ) { System . out . println ( " No " ) ; return ; } } System . out . println ( " Yes " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { int z = s - i - j ; if ( 0 <= z && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= K ; x ++ ) { for ( int y = 0 ; y <= K ; y ++ ) { int z = S - ( x + y ) ; if ( 0 <= z && z <= K ) { count ++ ; } } } System . out . print ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { if ( ( S - i - j >= 0 ) && ( S - i - j <= K ) ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] num = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; ++ i ) { int n = scanner . nextInt ( ) ; num [ n ] ++ ; } if ( num [ 1 ] == 1 && num [ 9 ] == 1 && num [ 7 ] == 1 && num [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; B ( sc ) ; } public static void A ( Scanner sc ) { out . println ( sc . nextInt ( ) / 3 ) ; } public static void B ( Scanner sc ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . next ( ) . charAt ( 0 ) == 'Y' ) { out . println ( " Four " ) ; return ; } } out . println ( " Three " ) ; } }
import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N [ ] = new int [ 4 ] ; for ( int n = 0 ; n < 4 ; n ++ ) { N [ n ] = sc . nextInt ( ) ; } boolean a = false ; boolean b = false ; boolean c = false ; boolean d = false ; for ( int n = 0 ; n < 4 ; n ++ ) { if ( N [ n ] == 1 ) { a = true ; } if ( N [ n ] == 9 ) { b = true ; } if ( N [ n ] == 7 ) { c = true ; } if ( N [ n ] == 4 ) { d = true ; } } if ( a && b && c && d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int x , y , z ; int count = 0 ; for ( x = 0 ; x <= k ; x ++ ) { for ( y = 0 ; y <= k ; y ++ ) { if ( x + y <= s && s - x - y <= k ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] array = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { array [ i ] [ j ] = sc . nextInt ( ) ; } } int old = 5000 ; int a = array [ 0 ] [ 0 ] ; int b = array [ 0 ] [ 1 ] ; int c = array [ 0 ] [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { int d = array [ i + 1 ] [ 0 ] - a ; int e = array [ i + 1 ] [ 1 ] - b ; int f = array [ i + 1 ] [ 2 ] - c ; if ( d == e && e == f ) { if ( i == 1 ) { System . out . println ( " Yes " ) ; return ; } } else { System . out . println ( " No " ) ; return ; } } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] num = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; } Arrays . sort ( num ) ; if ( num [ 0 ] == 1 && num [ 1 ] == 4 && num [ 2 ] == 7 && num [ 3 ] == 9 ) { System . out . println ( " YES " ) ; return ; } System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < K + 1 ; i ++ ) { for ( int j = 0 ; j < K + 1 ; j ++ ) { int k = S - i - j ; int sum = i + j + k ; if ( 0 <= k && k <= K ) count ++ ; } } System . out . println ( count ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . util . InputMismatchException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; String [ ] s = in . nextStringArray ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . charAt ( 0 ) == 'Y' ) { out . println ( " Four " ) ; return ; } } out . println ( " Three " ) ; } } static class InputReader { BufferedReader in ; StringTokenizer tok ; public String nextString ( ) { while ( ! tok . hasMoreTokens ( ) ) { try { tok = new StringTokenizer ( in . readLine ( ) , " " ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } } return tok . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } public String [ ] nextStringArray ( int n ) { String [ ] res = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = nextString ( ) ; } return res ; } public InputReader ( InputStream inputStream ) { in = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; tok = new StringTokenizer ( " " ) ; } } }
import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int size = in . nextInt ( ) ; ArrayList < Long > list = new ArrayList < Long > ( ) ; for ( int x = 0 ; x < size ; x ++ ) { list . add ( in . nextLong ( ) ) ; } long minimum = 2 ; long counter = list . get ( 0 ) - 1 ; for ( int x = 1 ; x < size ; x ++ ) { long num = list . get ( x ) ; if ( num % minimum == 0 ) { counter += ( num / minimum ) - 1 ; list . set ( x , minimum ) ; } else { counter += ( num / minimum ) ; list . set ( x , list . get ( x ) % minimum ) ; } if ( list . get ( x ) - minimum == 0 && num == minimum ) { minimum ++ ; } } System . out . println ( counter ) ; in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } String ans = " Yes " ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( ! ( ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 1 ] [ i ] - c [ 1 ] [ i + 1 ] ) && ( c [ 0 ] [ i ] - c [ 0 ] [ i + 1 ] == c [ 2 ] [ i ] - c [ 2 ] [ i + 1 ] ) ) ) { ans = " No " ; } } System . out . println ( ans ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int x = k ; x >= 0 ; x -- ) { for ( int y = Math . min ( s - x , k ) ; y >= 0 ; y -- ) { int z = s - x - y ; if ( z <= k ) { ans ++ ; } else { break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = s . nextInt ( ) ; } } boolean can = true ; can &= c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] ; can &= c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] ; can &= c [ 1 ] [ 0 ] - c [ 2 ] [ 0 ] == c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] ; can &= c [ 1 ] [ 1 ] - c [ 2 ] [ 1 ] == c [ 1 ] [ 2 ] - c [ 2 ] [ 2 ] ; System . out . println ( can ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String [ ] S = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc . next ( ) ; } sc . close ( ) ; String result = " Three " ; for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] . equals ( " Y " ) ) { result = " Four " ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= K ; ++ j ) { int res = S - i - j ; if ( 0 <= res && res <= K ) ++ ans ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; String answer = " " ; int e = 0 ; int f = 0 ; int g = 0 ; int h = 0 ; Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a == 1 || b == 1 || c == 1 || d == 1 ) { e = 1 ; } if ( a == 9 || b == 9 || c == 9 || d == 9 ) { f = 1 ; } if ( a == 7 || b == 7 || c == 7 || d == 7 ) { g = 1 ; } if ( a == 4 || b == 4 || c == 4 || d == 4 ) { h = 1 ; } if ( e == 1 && f == 1 && g == 1 && h == 1 ) { answer = " YES " ; } else { answer = " NO " ; } System . out . println ( answer ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; sc . close ( ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { if ( ( s - x - y >= 0 ) && ( s - x - y <= k ) ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = scan . nextInt ( ) ; } int cnt = 1 ; int min = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( p [ i ] <= min ) { cnt ++ ; min = p [ i ] ; } } System . out . println ( cnt ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int [ ] n = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ i ] = sc . nextInt ( ) ; } Arrays . sort ( n ) ; System . out . println ( n [ 0 ] == 1 && n [ 1 ] == 4 && n [ 2 ] == 7 && n [ 3 ] == 9 ? " YES " : " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { solve ( in ) ; } } private static void solve ( Scanner in ) { int K = in . nextInt ( ) , S = in . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x < K + 1 ; x ++ ) { for ( int y = 0 ; y < K + 1 ; y ++ ) { int z = S - ( x + y ) ; if ( z >= 0 && z <= K ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int N , A , B , C ; int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { N = stdin . nextInt ( ) ; if ( N == 1 && a == 0 ) a ++ ; if ( N == 9 && b == 0 ) b ++ ; if ( N == 7 && c == 0 ) c ++ ; if ( N == 4 && d == 0 ) d ++ ; } if ( a + b + c + d >= 4 ) { System . out . print ( " YES " ) ; } else { System . out . print ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) set . add ( sc . next ( ) ) ; System . out . println ( set . size ( ) == 4 ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int sum = scanner . nextInt ( ) ; int count = 0 ; int i = 0 , j = 0 , k = 0 ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k <= n ; k ++ ) { if ( i + j + k <= sum ) { k = Math . min ( n , sum - i - j ) ; if ( i + j + k <= sum ) { j = Math . min ( n , sum - i - k ) ; if ( i + j + k <= sum ) { i = Math . min ( n , sum - j - k ) ; } } } else { break ; } if ( ( i + j + k ) == sum ) count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String [ ] tokens = in . nextLine ( ) . split ( " " ) ; in . close ( ) ; Set < Integer > values = new HashSet < > ( ) ; for ( int i = 0 ; i < tokens . length ; ++ i ) { values . add ( Integer . parseInt ( tokens [ i ] ) ) ; } if ( values . contains ( 1 ) && values . contains ( 9 ) && values . contains ( 7 ) && values . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a < min ) { min = a ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { solve ( sc ) ; } } public static void solve ( Scanner sc ) { int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int counter = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int num = sc . nextInt ( ) ; if ( num < min ) { counter ++ ; min = num ; } } System . out . println ( counter ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int K = stdIn . nextInt ( ) ; int S = stdIn . nextInt ( ) ; int count = 0 ; for ( int X = 0 ; X <= K ; X ++ ) { for ( int Y = 0 ; Y <= K ; Y ++ ) { if ( S - X - Y <= K && S - X - Y >= 0 ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . HashSet ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( System . in ) ) { int N = in . nextInt ( ) ; String [ ] S = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = in . next ( ) ; } HashSet < String > set = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( S [ i ] ) ; } System . out . println ( set . size ( ) == 3 ? " Three " : " Four " ) ; } } }
import java . io . * ; import java . util . * ; import java . math . * ; import java . util . concurrent . ThreadLocalRandom ; public class Main { static long gcd ( long a , long b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static void main ( String [ ] args ) throws Exception { PrintWriter out = new PrintWriter ( System . out ) ; Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int n = in . nextInt ( ) ; long cnt = 0 ; for ( int a = 0 ; a <= k ; a ++ ) for ( int b = 0 ; b <= k ; b ++ ) { if ( n - a - b <= k && n - a - b >= 0 ) cnt ++ ; } out . println ( cnt ) ; out . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String a = " Three " ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Y " ) ) { a = " Four " ; } } System . out . println ( a ) ; } }
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 = Integer . parseInt ( sc . next ( ) ) ; int a2 = Integer . parseInt ( sc . next ( ) ) ; int a3 = Integer . parseInt ( sc . next ( ) ) ; int b1 = Integer . parseInt ( sc . next ( ) ) ; int b2 = Integer . parseInt ( sc . next ( ) ) ; int b3 = Integer . parseInt ( sc . next ( ) ) ; int c1 = Integer . parseInt ( sc . next ( ) ) ; int c2 = Integer . parseInt ( sc . next ( ) ) ; int c3 = Integer . parseInt ( sc . next ( ) ) ; boolean flg = true ; if ( a1 - a2 != b1 - b2 || a1 - a3 != b1 - b3 || a1 - a2 != c1 - c2 || a1 - a3 != c1 - c3 || a1 - b1 != a2 - b2 || a1 - b1 != a3 - b3 || a1 - c1 != a2 - c2 || a1 - c1 != a3 - c3 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] intArray = new int [ n ] ; int count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { intArray [ i ] = sc . nextInt ( ) ; } int min = intArray [ 0 ] ; for ( int i = 1 ; i < intArray . length ; i ++ ) { if ( min > intArray [ i ] ) { min = intArray [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { new Solution ( ) ; } } class Solution { Scanner scanner ; public Solution ( ) { scanner = new Scanner ( System . in ) ; while ( scanner . hasNext ( ) ) { run_case ( ) ; } } private void run_case ( ) { scanner . nextLine ( ) ; String line = scanner . nextLine ( ) ; int [ ] arr = strToIntArray ( line ) ; int res = 0 ; TreeMap < Integer , Integer > map = new TreeMap < > ( ) ; for ( int u : arr ) { map . put ( u , 1 ) ; if ( map . lowerKey ( u ) == null ) res ++ ; } System . out . println ( res ) ; return ; } private int [ ] strToIntArray ( String str ) { String [ ] vals = str . split ( " \\ s+ " ) ; int sz = vals . length ; int [ ] res = new int [ sz ] ; for ( int i = 0 ; i < sz ; i ++ ) { res [ i ] = Integer . parseInt ( vals [ i ] ) ; } return res ; } }
import java . util . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; void doIt ( ) { int [ ] c = new int [ 10 ] ; Arrays . fill ( c , 0 ) ; for ( int i = 0 ; i < 4 ; i ++ ) { c [ sc . nextInt ( ) ] ++ ; } if ( c [ 1 ] == 1 && c [ 9 ] == 1 && c [ 7 ] == 1 && c [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { new Main ( ) . doIt ( ) ; } }
import java . util . Scanner ; class Point { int x ; int y ; int z ; Point ( int a , int b , int c ) { this . x = a ; this . y = b ; this . z = c ; } } public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] C = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { C [ i ] [ j ] = sc . nextInt ( ) ; } } sc . close ( ) ; int [ ] [ ] V = new int [ 3 ] [ 3 ] ; V [ 0 ] [ 0 ] = 0 ; V [ 1 ] [ 0 ] = 0 ; V [ 2 ] [ 0 ] = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( j > 0 ) { V [ i ] [ j ] = C [ i ] [ j ] - C [ i ] [ j - 1 ] ; } } } if ( V [ 0 ] [ 0 ] == V [ 1 ] [ 0 ] && V [ 1 ] [ 0 ] == V [ 2 ] [ 0 ] ) { if ( V [ 0 ] [ 1 ] == V [ 1 ] [ 1 ] && V [ 1 ] [ 1 ] == V [ 2 ] [ 1 ] ) { if ( V [ 0 ] [ 2 ] == V [ 1 ] [ 2 ] && V [ 1 ] [ 2 ] == V [ 2 ] [ 2 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } else { System . out . println ( " No " ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int nTests = sc . nextInt ( ) ; HashSet < String > h = new HashSet < > ( ) ; for ( int i = 0 ; i < nTests ; i ++ ) { String c = sc . next ( ) ; if ( ! h . contains ( c ) ) h . add ( c ) ; } System . out . println ( ( h . size ( ) == 3 ) ? " Three " : " Four " ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] A = new int [ 2 ] ; int [ ] B = new int [ 2 ] ; Arrays . fill ( A , 101 ) ; Arrays . fill ( B , 101 ) ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = reader . nextInt ( ) ; } } A [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 1 ] [ 0 ] ; A [ 1 ] = arr [ 1 ] [ 0 ] - arr [ 2 ] [ 0 ] ; B [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] ; B [ 1 ] = arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( arr [ i - 1 ] [ j ] - A [ i - 1 ] != arr [ i ] [ j ] || arr [ i ] [ j - 1 ] - B [ j - 1 ] != arr [ i ] [ j ] ) { ans = " No " ; } } } System . out . print ( ans ) ; reader . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c11 = sc . nextInt ( ) ; int c12 = sc . nextInt ( ) ; int c13 = sc . nextInt ( ) ; int c21 = sc . nextInt ( ) ; int c22 = sc . nextInt ( ) ; int c23 = sc . nextInt ( ) ; int c31 = sc . nextInt ( ) ; int c32 = sc . nextInt ( ) ; int c33 = sc . nextInt ( ) ; int diff21 = c21 - c11 ; int diff31 = c31 - c11 ; if ( c22 - c12 == diff21 && c23 - c13 == diff21 && c32 - c12 == diff31 && c33 - c13 == diff31 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int total = 0 ; int [ ] num = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { num [ i ] = sc . nextInt ( ) ; total += num [ i ] ; } int nextTotal1 = num [ 0 ] + num [ 1 ] + num [ 3 ] + num [ 4 ] ; int nextTotal2 = num [ 4 ] + num [ 5 ] + num [ 7 ] + num [ 8 ] ; int nextTotal3 = num [ 1 ] + num [ 2 ] + num [ 4 ] + num [ 5 ] ; int nextTotal4 = num [ 3 ] + num [ 4 ] + num [ 6 ] + num [ 7 ] ; int nextTotal5 = num [ 0 ] + num [ 2 ] + num [ 6 ] + num [ 8 ] ; if ( total % 3 == 0 && nextTotal1 % 2 == 0 && nextTotal1 % 2 == 0 && nextTotal3 % 2 == 0 && nextTotal4 % 2 == 0 && nextTotal5 % 2 == 0 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; boolean sw = false ; String answer = " " ; int e = 0 ; int f = 0 ; int g = 0 ; int h = 0 ; Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a == 1 || b == 1 || c == 1 || d == 1 ) { e = 1 ; } if ( a == 9 || b == 9 || c == 9 || d == 9 ) { f = 1 ; } if ( a == 7 || b == 7 || c == 7 || d == 7 ) { g = 1 ; } if ( a == 4 || b == 4 || c == 4 || d == 4 ) { h = 1 ; } if ( e == 1 && f == 1 && g == 1 && h == 1 ) { answer = " YES " ; } else { answer = " NO " ; } System . out . println ( answer ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; Integer n = scan . nextInt ( ) ; ArrayList < Integer > array = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) array . add ( scan . nextInt ( ) ) ; int min = array . get ( 0 ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array . get ( i ) < min ) { min = array . get ( i ) ; count ++ ; } } System . out . println ( count + 1 ) ; } static int factorial ( int n ) { if ( n == 0 ) { return 1 ; } return n * factorial ( n - 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] min = new long [ n ] ; int count = 1 ; min [ 0 ] = sc . nextLong ( ) ; for ( int i = 1 ; i < n ; i ++ ) { long p = sc . nextLong ( ) ; if ( p <= min [ i - 1 ] ) { min [ i ] = p ; count ++ ; } else { min [ i ] = min [ i - 1 ] ; } } System . out . println ( count ) ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Set < Integer > list = new TreeSet < Integer > ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int temp = s - x - y ; if ( temp >= 0 && temp <= k ) count ++ ; } } System . out . println ( count ) ; sc . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k && x + y + z == s ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { static Scanner scanner ; public static void main ( String [ ] args ) { scanner = new Scanner ( System . in ) ; int k = gi ( ) ; int s = gi ( ) ; int c = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( i + j <= s && s <= i + j + k ) { c ++ ; } } } System . out . println ( c ) ; } public static String gs ( ) { return scanner . next ( ) ; } public static int gi ( ) { return Integer . parseInt ( scanner . next ( ) ) ; } public static long gl ( ) { return Long . parseLong ( scanner . next ( ) ) ; } public static double gd ( ) { return Double . parseDouble ( scanner . next ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= K ; j ++ ) { int Z = S - i - j ; if ( Z >= 0 && Z <= K ) { ans ++ ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] p = IntStream . range ( 0 , sc . nextInt ( ) ) . map ( e -> sc . nextInt ( ) ) . toArray ( ) ; int temp = p [ 0 ] ; int ans = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] <= temp ) { ans ++ ; temp = p [ i ] ; } } System . out . println ( ans ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 1 ; int min = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp <= min ) { count ++ ; min = tmp ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] grid = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { grid [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int a1 = 0 ; a1 <= Math . min ( grid [ 0 ] [ 0 ] , Math . min ( grid [ 0 ] [ 1 ] , grid [ 0 ] [ 2 ] ) ) ; a1 ++ ) { for ( int a2 = 0 ; a2 <= Math . min ( grid [ 1 ] [ 0 ] , Math . min ( grid [ 1 ] [ 1 ] , grid [ 1 ] [ 2 ] ) ) ; a2 ++ ) { for ( int a3 = 0 ; a3 <= Math . min ( grid [ 2 ] [ 0 ] , Math . min ( grid [ 2 ] [ 1 ] , grid [ 2 ] [ 2 ] ) ) ; a3 ++ ) { if ( ( grid [ 0 ] [ 0 ] - a1 != grid [ 1 ] [ 0 ] - a2 ) || ( grid [ 1 ] [ 0 ] - a2 != grid [ 2 ] [ 0 ] - a3 ) ) { continue ; } if ( ( grid [ 0 ] [ 1 ] - a1 != grid [ 1 ] [ 1 ] - a2 ) || ( grid [ 1 ] [ 1 ] - a2 != grid [ 2 ] [ 1 ] - a3 ) ) { continue ; } if ( ( grid [ 0 ] [ 2 ] - a1 != grid [ 1 ] [ 2 ] - a2 ) || ( grid [ 1 ] [ 2 ] - a2 != grid [ 2 ] [ 2 ] - a3 ) ) { continue ; } System . out . println ( " Yes " ) ; return ; } } } System . out . println ( " No " ) ; } }
public class Main { public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; System . out . println ( ( Main . calc ( s . nextInt ( ) , s . nextInt ( ) ) ) ) ; } public static int calc ( int k , int s ) { int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( 0 <= z && z <= k ) { count ++ ; } } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int k = in . nextInt ( ) ; int s = in . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { int diff = s - i ; for ( int j = 0 ; j <= k ; j ++ ) { int diff2 = diff - j ; if ( diff2 >= 0 && diff2 <= k ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int K = scan . nextInt ( ) ; int S = scan . nextInt ( ) ; int x , y , z ; int ans = 0 ; for ( x = 0 ; x <= K ; x ++ ) { for ( y = 0 ; y <= K ; y ++ ) { z = S - x - y ; if ( z >= 0 && z <= K ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int n = stdin . nextInt ( ) ; String s [ ] = new String [ n ] ; int i ; String c , d ; boolean flag = false ; for ( i = 0 ; i < n ; i ++ ) { c = stdin . next ( ) ; s [ i ] = c ; } for ( i = 0 ; i < n ; i ++ ) { d = s [ i ] ; if ( d . contains ( " Y " ) ) flag = true ; } if ( flag ) System . out . println ( " Four " ) ; else System . out . println ( " Three " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int s = Integer . parseInt ( sc . next ( ) ) ; int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] n = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { n [ sc . nextInt ( ) ] ++ ; } if ( n [ 1 ] == 1 && n [ 9 ] == 1 && n [ 7 ] == 1 && n [ 4 ] == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { if ( s - i - j >= 0 && s - i - j <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int arare = scn . nextInt ( ) ; int count = 0 ; String [ ] arares = new String [ arare ] ; for ( int i = 0 ; i < arare ; i ++ ) { arares [ i ] = scn . next ( ) ; } List < String > listA = Arrays . asList ( arares ) ; List < String > listB = new ArrayList < String > ( new HashSet < > ( listA ) ) ; for ( int j = 0 ; j < listB . size ( ) ; j ++ ) { if ( listB . contains ( " P " ) ) count ++ ; else if ( listB . contains ( " W " ) ) count ++ ; else if ( listB . contains ( " G " ) ) count ++ ; else if ( listB . contains ( " Y " ) ) count ++ ; } if ( count == 3 ) System . out . println ( " Three " ) ; else System . out . println ( " Four " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } if ( c [ 0 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 0 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 0 ] [ 2 ] - c [ 1 ] [ 2 ] && c [ 2 ] [ 0 ] - c [ 1 ] [ 0 ] == c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] && c [ 2 ] [ 1 ] - c [ 1 ] [ 1 ] == c [ 2 ] [ 2 ] - c [ 1 ] [ 2 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class Solver { public void solve ( Scanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int count = 0 ; int PjMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int Pi = in . nextInt ( ) ; if ( Pi <= PjMin ) { count ++ ; } if ( PjMin >= Pi ) { PjMin = Pi ; } } out . println ( count ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int k = 1 ; int now = 0 ; for ( int i = 1 ; i < n ; i ++ ) { now = sc . nextInt ( ) ; if ( now <= min ) { min = now ; k ++ ; } } System . out . println ( k ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " " ; for ( int i = 0 ; i < n ; i ++ ) { s += sc . next ( ) ; } boolean p = false ; boolean w = false ; boolean g = false ; boolean y = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == 'P' ) { p = true ; } if ( s . charAt ( i ) == 'W' ) { w = true ; } if ( s . charAt ( i ) == 'G' ) { g = true ; } if ( s . charAt ( i ) == 'Y' ) { y = true ; } } if ( p & w & g & y ) { System . out . println ( " Four " ) ; } else if ( p & w & g & ! y ) { System . out . println ( " Three " ) ; } } }
import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { b [ 0 ] = i ; a [ 0 ] = c [ 0 ] [ 0 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - i ; a [ 2 ] = c [ 2 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] + i ; b [ 2 ] = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] + i ; int d = 0 ; for ( int j = 1 ; j <= 2 ; j ++ ) { for ( int k = 1 ; k <= 2 ; k ++ ) { if ( a [ j ] + b [ k ] != c [ j ] [ k ] ) d ++ ; } } if ( d == 0 ) { out . println ( " Yes " ) ; break ; } else if ( i == 100 ) out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; char a [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . next ( ) . charAt ( 0 ) ; } scan . close ( ) ; int check = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 'Y' ) { check = 1 ; break ; } } System . out . println ( ( check == 1 ) ? " Four " : " Three " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) c [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i <= Math . max ( c [ 0 ] , Math . max ( c [ 1 ] , c [ 2 ] ) ) ; i ++ ) { int a1 = i , b1 = c [ 0 ] - a1 , b2 = c [ 1 ] - a1 , b3 = c [ 2 ] - a1 , a2 = c [ 3 ] - b1 , a3 = c [ 6 ] - b1 ; if ( a1 + b1 == c [ 0 ] && a1 + b2 == c [ 1 ] && a1 + b3 == c [ 2 ] && a2 + b1 == c [ 3 ] && a2 + b2 == c [ 4 ] && a2 + b3 == c [ 5 ] && a3 + b1 == c [ 6 ] && a3 + b2 == c [ 7 ] && a3 + b3 == c [ 8 ] ) { System . out . println ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; int [ ] r = new int [ 3 ] ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = scan . nextInt ( ) ; } } outside : for ( int i = 0 ; i < 3 ; i ++ ) { int a = 101 ; for ( int j = 0 ; j < 3 ; j ++ ) { a = Math . min ( c [ i ] [ j ] , a ) ; } if ( i == 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { r [ j ] = c [ i ] [ j ] - a ; } } if ( i > 0 ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( r [ j ] != c [ i ] [ j ] - a ) { flag = false ; System . out . println ( " No " ) ; break outside ; } } } } if ( flag == true ) { System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = 2000001 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( min > tmp ) { min = tmp ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; String s [ ] = new String [ n ] ; boolean b = false ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scan . next ( ) ; if ( s [ i ] . equals ( " Y " ) ) { b = true ; } } if ( b == true ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i != a + 1 ; i ++ ) { for ( int j = 0 ; j != a + 1 ; j ++ ) { if ( b - i - j >= 0 && b - i - j <= a ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = sc . nextInt ( ) ; int [ ] min = new int [ n ] ; min [ 0 ] = p [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { min [ i ] = Math . min ( min [ i - 1 ] , p [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= min [ i ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) , s = scan . nextInt ( ) ; int result = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - ( x + y ) ; if ( z <= k && 0 <= z ) result ++ ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; Integer N [ ] = new Integer [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { N [ i ] = sc . nextInt ( ) ; } if ( Arrays . asList ( N ) . contains ( 1 ) && Arrays . asList ( N ) . contains ( 7 ) && Arrays . asList ( N ) . contains ( 9 ) && Arrays . asList ( N ) . contains ( 4 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; c [ 0 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 0 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 0 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 1 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 0 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 1 ] = Integer . parseInt ( sc . next ( ) ) ; c [ 2 ] [ 2 ] = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; a [ 0 ] = 0 ; b [ 0 ] = c [ 0 ] [ 0 ] - a [ 0 ] ; b [ 1 ] = c [ 0 ] [ 1 ] - a [ 0 ] ; b [ 2 ] = c [ 0 ] [ 2 ] - a [ 0 ] ; a [ 1 ] = c [ 1 ] [ 1 ] - b [ 1 ] ; a [ 2 ] = c [ 2 ] [ 1 ] - b [ 1 ] ; String ans = " Yes " ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( c [ i ] [ j ] != a [ i ] + b [ j ] ) { ans = " No " ; break ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int s = scan . nextInt ( ) ; if ( k >= s ) { System . out . println ( ( s + 2 ) * ( s + 1 ) / 2 ) ; } else { int ans = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( z >= 0 && z <= k ) { ans ++ ; } } } System . out . println ( ans ) ; } } }
import java . util . * ; import static java . lang . Integer . * ; import static java . lang . Long . parseLong ; import static java . lang . Math . * ; import static java . lang . System . * ; import java . io . PrintWriter ; public class Main { public static void main ( String [ ] args ) { int i , j ; Scanner sc = new Scanner ( in ) ; int n = parseInt ( sc . next ( ) ) ; HashSet < String > s = new HashSet < > ( ) ; for ( i = 0 ; i < n ; i ++ ) { s . add ( sc . next ( ) ) ; } sc . close ( ) ; out . println ( s . size ( ) == 3 ? " Three " : " Four " ) ; } }
import java . util . * ; import java . io . * ; import java . nio . charset . StandardCharsets ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader reader = new InputStreamReader ( System . in , StandardCharsets . UTF_8 ) ; BufferedReader in = new BufferedReader ( reader ) ; Main ins = new Main ( in ) ; ins . calc ( ) ; ins . showResult ( ) ; } int [ ] [ ] c ; Main ( BufferedReader in ) throws IOException { c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; ++ i ) { String [ ] tokens = in . readLine ( ) . split ( " " ) ; for ( int j = 0 ; j < 3 ; ++ j ) { c [ i ] [ j ] = Integer . parseInt ( tokens [ j ] ) ; } } for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 3 ; ++ j ) { c [ j ] [ i ] -= c [ 0 ] [ i ] ; } } for ( int i = 0 ; i < 3 ; ++ i ) { c [ 0 ] [ i ] = 0 ; } boolean enable = true ; for ( int i = 0 ; i < 3 ; ++ i ) { boolean cond = true ; for ( int j = 1 ; j < 3 ; ++ j ) { if ( c [ i ] [ j ] != c [ i ] [ 0 ] ) { cond = false ; } } if ( ! cond ) { enable = false ; break ; } } System . out . println ( ( enable ? " Yes " : " No " ) ) ; } void calc ( ) { } void showResult ( ) { } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int k , s , l , cnt = 0 ; Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; s = sc . nextInt ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { l = s - ( i + j ) ; if ( l >= 0 && l <= k ) cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; String str = s . nextLine ( ) ; String [ ] sp = str . split ( " " ) ; int [ ] year = { 1 , 9 , 4 , 7 } ; boolean check1947 = true ; for ( int j = 0 ; j < year . length ; j ++ ) { boolean checkNo = false ; for ( int i = 0 ; i < sp . length ; i ++ ) { if ( Integer . parseInt ( sp [ i ] ) == year [ j ] ) checkNo = true ; } check1947 = check1947 && checkNo ; } if ( check1947 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; import java . io . * ; class Main { void solve ( ) { int k = inint ( ) , s = inint ( ) ; int count = 0 ; for ( int x = 0 ; x <= k ; x ++ ) { for ( int y = 0 ; y <= k ; y ++ ) { int z = s - x - y ; if ( ( 0 <= z && z <= k ) && x + y + z == s ) count ++ ; } } out . println ( count ) ; } public static Scanner in = new Scanner ( System . in ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; out . flush ( ) ; } public int inint ( ) { return in . nextInt ( ) ; } public long inlong ( ) { return in . nextLong ( ) ; } public String instr ( ) { return in . next ( ) ; } public char inchar ( ) { return in . next ( ) . charAt ( 0 ) ; } public int [ ] inintar ( int num ) { int [ ] a = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { a [ i ] = in . nextInt ( ) ; } return a ; } public char [ ] incharar ( ) { return in . next ( ) . toCharArray ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextInt ( ) ; String str = sc . nextLine ( ) ; str = sc . nextLine ( ) ; sc . close ( ) ; if ( str . contains ( " Y " ) ) { System . out . println ( " Four " ) ; } else { System . out . println ( " Three " ) ; } } }
" use strict " ; ( inp => { inp = inp . split ( " " ) ; console . log ( Math . ceil ( ( + inp [ 0 ] + + inp [ 1 ] ) / 2 ) ) ; } ) ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / \s / g ) ; var a = input [ 0 ] - 0 ; var b = input [ 1 ] - 0 ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const r = parseInt ( arg [ 0 ] ) ; console . log ( r * r ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; const result = ( function ( a ) { return Math . pow ( a , 3 ) ; } ( parseInt ( inputs [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { var A = parseInt ( input [ 0 ] , 10 ) ; var B = parseInt ( input [ 1 ] , 10 ) ; var sum = A + B ; console . log ( Math . ceil ( sum / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) . split ( / \n|\s / ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line . split ( " " ) ) ; } ) ; reader . on ( ' close ' , solve ) ; function getInt ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseInt ( elem ) ) ; return rtn ; } function getFloat ( strArr ) { var rtn = [ ] ; for ( elem of strArr ) rtn . push ( parseFloat ( elem ) ) ; return rtn ; } function solve ( ) { var [ N ] = getInt ( lines [ 0 ] ) ; var P = getInt ( lines [ 1 ] ) ; var m = 200001 , ans = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( P [ i ] < m ) ans ++ ; m = Math . min ( m , P [ i ] ) ; } console . log ( ans ) ; }
var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { var antena = [ ] ; for ( var i = 0 ; i < lines . length ; i ++ ) { antena . push ( Number ( lines [ i ] ) ) ; } if ( antena [ antena . length - 1 ] < Math . max . apply ( null , antena ) - Math . min . apply ( null , antena ) ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) ; } } ) ;
const main = function ( input ) { let num = 3 ; let ans = input ; for ( let i = 0 ; i < num - 1 ; i ++ ) { ans *= input ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . split ( " " ) ; var a = inputs [ 0 ] ; var b = inputs [ 1 ] ; var valid = true ; if ( a > 8 || b > 8 ) { valid = false ; } console . log ( valid ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = stdin => { const input = stdin . trim ( ) . split ( ' \n ' ) if ( input [ 4 ] - input [ 0 ] <= input [ 5 ] ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
' use strict ' ; const i = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) ; let s = i [ 0 ] , p = parseInt ( i [ 1 ] ) , code , result = " " ; for ( let j = 0 ; j < s . length ; j ++ ) { code = s [ j ] . charCodeAt ( 0 ) ; if ( s . length - 1 === j ) { code += p % 26 ; code += ( code > 122 ) ? - 26 : 0 ; result += String . fromCharCode ( code ) ; } else { if ( ( 123 - code ) <= p && ! ( s [ j ] === " a " ) ) { p -= ( 123 - code ) ; result += " a " ; } else { result += s [ j ] ; } } } console . log ( result ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var array = input [ 0 ] . split ( " " ) ; array . sort ( ) ; console . log ( ( array [ 0 ] === " 5 " && array [ 1 ] === " 5 " && array [ 2 ] === " 7 " ) ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; N = Number ( input [ 0 ] ) ; let An = input [ 1 ] . split ( " " ) . map ( Number ) ; if ( gcd ( An ) !== 1 ) { console . log ( " not coprime " ) ; return ; } let freq = Array ( 1000001 ) . fill ( 0 ) ; for ( let A of An ) { if ( A === 1 ) continue ; freq [ A ] ++ ; if ( freq [ A ] > 1 ) { console . log ( " setwise coprime " ) ; return ; } } for ( let i = 2 ; i <= 1000001 ; i ++ ) { let tmp = 0 ; for ( let j = i ; j <= 1000001 ; j += i ) { tmp += freq [ j ] ; if ( tmp >= 2 ) { console . log ( " setwise coprime " ) ; return ; } } } console . log ( " pairwise coprime " ) ; } function gcd ( arg ) { let f = ( a , b ) => b ? f ( b , a % b ) : a let ans = arg [ 0 ] ; for ( let i = 1 ; i < arg . length ; i ++ ) { ans = f ( ans , arg [ i ] ) ; } return ans ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
log = console . log ; var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " UTF-8 " ) ; var lines = stdin . split ( " \n " ) ; var N = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var M = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; lines = lines . splice ( 1 ) . filter ( v => v !== " " ) ; cities = lines . map ( ( v , i ) => { P = Number ( v . split ( " " ) [ 0 ] ) ; Y = Number ( v . split ( " " ) [ 1 ] ) ; return { cityIndex : i , prefecture : P , year : Y } ; } ) ; cities . sort ( ( a , b ) => { return a . year - b . year ; } ) ; count = [ ] ; cities = cities . map ( c => { count [ c . prefecture ] === undefined ? ( count [ c . prefecture ] = 1 ) : ( count [ c . prefecture ] += 1 ) ; P = " 000000 " + c . prefecture . toString ( ) ; P = P . substr ( P . length - 6 , 6 ) ; id = " 000000 " + count [ c . prefecture ] . toString ( ) ; id = id . substr ( id . length - 6 , 6 ) ; return { cityIndex : c . cityIndex , prefecture : P , year : Y , id : id } ; } ) ; cities . sort ( ( a , b ) => { return a . cityIndex - b . cityIndex ; } ) ; cities . forEach ( c => console . log ( c . prefecture . toString ( ) + c . id . toString ( ) ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( Math . pow ( input , 3 ) ) ;
" use strict " ; const Main = ( input ) => { input = input . split ( " \n " ) ; var five_h = parseInt ( input [ 0 ] ) ; var hundred = parseInt ( input [ 1 ] ) ; var fifty = parseInt ( input [ 2 ] ) ; var sum = parseInt ( input [ 3 ] ) ; var count = 0 ; for ( let i = 0 ; i <= five_h ; i ++ ) { for ( let j = 0 ; j <= hundred ; j ++ ) { for ( let k = 0 ; k <= fifty ; k ++ ) { if ( sum === k * 50 + j * 100 + i * 500 ) { count ++ ; } } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( s ) { s = s . split ( " " ) . map ( a => parseInt ( a ) ) ; console . log ( s [ 0 ] + s [ 1 ] >= s [ 2 ] ? " Yes " : " No " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( " " ) ; console . log ( Math . max ( input [ 0 ] * input [ 1 ] , input [ 2 ] * input [ 3 ] ) ) ;
' use strict ' ; ( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
' use strict ' ; let stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; let a = 0 , b = 0 ; for ( let x of stdin . split ( ' ' ) ) { x = parseInt ( x ) ; if ( x == 5 ) { a ++ ; } else if ( x == 7 ) { b ++ ; } } console . log ( a == 2 && b == 1 ? " YES " : " NO " ) ;
var line = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) var r = parseInt ( line ) console . log ( r * r )
function Main ( input ) { input = input . split ( " \n " ) ; argv = input [ 0 ] . split ( " " ) ; var A = parseInt ( argv [ 0 ] ) ; var B = parseInt ( argv [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; if ( a + b - c < 0 ) { console . log ( " No " ) ; } else { console . log ( " Yes " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const receive = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( / / ) ; const main = input => { const A = input . map ( x => Number ( x ) ) ; const arr = A . sort ( ( x , y ) => y - x ) ; const ans = arr [ 0 ] - arr [ 2 ] ; console . log ( ans ) ; } ; main ( receive ) ;
' use strict ' const main = ( input ) => { const items = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) const itemSet = new Set ( items ) if ( itemSet . size === 4 ) { console . log ( ' Four ' ) } else { console . log ( ' Three ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( ' \n ' ) in p = inp . shift ( ) . split ( " " ) . map ( ( x ) => + x ) A = inp . shift ( ) B = inp . shift ( ) H = inp . shift ( ) M = inp . shift ( ) p = 10e10 h = H / 12 * 360 + M / 60 * 360 / 12 h = h * ( Math . PI / 180 ) m = M / 60 * 360 m = m * ( Math . PI / 180 ) t = function ( n ) { return Math . round ( n * p ) / p } ax = A * t ( Math . cos ( h ) ) ay = A * t ( Math . sin ( h ) ) bx = B * t ( Math . cos ( m ) ) by = B * t ( Math . sin ( m ) ) c = Math . sqrt ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) ) console . log ( c )
function Main ( input ) { var patternOne = " 5 7 5 " ; var patternTwo = " 5 5 7 " ; var patternThree = " 7 5 5 " ; input = input . split ( " " ) ; var fiveNum = 0 ; var sevenNum = 0 ; for ( var i = 0 ; i < input . length ; i ++ ) { if ( Number ( input [ i ] ) === 5 ) { fiveNum ++ ; } else if ( Number ( input [ i ] ) === 7 ) { sevenNum ++ ; } } if ( fiveNum === 2 && sevenNum === 1 ) { console . log ( " YES " ) ; } else { console . log ( " NO " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var a = input . split ( " " ) [ 0 ] - 0 , b = input . split ( " " ) [ 1 ] - 0 ; if ( a <= 5 ) { console . log ( 0 ) ; } else if ( a <= 12 ) { console . log ( b / 2 ) ; } else { console . log ( b ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var row = input . split ( ' \n ' ) ; var result = [ ] ; for ( var i = 0 ; i < row . length ; i ++ ) { var x = row [ i ] . split ( ' ' ) . map ( Number ) ; if ( x [ 0 ] === 0 ) { break ; } var total = x . reduce ( function ( a , b ) { return a + b ; } ) ; result . push ( total ) ; } console . log ( result . join ( ' \n ' ) ) ;
function Main ( ) { var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) . trim ( ) ; var items = input . split ( " " ) . map ( function ( item ) { return parseInt ( item ) ; } ) ; items . sort ( ) ; var target = [ 5 , 5 , 7 ] ; var flag = true ; for ( var i = 0 ; i < 3 ; ++ i ) { if ( items [ i ] != target [ i ] ) { flag = false ; break ; } } console . log ( flag ? " YES " : " NO " ) ; } Main ( ) ;
function main ( input ) { const ary = input . split ( ' ' ) . sort ( ) . map ( n => parseInt ( n , 10 ) ) ; console . log ( Math . abs ( ary [ 0 ] - ary [ 1 ] ) + Math . abs ( ary [ 1 ] - ary [ 2 ] ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inp = input . trim ( ) . split ( ' \n ' ) ; var N = parseInt ( inp [ 0 ] . trim ( ) ) ; var S = inp [ 1 ] . split ( ' ' ) ; var answer = ' Three ' ; for ( var i = 0 ; i < S . length ; i ++ ) { if ( S [ i ] === ' Y ' ) { answer = ' Four ' ; } } console . log ( answer ) ; } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) . map ( Number ) ; const a = input [ 0 ] , b = input [ 1 ] ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { let date = input . split ( ' / ' ) . map ( v => ~ ~ v ) if ( date [ 1 ] > 4 ) { console . log ( ' TBD ' ) } else { console . log ( ' Heisei ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { var arr = input . split ( " " ) . map ( x => parseInt ( x , 10 ) ) ; var a = Math . max . apply ( null , arr ) ; var b = Math . min . apply ( null , arr ) ; console . log ( a - b ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { tmp = input . split ( " " ) ; hHand = parseInt ( tmp [ 0 ] , 10 ) ; mHand = parseInt ( tmp [ 1 ] , 10 ) ; hours = parseInt ( tmp [ 2 ] , 10 ) ; minuts = parseInt ( tmp [ 3 ] , 10 ) ; hAngle = ( 30 * hours ) + ( 0.5 * minuts ) ; if ( hAngle == 90 ) { hoursX = hHand ; hoursY = 0 ; } else if ( hAngle == 180 ) { hoursX = 0 ; hoursY = - hHand ; } else if ( hAngle == 270 ) { hoursX = - hHand ; hoursY = 0 ; } else { hoursX = hHand * Math . sin ( hAngle * ( Math . PI / 180 ) ) ; hoursY = hHand * Math . cos ( hAngle * ( Math . PI / 180 ) ) ; } mAngle = ( 6 * minuts ) ; if ( mAngle == 90 ) { minutsX = mHand ; minutsY = 0 ; } else if ( mAngle == 180 ) { minutsX = 0 ; minutsY = - mHand ; } else if ( mAngle == 270 ) { minutsX = - mHand ; minutsY = 0 ; } else { minutsX = mHand * Math . sin ( mAngle * ( Math . PI / 180 ) ) ; minutsY = mHand * Math . cos ( mAngle * ( Math . PI / 180 ) ) ; } distance = Math . hypot ( hoursX - minutsX , hoursY - minutsY ) ; console . log ( distance ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
function main ( input ) { var reg = / 7 5 5|5 7 5|5 5 7 / ; reg . test ( input ) ? op ( " YES " ) : op ( " NO " ) ; } function op ( a ) { console . log ( a ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function cube ( x ) { return x * x * x ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var x = parseInt ( chunk . trim ( ) , 10 ) ; console . log ( cube ( x ) ) ; } ) ;
line = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) , n = parseInt ( line [ 0 ] ) , v = line [ 1 ] . split ( " " ) ; for ( var odds = { } , even = { } , i = 0 ; i < v . length ; i ++ ) di = 1 & i ? even : odds , di [ v [ i ] ] = di [ v [ i ] ] ? di [ v [ i ] ] + 1 : 1 ; var a = [ ] , b = [ ] ; for ( var k in odds ) a . push ( { v : k , n : odds [ k ] } ) ; for ( var k in even ) b . push ( { v : k , n : even [ k ] } ) ; a . sort ( ( n , i ) => i . n - n . n ) , b . sort ( ( n , i ) => i . n - n . n ) , a [ 0 ] . v != b [ 0 ] . v && ( b [ 1 ] = b [ 0 ] ) , log = console . log , log ( n - Math . max ( a [ 0 ] . n + ( b [ 1 ] ? b [ 1 ] . n : 0 ) , ( a [ 1 ] ? a [ 1 ] . n : 0 ) + b [ 0 ] . n ) ) ;
var stdin = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; stdin = stdin . trim ( ) . split ( " \n " ) ; var stdout = [ ] ; function print ( x ) { stdout . push ( x ) } ; var menu = stdin . map ( n => parseInt ( n ) ) ; var dmin = 9 var ans = 0 for ( i = 0 ; i < 5 ; i ++ ) { dmin = Math . min ( ( menu [ i ] - 1 ) % 10 , dmin ) ans += parseInt ( ( menu [ i ] + 9 ) / 10 ) * 10 } print ( ans - 10 + dmin + 1 ) ; stdout = stdout . join ( " \n " ) ; console . log ( stdout ) ;
function main ( input ) { input = input . split ( " \n " ) ; temp = input [ 1 ] . split ( " " ) ; len = input [ 0 ] ; min = 1001 ; max = 0 ; for ( var i = 0 ; i < len ; i += 1 ) { if ( min > temp [ i ] ) { min = temp [ i ] ; } if ( max < temp [ i ] ) { max = temp [ i ] ; } } console . log ( max - min ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const cube = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const x = parseInt ( inputs [ 0 ] , 10 ) console . log ( cube ( x ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " function main ( arg ) { if ( arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) . sort ( ( a , b ) => a - b ) . join ( ' ' ) == ' 557 ' ) { console . log ( ' YES ' ) } else { console . log ( ' NO ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { var N = input [ 0 ] - 0 ; var list = input [ 1 ] . split ( " " ) . map ( v => v - 0 ) ; var ans = 0 ; var min = Infinity ; for ( var i = 0 ; i < N ; i ++ ) { if ( min > list [ i ] ) { min = list [ i ] ; ans ++ ; } } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) )
function Main ( input ) { input = input . split ( " \n " ) ; var x = parseInt ( input [ 0 ] , 10 ) ; console . log ( " %d " , x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) let ans = input [ 0 ] - input [ 1 ] if ( input [ 1 ] === 1 ) ans = 0 console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; var n = 0 ; var obj = { } ; var abc = [ ] ; for ( var i = 0 ; i < Arr . length ; i ++ ) { if ( n == 0 ) { if ( i != 0 ) { abc . sort ( function ( a , b ) { return a - b ; } ) ; for ( var k in obj ) { if ( obj [ k ] == abc [ 0 ] ) { console . log ( k ) ; break ; } } } if ( Arr [ i ] == 0 ) break ; n = Arr [ i ] ; abc = [ ] ; obj = { } ; } else { n -- ; var arr = Arr [ i ] . split ( " " ) . map ( Number ) ; var h = arr [ 1 ] / 100 ; var bmi = Math . abs ( 22 - arr [ 2 ] / ( h * h ) ) ; abc . push ( bmi ) ; obj [ arr [ 0 ] ] = bmi ; } }
function Main ( input ) { var lines = input . split ( " \n " ) ; var N = parseInt ( lines [ 0 ] ) ; var a = lines [ 1 ] . split ( " " ) . map ( function ( i ) { return parseInt ( i ) ; } ) ; var sortedA = a . slice ( ) . sort ( function ( a , b ) { return a - b ; } ) ; var med1 = sortedA [ N / 2 - 1 ] ; var med2 = sortedA [ N / 2 ] ; a . forEach ( function ( i ) { console . log ( i <= med1 ? med2 : med1 ) ; } ) } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { input = input . split ( ' \n ' ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const c = parseInt ( input [ 2 ] , 10 ) ; const sum = parseInt ( input [ 3 ] , 10 ) ; var count = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var z = 0 ; z <= c ; z ++ ) { if ( ( 500 * i ) + ( 100 * j ) + ( 50 * z ) === sum ) { count ++ ; } } } } console . log ( count ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var [ h , r ] = input . trim ( ) . split ( " " ) . map ( Number ) ; if ( r + h == 0 ) console . log ( 0 ) ; else if ( r + h > 0 ) console . log ( 1 ) ; else console . log ( - 1 ) ;
function Main ( input ) { var times = parseInt ( input , 10 ) * parseInt ( input , 10 ) ; console . log ( ' %d ' , times ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const formatted_input = input . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; var tmp_minimum = 0 ; var result = 0 ; for ( var i = 0 ; i < 5 ; i ++ ) { result += ( formatted_input [ i ] - formatted_input [ i ] % 10 ) if ( formatted_input [ i ] % 10 != 0 ) { if ( tmp_minimum == 0 ) { tmp_minimum = formatted_input [ i ] % 10 } else { result += 10 ; tmp_minimum = Math . min ( tmp_minimum , formatted_input [ i ] % 10 ) } } } result += tmp_minimum ; console . log ( result ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] ; var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout , terminal : false } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { const [ A , B , H , M ] = lines [ 0 ] . split ( " " ) . map ( e => parseFloat ( e ) ) ; const degB = M * 6.0 ; const degA = H * 30.0 + 30.0 * M / 60 ; const deg1 = Math . abs ( degA - degB ) ; const deg = deg1 > 180 ? 360 - deg1 : deg1 ; const rad = deg * Math . PI / 180 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - 2 * A * B * Math . cos ( rad ) ) ; console . log ( ans ) ; } ) ;
function main ( arg ) { arg = arg . trim ( ) ; arg = parseInt ( arg , 10 ) ; var i = 1 * 1 ; var r = ( ( arg * arg ) / i ) ; console . log ( r ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const fs = require ( ' fs ' ) ; function main ( input ) { arr = input . split ( ' \n ' ) ; var a = parseInt ( arr [ 0 ] ) ; var b = parseInt ( arr [ 1 ] ) ; var c = parseInt ( arr [ 2 ] ) ; var x = parseInt ( arr [ 3 ] ) / 50 ; var tot ; var cnt = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { for ( var j = 0 ; j <= b ; j ++ ) { for ( var k = 0 ; k <= c ; k ++ ) { tot = 10 * i + 2 * j + k ; if ( tot === x ) { cnt ++ } } } } console . log ( cnt ) } input = fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; main ( input ) ;
function Main ( input ) { input = input . split ( " \n " ) ; A = parseInt ( input [ 0 ] , 10 ) ; B = parseInt ( input [ 1 ] , 10 ) ; C = parseInt ( input [ 2 ] , 10 ) ; X = parseInt ( input [ 3 ] , 10 ) ; var count = 0 ; for ( i = 0 ; i <= A ; i ++ ) { for ( j = 0 ; j <= B ; j ++ ) { for ( k = 0 ; k <= C ; k ++ ) { x = 500 * i + 100 * j + 50 * k ; if ( x == X ) { count += 1 ; } } } } console . log ( ' %d ' , count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( input ) => { let tasks = input . split ( ' \n ' ) [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const ans = Math . max ( ... tasks ) - Math . min ( ... tasks ) console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
" use strict " function Main ( input ) { input = Number ( input . trim ( ) ) ; console . log ( input * input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var Arr = ( input . trim ( ) ) . split ( " \n " ) ; while ( true ) { var n = Arr . shift ( ) - 0 ; if ( n == 0 ) break ; var m = Arr . shift ( ) - 0 ; var N = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { N [ i ] = [ ] ; for ( var j = 0 ; j < n ; j ++ ) { N [ i ] [ j ] = Infinity ; if ( i == j ) N [ i ] [ j ] = 0 ; } } var arr = [ ] ; for ( var i = 0 ; i < m ; i ++ ) { var abc = Arr . shift ( ) . split ( " , " ) . map ( Number ) ; var a = abc [ 0 ] ; var b = abc [ 1 ] ; var c = ( abc [ 2 ] / 100 ) - 1 ; N [ a ] [ b ] = c ; N [ b ] [ a ] = c ; } var city = [ 0 ] ; var cost = 0 ; while ( true ) { if ( city . length == n ) break ; var min = Infinity ; var select = - 1 ; for ( var i = 0 ; i < city . length ; i ++ ) { for ( var j = 0 ; j < n ; j ++ ) { if ( city . indexOf ( j ) != - 1 ) continue ; if ( N [ city [ i ] ] [ j ] < min ) { select = j ; min = N [ city [ i ] ] [ j ] ; } } } if ( select != - 1 ) { cost += min ; city . push ( select ) ; } } console . log ( cost ) ; }
var si = process . stdin ; si . resume ( ) ; si . setEncoding ( ' utf8 ' ) ; si . on ( ' data ' , function ( chunk ) { var x = Number ( chunk . toString ( ) . trim ( ) ) ; console . log ( x * x * x ) ; } ) ;
" use strict " process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { var x = Number ( data ) ; console . log ( x * x * x ) ; } ) ;
function Main ( input ) { var tmp = input . split ( " " ) ; var a = parseInt ( tmp [ 0 ] , 10 ) ; var b = parseInt ( tmp [ 1 ] , 10 ) ; var payed_price = 0 ; if ( a >= 13 ) { payed_price = b ; } else if ( a >= 6 ) { payed_price = b / 2 ; } else { payed_price = 0 ; } console . log ( payed_price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var m = a * a ; console . log ( m ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; function Main ( INPUT ) { const A = INPUT . split ( " " ) . map ( n => Number ( n ) ) ; A . sort ( ( a , b ) => a - b ) ; console . log ( ( A [ 1 ] - A [ 0 ] ) + ( A [ 2 ] - A [ 1 ] ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( s ) { const table = s . split ( ' \n ' ) . slice ( 0 , - 1 ) . map ( el => el . split ( ' ' ) . map ( x => Number ( x ) ) ) ; let ans = ' Yes ' ; for ( let i = 0 ; i < 2 ; i ++ ) { for ( let j = 0 ; j < 2 ; j ++ ) { const col_diff = ( ( table [ i ] [ j ] - table [ i ] [ j + 1 ] ) === ( table [ i + 1 ] [ j ] - table [ i + 1 ] [ j + 1 ] ) ) ; const row_diff = ( ( table [ i ] [ j ] - table [ i + 1 ] [ j ] ) === ( table [ i ] [ j + 1 ] - table [ i + 1 ] [ j + 1 ] ) ) ; if ( ! ( col_diff && row_diff ) ) { ans = ' No ' ; break ; } } } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( a ) { a = stn ( a . split ( " " ) ) ; var ss = [ ] ; ss . push ( a [ 0 ] * a [ 1 ] ) ; ss . push ( a [ 2 ] * a [ 3 ] ) ; ss . sort ( function ( a , b ) { return a - b ; } ) ; console . log ( ss [ 1 ] ) ; } function stn ( a ) { return a . map ( function ( x ) { return parseInt ( x , 10 ) ; } ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
( stdin => { const Number = n => Math . pow ( n , 3 ) const inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) const X = parseInt ( inputs [ 0 ] , 10 ) console . log ( Number ( X ) ) } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) var x = parseInt ( input ) console . log ( x * x * x )
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const N = parseInt ( arg [ 0 ] ) ; for ( let h = 1 ; h <= 3500 ; h ++ ) { for ( let n = 1 ; n <= 3500 ; n ++ ) { let w = ( N * h * n ) / ( 4 * h * n - N * n - N * h ) ; if ( w % 1 === 0 && w > 0 ) { console . log ( h + " " + n + " " + w ) ; return ; } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var out = function ( x ) { console . log ( x ) ; return x ; } var calc = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ;
' use strict ' ; var Main = function ( stdin ) { var line = stdin . split ( ' \n ' ) ; var result = ( function ( data ) { return Math . pow ( data , 3 ) ; } ( parseInt ( line [ 0 ] , 10 ) ) ) ; console . log ( result ) ; } ; Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' ) ; var x = parseInt ( input ) ; console . log ( Math . pow ( x , 3 ) )
" use strict " ; const main = ( input ) => { const [ a , b ] = input . trim ( ) . split ( " " ) . map ( Number ) ; if ( a === b ) { return " Draw " ; } else if ( b === 1 ) { return " Bob " ; } else if ( a === 1 ) { return " Alice " ; } else if ( a < b ) { return " Bob " ; } else { return " Alice " ; } } ; console . log ( main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ) ;
" use strict " ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; var lines = [ ] var reader = require ( ' readline ' ) . createInterface ( { input : process . stdin , output : process . stdout } ) ; reader . on ( ' line ' , ( line ) => { lines . push ( line ) ; } ) ; reader . on ( ' close ' , ( ) => { for ( var line of lines ) { if ( line === " 0 " ) { break ; } console . log ( aux ( line ) ) ; } } ) ; function aux ( s ) { return ( s . split ( ' ' ) . map ( Number ) . reduce ( ( s , x ) => { return s + x } ) ) }
function main ( input ) { var input = input . split ( ' ' ) ; var answer = ' Yay! ' ; if ( input [ 0 ] >= 9 || input [ 1 ] >= 9 ) { answer = ' :( ' ; } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { abcde = input . split ( ' \n ' ) ; a = parseInt ( abcde [ 0 ] . trim ( ) ) ; e = parseInt ( abcde [ 4 ] . trim ( ) ) ; k = parseInt ( abcde [ 5 ] . trim ( ) ) ; console . log ( ( e - a ) > k ? " :( " : " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { var line = chunk . toString ( ) ; var output = line * line * line ; console . log ( output ) ; } ) ;
" use strict " ; var GET = ( function ( ) { function f ( s ) { return new g ( s ) ; } function g ( s ) { this . _s = s . trim ( ) . split ( " \n " ) ; this . _y = 0 ; } g . prototype . a = function ( f ) { var s = this . _s , y = this . _y , r ; if ( typeof s [ y ] === " string " ) s [ y ] = s [ y ] . split ( " " ) . reverse ( ) ; r = s [ y ] . pop ( ) ; if ( ! s [ y ] . length ) this . _y ++ ; return f ? r : + r ; } ; g . prototype . l = function ( f ) { var s = this . _s [ this . _y ++ ] . split ( " " ) ; return f ? s : s . map ( a => + a ) ; } ; g . prototype . m = function ( n , f ) { var r = this . _s . slice ( this . _y , this . _y += n ) . map ( a => a . split ( " " ) ) ; return f ? r : r . map ( a => a . map ( a => + a ) ) ; } ; g . prototype . r = function ( n , f ) { var r = this . _s . slice ( this . _y , this . _y += n ) ; return f ? r : r . map ( a => + a ) ; } ; return f ; } ) ( ) ; var o = GET ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ; function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill(0).map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill(0).map(x=> " + r + " ) " ; return eval ( r ) ; } console . log ( main ( ) ) ; function main ( ) { var n = o . a ( ) ; return n * n ; }
" use strict " const tan = ( x ) => { return Math . tan ( x ) ; } function main ( arg ) { let [ A , B , H , M ] = arg . trim ( ) . split ( " \n " ) [ 0 ] . split ( " " ) . map ( Number ) const aTh = ( H + M / 60 ) * 360 / 12 const bTh = M * 360 / 60 let th = Math . abs ( aTh - bTh ) console . log ( solve ( A , B , th ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ; function solve ( a , b , th ) { let c2 = Math . pow ( a , 2 ) + Math . pow ( b , 2 ) - 2 * a * b * Math . cos ( th * ( Math . PI / 180 ) ) return Math . sqrt ( c2 ) }
' use strict ' function Main ( input ) { input = input . split ( ' ' ) ; let age = parseInt ( input [ 0 ] , 10 ) ; let value = parseInt ( input [ 1 ] , 10 ) ; let price = 0 ; if ( age > 5 && age < 13 ) { price = value / 2 } else if ( age >= 13 ) { price = value } console . log ( ' %d ' , price ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; ( function ( stdin ) { var inputs = stdin . toString ( ) ; var x = inputs . trim ( ) . split ( ' \n ' ) . map ( Number ) [ 0 ] ; console . log ( Math . pow ( x , 3 ) ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " \n " ) . map ( ( input ) => Number ( input ) ) ; var k = input [ 5 ] ; for ( var i = 0 ; i < 5 ; i ++ ) { for ( var j = i + 1 ; j < 5 ; j ++ ) { if ( input [ j ] - input [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = input => { const args = input . trim ( ) . split ( ' \n ' ) const x = [ ] let cnt = 0 for ( let i = 1 ; i < args . length ; i ++ ) { x . push ( args [ i ] . split ( ' ' ) . map ( Number ) ) } for ( let i = 0 ; i < x . length ; i ++ ) { for ( let j = 0 ; j < x . length ; j ++ ) { if ( i >= j ) continue let sum = 0 for ( let k = 0 ; k < x [ i ] . length ; k ++ ) { sum += Math . pow ( x [ i ] [ k ] - x [ j ] [ k ] , 2 ) } if ( Math . sqrt ( sum ) % 1 === 0 ) cnt ++ } } console . log ( cnt ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; var H = parseInt ( input . split ( " " ) [ 2 ] , 10 ) ; var M = parseInt ( input . split ( " " ) [ 3 ] , 10 ) ; rad_H = ( ( 360 / 12 ) * H + ( ( 360 / 12 ) / 60 ) * M ) * ( Math . PI / 180 ) ; rad_M = ( 360 / 60 ) * M * ( Math . PI / 180 ) ; console . log ( Math . sqrt ( ( A * A ) + ( B * B ) - 2 * A * B * Math . cos ( rad_H - rad_M ) ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var c = lines . map ( i => i . split ( " " ) . map ( i => Number ( i ) ) ) ; for ( var a1 = 0 ; a1 <= 100 ; a1 ++ ) { var b1 = c [ 0 ] [ 0 ] - a1 var b2 = c [ 1 ] [ 0 ] - a1 var b3 = c [ 2 ] [ 0 ] - a1 for ( var a2 = 0 ; a2 <= 100 ; a2 ++ ) { if ( a2 + b1 !== c [ 0 ] [ 1 ] ) { continue } if ( a2 + b2 !== c [ 1 ] [ 1 ] ) { continue } if ( a2 + b3 !== c [ 2 ] [ 1 ] ) { continue } for ( var a3 = 0 ; a3 <= 100 ; a3 ++ ) { if ( a3 + b1 !== c [ 0 ] [ 2 ] ) { continue } if ( a3 + b2 !== c [ 1 ] [ 2 ] ) { continue } if ( a3 + b3 !== c [ 2 ] [ 2 ] ) { continue } console . log ( " Yes " ) ; return ( 0 ) } } } console . log ( " No " ) } ) ;
inp = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . split ( ' \n ' ) arr = inp . shift ( ) . split ( ' ' ) . map ( a => a * 1 ) . sort ( ( a , b ) => a - b ) console . log ( arr [ 2 ] - arr [ 0 ] )
function Main ( input ) { input = input . split ( ' \n ' ) ; var size = input [ 0 ] ; var i , j , pi , xi , yi , xj , yj , d ; var result = 0 ; for ( i = 1 ; i <= size ; i ++ ) { pi = input [ i ] . split ( ' ' ) ; xi = pi [ 0 ] ; yi = pi [ 1 ] ; for ( j = i + 1 ; j <= size ; j ++ ) { pj = input [ j ] . split ( ' ' ) ; xj = pj [ 0 ] ; yj = pj [ 1 ] ; d = Math . sqrt ( ( xi - xj ) * ( xi - xj ) + ( yi - yj ) * ( yi - yj ) ) result += d ; } } console . log ( result * 2 / size ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) ; B = parseInt ( args [ 1 ] , 10 ) ; C = parseInt ( args [ 2 ] , 10 ) ; X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var x = input . trim ( ) - 0 ; var time = 12 * 60 / 360 * x ; var h = ( time - time % 60 ) / 60 ; var m = time % 60 ; console . log ( h + " " + m ) ;
' use strict ' const main = ( input ) => { const n = parseInt ( input ) console . log ( 800 * n - 200 * Math . floor ( n / 15 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function add ( v ) { return v [ 0 ] + v [ 1 ] ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var inputs = input . trim ( ) ; var items = input . split ( " " ) . map ( ( item ) => { return parseInt ( item ) ; } ) ; items . sort ( ) ; var target = [ 5 , 5 , 7 ] ; var flag = true ; for ( var i = 0 ; i < 3 ; ++ i ) { if ( items [ i ] != target [ i ] ) { flag = false ; break ; } } console . log ( flag ? " YES " : " NO " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; a = ~ ~ input [ 0 ] b = ~ ~ input [ 1 ] console . log ( a < 9 && b < 9 ? " Yay! " : " :( " ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var input = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var x = parseInt ( input [ 0 ] , 10 ) console . log ( Math . pow ( x , 3 ) ) ;
function Main ( input ) { const data = input . split ( " \n " ) . map ( ( val ) => parseInt ( val , 10 ) ) ; const k = data [ 5 ] ; var result = " Yay! " ; for ( var i = 0 ; i < 4 ; i ++ ) { if ( k < data [ 4 ] - data [ i ] ) { result = " :( " ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = i => console . log ( i . split ( ' ' ) . map ( n => parseInt ( n ) ) . map ( ( n , i , arr ) => Math . abs ( arr [ ( i + 1 ) % arr . length ] - n ) ) . sort ( ( a , b ) => a - b ) . slice ( 0 , 2 ) . reduce ( ( prev , curr ) => prev + curr , 0 ) ) main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function main ( input ) { const inputs = input . split ( ' \n ' ) const [ N ] = inputs [ 0 ] . split ( ' ' ) . map ( Number ) const X = inputs [ 1 ] . split ( ' ' ) . map ( Number ) let min = Number . MAX_SAFE_INTEGER for ( let i = 1 ; i <= 100 ; i ++ ) { let sum = 0 for ( let j = 0 ; j < N ; j ++ ) { sum += Math . pow ( X [ j ] - i , 2 ) } if ( sum < min ) min = sum } console . log ( min ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( input ) { const n = Number ( input ) let ans = 0 let tmpmax = 0 if ( n == 1 ) { console . log ( 1 ) return } for ( let i = 1 ; i <= n ; i ++ ) { if ( i % 2 > 0 ) { continue } else { let j = i let cnt = 0 while ( j % 2 == 0 ) { cnt ++ j = j / 2 } if ( tmpmax < cnt ) { tmpmax = cnt ans = i } } } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function main ( input ) { console . log ( input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { console . log ( Math . pow ( chunk , 3 ) ) ; } ) ;
var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout } ) ; rl . on ( ' line ' , function ( n ) { console . log ( n * n * n ) ; } ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var a = [ ] ; for ( var f = 0 ; f < 5 ; f ++ ) { var r = parseInt ( input [ f ] , 10 ) ; a [ f ] = r ; } var total = 0 ; var b = [ ] ; for ( var i = 0 ; i < 5 ; i ++ ) { var l = Math . ceil ( a [ i ] / 10 ) * 10 ; var total = total + l ; } var mm = a [ 0 ] % 10 ; if ( mm == 0 ) { var mm = 10 ; } for ( var i = 0 ; i < 5 ; i ++ ) { var m = a [ i ] % 10 ; if ( m == 0 ) { var m = 10 ; } if ( mm > m ) { var mm = m ; } } console . log ( total - ( 10 - mm ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function Main ( input ) { const Ant = input . split ( " \n " ) . map ( Number ) ; Ant . pop ( ) ; let dist = Ant [ 5 ] ; Ant . pop ( ) ; let result = true ; if ( Ant [ 4 ] - Ant [ 0 ] > dist ) { result = false ; } console . log ( result ? ' Yay! ' : ' :( ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) . split ( " " ) ; var A = parseFloat ( input [ 0 ] ) ; var B = parseFloat ( input [ 1 ] ) ; var H = parseFloat ( input [ 2 ] ) ; var M = parseFloat ( input [ 3 ] ) ; var rad = 6 ; var Hrad = H * 5 * rad + ( 30 * M ) / 60 ; var Mrad = M * rad ; var A2 = Math . pow ( A , 2 ) ; var B2 = Math . pow ( B , 2 ) ; var cos = Math . cos ( ( Hrad - Mrad ) * ( Math . PI / 180 ) ) ; var l = Math . sqrt ( A2 + B2 - 2 * A * B * cos ) ; console . log ( l ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' const main = ( INPUT ) => { const N = INPUT . split ( ' \n ' ) [ 0 ] . split ( ' ' ) let ans = ' NO ' if ( N . indexOf ( ' 1 ' ) >= 0 && N . indexOf ( ' 9 ' ) >= 0 && N . indexOf ( ' 7 ' ) >= 0 && N . indexOf ( ' 4 ' ) >= 0 ) { ans = ' YES ' } console . log ( ans ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
process . stdin . setEncoding ( ' utf-8 ' ) ; process . stdin . on ( ' data ' , function ( data ) { console . log ( data * data * data ) ; } ) ;
for ( t in l = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " \n " ) , c = { 0 : { } , 1 : { } } , l [ 1 ] . split ( " " ) . forEach ( ( s , e ) => { t = c [ 1 & e ] , t [ s ] = t [ s ] ? t [ s ] + 1 : 1 } ) , s = { } , c ) s [ t ] = Object . keys ( c [ t ] ) . sort ( ( s , e ) => c [ t ] [ e ] - c [ t ] [ s ] ) ; g = ( ( t , e ) => s [ t ] [ e ] ? c [ t ] [ s [ t ] [ e ] ] : 0 ) , s [ 0 ] [ 0 ] != s [ 1 ] [ 0 ] && ( s [ 1 ] [ 1 ] = s [ 1 ] [ 0 ] ) , console . log ( l [ 0 ] - Math . max ( g ( 0 , 0 ) + g ( 1 , 1 ) , g ( 0 , 1 ) + g ( 1 , 0 ) ) ) ;
var lines = [ ] ; var readline = require ( ' readline ' ) ; var rl = readline . createInterface ( { input : process . stdin , output : process . stdout , } ) ; rl . on ( ' line ' , function ( x ) { lines . push ( x ) ; } ) ; rl . on ( ' close ' , function ( ) { var A = Number ( lines [ 0 ] . split ( " " ) [ 0 ] ) ; var B = Number ( lines [ 0 ] . split ( " " ) [ 1 ] ) ; var C = Number ( lines [ 0 ] . split ( " " ) [ 2 ] ) ; if ( A + B >= C ) { console . log ( " Yes " ) } else { console . log ( " No " ) } } ) ;
function main ( input ) { let [ av , bw , t ] = input . trim ( ) . split ( ' \n ' ) let [ a , v ] = av . split ( ' ' ) . map ( n => Number ( n ) ) let [ b , w ] = bw . split ( ' ' ) . map ( n => Number ( n ) ) const dist = Math . abs ( a - b ) const speed = v - w const is_catchable = ( speed > 0 ) && ( dist / speed <= Number ( t ) ) console . log ( is_catchable ? ' YES ' : ' NO ' ) } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . trim ( ) . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) ; if ( list . indexOf ( " Y " ) != - 1 ) { myout ( " Four " ) ; } else { myout ( " Three " ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) lines . shift ( ) lines . pop ( ) l = lines . map ( ( x , i ) => { a = x . split ( ' ' ) . map ( x => x * 1 ) a . i = i return a } ) . sort ( ( a , b ) => { return a [ 0 ] == b [ 0 ] ? a [ 1 ] - b [ 1 ] : a [ 0 ] - b [ 0 ] } ) arr = [ ] y = ' ' for ( i = 0 ; i < l . length ; i ++ ) { if ( y != l [ i ] [ 0 ] ) { j = 1 y = l [ i ] [ 0 ] } arr [ l [ i ] . i ] = ( ' 000000 ' + l [ i ] [ 0 ] ) . slice ( - 6 ) + ( ' 000000 ' + j ) . slice ( - 6 ) j ++ } console . log ( arr . join ( ' \n ' ) )
function myout ( text ) { console . log ( text ) ; } function Main ( input ) { input = input . split ( " \n " ) ; var list = input [ 1 ] . split ( " " ) . map ( ( a ) => Number ( a ) ) ; myout ( Math . max . apply ( null , list ) - Math . min . apply ( null , list ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' ' ) . map ( v => Number ( v ) ) const k = input [ 0 ] const s = input [ 1 ] let count = 0 for ( let xi = 0 ; xi <= k ; xi ++ ) { for ( let yi = 0 ; yi <= k ; yi ++ ) { const tmp = s - ( xi + yi ) if ( tmp >= 0 && tmp <= k ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
" use strict " function Main ( input ) { let args = input . split ( " \n " ) ; let NM = args [ 0 ] . split ( " " ) ; let N = parseInt ( NM [ 0 ] , 10 ) ; let M = parseInt ( NM [ 1 ] , 10 ) ; args . shift ( ) ; args . pop ( ) ; let citys = args . map ( ( e , i ) => { let cityInfo = e . split ( " " ) . map ( e => parseInt ( e ) ) ; return [ i , cityInfo [ 0 ] , cityInfo [ 1 ] ] } ) ; citys . sort ( ( a , b ) => ( a [ 2 ] - b [ 2 ] ) ) ; let countryCount = Array ( N + 1 ) . fill ( 1 ) ; citys . forEach ( ( e ) => { e [ 3 ] = ( ' 000000 ' + e [ 1 ] ) . slice ( - 6 ) + ( ' 000000 ' + countryCount [ e [ 1 ] ] ) . slice ( - 6 ) ; countryCount [ e [ 1 ] ] ++ ; } ) ; citys . sort ( ( a , b ) => ( a [ 0 ] - b [ 0 ] ) ) ; let result = ' ' ; citys . forEach ( e => result += ( e [ 3 ] + ' \n ' ) ) ; console . log ( result . trim ( ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' ; const main = input => { const n = parseInt ( input [ 0 ] ) ; const p = input [ 1 ] . split ( ' ' ) . map ( val => parseInt ( val ) ) ; const mins = [ ] ; mins [ 0 ] = p [ 0 ] ; let ans = 1 ; for ( let i = 1 ; i < n ; i ++ ) { mins [ i ] = mins [ i - 1 ] > p [ i ] ? p [ i ] : mins [ i - 1 ] ; if ( mins [ i ] == p [ i ] ) ans ++ ; } console . log ( ans ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( ' \n ' ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const A = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const B = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( 13 > A && A >= 6 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( ' ' ) ; if ( input [ 0 ] <= 8 & input [ 1 ] <= 8 ) { console . log ( ' Yay! ' ) ; } else { console . log ( ' :( ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var A = parseInt ( input . split ( " " ) [ 0 ] , 10 ) ; var B = parseInt ( input . split ( " " ) [ 1 ] , 10 ) ; if ( A >= 13 ) { console . log ( B ) ; } else if ( A >= 6 && A <= 12 ) { console . log ( B / 2 ) ; } else { console . log ( 0 ) ; } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; const numList = input . map ( x => parseInt ( x , 10 ) ) ; const biggestNum = numList [ 4 ] ; const smallestNum = numList [ 0 ] ; const k = numList [ 5 ] ; if ( smallestNum + k < biggestNum ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; var input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ; var cin = input . split ( / |\n / ) , cid = 0 ; function next ( a ) { return a ? cin [ cid ++ ] : + cin [ cid ++ ] ; } function nexts ( n , a ) { return a ? cin . slice ( cid , cid += n ) : cin . slice ( cid , cid += n ) . map ( a => + a ) ; } function nextm ( h , w , a ) { var r = [ ] , i = 0 ; if ( a ) for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) ) ; else for ( ; i < h ; i ++ ) r . push ( cin . slice ( cid , cid += w ) . map ( a => + a ) ) ; return r ; } function xArray ( v ) { var a = arguments , l = a . length , r = " Array(a[ " + -- l + " ]).fill().map(x=>{return " + v + " ;}) " ; while ( -- l ) r = " Array(a[ " + l + " ]).fill().map(x=> " + r + " ) " ; return eval ( r ) ; } var myOut = main ( ) ; if ( myOut !== undefined ) console . log ( myOut ) ; function main ( ) { var n = next ( ) ; var x = nexts ( n ) ; var ans = 1e9 ; for ( var i = 1 ; i <= 100 ; i ++ ) { var sum = 0 ; for ( var j = 0 ; j < n ; j ++ ) { var t = i - x [ j ] ; sum += t * t ; } if ( sum < ans ) ans = sum ; } return ans ; }
function main ( input ) { var args = input . split ( " \n " ) ; var a = parseInt ( args [ 0 ] , 10 ) ; var b = parseInt ( args [ 1 ] , 10 ) ; var c = parseInt ( args [ 2 ] , 10 ) ; var d = parseInt ( args [ 3 ] , 10 ) ; var e = parseInt ( args [ 4 ] , 10 ) ; var num = [ a , b , c , d , e ] ; for ( i = 0 ; i < num . length ; i ++ ) { if ( num [ i ] % 10 == 0 ) { num [ i ] = num [ i ] - 1 ; } } var a_1 = num [ 0 ] % 10 ; var b_1 = num [ 1 ] % 10 ; var c_1 = num [ 2 ] % 10 ; var d_1 = num [ 3 ] % 10 ; var e_1 = num [ 4 ] % 10 ; var a_min = parseInt ( ( a - 1 ) / 10 ) * 10 + 10 ; var b_min = parseInt ( ( b - 1 ) / 10 ) * 10 + 10 ; var c_min = parseInt ( ( c - 1 ) / 10 ) * 10 + 10 ; var d_min = parseInt ( ( d - 1 ) / 10 ) * 10 + 10 ; var e_min = parseInt ( ( e - 1 ) / 10 ) * 10 + 10 ; var min = Math . min ( a_1 , b_1 , c_1 , d_1 , e_1 ) ; if ( min == a_1 ) { console . log ( a + b_min + c_min + d_min + e_min ) ; } else if ( min == b_1 ) { console . log ( a_min + b + c_min + d_min + e_min ) ; } else if ( min == c_1 ) { console . log ( a_min + b_min + c + d_min + e_min ) ; } else if ( min == d_1 ) { console . log ( a_min + b_min + c_min + d + e_min ) ; } else if ( min == e_1 ) { console . log ( a_min + b_min + c_min + d_min + e ) ; } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { const lines = input . split ( " \n " ) ; const params = lines [ 0 ] . split ( " " ) ; var a = parseInt ( params [ 0 ] , 10 ) ; var b = parseInt ( params [ 1 ] , 10 ) ; const result = ( a > 12 ) ? b : ( a > 5 ) ? b / 2 : 0 ; console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var input = ' ' ; var readable = process . stdin ; readable . resume ( ) ; readable . setEncoding ( ' utf-8 ' ) ; readable . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; readable . on ( ' end ' , function ( ) { var data = input . split ( " \n " ) ; var output = [ ] ; for ( var i = 0 ; i < data . length ; i ++ ) { var nums = data [ i ] . split ( ' ' ) . map ( Number ) ; if ( 0 == nums [ 0 ] ) { break ; } var sum = 0 ; for ( var j = 0 ; j < nums . length ; j ++ ) { sum += nums [ j ] ; } output . push ( sum ) ; } console . log ( output . join ( ' \n ' ) ) ; } ) ;
function D166 ( _input ) { var lines = _input . split ( " \n " ) ; var x = lines . shift ( ) * 1 ; for ( var i = 119 ; i > - 118 ; i -- ) { for ( var j = 118 ; j > - 119 ; j -- ) { const fi = i * i * i * i * i ; const fj = j * j * j * j * j ; if ( fi - fj === x ) { console . log ( ` ${ i } ${ j } ` ) ; return ; } } } } D166 ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg . slice ( 5 , 6 ) ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; for ( let i = 0 ; i < antennas . length ; i ++ ) { for ( let j = i + 1 ; j < antennas . length ; j ++ ) { if ( antennas [ j ] - antennas [ i ] > k ) { console . log ( " :( " ) ; return ; } } } console . log ( " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' const main = ( input ) => { input = input . split ( ' \n ' ) let temp = input [ 0 ] . split ( ' ' ) . map ( i => parseInt ( i ) ) const N = temp [ 0 ] const M = temp [ 1 ] temp = input . slice ( 1 , M + 1 ) let arr = [ ] let aMap = new Map temp . forEach ( ( v ) => { let tmp = v . split ( ' ' ) . map ( i => parseInt ( i ) ) aMap . set ( tmp [ 1 ] , 0 ) if ( arr [ tmp [ 0 ] ] === undefined ) { arr [ tmp [ 0 ] ] = [ ] } arr [ tmp [ 0 ] ] . push ( tmp [ 1 ] ) } ) arr . forEach ( ( v , i ) => { v . sort ( ( a , b ) => a - b ) v . forEach ( ( num , j ) => { let def = ( ' 000000 ' + i . toString ( 10 ) ) . slice ( - 6 ) + ( ' 000000 ' + ( j + 1 ) . toString ( 10 ) ) . slice ( - 6 ) aMap . set ( num , def ) } ) } ) aMap . forEach ( val => console . log ( val ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
function Main ( input ) { console . log ( Math . pow ( parseInt ( input . split ( " \n " ) ) , 3 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( input ) { input = input . trim ( ) . split ( ' \n ' ) . map ( v => v . split ( ' ' ) ) const N = parseInt ( input [ 0 ] [ 0 ] , 10 ) const D = parseInt ( input [ 0 ] [ 1 ] , 10 ) const p = input . slice ( 1 ) let count = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { let sum = 0 for ( let k = 0 ; k < D ; k ++ ) { sum += Math . pow ( p [ i ] [ k ] - p [ j ] [ k ] , 2 ) } if ( Number . isInteger ( Math . sqrt ( sum ) ) ) count ++ } } console . log ( count ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input . trim ( ) ; input = input . split ( " \n " ) ; var N = input [ 0 ] ; var arr = input [ 1 ] . split ( " " ) . map ( Number ) ; var ans = 0 ; var low = 9999999999999999 ; for ( var i = 0 ; i < N ; i ++ ) { if ( low >= arr [ i ] ) { ans ++ ; low = arr [ i ] ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ) ; function arr1dto2d ( arr ) { for ( var i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = arr [ i ] . split ( " " ) . map ( Number ) ; } return arr ; }
' use strict ' ; var _slicedToArray = function ( ) { function sliceIterator ( arr , i ) { var _arr = [ ] ; var _n = true ; var _d = false ; var _e = undefined ; try { for ( var _i = arr [ Symbol . iterator ] ( ) , _s ; ! ( _n = ( _s = _i . next ( ) ) . done ) ; _n = true ) { _arr . push ( _s . value ) ; if ( i && _arr . length === i ) break ; } } catch ( err ) { _d = true ; _e = err ; } finally { try { if ( ! _n && _i [ " return " ] ) _i [ " return " ] ( ) ; } finally { if ( _d ) throw _e ; } } return _arr ; } return function ( arr , i ) { if ( Array . isArray ( arr ) ) { return arr ; } else if ( Symbol . iterator in Object ( arr ) ) { return sliceIterator ( arr , i ) ; } else { throw new TypeError ( " Invalid attempt to destructure non-iterable instance " ) ; } } ; } ( ) ; var fs = require ( ' fs ' ) ; var input = Buffer . alloc ( 0x10000 ) ; fs . readSync ( 0 , input , 0 , 0x10000 ) ; var _input$toString$split = input . toString ( ) . split ( ' \n ' ) . map ( function ( n ) { return parseInt ( n ) ; } ) , _input$toString$split2 = _slicedToArray ( _input$toString$split , 4 ) , A = _input$toString$split2 [ 0 ] , B = _input$toString$split2 [ 1 ] , C = _input$toString$split2 [ 2 ] , X = _input$toString$split2 [ 3 ] ; var answer = 0 ; for ( var a = 0 ; a <= Math . min ( Math . floor ( X / 500 ) , A ) ; a ++ ) { var remnantA = X - 500 * a ; for ( var b = 0 ; b <= Math . min ( Math . floor ( remnantA / 100 ) , B ) ; b ++ ) { var remnantB = remnantA - 100 * b ; if ( remnantB >= 0 && remnantB <= C * 50 ) { answer ++ ; } } } console . log ( answer ) ;
function main ( input ) { const N = input . split ( ' \n ' ) [ 0 ] ; var a = input . split ( ' \n ' ) [ 1 ] . split ( ' ' ) . map ( function ( e ) { return Number ( e ) ; } ) . sort ( function ( a , b ) { return a - b ; } ) ; ans = a [ N - 1 ] - a [ 0 ] ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { var str = input ; var ans = 0 ; var str = str . split ( " \n " ) [ 0 ] ; var num = str . split ( " " ) ; var a = Number ( num [ 0 ] ) ; var b = Number ( num [ 1 ] ) ; var h = Number ( num [ 2 ] ) ; var m = Number ( num [ 3 ] ) ; var dega = 0.5 * ( m + 60 * h ) ; var degb = 6 * m ; var rada = dega * ( Math . PI / 180 ) ; var radb = degb * ( Math . PI / 180 ) ; var ax = a * Math . sin ( rada ) ; var ay = a * Math . cos ( rada ) ; var bx = b * Math . sin ( radb ) ; var by = b * Math . cos ( radb ) ; ans = Math . sqrt ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) ) ; ans = Math . round ( ans * ( 10 ** 10 ) ) / ( 10 ** 10 ) ; console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { console . log ( input * input ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var stdin = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var inputs = stdin . toString ( ) . trim ( ) ; var x = parseInt ( inputs , 10 ) ; console . log ( x * x * x ) ;
function Main ( input ) { input = input . split ( " \n " ) ; if ( input [ input . length - 1 ] === " " ) { input . pop ( ) ; } var min = 10 ; var total = 0 ; for ( var i = 0 ; i < input . length ; i ++ ) { var r = input [ i ] % 10 ; if ( r > 0 && r < min ) { min = r ; } total += ( Math . ceil ( input [ i ] / 10 ) * 10 ) ; } if ( min < 10 ) { total = total - 10 + min ; } console . log ( total ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { var line1 = input [ 0 ] . split ( ' ' ) ; var n = parseInt ( line1 [ 0 ] ) ; var p = parseInt ( line1 [ 1 ] ) ; var ans = 1 ; var arr = primeFactorization ( p ) ; for ( var i = 0 ; i < arr . length ; i ++ ) { var r = arr [ i ] . r ; while ( n <= r ) { ans *= arr [ i ] . num ; r = r - n ; } } console . log ( ans ) ; } function parse ( line ) { var ret = [ ] ; var arr = line . split ( ' ' ) ; for ( var i = 0 ; i < arr . length ; i ++ ) { ret . push ( parseInt ( arr [ i ] ) ) ; } return ret ; } function primeFactorization ( n ) { var s = Math . floor ( Math . sqrt ( n ) ) ; var r = 0 ; var result = [ ] ; for ( var i = 2 ; i <= s ; i ++ ) { if ( ( n % i ) == 0 ) { r = 0 ; do { r ++ ; n = n / i ; } while ( ( n % i ) == 0 ) ; result . push ( { num : i , r : r } ) ; } } if ( n > s ) { result . push ( { num : n , r : 1 } ) ; } return result ; } var input = ' ' ; process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( chunk ) { input += chunk ; } ) ; process . stdin . on ( ' end ' , function ( ) { input = input . split ( ' \n ' ) ; main ( input ) ; } ) ;
" use strict " ; const main = arg => { arg = arg . trim ( ) . split ( " \n " ) ; const K = parseInt ( arg [ 0 ] . split ( " " ) [ 0 ] ) ; const S = parseInt ( arg [ 0 ] . split ( " " ) [ 1 ] ) ; let answer = 0 ; for ( let i = 0 ; i <= K ; i ++ ) { for ( let j = 0 ; j <= K ; j ++ ) { let X = i ; let Y = j ; if ( i + j > S ) continue ; if ( S - ( i + j ) <= K ) { answer ++ ; } } } console . log ( answer ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function Main ( input ) { let arr = input . split ( " \n " ) [ 0 ] . split ( " " ) ; let ans = 0 ; if ( arr [ 1 ] != 1 ) { ans = arr [ 0 ] - arr [ 1 ] ; } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
" use strict " ; const main = arg => { arg = arg . split ( " \n " ) ; const k = parseInt ( arg [ 5 ] ) ; const antennas = arg . slice ( 0 , 5 ) . map ( n => parseInt ( n ) ) ; console . log ( antennas [ 4 ] - antennas [ 0 ] > k ? " :( " : " Yay! " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
const main = ( input ) => { let [ S , L , H , M ] = input . trim ( ) . split ( ' ' ) . map ( Number ) H = H % 12 M = M % 60 const l_angle = 360 * ( M / 60 ) const s_angle = 360 * ( H / 12 ) + ( 30 * ( M / 60 ) ) if ( Math . abs ( s_angle - l_angle === 180 ) ) return console . log ( S + L ) const dif = Math . abs ( s_angle - l_angle ) let angle = dif > 180 ? 360 - ( dif ) : dif angle = angle * Math . PI / 180 return console . log ( Math . sqrt ( ( S ** 2 ) + ( L ** 2 ) - ( 2 * S * L * Math . cos ( angle ) ) ) ) } process . env . MYTEST ? test ( ) : main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
' use strict ' const main = ( input ) => { const a = parseInt ( input . split ( ' ' ) [ 0 ] ) const b = parseInt ( input . split ( ' ' ) [ 1 ] ) console . log ( Math . ceil ( ( a + b ) / 2 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) )
( function ( stdin ) { ' use strict ' ; var inputs = stdin . toString ( ) . trim ( ) . split ( ' \n ' ) ; var lines = inputs . map ( function ( v ) { return v . split ( ' ' ) . map ( Number ) ; } ) ; var result = ( function ( lines ) { return lines . map ( function ( v ) { return v . reduce ( function add ( a , b ) { return a + b ; } ) ; } ) . join ( ' \n ' ) ; } ) ( lines ) ; console . log ( result ) ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
let [ a , b , c ] = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( " " ) . map ( Number ) ; console . log ( a + b >= c ? " Yes " : " No " ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var K = parseInt ( line [ 0 ] ) ; var S = parseInt ( line [ 1 ] ) ; var roop = Math . min ( K , S ) ; var ans = 0 ; for ( var A = 0 ; A <= roop ; A ++ ) { if ( S - K - A >= 0 && 2 * K - S + A + 1 > 0 ) { ans += 2 * K - S + A + 1 ; } else if ( S - K - A < 0 && S - A + 1 > 0 ) { ans += S - A + 1 ; } } console . log ( ans ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const inputNumbers = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . split ( / \s / ) . map ( Number ) ; console . log ( Math . ceil ( ( inputNumbers [ 0 ] + inputNumbers [ 1 ] ) / 2 ) ) ;
function main ( input ) { input = input . split ( ' ' ) . map ( x => Number ( x ) ) if ( Math . max ( input [ 0 ] , input [ 1 ] ) > 8 ) { console . log ( ' :( ' ) } else { console . log ( ' Yay! ' ) } } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const Debug = function ( ) { const stdin = function ( text ) { } ; return stdin ; } ; const Release = function ( ) { const fs = require ( ' fs ' ) ; const stdin = function ( text ) { if ( text ) console . log ( text ) ; return fs . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; } return stdin ; } ; const debug = false ; const stdin = debug ? Debug ( ) : Release ( ) ; const input = stdin ( ) . split ( ' \n ' ) . map ( x => parseInt ( x ) ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; const C = input [ 2 ] ; const X = input [ 3 ] ; var z = [ ] ; for ( var i = 0 ; i <= Math . floor ( X / 500 ) ; i ++ ) { var _a = X - i * 500 ; for ( var j = 0 ; j <= Math . floor ( _a / 100 ) ; j ++ ) { var _b = _a - j * 100 ; var _c = _b / 50 ; z . push ( { a : i , b : j , c : _c } ) ; } } console . log ( z . filter ( x => x . a <= A && x . b <= B && x . c <= C ) . length ) ;
console . log ( ( args => { const [ [ N , M ] , ... tmp ] = args . trim ( ) . split ( ' \n ' ) . map ( r => r . split ( ' ' ) . map ( v => v | 0 ) ) ; const p = Array . from ( { length : N } , _ => [ ] ) ; for ( let i = 0 ; i < M ; i ++ ) { const [ P , Y ] = tmp [ i ] ; p [ P - 1 ] . push ( [ i , Y ] ) ; } p . forEach ( r => r . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ) ; const a = Array . from ( tmp , ( [ p ] ) => ` ${ p } ` . padStart ( 6 , 0 ) ) ; p . forEach ( r => r . forEach ( ( [ i ] , j ) => a [ i ] += ` ${ j + 1 } ` . padStart ( 6 , 0 ) ) ) return a . join ` \n ` ; } ) ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
function cube ( input ) { var x = parseInt ( input ) ; console . log ( x * x * x ) ; } input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) cube ( input )
function main ( input ) { var str = input . split ( " " ) ; var fee ; if ( 13 <= str [ 0 ] ) { fee = str [ 1 ] ; } else if ( 6 <= str [ 0 ] && str [ 0 ] < 13 ) { fee = str [ 1 ] / 2 ; } else { fee = 0 ; } console . log ( fee ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; const main = ( input ) => { const args = input . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) ; const coinA = args [ 0 ] ; const coinB = args [ 1 ] ; const coinC = args [ 2 ] ; const x = args [ 3 ] ; let count = 0 ; for ( let i = 0 ; i <= coinA ; i ++ ) { for ( let e = 0 ; e <= coinB ; e ++ ) { for ( let f = 0 ; f <= coinC ; f ++ ) if ( i * 500 + e * 100 + f * 50 === x ) { count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) const N = Number ( inp . shift ( ) ) const X = inp [ 0 ] . split ( ' ' ) . map ( n => Number ( n ) ) ; let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { sum += X [ i ] } let ave = Math . round ( sum / N ) let cost = 0 for ( let i = 0 ; i < N ; i ++ ) { cost += Math . pow ( X [ i ] - ave , 2 ) } console . log ( cost ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( s ) { s = s . split ( " " ) ; var c = [ 0 , 0 ] ; for ( var i = 0 ; i < 3 ; i ++ ) { s [ i ] = parseInt ( s [ i ] ) ; if ( s [ i ] == 5 ) c [ 0 ] ++ ; if ( s [ i ] == 7 ) c [ 1 ] ++ ; } console . log ( ( c [ 0 ] == 2 && c [ 1 ] == 1 ) ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { args = input . split ( " \n " ) ; a = parseInt ( args [ 0 ] , 10 ) ; b = parseInt ( args [ 1 ] , 10 ) ; c = parseInt ( args [ 2 ] , 10 ) ; d = parseInt ( args [ 3 ] , 10 ) ; p = 0 ; for ( var i = 0 ; i <= a ; i ++ ) { if ( 500 * i > d ) break ; for ( var j = 0 ; j <= b ; j ++ ) { if ( 500 * i + 100 * j > d ) break ; for ( var k = 0 ; k <= c ; k ++ ) { if ( ( 500 * i + 100 * j + 50 * k ) == d ) p += 1 ; } } } console . log ( p ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , { encoding : ' utf8 ' } ) )
var input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; var arr = input . trim ( ) . split ( " " ) . map ( Number ) ; var [ a , b , c , d ] = arr . sort ( ( a , b ) => b - a ) ; console . log ( Math . abs ( ( a + d ) - ( b + c ) ) ) ;
" use strict " function consume ( x , p ) { return Math . pow ( ( x - p ) , 2 ) ; } function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; const N = Number ( input [ 0 ] ) ; const X = input [ 1 ] . split ( ' ' ) . map ( Number ) ; const M = X . length ; let ret = [ ] ; for ( let p = 1 ; p <= 101 ; p ++ ) { let tmp = 0 ; for ( let i = 0 ; i < M ; i ++ ) { tmp += consume ( X [ i ] , p ) ; } ret . push ( tmp ) ; } console . log ( Math . min ( ... ret ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { input = input . split ( " \n " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; var c = parseInt ( input [ 2 ] , 10 ) ; var d = parseInt ( input [ 3 ] , 10 ) ; var e = parseInt ( input [ 4 ] , 10 ) ; var k = parseInt ( input [ 5 ] , 10 ) ; var ans = " Yay! " ; if ( e - a > k ) { ans = " :( " ; } console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( calc ( x ) ) ; } ) ; function calc ( x ) { parseInt ( x . trim ( ) , 10 ) return x * x * x ; }
process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( x * x * x ) ; } ) ;
function main ( input ) { const lines = input . split ( / \n / ) ; const coin500 = parseInt ( lines [ 0 ] ) ; const coin100 = parseInt ( lines [ 1 ] ) ; const coin50 = parseInt ( lines [ 2 ] ) ; const goal = parseInt ( lines [ 3 ] ) ; var count = 0 ; for ( var i = 0 ; i <= coin500 ; i ++ ) { for ( var j = 0 ; j <= coin100 ; j ++ ) { for ( var k = 0 ; k <= coin50 ; k ++ ) { if ( i * 500 + j * 100 + k * 50 === goal ) { count ++ ; } } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
" use strict " ; const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; const x = parseInt ( input [ 0 ] ) ; for ( let a = - 120 ; a <= 120 ; a ++ ) { for ( let b = - 120 ; b <= 120 ; b ++ ) { let tmp = a * a * a * a * a - b * b * b * b * b if ( x === tmp ) { console . log ( ` ${ a } ${ b } ` ) return } } } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var line = input [ 0 ] . split ( " " ) ; var max = parseInt ( line [ 0 ] ) ; var sum = parseInt ( line [ 1 ] ) ; var count = 0 ; for ( var x = 0 ; x <= max ; x ++ ) { for ( var y = 0 ; y <= max ; y ++ ) { var z = sum - ( x + y ) ; if ( z >= 0 && z <= max ) { count ++ ; } } } console . log ( count ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { var input_arr = input . split ( " \n " ) ; var s = input_arr [ 0 ] ; if ( s <= " 2019/04/30 " ) { console . log ( " Heisei " ) } else { console . log ( " TBD " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { let [ a , b , h , m ] = input [ 0 ] . trim ( ) . split ( " " ) . map ( i => parseInt ( i ) ) ; const p = [ ( h * 5 * 6 ) + 30 / 60 * m , m * 6 ] ; const diff = Math . max ( ... p ) - Math . min ( ... p ) ; const rad = Math . min ( diff , 360 - diff ) * Math . PI / 180 ; const cosine = Math . cos ( rad ) ; const result = a * a + b * b - ( 2 * a * b * cosine ) ; console . log ( Math . sqrt ( result ) ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) . trim ( ) . split ( " \n " ) ) ;
function main ( a ) { console . log ( a * 800 - ~ ~ ( a / 15 ) * 200 ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
input = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) lines = input . split ( ' \n ' ) S = lines . shift ( ) console . log ( new Date ( S ) < new Date ( ' 2019/05/01 ' ) ? ' Heisei ' : ' TBD ' )
var i = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ; console . log ( i * i * i ) ;
' use strict ' ; const X = require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) - 0 ; const pow = Math . pow function main ( ) { for ( let A = 150 ; A ; A -- ) for ( let B = A ; A + B ; B -- ) if ( pow ( A , 5 ) - pow ( B , 5 ) === X ) { console . log ( A + ' ' + B ) ; return ; } } main ( ) ;
" use strict " ; const input = require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) . trim ( ) ; const inputs = input . split ( " \n " ) . map ( i => + i ) ; const round = ( n ) => { return Math . ceil ( n / 10 ) * 10 ; } const diff = ( n ) => round ( n ) - n ; const exec = ( inputs ) => { const sorted = inputs . sort ( ( a , b ) => diff ( b ) - diff ( a ) ) ; let time = 0 ; let first = false ; for ( let i = 0 ; i < inputs . length ; i ++ ) { if ( diff ( sorted [ i ] ) === 0 ) { time += sorted [ i ] ; continue ; } if ( ! first ) { time += sorted [ i ] ; first = true ; continue ; } time += round ( sorted [ i ] ) ; } return time ; } console . log ( exec ( inputs ) ) ;
' use strict ' function main ( input ) { const args = input . split ( ' \n ' ) ; const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; let count = 0 ; for ( let a = 0 ; a <= A ; ++ a ) { for ( let b = 0 ; b <= B ; ++ b ) { for ( let c = 0 ; c <= C ; ++ c ) { if ( ( a * 500 ) + ( b * 100 ) + ( c * 50 ) === X ) count ++ ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function zero_padding_number ( num ) { return ( ' 000000 ' + num . toString ( ) ) . slice ( - 6 ) ; } function main ( input ) { const lines = input . split ( ' \n ' ) ; const N = parseInt ( lines [ 0 ] . split ( ' ' ) [ 0 ] ) ; const M = parseInt ( lines [ 0 ] . split ( ' ' ) [ 1 ] ) ; var pys = [ ] ; for ( var i = 0 ; i < M ; i ++ ) { var line = lines [ 1 + i ] . split ( ' ' ) . map ( x => parseInt ( x ) ) pys . push ( [ i , line [ 0 ] , line [ 1 ] ] ) ; } var p_y_sorted = pys . sort ( function ( a , b ) { if ( a [ 1 ] == b [ 1 ] ) { return a [ 2 ] - b [ 2 ] ; } return a [ 1 ] - b [ 1 ] ; } ) var current_p = 0 ; var current_city_index = 1 ; for ( var i = 0 ; i < p_y_sorted . length ; i ++ ) { var current_city = p_y_sorted [ i ] ; if ( current_p != current_city [ 1 ] ) { current_p = current_city [ 1 ] current_city_index = 1 ; } var id = zero_padding_number ( current_city [ 1 ] ) + zero_padding_number ( current_city_index ) ; p_y_sorted [ i ] . push ( id ) ; current_city_index ++ ; } const stdin_sorted_cities = p_y_sorted . sort ( function ( a , b ) { return a [ 0 ] - b [ 0 ] ; } ) for ( var i = 0 ; i < M ; i ++ ) { console . log ( stdin_sorted_cities [ i ] [ 3 ] ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
( function ( stdin ) { var lines = stdin . toString ( ) . split ( ' \n ' ) ; var x = parseInt ( lines [ 0 ] , 10 ) ; console . log ( x * x * x ) ; } ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ) ;
" use strict " ; const main = arg => { const input = arg . trim ( ) . split ( " \n " ) ; const a = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; const b = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; const h = parseInt ( input [ 0 ] . split ( " " ) [ 2 ] ) ; const m = parseInt ( input [ 0 ] . split ( " " ) [ 3 ] ) ; let angS = 360 * m / 60 let angL = 360 * 5 * h / 60 + 360 / 12 * m / 60 const diff = angS > angL ? angS - angL : angL - angS const rad = diff * Math . PI / 180 let x = Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) console . log ( x ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
var fs = require ( ' fs ' ) , length = fs . fstatSync ( process . stdin . fd ) . size , buffer = new Buffer ( length ) , bytesRead = fs . readSync ( process . stdin . fd , buffer , 0 , length , 0 ) , input = buffer . toString ( ' utf8 ' , 0 , bytesRead ) . split ( ' \n ' ) ; main ( ) ; function transTime ( t ) { var temp = t . split ( ' : ' ) ; return + temp [ 0 ] * 60 + + temp [ 1 ] ; } function main ( ) { var temp = input [ 0 ] . split ( ' ' ) , n = + temp [ 0 ] , t = + temp [ 1 ] ; temp = input [ 1 ] . split ( ' ' ) ; var time1 = transTime ( temp [ 0 ] ) , sta1 = temp [ 1 ] , time2 = transTime ( temp [ 2 ] ) , sta2 = temp [ 3 ] , ans = [ ] ; for ( var i = 2 ; i <= n ; i ++ ) { temp = input [ i ] . split ( ' ' ) ; time1 = transTime ( temp [ 0 ] ) ; if ( t <= time1 - time2 ) { ans . push ( [ sta2 , time1 - time2 ] ) ; } sta1 = temp [ 1 ] ; time2 = transTime ( temp [ 2 ] ) ; sta2 = temp [ 3 ] ; } console . log ( ans . length ) ; for ( i = 0 ; i < ans . length ; i ++ ) { console . log ( ans [ i ] [ 0 ] + ' ' + ans [ i ] [ 1 ] ) } }
function * main ( ) { const N = parseInt ( ( yield ) , 10 ) ; const P = ( yield ) . split ( " " ) . map ( s => parseInt ( s , 10 ) ) ; let m = 200001 , ans = 0 ; for ( let p of P ) { if ( p < m ) ans ++ ; m = Math . min ( m , p ) ; } console . log ( ans ) ; } const iter = main ( ) ; iter . next ( ) ; require ( " readline " ) . createInterface ( { input : process . stdin , output : process . stdout } ) . on ( " line " , line => iter . next ( line ) ) ;
function Main ( input ) { var an = input . split ( " \n " ) ; var k = an [ 5 ] ; an . pop ( ) ; for ( i = 0 ; i <= 4 ; i ++ ) { an [ i ] = parseInt ( an [ i ] , 10 ) ; } for ( j = 0 ; j <= 4 ; j ++ ) { for ( s = 0 ; s <= 4 ; s ++ ) { if ( j <= s ) { continue ; } else { var dist = Math . abs ( an [ j ] - an [ s ] ) ; var judge = dist <= k ; if ( judge == false ) { console . log ( " :( " ) ; break ; } if ( judge == true && j == 4 && s == 3 ) { console . log ( " Yay! " ) ; } } } if ( judge == false ) { break ; } } } Main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; const a = parseInt ( input [ 0 ] , 10 ) ; const b = parseInt ( input [ 1 ] , 10 ) ; const h = parseInt ( input [ 2 ] , 10 ) ; const m = parseInt ( input [ 3 ] , 10 ) ; const ratioH = 30 * h + ( 1 / 2 ) * m ; const ratioM = 6 * m ; const rad = Math . abs ( ratioH - ratioM ) * ( 2 * Math . PI ) / 360 ; console . log ( Math . sqrt ( a * a + b * b - 2 * a * b * Math . cos ( rad ) ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const list = input . split ( " " ) . map ( v => Number ( v ) ) ; const result = { true : " YES " , false : " NO " } ; const is575 = list => { const syllable575 = new Map ( ) ; syllable575 . set ( 5 , 2 ) ; syllable575 . set ( 7 , 1 ) ; for ( const syllable of syllable575 . keys ( ) ) { if ( list . filter ( v => v === syllable ? true : false ) . length !== syllable575 . get ( syllable ) ) { return ( false ) ; } } return ( true ) ; } console . log ( result [ is575 ( list ) ] ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = Number ( input [ 0 ] ) ; var b = Number ( input [ 1 ] ) ; console . log ( Math . ceil ( ( a + b ) / 2 ) ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
const main = ( args ) => { const input = args . trim ( ) . split ( ' ' ) ; const A = input [ 0 ] ; const B = input [ 1 ] ; const H = input [ 2 ] ; const M = input [ 3 ] ; const c = ( H / 12.0 + M / ( 12.0 * 60.0 ) - M / 60.0 ) * Math . PI * 2 ; const ans = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) - ( 2 * A * B ) * Math . cos ( c ) ) ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf-8 ' ) ) ;
function main ( input ) { const inArray = input . trim ( ) . split ( ' ' ) . map ( x => parseInt ( x ) ) ; console . log ( inArray [ 0 ] >= 13 ? inArray [ 1 ] : inArray [ 0 ] >= 6 ? inArray [ 1 ] / 2 : 0 ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function parse ( input ) { return input . trim ( ) . split ( " " ) . map ( item => parseInt ( item , 10 ) ) } function f ( arr ) { return arr . sort ( ( a , b ) => b - a ) . reduce ( ( acc , n , i , arr ) => acc + ( i === 0 ? 0 : arr [ i - 1 ] - arr [ i ] ) , 0 ) } module . exports = { parse , f , } function Main ( input ) { const arr = parse ( input ) console . log ( f ( arr ) ) } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) )
" use strict " function Main ( input ) { input = input . trim ( ) . split ( ' \n ' ) ; let h = input [ 0 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let m = input [ 1 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let l = input [ 2 ] . trim ( ) . split ( ' ' ) . map ( Number ) ; let x = [ m [ 0 ] - h [ 0 ] , m [ 1 ] - h [ 1 ] , m [ 2 ] - h [ 2 ] ] let y = [ l [ 0 ] - m [ 0 ] , l [ 1 ] - m [ 1 ] , l [ 2 ] - m [ 2 ] ] if ( x [ 0 ] === x [ 1 ] && x [ 1 ] === x [ 2 ] ) { if ( y [ 0 ] === y [ 1 ] && y [ 1 ] === y [ 2 ] ) { console . log ( ' Yes ' ) ; return ; } } console . log ( ' No ' ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " \n " ) ; var N = parseInt ( input [ 0 ] . split ( " " ) [ 0 ] ) ; var M = parseInt ( input [ 0 ] . split ( " " ) [ 1 ] ) ; C = new Array ( M ) ; P = new Array ( 0 ) ; for ( i = 0 ; i < M ; i ++ ) { tmp = input [ i + 1 ] . split ( " " ) ; Csub = [ parseInt ( tmp [ 0 ] ) , parseInt ( tmp [ 1 ] ) , i ] ; C [ i ] = Csub ; } C . sort ( function ( a , b ) { return ( a [ 0 ] - b [ 0 ] || a [ 1 ] - b [ 1 ] ) } ) ; for ( i = 0 ; i < M ; i ++ ) { var y = " " ; c = ` ${ C [ i ] [ 0 ] } ` . slice ( - 6 ) ; if ( i == 0 ) { var cnt = 1 ; } else if ( C [ i ] [ 0 ] != C [ i - 1 ] [ 0 ] ) { cnt = 1 ; } else { cnt ++ ; } y = ` ${ cnt } ` . slice ( - 6 ) ; P . push ( [ ` ${ c } ${ y } ` , C [ i ] [ 2 ] ] ) ; } P . sort ( ( a , b ) => a [ 1 ] - b [ 1 ] ) ; var ans = " " ; for ( i = 0 ; i < M ; i ++ ) { if ( i != M - 1 ) { ans = ans + P [ i ] [ 0 ] + " \n " ; } else { ans = ans + P [ i ] [ 0 ] ; } } console . log ( ' %s ' , ans ) ; } function debug ( ) { var input = document . getElementById ( " input " ) . value ; Main ( input ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . split ( " " ) ; const N = parseInt ( input [ 0 ] , 10 ) ; const K = parseInt ( input [ 1 ] , 10 ) ; if ( K === 1 ) { console . log ( 0 ) ; return ; } console . log ( N - K ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const args = input . split ( ' \n ' ) const A = parseInt ( args [ 0 ] , 10 ) , B = parseInt ( args [ 1 ] , 10 ) , C = parseInt ( args [ 2 ] , 10 ) , X = parseInt ( args [ 3 ] , 10 ) ; var count = 0 ; for ( var a = 0 ; a <= A ; ++ a ) { for ( var b = 0 ; b <= B ; ++ b ) { for ( var c = 0 ; c <= C ; ++ c ) { var sum = ( a * 500 ) + ( b * 100 ) + ( c * 50 ) ; if ( sum === X ) ++ count ; } } } console . log ( count ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
" use strict " ; function Main ( input ) { input = input . split ( " \n " ) ; input [ 0 ] = parseInt ( input [ 0 ] ) ; input [ 1 ] = parseInt ( input [ 1 ] ) ; input [ 2 ] = parseInt ( input [ 2 ] ) ; let money = [ ] ; let a = 0 ; for ( let i = 0 ; i <= input [ 2 ] ; i ++ ) { for ( let n = 0 ; n <= input [ 1 ] ; n ++ ) { for ( let m = 0 ; m <= input [ 0 ] ; m ++ ) { money [ a ] = i * 50 + n * 100 + m * 500 ; a ++ ; } } } let result = 0 ; for ( const item of money ) { if ( item === parseInt ( input [ 3 ] ) ) { result ++ ; } } console . log ( result ) ; } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf-8 " ) ) ;
function f ( x , y , z ) { return Math . abs ( y - x ) + Math . abs ( y - z ) ; } function main ( input ) { input = input . split ( ' ' ) . map ( Number ) ; a = input [ 0 ] , b = input [ 1 ] , c = input [ 2 ] , d = 1000001 ; if ( f ( a , b , c ) < d ) d = f ( a , b , c ) ; if ( f ( a , c , b ) < d ) d = f ( a , c , b ) ; if ( f ( b , a , c ) < d ) d = f ( b , a , c ) ; if ( f ( b , c , a ) < d ) d = f ( b , c , a ) ; if ( f ( c , a , b ) < d ) d = f ( c , a , b ) ; if ( f ( c , b , a ) < d ) d = f ( c , b , a ) ; console . log ( d ) ; } main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function Main ( input ) { input = input . trim ( ) ; var N = parseInt ( input , 10 ) ; var maxN = 0 ; var n = 10 ; var A = 0 ; var B = 0 ; while ( true ) { n_1 = Math . pow ( n , 5 ) ; n_2 = Math . pow ( n - 1 , 5 ) ; if ( n_1 - n_2 > Math . pow ( 10 , 9 ) ) { maxN = n + 1 ; break ; } n ++ ; } for ( var i = - maxN ; i < maxN ; i ++ ) { for ( var j = - maxN ; j < maxN ; j ++ ) { var a = Math . pow ( i , 5 ) ; var b = Math . pow ( j , 5 ) ; if ( a - b === N ) { A = i ; B = j ; console . log ( A , B ) ; return ; } } } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
' use strict ' function main ( inp ) { inp = inp . trim ( ) . split ( ' \n ' ) const N = Number ( inp . shift ( ) ) in p = inp . map ( r => r . split ( ' ' ) . map ( n => Number ( n ) ) ) let sum = 0 for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { const x = Math . pow ( inp [ i ] [ 0 ] - inp [ j ] [ 0 ] , 2 ) const y = Math . pow ( inp [ i ] [ 1 ] - inp [ j ] [ 1 ] , 2 ) sum += Math . sqrt ( x + y ) } } console . log ( sum / N / ( N - 1 ) * ( N - 1 ) ) } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
' use strict ' ; function main ( stdin ) { const input = stdin . split ( ' ' ) . map ( v => parseInt ( v , 10 ) ) ; const N = input [ 0 ] ; const K = input [ 1 ] ; let ans = N - K ; if ( K === 1 ) ans = 0 ; console . log ( ans ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function main ( input ) { const nums = input . split ( " " ) ; var count5 = 0 , count7 = 0 ; nums . forEach ( num => { if ( num == 5 ) { count5 += 1 ; } if ( num == 7 ) { count7 += 1 ; } } ) console . log ( count5 === 2 && count7 === 1 ? " YES " : " NO " ) ; } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) ) ;
function Main ( input ) { input = input . split ( " " ) ; var a = parseInt ( input [ 0 ] , 10 ) ; var b = parseInt ( input [ 1 ] , 10 ) ; if ( a > 8 || b > 8 ) { console . log ( " :( " ) ; } else { console . log ( " Yay! " ) } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
function main ( input ) { const tmp = input . trim ( ) . split ( ' \n ' ) . map ( ( n ) => parseInt ( n , 10 ) ) if ( tmp [ 4 ] - tmp [ 0 ] <= tmp [ 5 ] ) { console . log ( ' Yay! ' ) } else { console . log ( ' :( ' ) } } main ( require ( ' fs ' ) . readFileSync ( ' /dev/stdin ' , ' utf8 ' ) )
function Main ( input ) { input = input . split ( " \n " ) ; var a = [ ] ; for ( var f = 0 ; f <= 5 ; f ++ ) { var r = parseInt ( input [ f ] , 10 ) ; a [ f ] = r ; } var ans = a [ 4 ] - a [ 0 ] ; if ( ans > a [ 5 ] ) { console . log ( ' :( ' ) ; } else { console . log ( ' Yay! ' ) ; } } Main ( require ( " fs " ) . readFileSync ( " /dev/stdin " , " utf8 " ) ) ;
var square = function ( x ) { return x * x * x ; } process . stdin . resume ( ) ; process . stdin . setEncoding ( ' utf8 ' ) ; process . stdin . on ( ' data ' , function ( x ) { console . log ( square ( x ) ) ; } ) ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; $ pattern = $ k ; if ( $ pattern > 1 ) { for ( $ i = 2 ; $ i <= $ n ; ++ $ i ) { $ pattern *= ( $ k - 1 ) ; } } echo $ pattern ; ?>
<?php fscanf ( STDIN , " %d " , $ fiveHundred ) ; fscanf ( STDIN , " %d " , $ oneHundred ) ; fscanf ( STDIN , " %d " , $ fifty ) ; fscanf ( STDIN , " %d " , $ allMoney ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ fiveHundred ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ oneHundred ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ fifty ; $ k ++ ) { if ( ( $ allMoney - ( 500 * $ i + 100 * $ j + 50 * $ k ) ) == 0 ) { $ ans ++ ; } ; } } } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ array = [ $ a , $ b , $ c ] ; $ seven = 0 ; $ five = 0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ array [ $ i ] == 7 ) { $ seven ++ ; } elseif ( $ array [ $ i ] == 5 ) { $ five ++ ; } } if ( $ seven === 1 && $ five === 2 ) { echo ' YES ' ; } else { echo ' NO ' ; } ?>
<?php list ( $ n ) = ints ( ) ; $ p = [ 1 , 1 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ a = ints ( ) ; if ( $ a [ 0 ] >= $ p [ 0 ] && $ a [ 1 ] >= $ p [ 1 ] ) { $ p = $ a ; continue ; } $ m [ 0 ] = $ p [ 0 ] % $ a [ 0 ] ? intdiv ( $ p [ 0 ] , $ a [ 0 ] ) + 1 : intdiv ( $ p [ 0 ] , $ a [ 0 ] ) ; $ m [ 1 ] = $ p [ 1 ] % $ a [ 1 ] ? intdiv ( $ p [ 1 ] , $ a [ 1 ] ) + 1 : intdiv ( $ p [ 1 ] , $ a [ 1 ] ) ; $ p = [ $ a [ 0 ] * max ( $ m ) , $ a [ 1 ] * max ( $ m ) ] ; } echo array_sum ( $ p ) ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; $ Sn = trim ( fgets ( STDIN ) ) ; $ Snary = explode ( " " , $ Sn ) ; $ temp = [ ] ; foreach ( $ Snary as $ colore ) { if ( ! in_array ( $ colore , $ temp , true ) ) { $ temp [ ] = $ colore ; } } echo count ( $ temp ) === 4 ? ' Four ' : ' Three ' ; ?>
<?php $ sc = new Scanner ( ) ; $ f = [ ' 1 ' => false , ' 9 ' => false , ' 7 ' => false , ' 4 ' => false , ] ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ t = $ sc -> nextInt ( ) ; if ( $ f [ $ t ] ) { echo ' NO ' . PHP_EOL ; exit ; } $ f [ $ t ] = true ; } foreach ( $ f as $ v ) { if ( ! $ v ) { echo ' NO ' . PHP_EOL ; exit ; } } echo ' YES ' . PHP_EOL ; exit ; class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } }
<?php while ( 1 ) { $ N = trim ( fgets ( STDIN ) ) ; if ( $ N == ' 0 ' ) break ; $ s = 0 ; foreach ( str_split ( $ N ) as $ n ) $ s += ( int ) $ n ; echo $ s , PHP_EOL ; }
<?php $ s = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ ans = 0 ; if ( $ s [ 0 ] >= 13 ) { $ ans = $ s [ 1 ] ; } elseif ( $ s [ 0 ] <= 12 && $ s [ 0 ] >= 6 ) { $ ans = $ s [ 1 ] / 2 ; } elseif ( $ s [ 0 ] <= 5 ) { $ ans = 0 ; } echo $ ans ; ?>
<?php print ( strval ( cubic ( read_num ( ) ) ) . " \n " ) ; function read_num ( ) { if ( fscanf ( STDIN , " %d " , $ num ) != 1 ) { exit ( " invalid input " ) ; } return $ num ; } function cubic ( $ num ) { return $ num * $ num * $ num ; }
<?php list ( $ s ) = strs ( ) ; list ( $ k ) = ints ( ) ; for ( $ i = 0 ; $ i < 26 ; ++ $ i ) $ a2n [ chr ( 97 + $ i ) ] = $ i ; $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ x = $ a2n [ $ s [ $ i ] ] ; if ( $ x === 0 ) continue ; if ( $ k >= 26 - $ x ) { $ s [ $ i ] = ' a ' ; $ k -= 26 - $ x ; } } if ( $ k > 0 ) $ s [ $ n - 1 ] = chr ( 97 + ( $ a2n [ $ s [ $ n - 1 ] ] + $ k ) % 26 ) ; echo $ s . PHP_EOL ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function strs ( ) { return explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; }
<?php fscanf ( STDIN , " %s " , $ s ) ; if ( $ s [ 2 ] === $ s [ 3 ] && $ s [ 4 ] === $ s [ 5 ] ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ a = ( int ) trim ( fgets ( STDIN ) ) ; $ b = ( int ) trim ( fgets ( STDIN ) ) ; $ c = ( int ) trim ( fgets ( STDIN ) ) ; $ x = ( int ) trim ( fgets ( STDIN ) ) ; $ ans = 0 ; for ( $ tmp = 0 ; $ tmp <= $ a ; $ tmp ++ ) { for ( $ tmp2 = 0 ; $ tmp2 <= $ b ; $ tmp2 ++ ) { for ( $ tmp3 = 0 ; $ tmp3 <= $ c ; $ tmp3 ++ ) { if ( 500 * $ tmp + 100 * $ tmp2 + 50 * $ tmp3 == $ x ) { $ ans ++ ; } } } } echo ( $ ans ) . " \n " ; ?>
<?php while ( ( $ line = trim ( fgets ( STDIN ) ) ) !== ' ' ) { $ card = array_fill ( 1 , 13 , 0 ) ; foreach ( explode ( ' , ' , $ line ) as $ c ) { $ card [ ( int ) $ c ] ++ ; } $ card = array_filter ( $ card , function ( $ n ) { return $ n ; } ) ; $ pair = max ( $ card ) ; $ cnt = count ( $ card ) ; if ( $ pair === 4 ) { echo " four card \n " ; } elseif ( $ pair === 3 && $ cnt === 2 ) { echo " full house \n " ; } elseif ( $ cnt === 5 ) { $ min = min ( array_keys ( $ card ) ) ; $ check = 0 ; for ( $ i = $ min + 1 ; $ i < $ min + 5 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } if ( $ check !== 4 && $ min === 1 ) { $ check = 0 ; for ( $ i = 10 ; $ i <= 13 ; $ i ++ ) { isset ( $ card [ $ i ] ) && $ check ++ ; } } echo $ check === 4 ? " straight \n " : " null \n " ; } elseif ( $ pair === 3 ) { echo " three card \n " ; } elseif ( $ pair === 2 ) { echo $ cnt === 3 ? " two pair \n " : " one pair \n " ; } else { echo " null \n " ; } }
<?php $ a = array ( ) ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ a [ $ i ] ) ; } $ ret_list = array ( ) ; for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { $ ret = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i === $ j ) continue ; $ ret += intval ( ceil ( $ a [ $ i ] / 10 ) * 10 ) ; } $ ret += $ a [ $ j ] ; $ ret_list [ ] = $ ret ; } print ( min ( $ ret_list ) . " \n " ) ; ?>
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ c , $ d ) ; $ rec1 = $ a * $ b ; $ rec2 = $ c * $ d ; if ( $ rec1 === $ rec2 ) { echo $ rec1 ; } elseif ( $ rec1 > $ rec2 ) { echo $ rec1 ; } else { echo $ rec2 ; } ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a [ 0 ] , $ a [ 1 ] , $ a [ 2 ] ) ; sort ( $ a ) ; if ( $ a [ 0 ] === 5 && $ a [ 1 ] === 5 && $ a [ 2 ] === 7 ) { echo " YES " ; } else { echo " NO " ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = trim ( fgets ( STDIN ) ) ; } arsort ( $ arr ) ; $ max = [ ] ; $ i = 0 ; foreach ( $ arr as $ key => $ value ) { if ( $ i === 2 ) break ; $ max [ $ i ] [ ' key ' ] = $ key ; $ max [ $ i ] [ ' value ' ] = $ value ; $ i ++ ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i === $ max [ 0 ] [ ' key ' ] ) { echo $ max [ 1 ] [ ' value ' ] . " \n " ; } else { echo $ max [ 0 ] [ ' value ' ] . " \n " ; } }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A == 1 ) $ A += 13 ; if ( $ B == 1 ) $ B += 13 ; if ( $ A == $ B ) { echo " Draw \n " ; } elseif ( $ A > $ B ) { echo " Alice \n " ; } else { echo " Bob \n " ; }
<?php $ num = trim ( fgets ( STDIN ) ) ; $ res = $ num * $ num * $ num ; echo $ res . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ N ) ; $ x_list = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ flag = true ; $ sum_distance_list = array ( ) ; $ sum_distance = 0 ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ sum_distance += ( $ x_list [ $ j ] - $ i ) ** 2 ; } $ sum_distance_list [ ] = $ sum_distance ; $ sum_distance = 0 ; } echo min ( $ sum_distance_list ) . " \n " ;
<?php $ a = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ a [ $ i ] = ( int ) $ a [ $ i ] ; } sort ( $ a ) ; echo ( $ a [ 2 ] - $ a [ 1 ] ) + ( $ a [ 1 ] - $ a [ 0 ] ) . PHP_EOL ;
<?php function checkSimilar ( $ words ) { $ a = str_split ( $ words ) ; if ( $ a [ 2 ] === $ a [ 3 ] && $ a [ 4 ] === $ a [ 5 ] ) { return ' Yes ' ; } else { return ' No ' ; } } $ stdin = ( string ) trim ( fgets ( STDIN ) ) ; echo checkSimilar ( $ stdin ) ;
<?php fscanf ( STDIN , " %d %d %d " , $ c11 , $ c12 , $ c13 ) ; fscanf ( STDIN , " %d %d %d " , $ c21 , $ c22 , $ c23 ) ; fscanf ( STDIN , " %d %d %d " , $ c31 , $ c32 , $ c33 ) ; $ k1 = $ c11 + $ c12 + $ c13 ; $ k2 = $ c21 + $ c22 + $ c23 ; $ k3 = $ c31 + $ c32 + $ c33 ; $ m1 = $ c11 + $ c21 + $ c31 ; $ m2 = $ c12 + $ c22 + $ c32 ; $ m3 = $ c13 + $ c23 + $ c33 ; if ( ( ( $ k1 - $ k2 ) % 3 !== 0 ) || ( ( $ k2 - $ k3 ) % 3 !== 0 ) || ( ( $ m1 - $ m2 ) % 3 !== 0 ) || ( ( $ m2 - $ m3 ) % 3 !== 0 ) ) { echo " No " ; return ; } ; echo " Yes " ; return ;
<?php for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ tmp ) ; $ array [ ] = $ tmp ; } fscanf ( STDIN , " %d " , $ K ) ; if ( max ( $ array ) - min ( $ array ) > $ K ) { echo " :( " ; } else { echo " Yay! " ; }
<?php $ min = 124 ; $ max = 0 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { fscanf ( STDIN , " %d " , $ now ) ; if ( $ max < $ now ) { $ max = $ now ; } if ( $ min > $ now ) { $ min = $ now ; } } fscanf ( STDIN , " %d " , $ k ) ; echo ( $ max - $ min <= $ k ) ? " Yay! " : " :( " ;
<?php $ inputs = explode ( " " , file_get_contents ( " php: $ inputs = array_map(intval, $ inputs ); list( $ a , $ b , $ c , $ d ) = $ inputs ; echo max( $ a * $ b , $ c * $ d ) ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ max = 0 ; $ max_i = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ j = $ i ; $ count = 0 ; while ( $ j % 2 === 0 ) { $ j = $ j / 2 ; $ count ++ ; } if ( $ count >= $ max ) { $ max = $ count ; $ max_i = $ i ; } } print $ max_i ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ D ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ X [ $ i ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ distance = 0 ; for ( $ k = 0 ; $ k < $ D ; $ k ++ ) { $ distance += pow ( abs ( $ X [ $ i ] [ $ k ] - $ X [ $ j ] [ $ k ] ) , 2 ) ; } if ( is_pythagoras ( $ distance ) ) $ count ++ ; } } echo $ count , PHP_EOL ; function is_pythagoras ( $ number ) { for ( $ i = 0 ; pow ( $ i , 2 ) <= $ number ; $ i ++ ) { if ( pow ( $ i , 2 ) === $ number ) return true ; } return false ; }
<?php fscanf ( STDIN , " %d%d " , $ a , $ b ) ; echo ( $ a >= 13 ) ? $ b : ( ( $ a <= 5 ) ? 0 : $ b / 2 ) ; ?>
<?php $ stdin = trim ( fgets ( STDIN ) ) ; $ nums = explode ( " " , $ stdin ) ; $ count_5 = 0 ; $ count_7 = 0 ; foreach ( $ nums as $ num ) { if ( $ num == 5 ) { $ count_5 += 1 ; } elseif ( $ num == 7 ) { $ count_7 += 1 ; } } if ( $ count_5 == 2 && $ count_7 == 1 ) { echo " YES " . PHP_EOL ; } else { echo " NO " . PHP_EOL ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; $ As = explode ( ' ' , $ input ) ; rsort ( $ As ) ; $ cost1 = abs ( $ As [ 1 ] - $ As [ 0 ] ) ; $ cost1 += abs ( $ As [ 2 ] - $ As [ 1 ] ) ; echo $ cost1 ;
<?php $ input = trim ( fgets ( STDIN ) ) ; $ array = explode ( " " , $ input ) ; list ( $ a , $ b , $ c , $ d ) = $ array ; $ s1 = $ a * $ b ; $ s2 = $ c * $ d ; if ( $ s1 == $ s2 ) { echo $ s1 . " \n " ; } else if ( $ s1 < $ s2 ) { echo $ s2 . " \n " ; } else if ( $ s1 > $ s2 ) { echo $ s1 . " \n " ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ sum = 0 ; $ cul = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ temp = fgets ( STDIN ) ; $ poss [ $ i ] = explode ( " " , $ temp ) ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ keisu = 1 ; $ keisu *= $ i + 1 ; } for ( $ i = 0 ; $ i < 9999 ; $ i ++ ) { $ j = $ i + 1 ; do { $ lens [ $ cul ] = sqrt ( pow ( $ poss [ $ i ] [ 0 ] - $ poss [ $ j ] [ 0 ] , 2 ) + pow ( $ poss [ $ i ] [ 1 ] - $ poss [ $ j ] [ 1 ] , 2 ) ) ; if ( $ cul + 1 == $ n * ( $ n - 1 ) / 2 ) { break 2 ; } $ cul ++ ; $ j ++ ; } while ( $ j < $ n ) ; } for ( $ i = 0 ; $ i < $ n * ( $ n - 1 ) / 2 ; $ i ++ ) { $ sum += $ keisu * $ lens [ $ i ] ; } echo ( $ sum / ( $ n * ( $ n - 1 ) / 2 ) ) ;
<?php list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , rtrim ( fgets ( STDIN ) ) ) ; $ ab = $ a * $ b ; $ cd = $ c * $ d ; if ( $ ab >= $ cd ) { echo $ ab ; } else { echo $ cd ; }
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ a = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ mod = 1000000007 ; $ ans = 0 ; for ( $ i = 0 ; $ i <= 60 ; $ i ++ ) { $ zero = 0 ; $ one = 0 ; $ bit = pow ( 2 , $ i ) ; for ( $ j = 0 ; $ j < count ( $ a ) ; $ j ++ ) { $ xor = $ a [ $ j ] & $ bit ; if ( $ xor == 0 ) { $ zero ++ ; } else { $ one ++ ; } } $ bit = $ bit % $ mod ; $ bit = $ bit * $ zero % $ mod ; $ bit = $ bit * $ one % $ mod ; $ ans = $ ans + $ bit % $ mod ; } echo $ ans % $ mod ;
<?php function getKyori ( $ x1 , $ y1 , $ x2 , $ y2 ) { return sqrt ( ( $ x1 - $ x2 ) ** 2 + ( $ y1 - $ y2 ) ** 2 ) ; } $ n = intval ( fgets ( STDIN ) ) ; $ positions = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ positions [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ kyoriArray = [ ] ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ kyoriArray [ ] = getKyori ( $ positions [ $ i ] [ 0 ] , $ positions [ $ i ] [ 1 ] , $ positions [ $ j ] [ 0 ] , $ positions [ $ j ] [ 1 ] ) ; } } $ average = array_sum ( $ kyoriArray ) / count ( $ kyoriArray ) ; echo $ average * ( $ n - 1 ) ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ;
<?php fscanf ( STDIN , " %d " , $ r ) ; $ circle = $ r * $ r * 3 ; $ ans = $ circle / 3 ; echo ( $ ans ) . PHP_EOL ;
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ n = $ sc -> nextInt ( ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = $ i + 1 ; } $ arr2 = $ arr ; $ key = 0 ; $ cnt_max = 0 ; for ( $ i = 0 ; $ i < count ( $ arr2 ) ; $ i ++ ) { $ cnt = 0 ; while ( $ arr2 [ $ i ] % 2 === 0 ) { $ arr2 [ $ i ] /= 2 ; $ cnt ++ ; } if ( $ cnt_max <= $ cnt ) { $ cnt_max = $ cnt ; $ key = $ i ; } } echo $ arr [ $ key ] ;
<?php $ s = fgets ( STDIN ) ; echo $ s [ 2 ] == $ s [ 3 ] && $ s [ 4 ] == $ s [ 5 ] ? " Yes " : " No " ;
<?php fscanf ( STDIN , " %d %d " , $ a , $ b ) ; echo $ a >= 13 ? $ b : ( $ a >= 6 ? $ b / 2 : 0 ) ; ?>
<?php list ( $ a_point , $ a_move ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; list ( $ b_point , $ b_move ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ time = trim ( fgets ( STDIN ) ) ; if ( $ a_move <= $ b_move ) { echo ' NO ' ; exit ; } if ( abs ( $ a_point - $ b_point ) <= abs ( $ a_move - $ b_move ) * $ time ) { echo ' YES ' ; exit ; } echo ' NO ' ; exit ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ vallance = trim ( fgets ( STDIN ) ) ; $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ b ; ++ $ j ) { for ( $ k = 0 ; $ k <= $ c ; ++ $ k ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ vallance ) { $ ans ++ ; } } } } echo $ ans ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ step = trim ( fgets ( STDIN ) ) ; $ rows = [ ] ; while ( ( $ row = trim ( fgets ( STDIN ) ) ) !== ' ' ) { $ rows [ ] = explode ( ' ' , $ row ) ; } for ( $ i = 0 ; $ i < $ n * 4 ; $ i ++ ) { if ( $ step [ $ i ] == " Y " ) { $ ans = " Four " ; break ; } else { $ ans = " Three " ; } } echo $ ans ;
<?php $ i = fgets ( STDIN ) ; print pow ( $ i , 3 ) ; print " \n " ;
<?php fscanf ( STDIN , " %d %d " , $ b , $ c ) ; echo $ b - ( $ c - 1 ) ; ?>
<?php $ data = explode ( " / " , trim ( fgets ( STDIN ) ) ) ; $ check = 1556550000 ; $ time = mktime ( 0 , 0 , 0 , $ data [ 1 ] , $ data [ 2 ] , $ data [ 0 ] ) ; $ result = " TBD " ; if ( $ time <= $ check ) { $ result = " Heisei " ; } echo $ result ;
<?php fscanf ( STDIN , " %d%d " , $ t1 , $ t2 ) ; fscanf ( STDIN , " %d%d " , $ a1 , $ a2 ) ; fscanf ( STDIN , " %d%d " , $ b1 , $ b2 ) ; $ a1 -= $ b1 ; $ a2 -= $ b2 ; $ a1 *= $ t1 ; $ a2 *= $ t2 ; if ( $ a1 < 0 ) { $ a1 = - $ a1 ; $ a2 = - $ a2 ; } if ( $ a1 + $ a2 == 0 ) echo " infinity \n " ; elseif ( $ a1 + $ a2 > 0 ) echo " 0 \n " ; else { $ a2 = - $ a2 ; $ a1 *= 2 ; $ a2 *= 2 ; echo intdiv ( $ a1 , ( $ a2 - $ a1 ) ) + intdiv ( ( $ a1 - 1 ) , ( $ a2 - $ a1 ) ) + 1 ; }
<?php fscanf ( STDIN , " %d %d " , $ A , $ B ) ; if ( $ A <= 8 && $ B <= 8 ) { echo " Yay! " . " \n " ; } else { echo " :( " . " \n " ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo ( $ str ) . PHP_EOL ; } } $ sc = new Scanner ( ) ; $ n = $ sc -> nextInt ( ) ; $ circle = 3 ; $ circle2 = $ n * $ n * intval ( 3 ) ; $ res = $ circle2 / $ circle ; out :: println ( $ res ) ; ?>
<?php list ( $ a , $ b , $ c , $ d ) = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ A = $ a * $ b ; $ B = $ c * $ d ; echo $ A > $ B ? $ A : $ B ; ?>
<?php fscanf ( STDIN , " %d " , $ x ) ; $ cube = $ x ** 3 ; echo " $ cube \n " ;
<?php fscanf ( STDIN , " %d%d " , $ n , $ k ) ; if ( $ k == 1 ) { echo ( 0 ) ; } else { echo ( $ n - $ k ) ; }
<?php fscanf ( STDIN , " %d %d " , $ k , $ z ) ; $ count = 0 ; for ( $ a = 0 ; $ a <= $ k ; $ a ++ ) { for ( $ b = 0 ; $ b <= $ k ; $ b ++ ) { $ c = $ z - ( $ a + $ b ) ; if ( 0 <= $ c && $ c <= $ k ) { $ count ++ ; } } } echo $ count ; ?>
<?php class Line { protected $ lineData ; protected $ pointer ; public function __construct ( array $ line ) { $ this -> lineData = $ line ; $ this -> pointer = 0 ; $ this -> count = count ( $ line ) ; } public function next ( ) { if ( $ this -> count > $ this -> pointer ) { return $ this -> lineData [ $ this -> pointer ++ ] ; } return false ; } } class IOW { public static function nl ( ) { $ str = trim ( fgets ( STDIN ) ) ; return new Line ( explode ( ' ' , $ str ) ) ; } public static function out ( $ data ) { print_r ( $ data . PHP_EOL ) ; } } $ line = IOW :: nl ( ) ; $ birth = $ line -> next ( ) ; $ money = $ line -> next ( ) ; switch ( true ) { case $ birth >= 13 : IOW :: out ( $ money ) ; break ; case $ birth < 6 : IOW :: out ( 0 ) ; break ; default : IOW :: out ( $ money / 2 ) ; }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } public function nextString ( ) { return ( string ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ s = $ sc -> nextString ( ) ; $ target = ' 2019/04/30 ' ; if ( strtotime ( $ s ) <= strtotime ( $ target ) ) { echo ' Heisei ' ; } else { echo ' TBD ' ; }
<?php list ( $ r ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php fscanf ( STDIN , " %d %d " , $ N , $ K ) ; $ sa = ( $ N - $ K ) ; if ( $ K == 1 ) { $ sa = 0 ; } echo ( $ sa ) . " \n " ; ?>
<?php $ input = fgets ( STDIN ) ; $ input_array = explode ( " " , $ input ) ; $ int_array = array_map ( function ( $ value ) { return ( int ) $ value ; } , $ input_array ) ; $ ans = $ int_array [ 2 ] * 60 + $ int_array [ 3 ] - $ int_array [ 0 ] * 60 - $ int_array [ 1 ] - $ int_array [ 4 ] ; echo $ ans ;
<?php for ( $ i = 0 ; $ i <= 4 ; $ i ++ ) { $ a [ ] = trim ( fgets ( STDIN ) ) ; } $ ans = 0 ; foreach ( $ a as $ value ) { if ( $ value % 10 == 0 ) { $ b [ ] = 0 ; } else { $ b [ ] = 10 - $ value % 10 ; } $ ans += $ value ; } sort ( $ b ) ; $ b [ 4 ] = 0 ; foreach ( $ b as $ value ) { $ ans += $ value ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; echo ( $ a + $ b < $ c ? ' No ' : ' Yes ' ) . PHP_EOL ;
<?php ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d %d " , $ n , $ m ) ; define ( ' MOD ' , pow ( 10 , 9 ) + 7 ) ; $ ans = 0 ; $ xx = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ yy = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ bx = array ( ) ; $ by = array ( ) ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ bx [ $ i ] = ( $ i + 1 ) * ( $ n - $ i - 1 ) ; } for ( $ i = 0 ; $ i < $ m - 1 ; $ i ++ ) { $ by [ $ i ] = ( $ i + 1 ) * ( $ m - $ i - 1 ) ; } for ( $ x = 0 ; $ x < $ n - 1 ; $ x ++ ) { $ dx = $ xx [ $ x + 1 ] - $ xx [ $ x ] ; $ total_x += $ bx [ $ x ] * $ dx ; $ total_x %= MOD ; } for ( $ y = 0 ; $ y < $ m - 1 ; $ y ++ ) { $ dy = $ yy [ $ y + 1 ] - $ yy [ $ y ] ; $ total_y += $ by [ $ y ] * $ dy ; $ total_y %= MOD ; } $ ans = $ total_x * $ total_y % MOD ; echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ num = trim ( fgets ( STDIN ) ) ; $ num = explode ( " " , $ num ) ; $ total = [ ] ; for ( $ i = 1 ; $ i <= 100 ; $ i ++ ) { $ t = [ ] ; foreach ( $ num as $ person ) { $ t [ ] = pow ( $ person - $ i , 2 ) ; } $ total [ ] = array_sum ( $ t ) ; } echo min ( $ total ) ; ?>
<?php $ r = intval ( trim ( fgets ( STDIN ) ) ) ; echo $ r * $ r ;
<?php list ( $ k , $ s ) = ints ( ) ; $ cnt = 0 ; for ( $ x = 0 ; $ x <= $ k ; ++ $ x ) { for ( $ y = 0 ; $ y <= min ( $ s - $ x , $ k ) ; ++ $ y ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ cnt ++ ; } } echo $ cnt ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php $ nums = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ val = $ nums [ 1 ] ; for ( $ i = 1 ; $ i < $ nums [ 0 ] ; $ i ++ ) { $ val *= ( $ nums [ 1 ] - 1 ) ; } echo $ val ; ?>
<?php $ x = fgets ( STDIN ) ; $ x = intval ( $ x ) ; print ( $ x * $ x * $ x . " \n " ) ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ num = 200 ; for ( $ i = 0 ; $ i < $ num ; $ i ++ ) { for ( $ j = 0 ; $ j < $ num ; $ j ++ ) { if ( ( pow ( $ i , 5 ) + pow ( $ j , 5 ) ) == $ n ) { if ( ! $ j == 0 ) { $ j = $ j * ( - 1 ) ; } echo $ i . " " . $ j ; return ; } if ( ( pow ( $ i , 5 ) - pow ( $ j , 5 ) ) == $ n ) { echo $ i . " " . $ j ; return ; } } } return ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo ' ACL ' ; }
<?php fscanf ( STDIN , ' %d ' , $ N ) ; echo $ N * 800 - floor ( $ N / 15 ) * 200 ; ?>
<?php $ n ; fscanf ( STDIN , " %d " , $ n ) ; print $ n * $ n * $ n . " \n " ; ?>
<?php list ( $ x ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ pow5 = [ ] ; for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { $ pow5 [ $ i ] = pow ( $ i , 5 ) ; } for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { for ( $ j = 0 ; $ j < 200 ; $ j ++ ) { if ( $ x == ( $ pow5 [ $ i ] - $ pow5 [ $ j ] ) ) { echo $ i . " " . $ j ; exit ; } } } for ( $ i = 0 ; $ i < 200 ; $ i ++ ) { for ( $ j = 0 ; $ j < 200 ; $ j ++ ) { if ( $ x == ( $ pow5 [ $ i ] + $ pow5 [ $ j ] ) ) { echo $ j . " " . $ i * - 1 ; exit ; } } }
<?php fscanf ( STDIN , ' %d%d%d%d ' , $ a , $ b , $ c , $ d ) ; echo ( ( $ a * $ b ) > ( $ c * $ d ) ) ? $ a * $ b : $ c * $ d ;
<?php $ x = ( int ) trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ k ; ++ $ i ) { if ( ( $ s - $ i ) / 2 > $ k ) { continue ; } else { $ start = ( $ s - $ i - $ k ) < 0 ? 0 : ( $ s - $ i - $ k ) ; for ( $ j = $ start ; $ j <= $ k ; $ j ++ ) { if ( ( $ i + $ j ) > $ s ) { break ; } else { $ count ++ ; } } } } echo $ count ;
<?php $ ans = 0 ; $ array = [ ] ; function cmp ( $ a , $ b ) { $ a = $ a % 10 ; $ b = $ b % 10 ; $ a = $ a == 0 ? 10 : $ a ; $ b = $ b == 0 ? 10 : $ b ; return $ b <=> $ a ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ array [ ] = trim ( fgets ( STDIN ) ) ; } usort ( $ array , " cmp " ) ; function calc ( $ num ) { $ plus = $ num % 10 ; $ plus = $ plus == 0 ? 0 : 10 - $ plus ; return $ num + $ plus ; } for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { if ( $ i < 4 ) { $ ans += calc ( $ array [ $ i ] ) ; } else { $ ans += $ array [ $ i ] ; } } echo $ ans . " \n " ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; print ( pow ( $ a , 3 ) ) ; ?>
<?php fscanf ( STDIN , " %d " , $ r ) ; echo pow ( $ r , 2 ) ;
<?php While ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } $ v = explode ( " " , $ stdin [ 0 ] ) ; fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ v [ 0 ] ; $ i ++ ) { $ a = explode ( " " , $ stdin [ $ i + 1 ] ) ; for ( $ j = $ i + 1 ; $ j < $ v [ 0 ] ; $ j ++ ) { $ b = explode ( " " , $ stdin [ $ j + 1 ] ) ; $ r = 0 ; for ( $ k = 0 ; $ k < $ v [ 1 ] ; $ k ++ ) { $ r += pow ( ( $ a [ $ k ] - $ b [ $ k ] ) , 2 ) ; } if ( preg_match ( ' /^[0-9]+$/ ' , sqrt ( $ r ) ) ) { $ ans ++ ; } } } echo $ ans ;
<?php $ stdin = ( int ) trim ( fgets ( STDIN ) ) ; print ( int ) ( $ stdin * $ stdin ) ;
<?php $ arr = explode ( ' ' , fgets ( STDIN ) ) ; $ five = 0 ; $ seven = 0 ; foreach ( $ arr as $ key => $ value ) { $ arr [ $ key ] = intval ( $ value ) ; if ( $ arr [ $ key ] === 5 ) { $ five ++ ; continue ; } if ( $ arr [ $ key ] === 7 ) { $ seven ++ ; continue ; } } if ( $ five === 2 && $ seven === 1 ) { echo ' YES ' ; return ; } echo ' NO ' ; ?>
<?php list ( $ K , $ S ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c = 0 ; for ( $ i = 0 ; $ i <= $ K ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ K ; $ j ++ ) { if ( $ S - $ i - $ j >= 0 && $ S - $ i - $ j <= $ K ) { $ c ++ ; } } } echo $ c ;
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php $ k = trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; $ c = strlen ( $ s ) ; if ( $ c <= $ k ) { echo $ s ; exit ; } echo substr ( $ s , 0 , $ k ) . " ... " ;
<?php list ( $ a , $ b ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ a >= 13 ) { echo $ b ; } else if ( $ a >= 6 ) { echo $ b / 2 ; } else { echo 0 ; }
<?php $ N = intval ( trim ( fgets ( STDIN ) ) ) ; $ P_array = array_map ( ' intval ' , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; if ( $ N == 1 ) { echo $ P_array [ 0 ] ; exit ; } $ count = 0 ; $ min = $ P_array [ 0 ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { if ( $ P_array [ $ i ] < $ min ) { $ count ++ ; $ min = $ P_array [ $ i ] ; } } echo $ count + 1 ; ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ s = fgets ( STDIN ) ; if ( strchr ( $ s , ' Y ' ) === false ) { echo " Three " ; return ; } echo " Four " ;
<?php $ abcx = array ( ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ abcx [ ] = trim ( fgets ( STDIN ) ) ; } $ c = 0 ; for ( $ i = 0 ; $ i <= $ abcx [ 0 ] ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ abcx [ 1 ] ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ abcx [ 2 ] ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ abcx [ 3 ] ) { $ c ++ ; } } } } echo $ c . " \n " ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php function getq ( $ get_word = null ) { if ( $ get_word === null ) { return str_replace ( " \n " , " " , fgets ( STDIN ) ) ; } else if ( $ get_word === 1 ) { return explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; } } $ K = getq ( 1 ) ; echo max ( $ K [ 0 ] * $ K [ 1 ] , $ K [ 2 ] * $ K [ 3 ] ) ; ?>
<?php fscanf ( STDIN , " %d%d " , $ N , $ K ) ; $ dArray = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = $ N ; true ; $ i ++ ) { $ flag = true ; $ I = ( string ) $ i ; for ( $ j = 0 ; $ j < strlen ( $ I ) ; $ j ++ ) { if ( in_array ( $ I [ $ j ] , $ dArray ) ) $ flag = false ; } if ( $ flag ) { echo $ i , " \n " ; exit ; } }
<?php fscanf ( STDIN , " %d%d%d%d%d " , $ h1 , $ m1 , $ h2 , $ m2 , $ k ) ; $ start_time = $ h1 * 60 + $ m1 ; $ end_time = $ h2 * 60 + $ m2 ; $ possble_end = $ end_time - $ k ; echo ( $ possble_end - $ start_time ) ;
<?php list ( $ n ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo " ACL " ; }
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count . PHP_EOL ;
<?php [ $ A , $ V ] = fscanf ( STDIN , " %d%d " ) ; [ $ B , $ W ] = fscanf ( STDIN , " %d%d " ) ; [ $ T ] = fscanf ( STDIN , " %d " ) ; if ( $ A === $ B ) { echo " YES " ; exit ; } if ( $ V <= $ W ) { echo " NO " ; exit ; } $ saD = abs ( $ B - $ A ) ; $ saV = $ V - $ W ; if ( $ saV * $ T >= $ saD ) { echo " YES " ; } else { echo " NO " ; }
<?php $ input = trim ( fgets ( STDIN ) ) ; if ( $ input === ' 5 7 5 ' ) { echo " YES \n " ; } elseif ( $ input === ' 5 5 7 ' ) { echo " YES \n " ; } elseif ( $ input === ' 7 5 5 ' ) { echo " YES \n " ; } else echo " NO \n " ;
<?php fscanf ( STDIN , " %d " , $ n ) ; $ p = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ max = $ n ; $ cnt = 0 ; for ( $ i = 0 ; $ i < count ( $ p ) ; $ i ++ ) { if ( $ max >= $ p [ $ i ] ) { $ max = $ p [ $ i ] ; $ cnt ++ ; } } echo $ cnt ; ?>
<?php $ N = fgets ( STDIN ) ; if ( strtotime ( ' 2019/04/30 ' ) < strtotime ( $ N ) ) { print ( ' TBD ' ) ; } else { print ( ' Heisei ' ) ; }
<?php do { $ input = preg_split ( ' if(0 == $input[0]) { break; } $cnt = count($input); $sum = 0; for($loop_cnt = 0; $loop_cnt < $cnt; $loop_cnt++) { $sum += $input[$loop_cnt]; } echo $sum . "\n"; }while(1); ?>
<?php fscanf ( STDIN , ' %d%d%d ' , $ a , $ b , $ c ) ; echo max ( $ a , $ b , $ c ) - min ( $ a , $ b , $ c ) ;
<?php $ inp = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ sq1 = $ inp [ 0 ] * $ inp [ 1 ] ; $ sq2 = $ inp [ 2 ] * $ inp [ 3 ] ; if ( $ sq1 >= $ sq2 ) { echo $ sq1 ; } else { echo $ sq2 ; } ?>
<?php $ in = fgets ( STDIN ) ; echo pow ( $ in , 2 ) ; ?>
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $a = (int)($key->A[0]/15); printf("%d\n",$key->A[0]*800-($a*200));
<?php $ x = ( int ) fgets ( STDIN ) ; echo $ x * $ x * $ x ; ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; $ numbers = array ( ) ; $ numbers [ ] = $ a ; $ numbers [ ] = $ b ; $ numbers [ ] = $ c ; sort ( $ numbers ) ; if ( $ numbers [ 0 ] == 5 and $ numbers [ 1 ] == 5 and $ numbers [ 2 ] == 7 ) { echo " YES " ; } else { echo " NO " ; } ?>
<?php fscanf ( STDIN , " %d %d %d " , $ a , $ b , $ c ) ; if ( $ a + $ b >= $ c ) { print ( " Yes \n " ) ; } else { print ( " No \n " ) ; } ?>
<?php fscanf ( STDIN , " %d%d " , $ n , $ m ) ; $ yp = [ ] ; $ py = [ ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { fscanf ( STDIN , " %d%d " , $ p , $ y ) ; $ yp [ $ y ] = $ p ; $ py [ $ p ] [ ] = $ y ; } $ memo = [ ] ; foreach ( $ py as $ k => $ d ) { sort ( $ py [ $ k ] ) ; foreach ( $ py [ $ k ] as $ num => $ year ) { $ memo [ $ year ] = $ num + 1 ; } } foreach ( $ yp as $ yy => $ pp ) { echo sprintf ( " %06d " , $ pp ) ; echo sprintf ( " %06d " , $ memo [ $ yy ] ) ; echo " \n " ; }
<?php echo str_repeat ( " ACL " , trim ( fgets ( STDIN ) ) ) ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; $ x = [ ] ; $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x [ ] = array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( isSquare ( calcDist ( $ x [ $ i ] , $ x [ $ j ] ) ) ) $ c ++ ; } } echo $ c ; function isSquare ( $ v ) { return pow ( floor ( sqrt ( $ v ) ) , 2 ) == $ v ; } function calcDist ( $ a , $ b ) { global $ d ; $ ret = 0 ; for ( $ i = 0 ; $ i < $ d ; $ i ++ ) { $ ret += pow ( $ a [ $ i ] - $ b [ $ i ] , 2 ) ; } return $ ret ; } ?>
<?php list ( $ N , $ M ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { list ( $ P [ ] , $ Y [ ] ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ PY [ $ P [ $ i ] ] [ $ Y [ $ i ] ] = $ i ; } foreach ( $ PY as $ k => $ y ) { ksort ( $ y ) ; $ seq = 1 ; foreach ( $ y as $ kk => $ v ) { $ a [ $ v ] = sprintf ( " %06d%06d " , $ k , $ seq ) ; $ seq ++ ; } } ksort ( $ a ) ; foreach ( $ a as $ v ) { printf ( " %s \n " , $ v ) ; }
<?php function expt ( $ x , $ n ) { if ( $ n == 0 ) return ( 1.0 ) ; return ( $ x * expt ( $ x , $ n - 1 ) ) ; } while ( fscanf ( STDIN , " %d " , $ n ) && $ n ) { $ max = 0 ; $ maxbank = 0 ; fscanf ( STDIN , " %d " , $ y ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { fscanf ( STDIN , " %d %d %d " , $ b , $ r , $ t ) ; if ( $ t == 1 ) $ amount = 1 + ( $ r / 100 ) * $ y ; else $ amount = expt ( 1 + $ r / 100 , $ y ) ; if ( $ amount > $ max ) { $ max = $ amount ; $ maxbank = $ b ; } } fprintf ( STDOUT , " %d \n " , $ maxbank ) ; } return ( 0 ) ; ?>
<?php while ( true ) { fscanf ( STDIN , " %d " , $ a ) ; if ( feof ( STDIN ) ) break ; echo $ a * $ a * $ a , PHP_EOL ; }
<?php fscanf ( STDIN , " %d " , $ input_k ) ; fscanf ( STDIN , " %s " , $ input_s ) ; if ( strlen ( $ input_s ) > $ input_k ) { echo ( substr ( $ input_s , 0 , $ input_k ) . ' ... ' ) ; } else { echo $ input_s ; } ?>
<?php $ a = fgets ( STDIN ) ; $ b = fgets ( STDIN ) ; $ c = fgets ( STDIN ) ; $ x = fgets ( STDIN ) ; $ result = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ t = 0 ; $ t <= $ b ; $ t ++ ) { for ( $ r = 0 ; $ r <= $ c ; $ r ++ ) { if ( 500 * $ i + 100 * $ t + 50 * $ r == $ x ) { $ result ++ ; } } } } echo $ result ; ?>
<?php $ N = trim ( fgets ( STDIN ) ) ; $ I = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ r = null ; $ min = min ( $ I ) ; $ max = max ( $ I ) + 1 ; for ( ; $ min < $ max ; ++ $ min ) { $ c = 0 ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) { $ c += pow ( $ I [ $ i ] - $ min , 2 ) ; } if ( $ r == null || $ r > $ c ) $ r = $ c ; } echo $ r ;
<?php $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; while ( $ n != 0 ) { $ m = intval ( $ numbers [ 1 ] ) ; $ money = [ ] ; $ total = 0 ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ money [ ] = intval ( $ numbers [ $ i ] ) ; if ( ( $ m / $ n ) <= $ numbers [ $ i ] ) { $ total += ( $ m / $ n ) ; } else { $ total += $ numbers [ $ i ] ; } } print $ total ; print " \n " ; $ numbers = preg_split ( " /[\s,]+/ " , rtrim ( fgets ( STDIN ) ) ) ; $ n = intval ( $ numbers [ 0 ] ) ; }
<?php error_reporting ( 0 ) ; $ stdin = file_get_contents ( ' php: $line = explode("\n",$stdin); $fi = 0; $cnt = 0; $list = array(); $key = new stdclass(); foreach($line as $l) { if (strlen($l)==0) continue; if ($fi == 0) { $a = explode(" ",$l); $key->A = $a; $fi++; continue; } if ($fi > 0) { $a = explode(" ",$l); $key->X[] = $a; } } $A = $key->A[0]; $x = array(); foreach($key->X[0] as $k=>$a) { $x[]=$a; } if ($A==1) { printf("%s\n",$A); exit; } $n=2; while(1) { if (($n >= $A)||($n * 2 > $A)) break; $n = $n * 2; } printf("%s\n",$n);
<?php list ( $ n , $ k ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ ans = $ k ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ ans *= ( $ k - 1 ) ; } echo $ ans ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ a , $ b , $ h , $ m ) ; $ angvelh = ( 360 * ( pi ( ) / 180 ) ) / ( 12 * 60 ) ; $ angvelm = ( 360 * ( pi ( ) / 180 ) ) / 60 ; $ angh = $ angvelh * ( $ h * 60 + $ m ) ; $ angm = $ angvelm * $ m ; echo sqrt ( pow ( $ a , 2 ) + pow ( $ b , 2 ) - 2 * $ a * $ b * cos ( abs ( $ angh - $ angm ) ) ) ;
<?php while ( $ stdin = fgets ( STDIN ) ) { $ line [ ] = trim ( $ stdin ) ; } foreach ( $ line as $ key => $ value ) { $ data [ ] = explode ( ' ' , $ value ) ; } foreach ( $ data as & $ line ) { $ line = array_map ( function ( $ val ) { return ( int ) $ val ; } , $ line ) ; } $ A = $ data [ 0 ] [ 0 ] ; $ B = $ data [ 0 ] [ 1 ] ; $ C = $ data [ 0 ] [ 2 ] ; $ arr = [ $ A , $ B , $ C ] ; sort ( $ arr ) ; $ is = $ arr [ 0 ] === 5 && $ arr [ 1 ] === 5 && $ arr [ 2 ] === 7 ; $ ans = $ is ? ' YES ' : ' NO ' ; printf ( ' %s ' , $ ans ) ;
<?php fscanf ( STDIN , " %d %d %d %d " , $ in_a , $ in_b , $ in_h , $ in_m ) ; $ ans = 0.0 ; $ hx = $ in_a * sin ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ hy = $ in_a * cos ( deg2rad ( ( $ in_h + ( $ in_m / 60.0 ) ) / 12.0 ) * 360 ) ; $ mx = $ in_b * sin ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ my = $ in_b * cos ( deg2rad ( $ in_m / 60.0 ) * 360 ) ; $ ans = sqrt ( pow ( $ hx - $ mx , 2 ) + pow ( $ hy - $ my , 2 ) ) ; echo " $ ans \n " ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; echo intdiv ( $ n + $ m + 1 , 2 ) ;
<?php $ str = readline ( ) ; echo pow ( $ str , 3 ) ; ?>
<?php while ( $ line = fgets ( STDIN ) ) { $ stdin [ ] = trim ( $ line ) ; } #$v2 = str_split($stdin[0]); #$v2 = explode(" ", $stdin[0]); $ans = $stdin[0] * $stdin[0]; echo $ans . PHP_EOL;
<?php $ r = trim ( fgets ( STDIN ) ) ; echo $ r * $ r ;
<?php $ is_honban = true ; if ( $ is_honban ) { $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ c = $ sc -> nextInt ( ) ; $ x = $ sc -> nextInt ( ) ; } else { error_reporting ( E_ERROR | E_WARNING | E_PARSE ) ; $ a = 30 ; $ b = 40 ; $ c = 50 ; $ x = 6000 ; } $ ans = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( $ i * 500 + $ j * 100 + $ k * 50 == $ x ) { $ ans ++ ; } } } } out :: println ( $ ans ) ; class Scanner { private $ arr = array ( ) ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php fscanf ( STDIN , " %d " , $ N ) ; echo ( $ N * 800 - floor ( $ N / 15 ) * 200 ) . PHP_EOL ;
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ M = max ( $ a ) ; $ m = min ( $ a ) ; echo $ M - $ m ; ?>
<?php while ( true ) { $ x = trim ( fgets ( STDIN ) ) ; if ( $ x == 0 ) break ; echo array_sum ( str_split ( $ x ) ) . " \n " ; }
<?php echo str_replace ( ' ? ' , ' D ' , trim ( fgets ( STDIN ) ) ) ; ?>
<?php function getInput ( ) : array { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; } function calculate ( int $ K , int $ S ) : int { $ numberOfTriples = 0 ; for ( $ X = 0 ; $ X <= min ( $ K , $ S ) ; $ X ++ ) { for ( $ Y = 0 ; $ Y <= min ( $ K , $ S - $ X ) ; $ Y ++ ) { $ Z = $ S - $ X - $ Y ; if ( 0 <= $ Z && $ Z <= $ K ) { $ numberOfTriples ++ ; } } } return $ numberOfTriples ; } list ( $ K , $ S ) = getInput ( ) ; $ result = calculate ( $ K , $ S ) ; echo $ result . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ K ) ; fscanf ( STDIN , " %s " , $ S ) ; if ( strlen ( $ S ) <= $ K ) { echo $ S . " \n " ; } else { echo substr ( $ S , 0 , $ K ) . " ... \n " ; }
<?php define ( ' DEBUG ' , false ) ; ini_set ( ' error_reporting ' , E_ALL & ~ E_NOTICE ) ; fscanf ( STDIN , " %d " , $ N ) ; $ log = ( int ) floor ( log ( $ N , 2 ) ) ; echo pow ( 2 , $ log ) . " \n " ;
<?php $ ks = explode ( ' ' , fgets ( STDIN ) ) ; $ k = $ ks [ 0 ] ; $ s = $ ks [ 1 ] ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ k ; $ j ++ ) { $ l = $ s - $ i - $ j ; if ( 0 <= $ l && $ l <= $ k ) $ count ++ ; } } echo $ count ; ?>
<?php $ n = trim ( fgets ( STDIN ) ) ; $ a = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ b = [ ] ; if ( $ n % 2 == 0 ) { $ g = $ n - 1 ; $ k = 0 ; while ( $ g > 0 ) { $ b [ ] = $ a [ $ g ] ; $ g -= 2 ; } while ( $ k < $ n ) { $ b [ ] = $ a [ $ k ] ; $ k += 2 ; } } else { $ k = $ n - 1 ; $ g = 1 ; while ( $ k >= 0 ) { $ b [ ] = $ a [ $ k ] ; $ k -= 2 ; } while ( $ g < $ n ) { $ b [ ] = $ a [ $ g ] ; $ g += 2 ; } } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ b [ $ i ] ; if ( $ i < $ n - 1 ) { echo " " ; } }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ arr = array ( ) ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) { fscanf ( STDIN , " %d " , $ s ) ; $ arr [ $ i - 1 ] = $ s ; $ s_arr [ $ i - 1 ] = $ s ; } sort ( $ s_arr ) ; $ max = $ s_arr [ $ n - 1 ] ; $ sec = $ s_arr [ $ n - 2 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ arr [ $ i ] == $ max && $ arr [ $ i ] > $ sec ) { echo $ sec . " \r \n " ; } elseif ( $ arr [ $ i ] == $ max && $ arr [ $ i ] == $ sec ) { echo $ max . " \r \n " ; } else { echo $ max . " \r \n " ; } } ?>
<?php fscanf ( STDIN , ' %d ' , $ N ) ; echo 800 * $ N - floor ( $ N / 15 ) * 200 ; echo PHP_EOL ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ d ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x_li [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; } $ sum = 0 ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i < $ j ) { for ( $ k = 0 ; $ k < $ d ; $ k ++ ) { $ sum += ( $ x_li [ $ j ] [ $ k ] - $ x_li [ $ i ] [ $ k ] ) ** 2 ; } if ( sqrt ( $ sum ) - ( int ) sqrt ( $ sum ) == 0 ) { $ count ++ ; } } $ sum = 0 ; } } echo $ count . " \n " ;
<?php $ s = trim ( fgets ( STDIN ) ) ; $ pd = ' PD ' ; $ p = ' D ' ; echo str_replace ( ' ? ' , ' D ' , $ s ) ;
<?php fscanf ( STDIN , ' %d%d ' , $ n , $ m ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ b [ ] = fgets ( STDIN ) ; } for ( $ i = 0 ; $ i <= $ n - $ m ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n - $ m ; $ j ++ ) { $ f = 1 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) for ( $ l = 0 ; $ l < $ m ; $ l ++ ) { if ( $ a [ $ i + $ k ] [ $ j + $ l ] != $ b [ $ k ] [ $ l ] ) { $ f = 0 ; } } $ s += $ f ; } echo $ s ? Yes : No ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ D ) ; fscanf ( STDIN , ' %d ' , $ E ) ; fscanf ( STDIN , ' %d ' , $ k ) ; if ( $ E - $ A > $ k ) { echo ' :( ' . PHP_EOL ; } else { echo ' Yay! ' . PHP_EOL ; }
<?php $ input = fgets ( STDIN ) ; print ( pow ( $ input , 3 ) ) ; ?>
<?php $ r = ( int ) trim ( fgets ( STDIN ) ) ; print ( int ) pow ( $ r , 2 ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - $ x - $ y ; if ( $ z >= 0 && $ z <= $ k ) $ count ++ ; } } echo $ count ;
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; $ ans = $ k ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ ans *= $ k - 1 ; echo $ ans ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; $ res = $ x * $ x * $ x ; echo $ res ; ?>
<?php $ input = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ a = ( int ) $ input [ 0 ] ; $ b = ( int ) $ input [ 1 ] ; if ( $ a <= 5 ) { $ result = 0 ; } elseif ( $ a <= 12 ) { $ result = ( int ) floor ( $ b / 2 ) ; } else { $ result = $ b ; } echo $ result ;
<?php fscanf ( STDIN , ' %d %d %d ' , $ a , $ b , $ c ) ; $ aaa = [ $ a , $ b , $ c ] ; $ counter = array_count_values ( $ aaa ) ; if ( $ counter [ 5 ] === 2 && $ counter [ 7 ] === 1 ) { echo ' YES ' ; } else { echo ' NO ' ; } echo PHP_EOL ;
<?php $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; $ c [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ i == 0 ) { $ p = $ c [ $ i ] [ $ i ] ; for ( $ j = 1 ; $ j < 3 ; $ j ++ ) { $ w [ $ j ] = $ c [ $ i ] [ $ j ] - $ p ; $ h [ $ j ] = $ c [ $ j ] [ $ i ] - $ p ; } continue ; } foreach ( $ w as $ j => $ s ) { if ( $ s != $ c [ $ i ] [ $ j ] - $ c [ $ i ] [ 0 ] ) { echo " No " ; exit ; } } foreach ( $ h as $ j => $ s ) { if ( $ s != $ c [ $ j ] [ $ i ] - $ c [ 0 ] [ $ i ] ) { echo " No " ; exit ; } } } echo " Yes " ;
<?php while ( $ line = fgets ( STDIN ) ) { $ tmp [ ] = trim ( $ line ) ; } array_splice ( $ tmp , 0 , 1 ) ; $ array = $ tmp ; $ maxs = array_keys ( $ array , max ( $ array ) ) ; array_splice ( $ array , $ maxs [ 0 ] , 1 ) ; $ second = max ( $ array ) ; foreach ( $ tmp as $ key => $ value ) { if ( $ key == $ maxs [ 0 ] ) { echo $ second . " \n " ; } else { echo $ tmp [ $ maxs [ 0 ] ] . " \n " ; } }
<?php $ n = trim ( fgets ( STDIN ) ) ; echo $ n * 800 - floor ( $ n / 15 ) * 200 ;
<?php $ stdin = trim ( fgets ( STDIN ) ) ; define ( " n " , 3 ) ; echo pow ( $ stdin , n ) ; ?>
<?php $ x = trim ( fgets ( STDIN ) ) ; echo $ x * $ x * $ x , " \n " ;
<?php $ input = fgets ( STDIN ) ; $ data = explode ( " " , $ input ) ; $ balls = ( int ) $ data [ 0 ] ; $ people = ( int ) $ data [ 1 ] ; if ( $ people <= 1 ) { echo 0 ; } else { echo ( $ balls - ( $ people - 1 ) ) - 1 ; }
<?php $ n = intval ( fgets ( STDIN ) ) ; $ A = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; $ B = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; if ( array_sum ( $ A ) < array_sum ( $ B ) ) { echo " -1 \n " ; } else { $ count = 0 ; $ minus = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ A [ $ i ] < $ B [ $ i ] ) { $ minus += $ B [ $ i ] - $ A [ $ i ] ; $ count ++ ; } else { $ plus [ ] = $ A [ $ i ] - $ B [ $ i ] ; } } sort ( $ plus ) ; while ( $ minus > 0 ) { $ best = array_pop ( $ plus ) ; $ minus -= $ best ; $ count ++ ; } echo $ count ; }
<?php $ x = fgets ( STDIN ) ; $ cubic = $ x * $ x * $ x ; echo $ cubic . " \n " ; ?>
<?php $ n = intval ( trim ( fgets ( STDIN ) ) ) ; $ ans = 800 * $ n - 200 * floor ( $ n / 15 ) ; print ( " $ ans \n " ) ; ?>
<?php fscanf ( STDIN , " %d %d " , $ n , $ k ) ; if ( $ k == 1 ) { echo 0 ; exit ; } else { $ zan = $ n - $ k ; $ max = $ zan + 1 ; $ min = 1 ; echo $ max - $ min ; } ?>
<?php fscanf ( STDIN , " %s " , $ t ) ; echo str_replace ( ' ? ' , ' D ' , $ t ) ;
<?php fscanf ( STDIN , ' %s ' , $ a ) ; if ( substr ( $ a , 2 , 1 ) === substr ( $ a , 3 , 1 ) && substr ( $ a , 4 , 1 ) === substr ( $ a , 5 , 1 ) ) { echo ' Yes ' ; } else { echo ' No ' ; } echo PHP_EOL ;
<?php $ N = fgets ( STDIN ) ; $ bStr = fgets ( STDIN ) ; $ nums = explode ( " " , $ bStr ) ; $ run = 0 ; $ result = [ ] ; $ findResult = true ; while ( $ run < $ N ) { $ found = false ; for ( $ i = count ( $ nums ) - 1 ; $ i >= 0 ; $ i -- ) { $ currentNum = ( int ) $ nums [ $ i ] ; if ( $ currentNum == $ i + 1 ) { $ result [ ] = $ currentNum ; unset ( $ nums [ $ i ] ) ; $ nums = array_values ( $ nums ) ; $ found = true ; break ; } } if ( false == $ found ) { $ findResult = false ; break ; } $ run ++ ; } if ( $ findResult ) { for ( $ i = count ( $ result ) - 1 ; $ i >= 0 ; $ i -- ) { echo $ result [ $ i ] . " \n " ; } } else { echo " -1 \n " ; }
<?php list ( $ n , $ d ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ d == 1 ) { echo $ n * ( $ n - 1 ) / 2 ; } else { $ ans = 0 ; $ i = 0 ; while ( $ i < $ n ) { $ x [ ] = explode ( " " , trim ( fgets ( STDIN ) ) ) ; ++ $ i ; } $ i = 0 ; while ( $ i < $ n - 1 ) { $ j = $ i + 1 ; while ( $ j < $ n ) { $ l = 0 ; $ k = 0 ; while ( $ k < $ d ) { $ l += pow ( ( $ x [ $ i ] [ $ k ] - $ x [ $ j ] [ $ k ] ) , 2 ) ; ++ $ k ; } $ l = sqrt ( $ l ) ; if ( $ l == floor ( $ l ) ) { ++ $ ans ; } ++ $ j ; } ++ $ i ; } echo $ ans ; }
<?php $ n = trim ( fgets ( STDIN ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xy = explode ( ' ' , trim ( fgets ( STDIN ) ) ) ; $ x [ $ i ] = $ xy [ 0 ] ; $ y [ $ i ] = $ xy [ 1 ] ; } $ d = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ jj = ( $ i + $ j ) % $ n ; $ d += sqrt ( ( $ x [ $ i ] - $ x [ $ jj ] ) ** 2 + ( $ y [ $ i ] - $ y [ $ jj ] ) ** 2 ) ; } } echo $ d / $ n ; ?>
<?php $ a = ints ( ) ; echo array_sum ( $ a ) === 17 && max ( $ a ) === 7 && min ( $ a ) === 5 ? ' YES ' : ' NO ' ; function ints ( ) { return array_map ( ' intval ' , explode ( ' ' , trim ( fgets ( STDIN ) ) ) ) ; }
<?php fscanf ( STDIN , " %d " , $ x ) ; print pow ( $ x , 3 ) ; ?>
<?php while ( true ) { fscanf ( STDIN , " %d " , $ n ) ; if ( $ n == 0 ) break ; fscanf ( STDIN , " %d " , $ m ) ; $ input = array ( array ( ) , array ( ) , array ( ) , array ( ) , ) ; for ( $ i = 0 ; $ m > $ i ; $ i ++ ) { fscanf ( STDIN , " %d,%d,%d " , $ a , $ b , $ d ) ; $ input [ $ a ] [ $ b ] = $ d ; $ input [ $ b ] [ $ a ] = $ d ; } $ already = array_pad ( array ( ) , $ n , false ) ; $ already [ 0 ] = true ; $ result = 0 ; while ( true ) { $ f = false ; foreach ( $ already as $ k => $ flg ) { if ( ! $ flg ) { $ f = true ; } } if ( ! $ f ) break ; $ index = 0 ; $ tmp = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ! $ already [ $ i ] ) continue ; foreach ( $ input [ $ i ] as $ key => $ val ) { if ( $ tmp > $ val && ! $ already [ $ key ] ) { $ index = $ key ; $ tmp = $ val ; } } } $ already [ $ index ] = true ; $ result += $ tmp ; } echo ( ( $ result - ( ( $ n - 1 ) * 100 ) ) / 100 ) . " \n " ; }
<?php fscanf ( STDIN , " %d%d " , $ k , $ s ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ k ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ k ; $ y ++ ) { $ z = $ s - ( $ x + $ y ) ; if ( $ z >= 0 && $ z <= $ k ) { $ count ++ ; } } } echo $ count ;
<?php $ x = fgets ( STDIN ) ; echo pow ( $ x , 3 ) , PHP_EOL ;
<?php fscanf ( STDIN , ' %d ' , $ A ) ; fscanf ( STDIN , ' %d ' , $ B ) ; fscanf ( STDIN , ' %d ' , $ C ) ; fscanf ( STDIN , ' %d ' , $ X ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { $ total = 500 * $ i + 100 * $ j + 50 * $ k ; if ( $ total == $ X ) { $ count ++ ; } } } } print $ count ;
<?php $ num = 0 ; while ( $ line = fgets ( STDIN ) ) { $ num += ceil ( ( int ) trim ( $ line ) / 10 ) * 10 ; if ( substr ( trim ( $ line ) , - 1 ) != ' 0 ' ) { $ rest [ ] = substr ( trim ( $ line ) , - 1 ) ; } } $ d = min ( $ rest ) ; $ t = 10 ; if ( $ d == 0 ) { $ t = 0 ; } echo $ num - $ t + $ d ;
<?php $ is_honban = 1 ; if ( $ is_honban ) { $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ c = $ sc -> nextInt ( ) ; $ d = $ sc -> nextInt ( ) ; $ e = $ sc -> nextInt ( ) ; $ k = $ sc -> nextInt ( ) ; } else { error_reporting ( E_ERROR | E_WARNING | E_PARSE ) ; $ n = 8 ; $ q = 3 ; $ s = ' AABCBDBA ' ; $ t = array ( ' A ' , ' B ' , ' A ' ) ; $ d = array ( ' L ' , ' R ' , ' R ' ) ; } $ ans = 0 ; $ ans = ( $ e - $ a <= $ k ? " Yay! " : " :( " ) ; out :: println ( $ ans ) ; class Scanner { private $ arr = array ( ) ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function println ( $ str = " " ) { echo $ str . PHP_EOL ; } } ?>
<?php list ( $ A , $ B , $ C ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ A + $ B >= $ C ) { echo ' Yes ' ; } else { echo ' No ' ; }
<?php $ output = array ( ) ; while ( true ) { $ data = trim ( fgets ( STDIN ) ) ; if ( " 0 " == $ data ) { break ; } $ n = strlen ( $ data ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ num = intval ( $ data [ $ i ] ) ; $ sum += $ num ; } array_push ( $ output , $ sum ) ; } print implode ( " \n " , $ output ) ; ?>
<?php fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; fscanf ( STDIN , ' %d ' , $ arr [ ] ) ; $ min = $ arr [ 0 ] % 10 ; $ min_i = 0 ; foreach ( $ arr as $ i => $ v ) { $ d1 = $ v % 10 ; $ _arr [ ] = ( int ) ( ceil ( $ v / 10 ) * 10 ) ; if ( $ d1 > 0 && $ d1 < $ min ) { $ min = $ d1 ; $ min_i = $ i ; } } $ _arr [ $ min_i ] = $ arr [ $ min_i ] ; $ ans = array_sum ( $ _arr ) ; echo $ ans . PHP_EOL ;
<?php fscanf ( STDIN , " %d " , $ x ) ; echo $ x * $ x * $ x . " \n " ; ?>
<?php $ A = trim ( fgets ( STDIN ) ) ; $ B = trim ( fgets ( STDIN ) ) ; $ C = trim ( fgets ( STDIN ) ) ; $ X = trim ( fgets ( STDIN ) ) ; $ r = array ( ) ; for ( $ i = 0 ; $ i <= $ A ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ B ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ C ; $ k ++ ) { if ( ( $ i * 500 + $ j * 100 + $ k * 50 ) == $ X ) { $ r [ ] = $ i . " , " . $ j . " , " . $ k ; } } } } printf ( " %d \n " , count ( $ r ) ) ;
<?php list ( $ n , $ m ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; if ( $ n > $ m ) { if ( $ n == " 13 " && $ m == " 1 " ) { echo " Bob " ; } else { echo " Alice " ; } } else if ( $ n == $ m ) { echo " Draw " ; } else { if ( $ m == " 13 " && $ n == " 1 " ) { echo " Alice " ; } else { echo " Bob " ; } }
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( " " , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; $ this -> pointer ++ ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( double ) $ this -> next ( ) ; } } class out { public static function printIn ( $ str = " " ) { echo $ str . PHP_EOL ; } } $ sc = new Scanner ; $ K = $ sc -> nextInt ( ) ; $ S = $ sc -> nextInt ( ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ K ; $ x ++ ) { for ( $ y = 0 ; $ y <= $ K ; $ y ++ ) { $ z = $ S - $ x - $ y ; if ( 0 <= $ z && $ z <= $ K ) { $ count ++ ; } } } echo $ count ;
<?php $ T = trim ( fgets ( STDIN ) ) ; while ( true ) { $ sp_q = strpos ( $ T , ' ? ' ) ; if ( $ sp_q === FALSE ) { break ; } $ T = substr_replace ( $ T , ' D ' , $ sp_q , 1 ) ; } echo $ T ; ?>
<?php [ $ K ] = fscanf ( STDIN , " %d " ) ; for ( $ i = 0 ; $ i < $ K ; $ i ++ ) { echo " ACL " ; } ?>
<?php fscanf ( STDIN , " %d " , $ n ) ; $ numbers = fgets ( STDIN ) ; $ exploded_numbers = explode ( ' ' , trim ( $ numbers ) ) ; $ p = ( int ) round ( array_sum ( $ exploded_numbers ) / $ n ) ; $ sum = 0 ; foreach ( $ exploded_numbers as $ num ) { $ sum += pow ( $ num - $ p , 2 ) ; } echo $ sum ;
<?php fscanf ( STDIN , " %d " , $ r ) ; echo $ r * $ r ; ?>
<?php $ a = trim ( fgets ( STDIN ) ) ; $ b = trim ( fgets ( STDIN ) ) ; $ c = trim ( fgets ( STDIN ) ) ; $ x = trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ i = 0 ; $ i <= $ a ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ b ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ c ; $ k ++ ) { if ( 500 * $ i + 100 * $ j + 50 * $ k == $ x ) $ count ++ ; } } } echo $ count ; ?>
<?php class Scanner { private $ arr = [ ] ; private $ count = 0 ; private $ pointer = 0 ; public function next ( ) { if ( $ this -> pointer >= $ this -> count ) { $ str = trim ( fgets ( STDIN ) ) ; $ this -> arr = explode ( ' ' , $ str ) ; $ this -> count = count ( $ this -> arr ) ; $ this -> pointer = 0 ; } $ result = $ this -> arr [ $ this -> pointer ] ; ++ $ this -> pointer ; return $ result ; } public function hasNext ( ) { return $ this -> pointer < $ this -> count ; } public function nextInt ( ) { return ( int ) $ this -> next ( ) ; } public function nextDouble ( ) { return ( float ) $ this -> next ( ) ; } } $ sc = new Scanner ( ) ; $ a = $ sc -> nextInt ( ) ; $ b = $ sc -> nextInt ( ) ; $ h = $ sc -> nextInt ( ) ; $ m = $ sc -> nextInt ( ) ; $ cos_a = null ; $ hour_needle_degree_from_top = ( 60 * $ h + $ m ) / ( 60 * 12 ) * 360 ; $ minute_needle_degree_from_top = $ m / 60 * 360 ; $ deg_c = abs ( $ hour_needle_degree_from_top - $ minute_needle_degree_from_top ) ; $ cos_c = cos ( deg2rad ( $ deg_c ) ) ; $ c_square = $ a * $ a + $ b * $ b - 2 * $ a * $ b * $ cos_c ; $ c = sqrt ( $ c_square ) ; echo $ c . PHP_EOL ;
<?php $ n = intval ( fgets ( STDIN ) ) - 1 ; $ val = explode ( " " , str_replace ( " \n " , " " , fgets ( STDIN ) ) ) ; for ( $ i = $ n ; $ i >= 0 ; $ i -= 2 ) { echo $ val [ $ i ] . " " ; } for ( $ j = abs ( $ i + 1 ) ; $ j <= $ n ; $ j += 2 ) { echo $ val [ $ j ] . " " ; } ?>
<?php list ( $ N , $ K ) = explode ( " " , trim ( fgets ( STDIN ) ) ) ; printf ( " %d \n " , max ( 0 , $ N - $ K + 1 ) ) ;
<?php $ a = fgets ( STDIN ) ; echo $ a * $ a * $ a ; ?>
<?php fscanf ( STDIN , " %d%d%d " , $ a , $ b , $ c ) ; if ( $ a + $ b + $ c == 17 ) { echo ' YES ' ; } else { echo ' NO ' ; }
<?php fscanf ( STDIN , " %d " , $ n ) ; $ numbers = fgets ( STDIN ) ; $ exploded_numbers = explode ( ' ' , $ numbers ) ; $ count = 0 ; $ min = $ exploded_numbers [ 0 ] ; foreach ( $ exploded_numbers as $ key => $ val ) { if ( $ key - 1 >= 0 ) { if ( $ val <= $ min ) { $ min = $ val ; $ count ++ ; } } else { $ count ++ ; } } echo $ count ;
<?php fscanf ( STDIN , " %d " , $ x ) ; for ( $ i = - 300 ; $ i <= 300 ; ++ $ i ) { for ( $ j = - 300 ; $ j <= 300 ; ++ $ j ) { $ tmp = pow ( $ i , 5 ) - pow ( $ j , 5 ) ; if ( $ tmp == $ x ) { echo " $ i $ j " , PHP_EOL ; break 2 ; } } }
<?php # C - Exception Handling fscanf(STDIN, "%d", $N); $max = 0; $second = 0; $array = []; for ($i = 1; $i <= $N; $i++) { fscanf(STDIN, "%d", $a); $array[] = $a; if ($max < $a) { $second = $max; $max = $a; } elseif ($second < $a) { $second = $a; } } for ($i = 0; $i < $N; $i++) { if ($max == $array[$i]) { echo $second . PHP_EOL; continue; } echo $max . PHP_EOL; }
<?php $ num = trim ( fgets ( STDIN ) ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ num ) ; $ i ++ ) { $ sum += $ num [ $ i ] ; } echo $ num % $ sum == 0 ? " Yes " : " No " ;
<?php $ c_500 = ( int ) trim ( fgets ( STDIN ) ) ; $ c_100 = ( int ) trim ( fgets ( STDIN ) ) ; $ c_50 = ( int ) trim ( fgets ( STDIN ) ) ; $ total = ( int ) trim ( fgets ( STDIN ) ) ; $ count = 0 ; for ( $ x = 0 ; $ x <= $ c_500 ; ++ $ x ) { for ( $ y = 0 ; $ y <= $ c_100 ; ++ $ y ) { for ( $ z = 0 ; $ z <= $ c_50 ; ++ $ z ) { $ r = 500 * $ x + 100 * $ y + 50 * $ z ; if ( $ total === $ r ) ++ $ count ; } } } echo $ count ;
<?php fscanf ( STDIN , " %d%d " , $ alice , $ bob ) ; if ( $ alice == 1 && $ bob !== 1 ) { echo " Alice " ; } elseif ( $ alice !== 1 && $ bob == 1 ) { echo " Bob " ; } elseif ( $ alice == $ bob ) { echo " Draw " ; } elseif ( $ alice > $ bob ) { echo ' Alice ' ; } else { echo ' Bob ' ; }
<?php $ t = trim ( fgets ( STDIN ) ) ; $ i = 0 ; $ c = strlen ( $ t ) ; while ( $ i < $ c ) { echo ( $ t [ $ i ] == " ? " ) ? " D " : $ t [ $ i ] ; ++ $ i ; }
<?php $ k = ( int ) trim ( fgets ( STDIN ) ) ; $ s = trim ( fgets ( STDIN ) ) ; if ( strlen ( $ s ) <= $ k ) { echo $ s ; exit ; } echo substr ( $ s , 0 , $ k ) . ' ... ' ;
<?php fscanf ( STDIN , " %d %d " , $ total_dis , $ dim_count ) ; $ arr = [ ] ; for ( $ i = 0 ; $ i < $ total_dis ; ++ $ i ) { $ arr [ ] = array_map ( " intval " , explode ( " " , trim ( fgets ( STDIN ) ) ) ) ; } $ count = 0 ; for ( $ i = 0 ; $ i < $ total_dis - 1 ; ++ $ i ) { for ( $ j = $ i ; $ j < $ total_dis ; ++ $ j ) { if ( $ i == $ j ) { continue ; } $ count += distance ( $ arr [ $ i ] , $ arr [ $ j ] ) ; } } echo $ count , " \n " ; function distance ( $ a , $ b ) { global $ dim_count ; $ total = 0 ; for ( $ i = 0 ; $ i < $ dim_count ; ++ $ i ) { $ total += pow ( abs ( $ a [ $ i ] - $ b [ $ i ] ) , 2 ) ; } if ( sqrt ( $ total ) == floor ( sqrt ( $ total ) ) ) { return 1 ; } return 0 ; }
<?php $ t = fgets ( STDIN ) ; $ t = preg_replace ( " /\?/ " , " D " , $ t ) ; echo $ t ;
package main import ( " " " fmt " " os " " strconv " " Yes " " No " " Yes " " No "
package main import ( " " ) func main ( ) { var ( a , b , c , d , e , k int ) fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { a := make ( [ ] int , 5 ) for i := 0 ; i < 5 ; i ++ { fmt . Scan ( & a [ i ] ) } var k int fmt . Scan ( & k ) for i := 0 ; i < 4 ; i ++ { for j := i + 1 ; j < 5 ; j ++ { if v := a [ j ] - a [ i ] ; v > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a ) fmt . Scan ( & b ) fmt . Scan ( & c ) fmt . Scan ( & d ) fmt . Scan ( & e ) fmt . Scan ( & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Print ( " " ) } }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) switch { case a >= 13 : fmt . Println ( b ) case a <= 12 && a >= 6 : fmt . Println ( b / 2 ) default : fmt . Println ( 0 ) } }
package main import ( " " " " ) func main ( ) { var input string fmt . Scanln ( & input ) var i , _ = strconv . ParseInt ( input , 10 , 0 ) fmt . Println ( i * i * i ) }
package main import " " func main ( ) { var t1 , t2 , a1 , a2 , b1 , b2 int fmt . Scan ( & t1 , & t2 , & a1 , & a2 , & b1 , & b2 ) a1 , a2 = a1 * t1 , a2 * t2 b1 , b2 = b1 * t1 , b2 * t2 if a1 < b1 { a1 , b1 = b1 , a1 a2 , b2 = b2 , a2 } if a1 + a2 == b1 + b2 { fmt . Println ( " " ) return } if a1 + a2 > b1 + b2 { fmt . Println ( 0 ) return } x := a1 - b1 y := ( b1 + b2 ) - ( a1 + a2 ) if x % y == 0 { fmt . Println ( x / y * 2 ) } else { fmt . Println ( x / y * 2 + 1 ) } }
package main import ( " " " fmt " " io " " math " " os " " strconv "
package main import ( " " " fmt " " os "
package main import " " func min ( a , b int ) int { if a < b { return a } return b } func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) for i := range X { fmt . Scan ( & X [ i ] ) } ans := int ( 1e18 ) for p := 1 ; p <= 100 ; p ++ { cost := 0 for i := 0 ; i < N ; i ++ { cost += ( X [ i ] - p ) * ( X [ i ] - p ) } ans = min ( ans , cost ) } fmt . Println ( ans ) }
package main import ( " " ) func main ( ) { var n [ 3 ] int var s = [ ] int { 5 , 7 , 5 } for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & n [ i ] ) } for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < len ( s ) ; j ++ { if n [ i ] == s [ j ] { s = append ( s [ : j ] , s [ j + 1 : ] ... ) break } } } if len ( s ) == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " Yes " " No "
package main import " " func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " io " " os " " strconv " " % d " " 0 " ) } } func main ( ) { answer ( os . Stdin , os . Stdout ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) return } if a <= 12 { fmt . Println ( b / 2 ) return } fmt . Println ( b ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := range xs { fmt . Scan ( & xs [ i ] ) } min := int ( 1e9 ) for i := 1 ; i <= 100 ; i ++ { var sum int for j := range xs { d := ( xs [ j ] - i ) sum += d * d } if sum < min { min = sum } } fmt . Println ( min ) }
package main import " " func main ( ) { s := make ( [ ] int , 5 ) for i := range s { fmt . Scan ( & s [ i ] ) } var k int fmt . Scan ( & k ) for i := range s { for j := i + 1 ; j < 5 ; j ++ { if s [ j ] - s [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " bytes " " fmt " " os " " strconv " " strings " " io . nextToken < len ( io . tokens ) " " % v " " " " \n " , a . . . ) } func Max ( numbers ... int ) int { max := numbers [ 0 ] for i , number := range numbers { if i == 0 { continue } if number > max { max = number } } return max } func Min ( numbers ... int ) int { max := numbers [ 0 ] for i , number := range numbers { if i == 0 { continue } if max > number { max = number } } return max } func DigitSum ( n int ) int { if n < 0 { return - 1 } res := 0 for n > 0 { res += n % 10 n /= 10 } return res } func Sum ( numbers ... int ) int { sum := 0 for _ , number := range numbers { sum + = number } return sum }
package main import ( " " " " ) func main ( ) { a := make ( [ ] int , 3 ) fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] ) sort . Ints ( a ) fmt . Println ( a [ 2 ] - a [ 0 ] ) }
package main import " " func main ( ) { var K , S , cnt int fmt . Scanf ( " % d % d "
package main import ( " " " os " " bufio " " strconv " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " sort " " NO " " YES "
package main import ( " " " fmt " " io " " os " " strconv "
package main import . " " import . " " func main ( ) { var n int var l [ ] int l = [ ] int { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 } Scan ( & n ) for i := 0 ; i < 7 ; i ++ { if l [ i ] <= n && n < l [ i + 1 ] { Println ( l [ i ] ) Exit ( 0 ) } } }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n , k int fmt . Scan ( & n , & k ) fmt . Println ( n % k ) }
package main import ( " " " os " " strconv " " strings " " math " " sort " " fmt " " "
package main import ( " " ) func main ( ) { var ( K int S int ) var count = 0 fmt . Scan ( & K , & S ) for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - x - y if 0 <= z && z <= K { count += 1 } } } fmt . Println ( count ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func scanNums ( len int ) ( nums [ ] int ) { var num int for i := 0 ; i < len ; i ++ { fmt . Scan ( & num ) nums = append ( nums , num ) } return } func main ( ) { nums := scanNums ( 5 ) var k int fmt . Scan ( & k ) if nums [ 4 ] - nums [ 0 ] > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { arr := make ( [ ] int , 3 ) fmt . Scan ( & arr [ 0 ] , & arr [ 1 ] , & arr [ 2 ] ) sort . Ints ( arr ) fmt . Println ( arr [ 1 ] - arr [ 0 ] + arr [ 2 ] - arr [ 1 ] ) }
package main import ( " " ) func solve ( a , b int ) int { switch { case a < 6 : return 0 case a <= 12 : return b / 2 default : return b } } func main ( ) { var a , b int fmt . Scanln ( & a , & b ) ans := solve ( a , b ) fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b [ 4 ] int var c [ 3 ] [ 3 ] int for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { fmt . Scan ( & c [ i ] [ j ] ) } } for a [ 1 ] = 0 ; a [ 1 ] <= c [ 0 ] [ 0 ] ; a [ 1 ] ++ { for a [ 2 ] = 0 ; a [ 2 ] <= c [ 1 ] [ 0 ] ; a [ 2 ] ++ { Po : for a [ 3 ] = 0 ; a [ 3 ] <= c [ 2 ] [ 0 ] ; a [ 3 ] ++ { b [ 1 ] = c [ 0 ] [ 0 ] - a [ 1 ] b [ 2 ] = c [ 1 ] [ 1 ] - a [ 2 ] b [ 3 ] = c [ 2 ] [ 2 ] - a [ 3 ] for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 3 ; j ++ { if c [ i ] [ j ] != a [ i + 1 ] + b [ j + 1 ] { continue Po } } } fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 var mr , hr , r , c float64 fmt . Scan ( & a , & b , & h , & m ) mr = m * 6 hr = h * 30 + m / 2 if mr - hr > hr - mr { r = hr - mr } else { r = mr - hr } if r < 0 { r += 360 } rn := ( r / 180 ) * math . Pi c = math . Sqrt ( a * a + b * b - 2 * a * b * math . Cos ( rn ) ) fmt . Print ( c ) }
package main import ( " " " fmt " " os " " strconv " " Four " " Three "
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " io " " os " " strconv " " Scan failed " " Scan failed "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import " " func calc ( n int ) ( m int ) { m = 1 for { if t := m * 2 ; n >= t { m = t } else { break } } return } func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( calc ( n ) ) }
package main import " " import " " func main ( ) { var A , B , H , M float64 var theta float64 = 0 var temp float64 fmt . Scan ( & A , & B , & H , & M ) temp = 60 * H + M theta = temp / 720 - M / 60 fmt . Println ( math . Sqrt ( A * A + B * B - 2 * A * B * ( math . Cos ( 2 * math . Pi * theta ) ) ) ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) } else if a >= 13 { fmt . Println ( b ) } else { fmt . Println ( b / 2 ) } }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) X := make ( [ ] int , N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & X [ i ] ) } min := exec ( X ) fmt . Println ( min ) } func exec ( X [ ] int ) int { var sum , min int min = 1000000000000 for p := 1 ; p <= 100 ; p ++ { sum = 0 for _ , v := range X { sum += ( v - p ) * ( v - p ) } if sum < min { min = sum } } return min }
package main import ( " " " fmt " " log " " os " " strconv " " strings " \n \n \n \n \n \n " \n " ) eStr = strings . Trim ( eStr , " \n " ) kStr = strings . Trim ( kStr , " \n " ) a , err := strconv . Atoi ( aStr ) if err != nil { log . Fatalln ( err ) } e , err := strconv . Atoi ( eStr ) if err != nil { log . Fatalln ( err ) } k , err := strconv . Atoi ( kStr ) if err != nil { log . Fatalln ( err ) } if e - a > k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " math " " strconv " " % g "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a <= 5 { fmt . Println ( 0 ) } else if a <= 12 { fmt . Println ( b / 2 ) } else { fmt . Println ( b ) } }
package main import " " func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { if 0 <= s - ( i + j ) && s - ( i + j ) <= k { ans ++ } } } fmt . Println ( ans ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) ans := 0 if 6 <= a && a <= 12 { ans = b / 2 } else if 13 <= a { ans = b } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var N , M int fmt . Scan ( & N ) fmt . Scan ( & M ) A := make ( [ ] string , N ) B := make ( [ ] string , M ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & A [ i ] ) } for i := 0 ; i < M ; i ++ { fmt . Scan ( & B [ i ] ) } for y := 0 ; y < N ; y ++ { for x := 0 ; x < N ; x ++ { flag := true for i := 0 ; i < M && flag ; i ++ { for j := 0 ; j < M && flag ; j ++ { if y + i >= N || x + j >= N { flag = false break } if A [ y + i ] [ x + j ] != B [ i ] [ j ] { flag = false break } if i == M - 1 && j == M - 1 { fmt . Println ( " " ) return } } } } } fmt . Println ( " " ) }
package main import ( " " " os " " bufio " " strings " " strconv " " math " " " " " " " " " " Yes " " No " " No " " No "
package main import " " func main ( ) { var N int fmt . Scan ( & N ) for h := 1 ; h <= 3500 ; h ++ { for n := 1 ; n <= 3500 ; n ++ { if 4 * n * h - N * n - N * h > 0 && ( n * h * N ) % ( 4 * n * h - N * n - N * h ) == 0 { w := ( n * h * N ) / ( 4 * n * h - N * n - N * h ) fmt . Println ( h , w , n ) return } } } }
package main import " " func main ( ) { var a , o , e , k int fmt . Scan ( & a , & o , & o , & o , & e , & k ) if e - a > k { fmt . Println ( " " ) return } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var k int var s int fmt . Scan ( & k ) fmt . Scan ( & s ) count := 0 for i := 0 ; i <= k ; i ++ { c := k if s - i < k { c = s - i } for j := 0 ; j <= c ; j ++ { if s - i - j <= k { count ++ } } } fmt . Println ( count ) }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) for i := 0 ; i < n ; i ++ { var s string fmt . Scan ( & s ) if s == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % s = % + v \n " , name , value ) } func main ( ) { io := NewIo ( ) defer io . Flush ( ) N := io . NextInt ( ) M := io . NextInt ( ) A := make ( [ ] string , N ) for i := 0 ; i < N ; i ++ { A [ i ] = io . Next ( ) } B := make ( [ ] string , M ) for i := 0 ; i < M ; i ++ { B [ i ] = io . Next ( ) } ans := false for i := 0 ; i + M <= N ; i ++ { for j := 0 ; j + M <= N ; j ++ { ok := true for y := 0 ; y < M ; y ++ { for x := 0 ; x < M ; x ++ { if B [ y ] [ x ] != A [ y + i ] [ x + j ] { ok = false } } } if ok { ans = true } } } if ans { io . PrintLn ( " " ) } else { io . PrintLn ( " " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! "
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) mx := b * math . Cos ( 6 * m * math . Pi / 180 ) my := b * math . Sin ( 6 * m * math . Pi / 180 ) hrad := 360 * ( h / 12 ) + 30 * ( m / 60 ) hx := a * math . Cos ( hrad * math . Pi / 180 ) hy := a * math . Sin ( hrad * math . Pi / 180 ) calc := ( mx - hx ) * ( mx - hx ) + ( my - hy ) * ( my - hy ) fmt . Println ( math . Sqrt ( calc ) ) }
package main import " " func main ( ) { var n int fmt . Scan ( & n ) ans := 1 v := 2 for v <= n { ans = v v *= 2 } fmt . Println ( ans ) }
package main import ( " " " fmt " " log " " math " " os " " strconv "
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := range arr { arr [ i ] = make ( [ ] int , 3 ) for j := range arr [ i ] { fmt . Scan ( & arr [ i ] [ j ] ) } } t1 := arr [ 0 ] [ 1 ] - arr [ 0 ] [ 0 ] t2 := arr [ 0 ] [ 2 ] - arr [ 0 ] [ 1 ] s1 := arr [ 1 ] [ 0 ] - arr [ 0 ] [ 0 ] s2 := arr [ 2 ] [ 0 ] - arr [ 1 ] [ 0 ] for i := range arr { if arr [ i ] [ 1 ] - arr [ i ] [ 0 ] != t1 || arr [ i ] [ 2 ] - arr [ i ] [ 1 ] != t2 { fmt . Println ( " " ) return } if arr [ 1 ] [ i ] - arr [ 0 ] [ i ] != s1 || arr [ 2 ] [ i ] - arr [ 1 ] [ i ] != s2 { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " strconv " " os " " bufio " " math "
package main import ( " " " os " " bufio " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scanf ( " % d % d % d % d % d "
package main import ( " " ) func min3500 ( x int ) int { if x < 3500 { return x } else { return 3500 } } func main ( ) { var N int fmt . Scan ( & N ) if N % 2 == 0 { fmt . Println ( N / 2 , N , N ) } else if N % 3 == 0 { fmt . Println ( N / 3 , 2 * N , 2 * N ) } else { w := 0 for h := N / 4 ; h <= min3500 ( 3 * N / 4 ) ; h ++ { for n := ( N * h ) / ( 4 * h - N ) ; n <= min3500 ( ( 2 * N * h ) / ( 4 * h - N ) ) ; n ++ { if 4 * h * n - N * ( h + n ) <= 0 { continue } if N * h * n % ( 4 * h * n - N * ( h + n ) ) != 0 { continue } w = N * h * n / ( 4 * h * n - N * ( h + n ) ) fmt . Println ( h , n , w ) break } if w != 0 { break } } } }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if ( a + b == 12 || a + b == 10 ) && a + b + c == 17 && a % 2 != 0 && b % 2 != 0 && c % 2 != 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import ( " " ) var a , b , c int func main ( ) { fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 7 ] == 1 && m [ 5 ] == 2 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " " ) func main ( ) { var a , b float64 var h , m float64 fmt . Scan ( & a , & b , & h , & m ) mc := m * 6.0 hc := ( 360 / 12 ) * h + mc / 12 if mc == hc { fmt . Println ( math . Abs ( b - a ) ) return } ang := math . Abs ( mc - hc ) if ang > 180 { ang = 360 - ang } c2 := math . Pow ( a , 2 ) + math . Pow ( b , 2 ) - 2 * a * b * math . Cos ( math . Pi * ang / 180 ) r := math . Sqrt ( c2 ) fmt . Println ( r ) }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " time " " Asia / Tokyo " " % d % d % d % d % d "
package main import ( " " " fmt " " os " " strconv " " : ( " " Yay ! " ) } }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " " " Yes " " No " " YES " " NO " " yes " " no "
package main import " " func main ( ) { arr := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { arr [ i ] = make ( [ ] int , 3 ) } fmt . Scan ( & arr [ 0 ] [ 0 ] , & arr [ 0 ] [ 1 ] , & arr [ 0 ] [ 2 ] ) fmt . Scan ( & arr [ 1 ] [ 0 ] , & arr [ 1 ] [ 1 ] , & arr [ 1 ] [ 2 ] ) fmt . Scan ( & arr [ 2 ] [ 0 ] , & arr [ 2 ] [ 1 ] , & arr [ 2 ] [ 2 ] ) line1 := make ( [ ] int , 3 ) line2 := make ( [ ] int , 3 ) line3 := make ( [ ] int , 3 ) line4 := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { line1 [ i ] = arr [ 0 ] [ i ] - arr [ 1 ] [ i ] line2 [ i ] = arr [ 1 ] [ i ] - arr [ 2 ] [ i ] } for i := 0 ; i < 3 ; i ++ { line3 [ i ] = arr [ i ] [ 0 ] - arr [ i ] [ 1 ] line4 [ i ] = arr [ i ] [ 1 ] - arr [ i ] [ 2 ] } result := 1 val1 := line1 [ 0 ] val2 := line2 [ 0 ] val3 := line3 [ 0 ] val4 := line4 [ 0 ] for i := 0 ; i < 3 ; i ++ { if line1 [ i ] != val1 { result = 0 } if line2 [ i ] != val2 { result = 0 } if line3 [ i ] != val3 { result = 0 } if line4 [ i ] != val4 { result = 0 } } if result == 0 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " strconv " " Y " " Four " " Three "
package main import ( " " " fmt " " os " " strings " " 5 " ) = = 2 && strings . Count ( s . Text ( ) , " " ) == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { a := 0 b := 0 n := 0 fmt . Scanf ( " " , & a , & b ) if a <= 5 { n = 0 } else if a >= 13 { n = b } else { n = b / 2 } fmt . Printf ( " " , n ) }
package main import ( " " " fmt " " os " " strconv " " % v \n " , " " ) return } b := nextInt ( ) if b != 5 && b != 7 { fmt . Printf ( " \n " , " " ) return } c := nextInt ( ) if c != 5 && c != 7 { fmt . Printf ( " \n " , " " ) return } if a + b + c != 17 { fmt . Printf ( " \n " , " " ) return } fmt . Printf ( " \n " , " " ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " log " " math " " os " " sort " " strconv "
package main import ( " " " fmt " " os " " strconv " " No " " Yes "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " strings " " % s = % + v \n " , name , value ) } func ExampleIo ( ) { io := NewIo ( ) defer io . Flush ( ) a := make ( [ ] int , 0 , 3 ) a [ 0 ] , a [ 1 ] , a [ 2 ] = io . NextInt ( ) , io . NextInt ( ) , io . NextInt ( ) io . Println ( a ) io . PrintIntSlice ( a ) Log ( " " , a ) }
package main import " " func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) ans := ( h2 * 60 + m2 ) - ( h1 * 60 + m1 ) - k fmt . Println ( ans ) }
package main import " " var n , m int var arr [ ] int var par [ ] int func main ( ) { fmt . Scan ( & n , & m ) arr = make ( [ ] int , n ) par = make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { var j int fmt . Scan ( & j ) arr [ i ] = j - 1 par [ i ] = i } for i := 0 ; i < m ; i ++ { var a , b int fmt . Scan ( & a , & b ) union ( a - 1 , b - 1 ) } ans := 0 for i := 0 ; i < n ; i ++ { ra , rb := root ( i ) , root ( arr [ i ] ) if ra == rb { ans + = 1 } } fmt . Println ( ans ) } func root ( x int ) int { if x == par [ x ] { return x } xx := root ( par [ x ] ) par [ x ] = xx return xx } func union ( a , b int ) { if a > b { a , b = b , a } ra , rb := root ( a ) , root ( b ) if ra != rb { par [ ra ] = rb } }
package main import " " func main ( ) { var k , s , cnt int fmt . Scanf ( " % d % d " " % d "
package main import ( " " ) func main ( ) { var K , S int fmt . Scan ( & K , & S ) cnt := 0 for x := 0 ; x <= K ; x ++ { for y := 0 ; y <= K ; y ++ { z := S - ( x + y ) if 0 <= z && z <= K { cnt + + } } } fmt . Println ( cnt ) }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) xs := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & xs [ i ] ) } min := math . Inf ( 0 ) for p := 0 ; p <= 100 ; p ++ { var sum float64 for _ , x := range xs { sum += math . Pow ( float64 ( x - p ) , 2 ) } if min > sum { min = sum } } fmt . Println ( int ( min ) ) }
package main import ( " " " math " " Yes " " No "
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var N int fmt . Scanf ( " % d "
package main import " " func main ( ) { var a int fmt . Scan ( & a ) fmt . Println ( a * a * a ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var n int fmt . Scan ( & n ) p := make ( [ ] int , n ) for i := range p { fmt . Scan ( & p [ i ] ) } var m , ans int for i , v := range p { if i == 0 || v < m { m = v } if p [ i ] == m { ans ++ } } fmt . Println ( ans ) }
package main import ( " " " fmt " " io " " os " " sort " " strconv " \n \r \t
package main import " " func main ( ) { var K , S , count int fmt . Scan ( & K , & S ) for X := 0 ; X <= K ; X ++ { for Y := 0 ; Y <= K ; Y ++ { Z := S - X - Y if X + Y + Z == S && Z >= 0 && K >= Z { count + = 1 } } } fmt . Println ( count ) }
package main import " " import " " func main ( ) { var n int var a [ ] int fmt . Scan ( & n ) a = make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & a [ i ] ) } sort . Ints ( a ) fmt . Println ( a [ n - 1 ] - a [ 0 ] ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) switch { case a <= 5 : fmt . Println ( 0 ) case a <= 12 : fmt . Println ( b / 2 ) default : fmt . Println ( b ) } }
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d " " % d "
package main import ( " " " fmt " " math " " os " " strconv " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " : ( " " Yay ! " ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if e - a <= k { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var N int fmt . Scan ( & N ) n := 1 var m int for i := 2 ; i <= N ; i ++ { for j := 1 ; ; j ++ { if i % ( pow ( 2 , j ) ) != 0 { if j > m { n , m = i , j - 1 } break } } } fmt . Println ( n ) } func pow ( n int , p int ) int { r := n for i := 1 ; i < p ; i ++ { r = r * n } return r }
package main import ( " " " fmt " " os " " sort " " strconv " " Yes " " No " " No " " No " " No " " No " " No " " No " " No "
package main import ( " " " fmt " " os " " strconv " " strings " " " " "
package main import " " func main ( ) { var A , B , ans int fmt . Scan ( & A , & B ) if A <= 5 { ans = 0 } else if 6 <= A && A <= 12 { ans = B / 2 } else { ans = B } fmt . Println ( ans ) }
package main import " " func main ( ) { var five , seven int var a , b , c int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { c := make ( [ ] int , 9 ) for i := 0 ; i < 9 ; i ++ { fmt . Scan ( & c [ i ] ) } for a1 := - 1000 ; a1 <= 1000 ; a1 ++ { invalid := false b1 := c [ 0 ] - a1 b2 := c [ 1 ] - a1 b3 := c [ 2 ] - a1 a2 := c [ 3 ] - b1 if c [ 4 ] - b2 != a2 { invalid = true } if c [ 5 ] - b3 != a2 { invalid = true } a3 := c [ 6 ] - b1 if c [ 7 ] - a3 != b2 { invalid = true } if c [ 8 ] - a3 != b3 { invalid = true } if ! invalid { fmt . Println ( " " ) return } } fmt . Println ( " " ) return }
package main import ( " " " bytes " " fmt " " io " " os " " strconv " \t \n \v \f \r \n \r \n
package main import ( " " ) func main ( ) { var k , s int fmt . Scan ( & k ) fmt . Scan ( & s ) ans := 0 for i := 0 ; i <= k ; i ++ { for j := 0 ; j <= k ; j ++ { t := s - ( i + j ) if 0 <= t && t <= k { ans + + } } } fmt . Println ( ans ) }
package main import " " func max ( x , y int ) int { if x > y { return x } return y } func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) x := h2 * 60 + m2 - ( h1 * 60 + m1 ) fmt . Println ( max ( x - k , 0 ) ) }
package main import ( " " ) func main ( ) { var k , s , ans int fmt . Scan ( & k , & s ) for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - x - y if 0 <= z && z <= k { ans + + } } } fmt . Println ( ans ) }
package main import ( " " " " ) func main ( ) { var a , b , h , m float64 fmt . Scan ( & a , & b , & h , & m ) r := math . Abs ( m * 360.0 / 60 - ( h * 60.0 + m ) * 360.0 / ( 60.0 * 12.0 ) ) * math . Pi / 180.0 x := a * a + b * b - 2 * a * b * math . Cos ( r ) fmt . Println ( math . Sqrt ( x ) ) }
package main import " " func solve ( ) { var N int fmt . Scan ( & N ) po := 1 for po <= N { po *= 2 } fmt . Println ( po / 2 ) } func main ( ) { solve ( ) } func min ( a , b int ) int { if a < b { return a } return b } func max ( a , b int ) int { if a > b { return a } return b } func abs ( a int ) int { if a < 0 { return - a } return a }
package main import ( " " " fmt " " os " " Four " " Three "
package main import " " func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) if b < a { a , b = b , a } if c < b { b , c = c , b } if a == 5 && b == 5 && c == 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " " ) func main ( ) { var n int var p int fmt . Scan ( & n ) fmt . Scan ( & p ) if n == 1 { fmt . Println ( p ) return } result := p end := int ( math . Pow ( float64 ( p ) , float64 ( 1.0 ) / float64 ( n ) ) ) for i := 1 ; i <= end ; i ++ { pow := int ( math . Floor ( ( math . Pow ( float64 ( i ) , float64 ( n ) ) ) ) ) if ( p % pow ) == 0 { result = i } } fmt . Println ( result ) }
package main import ( " " " fmt " " os " " strconv "
package main import " " func main ( ) { var x int fmt . Scanf ( " % d "
package main import ( " " ) func main ( ) { var a int fmt . Scan ( & a ) var b int fmt . Scan ( & b ) var c int fmt . Scan ( & c ) args := make ( [ ] int , 3 ) args [ 0 ] = a args [ 1 ] = b args [ 2 ] = c if len ( args ) != 3 { fmt . Println ( len ( args ) ) fmt . Println ( " " ) return } m := make ( map [ int ] int ) for _ , v := range args { if m [ v ] == 0 { m [ v ] = 1 } else { m [ v ] = m [ v ] + 1 } } if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import " " func main ( ) { var k , s int fmt . Scan ( & k , & s ) var cnt int for x := 0 ; x <= k ; x ++ { for y := 0 ; y <= k ; y ++ { z := s - ( x + y ) if x + y <= s && z <= k { cnt + = 1 } } } fmt . Println ( cnt ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var N int var S string var res string = " " fmt . Scan ( & N ) for i := 0 ; i < N ; i ++ { fmt . Scan ( & S ) if S == " " { res = " " } } fmt . Println ( res ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var a1 , a2 , a3 int fmt . Scanf ( " % d % d % d "
package main import " " import " " func main ( ) { var n int fmt . Scan ( & n ) t := make ( [ ] int , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & t [ i ] ) } sum := 0 for i := 0 ; i < n ; i ++ { sum += t [ i ] } f := float64 ( sum ) / float64 ( n ) b := f - float64 ( int ( f ) ) var y int if b >= 0.5 { y = int ( math . Ceil ( f ) ) } else { y = int ( math . Floor ( f ) ) } csum := 0 for i := 0 ; i < n ; i ++ { csum += ( t [ i ] - y ) * ( t [ i ] - y ) } fmt . Println ( csum ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var n , m int var s string fmt . Scan ( & n , & m ) a := make ( [ ] int64 , n ) b := make ( [ ] int64 , m ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s ) for j := 0 ; j < n ; j ++ { if s [ j : j + 1 ] == " " { a [ i ] |= 1 << uint ( j ) } } } for i := 0 ; i < m ; i ++ { fmt . Scan ( & s ) for j := 0 ; j < m ; j ++ { if s [ j : j + 1 ] == " " { b [ i ] |= 1 << uint ( j ) } } } for i := 0 ; i < n - m + 1 ; i ++ { Mid : for j := 0 ; j < n - m + 1 ; j ++ { for k := 0 ; k < m ; k ++ { if ( ( a [ i + k ] >> uint ( j ) ) & b [ k ] ) != b [ k ] { continue Mid } } fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var nn int fmt . Scanf ( " % d " " % d " " % v \n " , result ) }
package main import ( " " " os " " bufio " " strings " " strconv " " "
package main import ( " " " fmt " " os " " strconv " " strings " " " " Yes " " No " " Yes " " No "
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " math " " % d % d % d % d "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import " " func main ( ) { A := make ( [ ] int , 6 ) for i := 0 ; i < 6 ; i ++ { fmt . Scanf ( " " , & A [ i ] ) } if A [ 4 ] - A [ 0 ] > A [ 5 ] { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " bufio " " os " " strconv "
package main import " " func main ( ) { var age int var money int fmt . Scan ( & age ) fmt . Scan ( & money ) if age >= 13 { fmt . Printf ( " " , money ) } else if ( 6 <= age ) && ( age <= 12 ) { fmt . Printf ( " " , money / 2 ) } else if age <= 5 { money = 0 ; fmt . Printf ( " " , money ) } }
package main import ( " " " " ) func main ( ) { nums := make ( [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { fmt . Scan ( & nums [ i ] ) } sort . Ints ( nums ) fmt . Println ( nums [ 2 ] - nums [ 0 ] ) }
package main import ( " " " fmt " " math " " os " " reflect " " sort " " strconv " " strings " " "
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) if a >= 13 { fmt . Println ( b ) return } if a >= 6 && a <= 12 { fmt . Println ( b / 2 ) return } fmt . Println ( 0 ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) m := make ( map [ int ] int ) m [ a ] + + m [ b ] + + m [ c ] + + if m [ 5 ] == 2 && m [ 7 ] == 1 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " ) func main ( ) { var i int fmt . Scan ( & i ) fmt . Println ( i * i * i ) }
package main import " " import " " func main ( ) { var n , m int fmt . Scan ( & n , & m ) A := make ( [ ] [ ] string , 0 , 0 ) B := make ( [ ] [ ] string , 0 , 0 ) for i := 0 ; i < n ; i ++ { var tmp string fmt . Scan ( & tmp ) tmpString := strings . Split ( tmp , " " ) A = append ( A , tmpString ) } for i := 0 ; i < m ; i ++ { var tmp string fmt . Scan ( & tmp ) tmpString := strings . Split ( tmp , " " ) B = append ( B , tmpString ) } result := true for i := 0 ; i <= n - m ; i ++ { for j := 0 ; j <= n - m ; j ++ { result = true for k := 0 ; k < m ; k ++ { for l := 0 ; l < m ; l ++ { if B [ k ] [ l ] != A [ i + k ] [ j + l ] { result = false } } } if result { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scan ( & a , & b , & c ) n := a * b * c if n == 5 * 5 * 7 { fmt . Println ( " " ) } else { fmt . Println ( " " ) } } func min32 ( a , b int ) int { if a >= b { return b } return a } func max32 ( a , b int ) int { if a >= b { return a } return b } func min64 ( a , b int64 ) int64 { if a >= b { return b } return a } func max64 ( a , b int64 ) int64 { if a >= b { return a } return b } func gcd ( a , b int64 ) int64 { if a % b == 0 { return b } else { return gcd ( b , a % b ) } } func lcm ( a , b int64 ) int64 { return a / gcd ( a , b ) * b }
package main import ( " " " fmt " " os " " strconv " " strings "
package main import ( " " " fmt " " os " " sort " " strconv "
package main import ( " " " fmt " " math " " os " " strconv "
package main import " " func main ( ) { var x int fmt . Scan ( & x ) var y = x * x * x fmt . Println ( y ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " fmt " " math " " os " " strconv " " strings " " fresult " " % s = % + v \n " , name , value ) }
package main import " " func main ( ) { var a , b int fmt . Scan ( & a , & b ) ans := 0 if 6 <= a && a <= 12 { ans = b / 2 } else if 13 <= a { ans = b } fmt . Println ( ans ) }
package main import " " func main ( ) { c := make ( [ ] [ ] int , 3 ) for i := 0 ; i < 3 ; i ++ { tmp := make ( [ ] int , 3 ) fmt . Scan ( & tmp [ 0 ] , & tmp [ 1 ] , & tmp [ 2 ] ) c [ i ] = tmp } if checkRow ( diff ( c , 1 , 0 ) ) && checkCol ( diff ( c , 0 , 1 ) ) { fmt . Println ( " " ) return } fmt . Println ( " " ) } func checkRow ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { row := diff [ i ] if len ( row ) == 0 { continue } ans := row [ 0 ] for j := 1 ; j < len ( row ) ; j ++ { if ans != diff [ i ] [ j ] { return false } } } return true } func checkCol ( diff [ ] [ ] int ) bool { for i := 0 ; i < 3 ; i ++ { ans := diff [ 0 ] [ i ] for j := 1 ; j < len ( diff ) ; j ++ { if ans != diff [ j ] [ i ] { return false } } } return true } func diff ( c [ ] [ ] int , slideI , slicdJ int ) [ ] [ ] int { diffs := make ( [ ] [ ] int , 3 ) for i := slideI ; i < len ( c ) ; i ++ { diffs [ i ] = make ( [ ] int , 3 ) for j := slicdJ ; j < len ( c [ i ] ) ; j ++ { diffs [ i ] [ j ] = c [ i ] [ j ] - c [ i - slideI ] [ j - slicdJ ] } } return diffs }
package main import ( " " ) func main ( ) { var a , b , c int five := 0 seven := 0 fmt . Scanf ( " % d " " % d " " % d " " NO " if five == 2 && seven == 1 { ans = " " } fmt . Printf ( " " , ans ) }
package main import ( " " ) func main ( ) { var x , y , z int fmt . Scanf ( " % d % d % d " " YES " ) } else { fmt . Println ( " " ) } }
package main import ( " " " os " " NO " " YES " " NO "
package main import ( " " " errors " " fmt " " io " " os " " strconv " " Scan failed " " % b " " [ argument error ] : PowInt does not accept negative integers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Gcd only accepts two NATURAL numbers " " [ argument error ] : Strtoi only accepts integer string "
package main import ( " " " fmt " " math " " os " " strconv " " no values " " no values "
package main import ( " " ) func main ( ) { var k , s int64 num := 0 fmt . Scan ( & k , & s ) var x , y , z int64 for x = 0 ; x <= k ; x ++ { for y = x ; y <= k ; y ++ { for z = y ; z <= k ; z ++ { if x + y + z == s { num += getNum ( x , y , z ) } } } } fmt . Println ( num ) } func getNum ( x , y , z int64 ) int { num := 0 if x == y && y == z { num = 1 } else if ( x == y && x != z ) || ( x == z && x != y ) || ( y == z && x != y ) { num = 3 } else { num = 6 } return num }
package main import ( " " ) func main ( ) { var a , b , c int fmt . Scanf ( " % d % d % d " " YES \n " ) } else { fmt . Printf ( " \n " ) } } else if b == c { if b == 5 && a == 7 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } } else if a == c { if a == 5 && b == 7 { fmt . Printf ( " \n " ) } else { fmt . Printf ( " \n " ) } } else { fmt . Printf ( " \n " ) } }
package main import ( " " ) func main ( ) { var h1 , m1 , h2 , m2 , k int fmt . Scan ( & h1 , & m1 , & h2 , & m2 , & k ) getup := ( h2 - h1 ) * 60 + ( m2 - m1 ) fmt . Println ( getup - k ) }
package main import ( " " " fmt " " log " " os " " strconv " " Three " " Four "
package main import ( " " " fmt " " os " " Yes " " No "
package main import ( " " " bytes " " fmt " " io " " os " " strconv " " Yes " " No " \t \n \v \f \r \n \r \n
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d \n " , n * n * n ) return }
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) ar := make ( [ ] int , n ) for i := range ar { fmt . Scan ( & ar [ i ] ) } sort . Ints ( ar ) if n == 1 { fmt . Println ( 0 ) return } fmt . Println ( ar [ n - 1 ] - ar [ 0 ] ) }
package main import ( " " " fmt " " os " " strconv " " YES " " NO "
package main import ( " " " fmt " " os " " strconv " " " " "
package main import ( " " ) func solution ( n int ) int { l := uint ( len ( fmt . Sprintf ( " " , n ) ) - 1 ) return 0 | ( 1 << l ) } func main ( ) { var n int fmt . Scan ( & n ) fmt . Println ( solution ( n ) ) }
package main import ( " " ) func main ( ) { var a , b , c , d , e , k int fmt . Scan ( & a , & b , & c , & d , & e , & k ) if ( e - a <= k ) { fmt . Println ( " " ) } else { fmt . Println ( " " ) } }
package main import ( " " ) func main ( ) { var n int fmt . Scan ( & n ) s := make ( [ ] string , n ) for i := 0 ; i < n ; i ++ { fmt . Scan ( & s [ i ] ) } for _ , v := range s { if v == " " { fmt . Println ( " " ) return } } fmt . Println ( " " ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " " " ) func main ( ) { var x float64 fmt . Scan ( & x ) fmt . Println ( int ( math . Pow ( x , 3 ) ) ) }
package main import ( " " " fmt " " os "
package main import ( " " " fmt " " os " " strconv " " strings " " : ( " ) return } io . PrintLn ( " Yay ! "
package main import ( " " ) func main ( ) { var N int fmt . Scanf ( " % d \n " , & N ) min := int ( 10e7 ) ans := 0 for i := 0 ; i < N ; i ++ { var n int fmt . Scan ( & n ) if min >= n { min = n ans + + } } fmt . Println ( ans ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " " " ) func main ( ) { var n int fmt . Scan ( & n ) a := make ( [ ] int , n ) for i := range a { fmt . Scan ( & a [ i ] ) } b := make ( [ ] int , n ) for i := range b { fmt . Scan ( & b [ i ] ) } sumA := 0 for _ , ai := range a { sumA + = ai } sumB := 0 for _ , bi := range b { sumB += bi } if sumA < sumB { fmt . Println ( - 1 ) return } allOver := true for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { allOver = false } } if allOver { fmt . Println ( 0 ) return } var over [ ] int less := 0 count := 0 for i := 0 ; i < n ; i ++ { if a [ i ] < b [ i ] { less + = b [ i ] - a [ i ] count + + } if a [ i ] > b [ i ] { over = append ( over , a [ i ] - b [ i ] ) } } sort . Sort ( sort . Reverse ( sort . IntSlice ( over ) ) ) for _ , oi := range over { less -= oi count + + if less <= 0 { break } } fmt . Println ( count ) }
package main import ( " " " fmt " " math " " os " " strconv "
package main import ( " " ) func main ( ) { var n int fmt . Scanf ( " % d " " % d " " % d "
package main import " " func main ( ) { var A , B int fmt . Scan ( & A , & B ) if B % 2 == 0 { switch { case A >= 13 : fmt . Print ( B ) case A >= 6 && A <= 12 : fmt . Print ( B / 2 ) case A <= 5 : fmt . Print ( " " ) } } }
package main import ( " " ) func main ( ) { var x int fmt . Scan ( & x ) fmt . Println ( x * x * x ) }
package main import ( " " " fmt " " os " " strconv " " strings " " sort "
package main import " " func main ( ) { a := make ( [ ] int , 5 ) var k int fmt . Scan ( & a [ 0 ] , & a [ 1 ] , & a [ 2 ] , & a [ 3 ] , & a [ 4 ] , & k ) for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 5 ; j ++ { if a [ j ] - a [ i ] > k { fmt . Println ( " " ) return } } } fmt . Println ( " " ) }
package main import ( " " " math " " math / big "
package main import ( " " ) func DivideBy2 ( i int ) int { cnt := 0 num := i for num % 2 == 0 { cnt ++ num /= 2 } return cnt } func main ( ) { var n int fmt . Scan ( & n ) max_num := 0 max_cnt := - 1 for i := 1 ; i <= n ; i ++ { if DivideBy2 ( i ) > max_cnt { max_cnt = DivideBy2 ( i ) max_num = i } } fmt . Println ( max_num ) }
package main import ( " " " fmt " " os " " strconv "
package main import ( " " ) const ( N = 10 ) func abs ( a int ) int { if a < 0 { return - a } return a } func main ( ) { var a [ N ] int var k int n := 5 for i := 0 ; i < n ; i + + { fmt . Scan ( & a [ i ] ) } fmt . Scan ( & k ) for i := 0 ; i < n ; i + + { for j := i ; j < n ; j + + { if abs ( a [ i ] - a [ j ] ) > k { fmt . Println ( " : ( " ) return } } } fmt . Println ( " Yay ! " ) }
package main import ( " " " fmt " " math " " os " " sort " " strconv " " strings " " func max : argument slice length must not be zero " " func min : argument slice length must not be zero " " Exponent must be a natural number " " func peekBack : zero length slice " " func peekFront : zero length slice " " func popBack : zero length slice " " func popFront : zero length slice " " Exponent must be a natural number " " YES " } else { return " NO " " Yes " " No " " abcdefghijklmnopqrstuvwxyz " " ABCDEFGHIJKLMNOPQRSTUVWXYZ "
package main import ( " " " fmt " " io " " math " " os " " strconv "
k , s = gets . split ( " " ) . map { | v | v . to_i } if k >= s then puts ( s + 2 ) * ( s + 1 ) / 2 exit end if s >= 2 * k then t = 3 * k - s puts ( t + 2 ) * ( t + 1 ) / 2 exit end puts ( s + 2 ) * ( s + 1 ) / 2 - ( s - k ) * ( s - k + 1 ) / 2 * 3
c = ( 1 .. 3 ) . map { gets . split . map & :to_i } b0 , b1 , b2 = ( 0 .. 2 ) . map { | i | c [ 0 ] [ i ] } puts ( 1 .. 2 ) . any? { | i | x , y , z = b0 - c [ i ] [ 0 ] , b1 - c [ i ] [ 1 ] , b2 - c [ i ] [ 2 ] x != y || y != z || z != x } ? :No : :Yes
n = gets . to_i a = gets . split . map & :to_i res = 0 minv = 10 ** 9 a . each { | e | if e < minv res += 1 minv = e end } puts res
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts ' Yay! ' else puts ' :( ' end
n = gets . to_i p_input = gets . chomp . split n . times do | i | p_input [ i ] = p_input [ i ] . to_i end count = 0 min = p_input [ 0 ] n . times do | i | result = true min = p_input [ i ] if p_input [ i ] < min result = false if ! ( p_input [ i ] <= min ) count += 1 if result end puts count
n = gets . to_i exit if n < 3 val = [ 0 , 0 , 0 , 0 ] arares = gets . chomp . split ( " " ) n . times do | i | val [ 0 ] = val [ 0 ] + 1 if arares [ i ] == " P " && val [ 0 ] == 0 val [ 1 ] = val [ 1 ] + 1 if arares [ i ] == " W " && val [ 1 ] == 0 val [ 2 ] = val [ 2 ] + 1 if arares [ i ] == " G " && val [ 2 ] == 0 val [ 3 ] = val [ 3 ] + 1 if arares [ i ] == " Y " && val [ 3 ] == 0 end case val . inject { | sum , n | sum + n } when 3 then puts " Three " when 4 then puts " Four " else end
list = [ ] 5 . times do list << gets . to_i end k = gets . to_i puts list . max - list . min <= k ? ' Yay! ' : ' :( '
a , b , c , d = gets . split . map ( & :to_i ) . sort if a == 1 && b == 4 && c == 7 && d == 9 puts " YES " else puts " NO " end
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times { | x | ( k + 1 ) . times { | y | ans += 1 if ( x + y <= s && s - x - y <= k ) } } p ans
n = gets . to_i puts gets . split . uniq . length == 3 ? " Three " : " Four "
n = gets . to_i y = $< . map { | e | e . split . map & :to_i } . transpose . map { | x , y | x - y } . sort x = y . dup l = 0 r = n - 1 while l < r && x [ l ] < 0 r - = 1 if x [ r ] == 0 x [ l ] += z = [ x [ r ] , - x [ l ] ] . min x [ r ] -= z l += 1 if x [ l ] == 0 end p x [ l ] < 0 ? - 1 : ( 0 ... n ) . count { | i | x [ i ] != y [ i ] }
require ' prime ' n , pr = gets . chomp . split ( " " ) . map { | e | e . to_i } a = pr . prime_division def search ( a , n ) ans = 1 for x in a do i = x [ 1 ] / n ans *= ( x [ 0 ] ** i ) end return ans end puts search ( a , n )
puts ( gets . split . sort * ' ' == " 1479 " ? " YES " : " NO " )
ary_1 = gets . split ( " " ) . map ( & :to_i ) ary_2 = gets . split ( " " ) . map ( & :to_i ) ary_3 = gets . split ( " " ) . map ( & :to_i ) if ary_1 [ 1 ] - ary_1 [ 0 ] == ary_2 [ 1 ] - ary_2 [ 0 ] && ary_1 [ 1 ] - ary_1 [ 0 ] == ary_3 [ 1 ] - ary_3 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_2 [ 2 ] - ary_2 [ 0 ] && ary_1 [ 2 ] - ary_1 [ 0 ] == ary_3 [ 2 ] - ary_3 [ 0 ] puts " Yes " else puts " No " end
n = gets . to_i size = gets . split . uniq . size puts size == 4 ? ' Four ' : ' Three '
N , K = gets . chomp . split . map ( & :to_i ) count = 0 ( 0 .. N ) . each do | e | ( 0 .. N ) . each do | ee | if K - e - ee <= N && K - e - ee >= 0 count += 1 end end end puts count
n = gets . to_i s = gets . split p_flag = false w_flag = false g_flag = false y_flag = false ( 0 .. n - 1 ) . each do | i | case s [ i ] when ' P ' then p_flag = true when ' W ' then w_flag = true when ' G ' then g_flag = true when ' Y ' then y_flag = true end end cnt = 0 [ p_flag , w_flag , g_flag , y_flag ] . each do | i | if i == true cnt += 1 end end if cnt == 3 puts " Three " else puts " Four " end
n = gets . chomp . to_i break_count_top = 0 break_count_top_num = 1 ( 1 .. n ) . each do | num | break_count = 0 num_sandbox = num loop do if num_sandbox % 2 == 0 break_count += 1 num_sandbox /= 2 else break end end if break_count > break_count_top break_count_top = break_count break_count_top_num = num end end puts break_count_top_num
c = [ ] 3 . times do c . push gets . split . map ( & :to_i ) end diff_raw = Array . new ( 3 ) . map { | e | [ ] } diff_column = Array . new ( 3 ) . map { | e | [ ] } 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_raw [ i ] . push ( c [ i ] [ j ] - c [ i - 1 ] [ j ] ) end end 0 . upto ( 2 ) do | i | 0 . upto ( 2 ) do | j | diff_column [ j ] . push ( c [ i ] [ j ] - c [ i ] [ j - 1 ] ) end end if diff_raw . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] && diff_column . map { | e | e . uniq . size } == [ 1 , 1 , 1 ] puts ' Yes ' else puts ' No ' end
a = gets . split . sort * ' ' puts a == " 1479 " ? :YES : :NO
p 2 ** Math . log2 ( gets . to_i ) . floor
n = gets . chomp . to_i ps = gets . chomp . split ( " " ) . map ( & :to_i ) min = 2 * 10 ** 6 count = 0 ps . each do | p | if min >= p count += 1 end min = [ min , p ] . min end puts count
n = gets . to_i s = gets . split ( " " ) . map! { | o | o . to_s } frag = " Three " 0 . upto ( n - 1 ) do | i | if s [ i ] == " Y " frag = " Four " end end puts frag
a = ARGF . to_a . map ( & :to_i ) print a [ 4 ] - a [ 0 ] <= a [ 5 ] ? " Yay! " : " :( "
c = [ ] 3 . times do c << gets . chomp . split ( " " ) . map ( & :to_i ) end def check_row ( ary ) ary [ 0 ] . zip ( ary [ 1 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 && ary [ 0 ] . zip ( ary [ 2 ] ) . map { | x | x . inject ( & :- ) } . uniq . length == 1 end answer = check_row ( c ) && check_row ( c . transpose ) puts answer ? ' Yes ' : ' No '
t = [ ] 5 . times do | i | t . push ( gets . chomp . to_i ) end k = gets . chomp . to_i v = t . max - t . min puts v <= k ? ' Yay! ' : ' :( '
a = [ ] 5 . times do a << gets . to_i end k = gets . to_i puts a [ 4 ] - a [ 0 ] <= k ? " Yay! " : " :( "
N = gets . to_i ary = gets . split ( " " ) . map ( & :to_i ) ary_min = ary . min min = 2000000 count = 0 ary . each do | i | if min > i count += 1 min = i end break if i == ary_min end puts count
puts gets . chomp . split . sort . join == " 1479 " ? " YES " : " NO "
n = gets . to_i 1 . upto ( 3500 ) do | x | 1 . upto ( 3500 ) do | y | nume = n * x * y deno = 4 * x * y - n * x - n * y if deno > 0 && nume % deno == 0 z = nume / deno puts [ x , y , z ] . join ( " " ) exit end end end
k , s = gets . strip . split . map ( & :to_i ) count = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - x - y >= 0 && s - x - y <= k count += 1 if s == x + y + ( s - x - y ) end end end puts count
c11 , c12 , c13 = gets . chomp . split . map ( & :to_i ) c21 , c22 , c23 = gets . chomp . split . map ( & :to_i ) c31 , c32 , c33 = gets . chomp . split . map ( & :to_i ) 0 . upto ( c11 ) do | a1 | a2 = a1 - ( c11 - c21 ) a3 = a1 - ( c11 - c31 ) b1 = c11 - a1 b2 = c12 - a1 b3 = c13 - a1 if [ a2 , a3 , b1 , b2 , b3 ] . all? { | e | e >= 0 && e <= 100 } if a2 + b1 == c21 && a2 + b2 == c22 && a2 + b3 == c23 && a3 + b1 == c31 && a3 + b2 == c32 && a3 + b3 == c33 puts ' Yes ' exit end end end puts ' No '
n = gets . to_i ans = 1 max_count = 0 current = 0 1 . upto ( n ) do | i | current = i count = 0 while i % 2 == 0 i / = 2 count += 1 end if count > max_count max_count = count ans = current end end puts ans
K , S = gets . chomp . split . map { | v | v . to_i } x = y = z = ( 0 .. K ) . to_a c = 0 ( 0 .. K ) . to_a . each do | xv | xs = S - xv break if xs < 0 next if 0 < xs - K - K ( 0 .. K ) . to_a . each do | yv | break if xs - yv < 0 ys = xs - yv next if 0 < ys - K c += 1 end end puts c
ns = gets . chomp! . split ( " " ) ns = ns . map { | item | item = item . to_i } if ns . sort == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
require ' prime ' include Math define_method :max , -> ( a , b ) { a > b ? a : b } define_method :min , -> ( a , b ) { a < b ? a : b } define_method :swap , -> ( a , b ) { a , b = b , a } define_method :gi , -> ( ) { gets . split . map ( & :to_i ) } define_method :gs , -> ( ) { gets . chomp } define_method :gc , -> ( ) { gets . chomp . split ( ' ' ) } define_method :gif , -> ( ) { gets . to_i } define_method :pr , -> ( num ) { num . prime_division } define_method :darray , -> ( size1 , size2 , init = nil ) { Array . new ( size1 ) { Array . new ( size2 ) { init } } } define_method :array , -> ( size , init = nil ) { Array . new ( size ) { init } } define_method :putall , -> ( obj ) { obj . each { | o | puts o } } define_method :repl , -> ( st , en , & block ) { st . upto en do | i | block . call ( i ) end } define_method :rep , -> ( num , & block ) { num . times do | i | block . call ( i ) end } n = gi count = 0 rep n [ 0 ] + 1 do | x | rep n [ 0 ] + 1 do | y | count += 1 if n [ 1 ] - x - y >= 0 && n [ 1 ] - x - y <= n [ 0 ] end end puts count
k , s = gets . chomp . split ( ' ' ) . map ( & :to_i ) ans = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | ans += 1 if ( s - x - y ) . between? ( 0 , k ) end end puts ans
N = gets . to_i A = gets . split . map ( & :to_i ) count = 0 A . inject ( 2 * N ) do | smin , a | count += 1 if a <= smin a < smin ? a : smin end puts count
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if k < e - a puts " :( " else puts " Yay! " end
a = [ ] for i in 0 .. 5 a << gets . chomp . to_i end puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? " :( " : " Yay! "
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) x = 0 y = 0 z = 0 count = 0 if k <= s then 0 . upto ( k ) do | i | x = i 0 . upto ( k ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end else 0 . upto ( s ) do | i | x = i 0 . upto ( s ) do | j | y = j z = s - ( x + y ) if z < 0 || z > k then next else count += 1 end end end end print ( "
a = ( gets ) . to_i b = ( gets ) . to_i c = ( gets ) . to_i d = ( gets ) . to_i e = ( gets ) . to_i k = ( gets ) . to_i antenas = [ a , b , c , d , e ] chk = true antenas . combination ( 2 ) do | p , q | if ( p - q ) . abs > k then chk = false break end end if chk then puts " Yay! " else puts " :( " end
p = Array . new ( 5 ) do gets . strip . to_i end k = gets . strip . to_i ok = true 0 . upto ( 3 ) do | i | ( i + 1 ) . upto ( 4 ) do | j | ok = false if p [ j ] - p [ i ] > k end end puts ok ? " Yay! " : " :( "
n = gets . to_i arr = gets . split . map ( & :to_i ) ans = 0 min = 10 ** 8 arr . each_with_index do | ar , i | if ar <= min min = ar ans += 1 end end puts ans
ary = [ ] 3 . times do | i | ary [ i ] = gets . split . map ( & :to_i ) end a1 = 0 b1 = ary [ 0 ] [ 0 ] - a1 b2 = ary [ 0 ] [ 1 ] - a1 b3 = ary [ 0 ] [ 2 ] - a1 a2 = ary [ 1 ] [ 0 ] - b1 a3 = ary [ 2 ] [ 0 ] - b1 if ( a1 + b1 == ary [ 0 ] [ 0 ] && a1 + b2 == ary [ 0 ] [ 1 ] && a1 + b3 == ary [ 0 ] [ 2 ] && a2 + b1 == ary [ 1 ] [ 0 ] && a2 + b2 == ary [ 1 ] [ 1 ] && a2 + b3 == ary [ 1 ] [ 2 ] && a3 + b1 == ary [ 2 ] [ 0 ] && a3 + b2 == ary [ 2 ] [ 1 ] && a3 + b3 == ary [ 2 ] [ 2 ] ) puts ' Yes ' else puts ' No ' end
puts gets . chomp . chars . sort . uniq . join == " 1479 " ? :YES : :NO
K , S = gets . split . map ( & :to_i ) num = 0 ( K + 1 ) . times do | a | ( K + 1 ) . times do | b | res = S - a - b if 0 <= res && res <= K then num += 1 end end end p num
n = gets . to_i ans = 0 max_val = 0 1 . upto ( n ) do | i | cnt = 1 while i % ( 2 ** cnt ) == 0 cnt += 1 end ans = i if cnt > max_val max_val = cnt if cnt > max_val end puts ans
N = gets . to_i r = 1 while r * 2 <= N r *= 2 end puts r
require ' pp ' n = gets . to_i d = gets . split . map ( & :to_i ) cnt = 0 min = d . max + 1 d . each do | dd | if dd <= min min = dd cnt += 1 else end end p cnt
N = gets . chomp . to_i P = gets . chomp . split ( " " ) . map ( & :to_i ) min = ( 2 * 10 ** 5 ) + 1 count = 0 P . each { | i | if i < min count += 1 min = i end } puts count
require ' matrix ' cs = 3 . times . map { gets . chomp . split . map ( & :to_i ) } d1 = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d2 = [ [ 0 , 2 ] , [ 1 , 1 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d3 = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 0 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) d4 = [ [ 0 , 2 ] , [ 1 , 0 ] , [ 2 , 1 ] ] . map { | i , j | cs [ i ] [ j ] } . inject ( :+ ) if [ d1 , d2 , d3 , d4 ] . uniq . size == 1 puts " Yes " else puts " No " end
k , s = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. k ) . each do | a | ( 0 .. k ) . each do | b | z = s - ( a + b ) cnt += 1 if a + b + z == s && z >= 0 && z <= k end end p cnt
n = gets . to_i p = gets . split ( " \s " ) . map ( & :to_i ) min = p [ 0 ] result = 0 p . each do | i | if min >= i min = i result += 1 end end print result
r = [ ] res = " Yay! " 5 . times do | i | r << gets . to_i end k = gets . to_i for i in 0 .. 4 for j in 0 .. 4 if ( r [ i ] - r [ j ] ) . abs > k res = " :( " end end end puts res
n = gets . to_i k = 1 while k <= n k = k * 2 end p k / 2
z = ( 1 .. 5 ) . map { gets . to_i } k = gets . to_i f = true z . combination ( 2 ) { | x , y | f = f && ( ( x - y ) . abs <= k ) } puts f ? " Yay! " : " :( "
k , s = gets . split . map ( & :to_i ) exit 1 if k < 2 || k > 2500 || s < 0 || s > 3 * k puts ( 0 .. k ) . map { | x | [ [ s - x , k ] . min - [ s - x - k , 0 ] . max + 1 , 0 ] . max } . inject ( & :+ )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i p = [ ] p <<a p <<b p <<c p <<d p <<e p . sort! puts ( p [ 4 ] - p [ 0 ] <= k ) ? :Yay! : ' :( '
n , m = gets . split . map & :to_i n , m = m , n if n > m if m - n > 1 puts 0 else mod = 10 ** 9 + 7 f = -> x { ( 1 .. x ) . inject ( 1 ) { | r , i | r = r * i % mod } } puts f [ m ] * f [ n ] * ( 1 + n / m ) % mod end
N = gets . to_i Ps = gets . split . map ( & :to_i ) ans = 0 min = Ps . max N . times do | i | min = [ Ps [ i ] , min ] . min if Ps [ i ] > min then next else ans += 1 end end puts ans
antennas = [ ] 5 . times do | i | antennas << gets . chop . to_i end k = gets . chop . to_i if antennas [ 4 ] - antennas [ 0 ] > k puts " :( " else puts " Yay! " end
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) num = ( ( k + 1 ) * 2 ) + ( k - 1 ) a_way = Array . new ( num , 0 ) mid_idx_b , mid_idx_e = 0 , 0 plus_v = 1 ( 0 .. k ) . each do | idx | idx_l = num - 1 - idx if idx == 0 a_way [ idx ] = a_way [ idx_l ] = plus_v + 0 else a_way [ idx ] = a_way [ idx_l ] = plus_v + a_way [ idx - 1 ] end plus_v += 1 mid_idx_b , mid_idx_e = idx , idx_l end mid_idx_b , mid_idx_e = mid_idx_b + 1 , mid_idx_e - 1 minus_v = k - 1 ( mid_idx_b .. mid_idx_e ) . each do | idx | idx_l = num - 1 - idx a_way [ idx ] = a_way [ idx_l ] = minus_v + a_way [ idx - 1 ] minus_v -= 2 break if idx == idx_l || minus_v < 0 end p a_way [ s ]
c = Array . new ( 3 ) { gets . chomp . split . map ( & :to_i ) } a = Array . new ( 3 , 0 ) b = Array . new ( 3 , 0 ) 0 . step ( 2 ) do | j | i = j b [ j ] = c [ 0 ] [ j ] - a [ 0 ] a [ i ] = c [ i ] [ 0 ] - b [ 0 ] end 0 . step ( 2 ) do | i | 0 . step ( 2 ) do | j | if c [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
k , s = gets . chomp . split . map ( & :to_i ) ok = 0 0 . upto ( k ) do | i1 | 0 . upto ( k ) do | i2 | if s - ( i1 + i2 ) >= 0 && ( s - ( i1 + i2 ) ) <= k ok += 1 end end end puts ok
N = gets . to_i P = gets . chomp . split ( ) . map ( & :to_i ) min = 0 answer = 0 N . times do | n | if n == 0 || min > P [ n ] min = P [ n ] answer = answer + 1 end end puts answer
( n , p ) = gets . chomp . split ( / / ) . map ( & :to_i ) array = [ ] if ( n == 1 ) puts p exit end if ( p == 1 ) puts 1 exit end i = 2 ans = 1 while ( i * i <= p ) if ( p % i == 0 ) if ( ( p % ( i ** n ) ) == 0 ) ans *= i p /= i ** n else p /= i end else i += 1 end end puts ans
Nmax = 100 Ni = Array . new ( Nmax + 1 , 0 ) 1 . upto ( Nmax ) do | j | number = j counter = 0 oddFlag = false while true if number % 2 == 1 oddFlag = true end if oddFlag break end number = number / 2 counter = counter + 1 end Ni [ j ] = counter end N = gets . chomp . to_i answer = 0 countents = 0 1 . upto ( N ) do | j | if ( countents <= Ni [ j ] ) answer = j countents = Ni [ j ] end end puts ( answer )
n = gets . split . map ( & :to_i ) . sort if n == [ 1 , 4 , 7 , 9 ] puts " YES " else puts " NO " end
C = 3 . times . map { gets . split . map ( & :to_i ) } r , m = C . flatten . inject ( 0 , & :+ ) . divmod ( 3 ) puts ( m == 0 && [ 0 , 1 , 2 ] . permutation . all? { | i , j , k | C [ 0 ] [ i ] + C [ 1 ] [ j ] + C [ 2 ] [ k ] == r } ) ? " Yes " : " No "
N = gets . to_i ( 1 .. 3500 ) . each do | a | ( a .. 3500 ) . each do | b | next if ( 4 * a * b - N * b - N * a ) < 1 c , m = ( N * a * b ) . divmod ( 4 * a * b - N * b - N * a ) next if m > 0 puts [ a , b , c ] . join ( ' ' ) ; exit end end
words = gets . chomp . split ( / / ) . collect { | a | a . to_i } ret = catch ( :result ) { throw ( :result , " NO " ) unless words . size == 3 throw ( :result , " NO " ) unless words . select { | a | a == 5 } . size == 2 throw ( :result , " NO " ) unless words . select { | a | a == 7 } . size == 1 " YES " } puts ret
Nmax = 100 Ni = Array . new ( Nmax + 1 , 0 ) 1 . upto ( Nmax ) do | j | number = j counter = 0 oddFlag = false while true if number % 2 == 1 oddFlag = true end if oddFlag break end number = number / 2 counter = counter + 1 end Ni [ j ] = counter end N = gets . chomp . to_i answer = 0 countents = 0 1 . upto ( N ) do | j | if ( countents <= Ni [ j ] ) answer = j countents = Ni [ j ] end end puts ( answer )
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i if e - a > k puts " :( " else puts " Yay! " end
N = gets . to_i A = Array . new B = Array . new C = Array . new for i in 0 .. N - 1 A [ i ] = i + 1 B [ i ] = 0 C [ i ] = 0 while B [ i ] == 0 if A [ i ] % 2 == 0 A [ i ] /= 2 C [ i ] += 1 else B [ i ] += 1 end end end puts C . index ( C . max ) + 1
N = gets . to_i ans = 0 N . times do | i | if 2 ** i <= N ans = 2 ** i end end puts ans
n = gets . to_i as = gets . split . map ( & :to_i ) bs = gets . split . map ( & :to_i ) if as . inject ( :+ ) < bs . inject ( :+ ) puts - 1 exit end ans = 0 short = 0 amari = [ ] ( 0 .. n - 1 ) . each do | i | if as [ i ] < bs [ i ] ans += 1 short += bs [ i ] - as [ i ] else amari << as [ i ] - bs [ i ] end end amari . sort! while short > 0 do short -= amari . pop ans += 1 end puts ans
k , s = gets . split . map & :to_i cnt = 0 f = [ s - k * 2 , 0 ] . max f . upto ( k ) do | x | ( [ s - x - k , f ] . max ) . upto ( k ) do | y | z = s - x - y cnt += 1 if z <= k && 0 <= z end end p cnt
ar = [ gets . to_i ] ar . push gets . to_i ar . push gets . to_i ar . push gets . to_i ar . push gets . to_i k = gets . to_i ar . minmax ( ) . each_cons ( 2 ) { | e | if e [ 1 ] - e [ 0 ] <= k then puts " Yay! " ; else puts " :( " ; end }
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i sum1 = b - a sum2 = c - a sum3 = d - a sum4 = e - a sum5 = c - b sum6 = d - b sum7 = e - d sum8 = d - c sum9 = e - c sum10 = e - d if sum1 <= k && sum2 <= k && sum3 <= k && sum4 <= k && sum5 <= k && sum6 <= k && sum7 <= k && sum8 <= k && sum9 <= k && sum10 <= k puts " Yay! " else puts " :( " end
a = gets . chomp . split . map { | aa | aa . to_i } require ' prime ' b = a [ 1 ] . prime_division anan = Array . new ( b . size ) . map { Array . new } ans = [ ] for bb in 0 ... b . size b [ bb ] [ 1 ] . times do anan [ bb ] . push ( b [ bb ] [ 0 ] ) end end for bb in 0 ... anan . size if ( anan [ bb ] . size / a [ 0 ] ) >= 1 ( anan [ bb ] . size / a [ 0 ] ) . times do ans . push ( anan [ bb ] [ 0 ] ) end end end if ans . size == 0 puts " 1 " elsif a [ 0 ] == 1 puts a [ 1 ] elsif a [ 1 ] == 1 puts " 1 " else aaaa = 1 puts ans . map { | aaa | aaaa = aaaa * aaa } . pop end
f = n = ( s = [ ] . tap { | s | 6 . times { s <<gets . hex } } ) . pop s . combination ( 2 ) { | a , b | b - a > n && ( f = false ) } puts f ?' Yay! ' : ' : ( '
N , x = gets . split . map ( & :to_i ) as = gets . split . map ( & :to_i ) min = as . dup ans = as . inject ( :+ ) ( 1 ... N ) . each do | i | result = i * x N . times do | j | min [ j ] = as [ ( j - i ) % N ] if min [ j ] > as [ ( j - i ) % N ] result += min [ j ] end ans = result if ans > result end puts ans
c1 = gets . split . map ( & :to_i ) ; c2 = gets . split . map ( & :to_i ) ; c3 = gets . split . map ( & :to_i ) ; if c1 [ 1 ] - c1 [ 0 ] == c2 [ 1 ] - c2 [ 0 ] and c2 [ 1 ] - c2 [ 0 ] == c3 [ 1 ] - c3 [ 0 ] if c1 [ 2 ] - c1 [ 1 ] == c2 [ 2 ] - c2 [ 1 ] and c2 [ 2 ] - c2 [ 1 ] == c3 [ 2 ] - c3 [ 1 ] if c1 [ 0 ] - c1 [ 2 ] == c2 [ 0 ] - c2 [ 2 ] and c2 [ 0 ] - c2 [ 2 ] == c3 [ 0 ] - c3 [ 2 ] if c2 [ 0 ] - c1 [ 0 ] == c2 [ 1 ] - c1 [ 1 ] and c2 [ 1 ] - c1 [ 1 ] == c2 [ 2 ] - c1 [ 2 ] if c3 [ 0 ] - c2 [ 0 ] == c3 [ 1 ] - c2 [ 1 ] and c3 [ 1 ] - c2 [ 1 ] == c3 [ 2 ] - c2 [ 2 ] if c1 [ 0 ] - c3 [ 0 ] == c1 [ 1 ] - c3 [ 1 ] and c1 [ 1 ] - c3 [ 1 ] == c1 [ 2 ] - c3 [ 2 ] puts " Yes " exit end end end end end end puts " No "
require ' prime ' N , P = gets . chomp . split ( ' ' ) . map ( & :to_i ) answer = 1 prime_division = Prime . prime_division ( P ) while prime_division . any? { | _ , e | e >= N } candidate_list = prime_division . select { | n , e | e >= N } answer *= candidate_list . map { | n , _ | n } . reduce ( & :* ) prime_division = candidate_list . map { | n , e | [ n , e - N ] } end puts answer
c = [ ] 3 . times { c << gets . chomp . split . map ( & :to_i ) } a = [ 0 ] b = c [ 0 ] 1 . upto ( 2 ) { | i | a [ i ] = c [ i ] [ 0 ] - b [ 0 ] } 1 . upto ( 2 ) do | i | 1 . upto ( 2 ) do | j | if c [ i ] [ j ] != a [ i ] + b [ j ] puts " No " exit end end end puts " Yes "
anten = [ ] 5 . times do x = gets . chomp . to_i anten << x end K = gets . chomp . to_i f = true for i in 0 .. 3 do for j in ( i + 1 ) .. 4 do if ( anten [ j ] - anten [ i ] ) > K then f = false break ; end end end if f then puts ' Yay! ' else puts ' :( ' end
N = gets . chomp . to_i puts gets . chomp . split . uniq . count == 3 ? " Three " : " Four "
n = gets . to_i s = gets . chomp . split cnt = 0 cl = Hash . new ( 0 ) s . each { | c | cl [ c ] += 1 } cl . each { | v | cnt += 1 } ( cnt == 3 ) ? ( puts " Three " ) : ( puts " Four " )
eval " N,M= " + ` tr \\ , ` m = 10 ** 9 + 7 p [ 0 , [ * 1 .. N , * 1 .. M ] . reduce { | r , i | r * i % m } * ( 2 - ( N - M ) . abs ) ] . max % m
t = 1 gets . split . zip ( $< ) { | m , x | m = m . to_i t *= x . split . sum { _1 . to_i * ~ m -= 2 } } p t . % 10 ** 9 + 7
n = gets . to_i arr = [ ] s = 0 ans = 0 a = gets . chomp . split ( " " ) . map! ( & :to_i ) b = gets . chomp . split ( " " ) . map! ( & :to_i ) i = 0 b . each do | v | if v > a [ i ] s += v - a [ i ] ans += 1 else arr . push ( a [ i ] - v ) end i += 1 end arr . sort! . reverse! arr . each do | v | break if s <= 0 s -= v ans += 1 end if s <= 0 puts ans else puts - 1 end
n = gets . to_i if n < 4 p n == 3 ? 2 : n exit end a = Array . new 1 . upto ( 8 ) do | i | a << 2 ** i end p a [ n . to_s ( 2 ) . size - 2 ]
n , m , a , b = gets . chomp . split . map ( & :to_i ) arr = gets . chomp . split . map ( & :to_i ) keep , drop = [ ] , [ ] k = false arr . each { | x | k = true if x < a if k keep << x else drop << x end } if keep . length < m while ! drop . empty? && drop . last <= b drop . pop end end puts drop . length
a = [ ] 6 . times { | i | a [ i ] = gets . to_i } puts a [ 4 ] - a [ 0 ] > a [ 5 ] ? ' :( ' : ' Yay! '
* a , k = $< . map & :to_i puts a . combination ( 2 ) . any? { | x , y | y - x > k } ? " :( " : " Yay! "
k , s = gets . split . map ( & :to_i ) a = 0 ( k + 1 ) . times { | i | ( k + 1 ) . times { | j | a += 1 if s - i - j >= 0 && s - i - j <= k } } p a
i = gets . to_i ary = gets . chomp . split ( " " ) puts [ " P " , " W " , " G " , " Y " ] . all? { | n | ary . include? ( n ) } ? " Four " : " Three "
N = gets . to_i P = gets . split . map ( & :to_i ) res = 1 min = P [ 0 ] N . times do | i | next if i == 0 next if min < P [ i ] res += 1 min = P [ i ] if P [ i ] < min end puts res
n = gets . to_i 1 . upto ( 3500 ) do | i | 1 . upto ( 3500 ) do | j | a = n * i * j b = 4 * i * j - n * i - n * j if b > 0 && a % b == 0 puts [ i , j , a / b ] . join ( ' ' ) exit end end end
c = 3 . times . map { gets . chomp . split ( " " ) . map ( & :to_i ) } for i in 0 .. 1 for j in i + 1 .. 2 for k in 0 .. 1 for l in k + 1 .. 2 if c [ i ] [ k ] + c [ j ] [ l ] != c [ i ] [ l ] + c [ j ] [ k ] puts " No " exit end end end end end puts " Yes "
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) count = 0 x , y = a . zip ( b ) . map { | i , j | j - i } . partition { | e | e > 0 } count += x . size ( puts 0 ; exit ) if count == 0 sum = x . inject ( :+ ) y . sort . each do | i | sum += i count += 1 ( puts count ; exit ) if sum <= 0 end puts - 1
time = gets array = gets . split ( " " ) . map ( & :to_i ) m = 2000000 i = 0 array . each do | n | if n < m i += 1 m = n end end puts i
k , s = gets . split . map ( & :to_i ) count = 0 l = [ ] 0 . upto ( k ) do | x | unless ( x * 3 > s or 2 * k < s - x ) x . upto ( k ) do | y | unless ( x + y * 2 > s or k < s - x - y ) l << [ x , y , ( s - x - y ) ] . uniq end end end end l . each do | a | count += ( 0 .. a . size ) . inject ( :+ ) end puts count
gets puts gets =~ / Y / ? " Four " : " Three "
C = 3 . times . map { [ ] } 3 . times do | i | C [ i ] = gets . split . map ( & :to_i ) end N = 100 ans = ' No ' 0 . step 100 do | a1 | b1 = C [ 0 ] [ 0 ] - a1 a2 = C [ 1 ] [ 0 ] - b1 a3 = C [ 2 ] [ 0 ] - b1 if [ C [ 0 ] [ 1 ] - a1 , C [ 1 ] [ 1 ] - a2 , C [ 2 ] [ 1 ] - a3 ] . uniq . size == 1 if [ C [ 0 ] [ 2 ] - a1 , C [ 1 ] [ 2 ] - a2 , C [ 2 ] [ 2 ] - a3 ] . uniq . size == 1 ans = ' Yes ' break end end end puts ans
row_1_ary = STDIN . gets . split . map ( & :to_i ) row_2_ary = STDIN . gets . split . map ( & :to_i ) row_3_ary = STDIN . gets . split . map ( & :to_i ) all_ary = [ row_1_ary , row_2_ary , row_3_ary ] bol = true 0 . upto ( 1 ) { | i | 0 . upto ( 1 ) { | j | if all_ary [ i ] [ j ] - all_ary [ i ] [ j + 1 ] != all_ary [ i + 1 ] [ j ] - all_ary [ i + 1 ] [ j + 1 ] bol = false end } } puts bol == true ? ' Yes ' : ' No '
a , b , c , d , e , k = readlines . map ( & :to_i ) if b - a <= k && c - a <= k && d - a <= k && e - a <= k && c - b <= k && d - b <= k && e - b <= k && d - c <= k && e - c <= k && e - d <= k puts " Yay! " else puts " :( " end
n = gets . chomp . to_i a = gets . chomp . split . map ( & :to_i ) ans = 1 nowmin = a [ 0 ] if n != 1 then ( 1 .. n ) . each do | i | if a [ i ] < nowmin then ans += 1 nowmin = a [ i ] end if nowmin == 1 break end end end puts ans
input_lines = readlines length = input_lines . length i = 0 while i < length input_lines [ i ] = input_lines [ i ] . chomp . to_i i += 1 end if ( input_lines [ 4 ] - input_lines [ 0 ] ) > input_lines [ 5 ] print " :( " else print " Yay! " end
class Main def self . main min = 123 max = 0 5 . times do a = read min = a if a < min max = a if a > max end k = read puts max - min <= k ? ' Yay! ' : ' :( ' end def self . read gets . chomp . to_i end end Main . main
N = gets . to_i S = gets . split if S . uniq . size == 4 puts ' Four ' else puts ' Three ' end
N = eval * $< ( t = 1 .. 4e3 ) . any? { | i | t . any? { | j | n = 4 * i * j - N * i - d = N * j n > 0 && d * i % n < 1 && $> << [ i , j , d * i / n ] * ?\s } }
arr = [ ] 5 . times do arr . push gets . strip . to_i end k = gets . strip . to_i r = ' Yay! ' 4 . downto ( 1 ) do | i | i . downto ( 0 ) do | j | if ( arr [ i ] - arr [ j ] ) > k r = ' :( ' break end end end puts r
n = gets . strip . to_i def counter ( int ) cnt = 0 while int % 2 == 0 int /= 2 cnt += 1 end cnt end tmp = 0 ans = 0 ( 1 .. n ) . each do | i | num = counter ( i ) if num >= tmp ans = i tmp = num end end p ans
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ; ans = 0 x = 0 while x <= k y = 0 while y <= k z = s - x - y if 0 <= z && z <= k ans = ans + 1 end y = y + 1 end x = x + 1 end puts ( ans )
nums = [ ] 3 . times { nums << gets . split . map ( & :to_i ) } res = false 101 . times do | a_i | b_i = nums [ 0 ] [ 0 ] - a_i b_j = nums [ 0 ] [ 1 ] - a_i b_k = nums [ 0 ] [ 2 ] - a_i 101 . times do | a_j | 101 . times do | a_k | as = [ a_i , a_j , a_k ] bs = [ b_i , b_j , b_k ] valid = true 3 . times do | a | 3 . times do | b | if nums [ a ] [ b ] != as [ a ] + bs [ b ] valid = false break end end end if valid res = true break end end end end puts res ? " Yes " : " No "
line = gets . split ( " " ) five = line . filter { | l | l == " 5 " } . count seven = line . filter { | l | l == " 7 " } . count if five == 2 && seven == 1 puts ' YES ' else puts ' NO ' end
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) && check ( mat . transpose ) then puts " Yes " else puts " No " end
N = gets . strip . to_i i = 0 result = 0 while 2 ** i <= N result = 2 ** i i += 1 end puts result
mat = 3 . times . map { gets . split . map ( & :to_i ) } def check ( mat ) mat [ 0 ] [ 0 ] - mat [ 1 ] [ 0 ] == mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] && mat [ 0 ] [ 1 ] - mat [ 1 ] [ 1 ] == mat [ 0 ] [ 2 ] - mat [ 1 ] [ 2 ] && mat [ 1 ] [ 0 ] - mat [ 2 ] [ 0 ] == mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] && mat [ 1 ] [ 1 ] - mat [ 2 ] [ 1 ] == mat [ 1 ] [ 2 ] - mat [ 2 ] [ 2 ] end if check ( mat ) then puts " Yes " else puts " No " end
K , S = gets . split . map ( & :to_i ) p ( 0 .. K ) . map { | x | s = S - x next 0 if s < 0 s >= K ? [ 2 * K - s + 1 , 0 ] . max : s + 1 } . inject ( :+ )
k , s = gets . chomp . split ( " " ) . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y ans += 1 if z <= k && z >= 0 end end puts ans
k , s = gets . split . map ( & :to_i ) array = [ ] ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | z = s - x - y if z < 0 break else array << [ x , y , z ] if z <= k end end end puts array . size
gets . to_i puts gets . chomp . split ( " " ) . include? ( ' Y ' ) ? ' Four ' : ' Three '
k , s = gets . split . map ( & :to_i ) puts ( [ 0 , s - 2 * k ] . max .. [ k , s ] . min ) . map { | x | [ k , s - x ] . min - [ 0 , s - x - k ] . max + 1 } . reduce ( :+ )
N = gets . to_i Ss = gets . chomp . split puts Ss . include? ( ' Y ' ) ? ' Four ' : ' Three '
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i f = gets . to_i if a - b > f || a - b < - f puts " :( " elsif b - c > f || b - c < - f puts " :( " elsif c - d > f || c - d < - f puts " :( " elsif d - e > f || d - e < - f puts " :( " elsif e - a > f || e - a < - f puts " :( " else puts " Yay! " end
N = gets . to_i ans = 1 while ans * 2 <= N ans *= 2 end puts ans
antena = [ ] 5 . times { antena << gets . chomp . to_i } k = gets . chomp . to_i flag = false 5 . times do | i | 5 . times do | j | next if i == j flag = true if ( antena [ i ] - antena [ j ] ) . abs > k end end puts flag ? ' :( ' : ' Yay! '
k , s = gets . split . map ( & :to_i ) cnt = 0 ( k + 1 ) . times do | x | ( k + 1 ) . times do | y | z = s - x - y if z >= 0 && z <= k cnt += 1 end end end puts cnt
n = gets . chomp . to_i s = gets . chomp . split ( " " ) . map ( & :to_i ) count = 0 arr = Float :: INFINITY n . times do | i | mokuteki = s [ i ] arr = [ mokuteki , arr ] . min count += 1 if mokuteki <= arr end puts count
ARGF . each { | line | a = line . split . sort! v = a . join . to_i if v == 1479 puts " YES " else puts " NO " end exit }
K , S = gets . split . map ( & :to_i ) cnt = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - x - y cnt += 1 if z >= 0 && z <= K end end p cnt
array = gets . chomp . split ( ' ' ) . map ( & :to_i ) a , b , c , d = false , false , false , false array . each do | i | if i == 1 a = true end if i == 9 b = true end if i == 7 c = true end if i == 4 d = true end end if a && b && c && d puts " YES " else puts " NO " end
def f ( a , t ) s = 0 xs = a . map ( & :first ) a . each do | x , y | s += y * ( xs - [ x ] ) . map { | u | ( t - u ) . to_f / ( x - u ) } . inject ( :* ) end s end loop do d = gets . to_i break if d == 0 points = ( 0 .. d + 2 ) . map { | x | [ x , gets . to_f ] } ( 0 .. d + 2 ) . each do | i | a = points . dup a . delete_at ( i ) x_c , y_c = a . pop d = ( y_c - f ( a , x_c ) ) . abs if d < 0.001 puts i break end end end
def kaizyo ( n ) if ( n < 2 ) return 1 else a = 1 ( 2 .. n ) . each do | d | a *= d a %= ( 10 ** 9 + 7 ) end return a end end def inp ( ) a = gets . chomp . split ( " " ) . map ( & :to_i ) end n , m = inp d = kaizyo ( n ) * kaizyo ( m ) if ( ( n - m ) . abs >= 2 ) puts 0 exit end if ( n == m ) d *= 2 end puts ( d %= ( 10 ** 9 + 7 ) )
K , S = gets . split . map ( & :to_i ) count = 0 ( 0 .. K ) . each do | x | ( 0 .. K ) . each do | y | z = S - ( x + y ) count += 1 if 0 <= z && z <= K end end puts count
n = gets . to_i x = gets . chomp . split y = x . uniq . count if y == 4 then puts " Four " else puts " Three " end
x = 5 . times . each . map do | i | readline . to_i end x . sort! k = readline . to_i if x [ 4 ] - x [ 0 ] <= k puts ' Yay! ' else puts ' :( ' end
def hoge ( x ) return 1 if x == 0 return hoge ( x - 1 ) * 2 + 1 end p hoge ( gets . to_i + 1 ) - 1
puts 1 << ( gets . to_i . bit_length - 1 )
k , s = gets . split . map! ( & :to_i ) if 3 * k < s then puts 0 elsif 3 * k == s puts 1 else ans = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | break if x + y > s ans += 1 if s - x - y <= k end end puts ans end
* a , k = $< . map & :to_i ; puts a . max - a . min > k ? " :( " : " Yay! "
N = gets . to_i ans = ( 1 .. N ) . max_by do | n | c = 0 m = n while m % 2 == 0 m = m / 2 c += 1 end c end puts ans
gets p = gets . chop . split . map ( & :to_i ) count = 0 prev_min = p [ 0 ] p . each do | p_i | count += 1 if prev_min >= p_i prev_min = [ prev_min , p_i ] . min end puts count
k , s = gets . split . map ( & :to_i ) ans = 0 ( k + 1 ) . times do | i | c1 = i break if c1 > s next if s > 2 * k + c1 ( [ s - c1 , k ] . min + 1 ) . times do | j | c2 = c1 + j break if c2 > s next if s > k + c2 ans += 1 if s - c2 <= k end end p ans
puts gets . split . sort . join . to_i == 1479 ? :YES : :NO
nums = gets . split . map ( & :to_i ) nums = nums . sort x = nums [ 0 ] * 1000 + nums [ 1 ] * 100 + nums [ 2 ] * 10 + nums [ 3 ] if x == 1479 puts " YES " else puts " NO " end
N = gets . to_i AS = N . times . map { gets . to_i } x = 1 num = 0 AS . each do | a | if x == 1 num += a - 1 a = 1 elsif x < a if a % x == 0 num += ( a - 1 ) / x a = x - 1 else num += a / x a %= x end end if x == a x += 1 end end puts num
N = eval * $< ; ( t = 1 .. 4e3 ) . any? { | i | t . any? { | j | n = 4 * i * j - N * i - d = N * j ; n > 0 && d % n < 1 && $> << [ i , j , d * i / n ] * ?\s } }
N = gets . to_i ; ( N / 4 + 1 ) . upto ( M = 3500 ) { | a | a . upto ( M ) { | b | x = 4 r / N - 1 r / a - 1 r / b ; x . numerator == 1 && ( $> << [ a , b , x . denominator ] * " " ; exit ) } }
n = gets . to_i pow = 0 while 2 ** ( pow + 1 ) <= n pow += 1 end puts 2 ** pow
N = gets . to_i Ss = gets . split . map ( & :to_s ) puts Ss . uniq . count == 3 ? ' Three ' : ' Four '
puts $< . map { | s | eval " 100*(%d-c=%d)+%d-c " % s . split } . uniq [ 1 ] ? :No : :Yes
l = gets . chomp . split ( ' ' ) k = l [ 0 ] . to_i s = l [ 1 ] . to_i cnt = 0 ( 0 .. k ) . each do | x | ( 0 .. k ) . each do | y | if s - ( x + y ) <= k && s - ( x + y ) >= 0 cnt += 1 end end end puts cnt
N = gets . to_i ( 1 .. 3500 ) . each do | a | ( 1 .. 3500 ) . each do | b | next if ( 4 * a * b - N * b - N * a ) < 1 c , m = ( N * a * b ) . divmod ( 4 * a * b - N * b - N * a ) next if m > 0 puts [ a , b , c ] . join ( ' ' ) exit end end
def get_i ( ) return gets . chomp . split ( " " ) . map ( & :to_i ) end def get_f ( ) return gets . chomp . split ( " " ) . map ( & :to_f ) end def get ( ) return gets . chomp . split ( " " ) end def get_nsp ( ) return gets . chomp . split ( " " ) end def yn_judge ( bool , y = " Yes " , n = " No " ) return bool ? y : n end def array ( size1 , init = nil , size2 = - 1 ) if size2 == - 1 return Array . new ( size1 ) { init } else return Array . new ( size2 ) { Array . new ( size1 ) { init } } end end def max ( a , b ) return a > b ? a : b end def min ( a , b ) return a > b ? b : a end INF = Float :: INFINITY N = gets . to_i 1 . upto ( 3500 ) do | h | 1 . upto ( 3500 ) do | n | w = - 1 w = N * h * n / ( 4 * h * n - N * n - N * h ) if ( 4 * h * n - N * n - N * h ) . nonzero? and ( ( N * h * n ) % ( 4 * h * n - N * n - N * h ) ) . zero? if w > 0 puts [ h , n , w ] . join ( " " ) exit end end end
pos = [ ] 5 . times do pos << gets . chomp . to_i end k = gets . chomp . to_i pos . combination ( 2 ) do | a , b | if ( a - b ) . abs > k puts " :( " exit end end puts " Yay! "
a = Array . new ( 5 ) 5 . times { | i | a [ i ] = gets . to_i } k = gets . to_i puts k < a [ 4 ] - a [ 0 ] ? " :( " : " Yay! "
n = gets . to_i puts 2 ** Math :: log2 ( n ) . to_i
inputString = gets . to_i answer = 1 while answer <= inputString answer *= 2 end print answer / 2
gets puts gets . chomp . split . include? ( ' Y ' ) ? ' Four ' : ' Three '
as = [ ] 5 . times { as << gets . to_i } k = gets . to_i print ( as . max - as . min ) > k ? " :( " : " Yay! "
ns = gets . split . map ( & :to_i ) if ns . sort == [ 1 , 4 , 7 , 9 ] puts ' YES ' else puts ' NO ' end
require ' prime ' n , p = gets . chomp . split ( " " ) . map ( & :to_i ) gcd = p . prime_division . select { | array | array [ 1 ] >= n } . flatten . first while gcd && a = ( p / gcd ** n ) . prime_division . select { | array | array [ 1 ] >= n } . flatten . first do gcd = gcd * a end puts gcd || 1
n = gets . to_i 6 . downto ( 0 ) do | num | if n >= 2 ** num puts 2 ** num break end end
a , b , c , d , e , k = $< . map ( & :to_i ) puts e - a <= k ? " Yay! " : " :( "
board = 3 . times . map { gets . split . map ( & :to_i ) } horizontal_diff_list = [ board [ 0 ] [ 0 ] - board [ 0 ] [ 1 ] , board [ 0 ] [ 1 ] - board [ 0 ] [ 2 ] ] vertical_diff_list = [ board [ 0 ] [ 0 ] - board [ 1 ] [ 0 ] , board [ 1 ] [ 0 ] - board [ 2 ] [ 0 ] ] horizontal_ok = ( 1 .. 2 ) . all? do | i | [ board [ i ] [ 0 ] - board [ i ] [ 1 ] , board [ i ] [ 1 ] - board [ i ] [ 2 ] ] == horizontal_diff_list end vertical_ok = ( 1 .. 2 ) . all? do | j | [ board [ 0 ] [ j ] - board [ 1 ] [ j ] , board [ 1 ] [ j ] - board [ 2 ] [ j ] ] == vertical_diff_list end ans = horizontal_ok && vertical_ok ? ' Yes ' : ' No ' puts ans
require ' prime ' s = gets . split . map { | i | i . to_i } ans = 1 prime_num = Prime . prime_division ( s [ 1 ] ) prime_num . each do | num | if num [ 1 ] / s [ 0 ] >= 1 ans *= num [ 0 ] ** ( num [ 1 ] / s [ 0 ] ) end end puts ans
K , S = gets . split . map { | i | i . to_i } c = 0 ( 0 .. K ) . each { | x | next if x + K * 2 < S ( 0 .. K ) . each { | y | z = S - x - y next if z > K next if z < 0 c += 1 } } puts c
n = gets . to_i if n == 1 puts n exit end ary = [ 2 ] 6 . times { ary << ary [ - 1 ] * 2 } ary . each_cons ( 2 ) do | a , b | if ( a ... b ) . include? ( n ) puts a exit end end
p 1 << ( gets . to_i . bit_length - 1 )
n = gets . to_i array = [ ] ( 1 .. n ) . each do | num | cnt = 0 while true if num % 2 == 0 cnt += 1 num /= 2 else break end end array . push ( cnt ) end puts 2 ** array . max
class Problem attr_accessor :a , :b , :n , :m , :h , :w def initialize @a = gets . to_s . split . map { | v | v . to_i } end def solve a . sort == [ 5 , 5 , 7 ] end def show ( ans ) puts ans ? " YES " : " NO " end end Problem . new . instance_eval do show ( solve ) end
a = [ ] 3 . times do a << gets . split . map ( & :to_i ) end m = Array . new ( 2 ) { Array . new ( 3 , 0 ) } mm = Array . new ( 2 ) { Array . new ( 3 , 0 ) } 2 . times do | i | 3 . times do | j | m [ i ] [ j ] = a [ j ] [ i + 1 ] - a [ j ] [ i + 1 ] mm [ i ] [ j ] = a [ i ] [ j ] - a [ i + 1 ] [ j ] end end 2 . times do | i | if ( 1 < m [ i ] . uniq . size or 1 < mm [ i ] . uniq . size ) puts " No " exit end end puts " Yes "
a = gets . chomp . to_i b = gets . chomp . to_i c = gets . chomp . to_i d = gets . chomp . to_i e = gets . chomp . to_i k = gets . chomp . to_i if e - a <= k puts " Yay! " else puts " :( " end
arr = Array . new ( 6 , 0 ) arr . size . times do | i | arr [ i ] = gets . to_i end if arr [ 4 ] - arr [ 0 ] > arr [ 5 ] puts ' :( ' else puts ' Yay! ' end
gets . to_i nums = gets . split ( ' ' ) . map ( & :to_i ) c = 0 min = nums [ 0 ] nums . each do | n | c += 1 if min >= n min = n if min >= n end puts c
gets ; puts gets . split ( ' ' ) . uniq . size == 3 ? " Three " : " Four "
n = gets . to_i def division_times ( k ) t = 0 while ( k % 2 ) . zero? k /= 2 t += 1 end t end max_times = 0 fav_num = 1 ( 2 .. n ) . each do | k | if division_times ( k ) > max_times max_times = division_times ( k ) fav_num = k end end puts fav_num
n = gets . to_i t = 1.0 * 4 / n a = [ ] b = [ 0 ] 1 . upto ( 3500 ) do | i | b << 1.0 / i end 1 . upto ( 3500 ) do | i | gg = b [ i ] i . upto ( 3500 ) do | j | g = t - gg - b [ j ] if g > 0 if ( ggg = ( 1.0 / g ) . round ) <= 3500 && ( g - ( b [ ggg ] ) ) . abs <= 0.000000000001 a << [ i , j , ggg ] a << [ i , j , ggg + 1 ] end end end end a . each do | e | if e [ 0 ] * e [ 1 ] * e [ 2 ] * 4 == ( e [ 0 ] * e [ 1 ] + e [ 0 ] * e [ 2 ] + e [ 2 ] * e [ 1 ] ) * n puts e . * " " break end end
puts ` dd ` [ ?Y ] ? :Four : :Three
n = gets . to_i ans = 2 div = true while div if n == 1 puts 1 div = false elsif ans * 2 <= n ans *= 2 else puts ans div = false end end
array = [ ] 5 . times do array << gets . chomp . to_i end k = gets . chomp . to_i out = 0 5 . times do | i | i + 1 . times do | j | if array [ i ] - array [ j ] > k out += 1 end end end puts out == 0 ? ' Yay! ' : ' :( '
a = Array . new ( 5 ) { gets . to_i } k = gets . to_i ans = true a . each_with_index { | x , i | a . each_with_index { | y , j | next if i >= j if y - x > k ans = false break end } break unless ans } puts ( ans ? " Yay! " : " :( " )
gets ; puts ( gets . chomp . split . uniq . size == 3 ) ? " Three " : " Four "
n , * a = $< . map { | l | l . split . map & :to_i } ; t = 1 ; a . zip ( n ) { | x , m | i = s = 0 ; x . map { | k | s += k . * ~ m + i += 2 } ; t *= s } ; p t . % 10 ** 9 + 7
a = gets . to_i b = gets . to_i c = gets . to_i d = gets . to_i e = gets . to_i k = gets . to_i array = [ a , b , c , d , e ] puts e - a > k ? " :( " : " Yay! "
m = gets . to_i nums = gets . split . map ( & :to_i ) c = 0 nums . each { | val | if val <= m m = val c += 1 end } puts c
* p , k = STDIN . read . split ( " \n " ) . map ( & :to_i ) if p . max - p . min <= k print " Yay! " else print " :( " end
* a , k = ` dd ` . split . map & :to_i a . sort! if a [ 4 ] - a [ 0 ] > k puts " :( " else puts " Yay! " end
puts 2 ** Math . log2 ( gets . to_i ) . floor
n = gets . to_i nums = gets . split . map ( & :to_i ) min = nums [ 0 ] res = 0 nums . each do | num | if num <= min res += 1 min = num end end puts res
require ' prime ' input = STDIN . read . chomp . split ( " " ) N = input [ 0 ] . to_i P = input [ 1 ] . to_i d = Prime . prime_division ( P ) primes = [ ] if d . length == 0 puts 1 elsif N == 1 puts P else d . sort_by { | r | r [ 0 ] } . reverse . each { | r | if r [ 1 ] >= N for j in 1 .. ( r [ 1 ] / N ) primes . push ( r [ 0 ] ) end end } puts primes . reduce ( 1 ) { | a , b | a * b } end
MOD = 10 ** 9 + 7 cnt = 0 ; sum = 0 ; prev = nil ; can = true ; h = Hash . new ( 0 ) def gs ( ) gets . chomp end def gi ( ) gets . chomp . to_i end def gsmi ( ) gets . chomp . split . map ( & :to_i ) end def desc ( ar ) ar . sort! { | x , y | y <=> x } end def min ( a , b ) a <= b ? a : b end def max ( a , b ) a >= b ? a : b end def sum ( ar ) ar . inject ( :+ ) end def C ( a , b ) b == 0 || a == b ? 1 : ( b = a - b if a / 2 < b ; ( a - b + 1 .. a ) . inject ( :* ) / ( 1 .. b ) . inject ( :* ) ) end def rui ( ar ) s = [ 0 ] ; ar . size . times { | i | s <<s [ - 1 ] + ar [ i ] } ; s end def rev_rui ( ar ) s = [ 0 ] ; ar . size . times . reverse_each { | i | s <<s [ - 1 ] + ar [ i ] } ; s end def puts_yesno ( b ) puts ( b ? ' Yes ' : ' No ' ) end def putsend ( s ) puts s ; exit end def debug ( k , v ) puts " n = gi pp = gsmi prevmin = 2 * 10 ** 5 + 1 n . times do | i | cnt += 1 if prevmin >= pp [ i ] prevmin = pp [ i ] if prevmin > pp [ i ] end puts cnt
n = gets . to_i count = 0 while n > 1 n /= 2 count += 1 end puts 2 ** count
k , s = gets . split . map ( & :to_i ) count = 0 0 . upto ( k ) do | x | 0 . upto ( k ) do | y | z = s - x - y if z . between? ( 0 , k ) count += 1 end end end puts count
n = gets . to_i a = gets . split . map ( & :to_i ) b = gets . split . map ( & :to_i ) plus = [ ] minus = [ ] minus_sum = 0 plus_sum = 0 for i in 0 .. n - 1 v = a [ i ] - b [ i ] if v > 0 plus << v plus_sum += v elsif v < 0 minus << v minus_sum += v . abs end end if plus_sum < minus_sum p - 1 exit end plus . sort! plus = plus . reverse count = minus . length while minus_sum > 0 minus_sum -= plus . shift count += 1 end p count
N = gets . split . map ( & :to_i ) i = 1 while true if ( i > N [ 0 ] ) if ( N [ 0 ] == 1 ) puts ( " 1 " ) break end puts ( " break end i = i * 2 end
